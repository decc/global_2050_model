# coding: utf-8
# Test for global_2050_model
require 'rubygems'
gem 'minitest'
require 'test/unit'
require_relative '../lib/global_2050_model'

class TestGlobal2050Model < Test::Unit::TestCase
  def spreadsheet; @spreadsheet ||= init_spreadsheet; end
  def init_spreadsheet; Global2050Model end

  # start of Control
def test_control_d5
  r = spreadsheet.control_d5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Population",r[:string].force_encoding('utf-8'))
end

def test_control_f5
  r = spreadsheet.control_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_control_h5
  r = spreadsheet.control_h5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~10.6 billion people",r[:string].force_encoding('utf-8'))
end

def test_control_i5
  r = spreadsheet.control_i5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~9.3 billion people",r[:string].force_encoding('utf-8'))
end

def test_control_j5
  r = spreadsheet.control_j5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~8.1 billion people",r[:string].force_encoding('utf-8'))
end

def test_control_k5
  r = spreadsheet.control_k5
  assert_equal(:ExcelString,r[:type])
  assert_equal("No Level 4",r[:string].force_encoding('utf-8'))
end

def test_control_u5
  r = spreadsheet.control_u5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Population by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_y5
  r = spreadsheet.control_y5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10614317802.0,r[:number],0.001)
end

def test_control_d6
  r = spreadsheet.control_d6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Households",r[:string].force_encoding('utf-8'))
end

def test_control_f6
  r = spreadsheet.control_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_control_h6
  r = spreadsheet.control_h6
  assert_equal(:ExcelString,r[:type])
  assert_equal("2.4 people per household",r[:string].force_encoding('utf-8'))
end

def test_control_i6
  r = spreadsheet.control_i6
  assert_equal(:ExcelString,r[:type])
  assert_equal("3.7 people per household",r[:string].force_encoding('utf-8'))
end

def test_control_j6
  r = spreadsheet.control_j6
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 people per household",r[:string].force_encoding('utf-8'))
end

def test_control_k6
  r = spreadsheet.control_k6
  assert_equal(:ExcelString,r[:type])
  assert_equal("No Level 4",r[:string].force_encoding('utf-8'))
end

def test_control_u6
  r = spreadsheet.control_u6
  assert_equal(:ExcelString,r[:type])
  assert_equal("People per household",r[:string].force_encoding('utf-8'))
end

def test_control_y6
  r = spreadsheet.control_y6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4,r[:number],0.001)
end

def test_control_m7
  r = spreadsheet.control_m7
  assert_equal(:ExcelString,r[:type])
  assert_equal("1 (or A)",r[:string].force_encoding('utf-8'))
end

def test_control_n7
  r = spreadsheet.control_n7
  assert_equal(:ExcelString,r[:type])
  assert_equal("2 (or B)",r[:string].force_encoding('utf-8'))
end

def test_control_o7
  r = spreadsheet.control_o7
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 (or C)",r[:string].force_encoding('utf-8'))
end

def test_control_p7
  r = spreadsheet.control_p7
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 (or D)",r[:string].force_encoding('utf-8'))
end

def test_control_be7
  r = spreadsheet.control_be7
  assert_equal(:ExcelString,r[:type])
  assert_equal("1 (or A)",r[:string].force_encoding('utf-8'))
end

def test_control_bf7
  r = spreadsheet.control_bf7
  assert_equal(:ExcelString,r[:type])
  assert_equal("2 (or B)",r[:string].force_encoding('utf-8'))
end

def test_control_bg7
  r = spreadsheet.control_bg7
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 (or C)",r[:string].force_encoding('utf-8'))
end

def test_control_bh7
  r = spreadsheet.control_bh7
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 (or D)",r[:string].force_encoding('utf-8'))
end

def test_control_d8
  r = spreadsheet.control_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f8
  r = spreadsheet.control_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h8
  r = spreadsheet.control_h8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~590 GW installed capacity from ~200 power stations",r[:string].force_encoding('utf-8'))
end

def test_control_i8
  r = spreadsheet.control_i8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~740 GW installed capacity from ~250 power stations",r[:string].force_encoding('utf-8'))
end

def test_control_j8
  r = spreadsheet.control_j8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,100 GW installed capacity from ~370 power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k8
  r = spreadsheet.control_k8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~3,600 GW installed capacity from ~1,200 power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m8
  r = spreadsheet.control_m8
  assert_equal(:ExcelString,r[:type])
  assert_equal("No new nuclear power installed; estimated closure of final plant in 2035",r[:string].force_encoding('utf-8'))
end

def test_control_n8
  r = spreadsheet.control_n8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13 3GW power stations delivering ~280 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_o8
  r = spreadsheet.control_o8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30 3GW power stations delivering ~630 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_p8
  r = spreadsheet.control_p8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~50 3GW power stations delivering ~1030 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_be8
  r = spreadsheet.control_be8
  assert_equal(:ExcelString,r[:type])
  assert_equal("No new nuclear power installed. Final nuclear power stattion estimated to close in 2035",r[:string].force_encoding('utf-8'))
end

def test_control_bf8
  r = spreadsheet.control_bf8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13 3GW nuclear power stations delivering ~280 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bg8
  r = spreadsheet.control_bg8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30 3GW nuclear power stations delivering ~630 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bh8
  r = spreadsheet.control_bh8
  assert_equal(:ExcelString,r[:type])
  assert_equal("~50 3GW nuclear power stations delivering ~1030 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d9
  r = spreadsheet.control_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_control_d10
  r = spreadsheet.control_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f10
  r = spreadsheet.control_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h10
  r = spreadsheet.control_h10
  assert_equal(:ExcelString,r[:type])
  assert_equal("No CCS ",r[:string].force_encoding('utf-8'))
end

def test_control_i10
  r = spreadsheet.control_i10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~200 GW from ~160 CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_control_j10
  r = spreadsheet.control_j10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~960 GW from ~800 CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k10
  r = spreadsheet.control_k10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~3,900 GW from ~3,200 CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m10
  r = spreadsheet.control_m10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Demonstration plants only; no roll-out of CCS",r[:string].force_encoding('utf-8'))
end

def test_control_n10
  r = spreadsheet.control_n10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~240 TWh/yr from 25-40 CCS power stations; comparable to current gas & coal generation",r[:string].force_encoding('utf-8'))
end

def test_control_o10
  r = spreadsheet.control_o10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~340 TWh/yr from 35-60 CCS power stations; comparable to total current demand",r[:string].force_encoding('utf-8'))
end

def test_control_p10
  r = spreadsheet.control_p10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~510 TWh/yr  from 50-90 CCS power stations; build rate of gas plants in the 1990s",r[:string].force_encoding('utf-8'))
end

def test_control_be10
  r = spreadsheet.control_be10
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS demonstration plants only",r[:string].force_encoding('utf-8'))
end

def test_control_bf10
  r = spreadsheet.control_bf10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~240 TWh/yr from 25-40 CCS power stations - comparable to current gas & coal generation",r[:string].force_encoding('utf-8'))
end

def test_control_bg10
  r = spreadsheet.control_bg10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~340 TWh/yr from 35-60 CCS power stations - comparable to total current demand",r[:string].force_encoding('utf-8'))
end

def test_control_bh10
  r = spreadsheet.control_bh10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~510 TWh/yr  from 50-90 CCS power stations - this requires a similar build rate to that of gas plants in the 1990s",r[:string].force_encoding('utf-8'))
end

def test_control_d11
  r = spreadsheet.control_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS power station fuel mix",r[:string].force_encoding('utf-8'))
end

def test_control_f11
  r = spreadsheet.control_f11
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h11
  r = spreadsheet.control_h11
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% coal/biomass, 0% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_i11
  r = spreadsheet.control_i11
  assert_equal(:ExcelString,r[:type])
  assert_equal("66% coal/biomass, 33% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_j11
  r = spreadsheet.control_j11
  assert_equal(:ExcelString,r[:type])
  assert_equal("33% coal/biomass, 66% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_k11
  r = spreadsheet.control_k11
  assert_equal(:ExcelString,r[:type])
  assert_equal("0% coal/biomas, 100% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_m11
  r = spreadsheet.control_m11
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% coal/biomass, 0% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_n11
  r = spreadsheet.control_n11
  assert_equal(:ExcelString,r[:type])
  assert_equal("66% coal/biomass, 33% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_o11
  r = spreadsheet.control_o11
  assert_equal(:ExcelString,r[:type])
  assert_equal("33% coal/biomass, 66% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_p11
  r = spreadsheet.control_p11
  assert_equal(:ExcelString,r[:type])
  assert_equal("0% coal/biomas, 100% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_be11
  r = spreadsheet.control_be11
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, all CCS electricity is from solid fuel (coal or biomass)",r[:string].force_encoding('utf-8'))
end

def test_control_bf11
  r = spreadsheet.control_bf11
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, two thirds of CCS electricity is from solid fuel (coal or biomass), one third from gas (natural gas or biogas)",r[:string].force_encoding('utf-8'))
end

def test_control_bg11
  r = spreadsheet.control_bg11
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, one third of CCS electricity is from solid fuel (coal or biomass), two thirds from gas (natural gas or biogas)",r[:string].force_encoding('utf-8'))
end

def test_control_bh11
  r = spreadsheet.control_bh11
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, all CCS electricity is from gas (natural gas or biogas)",r[:string].force_encoding('utf-8'))
end

def test_control_d12
  r = spreadsheet.control_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_control_f12
  r = spreadsheet.control_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h12
  r = spreadsheet.control_h12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~120 GW installed capacity from ~21,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_i12
  r = spreadsheet.control_i12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~170 GW installed capacity from ~29,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_j12
  r = spreadsheet.control_j12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~590 GW installed capacity from ~101,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_k12
  r = spreadsheet.control_k12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,550 GW installed capacity from ~267,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_m12
  r = spreadsheet.control_m12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,400 turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_n12
  r = spreadsheet.control_n12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~10,000 turbines in 2050, delivering ~180 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_o12
  r = spreadsheet.control_o12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~17,000 turbines in 2050, delivering ~310 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_p12
  r = spreadsheet.control_p12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~40,000 turbines in 2050, delivering ~430 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_be12
  r = spreadsheet.control_be12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,400 offshore wind turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_bf12
  r = spreadsheet.control_bf12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~10,000 offshore wind turbines in 2050, delivering ~180 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bg12
  r = spreadsheet.control_bg12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~17,000 offshore wind turbines in 2050, delivering ~310 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bh12
  r = spreadsheet.control_bh12
  assert_equal(:ExcelString,r[:type])
  assert_equal("~40,000 offshore wind turbines in 2050, delivering ~430 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d13
  r = spreadsheet.control_d13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_control_f13
  r = spreadsheet.control_f13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h13
  r = spreadsheet.control_h13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~890 GW installed capacity from ~356,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_i13
  r = spreadsheet.control_i13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1400 GW installed capacity from ~560,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_j13
  r = spreadsheet.control_j13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,750 GW installed capacity from ~700,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_k13
  r = spreadsheet.control_k13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~3,150 GW installed capacity from ~1,260,000 wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_m13
  r = spreadsheet.control_m13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,400 turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_n13
  r = spreadsheet.control_n13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~8,000 turbines in 2050, delivering ~50 TWh/yr. ",r[:string].force_encoding('utf-8'))
end

def test_control_o13
  r = spreadsheet.control_o13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,000 turbines in 2050, delivering ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_p13
  r = spreadsheet.control_p13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~20,000 turbines in 2050, delivering ~130 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_be13
  r = spreadsheet.control_be13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,400 onshore wind turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_bf13
  r = spreadsheet.control_bf13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~8,000 onshore wind turbines in 2050, delivering ~50 TWh/yr. ",r[:string].force_encoding('utf-8'))
end

def test_control_bg13
  r = spreadsheet.control_bg13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,000 onshore wind turbines in 2050, delivering ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bh13
  r = spreadsheet.control_bh13
  assert_equal(:ExcelString,r[:type])
  assert_equal("~20,000 onshore wind turbines in 2050, delivering ~130 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d14
  r = spreadsheet.control_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ocean",r[:string].force_encoding('utf-8'))
end

def test_control_f14
  r = spreadsheet.control_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h14
  r = spreadsheet.control_h14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~50 GW installed capacity from ~1,500km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_i14
  r = spreadsheet.control_i14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~80 GW installed capacity from ~2,400km wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_j14
  r = spreadsheet.control_j14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~230 GW installed capacity from ~6,900km wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_k14
  r = spreadsheet.control_k14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~460 GW installed capacity from ~13,800km wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_m14
  r = spreadsheet.control_m14
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_n14
  r = spreadsheet.control_n14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~300km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_o14
  r = spreadsheet.control_o14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~600km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_p14
  r = spreadsheet.control_p14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~900km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_be14
  r = spreadsheet.control_be14
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bf14
  r = spreadsheet.control_bf14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~300km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_bg14
  r = spreadsheet.control_bg14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~600km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_bh14
  r = spreadsheet.control_bh14
  assert_equal(:ExcelString,r[:type])
  assert_equal("~900km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_d15
  r = spreadsheet.control_d15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar panels for electricity",r[:string].force_encoding('utf-8'))
end

def test_control_f15
  r = spreadsheet.control_f15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h15
  r = spreadsheet.control_h15
  assert_equal(:ExcelString,r[:type])
  assert_equal("~0.4m2 installed area per person delivering ~380 GW",r[:string].force_encoding('utf-8'))
end

def test_control_i15
  r = spreadsheet.control_i15
  assert_equal(:ExcelString,r[:type])
  assert_equal("~0.8m2 installed area per person delivering ~820 GW",r[:string].force_encoding('utf-8'))
end

def test_control_j15
  r = spreadsheet.control_j15
  assert_equal(:ExcelString,r[:type])
  assert_equal("~2m2 installed area per person delivering ~2,000 GW",r[:string].force_encoding('utf-8'))
end

def test_control_k15
  r = spreadsheet.control_k15
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4.6m2 installed area per person delivering ~4,670 GW installed capacity",r[:string].force_encoding('utf-8'))
end

def test_control_m15
  r = spreadsheet.control_m15
  assert_equal(:ExcelString,r[:type])
  assert_equal("No significant solar PV capacity is installed",r[:string].force_encoding('utf-8'))
end

def test_control_n15
  r = spreadsheet.control_n15
  assert_equal(:ExcelString,r[:type])
  assert_equal("4m2 of photovoltaic panels per person in 2050, supplying ~60 TWh/yr of electricity",r[:string].force_encoding('utf-8'))
end

def test_control_o15
  r = spreadsheet.control_o15
  assert_equal(:ExcelString,r[:type])
  assert_equal(" 5.4m2 of photovoltaic panels per person in 2050, supplying ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_p15
  r = spreadsheet.control_p15
  assert_equal(:ExcelString,r[:type])
  assert_equal("9.5m2 of photovoltaic panels per person – all suitable roof and facade space used",r[:string].force_encoding('utf-8'))
end

def test_control_be15
  r = spreadsheet.control_be15
  assert_equal(:ExcelString,r[:type])
  assert_equal("No significant solar PV capacity is installed",r[:string].force_encoding('utf-8'))
end

def test_control_bf15
  r = spreadsheet.control_bf15
  assert_equal(:ExcelString,r[:type])
  assert_equal("4m2 of photovoltaic panels per person in 2050, supplying ~60 TWh/yr of electricity",r[:string].force_encoding('utf-8'))
end

def test_control_bg15
  r = spreadsheet.control_bg15
  assert_equal(:ExcelString,r[:type])
  assert_equal(" 5.4m2 of photovoltaic panels per person in 2050, supplying ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bh15
  r = spreadsheet.control_bh15
  assert_equal(:ExcelString,r[:type])
  assert_equal("9.5m2 of photovoltaic panels per person – all suitable roof and facade space used",r[:string].force_encoding('utf-8'))
end

def test_control_d16
  r = spreadsheet.control_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar panels for hot water",r[:string].force_encoding('utf-8'))
end

def test_control_f16
  r = spreadsheet.control_f16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h16
  r = spreadsheet.control_h16
  assert_equal(:ExcelString,r[:type])
  assert_equal("0 m2 installed area per household",r[:string].force_encoding('utf-8'))
end

def test_control_i16
  r = spreadsheet.control_i16
  assert_equal(:ExcelString,r[:type])
  assert_equal("1 m2 installed area per household",r[:string].force_encoding('utf-8'))
end

def test_control_j16
  r = spreadsheet.control_j16
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 m2 installed area per household",r[:string].force_encoding('utf-8'))
end

def test_control_k16
  r = spreadsheet.control_k16
  assert_equal(:ExcelString,r[:type])
  assert_equal("6 m2 installed area per household",r[:string].force_encoding('utf-8'))
end

def test_control_m16
  r = spreadsheet.control_m16
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today, a negligible proportion of buildings have solar thermal in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_n16
  r = spreadsheet.control_n16
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30% of suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_o16
  r = spreadsheet.control_o16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_p16
  r = spreadsheet.control_p16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~60% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_be16
  r = spreadsheet.control_be16
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today, a negligible proportion of buildings have solar thermal in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bf16
  r = spreadsheet.control_bf16
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30% of suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_bg16
  r = spreadsheet.control_bg16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_bh16
  r = spreadsheet.control_bh16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~60% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_d17
  r = spreadsheet.control_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal electricity",r[:string].force_encoding('utf-8'))
end

def test_control_f17
  r = spreadsheet.control_f17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h17
  r = spreadsheet.control_h17
  assert_equal(:ExcelString,r[:type])
  assert_equal("~50 GW installed capacity from ~5,000 geothermal power stations",r[:string].force_encoding('utf-8'))
end

def test_control_i17
  r = spreadsheet.control_i17
  assert_equal(:ExcelString,r[:type])
  assert_equal("~80 GW installed capacity from ~8,000 geothermal power stations",r[:string].force_encoding('utf-8'))
end

def test_control_j17
  r = spreadsheet.control_j17
  assert_equal(:ExcelString,r[:type])
  assert_equal("~140 GW installed capacity from ~14,000 geothermal power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k17
  r = spreadsheet.control_k17
  assert_equal(:ExcelString,r[:type])
  assert_equal("~200 GW installed capacity from ~20,000 geothermal power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m17
  r = spreadsheet.control_m17
  assert_equal(:ExcelString,r[:type])
  assert_equal("No deployment of geothermal electricity generation",r[:string].force_encoding('utf-8'))
end

def test_control_n17
  r = spreadsheet.control_n17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows slowly to 7 TWh/yr in 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_o17
  r = spreadsheet.control_o17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows quickly reaching 21 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_p17
  r = spreadsheet.control_p17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows rapidly reaching 35 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_be17
  r = spreadsheet.control_be17
  assert_equal(:ExcelString,r[:type])
  assert_equal("No deployment of geothermal electricity generation",r[:string].force_encoding('utf-8'))
end

def test_control_bf17
  r = spreadsheet.control_bf17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows slowly to 7 TWh/yr in 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_bg17
  r = spreadsheet.control_bg17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows quickly reaching 21 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_bh17
  r = spreadsheet.control_bh17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows rapidly reaching 35 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_d18
  r = spreadsheet.control_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f18
  r = spreadsheet.control_f18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h18
  r = spreadsheet.control_h18
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,600 GW installed capacity from ~1,600 hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_control_i18
  r = spreadsheet.control_i18
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,880 GW installed capacity from ~1,880 hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_control_j18
  r = spreadsheet.control_j18
  assert_equal(:ExcelString,r[:type])
  assert_equal("~2,200 GW installed capacity from ~2,200 hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k18
  r = spreadsheet.control_k18
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,400 GW installed capacity from ~4,400 hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m18
  r = spreadsheet.control_m18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of electricity is maintained at current levels of 5 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_n18
  r = spreadsheet.control_n18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows slowly, reaching 7 TWh/yr by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_o18
  r = spreadsheet.control_o18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows more quickly, reaching 8 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_p18
  r = spreadsheet.control_p18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows rapidly reaching 13 TWh/yr by 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_be18
  r = spreadsheet.control_be18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity is maintained at current levels of 5 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bf18
  r = spreadsheet.control_bf18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity grows slowly, reaching 7 TWh/yr by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bg18
  r = spreadsheet.control_bg18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity grows more quickly, reaching 8 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_bh18
  r = spreadsheet.control_bh18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity grows rapidly reaching 13 TWh/yr by 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_d19
  r = spreadsheet.control_d19
  assert_equal(:ExcelString,r[:type])
  assert_equal("CSP",r[:string].force_encoding('utf-8'))
end

def test_control_f19
  r = spreadsheet.control_f19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h19
  r = spreadsheet.control_h19
  assert_equal(:ExcelString,r[:type])
  assert_equal("~100 GW installed capacity from ~37,000 ha of desert",r[:string].force_encoding('utf-8'))
end

def test_control_i19
  r = spreadsheet.control_i19
  assert_equal(:ExcelString,r[:type])
  assert_equal("~330 GW installed capacity from ~120,000 ha of desert",r[:string].force_encoding('utf-8'))
end

def test_control_j19
  r = spreadsheet.control_j19
  assert_equal(:ExcelString,r[:type])
  assert_equal("~860 GW installed capacity from ~320,000 ha of desert",r[:string].force_encoding('utf-8'))
end

def test_control_k19
  r = spreadsheet.control_k19
  assert_equal(:ExcelString,r[:type])
  assert_equal("~2,000 GW installed capacity from ~740,000 ha of desert",r[:string].force_encoding('utf-8'))
end

def test_control_m19
  r = spreadsheet.control_m19
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electricity imports, other than for balancing",r[:string].force_encoding('utf-8'))
end

def test_control_n19
  r = spreadsheet.control_n19
  assert_equal(:ExcelString,r[:type])
  assert_equal("30 TWh/yr of electricity imported from Southern Europe",r[:string].force_encoding('utf-8'))
end

def test_control_o19
  r = spreadsheet.control_o19
  assert_equal(:ExcelString,r[:type])
  assert_equal("70 TWh/yr imported from UK 10% share of international desert solar project ",r[:string].force_encoding('utf-8'))
end

def test_control_p19
  r = spreadsheet.control_p19
  assert_equal(:ExcelString,r[:type])
  assert_equal("140 TWh/yr imported from UK 20% share of international desert solar project",r[:string].force_encoding('utf-8'))
end

def test_control_be19
  r = spreadsheet.control_be19
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electricity imports, other than for balancing",r[:string].force_encoding('utf-8'))
end

def test_control_bf19
  r = spreadsheet.control_bf19
  assert_equal(:ExcelString,r[:type])
  assert_equal("30 TWh/yr of electricity imported from Southern Europe",r[:string].force_encoding('utf-8'))
end

def test_control_bg19
  r = spreadsheet.control_bg19
  assert_equal(:ExcelString,r[:type])
  assert_equal("70 TWh/yr of electricity imported from a 10% share of an internationally coordinated desert solar project ",r[:string].force_encoding('utf-8'))
end

def test_control_bh19
  r = spreadsheet.control_bh19
  assert_equal(:ExcelString,r[:type])
  assert_equal("140 TWh/yr of electricity imported from a 20% share of an internationally coordinated desert solar project",r[:string].force_encoding('utf-8'))
end

def test_control_d20
  r = spreadsheet.control_d20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Food ",r[:string].force_encoding('utf-8'))
end

def test_control_d21
  r = spreadsheet.control_d21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Food Demand",r[:string].force_encoding('utf-8'))
end

def test_control_f21
  r = spreadsheet.control_f21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h21
  r = spreadsheet.control_h21
  assert_equal(:ExcelString,r[:type])
  assert_equal("3952 kcal daily intake per person including waste (US) ",r[:string].force_encoding('utf-8'))
end

def test_control_i21
  r = spreadsheet.control_i21
  assert_equal(:ExcelString,r[:type])
  assert_equal("3678 kcal daily intake per person including waste (UK) ",r[:string].force_encoding('utf-8'))
end

def test_control_j21
  r = spreadsheet.control_j21
  assert_equal(:ExcelString,r[:type])
  assert_equal("3034 kcal daily intake per person including waste (World) ",r[:string].force_encoding('utf-8'))
end

def test_control_k21
  r = spreadsheet.control_k21
  assert_equal(:ExcelString,r[:type])
  assert_equal("3254 kcal daily intake per person including waste (China) ",r[:string].force_encoding('utf-8'))
end

def test_control_m21
  r = spreadsheet.control_m21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy crops and food production similar to today",r[:string].force_encoding('utf-8'))
end

def test_control_n21
  r = spreadsheet.control_n21
  assert_equal(:ExcelString,r[:type])
  assert_equal("5% of land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_o21
  r = spreadsheet.control_o21
  assert_equal(:ExcelString,r[:type])
  assert_equal("10% of land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_p21
  r = spreadsheet.control_p21
  assert_equal(:ExcelString,r[:type])
  assert_equal("17% of land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_be21
  r = spreadsheet.control_be21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy crops and food production similar to today",r[:string].force_encoding('utf-8'))
end

def test_control_bf21
  r = spreadsheet.control_bf21
  assert_equal(:ExcelString,r[:type])
  assert_equal("5% of UK land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_bg21
  r = spreadsheet.control_bg21
  assert_equal(:ExcelString,r[:type])
  assert_equal("10% of UK land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_bh21
  r = spreadsheet.control_bh21
  assert_equal(:ExcelString,r[:type])
  assert_equal("17% of UK land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_d22
  r = spreadsheet.control_d22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Diet",r[:string].force_encoding('utf-8'))
end

def test_control_f22
  r = spreadsheet.control_f22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h22
  r = spreadsheet.control_h22
  assert_equal(:ExcelString,r[:type])
  assert_equal("12% diet from meat (US)",r[:string].force_encoding('utf-8'))
end

def test_control_i22
  r = spreadsheet.control_i22
  assert_equal(:ExcelString,r[:type])
  assert_equal("8% diet from meat (World)",r[:string].force_encoding('utf-8'))
end

def test_control_j22
  r = spreadsheet.control_j22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Vegetarian diet (no meat)",r[:string].force_encoding('utf-8'))
end

def test_control_k22
  r = spreadsheet.control_k22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Vegan diet (no meat/dairy)",r[:string].force_encoding('utf-8'))
end

def test_control_m22
  r = spreadsheet.control_m22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers increase by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_n22
  r = spreadsheet.control_n22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers same as today",r[:string].force_encoding('utf-8'))
end

def test_control_o22
  r = spreadsheet.control_o22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_p22
  r = spreadsheet.control_p22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 20%",r[:string].force_encoding('utf-8'))
end

def test_control_be22
  r = spreadsheet.control_be22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers increase by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_bf22
  r = spreadsheet.control_bf22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers same as today",r[:string].force_encoding('utf-8'))
end

def test_control_bg22
  r = spreadsheet.control_bg22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_bh22
  r = spreadsheet.control_bh22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 20%",r[:string].force_encoding('utf-8'))
end

def test_control_d23
  r = spreadsheet.control_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Crop yields",r[:string].force_encoding('utf-8'))
end

def test_control_f23
  r = spreadsheet.control_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h23
  r = spreadsheet.control_h23
  assert_equal(:ExcelString,r[:type])
  assert_equal("0% increase in yields pa",r[:string].force_encoding('utf-8'))
end

def test_control_i23
  r = spreadsheet.control_i23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average 0.5% increase in yields pa",r[:string].force_encoding('utf-8'))
end

def test_control_j23
  r = spreadsheet.control_j23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average 1.1% increase in yields pa",r[:string].force_encoding('utf-8'))
end

def test_control_k23
  r = spreadsheet.control_k23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average 1.3% increase in yields pa",r[:string].force_encoding('utf-8'))
end

def test_control_d24
  r = spreadsheet.control_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock yields and grazing",r[:string].force_encoding('utf-8'))
end

def test_control_f24
  r = spreadsheet.control_f24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h24
  r = spreadsheet.control_h24
  assert_equal(:ExcelString,r[:type])
  assert_equal("All animals fed from pasture (low feed efficiency)",r[:string].force_encoding('utf-8'))
end

def test_control_i24
  r = spreadsheet.control_i24
  assert_equal(:ExcelString,r[:type])
  assert_equal("66% animals fed by pasture / 33% intensively farmed",r[:string].force_encoding('utf-8'))
end

def test_control_j24
  r = spreadsheet.control_j24
  assert_equal(:ExcelString,r[:type])
  assert_equal("33% animals fed by pasture / 66% intensively farmed",r[:string].force_encoding('utf-8'))
end

def test_control_k24
  r = spreadsheet.control_k24
  assert_equal(:ExcelString,r[:type])
  assert_equal("All animals intensively farmed (high feed efficiency)",r[:string].force_encoding('utf-8'))
end

def test_control_d25
  r = spreadsheet.control_d25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass Supply",r[:string].force_encoding('utf-8'))
end

def test_control_d26
  r = spreadsheet.control_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal(" Biomass Supply from crops",r[:string].force_encoding('utf-8'))
end

def test_control_f26
  r = spreadsheet.control_f26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h26
  r = spreadsheet.control_h26
  assert_equal(:ExcelString,r[:type])
  assert_equal("~430 TWh supplied from crops",r[:string].force_encoding('utf-8'))
end

def test_control_i26
  r = spreadsheet.control_i26
  assert_equal(:ExcelString,r[:type])
  assert_equal("~780 TWh supplied from crops",r[:string].force_encoding('utf-8'))
end

def test_control_j26
  r = spreadsheet.control_j26
  assert_equal(:ExcelString,r[:type])
  assert_equal("~16,700 TWh supplied from crops",r[:string].force_encoding('utf-8'))
end

def test_control_k26
  r = spreadsheet.control_k26
  assert_equal(:ExcelString,r[:type])
  assert_equal("~33,300 TWh supplied from crops",r[:string].force_encoding('utf-8'))
end

def test_control_d27
  r = spreadsheet.control_d27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass Supply from waste and collection",r[:string].force_encoding('utf-8'))
end

def test_control_f27
  r = spreadsheet.control_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h27
  r = spreadsheet.control_h27
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,300 TWh supplied from waste and collection",r[:string].force_encoding('utf-8'))
end

def test_control_i27
  r = spreadsheet.control_i27
  assert_equal(:ExcelString,r[:type])
  assert_equal("~7,800 TWh supplied from waste and collection",r[:string].force_encoding('utf-8'))
end

def test_control_j27
  r = spreadsheet.control_j27
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,200 TWh supplied from waste and collection",r[:string].force_encoding('utf-8'))
end

def test_control_k27
  r = spreadsheet.control_k27
  assert_equal(:ExcelString,r[:type])
  assert_equal("~43,500 TWh supplied from waste and collection",r[:string].force_encoding('utf-8'))
end

def test_control_d28
  r = spreadsheet.control_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Type of fuels from biomass",r[:string].force_encoding('utf-8'))
end

def test_control_f28
  r = spreadsheet.control_f28
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h28
  r = spreadsheet.control_h28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to a mixture of solid, liquid and gas biofuels",r[:string].force_encoding('utf-8'))
end

def test_control_i28
  r = spreadsheet.control_i28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to solid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_j28
  r = spreadsheet.control_j28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to liquid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_k28
  r = spreadsheet.control_k28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to biogas fuel",r[:string].force_encoding('utf-8'))
end

def test_control_m28
  r = spreadsheet.control_m28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to a mixture of solid, liquid and gas biofuels",r[:string].force_encoding('utf-8'))
end

def test_control_n28
  r = spreadsheet.control_n28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to solid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_o28
  r = spreadsheet.control_o28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to liquid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_p28
  r = spreadsheet.control_p28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to biogas fuel",r[:string].force_encoding('utf-8'))
end

def test_control_be28
  r = spreadsheet.control_be28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to a mixture of solid, liquid and gas biofuels",r[:string].force_encoding('utf-8'))
end

def test_control_bf28
  r = spreadsheet.control_bf28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to solid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_bg28
  r = spreadsheet.control_bg28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to liquid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_bh28
  r = spreadsheet.control_bh28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to biogas fuel",r[:string].force_encoding('utf-8'))
end

def test_control_d29
  r = spreadsheet.control_d29
  assert_equal(:ExcelString,r[:type])
  assert_equal("De-forestation",r[:string].force_encoding('utf-8'))
end

def test_control_f29
  r = spreadsheet.control_f29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h29
  r = spreadsheet.control_h29
  assert_equal(:ExcelString,r[:type])
  assert_equal("~3.7 billion ha forest (no change in current rates of deforestation)",r[:string].force_encoding('utf-8'))
end

def test_control_i29
  r = spreadsheet.control_i29
  assert_equal(:ExcelString,r[:type])
  assert_equal("~3.8 billion ha forest",r[:string].force_encoding('utf-8'))
end

def test_control_j29
  r = spreadsheet.control_j29
  assert_equal(:ExcelString,r[:type])
  assert_equal("~3.9 billion ha forest (REDD+: 75% reduction in deforestation by 2020)",r[:string].force_encoding('utf-8'))
end

def test_control_k29
  r = spreadsheet.control_k29
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4 billion ha forest (ZNDD+: 0 net deforestation by 2020)",r[:string].force_encoding('utf-8'))
end

def test_control_d31
  r = spreadsheet.control_d31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic passenger transport",r[:string].force_encoding('utf-8'))
end

def test_control_d32
  r = spreadsheet.control_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic transport behaviour",r[:string].force_encoding('utf-8'))
end

def test_control_f32
  r = spreadsheet.control_f32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h32
  r = spreadsheet.control_h32
  assert_equal(:ExcelString,r[:type])
  assert_equal("~25,000 passenger-km per person per year, mostly by car and air (US)",r[:string].force_encoding('utf-8'))
end

def test_control_i32
  r = spreadsheet.control_i32
  assert_equal(:ExcelString,r[:type])
  assert_equal("~14,000 passenger-km per person per year, mostly by car and public transport (UK)",r[:string].force_encoding('utf-8'))
end

def test_control_j32
  r = spreadsheet.control_j32
  assert_equal(:ExcelString,r[:type])
  assert_equal("~5,700 passenger-km per person per year (no change from 2010 transport behaviour)",r[:string].force_encoding('utf-8'))
end

def test_control_k32
  r = spreadsheet.control_k32
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,300 passenger-km per person per year, mostly by car and bus (China)",r[:string].force_encoding('utf-8'))
end

def test_control_m32
  r = spreadsheet.control_m32
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n32
  r = spreadsheet.control_n32
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o32
  r = spreadsheet.control_o32
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p32
  r = spreadsheet.control_p32
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_be32
  r = spreadsheet.control_be32
  assert_equal(:ExcelString,r[:type])
  assert_equal("In 2050, individuals travel 9% further than today. No noticeable modal shift.",r[:string].force_encoding('utf-8'))
end

def test_control_bf32
  r = spreadsheet.control_bf32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Individuals travel 7% further than today, cars and vans are 80% of 2050 passenger mileage",r[:string].force_encoding('utf-8'))
end

def test_control_bg32
  r = spreadsheet.control_bg32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Individuals travel 7% further than today; cars and vans 74% of 2050 passenger mileage",r[:string].force_encoding('utf-8'))
end

def test_control_bh32
  r = spreadsheet.control_bh32
  assert_equal(:ExcelString,r[:type])
  assert_equal("In 2050, individuals travel the same distance as today. Signficant shift to public transport.",r[:string].force_encoding('utf-8'))
end

def test_control_d33
  r = spreadsheet.control_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Shift to zero emission transport",r[:string].force_encoding('utf-8'))
end

def test_control_f33
  r = spreadsheet.control_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h33
  r = spreadsheet.control_h33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% plug in hybrid electric cars; 2.5% zero emission cars.",r[:string].force_encoding('utf-8'))
end

def test_control_i33
  r = spreadsheet.control_i33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 54% plug-in hybrid vehicles; 11%  zero emission vehicles, all buses hybrids.",r[:string].force_encoding('utf-8'))
end

def test_control_j33
  r = spreadsheet.control_j33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 32% plug-in hybrid vehicles; 48% zero emission vehicles; 22% buses electric.",r[:string].force_encoding('utf-8'))
end

def test_control_k33
  r = spreadsheet.control_k33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050 100%  zero emission vehiclesl; all passenger trains electrified; 50% bus electrified ",r[:string].force_encoding('utf-8'))
end

def test_control_m33
  r = spreadsheet.control_m33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% plug in hybrid electric cars; 2.5% zero emission cars.",r[:string].force_encoding('utf-8'))
end

def test_control_n33
  r = spreadsheet.control_n33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 54% plug-in hybrid vehicles; 11%  zero emission vehicles, all buses hybrids.",r[:string].force_encoding('utf-8'))
end

def test_control_o33
  r = spreadsheet.control_o33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 32% plug-in hybrid vehicles; 48% zero emission vehicles; 22% buses electric.",r[:string].force_encoding('utf-8'))
end

def test_control_p33
  r = spreadsheet.control_p33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050 100%  zero emission vehiclesl; all passenger trains electrified; 50% bus electrified ",r[:string].force_encoding('utf-8'))
end

def test_control_be33
  r = spreadsheet.control_be33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% plug in hybrid electric cars; 2.5% zero emission cars.",r[:string].force_encoding('utf-8'))
end

def test_control_bf33
  r = spreadsheet.control_bf33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 35% conventional petrol or diesel engine cars; 54% plug-in hybrid vehicles; 11%  zero emission vehicles; all buses hybrids; 73% of passenger railway is electrifi",r[:string].force_encoding('utf-8'))
end

def test_control_bg33
  r = spreadsheet.control_bg33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% conventional combustion engine cars, with 32% in plug-in hybrid vehicles and 48% in zero emission vehicles: 22% of bus travel fully electric or fuel cell electric ",r[:string].force_encoding('utf-8'))
end

def test_control_bh33
  r = spreadsheet.control_bh33
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050 100%  electric motor or hydrogen fuel cell; all passenger trains electrified; 50% bus  electrified ",r[:string].force_encoding('utf-8'))
end

def test_control_d34
  r = spreadsheet.control_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Choice of car and van techology",r[:string].force_encoding('utf-8'))
end

def test_control_f34
  r = spreadsheet.control_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h34
  r = spreadsheet.control_h34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% battery powered.",r[:string].force_encoding('utf-8'))
end

def test_control_i34
  r = spreadsheet.control_i34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 80% battery;  20% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_j34
  r = spreadsheet.control_j34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% battery; 80% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_k34
  r = spreadsheet.control_k34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% hydrogen fuel cells",r[:string].force_encoding('utf-8'))
end

def test_control_m34
  r = spreadsheet.control_m34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% battery powered.",r[:string].force_encoding('utf-8'))
end

def test_control_n34
  r = spreadsheet.control_n34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 80% battery;  20% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_o34
  r = spreadsheet.control_o34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% battery; 80% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_p34
  r = spreadsheet.control_p34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% hydrogen fuel cells",r[:string].force_encoding('utf-8'))
end

def test_control_be34
  r = spreadsheet.control_be34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_bf34
  r = spreadsheet.control_bf34
  assert_equal(:ExcelString,r[:type])
  assert_equal("by 2050, 80% electric,  20% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_bg34
  r = spreadsheet.control_bg34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% electric, 80% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_bh34
  r = spreadsheet.control_bh34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% hydrogen fuel cells",r[:string].force_encoding('utf-8'))
end

def test_control_d35
  r = spreadsheet.control_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_control_m35
  r = spreadsheet.control_m35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road haulage makes up 73% of distance, using conventional engines. Rail all diesel",r[:string].force_encoding('utf-8'))
end

def test_control_n35
  r = spreadsheet.control_n35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some shift from road to rail and water, and more efficient engines",r[:string].force_encoding('utf-8'))
end

def test_control_o35
  r = spreadsheet.control_o35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Greater modal shift to rail and water; more efficient HGVs; more efficient logistics",r[:string].force_encoding('utf-8'))
end

def test_control_p35
  r = spreadsheet.control_p35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road modal share falls to half; greater hybridisation. Rail freight is all electric ",r[:string].force_encoding('utf-8'))
end

def test_control_be35
  r = spreadsheet.control_be35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road haulage makes up 73% of distance, using conventional engines. Rail all diesel",r[:string].force_encoding('utf-8'))
end

def test_control_bf35
  r = spreadsheet.control_bf35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some shift from road to rail and water, and more efficient engines",r[:string].force_encoding('utf-8'))
end

def test_control_bg35
  r = spreadsheet.control_bg35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Greater modal shift to rail and water; more efficient HGVs; more efficient logistics",r[:string].force_encoding('utf-8'))
end

def test_control_bh35
  r = spreadsheet.control_bh35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road modal share falls to half; greater hybridisation. Rail freight is all electric ",r[:string].force_encoding('utf-8'))
end

def test_control_d36
  r = spreadsheet.control_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tonnes delivered",r[:string].force_encoding('utf-8'))
end

def test_control_f36
  r = spreadsheet.control_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h36
  r = spreadsheet.control_h36
  assert_equal(:ExcelString,r[:type])
  assert_equal("~126,000 billion tonne-km freight demand",r[:string].force_encoding('utf-8'))
end

def test_control_i36
  r = spreadsheet.control_i36
  assert_equal(:ExcelString,r[:type])
  assert_equal("~34,700 billion tonne-km freight demand",r[:string].force_encoding('utf-8'))
end

def test_control_j36
  r = spreadsheet.control_j36
  assert_equal(:ExcelString,r[:type])
  assert_equal("~26,000 billion tonne-km freight demand",r[:string].force_encoding('utf-8'))
end

def test_control_k36
  r = spreadsheet.control_k36
  assert_equal(:ExcelString,r[:type])
  assert_equal("~25,000 billion tonne-km freight demand",r[:string].force_encoding('utf-8'))
end

def test_control_m36
  r = spreadsheet.control_m36
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n36
  r = spreadsheet.control_n36
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o36
  r = spreadsheet.control_o36
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p36
  r = spreadsheet.control_p36
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_d37
  r = spreadsheet.control_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electrification of vans and rail",r[:string].force_encoding('utf-8'))
end

def test_control_f37
  r = spreadsheet.control_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h37
  r = spreadsheet.control_h37
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 10% rail freight electrified and 0% trucks",r[:string].force_encoding('utf-8'))
end

def test_control_i37
  r = spreadsheet.control_i37
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 40% rail freight electrified and 20% trucks",r[:string].force_encoding('utf-8'))
end

def test_control_j37
  r = spreadsheet.control_j37
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 80% rail freight electrified and 50% trucks",r[:string].force_encoding('utf-8'))
end

def test_control_k37
  r = spreadsheet.control_k37
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% rail freight electrified and 100% trucks",r[:string].force_encoding('utf-8'))
end

def test_control_d38
  r = spreadsheet.control_d38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating, cooling and hot water",r[:string].force_encoding('utf-8'))
end

def test_control_d39
  r = spreadsheet.control_d39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating, Cooling, hot water demand",r[:string].force_encoding('utf-8'))
end

def test_control_f39
  r = spreadsheet.control_f39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h39
  r = spreadsheet.control_h39
  assert_equal(:ExcelString,r[:type])
  assert_equal("~89,800 TWh domestic space heating, cooling and hot water demand (US)",r[:string].force_encoding('utf-8'))
end

def test_control_i39
  r = spreadsheet.control_i39
  assert_equal(:ExcelString,r[:type])
  assert_equal("~31,000 TWh domestic space heating, cooling and hot water demand (UK)",r[:string].force_encoding('utf-8'))
end

def test_control_j39
  r = spreadsheet.control_j39
  assert_equal(:ExcelString,r[:type])
  assert_equal("~16,300 TWh domestic space heating, cooling and hot water demand (no change in 2009 household demand)",r[:string].force_encoding('utf-8'))
end

def test_control_k39
  r = spreadsheet.control_k39
  assert_equal(:ExcelString,r[:type])
  assert_equal("~15,600 TWh domestic space heating, cooling and hot water demand (China)",r[:string].force_encoding('utf-8'))
end

def test_control_m39
  r = spreadsheet.control_m39
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n39
  r = spreadsheet.control_n39
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o39
  r = spreadsheet.control_o39
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p39
  r = spreadsheet.control_p39
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_be39
  r = spreadsheet.control_be39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature increases to 20°C (a 2.5°C increase on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bf39
  r = spreadsheet.control_bf39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature increases to 18°C (a 0.5°C increase on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bg39
  r = spreadsheet.control_bg39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature decreases to 17°C (a 0.5°C decrease on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bh39
  r = spreadsheet.control_bh39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature decreases to 16°C (a 1.5°C decrease on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_d40
  r = spreadsheet.control_d40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home heating electrification",r[:string].force_encoding('utf-8'))
end

def test_control_f40
  r = spreadsheet.control_f40
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h40
  r = spreadsheet.control_h40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_i40
  r = spreadsheet.control_i40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_j40
  r = spreadsheet.control_j40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_k40
  r = spreadsheet.control_k40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_m40
  r = spreadsheet.control_m40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_n40
  r = spreadsheet.control_n40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_o40
  r = spreadsheet.control_o40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_p40
  r = spreadsheet.control_p40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_be40
  r = spreadsheet.control_be40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_bf40
  r = spreadsheet.control_bf40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_bg40
  r = spreadsheet.control_bg40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_bh40
  r = spreadsheet.control_bh40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_d41
  r = spreadsheet.control_d41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home heating that isn't electric",r[:string].force_encoding('utf-8'))
end

def test_control_f41
  r = spreadsheet.control_f41
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h41
  r = spreadsheet.control_h41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas or gas CHP (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_i41
  r = spreadsheet.control_i41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal or coal CHP (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_j41
  r = spreadsheet.control_j41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is waste heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k41
  r = spreadsheet.control_k41
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas; coal/biomass; and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m41
  r = spreadsheet.control_m41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas or gas CHP (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_n41
  r = spreadsheet.control_n41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal or coal CHP (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_o41
  r = spreadsheet.control_o41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is waste heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_p41
  r = spreadsheet.control_p41
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas; coal/biomass; and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_be41
  r = spreadsheet.control_be41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bf41
  r = spreadsheet.control_bf41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bg41
  r = spreadsheet.control_bg41
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is waste heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_bh41
  r = spreadsheet.control_bh41
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas; coal/biomass; and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_d42
  r = spreadsheet.control_d42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_control_d43
  r = spreadsheet.control_d43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_control_f43
  r = spreadsheet.control_f43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h43
  r = spreadsheet.control_h43
  assert_equal(:ExcelString,r[:type])
  assert_equal("~35,400 TWh domestic lighting, applicances and cooking demand (US)",r[:string].force_encoding('utf-8'))
end

def test_control_i43
  r = spreadsheet.control_i43
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,900 TWh domestic lighting, applicances and cooking demand (UK)",r[:string].force_encoding('utf-8'))
end

def test_control_j43
  r = spreadsheet.control_j43
  assert_equal(:ExcelString,r[:type])
  assert_equal("~9,600 TWh domestic lighting, applicances and cooking demand (no change in 2009 household demand)",r[:string].force_encoding('utf-8'))
end

def test_control_k43
  r = spreadsheet.control_k43
  assert_equal(:ExcelString,r[:type])
  assert_equal("~6,500 TWh domestic lighting, applicances and cooking demand (China)",r[:string].force_encoding('utf-8'))
end

def test_control_m43
  r = spreadsheet.control_m43
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n43
  r = spreadsheet.control_n43
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o43
  r = spreadsheet.control_o43
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p43
  r = spreadsheet.control_p43
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_be43
  r = spreadsheet.control_be43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances increases by 20% (relative to 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bf43
  r = spreadsheet.control_bf43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances is stable",r[:string].force_encoding('utf-8'))
end

def test_control_bg43
  r = spreadsheet.control_bg43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances decreases by 40%",r[:string].force_encoding('utf-8'))
end

def test_control_bh43
  r = spreadsheet.control_bh43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances decreases by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_d44
  r = spreadsheet.control_d44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electrification of home cooking",r[:string].force_encoding('utf-8'))
end

def test_control_f44
  r = spreadsheet.control_f44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number],0.001)
end

def test_control_h44
  r = spreadsheet.control_h44
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today - 63% electric, 37% gas",r[:string].force_encoding('utf-8'))
end

def test_control_i44
  r = spreadsheet.control_i44
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_j44
  r = spreadsheet.control_j44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as Level 2",r[:string].force_encoding('utf-8'))
end

def test_control_k44
  r = spreadsheet.control_k44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as Level 2",r[:string].force_encoding('utf-8'))
end

def test_control_m44
  r = spreadsheet.control_m44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking remains at 63% electricity and 37% gas",r[:string].force_encoding('utf-8'))
end

def test_control_n44
  r = spreadsheet.control_n44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_o44
  r = spreadsheet.control_o44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_p44
  r = spreadsheet.control_p44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_z44
  r = spreadsheet.control_z44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lifestyle Choices",r[:string].force_encoding('utf-8'))
end

def test_control_be44
  r = spreadsheet.control_be44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking remains at 63% electricity and 37% gas",r[:string].force_encoding('utf-8'))
end

def test_control_bf44
  r = spreadsheet.control_bf44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_bg44
  r = spreadsheet.control_bg44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_bh44
  r = spreadsheet.control_bh44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_d45
  r = spreadsheet.control_d45
  assert_equal(:ExcelString,r[:type])
  assert_equal("% of households using trad biomass for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_f45
  r = spreadsheet.control_f45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h45
  r = spreadsheet.control_h45
  assert_equal(:ExcelString,r[:type])
  assert_equal("40% of households worldwide use traditional biomass",r[:string].force_encoding('utf-8'))
end

def test_control_i45
  r = spreadsheet.control_i45
  assert_equal(:ExcelString,r[:type])
  assert_equal("30% of households worldwide use traditional biomass",r[:string].force_encoding('utf-8'))
end

def test_control_j45
  r = spreadsheet.control_j45
  assert_equal(:ExcelString,r[:type])
  assert_equal("10% of households worldwide use traditional biomass",r[:string].force_encoding('utf-8'))
end

def test_control_k45
  r = spreadsheet.control_k45
  assert_equal(:ExcelString,r[:type])
  assert_equal("0% of households worldwide use traditional biomass",r[:string].force_encoding('utf-8'))
end

def test_control_m45
  r = spreadsheet.control_m45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4,r[:number],0.001)
end

def test_control_n45
  r = spreadsheet.control_n45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.3,r[:number],0.001)
end

def test_control_o45
  r = spreadsheet.control_o45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.1,r[:number],0.001)
end

def test_control_p45
  r = spreadsheet.control_p45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_control_d46
  r = spreadsheet.control_d46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_control_x46
  r = spreadsheet.control_x46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_control_z46
  r = spreadsheet.control_z46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting, Appliances & Cooking",r[:string].force_encoding('utf-8'))
end

def test_control_d47
  r = spreadsheet.control_d47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Growth in industry",r[:string].force_encoding('utf-8'))
end

def test_control_f47
  r = spreadsheet.control_f47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h47
  r = spreadsheet.control_h47
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, demand per capita for industrial goods doubles.",r[:string].force_encoding('utf-8'))
end

def test_control_i47
  r = spreadsheet.control_i47
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, demand per capita for industrial goods increases by 80%. ",r[:string].force_encoding('utf-8'))
end

def test_control_j47
  r = spreadsheet.control_j47
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, demand per capita for industrial goods increases by 65%. ",r[:string].force_encoding('utf-8'))
end

def test_control_k47
  r = spreadsheet.control_k47
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, demand per capita for industrial goods increases by a factor of a half.",r[:string].force_encoding('utf-8'))
end

def test_control_m47
  r = spreadsheet.control_m47
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n47
  r = spreadsheet.control_n47
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o47
  r = spreadsheet.control_o47
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p47
  r = spreadsheet.control_p47
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_y47
  r = spreadsheet.control_y47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_control_be47
  r = spreadsheet.control_be47
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output more than doubles by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bf47
  r = spreadsheet.control_bf47
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry grows in line with current trends",r[:string].force_encoding('utf-8'))
end

def test_control_bg47
  r = spreadsheet.control_bg47
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output falls 30-40% by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bh47
  r = spreadsheet.control_bh47
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output falls 30-40% by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_d48
  r = spreadsheet.control_d48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy intensity of industry",r[:string].force_encoding('utf-8'))
end

def test_control_f48
  r = spreadsheet.control_f48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_control_h48
  r = spreadsheet.control_h48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy intensity continues on current trend, culminating in an energy intensity of ~6.5TWh energy demanded/Mt of production",r[:string].force_encoding('utf-8'))
end

def test_control_i48
  r = spreadsheet.control_i48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy intensity decreases by 10%, mainly from recycling",r[:string].force_encoding('utf-8'))
end

def test_control_j48
  r = spreadsheet.control_j48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy intensity decreases by 40%, mainly from new technological improvements and recycling",r[:string].force_encoding('utf-8'))
end

def test_control_k48
  r = spreadsheet.control_k48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as Level 3",r[:string].force_encoding('utf-8'))
end

def test_control_m48
  r = spreadsheet.control_m48
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electrification of processes, little improvement in energy intensity",r[:string].force_encoding('utf-8'))
end

def test_control_n48
  r = spreadsheet.control_n48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some processes electrified; moderate improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_o48
  r = spreadsheet.control_o48
  assert_equal(:ExcelString,r[:type])
  assert_equal("High electrification; CCS captures 48% of emissions; process emissions reduced",r[:string].force_encoding('utf-8'))
end

def test_control_p48
  r = spreadsheet.control_p48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as 3",r[:string].force_encoding('utf-8'))
end

def test_control_be48
  r = spreadsheet.control_be48
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electrification of industrial processes and little improvement in industrial energy intensity",r[:string].force_encoding('utf-8'))
end

def test_control_bf48
  r = spreadsheet.control_bf48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some industrial processes electrified and moderate improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_bg48
  r = spreadsheet.control_bg48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Many industrial processes electrified, CCS captures 48% of emissions and  substantial improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_bh48
  r = spreadsheet.control_bh48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Many industrial processes electrified, CCS captures 48% of emissions and  substantial improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_d49
  r = spreadsheet.control_d49
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS?",r[:string].force_encoding('utf-8'))
end

def test_control_f49
  r = spreadsheet.control_f49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_control_h49
  r = spreadsheet.control_h49
  assert_equal(:ExcelString,r[:type])
  assert_equal("No CCS ",r[:string].force_encoding('utf-8'))
end

def test_control_i49
  r = spreadsheet.control_i49
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS captures ~1,900 MtCO2 emitted from industrial processes",r[:string].force_encoding('utf-8'))
end

def test_control_j49
  r = spreadsheet.control_j49
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS captures ~3,800 MtCO2 emitted from industrial processes",r[:string].force_encoding('utf-8'))
end

def test_control_k49
  r = spreadsheet.control_k49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as Level 3",r[:string].force_encoding('utf-8'))
end

def test_control_v49
  r = spreadsheet.control_v49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Residential",r[:string].force_encoding('utf-8'))
end

def test_control_x49
  r = spreadsheet.control_x49
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_y49
  r = spreadsheet.control_y49
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_aa49
  r = spreadsheet.control_aa49
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_d50
  r = spreadsheet.control_d50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_control_v50
  r = spreadsheet.control_v50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Services",r[:string].force_encoding('utf-8'))
end

def test_control_x50
  r = spreadsheet.control_x50
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_y50
  r = spreadsheet.control_y50
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_aa50
  r = spreadsheet.control_aa50
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_d51
  r = spreadsheet.control_d51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial demand for heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_control_f51
  r = spreadsheet.control_f51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h51
  r = spreadsheet.control_h51
  assert_equal(:ExcelString,r[:type])
  assert_equal("~62,000 TWh commercial space heating, cooling and hot water demand (US)",r[:string].force_encoding('utf-8'))
end

def test_control_i51
  r = spreadsheet.control_i51
  assert_equal(:ExcelString,r[:type])
  assert_equal("~19,700 TWh commercial space heating, cooling and hot water demand (UK)",r[:string].force_encoding('utf-8'))
end

def test_control_j51
  r = spreadsheet.control_j51
  assert_equal(:ExcelString,r[:type])
  assert_equal("~8,000 TWh commercial space heating, cooling and hot water demand (no change in 2009 demand)",r[:string].force_encoding('utf-8'))
end

def test_control_k51
  r = spreadsheet.control_k51
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,500 TWh commercial space heating, cooling and hot water demand (China)",r[:string].force_encoding('utf-8'))
end

def test_control_m51
  r = spreadsheet.control_m51
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n51
  r = spreadsheet.control_n51
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o51
  r = spreadsheet.control_o51
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p51
  r = spreadsheet.control_p51
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_be51
  r = spreadsheet.control_be51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand increases by 50%, hot water demand by 60%, cooling demand by 250%",r[:string].force_encoding('utf-8'))
end

def test_control_bf51
  r = spreadsheet.control_bf51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand increases by 30%, hot water demand by 50%, cooling demand by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_bg51
  r = spreadsheet.control_bg51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand stable, hot water demand increases by 25%, cooling demand stable",r[:string].force_encoding('utf-8'))
end

def test_control_bh51
  r = spreadsheet.control_bh51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand drops by 25%, hot water demand by 10%, cooling demand by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_d52
  r = spreadsheet.control_d52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating electrification",r[:string].force_encoding('utf-8'))
end

def test_control_f52
  r = spreadsheet.control_f52
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h52
  r = spreadsheet.control_h52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_i52
  r = spreadsheet.control_i52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_j52
  r = spreadsheet.control_j52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_k52
  r = spreadsheet.control_k52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_m52
  r = spreadsheet.control_m52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_n52
  r = spreadsheet.control_n52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_o52
  r = spreadsheet.control_o52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_p52
  r = spreadsheet.control_p52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_x52
  r = spreadsheet.control_x52
  assert_equal(:ExcelString,r[:type])
  assert_equal("People using traditional biomass",r[:string].force_encoding('utf-8'))
end

def test_control_aa52
  r = spreadsheet.control_aa52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4,r[:number],0.001)
end

def test_control_be52
  r = spreadsheet.control_be52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_bf52
  r = spreadsheet.control_bf52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_bg52
  r = spreadsheet.control_bg52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_bh52
  r = spreadsheet.control_bh52
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_d53
  r = spreadsheet.control_d53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating that isn't electric",r[:string].force_encoding('utf-8'))
end

def test_control_f53
  r = spreadsheet.control_f53
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h53
  r = spreadsheet.control_h53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas or gas CHP (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_i53
  r = spreadsheet.control_i53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal or coal CHP (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_j53
  r = spreadsheet.control_j53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is waste heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k53
  r = spreadsheet.control_k53
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas; coal/biomass; and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m53
  r = spreadsheet.control_m53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas or gas CHP (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_n53
  r = spreadsheet.control_n53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal or coal CHP (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_o53
  r = spreadsheet.control_o53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_p53
  r = spreadsheet.control_p53
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas, coal/biomass, and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_x53
  r = spreadsheet.control_x53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Goods production",r[:string].force_encoding('utf-8'))
end

def test_control_aa53
  r = spreadsheet.control_aa53
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_be53
  r = spreadsheet.control_be53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bf53
  r = spreadsheet.control_bf53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heating fuel is coal (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bg53
  r = spreadsheet.control_bg53
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_bh53
  r = spreadsheet.control_bh53
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas, coal/biomass, and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_d54
  r = spreadsheet.control_d54
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_control_d55
  r = spreadsheet.control_d55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_control_f55
  r = spreadsheet.control_f55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h55
  r = spreadsheet.control_h55
  assert_equal(:ExcelString,r[:type])
  assert_equal("~39,400 TWh commercial lighting, applicances and cooking demand (US)",r[:string].force_encoding('utf-8'))
end

def test_control_i55
  r = spreadsheet.control_i55
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,800 TWh commercial lighting, applicances and cooking demand (UK)",r[:string].force_encoding('utf-8'))
end

def test_control_j55
  r = spreadsheet.control_j55
  assert_equal(:ExcelString,r[:type])
  assert_equal("~6,000 TWh commercial lighting, applicances and cooking demand (no change in 2009 demand)",r[:string].force_encoding('utf-8'))
end

def test_control_k55
  r = spreadsheet.control_k55
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,500 TWh commercial lighting, applicances and cooking demand (China)",r[:string].force_encoding('utf-8'))
end

def test_control_m55
  r = spreadsheet.control_m55
  assert_equal(:ExcelString,r[:type])
  assert_equal("USA",r[:string].force_encoding('utf-8'))
end

def test_control_n55
  r = spreadsheet.control_n55
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK",r[:string].force_encoding('utf-8'))
end

def test_control_o55
  r = spreadsheet.control_o55
  assert_equal(:ExcelString,r[:type])
  assert_equal("World",r[:string].force_encoding('utf-8'))
end

def test_control_p55
  r = spreadsheet.control_p55
  assert_equal(:ExcelString,r[:type])
  assert_equal("China",r[:string].force_encoding('utf-8'))
end

def test_control_be55
  r = spreadsheet.control_be55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances increases by 33%. Energy for cooking is stable",r[:string].force_encoding('utf-8'))
end

def test_control_bf55
  r = spreadsheet.control_bf55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances increases by 15%; decreases by 5% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_bg55
  r = spreadsheet.control_bg55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances decreases by 5%; decreases by 20% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_bh55
  r = spreadsheet.control_bh55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances decreases by 30%; decreases by 25% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_d56
  r = spreadsheet.control_d56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electrification of commercial cooking",r[:string].force_encoding('utf-8'))
end

def test_control_f56
  r = spreadsheet.control_f56
  assert_equal(:ExcelString,r[:type])
  assert_equal("B",r[:string].force_encoding('utf-8'))
end

def test_control_h56
  r = spreadsheet.control_h56
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today - 60% electric, 40% gas",r[:string].force_encoding('utf-8'))
end

def test_control_i56
  r = spreadsheet.control_i56
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_j56
  r = spreadsheet.control_j56
  assert_equal(:ExcelString,r[:type])
  assert_equal("No Level 3",r[:string].force_encoding('utf-8'))
end

def test_control_k56
  r = spreadsheet.control_k56
  assert_equal(:ExcelString,r[:type])
  assert_equal("No Level 4",r[:string].force_encoding('utf-8'))
end

def test_control_m56
  r = spreadsheet.control_m56
  assert_equal(:ExcelString,r[:type])
  assert_equal("60% electricity and 40% gas (no change from 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_n56
  r = spreadsheet.control_n56
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_o56
  r = spreadsheet.control_o56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_p56
  r = spreadsheet.control_p56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_be56
  r = spreadsheet.control_be56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 60% electricity and 40% gas (no change from 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bf56
  r = spreadsheet.control_bf56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_bg56
  r = spreadsheet.control_bg56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_bh56
  r = spreadsheet.control_bh56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_d58
  r = spreadsheet.control_d58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_control_f58
  r = spreadsheet.control_f58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_control_h58
  r = spreadsheet.control_h58
  assert_equal(:ExcelString,r[:type])
  assert_equal("0 MtCO2 sequested internationally per yeat",r[:string].force_encoding('utf-8'))
end

def test_control_i58
  r = spreadsheet.control_i58
  assert_equal(:ExcelString,r[:type])
  assert_equal("800 MtCO2 sequested internationally per yeat",r[:string].force_encoding('utf-8'))
end

def test_control_j58
  r = spreadsheet.control_j58
  assert_equal(:ExcelString,r[:type])
  assert_equal("1,600 MtCO2 sequested internationally per yeat",r[:string].force_encoding('utf-8'))
end

def test_control_k58
  r = spreadsheet.control_k58
  assert_equal(:ExcelString,r[:type])
  assert_equal("3,200 MtCO2 sequested internationally per yeat",r[:string].force_encoding('utf-8'))
end

def test_control_be58
  r = spreadsheet.control_be58
  assert_equal(:ExcelString,r[:type])
  assert_equal("No geosequestration",r[:string].force_encoding('utf-8'))
end

def test_control_bf58
  r = spreadsheet.control_bf58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestred at a rate of 1 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bg58
  r = spreadsheet.control_bg58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide  sequestred at a rate of ~30 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bh58
  r = spreadsheet.control_bh58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestred at a rate of ~110 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end


  # start of Preferences

  # start of Intermediate output
def test_intermediate_output_b2
  r = spreadsheet.intermediate_output_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy source / use charts",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d4
  r = spreadsheet.intermediate_output_d4
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh / year",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f4
  r = spreadsheet.intermediate_output_f4
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007 (Consistent)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h4
  r = spreadsheet.intermediate_output_h4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_i4
  r = spreadsheet.intermediate_output_i4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j4
  r = spreadsheet.intermediate_output_j4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k4
  r = spreadsheet.intermediate_output_k4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l4
  r = spreadsheet.intermediate_output_l4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m4
  r = spreadsheet.intermediate_output_m4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n4
  r = spreadsheet.intermediate_output_n4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o4
  r = spreadsheet.intermediate_output_o4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p4
  r = spreadsheet.intermediate_output_p4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q4
  r = spreadsheet.intermediate_output_q4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_c6
  r = spreadsheet.intermediate_output_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c7
  r = spreadsheet.intermediate_output_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d7
  r = spreadsheet.intermediate_output_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f7
  r = spreadsheet.intermediate_output_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(503.29552967076955,r[:number],0.001)
end

def test_intermediate_output_h7
  r = spreadsheet.intermediate_output_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19790.58979040677,r[:number],0.001)
end

def test_intermediate_output_i7
  r = spreadsheet.intermediate_output_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20084.978444951037,r[:number],0.001)
end

def test_intermediate_output_j7
  r = spreadsheet.intermediate_output_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32108.439851398718,r[:number],0.001)
end

def test_intermediate_output_k7
  r = spreadsheet.intermediate_output_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44982.734641500356,r[:number],0.001)
end

def test_intermediate_output_l7
  r = spreadsheet.intermediate_output_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58062.23499602155,r[:number],0.001)
end

def test_intermediate_output_m7
  r = spreadsheet.intermediate_output_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71000.82250046504,r[:number],0.001)
end

def test_intermediate_output_n7
  r = spreadsheet.intermediate_output_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83607.87671795554,r[:number],0.001)
end

def test_intermediate_output_o7
  r = spreadsheet.intermediate_output_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95655.41054975479,r[:number],0.001)
end

def test_intermediate_output_p7
  r = spreadsheet.intermediate_output_p7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107658.78509158194,r[:number],0.001)
end

def test_intermediate_output_q7
  r = spreadsheet.intermediate_output_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119153.89863534791,r[:number],0.001)
end

def test_intermediate_output_c8
  r = spreadsheet.intermediate_output_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d8
  r = spreadsheet.intermediate_output_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f8
  r = spreadsheet.intermediate_output_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.03699816643595,r[:number],0.001)
end

def test_intermediate_output_h8
  r = spreadsheet.intermediate_output_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(824.403399625078,r[:number],0.001)
end

def test_intermediate_output_i8
  r = spreadsheet.intermediate_output_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(825.2859213876504,r[:number],0.001)
end

def test_intermediate_output_j8
  r = spreadsheet.intermediate_output_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1375.9807320914915,r[:number],0.001)
end

def test_intermediate_output_k8
  r = spreadsheet.intermediate_output_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1893.06933227815,r[:number],0.001)
end

def test_intermediate_output_l8
  r = spreadsheet.intermediate_output_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2349.9269946564286,r[:number],0.001)
end

def test_intermediate_output_m8
  r = spreadsheet.intermediate_output_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2777.3308486289625,r[:number],0.001)
end

def test_intermediate_output_n8
  r = spreadsheet.intermediate_output_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3179.0694612026196,r[:number],0.001)
end

def test_intermediate_output_o8
  r = spreadsheet.intermediate_output_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3467.079699714493,r[:number],0.001)
end

def test_intermediate_output_p8
  r = spreadsheet.intermediate_output_p8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3709.6882885296855,r[:number],0.001)
end

def test_intermediate_output_q8
  r = spreadsheet.intermediate_output_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3852.551247245799,r[:number],0.001)
end

def test_intermediate_output_c9
  r = spreadsheet.intermediate_output_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d9
  r = spreadsheet.intermediate_output_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f9
  r = spreadsheet.intermediate_output_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.52469387755102,r[:number],0.001)
end

def test_intermediate_output_h9
  r = spreadsheet.intermediate_output_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2906.6906145672338,r[:number],0.001)
end

def test_intermediate_output_i9
  r = spreadsheet.intermediate_output_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2990.0323835140016,r[:number],0.001)
end

def test_intermediate_output_j9
  r = spreadsheet.intermediate_output_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4863.271865550391,r[:number],0.001)
end

def test_intermediate_output_k9
  r = spreadsheet.intermediate_output_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7206.396091004765,r[:number],0.001)
end

def test_intermediate_output_l9
  r = spreadsheet.intermediate_output_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10085.94510929981,r[:number],0.001)
end

def test_intermediate_output_m9
  r = spreadsheet.intermediate_output_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13551.51759849119,r[:number],0.001)
end

def test_intermediate_output_n9
  r = spreadsheet.intermediate_output_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17707.281051856276,r[:number],0.001)
end

def test_intermediate_output_o9
  r = spreadsheet.intermediate_output_o9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22702.12584673048,r[:number],0.001)
end

def test_intermediate_output_p9
  r = spreadsheet.intermediate_output_p9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28712.896595171373,r[:number],0.001)
end

def test_intermediate_output_q9
  r = spreadsheet.intermediate_output_q9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35930.73284613621,r[:number],0.001)
end

def test_intermediate_output_c10
  r = spreadsheet.intermediate_output_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d10
  r = spreadsheet.intermediate_output_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f10
  r = spreadsheet.intermediate_output_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.60937240536579,r[:number],0.001)
end

def test_intermediate_output_h10
  r = spreadsheet.intermediate_output_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_intermediate_output_i10
  r = spreadsheet.intermediate_output_i10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j10
  r = spreadsheet.intermediate_output_j10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k10
  r = spreadsheet.intermediate_output_k10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l10
  r = spreadsheet.intermediate_output_l10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m10
  r = spreadsheet.intermediate_output_m10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n10
  r = spreadsheet.intermediate_output_n10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o10
  r = spreadsheet.intermediate_output_o10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p10
  r = spreadsheet.intermediate_output_p10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q10
  r = spreadsheet.intermediate_output_q10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c11
  r = spreadsheet.intermediate_output_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d11
  r = spreadsheet.intermediate_output_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f11
  r = spreadsheet.intermediate_output_f11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.78167541479132,r[:number],0.001)
end

def test_intermediate_output_h11
  r = spreadsheet.intermediate_output_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.3211111111111,r[:number],0.001)
end

def test_intermediate_output_i11
  r = spreadsheet.intermediate_output_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.11111111111114,r[:number],0.001)
end

def test_intermediate_output_j11
  r = spreadsheet.intermediate_output_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(427.77777777777777,r[:number],0.001)
end

def test_intermediate_output_k11
  r = spreadsheet.intermediate_output_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(536.6666666666666,r[:number],0.001)
end

def test_intermediate_output_l11
  r = spreadsheet.intermediate_output_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(516.6666666666666,r[:number],0.001)
end

def test_intermediate_output_m11
  r = spreadsheet.intermediate_output_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(493.33333333333326,r[:number],0.001)
end

def test_intermediate_output_n11
  r = spreadsheet.intermediate_output_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(446.6666666666667,r[:number],0.001)
end

def test_intermediate_output_o11
  r = spreadsheet.intermediate_output_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443.3333333333333,r[:number],0.001)
end

def test_intermediate_output_p11
  r = spreadsheet.intermediate_output_p11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443.3333333333333,r[:number],0.001)
end

def test_intermediate_output_q11
  r = spreadsheet.intermediate_output_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(450.0,r[:number],0.001)
end

def test_intermediate_output_c12
  r = spreadsheet.intermediate_output_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d12
  r = spreadsheet.intermediate_output_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f12
  r = spreadsheet.intermediate_output_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.012291428230906,r[:number],0.001)
end

def test_intermediate_output_h12
  r = spreadsheet.intermediate_output_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3376.2943115451667,r[:number],0.001)
end

def test_intermediate_output_i12
  r = spreadsheet.intermediate_output_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3376.0843115451667,r[:number],0.001)
end

def test_intermediate_output_j12
  r = spreadsheet.intermediate_output_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5566.285103620549,r[:number],0.001)
end

def test_intermediate_output_k12
  r = spreadsheet.intermediate_output_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7756.4858956959315,r[:number],0.001)
end

def test_intermediate_output_l12
  r = spreadsheet.intermediate_output_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9946.686687771313,r[:number],0.001)
end

def test_intermediate_output_m12
  r = spreadsheet.intermediate_output_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12136.887479846695,r[:number],0.001)
end

def test_intermediate_output_n12
  r = spreadsheet.intermediate_output_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14327.088271922077,r[:number],0.001)
end

def test_intermediate_output_o12
  r = spreadsheet.intermediate_output_o12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16517.28906399746,r[:number],0.001)
end

def test_intermediate_output_p12
  r = spreadsheet.intermediate_output_p12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18707.489856072843,r[:number],0.001)
end

def test_intermediate_output_q12
  r = spreadsheet.intermediate_output_q12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20897.690648148226,r[:number],0.001)
end

def test_intermediate_output_d13
  r = spreadsheet.intermediate_output_d13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f13
  r = spreadsheet.intermediate_output_f13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(733.2605609631445,r[:number],0.001)
end

def test_intermediate_output_h13
  r = spreadsheet.intermediate_output_h13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27259.50922725536,r[:number],0.001)
end

def test_intermediate_output_i13
  r = spreadsheet.intermediate_output_i13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27637.492172508966,r[:number],0.001)
end

def test_intermediate_output_j13
  r = spreadsheet.intermediate_output_j13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44341.75533043893,r[:number],0.001)
end

def test_intermediate_output_k13
  r = spreadsheet.intermediate_output_k13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62375.35262714587,r[:number],0.001)
end

def test_intermediate_output_l13
  r = spreadsheet.intermediate_output_l13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80961.46045441578,r[:number],0.001)
end

def test_intermediate_output_m13
  r = spreadsheet.intermediate_output_m13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99959.89176076523,r[:number],0.001)
end

def test_intermediate_output_n13
  r = spreadsheet.intermediate_output_n13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119267.98216960319,r[:number],0.001)
end

def test_intermediate_output_o13
  r = spreadsheet.intermediate_output_o13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138785.23849353055,r[:number],0.001)
end

def test_intermediate_output_p13
  r = spreadsheet.intermediate_output_p13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159232.19316468918,r[:number],0.001)
end

def test_intermediate_output_q13
  r = spreadsheet.intermediate_output_q13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180284.87337687812,r[:number],0.001)
end

def test_intermediate_output_c14
  r = spreadsheet.intermediate_output_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d14
  r = spreadsheet.intermediate_output_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f14
  r = spreadsheet.intermediate_output_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(444.0640132389632,r[:number],0.001)
end

def test_intermediate_output_h14
  r = spreadsheet.intermediate_output_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34885.85183537199,r[:number],0.001)
end

def test_intermediate_output_i14
  r = spreadsheet.intermediate_output_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34881.00834787727,r[:number],0.001)
end

def test_intermediate_output_j14
  r = spreadsheet.intermediate_output_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39351.514515206785,r[:number],0.001)
end

def test_intermediate_output_k14
  r = spreadsheet.intermediate_output_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43822.336336866516,r[:number],0.001)
end

def test_intermediate_output_l14
  r = spreadsheet.intermediate_output_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48294.089988506705,r[:number],0.001)
end

def test_intermediate_output_m14
  r = spreadsheet.intermediate_output_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52765.73856331018,r[:number],0.001)
end

def test_intermediate_output_n14
  r = spreadsheet.intermediate_output_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57238.83854599543,r[:number],0.001)
end

def test_intermediate_output_o14
  r = spreadsheet.intermediate_output_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61712.3929805874,r[:number],0.001)
end

def test_intermediate_output_p14
  r = spreadsheet.intermediate_output_p14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66186.29906140178,r[:number],0.001)
end

def test_intermediate_output_q14
  r = spreadsheet.intermediate_output_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70660.4772393598,r[:number],0.001)
end

def test_intermediate_output_c15
  r = spreadsheet.intermediate_output_c15
  assert_equal(:ExcelString,r[:type])
  assert_equal("H.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d15
  r = spreadsheet.intermediate_output_d15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f15
  r = spreadsheet.intermediate_output_f15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(545.5337698912538,r[:number],0.001)
end

def test_intermediate_output_h15
  r = spreadsheet.intermediate_output_h15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13991.792407407407,r[:number],0.001)
end

def test_intermediate_output_i15
  r = spreadsheet.intermediate_output_i15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16617.24030214425,r[:number],0.001)
end

def test_intermediate_output_j15
  r = spreadsheet.intermediate_output_j15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36226.47610831786,r[:number],0.001)
end

def test_intermediate_output_k15
  r = spreadsheet.intermediate_output_k15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55517.058856651114,r[:number],0.001)
end

def test_intermediate_output_l15
  r = spreadsheet.intermediate_output_l15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74461.75973306448,r[:number],0.001)
end

def test_intermediate_output_m15
  r = spreadsheet.intermediate_output_m15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93035.82527021292,r[:number],0.001)
end

def test_intermediate_output_n15
  r = spreadsheet.intermediate_output_n15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111216.7023089599,r[:number],0.001)
end

def test_intermediate_output_o15
  r = spreadsheet.intermediate_output_o15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128983.79883444154,r[:number],0.001)
end

def test_intermediate_output_p15
  r = spreadsheet.intermediate_output_p15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146318.27534369729,r[:number],0.001)
end

def test_intermediate_output_q15
  r = spreadsheet.intermediate_output_q15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157451.70297900084,r[:number],0.001)
end

def test_intermediate_output_c16
  r = spreadsheet.intermediate_output_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("L.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d16
  r = spreadsheet.intermediate_output_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting, cooking & appliances",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f16
  r = spreadsheet.intermediate_output_f16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.7850104721941,r[:number],0.001)
end

def test_intermediate_output_h16
  r = spreadsheet.intermediate_output_h16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13786.32111111111,r[:number],0.001)
end

def test_intermediate_output_i16
  r = spreadsheet.intermediate_output_i16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13789.844824820311,r[:number],0.001)
end

def test_intermediate_output_j16
  r = spreadsheet.intermediate_output_j16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21901.681229249953,r[:number],0.001)
end

def test_intermediate_output_k16
  r = spreadsheet.intermediate_output_k16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30013.4530510293,r[:number],0.001)
end

def test_intermediate_output_l16
  r = spreadsheet.intermediate_output_l16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38120.96858148274,r[:number],0.001)
end

def test_intermediate_output_m16
  r = spreadsheet.intermediate_output_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46228.37082991372,r[:number],0.001)
end

def test_intermediate_output_n16
  r = spreadsheet.intermediate_output_n16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54341.20611540925,r[:number],0.001)
end

def test_intermediate_output_o16
  r = spreadsheet.intermediate_output_o16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62451.125473553184,r[:number],0.001)
end

def test_intermediate_output_p16
  r = spreadsheet.intermediate_output_p16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70560.87990881663,r[:number],0.001)
end

def test_intermediate_output_q16
  r = spreadsheet.intermediate_output_q16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78670.4329575772,r[:number],0.001)
end

def test_intermediate_output_c17
  r = spreadsheet.intermediate_output_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("F.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d17
  r = spreadsheet.intermediate_output_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Food consumption [UNUSED]",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f17
  r = spreadsheet.intermediate_output_f17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.09063200000001,r[:number],0.001)
end

def test_intermediate_output_h17
  r = spreadsheet.intermediate_output_h17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i17
  r = spreadsheet.intermediate_output_i17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j17
  r = spreadsheet.intermediate_output_j17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k17
  r = spreadsheet.intermediate_output_k17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l17
  r = spreadsheet.intermediate_output_l17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m17
  r = spreadsheet.intermediate_output_m17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n17
  r = spreadsheet.intermediate_output_n17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o17
  r = spreadsheet.intermediate_output_o17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p17
  r = spreadsheet.intermediate_output_p17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q17
  r = spreadsheet.intermediate_output_q17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_d18
  r = spreadsheet.intermediate_output_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f18
  r = spreadsheet.intermediate_output_f18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1966.7339865655554,r[:number],0.001)
end

def test_intermediate_output_h18
  r = spreadsheet.intermediate_output_h18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89923.47458114587,r[:number],0.001)
end

def test_intermediate_output_i18
  r = spreadsheet.intermediate_output_i18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92925.5856473508,r[:number],0.001)
end

def test_intermediate_output_j18
  r = spreadsheet.intermediate_output_j18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141821.42718321353,r[:number],0.001)
end

def test_intermediate_output_k18
  r = spreadsheet.intermediate_output_k18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191728.2008716928,r[:number],0.001)
end

def test_intermediate_output_l18
  r = spreadsheet.intermediate_output_l18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(241838.2787574697,r[:number],0.001)
end

def test_intermediate_output_m18
  r = spreadsheet.intermediate_output_m18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(291989.82642420207,r[:number],0.001)
end

def test_intermediate_output_n18
  r = spreadsheet.intermediate_output_n18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342064.72913996776,r[:number],0.001)
end

def test_intermediate_output_o18
  r = spreadsheet.intermediate_output_o18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391932.5557821127,r[:number],0.001)
end

def test_intermediate_output_p18
  r = spreadsheet.intermediate_output_p18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442297.6474786049,r[:number],0.001)
end

def test_intermediate_output_q18
  r = spreadsheet.intermediate_output_q18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(487067.4865528159,r[:number],0.001)
end

def test_intermediate_output_d20
  r = spreadsheet.intermediate_output_d20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy for charting uses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h20
  r = spreadsheet.intermediate_output_h20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32899.77188518726,r[:number],0.001)
end

def test_intermediate_output_i20
  r = spreadsheet.intermediate_output_i20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27581.465142057787,r[:number],0.001)
end

def test_intermediate_output_j20
  r = spreadsheet.intermediate_output_j20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50655.486099473375,r[:number],0.001)
end

def test_intermediate_output_k20
  r = spreadsheet.intermediate_output_k20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70915.77232122218,r[:number],0.001)
end

def test_intermediate_output_l20
  r = spreadsheet.intermediate_output_l20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86251.59513051846,r[:number],0.001)
end

def test_intermediate_output_m20
  r = spreadsheet.intermediate_output_m20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95689.2216784574,r[:number],0.001)
end

def test_intermediate_output_n20
  r = spreadsheet.intermediate_output_n20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101559.90677324613,r[:number],0.001)
end

def test_intermediate_output_o20
  r = spreadsheet.intermediate_output_o20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111311.34196868155,r[:number],0.001)
end

def test_intermediate_output_p20
  r = spreadsheet.intermediate_output_p20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121208.85394308087,r[:number],0.001)
end

def test_intermediate_output_q20
  r = spreadsheet.intermediate_output_q20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135191.44903097837,r[:number],0.001)
end

def test_intermediate_output_c22
  r = spreadsheet.intermediate_output_c22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Source",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c23
  r = spreadsheet.intermediate_output_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("N.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d23
  r = spreadsheet.intermediate_output_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear fission",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f23
  r = spreadsheet.intermediate_output_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.24447683045062,r[:number],0.001)
end

def test_intermediate_output_h23
  r = spreadsheet.intermediate_output_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7692.409950777203,r[:number],0.001)
end

def test_intermediate_output_i23
  r = spreadsheet.intermediate_output_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8240.833333333336,r[:number],0.001)
end

def test_intermediate_output_j23
  r = spreadsheet.intermediate_output_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9178.701685799006,r[:number],0.001)
end

def test_intermediate_output_k23
  r = spreadsheet.intermediate_output_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10582.170658400002,r[:number],0.001)
end

def test_intermediate_output_l23
  r = spreadsheet.intermediate_output_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11297.59158,r[:number],0.001)
end

def test_intermediate_output_m23
  r = spreadsheet.intermediate_output_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11760.703521404163,r[:number],0.001)
end

def test_intermediate_output_n23
  r = spreadsheet.intermediate_output_n23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11970.555889714316,r[:number],0.001)
end

def test_intermediate_output_o23
  r = spreadsheet.intermediate_output_o23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12218.535895963063,r[:number],0.001)
end

def test_intermediate_output_p23
  r = spreadsheet.intermediate_output_p23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12247.836980486622,r[:number],0.001)
end

def test_intermediate_output_q23
  r = spreadsheet.intermediate_output_q23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_intermediate_output_c24
  r = spreadsheet.intermediate_output_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d24
  r = spreadsheet.intermediate_output_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f24
  r = spreadsheet.intermediate_output_f24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5360591477000001,r[:number],0.001)
end

def test_intermediate_output_h24
  r = spreadsheet.intermediate_output_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.59528637575556,r[:number],0.001)
end

def test_intermediate_output_i24
  r = spreadsheet.intermediate_output_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.38791192880167,r[:number],0.001)
end

def test_intermediate_output_j24
  r = spreadsheet.intermediate_output_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.08989818370915,r[:number],0.001)
end

def test_intermediate_output_k24
  r = spreadsheet.intermediate_output_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.59220491630188,r[:number],0.001)
end

def test_intermediate_output_l24
  r = spreadsheet.intermediate_output_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.0782900934599,r[:number],0.001)
end

def test_intermediate_output_m24
  r = spreadsheet.intermediate_output_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(302.72155769891424,r[:number],0.001)
end

def test_intermediate_output_n24
  r = spreadsheet.intermediate_output_n24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.0142767374186,r[:number],0.001)
end

def test_intermediate_output_o24
  r = spreadsheet.intermediate_output_o24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.753353042571,r[:number],0.001)
end

def test_intermediate_output_p24
  r = spreadsheet.intermediate_output_p24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.8173045637367,r[:number],0.001)
end

def test_intermediate_output_q24
  r = spreadsheet.intermediate_output_q24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_c25
  r = spreadsheet.intermediate_output_c25
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d25
  r = spreadsheet.intermediate_output_d25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f25
  r = spreadsheet.intermediate_output_f25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.978861884782586,r[:number],0.001)
end

def test_intermediate_output_h25
  r = spreadsheet.intermediate_output_h25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.2576375041322,r[:number],0.001)
end

def test_intermediate_output_i25
  r = spreadsheet.intermediate_output_i25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.3790095041322,r[:number],0.001)
end

def test_intermediate_output_j25
  r = spreadsheet.intermediate_output_j25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(675.3090991735538,r[:number],0.001)
end

def test_intermediate_output_k25
  r = spreadsheet.intermediate_output_k25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1253.5562870291576,r[:number],0.001)
end

def test_intermediate_output_l25
  r = spreadsheet.intermediate_output_l25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1645.151947682095,r[:number],0.001)
end

def test_intermediate_output_m25
  r = spreadsheet.intermediate_output_m25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1993.5094345306247,r[:number],0.001)
end

def test_intermediate_output_n25
  r = spreadsheet.intermediate_output_n25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2290.494572715729,r[:number],0.001)
end

def test_intermediate_output_o25
  r = spreadsheet.intermediate_output_o25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2549.2734081312665,r[:number],0.001)
end

def test_intermediate_output_p25
  r = spreadsheet.intermediate_output_p25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2685.88801133876,r[:number],0.001)
end

def test_intermediate_output_q25
  r = spreadsheet.intermediate_output_q25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2824.7156436528894,r[:number],0.001)
end

def test_intermediate_output_c26
  r = spreadsheet.intermediate_output_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d26
  r = spreadsheet.intermediate_output_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f26
  r = spreadsheet.intermediate_output_f26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h26
  r = spreadsheet.intermediate_output_h26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i26
  r = spreadsheet.intermediate_output_i26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j26
  r = spreadsheet.intermediate_output_j26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k26
  r = spreadsheet.intermediate_output_k26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l26
  r = spreadsheet.intermediate_output_l26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m26
  r = spreadsheet.intermediate_output_m26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n26
  r = spreadsheet.intermediate_output_n26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o26
  r = spreadsheet.intermediate_output_o26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p26
  r = spreadsheet.intermediate_output_p26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q26
  r = spreadsheet.intermediate_output_q26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c27
  r = spreadsheet.intermediate_output_c27
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d27
  r = spreadsheet.intermediate_output_d27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f27
  r = spreadsheet.intermediate_output_f27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h27
  r = spreadsheet.intermediate_output_h27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i27
  r = spreadsheet.intermediate_output_i27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j27
  r = spreadsheet.intermediate_output_j27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.19723500000000002,r[:number],0.001)
end

def test_intermediate_output_k27
  r = spreadsheet.intermediate_output_k27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9288768981296096,r[:number],0.001)
end

def test_intermediate_output_l27
  r = spreadsheet.intermediate_output_l27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4240733812697526,r[:number],0.001)
end

def test_intermediate_output_m27
  r = spreadsheet.intermediate_output_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.920461149446789,r[:number],0.001)
end

def test_intermediate_output_n27
  r = spreadsheet.intermediate_output_n27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.283378034043395,r[:number],0.001)
end

def test_intermediate_output_o27
  r = spreadsheet.intermediate_output_o27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.880144313528724,r[:number],0.001)
end

def test_intermediate_output_p27
  r = spreadsheet.intermediate_output_p27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.6827757959162,r[:number],0.001)
end

def test_intermediate_output_q27
  r = spreadsheet.intermediate_output_q27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_intermediate_output_c28
  r = spreadsheet.intermediate_output_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d28
  r = spreadsheet.intermediate_output_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f28
  r = spreadsheet.intermediate_output_f28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h28
  r = spreadsheet.intermediate_output_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_intermediate_output_i28
  r = spreadsheet.intermediate_output_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_intermediate_output_j28
  r = spreadsheet.intermediate_output_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.54344669789631,r[:number],0.001)
end

def test_intermediate_output_k28
  r = spreadsheet.intermediate_output_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.21459580595813,r[:number],0.001)
end

def test_intermediate_output_l28
  r = spreadsheet.intermediate_output_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.28892750468282,r[:number],0.001)
end

def test_intermediate_output_m28
  r = spreadsheet.intermediate_output_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.0449836326222,r[:number],0.001)
end

def test_intermediate_output_n28
  r = spreadsheet.intermediate_output_n28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237.17958335569693,r[:number],0.001)
end

def test_intermediate_output_o28
  r = spreadsheet.intermediate_output_o28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.19663807255284,r[:number],0.001)
end

def test_intermediate_output_p28
  r = spreadsheet.intermediate_output_p28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.0221416680945,r[:number],0.001)
end

def test_intermediate_output_q28
  r = spreadsheet.intermediate_output_q28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_intermediate_output_c29
  r = spreadsheet.intermediate_output_c29
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d29
  r = spreadsheet.intermediate_output_d29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f29
  r = spreadsheet.intermediate_output_f29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.088394340000001,r[:number],0.001)
end

def test_intermediate_output_h29
  r = spreadsheet.intermediate_output_h29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_intermediate_output_i29
  r = spreadsheet.intermediate_output_i29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_intermediate_output_j29
  r = spreadsheet.intermediate_output_j29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3656.6491221630395,r[:number],0.001)
end

def test_intermediate_output_k29
  r = spreadsheet.intermediate_output_k29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4078.9370920274823,r[:number],0.001)
end

def test_intermediate_output_l29
  r = spreadsheet.intermediate_output_l29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4467.077983986471,r[:number],0.001)
end

def test_intermediate_output_m29
  r = spreadsheet.intermediate_output_m29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4721.321387509617,r[:number],0.001)
end

def test_intermediate_output_n29
  r = spreadsheet.intermediate_output_n29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4972.473207220269,r[:number],0.001)
end

def test_intermediate_output_o29
  r = spreadsheet.intermediate_output_o29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5132.017140903075,r[:number],0.001)
end

def test_intermediate_output_p29
  r = spreadsheet.intermediate_output_p29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5240.990780676136,r[:number],0.001)
end

def test_intermediate_output_q29
  r = spreadsheet.intermediate_output_q29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_intermediate_output_c30
  r = spreadsheet.intermediate_output_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d30
  r = spreadsheet.intermediate_output_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f30
  r = spreadsheet.intermediate_output_f30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number],0.001)
end

def test_intermediate_output_h30
  r = spreadsheet.intermediate_output_h30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1160.856994960196,r[:number],0.001)
end

def test_intermediate_output_i30
  r = spreadsheet.intermediate_output_i30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_intermediate_output_j30
  r = spreadsheet.intermediate_output_j30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.195800664286665,r[:number],0.001)
end

def test_intermediate_output_k30
  r = spreadsheet.intermediate_output_k30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.529601328544224,r[:number],0.001)
end

def test_intermediate_output_l30
  r = spreadsheet.intermediate_output_l30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.22501960257536,r[:number],0.001)
end

def test_intermediate_output_m30
  r = spreadsheet.intermediate_output_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.9316937694213,r[:number],0.001)
end

def test_intermediate_output_n30
  r = spreadsheet.intermediate_output_n30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.23065738478488,r[:number],0.001)
end

def test_intermediate_output_o30
  r = spreadsheet.intermediate_output_o30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.93160038059057,r[:number],0.001)
end

def test_intermediate_output_p30
  r = spreadsheet.intermediate_output_p30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.19058447405627,r[:number],0.001)
end

def test_intermediate_output_q30
  r = spreadsheet.intermediate_output_q30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_d31
  r = spreadsheet.intermediate_output_d31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Primary electricity, solar and marine",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f31
  r = spreadsheet.intermediate_output_f31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.06231645293323,r[:number],0.001)
end

def test_intermediate_output_h31
  r = spreadsheet.intermediate_output_h31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10185.105879696897,r[:number],0.001)
end

def test_intermediate_output_i31
  r = spreadsheet.intermediate_output_i31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11910.162254766268,r[:number],0.001)
end

def test_intermediate_output_j31
  r = spreadsheet.intermediate_output_j31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13708.68628768149,r[:number],0.001)
end

def test_intermediate_output_k31
  r = spreadsheet.intermediate_output_k31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16292.929316405574,r[:number],0.001)
end

def test_intermediate_output_l31
  r = spreadsheet.intermediate_output_l31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17885.837822250553,r[:number],0.001)
end

def test_intermediate_output_m31
  r = spreadsheet.intermediate_output_m31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19084.153039694807,r[:number],0.001)
end

def test_intermediate_output_n31
  r = spreadsheet.intermediate_output_n31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20006.23156516226,r[:number],0.001)
end

def test_intermediate_output_o31
  r = spreadsheet.intermediate_output_o31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20828.58818080665,r[:number],0.001)
end

def test_intermediate_output_p31
  r = spreadsheet.intermediate_output_p31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21271.42857900332,r[:number],0.001)
end

def test_intermediate_output_q31
  r = spreadsheet.intermediate_output_q31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22000.30203066956,r[:number],0.001)
end

def test_intermediate_output_c32
  r = spreadsheet.intermediate_output_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.07",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d32
  r = spreadsheet.intermediate_output_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Environmental heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f32
  r = spreadsheet.intermediate_output_f32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h32
  r = spreadsheet.intermediate_output_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_intermediate_output_i32
  r = spreadsheet.intermediate_output_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_intermediate_output_j32
  r = spreadsheet.intermediate_output_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4076.654569296791,r[:number],0.001)
end

def test_intermediate_output_k32
  r = spreadsheet.intermediate_output_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6772.450097198011,r[:number],0.001)
end

def test_intermediate_output_l32
  r = spreadsheet.intermediate_output_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9570.488435555515,r[:number],0.001)
end

def test_intermediate_output_m32
  r = spreadsheet.intermediate_output_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12470.7695843693,r[:number],0.001)
end

def test_intermediate_output_n32
  r = spreadsheet.intermediate_output_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15473.29354363937,r[:number],0.001)
end

def test_intermediate_output_o32
  r = spreadsheet.intermediate_output_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18578.06031336572,r[:number],0.001)
end

def test_intermediate_output_p32
  r = spreadsheet.intermediate_output_p32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21785.069893548352,r[:number],0.001)
end

def test_intermediate_output_q32
  r = spreadsheet.intermediate_output_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_intermediate_output_c33
  r = spreadsheet.intermediate_output_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("W.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d33
  r = spreadsheet.intermediate_output_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f33
  r = spreadsheet.intermediate_output_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.240524277899516,r[:number],0.001)
end

def test_intermediate_output_h33
  r = spreadsheet.intermediate_output_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_i33
  r = spreadsheet.intermediate_output_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_j33
  r = spreadsheet.intermediate_output_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_k33
  r = spreadsheet.intermediate_output_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_l33
  r = spreadsheet.intermediate_output_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_m33
  r = spreadsheet.intermediate_output_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_n33
  r = spreadsheet.intermediate_output_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_o33
  r = spreadsheet.intermediate_output_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_p33
  r = spreadsheet.intermediate_output_p33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_q33
  r = spreadsheet.intermediate_output_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_intermediate_output_c34
  r = spreadsheet.intermediate_output_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("A.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d34
  r = spreadsheet.intermediate_output_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f34
  r = spreadsheet.intermediate_output_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.005772267812624,r[:number],0.001)
end

def test_intermediate_output_h34
  r = spreadsheet.intermediate_output_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_i34
  r = spreadsheet.intermediate_output_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_j34
  r = spreadsheet.intermediate_output_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_k34
  r = spreadsheet.intermediate_output_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_l34
  r = spreadsheet.intermediate_output_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.33333333333337,r[:number],0.001)
end

def test_intermediate_output_m34
  r = spreadsheet.intermediate_output_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_n34
  r = spreadsheet.intermediate_output_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.33333333333337,r[:number],0.001)
end

def test_intermediate_output_o34
  r = spreadsheet.intermediate_output_o34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_p34
  r = spreadsheet.intermediate_output_p34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_q34
  r = spreadsheet.intermediate_output_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_c35
  r = spreadsheet.intermediate_output_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d35
  r = spreadsheet.intermediate_output_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f35
  r = spreadsheet.intermediate_output_f35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.262503111111116,r[:number],0.001)
end

def test_intermediate_output_h35
  r = spreadsheet.intermediate_output_h35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i35
  r = spreadsheet.intermediate_output_i35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j35
  r = spreadsheet.intermediate_output_j35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k35
  r = spreadsheet.intermediate_output_k35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l35
  r = spreadsheet.intermediate_output_l35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m35
  r = spreadsheet.intermediate_output_m35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n35
  r = spreadsheet.intermediate_output_n35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o35
  r = spreadsheet.intermediate_output_o35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p35
  r = spreadsheet.intermediate_output_p35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q35
  r = spreadsheet.intermediate_output_q35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_d36
  r = spreadsheet.intermediate_output_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture, waste, and biomatter imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f36
  r = spreadsheet.intermediate_output_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.50879965682326,r[:number],0.001)
end

def test_intermediate_output_h36
  r = spreadsheet.intermediate_output_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_i36
  r = spreadsheet.intermediate_output_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_j36
  r = spreadsheet.intermediate_output_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_k36
  r = spreadsheet.intermediate_output_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_l36
  r = spreadsheet.intermediate_output_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_m36
  r = spreadsheet.intermediate_output_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_n36
  r = spreadsheet.intermediate_output_n36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_o36
  r = spreadsheet.intermediate_output_o36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_p36
  r = spreadsheet.intermediate_output_p36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_q36
  r = spreadsheet.intermediate_output_q36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_c37
  r = spreadsheet.intermediate_output_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d37
  r = spreadsheet.intermediate_output_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f37
  r = spreadsheet.intermediate_output_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.602732356217,r[:number],0.001)
end

def test_intermediate_output_h37
  r = spreadsheet.intermediate_output_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39550.80042491112,r[:number],0.001)
end

def test_intermediate_output_i37
  r = spreadsheet.intermediate_output_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35975.72238777542,r[:number],0.001)
end

def test_intermediate_output_j37
  r = spreadsheet.intermediate_output_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64827.16369514431,r[:number],0.001)
end

def test_intermediate_output_k37
  r = spreadsheet.intermediate_output_k37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90765.55881903532,r[:number],0.001)
end

def test_intermediate_output_l37
  r = spreadsheet.intermediate_output_l37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112427.38086715901,r[:number],0.001)
end

def test_intermediate_output_m37
  r = spreadsheet.intermediate_output_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128009.47044200294,r[:number],0.001)
end

def test_intermediate_output_n37
  r = spreadsheet.intermediate_output_n37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140225.28282100742,r[:number],0.001)
end

def test_intermediate_output_o37
  r = spreadsheet.intermediate_output_o37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154363.03733436446,r[:number],0.001)
end

def test_intermediate_output_p37
  r = spreadsheet.intermediate_output_p37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168133.81743544442,r[:number],0.001)
end

def test_intermediate_output_q37
  r = spreadsheet.intermediate_output_q37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179478.52027866815,r[:number],0.001)
end

def test_intermediate_output_c38
  r = spreadsheet.intermediate_output_c38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Q.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d38
  r = spreadsheet.intermediate_output_d38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f38
  r = spreadsheet.intermediate_output_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.79944495555736,r[:number],0.001)
end

def test_intermediate_output_h38
  r = spreadsheet.intermediate_output_h38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.3957013942179,r[:number],0.001)
end

def test_intermediate_output_i38
  r = spreadsheet.intermediate_output_i38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_intermediate_output_j38
  r = spreadsheet.intermediate_output_j38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_intermediate_output_k38
  r = spreadsheet.intermediate_output_k38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_intermediate_output_l38
  r = spreadsheet.intermediate_output_l38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_intermediate_output_m38
  r = spreadsheet.intermediate_output_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_n38
  r = spreadsheet.intermediate_output_n38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_o38
  r = spreadsheet.intermediate_output_o38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_p38
  r = spreadsheet.intermediate_output_p38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_q38
  r = spreadsheet.intermediate_output_q38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_d39
  r = spreadsheet.intermediate_output_d39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f39
  r = spreadsheet.intermediate_output_f39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.4021773117744,r[:number],0.001)
end

def test_intermediate_output_h39
  r = spreadsheet.intermediate_output_h39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_intermediate_output_i39
  r = spreadsheet.intermediate_output_i39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36103.65238777542,r[:number],0.001)
end

def test_intermediate_output_j39
  r = spreadsheet.intermediate_output_j39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64955.09369514431,r[:number],0.001)
end

def test_intermediate_output_k39
  r = spreadsheet.intermediate_output_k39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90893.48881903531,r[:number],0.001)
end

def test_intermediate_output_l39
  r = spreadsheet.intermediate_output_l39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112555.310867159,r[:number],0.001)
end

def test_intermediate_output_m39
  r = spreadsheet.intermediate_output_m39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128073.43544200294,r[:number],0.001)
end

def test_intermediate_output_n39
  r = spreadsheet.intermediate_output_n39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140289.24782100742,r[:number],0.001)
end

def test_intermediate_output_o39
  r = spreadsheet.intermediate_output_o39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154427.00233436446,r[:number],0.001)
end

def test_intermediate_output_p39
  r = spreadsheet.intermediate_output_p39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168197.78243544442,r[:number],0.001)
end

def test_intermediate_output_q39
  r = spreadsheet.intermediate_output_q39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_intermediate_output_c40
  r = spreadsheet.intermediate_output_c40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Q.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d40
  r = spreadsheet.intermediate_output_d40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f40
  r = spreadsheet.intermediate_output_f40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(887.460075730032,r[:number],0.001)
end

def test_intermediate_output_h40
  r = spreadsheet.intermediate_output_h40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number],0.001)
end

def test_intermediate_output_i40
  r = spreadsheet.intermediate_output_i40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.547952837212,r[:number],0.001)
end

def test_intermediate_output_j40
  r = spreadsheet.intermediate_output_j40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.8288435333163,r[:number],0.001)
end

def test_intermediate_output_k40
  r = spreadsheet.intermediate_output_k40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.7889500727494,r[:number],0.001)
end

def test_intermediate_output_l40
  r = spreadsheet.intermediate_output_l40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.27472421443264,r[:number],0.001)
end

def test_intermediate_output_m40
  r = spreadsheet.intermediate_output_m40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.43958011019754,r[:number],0.001)
end

def test_intermediate_output_n40
  r = spreadsheet.intermediate_output_n40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.47441995977493,r[:number],0.001)
end

def test_intermediate_output_o40
  r = spreadsheet.intermediate_output_o40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88427462124332,r[:number],0.001)
end

def test_intermediate_output_p40
  r = spreadsheet.intermediate_output_p40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19102265793308,r[:number],0.001)
end

def test_intermediate_output_q40
  r = spreadsheet.intermediate_output_q40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_intermediate_output_c41
  r = spreadsheet.intermediate_output_c41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d41
  r = spreadsheet.intermediate_output_d41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil and petroleum products oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f41
  r = spreadsheet.intermediate_output_f41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.74397690520158,r[:number],0.001)
end

def test_intermediate_output_h41
  r = spreadsheet.intermediate_output_h41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40948.310155728046,r[:number],0.001)
end

def test_intermediate_output_i41
  r = spreadsheet.intermediate_output_i41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41051.80424460304,r[:number],0.001)
end

def test_intermediate_output_j41
  r = spreadsheet.intermediate_output_j41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60727.443031970986,r[:number],0.001)
end

def test_intermediate_output_k41
  r = spreadsheet.intermediate_output_k41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80772.03526139053,r[:number],0.001)
end

def test_intermediate_output_l41
  r = spreadsheet.intermediate_output_l41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100478.87524043357,r[:number],0.001)
end

def test_intermediate_output_m41
  r = spreadsheet.intermediate_output_m41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120341.36280429363,r[:number],0.001)
end

def test_intermediate_output_n41
  r = spreadsheet.intermediate_output_n41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139587.1448036336,r[:number],0.001)
end

def test_intermediate_output_o41
  r = spreadsheet.intermediate_output_o41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158558.4485635425,r[:number],0.001)
end

def test_intermediate_output_p41
  r = spreadsheet.intermediate_output_p41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177913.89788420597,r[:number],0.001)
end

def test_intermediate_output_q41
  r = spreadsheet.intermediate_output_q41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197449.3068200564,r[:number],0.001)
end

def test_intermediate_output_c42
  r = spreadsheet.intermediate_output_c42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d42
  r = spreadsheet.intermediate_output_d42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum products oversupply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f42
  r = spreadsheet.intermediate_output_f42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-60.58105389631571,r[:number],0.001)
end

def test_intermediate_output_h42
  r = spreadsheet.intermediate_output_h42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i42
  r = spreadsheet.intermediate_output_i42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j42
  r = spreadsheet.intermediate_output_j42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k42
  r = spreadsheet.intermediate_output_k42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l42
  r = spreadsheet.intermediate_output_l42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m42
  r = spreadsheet.intermediate_output_m42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n42
  r = spreadsheet.intermediate_output_n42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o42
  r = spreadsheet.intermediate_output_o42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p42
  r = spreadsheet.intermediate_output_p42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q42
  r = spreadsheet.intermediate_output_q42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_d43
  r = spreadsheet.intermediate_output_d43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil and petroleum products",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f43
  r = spreadsheet.intermediate_output_f43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.622998738918,r[:number],0.001)
end

def test_intermediate_output_h43
  r = spreadsheet.intermediate_output_h43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41924.201364077846,r[:number],0.001)
end

def test_intermediate_output_i43
  r = spreadsheet.intermediate_output_i43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.35219744025,r[:number],0.001)
end

def test_intermediate_output_j43
  r = spreadsheet.intermediate_output_j43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61374.2718755043,r[:number],0.001)
end

def test_intermediate_output_k43
  r = spreadsheet.intermediate_output_k43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.82421146327,r[:number],0.001)
end

def test_intermediate_output_l43
  r = spreadsheet.intermediate_output_l43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100867.14996464801,r[:number],0.001)
end

def test_intermediate_output_m43
  r = spreadsheet.intermediate_output_m43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120641.80238440383,r[:number],0.001)
end

def test_intermediate_output_n43
  r = spreadsheet.intermediate_output_n43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139819.61922359336,r[:number],0.001)
end

def test_intermediate_output_o43
  r = spreadsheet.intermediate_output_o43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158738.33283816374,r[:number],0.001)
end

def test_intermediate_output_p43
  r = spreadsheet.intermediate_output_p43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178053.0889068639,r[:number],0.001)
end

def test_intermediate_output_q43
  r = spreadsheet.intermediate_output_q43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_intermediate_output_c44
  r = spreadsheet.intermediate_output_c44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d44
  r = spreadsheet.intermediate_output_d44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f44
  r = spreadsheet.intermediate_output_f44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.86865308275657,r[:number],0.001)
end

def test_intermediate_output_h44
  r = spreadsheet.intermediate_output_h44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24070.26242773454,r[:number],0.001)
end

def test_intermediate_output_i44
  r = spreadsheet.intermediate_output_i44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23755.63038502401,r[:number],0.001)
end

def test_intermediate_output_j44
  r = spreadsheet.intermediate_output_j44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43111.94045526999,r[:number],0.001)
end

def test_intermediate_output_k44
  r = spreadsheet.intermediate_output_k44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62273.78128620761,r[:number],0.001)
end

def test_intermediate_output_l44
  r = spreadsheet.intermediate_output_l44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82160.25652911849,r[:number],0.001)
end

def test_intermediate_output_m44
  r = spreadsheet.intermediate_output_m44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102425.12035261364,r[:number],0.001)
end

def test_intermediate_output_n44
  r = spreadsheet.intermediate_output_n44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123104.36850778831,r[:number],0.001)
end

def test_intermediate_output_o44
  r = spreadsheet.intermediate_output_o44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145780.191909274,r[:number],0.001)
end

def test_intermediate_output_p44
  r = spreadsheet.intermediate_output_p44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169338.479117728,r[:number],0.001)
end

def test_intermediate_output_q44
  r = spreadsheet.intermediate_output_q44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193228.20445165702,r[:number],0.001)
end

def test_intermediate_output_c45
  r = spreadsheet.intermediate_output_c45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Q.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d45
  r = spreadsheet.intermediate_output_d45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f45
  r = spreadsheet.intermediate_output_f45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(834.0611502141918,r[:number],0.001)
end

def test_intermediate_output_h45
  r = spreadsheet.intermediate_output_h45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.0,r[:number],0.001)
end

def test_intermediate_output_i45
  r = spreadsheet.intermediate_output_i45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7728958841146,r[:number],0.001)
end

def test_intermediate_output_j45
  r = spreadsheet.intermediate_output_j45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.88758312334966,r[:number],0.001)
end

def test_intermediate_output_k45
  r = spreadsheet.intermediate_output_k45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.12064593855996,r[:number],0.001)
end

def test_intermediate_output_l45
  r = spreadsheet.intermediate_output_l45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.45145258994444,r[:number],0.001)
end

def test_intermediate_output_m45
  r = spreadsheet.intermediate_output_m45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.38848290828395,r[:number],0.001)
end

def test_intermediate_output_n45
  r = spreadsheet.intermediate_output_n45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.49643535647462,r[:number],0.001)
end

def test_intermediate_output_o45
  r = spreadsheet.intermediate_output_o45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.343358153041,r[:number],0.001)
end

def test_intermediate_output_p45
  r = spreadsheet.intermediate_output_p45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.27367243105833,r[:number],0.001)
end

def test_intermediate_output_q45
  r = spreadsheet.intermediate_output_q45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_intermediate_output_d46
  r = spreadsheet.intermediate_output_d46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f46
  r = spreadsheet.intermediate_output_f46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1048.9298032969484,r[:number],0.001)
end

def test_intermediate_output_h46
  r = spreadsheet.intermediate_output_h46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.26242773454,r[:number],0.001)
end

def test_intermediate_output_i46
  r = spreadsheet.intermediate_output_i46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24401.403280908125,r[:number],0.001)
end

def test_intermediate_output_j46
  r = spreadsheet.intermediate_output_j46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43607.828038393345,r[:number],0.001)
end

def test_intermediate_output_k46
  r = spreadsheet.intermediate_output_k46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62656.90193214617,r[:number],0.001)
end

def test_intermediate_output_l46
  r = spreadsheet.intermediate_output_l46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82456.70798170843,r[:number],0.001)
end

def test_intermediate_output_m46
  r = spreadsheet.intermediate_output_m46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102654.50883552192,r[:number],0.001)
end

def test_intermediate_output_n46
  r = spreadsheet.intermediate_output_n46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123281.86494314478,r[:number],0.001)
end

def test_intermediate_output_o46
  r = spreadsheet.intermediate_output_o46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145917.53526742704,r[:number],0.001)
end

def test_intermediate_output_p46
  r = spreadsheet.intermediate_output_p46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169444.75279015908,r[:number],0.001)
end

def test_intermediate_output_q46
  r = spreadsheet.intermediate_output_q46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_intermediate_output_d47
  r = spreadsheet.intermediate_output_d47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Primary Supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f47
  r = spreadsheet.intermediate_output_f47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2710.526095457397,r[:number],0.001)
end

def test_intermediate_output_h47
  r = spreadsheet.intermediate_output_h47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122823.24646633313,r[:number],0.001)
end

def test_intermediate_output_i47
  r = spreadsheet.intermediate_output_i47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120507.05078940859,r[:number],0.001)
end

def test_intermediate_output_j47
  r = spreadsheet.intermediate_output_j47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192476.9132826869,r[:number],0.001)
end

def test_intermediate_output_k47
  r = spreadsheet.intermediate_output_k47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262643.973192915,r[:number],0.001)
end

def test_intermediate_output_l47
  r = spreadsheet.intermediate_output_l47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(328089.87388798816,r[:number],0.001)
end

def test_intermediate_output_m47
  r = spreadsheet.intermediate_output_m47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387679.04810265946,r[:number],0.001)
end

def test_intermediate_output_n47
  r = spreadsheet.intermediate_output_n47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443624.6359132139,r[:number],0.001)
end

def test_intermediate_output_o47
  r = spreadsheet.intermediate_output_o47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(503243.89775079425,r[:number],0.001)
end

def test_intermediate_output_p47
  r = spreadsheet.intermediate_output_p47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(563506.5014216858,r[:number],0.001)
end

def test_intermediate_output_q47
  r = spreadsheet.intermediate_output_q47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(622258.9355837943,r[:number],0.001)
end

def test_intermediate_output_d49
  r = spreadsheet.intermediate_output_d49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy for charting supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h49
  r = spreadsheet.intermediate_output_h49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i49
  r = spreadsheet.intermediate_output_i49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j49
  r = spreadsheet.intermediate_output_j49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k49
  r = spreadsheet.intermediate_output_k49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l49
  r = spreadsheet.intermediate_output_l49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m49
  r = spreadsheet.intermediate_output_m49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n49
  r = spreadsheet.intermediate_output_n49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o49
  r = spreadsheet.intermediate_output_o49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p49
  r = spreadsheet.intermediate_output_p49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q49
  r = spreadsheet.intermediate_output_q49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c51
  r = spreadsheet.intermediate_output_c51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conversion losses, distribution, and own use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c52
  r = spreadsheet.intermediate_output_c52
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d52
  r = spreadsheet.intermediate_output_d52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conversion losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f52
  r = spreadsheet.intermediate_output_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561.4193024884444,r[:number],0.001)
end

def test_intermediate_output_h52
  r = spreadsheet.intermediate_output_h52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36376.683494292236,r[:number],0.001)
end

def test_intermediate_output_i52
  r = spreadsheet.intermediate_output_i52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34588.62833555819,r[:number],0.001)
end

def test_intermediate_output_j52
  r = spreadsheet.intermediate_output_j52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72697.45780950687,r[:number],0.001)
end

def test_intermediate_output_k52
  r = spreadsheet.intermediate_output_k52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107800.3128691934,r[:number],0.001)
end

def test_intermediate_output_l52
  r = spreadsheet.intermediate_output_l52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137925.96271495885,r[:number],0.001)
end

def test_intermediate_output_m52
  r = spreadsheet.intermediate_output_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161923.83499725343,r[:number],0.001)
end

def test_intermediate_output_n52
  r = spreadsheet.intermediate_output_n52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182075.53052961503,r[:number],0.001)
end

def test_intermediate_output_o52
  r = spreadsheet.intermediate_output_o52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205831.62062071456,r[:number],0.001)
end

def test_intermediate_output_p52
  r = spreadsheet.intermediate_output_p52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229477.97681548205,r[:number],0.001)
end

def test_intermediate_output_q52
  r = spreadsheet.intermediate_output_q52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251166.63485231015,r[:number],0.001)
end

def test_intermediate_output_c53
  r = spreadsheet.intermediate_output_c53
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d53
  r = spreadsheet.intermediate_output_d53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distribution losses and own use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f53
  r = spreadsheet.intermediate_output_f53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.94703532055274,r[:number],0.001)
end

def test_intermediate_output_h53
  r = spreadsheet.intermediate_output_h53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3114.107947907133,r[:number],0.001)
end

def test_intermediate_output_i53
  r = spreadsheet.intermediate_output_i53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2939.7169234586618,r[:number],0.001)
end

def test_intermediate_output_j53
  r = spreadsheet.intermediate_output_j53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4860.032670999012,r[:number],0.001)
end

def test_intermediate_output_k53
  r = spreadsheet.intermediate_output_k53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6755.651590510577,r[:number],0.001)
end

def test_intermediate_output_l53
  r = spreadsheet.intermediate_output_l53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8461.617843099997,r[:number],0.001)
end

def test_intermediate_output_m53
  r = spreadsheet.intermediate_output_m53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10122.779825367154,r[:number],0.001)
end

def test_intermediate_output_n53
  r = spreadsheet.intermediate_output_n53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11759.37303501364,r[:number],0.001)
end

def test_intermediate_output_o53
  r = spreadsheet.intermediate_output_o53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13362.558382022802,r[:number],0.001)
end

def test_intermediate_output_p53
  r = spreadsheet.intermediate_output_p53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14892.979481013437,r[:number],0.001)
end

def test_intermediate_output_q53
  r = spreadsheet.intermediate_output_q53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16368.383935603495,r[:number],0.001)
end

def test_intermediate_output_d54
  r = spreadsheet.intermediate_output_d54
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply net of losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f54
  r = spreadsheet.intermediate_output_f54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1962.1597576483998,r[:number],0.001)
end

def test_intermediate_output_h54
  r = spreadsheet.intermediate_output_h54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83332.45502413376,r[:number],0.001)
end

def test_intermediate_output_i54
  r = spreadsheet.intermediate_output_i54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82978.70553039174,r[:number],0.001)
end

def test_intermediate_output_j54
  r = spreadsheet.intermediate_output_j54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114919.42280218101,r[:number],0.001)
end

def test_intermediate_output_k54
  r = spreadsheet.intermediate_output_k54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148088.008733211,r[:number],0.001)
end

def test_intermediate_output_l54
  r = spreadsheet.intermediate_output_l54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181702.29332992932,r[:number],0.001)
end

def test_intermediate_output_m54
  r = spreadsheet.intermediate_output_m54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215632.43328003888,r[:number],0.001)
end

def test_intermediate_output_n54
  r = spreadsheet.intermediate_output_n54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(249789.7323485852,r[:number],0.001)
end

def test_intermediate_output_o54
  r = spreadsheet.intermediate_output_o54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284049.7187480569,r[:number],0.001)
end

def test_intermediate_output_p54
  r = spreadsheet.intermediate_output_p54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(319135.5451251903,r[:number],0.001)
end

def test_intermediate_output_q54
  r = spreadsheet.intermediate_output_q54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354723.9167958806,r[:number],0.001)
end

def test_intermediate_output_c56
  r = spreadsheet.intermediate_output_c56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply / demand not accounted for",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c58
  r = spreadsheet.intermediate_output_c58
  assert_equal(:ExcelString,r[:type])
  assert_equal("C.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d58
  r = spreadsheet.intermediate_output_d58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal and fossil waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f58
  r = spreadsheet.intermediate_output_f58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4668835385115244,r[:number],0.001)
end

def test_intermediate_output_h58
  r = spreadsheet.intermediate_output_h58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.0463630789890885e-12,r[:number],0.001)
end

def test_intermediate_output_i58
  r = spreadsheet.intermediate_output_i58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8421709430404007e-13,r[:number],0.001)
end

def test_intermediate_output_j58
  r = spreadsheet.intermediate_output_j58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8421709430404007e-13,r[:number],0.001)
end

def test_intermediate_output_k58
  r = spreadsheet.intermediate_output_k58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(6.991740519879386e-12,r[:number],0.001)
end

def test_intermediate_output_l58
  r = spreadsheet.intermediate_output_l58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(6.991740519879386e-12,r[:number],0.001)
end

def test_intermediate_output_m58
  r = spreadsheet.intermediate_output_m58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.495870259939693e-12,r[:number],0.001)
end

def test_intermediate_output_n58
  r = spreadsheet.intermediate_output_n58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.495870259939693e-12,r[:number],0.001)
end

def test_intermediate_output_o58
  r = spreadsheet.intermediate_output_o58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.495870259939693e-12,r[:number],0.001)
end

def test_intermediate_output_p58
  r = spreadsheet.intermediate_output_p58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.495870259939693e-12,r[:number],0.001)
end

def test_intermediate_output_q58
  r = spreadsheet.intermediate_output_q58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.495870259939693e-12,r[:number],0.001)
end

def test_intermediate_output_c59
  r = spreadsheet.intermediate_output_c59
  assert_equal(:ExcelString,r[:type])
  assert_equal("C.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d59
  r = spreadsheet.intermediate_output_d59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil and petroleum products",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f59
  r = spreadsheet.intermediate_output_f59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.99412042466514,r[:number],0.001)
end

def test_intermediate_output_h59
  r = spreadsheet.intermediate_output_h59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.296918293926865e-12,r[:number],0.001)
end

def test_intermediate_output_i59
  r = spreadsheet.intermediate_output_i59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(3.183231456205249e-12,r[:number],0.001)
end

def test_intermediate_output_j59
  r = spreadsheet.intermediate_output_j59
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k59
  r = spreadsheet.intermediate_output_k59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.4442670110147446e-12,r[:number],0.001)
end

def test_intermediate_output_l59
  r = spreadsheet.intermediate_output_l59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.991740519879386e-12,r[:number],0.001)
end

def test_intermediate_output_m59
  r = spreadsheet.intermediate_output_m59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(4.774847184307873e-12,r[:number],0.001)
end

def test_intermediate_output_n59
  r = spreadsheet.intermediate_output_n59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.233502189279534e-11,r[:number],0.001)
end

def test_intermediate_output_o59
  r = spreadsheet.intermediate_output_o59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.1141310096718371e-11,r[:number],0.001)
end

def test_intermediate_output_p59
  r = spreadsheet.intermediate_output_p59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.7337242752546445e-12,r[:number],0.001)
end

def test_intermediate_output_q59
  r = spreadsheet.intermediate_output_q59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.247713043994736e-11,r[:number],0.001)
end

def test_intermediate_output_c60
  r = spreadsheet.intermediate_output_c60
  assert_equal(:ExcelString,r[:type])
  assert_equal("C.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d60
  r = spreadsheet.intermediate_output_d60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f60
  r = spreadsheet.intermediate_output_f60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-10.228142999999932,r[:number],0.001)
end

def test_intermediate_output_h60
  r = spreadsheet.intermediate_output_h60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i60
  r = spreadsheet.intermediate_output_i60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j60
  r = spreadsheet.intermediate_output_j60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.0127011996228248e-12,r[:number],0.001)
end

def test_intermediate_output_k60
  r = spreadsheet.intermediate_output_k60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.3874235921539366e-12,r[:number],0.001)
end

def test_intermediate_output_l60
  r = spreadsheet.intermediate_output_l60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.3642420526593924e-12,r[:number],0.001)
end

def test_intermediate_output_m60
  r = spreadsheet.intermediate_output_m60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.2168933355715126e-12,r[:number],0.001)
end

def test_intermediate_output_n60
  r = spreadsheet.intermediate_output_n60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.7000623958883807e-12,r[:number],0.001)
end

def test_intermediate_output_o60
  r = spreadsheet.intermediate_output_o60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.5579538487363607e-13,r[:number],0.001)
end

def test_intermediate_output_p60
  r = spreadsheet.intermediate_output_p60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-8.768097359279636e-12,r[:number],0.001)
end

def test_intermediate_output_q60
  r = spreadsheet.intermediate_output_q60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.297451035497943e-11,r[:number],0.001)
end

def test_intermediate_output_c61
  r = spreadsheet.intermediate_output_c61
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d61
  r = spreadsheet.intermediate_output_d61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f61
  r = spreadsheet.intermediate_output_f61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h61
  r = spreadsheet.intermediate_output_h61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i61
  r = spreadsheet.intermediate_output_i61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j61
  r = spreadsheet.intermediate_output_j61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k61
  r = spreadsheet.intermediate_output_k61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l61
  r = spreadsheet.intermediate_output_l61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m61
  r = spreadsheet.intermediate_output_m61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n61
  r = spreadsheet.intermediate_output_n61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o61
  r = spreadsheet.intermediate_output_o61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p61
  r = spreadsheet.intermediate_output_p61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q61
  r = spreadsheet.intermediate_output_q61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c62
  r = spreadsheet.intermediate_output_c62
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d62
  r = spreadsheet.intermediate_output_d62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f62
  r = spreadsheet.intermediate_output_f62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-40.98525046434433,r[:number],0.001)
end

def test_intermediate_output_h62
  r = spreadsheet.intermediate_output_h62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i62
  r = spreadsheet.intermediate_output_i62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j62
  r = spreadsheet.intermediate_output_j62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k62
  r = spreadsheet.intermediate_output_k62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l62
  r = spreadsheet.intermediate_output_l62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m62
  r = spreadsheet.intermediate_output_m62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n62
  r = spreadsheet.intermediate_output_n62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o62
  r = spreadsheet.intermediate_output_o62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p62
  r = spreadsheet.intermediate_output_p62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q62
  r = spreadsheet.intermediate_output_q62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c63
  r = spreadsheet.intermediate_output_c63
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d63
  r = spreadsheet.intermediate_output_d63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f63
  r = spreadsheet.intermediate_output_f63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.047768550745332,r[:number],0.001)
end

def test_intermediate_output_h63
  r = spreadsheet.intermediate_output_h63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i63
  r = spreadsheet.intermediate_output_i63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j63
  r = spreadsheet.intermediate_output_j63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k63
  r = spreadsheet.intermediate_output_k63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l63
  r = spreadsheet.intermediate_output_l63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m63
  r = spreadsheet.intermediate_output_m63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n63
  r = spreadsheet.intermediate_output_n63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o63
  r = spreadsheet.intermediate_output_o63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p63
  r = spreadsheet.intermediate_output_p63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q63
  r = spreadsheet.intermediate_output_q63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c64
  r = spreadsheet.intermediate_output_c64
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d64
  r = spreadsheet.intermediate_output_d64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Blast furnace gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f64
  r = spreadsheet.intermediate_output_f64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.11045622230000071,r[:number],0.001)
end

def test_intermediate_output_h64
  r = spreadsheet.intermediate_output_h64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i64
  r = spreadsheet.intermediate_output_i64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j64
  r = spreadsheet.intermediate_output_j64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k64
  r = spreadsheet.intermediate_output_k64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l64
  r = spreadsheet.intermediate_output_l64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m64
  r = spreadsheet.intermediate_output_m64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n64
  r = spreadsheet.intermediate_output_n64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o64
  r = spreadsheet.intermediate_output_o64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p64
  r = spreadsheet.intermediate_output_p64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q64
  r = spreadsheet.intermediate_output_q64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c65
  r = spreadsheet.intermediate_output_c65
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.08",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d65
  r = spreadsheet.intermediate_output_d65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Edible biomass",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f65
  r = spreadsheet.intermediate_output_f65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h65
  r = spreadsheet.intermediate_output_h65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i65
  r = spreadsheet.intermediate_output_i65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j65
  r = spreadsheet.intermediate_output_j65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k65
  r = spreadsheet.intermediate_output_k65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l65
  r = spreadsheet.intermediate_output_l65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m65
  r = spreadsheet.intermediate_output_m65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n65
  r = spreadsheet.intermediate_output_n65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o65
  r = spreadsheet.intermediate_output_o65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p65
  r = spreadsheet.intermediate_output_p65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q65
  r = spreadsheet.intermediate_output_q65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c66
  r = spreadsheet.intermediate_output_c66
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.07",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d66
  r = spreadsheet.intermediate_output_d66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heat transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f66
  r = spreadsheet.intermediate_output_f66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0029616599999983118,r[:number],0.001)
end

def test_intermediate_output_h66
  r = spreadsheet.intermediate_output_h66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i66
  r = spreadsheet.intermediate_output_i66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j66
  r = spreadsheet.intermediate_output_j66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k66
  r = spreadsheet.intermediate_output_k66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l66
  r = spreadsheet.intermediate_output_l66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m66
  r = spreadsheet.intermediate_output_m66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n66
  r = spreadsheet.intermediate_output_n66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o66
  r = spreadsheet.intermediate_output_o66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p66
  r = spreadsheet.intermediate_output_p66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q66
  r = spreadsheet.intermediate_output_q66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c67
  r = spreadsheet.intermediate_output_c67
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.09",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d67
  r = spreadsheet.intermediate_output_d67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dry biomass and waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f67
  r = spreadsheet.intermediate_output_f67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.3409880345172063,r[:number],0.001)
end

def test_intermediate_output_h67
  r = spreadsheet.intermediate_output_h67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3627.5701944444418,r[:number],0.001)
end

def test_intermediate_output_i67
  r = spreadsheet.intermediate_output_i67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j67
  r = spreadsheet.intermediate_output_j67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k67
  r = spreadsheet.intermediate_output_k67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l67
  r = spreadsheet.intermediate_output_l67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m67
  r = spreadsheet.intermediate_output_m67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n67
  r = spreadsheet.intermediate_output_n67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o67
  r = spreadsheet.intermediate_output_o67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p67
  r = spreadsheet.intermediate_output_p67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q67
  r = spreadsheet.intermediate_output_q67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c68
  r = spreadsheet.intermediate_output_c68
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.10",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d68
  r = spreadsheet.intermediate_output_d68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wet biomass and waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f68
  r = spreadsheet.intermediate_output_f68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h68
  r = spreadsheet.intermediate_output_h68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_intermediate_output_i68
  r = spreadsheet.intermediate_output_i68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j68
  r = spreadsheet.intermediate_output_j68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k68
  r = spreadsheet.intermediate_output_k68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l68
  r = spreadsheet.intermediate_output_l68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m68
  r = spreadsheet.intermediate_output_m68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n68
  r = spreadsheet.intermediate_output_n68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o68
  r = spreadsheet.intermediate_output_o68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p68
  r = spreadsheet.intermediate_output_p68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q68
  r = spreadsheet.intermediate_output_q68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c69
  r = spreadsheet.intermediate_output_c69
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.11",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d69
  r = spreadsheet.intermediate_output_d69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic solar thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f69
  r = spreadsheet.intermediate_output_f69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h69
  r = spreadsheet.intermediate_output_h69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i69
  r = spreadsheet.intermediate_output_i69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j69
  r = spreadsheet.intermediate_output_j69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k69
  r = spreadsheet.intermediate_output_k69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l69
  r = spreadsheet.intermediate_output_l69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m69
  r = spreadsheet.intermediate_output_m69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n69
  r = spreadsheet.intermediate_output_n69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o69
  r = spreadsheet.intermediate_output_o69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p69
  r = spreadsheet.intermediate_output_p69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q69
  r = spreadsheet.intermediate_output_q69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c70
  r = spreadsheet.intermediate_output_c70
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.12",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d70
  r = spreadsheet.intermediate_output_d70
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f70
  r = spreadsheet.intermediate_output_f70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h70
  r = spreadsheet.intermediate_output_h70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i70
  r = spreadsheet.intermediate_output_i70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j70
  r = spreadsheet.intermediate_output_j70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k70
  r = spreadsheet.intermediate_output_k70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l70
  r = spreadsheet.intermediate_output_l70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m70
  r = spreadsheet.intermediate_output_m70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n70
  r = spreadsheet.intermediate_output_n70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o70
  r = spreadsheet.intermediate_output_o70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p70
  r = spreadsheet.intermediate_output_p70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q70
  r = spreadsheet.intermediate_output_q70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c71
  r = spreadsheet.intermediate_output_c71
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.13",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d71
  r = spreadsheet.intermediate_output_d71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy crops (second generation)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f71
  r = spreadsheet.intermediate_output_f71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h71
  r = spreadsheet.intermediate_output_h71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i71
  r = spreadsheet.intermediate_output_i71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j71
  r = spreadsheet.intermediate_output_j71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k71
  r = spreadsheet.intermediate_output_k71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l71
  r = spreadsheet.intermediate_output_l71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m71
  r = spreadsheet.intermediate_output_m71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n71
  r = spreadsheet.intermediate_output_n71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o71
  r = spreadsheet.intermediate_output_o71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p71
  r = spreadsheet.intermediate_output_p71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q71
  r = spreadsheet.intermediate_output_q71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_d72
  r = spreadsheet.intermediate_output_d72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total unnaccounted supply / demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f72
  r = spreadsheet.intermediate_output_f72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.15310354723947603,r[:number],0.001)
end

def test_intermediate_output_h72
  r = spreadsheet.intermediate_output_h72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4060.9035277777766,r[:number],0.001)
end

def test_intermediate_output_i72
  r = spreadsheet.intermediate_output_i72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.8990143619012088e-12,r[:number],0.001)
end

def test_intermediate_output_j72
  r = spreadsheet.intermediate_output_j72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.296918293926865e-12,r[:number],0.001)
end

def test_intermediate_output_k72
  r = spreadsheet.intermediate_output_k72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.1823431123048067e-11,r[:number],0.001)
end

def test_intermediate_output_l72
  r = spreadsheet.intermediate_output_l72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.3642420526593924e-12,r[:number],0.001)
end

def test_intermediate_output_m72
  r = spreadsheet.intermediate_output_m72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.0487610779819079e-11,r[:number],0.001)
end

def test_intermediate_output_n72
  r = spreadsheet.intermediate_output_n72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.8530954548623413e-11,r[:number],0.001)
end

def test_intermediate_output_o72
  r = spreadsheet.intermediate_output_o72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.48929757415317e-11,r[:number],0.001)
end

def test_intermediate_output_p72
  r = spreadsheet.intermediate_output_p72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.005951374594588e-12,r[:number],0.001)
end

def test_intermediate_output_q72
  r = spreadsheet.intermediate_output_q72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.9984903449076228e-12,r[:number],0.001)
end

def test_intermediate_output_d74
  r = spreadsheet.intermediate_output_d74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply, Demand, and Unaccounted supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f74
  r = spreadsheet.intermediate_output_f74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.4211253699160755,r[:number],0.001)
end

def test_intermediate_output_h74
  r = spreadsheet.intermediate_output_h74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10651.92308478989,r[:number],0.001)
end

def test_intermediate_output_i74
  r = spreadsheet.intermediate_output_i74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9946.880116959062,r[:number],0.001)
end

def test_intermediate_output_j74
  r = spreadsheet.intermediate_output_j74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26902.00438103251,r[:number],0.001)
end

def test_intermediate_output_k74
  r = spreadsheet.intermediate_output_k74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43640.19213848181,r[:number],0.001)
end

def test_intermediate_output_l74
  r = spreadsheet.intermediate_output_l74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60135.98542754038,r[:number],0.001)
end

def test_intermediate_output_m74
  r = spreadsheet.intermediate_output_m74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76357.3931441632,r[:number],0.001)
end

def test_intermediate_output_n74
  r = spreadsheet.intermediate_output_n74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92274.99679138257,r[:number],0.001)
end

def test_intermediate_output_o74
  r = spreadsheet.intermediate_output_o74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107882.8370340558,r[:number],0.001)
end

def test_intermediate_output_p74
  r = spreadsheet.intermediate_output_p74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123162.10235341464,r[:number],0.001)
end

def test_intermediate_output_q74
  r = spreadsheet.intermediate_output_q74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132343.5697569353,r[:number],0.001)
end

def test_intermediate_output_b78
  r = spreadsheet.intermediate_output_b78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid (net of distribution losses)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c80
  r = spreadsheet.intermediate_output_c80
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d80
  r = spreadsheet.intermediate_output_d80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity (delivered to end user)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f80
  r = spreadsheet.intermediate_output_f80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-352.03495223253594,r[:number],0.001)
end

def test_intermediate_output_h80
  r = spreadsheet.intermediate_output_h80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-16990.96944991893,r[:number],0.001)
end

def test_intermediate_output_i80
  r = spreadsheet.intermediate_output_i80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-17383.249986052433,r[:number],0.001)
end

def test_intermediate_output_j80
  r = spreadsheet.intermediate_output_j80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-31000.13065960994,r[:number],0.001)
end

def test_intermediate_output_k80
  r = spreadsheet.intermediate_output_k80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-43875.29243872835,r[:number],0.001)
end

def test_intermediate_output_l80
  r = spreadsheet.intermediate_output_l80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-56189.42940945653,r[:number],0.001)
end

def test_intermediate_output_m80
  r = spreadsheet.intermediate_output_m80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-67874.85783285066,r[:number],0.001)
end

def test_intermediate_output_n80
  r = spreadsheet.intermediate_output_n80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-78995.87368385583,r[:number],0.001)
end

def test_intermediate_output_o80
  r = spreadsheet.intermediate_output_o80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-89571.00075703414,r[:number],0.001)
end

def test_intermediate_output_p80
  r = spreadsheet.intermediate_output_p80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-99597.69472113022,r[:number],0.001)
end

def test_intermediate_output_q80
  r = spreadsheet.intermediate_output_q80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-109196.34371245517,r[:number],0.001)
end

def test_intermediate_output_r80
  r = spreadsheet.intermediate_output_r80
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c81
  r = spreadsheet.intermediate_output_c81
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d81
  r = spreadsheet.intermediate_output_d81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity (supplied to grid)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f81
  r = spreadsheet.intermediate_output_f81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.72382686261983,r[:number],0.001)
end

def test_intermediate_output_h81
  r = spreadsheet.intermediate_output_h81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16990.96944991893,r[:number],0.001)
end

def test_intermediate_output_i81
  r = spreadsheet.intermediate_output_i81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17383.249986052433,r[:number],0.001)
end

def test_intermediate_output_j81
  r = spreadsheet.intermediate_output_j81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31000.13065960994,r[:number],0.001)
end

def test_intermediate_output_k81
  r = spreadsheet.intermediate_output_k81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43875.29243872834,r[:number],0.001)
end

def test_intermediate_output_l81
  r = spreadsheet.intermediate_output_l81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56189.42940945653,r[:number],0.001)
end

def test_intermediate_output_m81
  r = spreadsheet.intermediate_output_m81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67874.85783285066,r[:number],0.001)
end

def test_intermediate_output_n81
  r = spreadsheet.intermediate_output_n81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78995.87368385583,r[:number],0.001)
end

def test_intermediate_output_o81
  r = spreadsheet.intermediate_output_o81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89571.00075703414,r[:number],0.001)
end

def test_intermediate_output_p81
  r = spreadsheet.intermediate_output_p81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99597.69472113022,r[:number],0.001)
end

def test_intermediate_output_q81
  r = spreadsheet.intermediate_output_q81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109196.34371245517,r[:number],0.001)
end

def test_intermediate_output_d82
  r = spreadsheet.intermediate_output_d82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f82
  r = spreadsheet.intermediate_output_f82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6888746300838875,r[:number],0.001)
end

def test_intermediate_output_h82
  r = spreadsheet.intermediate_output_h82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i82
  r = spreadsheet.intermediate_output_i82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j82
  r = spreadsheet.intermediate_output_j82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k82
  r = spreadsheet.intermediate_output_k82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l82
  r = spreadsheet.intermediate_output_l82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m82
  r = spreadsheet.intermediate_output_m82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n82
  r = spreadsheet.intermediate_output_n82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o82
  r = spreadsheet.intermediate_output_o82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p82
  r = spreadsheet.intermediate_output_p82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q82
  r = spreadsheet.intermediate_output_q82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c84
  r = spreadsheet.intermediate_output_c84
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d84
  r = spreadsheet.intermediate_output_d84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h84
  r = spreadsheet.intermediate_output_h84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1562.8716335919707,r[:number],0.001)
end

def test_intermediate_output_i84
  r = spreadsheet.intermediate_output_i84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1598.984580872937,r[:number],0.001)
end

def test_intermediate_output_j84
  r = spreadsheet.intermediate_output_j84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2481.4998799189016,r[:number],0.001)
end

def test_intermediate_output_k84
  r = spreadsheet.intermediate_output_k84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3401.9590656748405,r[:number],0.001)
end

def test_intermediate_output_l84
  r = spreadsheet.intermediate_output_l84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-4164.814114722969,r[:number],0.001)
end

def test_intermediate_output_m84
  r = spreadsheet.intermediate_output_m84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-4918.410532578026,r[:number],0.001)
end

def test_intermediate_output_n84
  r = spreadsheet.intermediate_output_n84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5683.019807823512,r[:number],0.001)
end

def test_intermediate_output_o84
  r = spreadsheet.intermediate_output_o84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6431.212806651689,r[:number],0.001)
end

def test_intermediate_output_p84
  r = spreadsheet.intermediate_output_p84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7134.369895130425,r[:number],0.001)
end

def test_intermediate_output_q84
  r = spreadsheet.intermediate_output_q84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7809.1461820248805,r[:number],0.001)
end

def test_intermediate_output_d85
  r = spreadsheet.intermediate_output_d85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Demand (for charting)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h85
  r = spreadsheet.intermediate_output_h85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18553.841083510903,r[:number],0.001)
end

def test_intermediate_output_i85
  r = spreadsheet.intermediate_output_i85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18982.23456692537,r[:number],0.001)
end

def test_intermediate_output_j85
  r = spreadsheet.intermediate_output_j85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33481.63053952884,r[:number],0.001)
end

def test_intermediate_output_k85
  r = spreadsheet.intermediate_output_k85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47277.25150440319,r[:number],0.001)
end

def test_intermediate_output_l85
  r = spreadsheet.intermediate_output_l85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60354.243524179496,r[:number],0.001)
end

def test_intermediate_output_m85
  r = spreadsheet.intermediate_output_m85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72793.26836542868,r[:number],0.001)
end

def test_intermediate_output_n85
  r = spreadsheet.intermediate_output_n85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84678.89349167934,r[:number],0.001)
end

def test_intermediate_output_o85
  r = spreadsheet.intermediate_output_o85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96002.21356368583,r[:number],0.001)
end

def test_intermediate_output_p85
  r = spreadsheet.intermediate_output_p85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106732.06461626064,r[:number],0.001)
end

def test_intermediate_output_q85
  r = spreadsheet.intermediate_output_q85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117005.48989448005,r[:number],0.001)
end

def test_intermediate_output_d86
  r = spreadsheet.intermediate_output_d86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy for charting",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h86
  r = spreadsheet.intermediate_output_h86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19740.560078471095,r[:number],0.001)
end

def test_intermediate_output_i86
  r = spreadsheet.intermediate_output_i86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19387.934051749107,r[:number],0.001)
end

def test_intermediate_output_j86
  r = spreadsheet.intermediate_output_j86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34041.77371177525,r[:number],0.001)
end

def test_intermediate_output_k86
  r = spreadsheet.intermediate_output_k86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47942.20951319343,r[:number],0.001)
end

def test_intermediate_output_l86
  r = spreadsheet.intermediate_output_l86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61074.386424473094,r[:number],0.001)
end

def test_intermediate_output_m86
  r = spreadsheet.intermediate_output_m86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73518.96128307248,r[:number],0.001)
end

def test_intermediate_output_n86
  r = spreadsheet.intermediate_output_n86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85360.49289286285,r[:number],0.001)
end

def test_intermediate_output_o86
  r = spreadsheet.intermediate_output_o86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96590.0666491222,r[:number],0.001)
end

def test_intermediate_output_p86
  r = spreadsheet.intermediate_output_p86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107176.5079676891,r[:number],0.001)
end

def test_intermediate_output_q86
  r = spreadsheet.intermediate_output_q86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117256.84660500828,r[:number],0.001)
end

def test_intermediate_output_c89
  r = spreadsheet.intermediate_output_c89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Z.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d89
  r = spreadsheet.intermediate_output_d89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Unallocated",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f89
  r = spreadsheet.intermediate_output_f89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.109999999999673,r[:number],0.001)
end

def test_intermediate_output_h89
  r = spreadsheet.intermediate_output_h89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11345.398373678785,r[:number],0.001)
end

def test_intermediate_output_i89
  r = spreadsheet.intermediate_output_i89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9946.880116959066,r[:number],0.001)
end

def test_intermediate_output_j89
  r = spreadsheet.intermediate_output_j89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26902.004381032544,r[:number],0.001)
end

def test_intermediate_output_k89
  r = spreadsheet.intermediate_output_k89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43640.19213848174,r[:number],0.001)
end

def test_intermediate_output_l89
  r = spreadsheet.intermediate_output_l89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60135.98542754029,r[:number],0.001)
end

def test_intermediate_output_m89
  r = spreadsheet.intermediate_output_m89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76357.39314416307,r[:number],0.001)
end

def test_intermediate_output_n89
  r = spreadsheet.intermediate_output_n89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92274.99679138273,r[:number],0.001)
end

def test_intermediate_output_o89
  r = spreadsheet.intermediate_output_o89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107882.8370340557,r[:number],0.001)
end

def test_intermediate_output_p89
  r = spreadsheet.intermediate_output_p89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123162.10235341449,r[:number],0.001)
end

def test_intermediate_output_q89
  r = spreadsheet.intermediate_output_q89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132343.5697569354,r[:number],0.001)
end

def test_intermediate_output_d91
  r = spreadsheet.intermediate_output_d91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Net balance (should be zero!)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f91
  r = spreadsheet.intermediate_output_f91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.219999999999636,r[:number],0.001)
end

def test_intermediate_output_h91
  r = spreadsheet.intermediate_output_h91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21997.321458468676,r[:number],0.001)
end

def test_intermediate_output_i91
  r = spreadsheet.intermediate_output_i91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19893.76023391813,r[:number],0.001)
end

def test_intermediate_output_j91
  r = spreadsheet.intermediate_output_j91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53804.00876206506,r[:number],0.001)
end

def test_intermediate_output_k91
  r = spreadsheet.intermediate_output_k91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87280.38427696355,r[:number],0.001)
end

def test_intermediate_output_l91
  r = spreadsheet.intermediate_output_l91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120271.97085508067,r[:number],0.001)
end

def test_intermediate_output_m91
  r = spreadsheet.intermediate_output_m91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152714.78628832626,r[:number],0.001)
end

def test_intermediate_output_n91
  r = spreadsheet.intermediate_output_n91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184549.99358276528,r[:number],0.001)
end

def test_intermediate_output_o91
  r = spreadsheet.intermediate_output_o91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215765.67406811152,r[:number],0.001)
end

def test_intermediate_output_p91
  r = spreadsheet.intermediate_output_p91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246324.20470682913,r[:number],0.001)
end

def test_intermediate_output_q91
  r = spreadsheet.intermediate_output_q91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(264687.1395138707,r[:number],0.001)
end

def test_intermediate_output_b93
  r = spreadsheet.intermediate_output_b93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c95
  r = spreadsheet.intermediate_output_c95
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d95
  r = spreadsheet.intermediate_output_d95
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h95
  r = spreadsheet.intermediate_output_h95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_i95
  r = spreadsheet.intermediate_output_i95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j95
  r = spreadsheet.intermediate_output_j95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k95
  r = spreadsheet.intermediate_output_k95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l95
  r = spreadsheet.intermediate_output_l95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m95
  r = spreadsheet.intermediate_output_m95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n95
  r = spreadsheet.intermediate_output_n95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o95
  r = spreadsheet.intermediate_output_o95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p95
  r = spreadsheet.intermediate_output_p95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q95
  r = spreadsheet.intermediate_output_q95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_c96
  r = spreadsheet.intermediate_output_c96
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d96
  r = spreadsheet.intermediate_output_d96
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydrocarbon power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f96
  r = spreadsheet.intermediate_output_f96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.53401618322465,r[:number],0.001)
end

def test_intermediate_output_h96
  r = spreadsheet.intermediate_output_h96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13444.700710146763,r[:number],0.001)
end

def test_intermediate_output_i96
  r = spreadsheet.intermediate_output_i96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13073.877122244974,r[:number],0.001)
end

def test_intermediate_output_j96
  r = spreadsheet.intermediate_output_j96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26553.94180211726,r[:number],0.001)
end

def test_intermediate_output_k96
  r = spreadsheet.intermediate_output_k96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38808.06104307044,r[:number],0.001)
end

def test_intermediate_output_l96
  r = spreadsheet.intermediate_output_l96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50826.60879563468,r[:number],0.001)
end

def test_intermediate_output_m96
  r = spreadsheet.intermediate_output_m96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62387.818580883395,r[:number],0.001)
end

def test_intermediate_output_n96
  r = spreadsheet.intermediate_output_n96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73464.02788948739,r[:number],0.001)
end

def test_intermediate_output_o96
  r = spreadsheet.intermediate_output_o96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84050.95051163074,r[:number],0.001)
end

def test_intermediate_output_p96
  r = spreadsheet.intermediate_output_p96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94224.03326991553,r[:number],0.001)
end

def test_intermediate_output_q96
  r = spreadsheet.intermediate_output_q96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103809.20981408564,r[:number],0.001)
end

def test_intermediate_output_c97
  r = spreadsheet.intermediate_output_c97
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d97
  r = spreadsheet.intermediate_output_d97
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f97
  r = spreadsheet.intermediate_output_f97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h97
  r = spreadsheet.intermediate_output_h97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i97
  r = spreadsheet.intermediate_output_i97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j97
  r = spreadsheet.intermediate_output_j97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k97
  r = spreadsheet.intermediate_output_k97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l97
  r = spreadsheet.intermediate_output_l97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m97
  r = spreadsheet.intermediate_output_m97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n97
  r = spreadsheet.intermediate_output_n97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o97
  r = spreadsheet.intermediate_output_o97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p97
  r = spreadsheet.intermediate_output_p97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q97
  r = spreadsheet.intermediate_output_q97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c98
  r = spreadsheet.intermediate_output_c98
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d98
  r = spreadsheet.intermediate_output_d98
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f98
  r = spreadsheet.intermediate_output_f98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h98
  r = spreadsheet.intermediate_output_h98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i98
  r = spreadsheet.intermediate_output_i98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j98
  r = spreadsheet.intermediate_output_j98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k98
  r = spreadsheet.intermediate_output_k98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l98
  r = spreadsheet.intermediate_output_l98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m98
  r = spreadsheet.intermediate_output_m98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n98
  r = spreadsheet.intermediate_output_n98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o98
  r = spreadsheet.intermediate_output_o98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p98
  r = spreadsheet.intermediate_output_p98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q98
  r = spreadsheet.intermediate_output_q98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_d99
  r = spreadsheet.intermediate_output_d99
  assert_equal(:ExcelString,r[:type])
  assert_equal("Unabated thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f99
  r = spreadsheet.intermediate_output_f99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.53401618322465,r[:number],0.001)
end

def test_intermediate_output_g99
  r = spreadsheet.intermediate_output_g99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h99
  r = spreadsheet.intermediate_output_h99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13444.700710146763,r[:number],0.001)
end

def test_intermediate_output_i99
  r = spreadsheet.intermediate_output_i99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13073.877122244974,r[:number],0.001)
end

def test_intermediate_output_j99
  r = spreadsheet.intermediate_output_j99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26553.94180211726,r[:number],0.001)
end

def test_intermediate_output_k99
  r = spreadsheet.intermediate_output_k99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38808.06104307044,r[:number],0.001)
end

def test_intermediate_output_l99
  r = spreadsheet.intermediate_output_l99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50826.60879563468,r[:number],0.001)
end

def test_intermediate_output_m99
  r = spreadsheet.intermediate_output_m99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62387.818580883395,r[:number],0.001)
end

def test_intermediate_output_n99
  r = spreadsheet.intermediate_output_n99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73464.02788948739,r[:number],0.001)
end

def test_intermediate_output_o99
  r = spreadsheet.intermediate_output_o99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84050.95051163074,r[:number],0.001)
end

def test_intermediate_output_p99
  r = spreadsheet.intermediate_output_p99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94224.03326991553,r[:number],0.001)
end

def test_intermediate_output_q99
  r = spreadsheet.intermediate_output_q99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103809.20981408564,r[:number],0.001)
end

def test_intermediate_output_c100
  r = spreadsheet.intermediate_output_c100
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d100
  r = spreadsheet.intermediate_output_d100
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f100
  r = spreadsheet.intermediate_output_f100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h100
  r = spreadsheet.intermediate_output_h100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i100
  r = spreadsheet.intermediate_output_i100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j100
  r = spreadsheet.intermediate_output_j100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.079787425,r[:number],0.001)
end

def test_intermediate_output_k100
  r = spreadsheet.intermediate_output_k100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.83464451,r[:number],0.001)
end

def test_intermediate_output_l100
  r = spreadsheet.intermediate_output_l100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.876743225,r[:number],0.001)
end

def test_intermediate_output_m100
  r = spreadsheet.intermediate_output_m100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.928155815,r[:number],0.001)
end

def test_intermediate_output_n100
  r = spreadsheet.intermediate_output_n100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.95013656,r[:number],0.001)
end

def test_intermediate_output_o100
  r = spreadsheet.intermediate_output_o100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.972117305000001,r[:number],0.001)
end

def test_intermediate_output_p100
  r = spreadsheet.intermediate_output_p100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.003411924999998,r[:number],0.001)
end

def test_intermediate_output_q100
  r = spreadsheet.intermediate_output_q100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.03880465,r[:number],0.001)
end

def test_intermediate_output_c101
  r = spreadsheet.intermediate_output_c101
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d101
  r = spreadsheet.intermediate_output_d101
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f101
  r = spreadsheet.intermediate_output_f101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.248895000000005,r[:number],0.001)
end

def test_intermediate_output_h101
  r = spreadsheet.intermediate_output_h101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2697.0000000000005,r[:number],0.001)
end

def test_intermediate_output_i101
  r = spreadsheet.intermediate_output_i101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2697.0000000000005,r[:number],0.001)
end

def test_intermediate_output_j101
  r = spreadsheet.intermediate_output_j101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3003.93873353422,r[:number],0.001)
end

def test_intermediate_output_k101
  r = spreadsheet.intermediate_output_k101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3463.2558518400006,r[:number],0.001)
end

def test_intermediate_output_l101
  r = spreadsheet.intermediate_output_l101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3697.393608,r[:number],0.001)
end

def test_intermediate_output_m101
  r = spreadsheet.intermediate_output_m101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3848.957516095907,r[:number],0.001)
end

def test_intermediate_output_n101
  r = spreadsheet.intermediate_output_n101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3917.6364729974125,r[:number],0.001)
end

def test_intermediate_output_o101
  r = spreadsheet.intermediate_output_o101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3998.793565951548,r[:number],0.001)
end

def test_intermediate_output_p101
  r = spreadsheet.intermediate_output_p101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4008.3830117956213,r[:number],0.001)
end

def test_intermediate_output_q101
  r = spreadsheet.intermediate_output_q101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4118.700958598248,r[:number],0.001)
end

def test_intermediate_output_c102
  r = spreadsheet.intermediate_output_c102
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d102
  r = spreadsheet.intermediate_output_d102
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f102
  r = spreadsheet.intermediate_output_f102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.4912823,r[:number],0.001)
end

def test_intermediate_output_h102
  r = spreadsheet.intermediate_output_h102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256.77685950413223,r[:number],0.001)
end

def test_intermediate_output_i102
  r = spreadsheet.intermediate_output_i102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256.77685950413223,r[:number],0.001)
end

def test_intermediate_output_j102
  r = spreadsheet.intermediate_output_j102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(644.6280991735538,r[:number],0.001)
end

def test_intermediate_output_k102
  r = spreadsheet.intermediate_output_k102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1156.8031951848266,r[:number],0.001)
end

def test_intermediate_output_l102
  r = spreadsheet.intermediate_output_l102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1477.5913222118604,r[:number],0.001)
end

def test_intermediate_output_m102
  r = spreadsheet.intermediate_output_m102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.5539758637342,r[:number],0.001)
end

def test_intermediate_output_n102
  r = spreadsheet.intermediate_output_n102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1963.0725330686814,r[:number],0.001)
end

def test_intermediate_output_o102
  r = spreadsheet.intermediate_output_o102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2141.7423821868347,r[:number],0.001)
end

def test_intermediate_output_p102
  r = spreadsheet.intermediate_output_p102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2251.086408525476,r[:number],0.001)
end

def test_intermediate_output_q102
  r = spreadsheet.intermediate_output_q102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2333.729957730782,r[:number],0.001)
end

def test_intermediate_output_c103
  r = spreadsheet.intermediate_output_c103
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d103
  r = spreadsheet.intermediate_output_d103
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f103
  r = spreadsheet.intermediate_output_f103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7825523999999999,r[:number],0.001)
end

def test_intermediate_output_h103
  r = spreadsheet.intermediate_output_h103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.480778,r[:number],0.001)
end

def test_intermediate_output_i103
  r = spreadsheet.intermediate_output_i103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.602149999999999,r[:number],0.001)
end

def test_intermediate_output_j103
  r = spreadsheet.intermediate_output_j103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.681,r[:number],0.001)
end

def test_intermediate_output_k103
  r = spreadsheet.intermediate_output_k103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.75309184433111,r[:number],0.001)
end

def test_intermediate_output_l103
  r = spreadsheet.intermediate_output_l103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.5606254702346,r[:number],0.001)
end

def test_intermediate_output_m103
  r = spreadsheet.intermediate_output_m103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.95545866689062,r[:number],0.001)
end

def test_intermediate_output_n103
  r = spreadsheet.intermediate_output_n103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.4220396470476,r[:number],0.001)
end

def test_intermediate_output_o103
  r = spreadsheet.intermediate_output_o103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.5310259444316,r[:number],0.001)
end

def test_intermediate_output_p103
  r = spreadsheet.intermediate_output_p103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(434.80160281328375,r[:number],0.001)
end

def test_intermediate_output_q103
  r = spreadsheet.intermediate_output_q103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.9856859221071,r[:number],0.001)
end

def test_intermediate_output_c104
  r = spreadsheet.intermediate_output_c104
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d104
  r = spreadsheet.intermediate_output_d104
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f104
  r = spreadsheet.intermediate_output_f104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1137551000000006,r[:number],0.001)
end

def test_intermediate_output_h104
  r = spreadsheet.intermediate_output_h104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_intermediate_output_i104
  r = spreadsheet.intermediate_output_i104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_intermediate_output_j104
  r = spreadsheet.intermediate_output_j104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3656.6491221630395,r[:number],0.001)
end

def test_intermediate_output_k104
  r = spreadsheet.intermediate_output_k104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4078.9370920274823,r[:number],0.001)
end

def test_intermediate_output_l104
  r = spreadsheet.intermediate_output_l104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4467.077983986471,r[:number],0.001)
end

def test_intermediate_output_m104
  r = spreadsheet.intermediate_output_m104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4721.321387509617,r[:number],0.001)
end

def test_intermediate_output_n104
  r = spreadsheet.intermediate_output_n104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4972.473207220269,r[:number],0.001)
end

def test_intermediate_output_o104
  r = spreadsheet.intermediate_output_o104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5132.017140903075,r[:number],0.001)
end

def test_intermediate_output_p104
  r = spreadsheet.intermediate_output_p104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5240.990780676136,r[:number],0.001)
end

def test_intermediate_output_q104
  r = spreadsheet.intermediate_output_q104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_intermediate_output_c105
  r = spreadsheet.intermediate_output_c105
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d105
  r = spreadsheet.intermediate_output_d105
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal and Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f105
  r = spreadsheet.intermediate_output_f105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h105
  r = spreadsheet.intermediate_output_h105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i105
  r = spreadsheet.intermediate_output_i105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j105
  r = spreadsheet.intermediate_output_j105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k105
  r = spreadsheet.intermediate_output_k105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l105
  r = spreadsheet.intermediate_output_l105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m105
  r = spreadsheet.intermediate_output_m105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n105
  r = spreadsheet.intermediate_output_n105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o105
  r = spreadsheet.intermediate_output_o105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p105
  r = spreadsheet.intermediate_output_p105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q105
  r = spreadsheet.intermediate_output_q105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c106
  r = spreadsheet.intermediate_output_c106
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d106
  r = spreadsheet.intermediate_output_d106
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal electricity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f106
  r = spreadsheet.intermediate_output_f106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h106
  r = spreadsheet.intermediate_output_h106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_intermediate_output_i106
  r = spreadsheet.intermediate_output_i106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_intermediate_output_j106
  r = spreadsheet.intermediate_output_j106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.54344669789631,r[:number],0.001)
end

def test_intermediate_output_k106
  r = spreadsheet.intermediate_output_k106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.21459580595813,r[:number],0.001)
end

def test_intermediate_output_l106
  r = spreadsheet.intermediate_output_l106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.28892750468282,r[:number],0.001)
end

def test_intermediate_output_m106
  r = spreadsheet.intermediate_output_m106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.0449836326222,r[:number],0.001)
end

def test_intermediate_output_n106
  r = spreadsheet.intermediate_output_n106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237.17958335569693,r[:number],0.001)
end

def test_intermediate_output_o106
  r = spreadsheet.intermediate_output_o106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.19663807255284,r[:number],0.001)
end

def test_intermediate_output_p106
  r = spreadsheet.intermediate_output_p106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.0221416680945,r[:number],0.001)
end

def test_intermediate_output_q106
  r = spreadsheet.intermediate_output_q106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_intermediate_output_c107
  r = spreadsheet.intermediate_output_c107
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.e",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d107
  r = spreadsheet.intermediate_output_d107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal [UNUSED - See III.c]",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f107
  r = spreadsheet.intermediate_output_f107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h107
  r = spreadsheet.intermediate_output_h107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i107
  r = spreadsheet.intermediate_output_i107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j107
  r = spreadsheet.intermediate_output_j107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k107
  r = spreadsheet.intermediate_output_k107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l107
  r = spreadsheet.intermediate_output_l107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m107
  r = spreadsheet.intermediate_output_m107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n107
  r = spreadsheet.intermediate_output_n107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o107
  r = spreadsheet.intermediate_output_o107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p107
  r = spreadsheet.intermediate_output_p107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q107
  r = spreadsheet.intermediate_output_q107
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c108
  r = spreadsheet.intermediate_output_c108
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d108
  r = spreadsheet.intermediate_output_d108
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f108
  r = spreadsheet.intermediate_output_f108
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h108
  r = spreadsheet.intermediate_output_h108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.0397308202,r[:number],0.001)
end

def test_intermediate_output_i108
  r = spreadsheet.intermediate_output_i108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_intermediate_output_j108
  r = spreadsheet.intermediate_output_j108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_intermediate_output_k108
  r = spreadsheet.intermediate_output_k108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.8203975818174,r[:number],0.001)
end

def test_intermediate_output_l108
  r = spreadsheet.intermediate_output_l108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.7633988375814,r[:number],0.001)
end

def test_intermediate_output_m108
  r = spreadsheet.intermediate_output_m108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.4495308358887,r[:number],0.001)
end

def test_intermediate_output_n108
  r = spreadsheet.intermediate_output_n108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.5003731415674,r[:number],0.001)
end

def test_intermediate_output_o108
  r = spreadsheet.intermediate_output_o108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9316667474303,r[:number],0.001)
end

def test_intermediate_output_p108
  r = spreadsheet.intermediate_output_p108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.9967558959181,r[:number],0.001)
end

def test_intermediate_output_q108
  r = spreadsheet.intermediate_output_q108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_c109
  r = spreadsheet.intermediate_output_c109
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d109
  r = spreadsheet.intermediate_output_d109
  assert_equal(:ExcelString,r[:type])
  assert_equal("Concentrated Solar Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f109
  r = spreadsheet.intermediate_output_f109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number],0.001)
end

def test_intermediate_output_h109
  r = spreadsheet.intermediate_output_h109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_intermediate_output_i109
  r = spreadsheet.intermediate_output_i109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_intermediate_output_j109
  r = spreadsheet.intermediate_output_j109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.195800664283027,r[:number],0.001)
end

def test_intermediate_output_k109
  r = spreadsheet.intermediate_output_k109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.52960132856605,r[:number],0.001)
end

def test_intermediate_output_l109
  r = spreadsheet.intermediate_output_l109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.225019602582634,r[:number],0.001)
end

def test_intermediate_output_m109
  r = spreadsheet.intermediate_output_m109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.9316937694213,r[:number],0.001)
end

def test_intermediate_output_n109
  r = spreadsheet.intermediate_output_n109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.23065738478488,r[:number],0.001)
end

def test_intermediate_output_o109
  r = spreadsheet.intermediate_output_o109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.93160038057601,r[:number],0.001)
end

def test_intermediate_output_p109
  r = spreadsheet.intermediate_output_p109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.1905844740417,r[:number],0.001)
end

def test_intermediate_output_q109
  r = spreadsheet.intermediate_output_q109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_d110
  r = spreadsheet.intermediate_output_d110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Non-thermal renewable generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f110
  r = spreadsheet.intermediate_output_f110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.3875898,r[:number],0.001)
end

def test_intermediate_output_h110
  r = spreadsheet.intermediate_output_h110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3598.8593683243325,r[:number],0.001)
end

def test_intermediate_output_i110
  r = spreadsheet.intermediate_output_i110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3617.0569295041328,r[:number],0.001)
end

def test_intermediate_output_j110
  r = spreadsheet.intermediate_output_j110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4478.813388698772,r[:number],0.001)
end

def test_intermediate_output_k110
  r = spreadsheet.intermediate_output_k110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5660.057973772982,r[:number],0.001)
end

def test_intermediate_output_l110
  r = spreadsheet.intermediate_output_l110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6539.507277613412,r[:number],0.001)
end

def test_intermediate_output_m110
  r = spreadsheet.intermediate_output_m110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7271.257030278174,r[:number],0.001)
end

def test_intermediate_output_n110
  r = spreadsheet.intermediate_output_n110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7967.878393818047,r[:number],0.001)
end

def test_intermediate_output_o110
  r = spreadsheet.intermediate_output_o110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8529.3504542349,r[:number],0.001)
end

def test_intermediate_output_p110
  r = spreadsheet.intermediate_output_p110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8933.088274052949,r[:number],0.001)
end

def test_intermediate_output_q110
  r = spreadsheet.intermediate_output_q110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9317.89702767439,r[:number],0.001)
end

def test_intermediate_output_d111
  r = spreadsheet.intermediate_output_d111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total generation supplied to grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f111
  r = spreadsheet.intermediate_output_f111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.17050098322466,r[:number],0.001)
end

def test_intermediate_output_h111
  r = spreadsheet.intermediate_output_h111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19740.560078471095,r[:number],0.001)
end

def test_intermediate_output_i111
  r = spreadsheet.intermediate_output_i111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19387.934051749107,r[:number],0.001)
end

def test_intermediate_output_j111
  r = spreadsheet.intermediate_output_j111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34041.77371177525,r[:number],0.001)
end

def test_intermediate_output_k111
  r = spreadsheet.intermediate_output_k111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47942.20951319343,r[:number],0.001)
end

def test_intermediate_output_l111
  r = spreadsheet.intermediate_output_l111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61074.386424473094,r[:number],0.001)
end

def test_intermediate_output_m111
  r = spreadsheet.intermediate_output_m111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73518.96128307248,r[:number],0.001)
end

def test_intermediate_output_n111
  r = spreadsheet.intermediate_output_n111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85360.49289286285,r[:number],0.001)
end

def test_intermediate_output_o111
  r = spreadsheet.intermediate_output_o111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96590.0666491222,r[:number],0.001)
end

def test_intermediate_output_p111
  r = spreadsheet.intermediate_output_p111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107176.5079676891,r[:number],0.001)
end

def test_intermediate_output_q111
  r = spreadsheet.intermediate_output_q111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117256.84660500828,r[:number],0.001)
end

def test_intermediate_output_s111
  r = spreadsheet.intermediate_output_s111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125065.99278703316,r[:number],0.001)
end

def test_intermediate_output_d113
  r = spreadsheet.intermediate_output_d113
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over-generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f113
  r = spreadsheet.intermediate_output_f113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number],0.001)
end

def test_intermediate_output_g113
  r = spreadsheet.intermediate_output_g113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h113
  r = spreadsheet.intermediate_output_h113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1160.856994960196,r[:number],0.001)
end

def test_intermediate_output_i113
  r = spreadsheet.intermediate_output_i113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_intermediate_output_j113
  r = spreadsheet.intermediate_output_j113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.195800664286665,r[:number],0.001)
end

def test_intermediate_output_k113
  r = spreadsheet.intermediate_output_k113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.529601328544224,r[:number],0.001)
end

def test_intermediate_output_l113
  r = spreadsheet.intermediate_output_l113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.22501960257536,r[:number],0.001)
end

def test_intermediate_output_m113
  r = spreadsheet.intermediate_output_m113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.9316937694213,r[:number],0.001)
end

def test_intermediate_output_n113
  r = spreadsheet.intermediate_output_n113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.23065738478488,r[:number],0.001)
end

def test_intermediate_output_o113
  r = spreadsheet.intermediate_output_o113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.93160038059057,r[:number],0.001)
end

def test_intermediate_output_p113
  r = spreadsheet.intermediate_output_p113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.19058447405627,r[:number],0.001)
end

def test_intermediate_output_q113
  r = spreadsheet.intermediate_output_q113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_r113
  r = spreadsheet.intermediate_output_r113
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d114
  r = spreadsheet.intermediate_output_d114
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity used Globally, before losses and district heating heat demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f114
  r = spreadsheet.intermediate_output_f114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.17050098322466,r[:number],0.001)
end

def test_intermediate_output_g114
  r = spreadsheet.intermediate_output_g114
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h114
  r = spreadsheet.intermediate_output_h114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18579.7030835109,r[:number],0.001)
end

def test_intermediate_output_i114
  r = spreadsheet.intermediate_output_i114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19387.934051749107,r[:number],0.001)
end

def test_intermediate_output_j114
  r = spreadsheet.intermediate_output_j114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34041.77371177525,r[:number],0.001)
end

def test_intermediate_output_k114
  r = spreadsheet.intermediate_output_k114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47942.20951319343,r[:number],0.001)
end

def test_intermediate_output_l114
  r = spreadsheet.intermediate_output_l114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61074.386424473094,r[:number],0.001)
end

def test_intermediate_output_m114
  r = spreadsheet.intermediate_output_m114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73518.96128307248,r[:number],0.001)
end

def test_intermediate_output_n114
  r = spreadsheet.intermediate_output_n114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85360.49289286285,r[:number],0.001)
end

def test_intermediate_output_o114
  r = spreadsheet.intermediate_output_o114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96590.0666491222,r[:number],0.001)
end

def test_intermediate_output_p114
  r = spreadsheet.intermediate_output_p114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107176.5079676891,r[:number],0.001)
end

def test_intermediate_output_q114
  r = spreadsheet.intermediate_output_q114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117256.84660500828,r[:number],0.001)
end

def test_intermediate_output_d116
  r = spreadsheet.intermediate_output_d116
  assert_equal(:ExcelString,r[:type])
  assert_equal("GW installed capacity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h116
  r = spreadsheet.intermediate_output_h116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_i116
  r = spreadsheet.intermediate_output_i116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j116
  r = spreadsheet.intermediate_output_j116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k116
  r = spreadsheet.intermediate_output_k116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l116
  r = spreadsheet.intermediate_output_l116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m116
  r = spreadsheet.intermediate_output_m116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n116
  r = spreadsheet.intermediate_output_n116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o116
  r = spreadsheet.intermediate_output_o116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p116
  r = spreadsheet.intermediate_output_p116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q116
  r = spreadsheet.intermediate_output_q116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_c117
  r = spreadsheet.intermediate_output_c117
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d117
  r = spreadsheet.intermediate_output_d117
  assert_equal(:ExcelString,r[:type])
  assert_equal("Unabated thermal generation ",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h117
  r = spreadsheet.intermediate_output_h117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2403.8855386218647,r[:number],0.001)
end

def test_intermediate_output_i117
  r = spreadsheet.intermediate_output_i117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2375.8081942307967,r[:number],0.001)
end

def test_intermediate_output_j117
  r = spreadsheet.intermediate_output_j117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4473.956290344364,r[:number],0.001)
end

def test_intermediate_output_k117
  r = spreadsheet.intermediate_output_k117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6398.566285460562,r[:number],0.001)
end

def test_intermediate_output_l117
  r = spreadsheet.intermediate_output_l117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8276.41151756005,r[:number],0.001)
end

def test_intermediate_output_m117
  r = spreadsheet.intermediate_output_m117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10095.608856654693,r[:number],0.001)
end

def test_intermediate_output_n117
  r = spreadsheet.intermediate_output_n117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11823.096776720557,r[:number],0.001)
end

def test_intermediate_output_o117
  r = spreadsheet.intermediate_output_o117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13484.582633312333,r[:number],0.001)
end

def test_intermediate_output_p117
  r = spreadsheet.intermediate_output_p117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15081.545064165819,r[:number],0.001)
end

def test_intermediate_output_q117
  r = spreadsheet.intermediate_output_q117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16601.935148256776,r[:number],0.001)
end

def test_intermediate_output_c118
  r = spreadsheet.intermediate_output_c118
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a.Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d118
  r = spreadsheet.intermediate_output_d118
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil / Biofuel",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h118
  r = spreadsheet.intermediate_output_h118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431.1432,r[:number],0.001)
end

def test_intermediate_output_i118
  r = spreadsheet.intermediate_output_i118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431.1432,r[:number],0.001)
end

def test_intermediate_output_j118
  r = spreadsheet.intermediate_output_j118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410.94950910637243,r[:number],0.001)
end

def test_intermediate_output_k118
  r = spreadsheet.intermediate_output_k118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.3002028348193,r[:number],0.001)
end

def test_intermediate_output_l118
  r = spreadsheet.intermediate_output_l118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324.62343037316367,r[:number],0.001)
end

def test_intermediate_output_m118
  r = spreadsheet.intermediate_output_m118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.4833495085671,r[:number],0.001)
end

def test_intermediate_output_n118
  r = spreadsheet.intermediate_output_n118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(244.75857833289223,r[:number],0.001)
end

def test_intermediate_output_o118
  r = spreadsheet.intermediate_output_o118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.90453265258125,r[:number],0.001)
end

def test_intermediate_output_p118
  r = spreadsheet.intermediate_output_p118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.01625281188325,r[:number],0.001)
end

def test_intermediate_output_q118
  r = spreadsheet.intermediate_output_q118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.19920130177616,r[:number],0.001)
end

def test_intermediate_output_c119
  r = spreadsheet.intermediate_output_c119
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a.Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d119
  r = spreadsheet.intermediate_output_d119
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal / Biomass",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h119
  r = spreadsheet.intermediate_output_h119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1580.8311,r[:number],0.001)
end

def test_intermediate_output_i119
  r = spreadsheet.intermediate_output_i119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1558.3360862246689,r[:number],0.001)
end

def test_intermediate_output_j119
  r = spreadsheet.intermediate_output_j119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3255.8461763657697,r[:number],0.001)
end

def test_intermediate_output_k119
  r = spreadsheet.intermediate_output_k119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4826.678590572094,r[:number],0.001)
end

def test_intermediate_output_l119
  r = spreadsheet.intermediate_output_l119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6372.078668067032,r[:number],0.001)
end

def test_intermediate_output_m119
  r = spreadsheet.intermediate_output_m119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7852.422364022923,r[:number],0.001)
end

def test_intermediate_output_n119
  r = spreadsheet.intermediate_output_n119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9278.175051532626,r[:number],0.001)
end

def test_intermediate_output_o119
  r = spreadsheet.intermediate_output_o119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10635.915855153842,r[:number],0.001)
end

def test_intermediate_output_p119
  r = spreadsheet.intermediate_output_p119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11940.376270180039,r[:number],0.001)
end

def test_intermediate_output_q119
  r = spreadsheet.intermediate_output_q119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13161.78303655616,r[:number],0.001)
end

def test_intermediate_output_c120
  r = spreadsheet.intermediate_output_c120
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a.Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d120
  r = spreadsheet.intermediate_output_d120
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas / Biogas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h120
  r = spreadsheet.intermediate_output_h120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.91123862186475,r[:number],0.001)
end

def test_intermediate_output_i120
  r = spreadsheet.intermediate_output_i120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.32890800612796,r[:number],0.001)
end

def test_intermediate_output_j120
  r = spreadsheet.intermediate_output_j120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(807.1606048722222,r[:number],0.001)
end

def test_intermediate_output_k120
  r = spreadsheet.intermediate_output_k120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1196.5874920536482,r[:number],0.001)
end

def test_intermediate_output_l120
  r = spreadsheet.intermediate_output_l120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1579.7094191198548,r[:number],0.001)
end

def test_intermediate_output_m120
  r = spreadsheet.intermediate_output_m120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1946.7031431232033,r[:number],0.001)
end

def test_intermediate_output_n120
  r = spreadsheet.intermediate_output_n120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2300.1631468550386,r[:number],0.001)
end

def test_intermediate_output_o120
  r = spreadsheet.intermediate_output_o120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2636.762245505909,r[:number],0.001)
end

def test_intermediate_output_p120
  r = spreadsheet.intermediate_output_p120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2960.1525411738967,r[:number],0.001)
end

def test_intermediate_output_q120
  r = spreadsheet.intermediate_output_q120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3262.95291039884,r[:number],0.001)
end

def test_intermediate_output_c121
  r = spreadsheet.intermediate_output_c121
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d121
  r = spreadsheet.intermediate_output_d121
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h121
  r = spreadsheet.intermediate_output_h121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i121
  r = spreadsheet.intermediate_output_i121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j121
  r = spreadsheet.intermediate_output_j121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.8500000000000001,r[:number],0.001)
end

def test_intermediate_output_k121
  r = spreadsheet.intermediate_output_k121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_l121
  r = spreadsheet.intermediate_output_l121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_m121
  r = spreadsheet.intermediate_output_m121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_n121
  r = spreadsheet.intermediate_output_n121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_o121
  r = spreadsheet.intermediate_output_o121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_p121
  r = spreadsheet.intermediate_output_p121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_q121
  r = spreadsheet.intermediate_output_q121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_c122
  r = spreadsheet.intermediate_output_c122
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d122
  r = spreadsheet.intermediate_output_d122
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h122
  r = spreadsheet.intermediate_output_h122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.306,r[:number],0.001)
end

def test_intermediate_output_i122
  r = spreadsheet.intermediate_output_i122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.306,r[:number],0.001)
end

def test_intermediate_output_j122
  r = spreadsheet.intermediate_output_j122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.0671588918834,r[:number],0.001)
end

def test_intermediate_output_k122
  r = spreadsheet.intermediate_output_k122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(493.8478,r[:number],0.001)
end

def test_intermediate_output_l122
  r = spreadsheet.intermediate_output_l122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(527.235,r[:number],0.001)
end

def test_intermediate_output_m122
  r = spreadsheet.intermediate_output_m122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(548.8474669313123,r[:number],0.001)
end

def test_intermediate_output_n122
  r = spreadsheet.intermediate_output_n122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.640838609031,r[:number],0.001)
end

def test_intermediate_output_o122
  r = spreadsheet.intermediate_output_o122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(570.2135475062097,r[:number],0.001)
end

def test_intermediate_output_p122
  r = spreadsheet.intermediate_output_p122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(571.5809679151866,r[:number],0.001)
end

def test_intermediate_output_q122
  r = spreadsheet.intermediate_output_q122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587.3119094510392,r[:number],0.001)
end

def test_intermediate_output_c123
  r = spreadsheet.intermediate_output_c123
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d123
  r = spreadsheet.intermediate_output_d123
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h123
  r = spreadsheet.intermediate_output_h123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.5,r[:number],0.001)
end

def test_intermediate_output_i123
  r = spreadsheet.intermediate_output_i123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(478.0,r[:number],0.001)
end

def test_intermediate_output_j123
  r = spreadsheet.intermediate_output_j123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1075.5,r[:number],0.001)
end

def test_intermediate_output_k123
  r = spreadsheet.intermediate_output_k123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2575.5,r[:number],0.001)
end

def test_intermediate_output_l123
  r = spreadsheet.intermediate_output_l123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5112.124085331496,r[:number],0.001)
end

def test_intermediate_output_m123
  r = spreadsheet.intermediate_output_m123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8230.8636567646,r[:number],0.001)
end

def test_intermediate_output_n123
  r = spreadsheet.intermediate_output_n123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11800.263309366648,r[:number],0.001)
end

def test_intermediate_output_o123
  r = spreadsheet.intermediate_output_o123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15658.57629777146,r[:number],0.001)
end

def test_intermediate_output_p123
  r = spreadsheet.intermediate_output_p123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19727.8895386773,r[:number],0.001)
end

def test_intermediate_output_q123
  r = spreadsheet.intermediate_output_q123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24007.84696609664,r[:number],0.001)
end

def test_intermediate_output_c124
  r = spreadsheet.intermediate_output_c124
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d124
  r = spreadsheet.intermediate_output_d124
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h124
  r = spreadsheet.intermediate_output_h124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.3938,r[:number],0.001)
end

def test_intermediate_output_i124
  r = spreadsheet.intermediate_output_i124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3938,r[:number],0.001)
end

def test_intermediate_output_j124
  r = spreadsheet.intermediate_output_j124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.8938,r[:number],0.001)
end

def test_intermediate_output_k124
  r = spreadsheet.intermediate_output_k124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.8938,r[:number],0.001)
end

def test_intermediate_output_l124
  r = spreadsheet.intermediate_output_l124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.8966877609608,r[:number],0.001)
end

def test_intermediate_output_m124
  r = spreadsheet.intermediate_output_m124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(447.6382993943093,r[:number],0.001)
end

def test_intermediate_output_n124
  r = spreadsheet.intermediate_output_n124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(758.4339589814173,r[:number],0.001)
end

def test_intermediate_output_o124
  r = spreadsheet.intermediate_output_o124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1123.4490927647817,r[:number],0.001)
end

def test_intermediate_output_p124
  r = spreadsheet.intermediate_output_p124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1490.851362486559,r[:number],0.001)
end

def test_intermediate_output_q124
  r = spreadsheet.intermediate_output_q124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1803.0372057183254,r[:number],0.001)
end

def test_intermediate_output_c125
  r = spreadsheet.intermediate_output_c125
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d125
  r = spreadsheet.intermediate_output_d125
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h125
  r = spreadsheet.intermediate_output_h125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1007.0,r[:number],0.001)
end

def test_intermediate_output_i125
  r = spreadsheet.intermediate_output_i125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1007.0,r[:number],0.001)
end

def test_intermediate_output_j125
  r = spreadsheet.intermediate_output_j125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1132.3018653192437,r[:number],0.001)
end

def test_intermediate_output_k125
  r = spreadsheet.intermediate_output_k125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1257.6037306384874,r[:number],0.001)
end

def test_intermediate_output_l125
  r = spreadsheet.intermediate_output_l125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1341.0299314295876,r[:number],0.001)
end

def test_intermediate_output_m125
  r = spreadsheet.intermediate_output_m125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1417.3545479272839,r[:number],0.001)
end

def test_intermediate_output_n125
  r = spreadsheet.intermediate_output_n125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1492.7510618839142,r[:number],0.001)
end

def test_intermediate_output_o125
  r = spreadsheet.intermediate_output_o125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1540.6466193856272,r[:number],0.001)
end

def test_intermediate_output_p125
  r = spreadsheet.intermediate_output_p125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1573.3608261212985,r[:number],0.001)
end

def test_intermediate_output_q125
  r = spreadsheet.intermediate_output_q125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1599.1927143233331,r[:number],0.001)
end

def test_intermediate_output_c126
  r = spreadsheet.intermediate_output_c126
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d126
  r = spreadsheet.intermediate_output_d126
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h126
  r = spreadsheet.intermediate_output_h126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i126
  r = spreadsheet.intermediate_output_i126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j126
  r = spreadsheet.intermediate_output_j126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.1,r[:number],0.001)
end

def test_intermediate_output_k126
  r = spreadsheet.intermediate_output_k126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9779587284861255,r[:number],0.001)
end

def test_intermediate_output_l126
  r = spreadsheet.intermediate_output_l126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7360374077976792,r[:number],0.001)
end

def test_intermediate_output_m126
  r = spreadsheet.intermediate_output_m126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.043785914998245,r[:number],0.001)
end

def test_intermediate_output_n126
  r = spreadsheet.intermediate_output_n126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.38199509926909,r[:number],0.001)
end

def test_intermediate_output_o126
  r = spreadsheet.intermediate_output_o126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.33175872108334,r[:number],0.001)
end

def test_intermediate_output_p126
  r = spreadsheet.intermediate_output_p126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.87888853191178,r[:number],0.001)
end

def test_intermediate_output_q126
  r = spreadsheet.intermediate_output_q126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.42601834274021,r[:number],0.001)
end

def test_intermediate_output_c127
  r = spreadsheet.intermediate_output_c127
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalStream",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d127
  r = spreadsheet.intermediate_output_d127
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal Stream",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h127
  r = spreadsheet.intermediate_output_h127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i127
  r = spreadsheet.intermediate_output_i127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j127
  r = spreadsheet.intermediate_output_j127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k127
  r = spreadsheet.intermediate_output_k127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l127
  r = spreadsheet.intermediate_output_l127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m127
  r = spreadsheet.intermediate_output_m127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n127
  r = spreadsheet.intermediate_output_n127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o127
  r = spreadsheet.intermediate_output_o127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p127
  r = spreadsheet.intermediate_output_p127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q127
  r = spreadsheet.intermediate_output_q127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c128
  r = spreadsheet.intermediate_output_c128
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalRange",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d128
  r = spreadsheet.intermediate_output_d128
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal Range",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h128
  r = spreadsheet.intermediate_output_h128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i128
  r = spreadsheet.intermediate_output_i128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j128
  r = spreadsheet.intermediate_output_j128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k128
  r = spreadsheet.intermediate_output_k128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l128
  r = spreadsheet.intermediate_output_l128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m128
  r = spreadsheet.intermediate_output_m128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n128
  r = spreadsheet.intermediate_output_n128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o128
  r = spreadsheet.intermediate_output_o128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p128
  r = spreadsheet.intermediate_output_p128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q128
  r = spreadsheet.intermediate_output_q128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c129
  r = spreadsheet.intermediate_output_c129
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d129
  r = spreadsheet.intermediate_output_d129
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal electricity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h129
  r = spreadsheet.intermediate_output_h129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.2747,r[:number],0.001)
end

def test_intermediate_output_i129
  r = spreadsheet.intermediate_output_i129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.2747,r[:number],0.001)
end

def test_intermediate_output_j129
  r = spreadsheet.intermediate_output_j129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.081556451532922,r[:number],0.001)
end

def test_intermediate_output_k129
  r = spreadsheet.intermediate_output_k129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.888412903065845,r[:number],0.001)
end

def test_intermediate_output_l129
  r = spreadsheet.intermediate_output_l129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.322438584069108,r[:number],0.001)
end

def test_intermediate_output_m129
  r = spreadsheet.intermediate_output_m129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.526031141945285,r[:number],0.001)
end

def test_intermediate_output_n129
  r = spreadsheet.intermediate_output_n129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.68815753109288,r[:number],0.001)
end

def test_intermediate_output_o129
  r = spreadsheet.intermediate_output_o129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.525416106626864,r[:number],0.001)
end

def test_intermediate_output_p129
  r = spreadsheet.intermediate_output_p129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.915546096864944,r[:number],0.001)
end

def test_intermediate_output_q129
  r = spreadsheet.intermediate_output_q129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.73556909816324,r[:number],0.001)
end

def test_intermediate_output_c130
  r = spreadsheet.intermediate_output_c130
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d130
  r = spreadsheet.intermediate_output_d130
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h130
  r = spreadsheet.intermediate_output_h130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.1949,r[:number],0.001)
end

def test_intermediate_output_i130
  r = spreadsheet.intermediate_output_i130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.0,r[:number],0.001)
end

def test_intermediate_output_j130
  r = spreadsheet.intermediate_output_j130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.0,r[:number],0.001)
end

def test_intermediate_output_k130
  r = spreadsheet.intermediate_output_k130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.40633557923195,r[:number],0.001)
end

def test_intermediate_output_l130
  r = spreadsheet.intermediate_output_l130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.07517885473376,r[:number],0.001)
end

def test_intermediate_output_m130
  r = spreadsheet.intermediate_output_m130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.67461754914586,r[:number],0.001)
end

def test_intermediate_output_n130
  r = spreadsheet.intermediate_output_n130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(325.0648170021059,r[:number],0.001)
end

def test_intermediate_output_o130
  r = spreadsheet.intermediate_output_o130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(345.478300702217,r[:number],0.001)
end

def test_intermediate_output_p130
  r = spreadsheet.intermediate_output_p130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(363.2711069200709,r[:number],0.001)
end

def test_intermediate_output_q130
  r = spreadsheet.intermediate_output_q130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.44604341196737,r[:number],0.001)
end

def test_intermediate_output_c131
  r = spreadsheet.intermediate_output_c131
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d131
  r = spreadsheet.intermediate_output_d131
  assert_equal(:ExcelString,r[:type])
  assert_equal("Standby / peaking gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h131
  r = spreadsheet.intermediate_output_h131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i131
  r = spreadsheet.intermediate_output_i131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j131
  r = spreadsheet.intermediate_output_j131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k131
  r = spreadsheet.intermediate_output_k131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l131
  r = spreadsheet.intermediate_output_l131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m131
  r = spreadsheet.intermediate_output_m131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n131
  r = spreadsheet.intermediate_output_n131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o131
  r = spreadsheet.intermediate_output_o131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p131
  r = spreadsheet.intermediate_output_p131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q131
  r = spreadsheet.intermediate_output_q131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_d132
  r = spreadsheet.intermediate_output_d132
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h132
  r = spreadsheet.intermediate_output_h132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3957.5549386218645,r[:number],0.001)
end

def test_intermediate_output_i132
  r = spreadsheet.intermediate_output_i132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4308.782694230797,r[:number],0.001)
end

def test_intermediate_output_j132
  r = spreadsheet.intermediate_output_j132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7186.750671007025,r[:number],0.001)
end

def test_intermediate_output_k132
  r = spreadsheet.intermediate_output_k132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10999.384323309834,r[:number],0.001)
end

def test_intermediate_output_l132
  r = spreadsheet.intermediate_output_l132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15733.530876928695,r[:number],0.001)
end

def test_intermediate_output_m132
  r = spreadsheet.intermediate_output_m132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21067.257262278286,r[:number],0.001)
end

def test_intermediate_output_n132
  r = spreadsheet.intermediate_output_n132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26812.02091519404,r[:number],0.001)
end

def test_intermediate_output_o132
  r = spreadsheet.intermediate_output_o132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32793.50366627034,r[:number],0.001)
end

def test_intermediate_output_p132
  r = spreadsheet.intermediate_output_p132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38896.99330091501,r[:number],0.001)
end

def test_intermediate_output_q132
  r = spreadsheet.intermediate_output_q132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45085.631574698986,r[:number],0.001)
end

def test_intermediate_output_b135
  r = spreadsheet.intermediate_output_b135
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c137
  r = spreadsheet.intermediate_output_c137
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions as % of base year, adjusted so that 2007 matches actuals",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d138
  r = spreadsheet.intermediate_output_d138
  assert_equal(:ExcelString,r[:type])
  assert_equal("IPCC Sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f138
  r = spreadsheet.intermediate_output_f138
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007 Actuals, GHG Inv.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h138
  r = spreadsheet.intermediate_output_h138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_i138
  r = spreadsheet.intermediate_output_i138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j138
  r = spreadsheet.intermediate_output_j138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k138
  r = spreadsheet.intermediate_output_k138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l138
  r = spreadsheet.intermediate_output_l138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m138
  r = spreadsheet.intermediate_output_m138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n138
  r = spreadsheet.intermediate_output_n138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o138
  r = spreadsheet.intermediate_output_o138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p138
  r = spreadsheet.intermediate_output_p138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q138
  r = spreadsheet.intermediate_output_q138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_s138
  r = spreadsheet.intermediate_output_s138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_t138
  r = spreadsheet.intermediate_output_t138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_u138
  r = spreadsheet.intermediate_output_u138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_v138
  r = spreadsheet.intermediate_output_v138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_w138
  r = spreadsheet.intermediate_output_w138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_x138
  r = spreadsheet.intermediate_output_x138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_y138
  r = spreadsheet.intermediate_output_y138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_z138
  r = spreadsheet.intermediate_output_z138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_aa138
  r = spreadsheet.intermediate_output_aa138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_ab138
  r = spreadsheet.intermediate_output_ab138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_c139
  r = spreadsheet.intermediate_output_c139
  assert_equal(:ExcelString,r[:type])
  assert_equal("1A",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d139
  r = spreadsheet.intermediate_output_d139
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c140
  r = spreadsheet.intermediate_output_c140
  assert_equal(:ExcelString,r[:type])
  assert_equal("1B",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d140
  r = spreadsheet.intermediate_output_d140
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fugitive Emissions from Fuels",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c141
  r = spreadsheet.intermediate_output_c141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.0,r[:number],0.001)
end

def test_intermediate_output_d141
  r = spreadsheet.intermediate_output_d141
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f141
  r = spreadsheet.intermediate_output_f141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33028.389,r[:number],0.001)
end

def test_intermediate_output_h141
  r = spreadsheet.intermediate_output_h141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29186.88993910411,r[:number],0.001)
end

def test_intermediate_output_i141
  r = spreadsheet.intermediate_output_i141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29085.177736780563,r[:number],0.001)
end

def test_intermediate_output_j141
  r = spreadsheet.intermediate_output_j141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47584.95712169078,r[:number],0.001)
end

def test_intermediate_output_k141
  r = spreadsheet.intermediate_output_k141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65204.6192294824,r[:number],0.001)
end

def test_intermediate_output_l141
  r = spreadsheet.intermediate_output_l141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81563.25101444611,r[:number],0.001)
end

def test_intermediate_output_m141
  r = spreadsheet.intermediate_output_m141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95974.0406867844,r[:number],0.001)
end

def test_intermediate_output_n141
  r = spreadsheet.intermediate_output_n141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109231.84390749551,r[:number],0.001)
end

def test_intermediate_output_o141
  r = spreadsheet.intermediate_output_o141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123446.0054496394,r[:number],0.001)
end

def test_intermediate_output_p141
  r = spreadsheet.intermediate_output_p141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137825.59204119694,r[:number],0.001)
end

def test_intermediate_output_q141
  r = spreadsheet.intermediate_output_q141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151529.64093651483,r[:number],0.001)
end

def test_intermediate_output_c142
  r = spreadsheet.intermediate_output_c142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number],0.001)
end

def test_intermediate_output_d142
  r = spreadsheet.intermediate_output_d142
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial Processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f142
  r = spreadsheet.intermediate_output_f142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2569.7825000000003,r[:number],0.001)
end

def test_intermediate_output_h142
  r = spreadsheet.intermediate_output_h142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2570.0,r[:number],0.001)
end

def test_intermediate_output_i142
  r = spreadsheet.intermediate_output_i142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2570.0,r[:number],0.001)
end

def test_intermediate_output_j142
  r = spreadsheet.intermediate_output_j142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2866.347156230302,r[:number],0.001)
end

def test_intermediate_output_k142
  r = spreadsheet.intermediate_output_k142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3162.6943124606046,r[:number],0.001)
end

def test_intermediate_output_l142
  r = spreadsheet.intermediate_output_l142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3459.0414686909066,r[:number],0.001)
end

def test_intermediate_output_m142
  r = spreadsheet.intermediate_output_m142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3755.388624921209,r[:number],0.001)
end

def test_intermediate_output_n142
  r = spreadsheet.intermediate_output_n142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4051.7357811515108,r[:number],0.001)
end

def test_intermediate_output_o142
  r = spreadsheet.intermediate_output_o142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4348.082937381812,r[:number],0.001)
end

def test_intermediate_output_p142
  r = spreadsheet.intermediate_output_p142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4644.430093612114,r[:number],0.001)
end

def test_intermediate_output_q142
  r = spreadsheet.intermediate_output_q142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4940.777249842418,r[:number],0.001)
end

def test_intermediate_output_c143
  r = spreadsheet.intermediate_output_c143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_intermediate_output_d143
  r = spreadsheet.intermediate_output_d143
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solvent and Other Product Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f143
  r = spreadsheet.intermediate_output_f143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h143
  r = spreadsheet.intermediate_output_h143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i143
  r = spreadsheet.intermediate_output_i143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j143
  r = spreadsheet.intermediate_output_j143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k143
  r = spreadsheet.intermediate_output_k143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l143
  r = spreadsheet.intermediate_output_l143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m143
  r = spreadsheet.intermediate_output_m143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n143
  r = spreadsheet.intermediate_output_n143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o143
  r = spreadsheet.intermediate_output_o143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p143
  r = spreadsheet.intermediate_output_p143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q143
  r = spreadsheet.intermediate_output_q143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s143
  r = spreadsheet.intermediate_output_s143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_t143
  r = spreadsheet.intermediate_output_t143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_u143
  r = spreadsheet.intermediate_output_u143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_v143
  r = spreadsheet.intermediate_output_v143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_w143
  r = spreadsheet.intermediate_output_w143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_x143
  r = spreadsheet.intermediate_output_x143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_y143
  r = spreadsheet.intermediate_output_y143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_z143
  r = spreadsheet.intermediate_output_z143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_aa143
  r = spreadsheet.intermediate_output_aa143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_ab143
  r = spreadsheet.intermediate_output_ab143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_ad143
  r = spreadsheet.intermediate_output_ad143
  assert_equal(:ExcelString,r[:type])
  assert_equal("6 Degrees",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c144
  r = spreadsheet.intermediate_output_c144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_intermediate_output_d144
  r = spreadsheet.intermediate_output_d144
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f144
  r = spreadsheet.intermediate_output_f144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5517.7004,r[:number],0.001)
end

def test_intermediate_output_h144
  r = spreadsheet.intermediate_output_h144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i144
  r = spreadsheet.intermediate_output_i144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j144
  r = spreadsheet.intermediate_output_j144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k144
  r = spreadsheet.intermediate_output_k144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l144
  r = spreadsheet.intermediate_output_l144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m144
  r = spreadsheet.intermediate_output_m144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n144
  r = spreadsheet.intermediate_output_n144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o144
  r = spreadsheet.intermediate_output_o144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p144
  r = spreadsheet.intermediate_output_p144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q144
  r = spreadsheet.intermediate_output_q144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s144
  r = spreadsheet.intermediate_output_s144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_t144
  r = spreadsheet.intermediate_output_t144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_u144
  r = spreadsheet.intermediate_output_u144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_v144
  r = spreadsheet.intermediate_output_v144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_w144
  r = spreadsheet.intermediate_output_w144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_x144
  r = spreadsheet.intermediate_output_x144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_y144
  r = spreadsheet.intermediate_output_y144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_z144
  r = spreadsheet.intermediate_output_z144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_aa144
  r = spreadsheet.intermediate_output_aa144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_ab144
  r = spreadsheet.intermediate_output_ab144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_ad144
  r = spreadsheet.intermediate_output_ad144
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 Degrees",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c145
  r = spreadsheet.intermediate_output_c145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_intermediate_output_d145
  r = spreadsheet.intermediate_output_d145
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land Use, Land-Use Change and Forestry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f145
  r = spreadsheet.intermediate_output_f145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6002.2192000000005,r[:number],0.001)
end

def test_intermediate_output_h145
  r = spreadsheet.intermediate_output_h145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i145
  r = spreadsheet.intermediate_output_i145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j145
  r = spreadsheet.intermediate_output_j145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k145
  r = spreadsheet.intermediate_output_k145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l145
  r = spreadsheet.intermediate_output_l145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m145
  r = spreadsheet.intermediate_output_m145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n145
  r = spreadsheet.intermediate_output_n145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o145
  r = spreadsheet.intermediate_output_o145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p145
  r = spreadsheet.intermediate_output_p145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q145
  r = spreadsheet.intermediate_output_q145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s145
  r = spreadsheet.intermediate_output_s145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_t145
  r = spreadsheet.intermediate_output_t145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_u145
  r = spreadsheet.intermediate_output_u145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32819.64347035086,r[:number],0.001)
end

def test_intermediate_output_v145
  r = spreadsheet.intermediate_output_v145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34173.43520995615,r[:number],0.001)
end

def test_intermediate_output_w145
  r = spreadsheet.intermediate_output_w145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30484.480855302947,r[:number],0.001)
end

def test_intermediate_output_x145
  r = spreadsheet.intermediate_output_x145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26171.64085497342,r[:number],0.001)
end

def test_intermediate_output_y145
  r = spreadsheet.intermediate_output_y145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22410.439744198196,r[:number],0.001)
end

def test_intermediate_output_z145
  r = spreadsheet.intermediate_output_z145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19795.792862208415,r[:number],0.001)
end

def test_intermediate_output_aa145
  r = spreadsheet.intermediate_output_aa145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17975.920546461537,r[:number],0.001)
end

def test_intermediate_output_ab145
  r = spreadsheet.intermediate_output_ab145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16206.06387649232,r[:number],0.001)
end

def test_intermediate_output_ad145
  r = spreadsheet.intermediate_output_ad145
  assert_equal(:ExcelString,r[:type])
  assert_equal("2 Degrees",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c146
  r = spreadsheet.intermediate_output_c146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number],0.001)
end

def test_intermediate_output_d146
  r = spreadsheet.intermediate_output_d146
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f146
  r = spreadsheet.intermediate_output_f146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.5893,r[:number],0.001)
end

def test_intermediate_output_h146
  r = spreadsheet.intermediate_output_h146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i146
  r = spreadsheet.intermediate_output_i146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j146
  r = spreadsheet.intermediate_output_j146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k146
  r = spreadsheet.intermediate_output_k146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l146
  r = spreadsheet.intermediate_output_l146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m146
  r = spreadsheet.intermediate_output_m146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n146
  r = spreadsheet.intermediate_output_n146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o146
  r = spreadsheet.intermediate_output_o146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p146
  r = spreadsheet.intermediate_output_p146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q146
  r = spreadsheet.intermediate_output_q146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c147
  r = spreadsheet.intermediate_output_c147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.0,r[:number],0.001)
end

def test_intermediate_output_d147
  r = spreadsheet.intermediate_output_d147
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f147
  r = spreadsheet.intermediate_output_f147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h147
  r = spreadsheet.intermediate_output_h147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i147
  r = spreadsheet.intermediate_output_i147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j147
  r = spreadsheet.intermediate_output_j147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k147
  r = spreadsheet.intermediate_output_k147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l147
  r = spreadsheet.intermediate_output_l147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m147
  r = spreadsheet.intermediate_output_m147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n147
  r = spreadsheet.intermediate_output_n147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o147
  r = spreadsheet.intermediate_output_o147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p147
  r = spreadsheet.intermediate_output_p147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q147
  r = spreadsheet.intermediate_output_q147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s147
  r = spreadsheet.intermediate_output_s147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-291.09171830341074,r[:number],0.001)
end

def test_intermediate_output_t147
  r = spreadsheet.intermediate_output_t147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-189.37951597986466,r[:number],0.001)
end

def test_intermediate_output_u147
  r = spreadsheet.intermediate_output_u147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-17631.71431751509,r[:number],0.001)
end

def test_intermediate_output_v147
  r = spreadsheet.intermediate_output_v147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-34193.93184193173,r[:number],0.001)
end

def test_intermediate_output_w147
  r = spreadsheet.intermediate_output_w147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-54537.865137778936,r[:number],0.001)
end

def test_intermediate_output_x147
  r = spreadsheet.intermediate_output_x147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-73557.84196667706,r[:number],0.001)
end

def test_intermediate_output_y147
  r = spreadsheet.intermediate_output_y147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-90873.1934543937,r[:number],0.001)
end

def test_intermediate_output_z147
  r = spreadsheet.intermediate_output_z147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-107998.34903475767,r[:number],0.001)
end

def test_intermediate_output_aa147
  r = spreadsheet.intermediate_output_aa147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-124494.15509829238,r[:number],0.001)
end

def test_intermediate_output_ab147
  r = spreadsheet.intermediate_output_ab147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-140264.4078198098,r[:number],0.001)
end

def test_intermediate_output_c148
  r = spreadsheet.intermediate_output_c148
  assert_equal(:ExcelString,r[:type])
  assert_equal("X1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d148
  r = spreadsheet.intermediate_output_d148
  assert_equal(:ExcelString,r[:type])
  assert_equal("International Aviation and Shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h148
  r = spreadsheet.intermediate_output_h148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_i148
  r = spreadsheet.intermediate_output_i148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_j148
  r = spreadsheet.intermediate_output_j148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_k148
  r = spreadsheet.intermediate_output_k148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_l148
  r = spreadsheet.intermediate_output_l148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_m148
  r = spreadsheet.intermediate_output_m148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_n148
  r = spreadsheet.intermediate_output_n148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_o148
  r = spreadsheet.intermediate_output_o148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_p148
  r = spreadsheet.intermediate_output_p148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_q148
  r = spreadsheet.intermediate_output_q148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_s148
  r = spreadsheet.intermediate_output_s148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-31756.94344904898,r[:number],0.001)
end

def test_intermediate_output_t148
  r = spreadsheet.intermediate_output_t148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-31655.231246725434,r[:number],0.001)
end

def test_intermediate_output_u148
  r = spreadsheet.intermediate_output_u148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-50451.35778786595,r[:number],0.001)
end

def test_intermediate_output_v148
  r = spreadsheet.intermediate_output_v148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-68367.36705188788,r[:number],0.001)
end

def test_intermediate_output_w148
  r = spreadsheet.intermediate_output_w148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-85022.3459930819,r[:number],0.001)
end

def test_intermediate_output_x148
  r = spreadsheet.intermediate_output_x148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-99729.48282165048,r[:number],0.001)
end

def test_intermediate_output_y148
  r = spreadsheet.intermediate_output_y148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-113283.6331985919,r[:number],0.001)
end

def test_intermediate_output_z148
  r = spreadsheet.intermediate_output_z148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-127794.14189696609,r[:number],0.001)
end

def test_intermediate_output_aa148
  r = spreadsheet.intermediate_output_aa148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-142470.07564475393,r[:number],0.001)
end

def test_intermediate_output_ab148
  r = spreadsheet.intermediate_output_ab148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-156470.47169630212,r[:number],0.001)
end

def test_intermediate_output_c149
  r = spreadsheet.intermediate_output_c149
  assert_equal(:ExcelString,r[:type])
  assert_equal("X2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d149
  r = spreadsheet.intermediate_output_d149
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy credit",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h149
  r = spreadsheet.intermediate_output_h149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2257.30832,r[:number],0.001)
end

def test_intermediate_output_i149
  r = spreadsheet.intermediate_output_i149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2257.30832,r[:number],0.001)
end

def test_intermediate_output_j149
  r = spreadsheet.intermediate_output_j149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2582.9177,r[:number],0.001)
end

def test_intermediate_output_k149
  r = spreadsheet.intermediate_output_k149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2908.52708,r[:number],0.001)
end

def test_intermediate_output_l149
  r = spreadsheet.intermediate_output_l149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3125.5999999999995,r[:number],0.001)
end

def test_intermediate_output_m149
  r = spreadsheet.intermediate_output_m149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3342.6729199999995,r[:number],0.001)
end

def test_intermediate_output_n149
  r = spreadsheet.intermediate_output_n149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3559.745839999999,r[:number],0.001)
end

def test_intermediate_output_o149
  r = spreadsheet.intermediate_output_o149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3733.3729199999993,r[:number],0.001)
end

def test_intermediate_output_p149
  r = spreadsheet.intermediate_output_p149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3863.5541599999992,r[:number],0.001)
end

def test_intermediate_output_q149
  r = spreadsheet.intermediate_output_q149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3993.8916799999997,r[:number],0.001)
end

def test_intermediate_output_c150
  r = spreadsheet.intermediate_output_c150
  assert_equal(:ExcelString,r[:type])
  assert_equal("X3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d150
  r = spreadsheet.intermediate_output_d150
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon capture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h150
  r = spreadsheet.intermediate_output_h150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i150
  r = spreadsheet.intermediate_output_i150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j150
  r = spreadsheet.intermediate_output_j150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8350150827586207,r[:number],0.001)
end

def test_intermediate_output_k150
  r = spreadsheet.intermediate_output_k150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.678458816949152,r[:number],0.001)
end

def test_intermediate_output_l150
  r = spreadsheet.intermediate_output_l150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.538048685217391,r[:number],0.001)
end

def test_intermediate_output_m150
  r = spreadsheet.intermediate_output_m150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.403460266271363,r[:number],0.001)
end

def test_intermediate_output_n150
  r = spreadsheet.intermediate_output_n150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.274336960887095,r[:number],0.001)
end

def test_intermediate_output_o150
  r = spreadsheet.intermediate_output_o150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.260121498214285,r[:number],0.001)
end

def test_intermediate_output_p150
  r = spreadsheet.intermediate_output_p150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.136579599107142,r[:number],0.001)
end

def test_intermediate_output_q150
  r = spreadsheet.intermediate_output_q150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.017852256923077,r[:number],0.001)
end

def test_intermediate_output_d151
  r = spreadsheet.intermediate_output_d151
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f151
  r = spreadsheet.intermediate_output_f151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48390.680400000005,r[:number],0.001)
end

def test_intermediate_output_h151
  r = spreadsheet.intermediate_output_h151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29499.63512904898,r[:number],0.001)
end

def test_intermediate_output_i151
  r = spreadsheet.intermediate_output_i151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29397.922926725434,r[:number],0.001)
end

def test_intermediate_output_j151
  r = spreadsheet.intermediate_output_j151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47865.60507278319,r[:number],0.001)
end

def test_intermediate_output_k151
  r = spreadsheet.intermediate_output_k151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65452.16151307093,r[:number],0.001)
end

def test_intermediate_output_l151
  r = spreadsheet.intermediate_output_l151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81890.20794439666,r[:number],0.001)
end

def test_intermediate_output_m151
  r = spreadsheet.intermediate_output_m151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96380.40644138421,r[:number],0.001)
end

def test_intermediate_output_n151
  r = spreadsheet.intermediate_output_n151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109717.613021631,r[:number],0.001)
end

def test_intermediate_output_o151
  r = spreadsheet.intermediate_output_o151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124054.50885546788,r[:number],0.001)
end

def test_intermediate_output_p151
  r = spreadsheet.intermediate_output_p151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138600.38490515482,r[:number],0.001)
end

def test_intermediate_output_q151
  r = spreadsheet.intermediate_output_q151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152470.5621640452,r[:number],0.001)
end

def test_intermediate_output_d152
  r = spreadsheet.intermediate_output_d152
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total + Captured",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h152
  r = spreadsheet.intermediate_output_h152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31756.94344904898,r[:number],0.001)
end

def test_intermediate_output_i152
  r = spreadsheet.intermediate_output_i152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31655.231246725434,r[:number],0.001)
end

def test_intermediate_output_j152
  r = spreadsheet.intermediate_output_j152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50451.35778786595,r[:number],0.001)
end

def test_intermediate_output_k152
  r = spreadsheet.intermediate_output_k152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68367.36705188788,r[:number],0.001)
end

def test_intermediate_output_l152
  r = spreadsheet.intermediate_output_l152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85022.3459930819,r[:number],0.001)
end

def test_intermediate_output_m152
  r = spreadsheet.intermediate_output_m152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99729.48282165048,r[:number],0.001)
end

def test_intermediate_output_n152
  r = spreadsheet.intermediate_output_n152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113283.6331985919,r[:number],0.001)
end

def test_intermediate_output_o152
  r = spreadsheet.intermediate_output_o152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127794.14189696609,r[:number],0.001)
end

def test_intermediate_output_p152
  r = spreadsheet.intermediate_output_p152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142470.07564475393,r[:number],0.001)
end

def test_intermediate_output_q152
  r = spreadsheet.intermediate_output_q152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156470.47169630212,r[:number],0.001)
end

def test_intermediate_output_c153
  r = spreadsheet.intermediate_output_c153
  assert_equal(:ExcelString,r[:type])
  assert_equal("Excluding international bunkers",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h153
  r = spreadsheet.intermediate_output_h153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.26932482854445,r[:number],0.001)
end

def test_intermediate_output_i153
  r = spreadsheet.intermediate_output_i153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.05462516780723,r[:number],0.001)
end

def test_intermediate_output_j153
  r = spreadsheet.intermediate_output_j153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.03721526794797,r[:number],0.001)
end

def test_intermediate_output_k153
  r = spreadsheet.intermediate_output_k153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.15987720043492,r[:number],0.001)
end

def test_intermediate_output_l153
  r = spreadsheet.intermediate_output_l153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.85820160365415,r[:number],0.001)
end

def test_intermediate_output_m153
  r = spreadsheet.intermediate_output_m153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.4449024148505,r[:number],0.001)
end

def test_intermediate_output_n153
  r = spreadsheet.intermediate_output_n153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.5978050415424,r[:number],0.001)
end

def test_intermediate_output_o153
  r = spreadsheet.intermediate_output_o153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.8609062352232,r[:number],0.001)
end

def test_intermediate_output_p153
  r = spreadsheet.intermediate_output_p153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.56513425949873,r[:number],0.001)
end

def test_intermediate_output_q153
  r = spreadsheet.intermediate_output_q153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(321.8430604455436,r[:number],0.001)
end

def test_intermediate_output_e155
  r = spreadsheet.intermediate_output_e155
  assert_equal(:ExcelString,r[:type])
  assert_equal("Adjustment factor:",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h155
  r = spreadsheet.intermediate_output_h155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6403823365377348,r[:number],0.001)
end

def test_intermediate_output_p155
  r = spreadsheet.intermediate_output_p155
  assert_equal(:ExcelString,r[:type])
  assert_equal("% reduction 1990-2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q155
  r = spreadsheet.intermediate_output_q155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-152469.5621640452,r[:number],0.001)
end

def test_intermediate_output_c157
  r = spreadsheet.intermediate_output_c157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions by sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f157
  r = spreadsheet.intermediate_output_f157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h157
  r = spreadsheet.intermediate_output_h157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_i157
  r = spreadsheet.intermediate_output_i157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j157
  r = spreadsheet.intermediate_output_j157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k157
  r = spreadsheet.intermediate_output_k157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l157
  r = spreadsheet.intermediate_output_l157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m157
  r = spreadsheet.intermediate_output_m157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n157
  r = spreadsheet.intermediate_output_n157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o157
  r = spreadsheet.intermediate_output_o157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p157
  r = spreadsheet.intermediate_output_p157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q157
  r = spreadsheet.intermediate_output_q157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_c158
  r = spreadsheet.intermediate_output_c158
  assert_equal(:ExcelString,r[:type])
  assert_equal("I",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f158
  r = spreadsheet.intermediate_output_f158
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydrocarbon fuel power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h158
  r = spreadsheet.intermediate_output_h158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10949.669618120157,r[:number],0.001)
end

def test_intermediate_output_i158
  r = spreadsheet.intermediate_output_i158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10573.877120697096,r[:number],0.001)
end

def test_intermediate_output_j158
  r = spreadsheet.intermediate_output_j158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21029.617019586905,r[:number],0.001)
end

def test_intermediate_output_k158
  r = spreadsheet.intermediate_output_k158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30294.902140653743,r[:number],0.001)
end

def test_intermediate_output_l158
  r = spreadsheet.intermediate_output_l158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38260.600117291346,r[:number],0.001)
end

def test_intermediate_output_m158
  r = spreadsheet.intermediate_output_m158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44285.23939231677,r[:number],0.001)
end

def test_intermediate_output_n158
  r = spreadsheet.intermediate_output_n158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49174.984976940505,r[:number],0.001)
end

def test_intermediate_output_o158
  r = spreadsheet.intermediate_output_o158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54970.09285434973,r[:number],0.001)
end

def test_intermediate_output_p158
  r = spreadsheet.intermediate_output_p158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60739.56230719283,r[:number],0.001)
end

def test_intermediate_output_q158
  r = spreadsheet.intermediate_output_q158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65800.8774422,r[:number],0.001)
end

def test_intermediate_output_c159
  r = spreadsheet.intermediate_output_c159
  assert_equal(:ExcelString,r[:type])
  assert_equal("II",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f159
  r = spreadsheet.intermediate_output_f159
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h159
  r = spreadsheet.intermediate_output_h159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i159
  r = spreadsheet.intermediate_output_i159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j159
  r = spreadsheet.intermediate_output_j159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k159
  r = spreadsheet.intermediate_output_k159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l159
  r = spreadsheet.intermediate_output_l159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m159
  r = spreadsheet.intermediate_output_m159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n159
  r = spreadsheet.intermediate_output_n159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o159
  r = spreadsheet.intermediate_output_o159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p159
  r = spreadsheet.intermediate_output_p159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q159
  r = spreadsheet.intermediate_output_q159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c160
  r = spreadsheet.intermediate_output_c160
  assert_equal(:ExcelString,r[:type])
  assert_equal("III",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f160
  r = spreadsheet.intermediate_output_f160
  assert_equal(:ExcelString,r[:type])
  assert_equal("National renewable power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h160
  r = spreadsheet.intermediate_output_h160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i160
  r = spreadsheet.intermediate_output_i160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j160
  r = spreadsheet.intermediate_output_j160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k160
  r = spreadsheet.intermediate_output_k160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l160
  r = spreadsheet.intermediate_output_l160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m160
  r = spreadsheet.intermediate_output_m160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n160
  r = spreadsheet.intermediate_output_n160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o160
  r = spreadsheet.intermediate_output_o160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p160
  r = spreadsheet.intermediate_output_p160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q160
  r = spreadsheet.intermediate_output_q160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c161
  r = spreadsheet.intermediate_output_c161
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f161
  r = spreadsheet.intermediate_output_f161
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed renewable power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h161
  r = spreadsheet.intermediate_output_h161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i161
  r = spreadsheet.intermediate_output_i161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j161
  r = spreadsheet.intermediate_output_j161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k161
  r = spreadsheet.intermediate_output_k161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l161
  r = spreadsheet.intermediate_output_l161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m161
  r = spreadsheet.intermediate_output_m161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n161
  r = spreadsheet.intermediate_output_n161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o161
  r = spreadsheet.intermediate_output_o161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p161
  r = spreadsheet.intermediate_output_p161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q161
  r = spreadsheet.intermediate_output_q161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c162
  r = spreadsheet.intermediate_output_c162
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f162
  r = spreadsheet.intermediate_output_f162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h162
  r = spreadsheet.intermediate_output_h162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2257.30832,r[:number],0.001)
end

def test_intermediate_output_i162
  r = spreadsheet.intermediate_output_i162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2257.30832,r[:number],0.001)
end

def test_intermediate_output_j162
  r = spreadsheet.intermediate_output_j162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2582.9177,r[:number],0.001)
end

def test_intermediate_output_k162
  r = spreadsheet.intermediate_output_k162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2908.52708,r[:number],0.001)
end

def test_intermediate_output_l162
  r = spreadsheet.intermediate_output_l162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3125.5999999999995,r[:number],0.001)
end

def test_intermediate_output_m162
  r = spreadsheet.intermediate_output_m162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3342.6729199999995,r[:number],0.001)
end

def test_intermediate_output_n162
  r = spreadsheet.intermediate_output_n162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3559.745839999999,r[:number],0.001)
end

def test_intermediate_output_o162
  r = spreadsheet.intermediate_output_o162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3733.3729199999993,r[:number],0.001)
end

def test_intermediate_output_p162
  r = spreadsheet.intermediate_output_p162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3863.5541599999992,r[:number],0.001)
end

def test_intermediate_output_q162
  r = spreadsheet.intermediate_output_q162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3993.8916799999997,r[:number],0.001)
end

def test_intermediate_output_c163
  r = spreadsheet.intermediate_output_c163
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f163
  r = spreadsheet.intermediate_output_f163
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h163
  r = spreadsheet.intermediate_output_h163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i163
  r = spreadsheet.intermediate_output_i163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j163
  r = spreadsheet.intermediate_output_j163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k163
  r = spreadsheet.intermediate_output_k163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l163
  r = spreadsheet.intermediate_output_l163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m163
  r = spreadsheet.intermediate_output_m163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n163
  r = spreadsheet.intermediate_output_n163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o163
  r = spreadsheet.intermediate_output_o163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p163
  r = spreadsheet.intermediate_output_p163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q163
  r = spreadsheet.intermediate_output_q163
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c164
  r = spreadsheet.intermediate_output_c164
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f164
  r = spreadsheet.intermediate_output_f164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity distribution, storage, and balancing",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h164
  r = spreadsheet.intermediate_output_h164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i164
  r = spreadsheet.intermediate_output_i164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j164
  r = spreadsheet.intermediate_output_j164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k164
  r = spreadsheet.intermediate_output_k164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l164
  r = spreadsheet.intermediate_output_l164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m164
  r = spreadsheet.intermediate_output_m164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n164
  r = spreadsheet.intermediate_output_n164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o164
  r = spreadsheet.intermediate_output_o164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p164
  r = spreadsheet.intermediate_output_p164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q164
  r = spreadsheet.intermediate_output_q164
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c165
  r = spreadsheet.intermediate_output_c165
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f165
  r = spreadsheet.intermediate_output_f165
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h165
  r = spreadsheet.intermediate_output_h165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i165
  r = spreadsheet.intermediate_output_i165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j165
  r = spreadsheet.intermediate_output_j165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k165
  r = spreadsheet.intermediate_output_k165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l165
  r = spreadsheet.intermediate_output_l165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m165
  r = spreadsheet.intermediate_output_m165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n165
  r = spreadsheet.intermediate_output_n165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o165
  r = spreadsheet.intermediate_output_o165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p165
  r = spreadsheet.intermediate_output_p165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q165
  r = spreadsheet.intermediate_output_q165
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c166
  r = spreadsheet.intermediate_output_c166
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f166
  r = spreadsheet.intermediate_output_f166
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h166
  r = spreadsheet.intermediate_output_h166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2183.140953735558,r[:number],0.001)
end

def test_intermediate_output_i166
  r = spreadsheet.intermediate_output_i166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2418.906841547413,r[:number],0.001)
end

def test_intermediate_output_j166
  r = spreadsheet.intermediate_output_j166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4292.270284305895,r[:number],0.001)
end

def test_intermediate_output_k166
  r = spreadsheet.intermediate_output_k166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6175.7879789168455,r[:number],0.001)
end

def test_intermediate_output_l166
  r = spreadsheet.intermediate_output_l166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8059.676409373928,r[:number],0.001)
end

def test_intermediate_output_m166
  r = spreadsheet.intermediate_output_m166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9935.034489247464,r[:number],0.001)
end

def test_intermediate_output_n166
  r = spreadsheet.intermediate_output_n166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11793.707122458267,r[:number],0.001)
end

def test_intermediate_output_o166
  r = spreadsheet.intermediate_output_o166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13628.26112687482,r[:number],0.001)
end

def test_intermediate_output_p166
  r = spreadsheet.intermediate_output_p166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15431.919837161919,r[:number],0.001)
end

def test_intermediate_output_q166
  r = spreadsheet.intermediate_output_q166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17198.48848431862,r[:number],0.001)
end

def test_intermediate_output_c167
  r = spreadsheet.intermediate_output_c167
  assert_equal(:ExcelString,r[:type])
  assert_equal("X",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f167
  r = spreadsheet.intermediate_output_f167
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting and appliances",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h167
  r = spreadsheet.intermediate_output_h167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(697.1777888589148,r[:number],0.001)
end

def test_intermediate_output_i167
  r = spreadsheet.intermediate_output_i167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(697.1777888589148,r[:number],0.001)
end

def test_intermediate_output_j167
  r = spreadsheet.intermediate_output_j167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(897.0623406580236,r[:number],0.001)
end

def test_intermediate_output_k167
  r = spreadsheet.intermediate_output_k167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1096.9468924571322,r[:number],0.001)
end

def test_intermediate_output_l167
  r = spreadsheet.intermediate_output_l167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1295.7697390008839,r[:number],0.001)
end

def test_intermediate_output_m167
  r = spreadsheet.intermediate_output_m167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1494.5925855446355,r[:number],0.001)
end

def test_intermediate_output_n167
  r = spreadsheet.intermediate_output_n167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1694.83103909553,r[:number],0.001)
end

def test_intermediate_output_o167
  r = spreadsheet.intermediate_output_o167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1894.3616891428528,r[:number],0.001)
end

def test_intermediate_output_p167
  r = spreadsheet.intermediate_output_p167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2093.892339190176,r[:number],0.001)
end

def test_intermediate_output_q167
  r = spreadsheet.intermediate_output_q167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2293.4229892374983,r[:number],0.001)
end

def test_intermediate_output_c168
  r = spreadsheet.intermediate_output_c168
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f168
  r = spreadsheet.intermediate_output_f168
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h168
  r = spreadsheet.intermediate_output_h168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9420.533874234814,r[:number],0.001)
end

def test_intermediate_output_i168
  r = spreadsheet.intermediate_output_i168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9420.533874234814,r[:number],0.001)
end

def test_intermediate_output_j168
  r = spreadsheet.intermediate_output_j168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10445.93154441735,r[:number],0.001)
end

def test_intermediate_output_k168
  r = spreadsheet.intermediate_output_k168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11471.32921459989,r[:number],0.001)
end

def test_intermediate_output_l168
  r = spreadsheet.intermediate_output_l168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12496.726884782425,r[:number],0.001)
end

def test_intermediate_output_m168
  r = spreadsheet.intermediate_output_m168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13522.124554964965,r[:number],0.001)
end

def test_intermediate_output_n168
  r = spreadsheet.intermediate_output_n168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14547.5222251475,r[:number],0.001)
end

def test_intermediate_output_o168
  r = spreadsheet.intermediate_output_o168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15572.91989533004,r[:number],0.001)
end

def test_intermediate_output_p168
  r = spreadsheet.intermediate_output_p168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16598.317565512574,r[:number],0.001)
end

def test_intermediate_output_q168
  r = spreadsheet.intermediate_output_q168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17623.715235695112,r[:number],0.001)
end

def test_intermediate_output_c169
  r = spreadsheet.intermediate_output_c169
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f169
  r = spreadsheet.intermediate_output_f169
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h169
  r = spreadsheet.intermediate_output_h169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6897.566722575141,r[:number],0.001)
end

def test_intermediate_output_i169
  r = spreadsheet.intermediate_output_i169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6994.051009584872,r[:number],0.001)
end

def test_intermediate_output_j169
  r = spreadsheet.intermediate_output_j169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11224.264031622955,r[:number],0.001)
end

def test_intermediate_output_k169
  r = spreadsheet.intermediate_output_k169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15793.727030882255,r[:number],0.001)
end

def test_intermediate_output_l169
  r = spreadsheet.intermediate_output_l169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20463.26295948489,r[:number],0.001)
end

def test_intermediate_output_m169
  r = spreadsheet.intermediate_output_m169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25218.68332728892,r[:number],0.001)
end

def test_intermediate_output_n169
  r = spreadsheet.intermediate_output_n169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30021.486238492478,r[:number],0.001)
end

def test_intermediate_output_o169
  r = spreadsheet.intermediate_output_o169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34844.89396137581,r[:number],0.001)
end

def test_intermediate_output_p169
  r = spreadsheet.intermediate_output_p169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39876.444028915925,r[:number],0.001)
end

def test_intermediate_output_q169
  r = spreadsheet.intermediate_output_q169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45005.92158969859,r[:number],0.001)
end

def test_intermediate_output_c170
  r = spreadsheet.intermediate_output_c170
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f170
  r = spreadsheet.intermediate_output_f170
  assert_equal(:ExcelString,r[:type])
  assert_equal("Food consumption [UNUSED]",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h170
  r = spreadsheet.intermediate_output_h170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i170
  r = spreadsheet.intermediate_output_i170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j170
  r = spreadsheet.intermediate_output_j170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k170
  r = spreadsheet.intermediate_output_k170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l170
  r = spreadsheet.intermediate_output_l170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m170
  r = spreadsheet.intermediate_output_m170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n170
  r = spreadsheet.intermediate_output_n170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o170
  r = spreadsheet.intermediate_output_o170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p170
  r = spreadsheet.intermediate_output_p170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q170
  r = spreadsheet.intermediate_output_q170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c171
  r = spreadsheet.intermediate_output_c171
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f171
  r = spreadsheet.intermediate_output_f171
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h171
  r = spreadsheet.intermediate_output_h171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i171
  r = spreadsheet.intermediate_output_i171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j171
  r = spreadsheet.intermediate_output_j171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k171
  r = spreadsheet.intermediate_output_k171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l171
  r = spreadsheet.intermediate_output_l171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m171
  r = spreadsheet.intermediate_output_m171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n171
  r = spreadsheet.intermediate_output_n171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o171
  r = spreadsheet.intermediate_output_o171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p171
  r = spreadsheet.intermediate_output_p171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q171
  r = spreadsheet.intermediate_output_q171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c172
  r = spreadsheet.intermediate_output_c172
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f172
  r = spreadsheet.intermediate_output_f172
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h172
  r = spreadsheet.intermediate_output_h172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.964491524392262,r[:number],0.001)
end

def test_intermediate_output_i172
  r = spreadsheet.intermediate_output_i172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.832878517974095,r[:number],0.001)
end

def test_intermediate_output_j172
  r = spreadsheet.intermediate_output_j172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.292094233455842,r[:number],0.001)
end

def test_intermediate_output_k172
  r = spreadsheet.intermediate_output_k172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.856976928513404,r[:number],0.001)
end

def test_intermediate_output_l172
  r = spreadsheet.intermediate_output_l172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.733794706025737,r[:number],0.001)
end

def test_intermediate_output_m172
  r = spreadsheet.intermediate_output_m172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.507033286634712,r[:number],0.001)
end

def test_intermediate_output_n172
  r = spreadsheet.intermediate_output_n172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.834542600535483,r[:number],0.001)
end

def test_intermediate_output_o172
  r = spreadsheet.intermediate_output_o172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.314182126985605,r[:number],0.001)
end

def test_intermediate_output_p172
  r = spreadsheet.intermediate_output_p172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.911537111924238,r[:number],0.001)
end

def test_intermediate_output_q172
  r = spreadsheet.intermediate_output_q172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.599978074690352,r[:number],0.001)
end

def test_intermediate_output_c173
  r = spreadsheet.intermediate_output_c173
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f173
  r = spreadsheet.intermediate_output_f173
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transfers",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h173
  r = spreadsheet.intermediate_output_h173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1585.8899999999999,r[:number],0.001)
end

def test_intermediate_output_i173
  r = spreadsheet.intermediate_output_i173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1529.8517332843505,r[:number],0.001)
end

def test_intermediate_output_j173
  r = spreadsheet.intermediate_output_j173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2540.0854579586094,r[:number],0.001)
end

def test_intermediate_output_k173
  r = spreadsheet.intermediate_output_k173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3510.1383586325505,r[:number],0.001)
end

def test_intermediate_output_l173
  r = spreadsheet.intermediate_output_l173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4423.038039757181,r[:number],0.001)
end

def test_intermediate_output_m173
  r = spreadsheet.intermediate_output_m173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5252.8979787348035,r[:number],0.001)
end

def test_intermediate_output_n173
  r = spreadsheet.intermediate_output_n173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6030.992716896187,r[:number],0.001)
end

def test_intermediate_output_o173
  r = spreadsheet.intermediate_output_o173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6864.038066267652,r[:number],0.001)
end

def test_intermediate_output_p173
  r = spreadsheet.intermediate_output_p173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7710.891450069466,r[:number],0.001)
end

def test_intermediate_output_q173
  r = spreadsheet.intermediate_output_q173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8529.428124820686,r[:number],0.001)
end

def test_intermediate_output_c174
  r = spreadsheet.intermediate_output_c174
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f174
  r = spreadsheet.intermediate_output_f174
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h174
  r = spreadsheet.intermediate_output_h174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i174
  r = spreadsheet.intermediate_output_i174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j174
  r = spreadsheet.intermediate_output_j174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k174
  r = spreadsheet.intermediate_output_k174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l174
  r = spreadsheet.intermediate_output_l174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m174
  r = spreadsheet.intermediate_output_m174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n174
  r = spreadsheet.intermediate_output_n174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o174
  r = spreadsheet.intermediate_output_o174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p174
  r = spreadsheet.intermediate_output_p174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q174
  r = spreadsheet.intermediate_output_q174
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c175
  r = spreadsheet.intermediate_output_c175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.066652234615621,r[:number],0.001)
end

def test_intermediate_output_d175
  r = spreadsheet.intermediate_output_d175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_f175
  r = spreadsheet.intermediate_output_f175
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h175
  r = spreadsheet.intermediate_output_h175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29499.635129048977,r[:number],0.001)
end

def test_intermediate_output_i175
  r = spreadsheet.intermediate_output_i175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29397.922926725434,r[:number],0.001)
end

def test_intermediate_output_j175
  r = spreadsheet.intermediate_output_j175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47865.60507278319,r[:number],0.001)
end

def test_intermediate_output_k175
  r = spreadsheet.intermediate_output_k175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65452.16151307094,r[:number],0.001)
end

def test_intermediate_output_l175
  r = spreadsheet.intermediate_output_l175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81890.2079443967,r[:number],0.001)
end

def test_intermediate_output_m175
  r = spreadsheet.intermediate_output_m175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96380.4064413842,r[:number],0.001)
end

def test_intermediate_output_n175
  r = spreadsheet.intermediate_output_n175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109717.61302163101,r[:number],0.001)
end

def test_intermediate_output_o175
  r = spreadsheet.intermediate_output_o175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124054.50885546788,r[:number],0.001)
end

def test_intermediate_output_p175
  r = spreadsheet.intermediate_output_p175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138600.38490515482,r[:number],0.001)
end

def test_intermediate_output_q175
  r = spreadsheet.intermediate_output_q175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152470.5621640452,r[:number],0.001)
end

def test_intermediate_output_f176
  r = spreadsheet.intermediate_output_f176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions in the time period (up to and including year above)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i176
  r = spreadsheet.intermediate_output_i176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117693.40390922528,r[:number],0.001)
end

def test_intermediate_output_j176
  r = spreadsheet.intermediate_output_j176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202392.66107180045,r[:number],0.001)
end

def test_intermediate_output_k176
  r = spreadsheet.intermediate_output_k176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292087.69468477916,r[:number],0.001)
end

def test_intermediate_output_l176
  r = spreadsheet.intermediate_output_l176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376574.946859332,r[:number],0.001)
end

def test_intermediate_output_m176
  r = spreadsheet.intermediate_output_m176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(452921.635212946,r[:number],0.001)
end

def test_intermediate_output_n176
  r = spreadsheet.intermediate_output_n176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(521913.6519476614,r[:number],0.001)
end

def test_intermediate_output_o176
  r = spreadsheet.intermediate_output_o176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(591598.7526096656,r[:number],0.001)
end

def test_intermediate_output_p176
  r = spreadsheet.intermediate_output_p176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(663910.1724264002,r[:number],0.001)
end

def test_intermediate_output_q176
  r = spreadsheet.intermediate_output_q176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(734612.4563024451,r[:number],0.001)
end

def test_intermediate_output_r176
  r = spreadsheet.intermediate_output_r176
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED - All costs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c177
  r = spreadsheet.intermediate_output_c177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Modelled emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f177
  r = spreadsheet.intermediate_output_f177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i177
  r = spreadsheet.intermediate_output_i177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117693.40390922528,r[:number],0.001)
end

def test_intermediate_output_j177
  r = spreadsheet.intermediate_output_j177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(320086.06498102576,r[:number],0.001)
end

def test_intermediate_output_k177
  r = spreadsheet.intermediate_output_k177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(612173.7596658049,r[:number],0.001)
end

def test_intermediate_output_l177
  r = spreadsheet.intermediate_output_l177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(988748.706525137,r[:number],0.001)
end

def test_intermediate_output_m177
  r = spreadsheet.intermediate_output_m177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1441670.341738083,r[:number],0.001)
end

def test_intermediate_output_n177
  r = spreadsheet.intermediate_output_n177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1963583.9936857442,r[:number],0.001)
end

def test_intermediate_output_o177
  r = spreadsheet.intermediate_output_o177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2555182.7462954097,r[:number],0.001)
end

def test_intermediate_output_p177
  r = spreadsheet.intermediate_output_p177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3219092.91872181,r[:number],0.001)
end

def test_intermediate_output_q177
  r = spreadsheet.intermediate_output_q177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3953705.3750242554,r[:number],0.001)
end

def test_intermediate_output_t178
  r = spreadsheet.intermediate_output_t178
  assert_equal(:ExcelString,r[:type])
  assert_equal("CO2 Emissions estimates from select organisations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d179
  r = spreadsheet.intermediate_output_d179
  assert_equal(:ExcelString,r[:type])
  assert_equal("IPCC Sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f179
  r = spreadsheet.intermediate_output_f179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Actuals, GHG Inv.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q179
  r = spreadsheet.intermediate_output_q179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mt CO2e",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_t179
  r = spreadsheet.intermediate_output_t179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Organisation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u179
  r = spreadsheet.intermediate_output_u179
  assert_equal(:ExcelString,r[:type])
  assert_equal("WRI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_w179
  r = spreadsheet.intermediate_output_w179
  assert_equal(:ExcelString,r[:type])
  assert_equal("IEA",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c180
  r = spreadsheet.intermediate_output_c180
  assert_equal(:ExcelString,r[:type])
  assert_equal("1A",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d180
  r = spreadsheet.intermediate_output_d180
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f180
  r = spreadsheet.intermediate_output_f180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32586.9974,r[:number],0.001)
end

def test_intermediate_output_h180
  r = spreadsheet.intermediate_output_h180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29183.594610251526,r[:number],0.001)
end

def test_intermediate_output_i180
  r = spreadsheet.intermediate_output_i180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29077.989523905046,r[:number],0.001)
end

def test_intermediate_output_j180
  r = spreadsheet.intermediate_output_j180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47574.41772762053,r[:number],0.001)
end

def test_intermediate_output_k180
  r = spreadsheet.intermediate_output_k180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65190.75408564532,r[:number],0.001)
end

def test_intermediate_output_l180
  r = spreadsheet.intermediate_output_l180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81545.92103764521,r[:number],0.001)
end

def test_intermediate_output_m180
  r = spreadsheet.intermediate_output_m180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95954.52787819877,r[:number],0.001)
end

def test_intermediate_output_n180
  r = spreadsheet.intermediate_output_n180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109208.71062769691,r[:number],0.001)
end

def test_intermediate_output_o180
  r = spreadsheet.intermediate_output_o180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123418.89447097838,r[:number],0.001)
end

def test_intermediate_output_p180
  r = spreadsheet.intermediate_output_p180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137794.34368894313,r[:number],0.001)
end

def test_intermediate_output_q180
  r = spreadsheet.intermediate_output_q180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151494.19358277853,r[:number],0.001)
end

def test_intermediate_output_t180
  r = spreadsheet.intermediate_output_t180
  assert_equal(:ExcelString,r[:type])
  assert_equal("Year",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u180
  r = spreadsheet.intermediate_output_u180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2005.0,r[:number],0.001)
end

def test_intermediate_output_w180
  r = spreadsheet.intermediate_output_w180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2008.0,r[:number],0.001)
end

def test_intermediate_output_x180
  r = spreadsheet.intermediate_output_x180
  assert_equal(:ExcelString,r[:type])
  assert_equal("2009 ETP 2012 scenarios",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_y180
  r = spreadsheet.intermediate_output_y180
  assert_equal(:ExcelString,r[:type])
  assert_equal("2009 - Sector approach",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_z180
  r = spreadsheet.intermediate_output_z180
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010 - Reference approach",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c181
  r = spreadsheet.intermediate_output_c181
  assert_equal(:ExcelString,r[:type])
  assert_equal("1B",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d181
  r = spreadsheet.intermediate_output_d181
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fugitive Emissions from Fuels",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f181
  r = spreadsheet.intermediate_output_f181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.3916,r[:number],0.001)
end

def test_intermediate_output_h181
  r = spreadsheet.intermediate_output_h181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.295328852582363,r[:number],0.001)
end

def test_intermediate_output_i181
  r = spreadsheet.intermediate_output_i181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.1882128755169825,r[:number],0.001)
end

def test_intermediate_output_j181
  r = spreadsheet.intermediate_output_j181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.539394070252127,r[:number],0.001)
end

def test_intermediate_output_k181
  r = spreadsheet.intermediate_output_k181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.865143837079913,r[:number],0.001)
end

def test_intermediate_output_l181
  r = spreadsheet.intermediate_output_l181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.32997680090652,r[:number],0.001)
end

def test_intermediate_output_m181
  r = spreadsheet.intermediate_output_m181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.51280858563024,r[:number],0.001)
end

def test_intermediate_output_n181
  r = spreadsheet.intermediate_output_n181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.133279798597464,r[:number],0.001)
end

def test_intermediate_output_o181
  r = spreadsheet.intermediate_output_o181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.110978661018702,r[:number],0.001)
end

def test_intermediate_output_p181
  r = spreadsheet.intermediate_output_p181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.248352253815565,r[:number],0.001)
end

def test_intermediate_output_q181
  r = spreadsheet.intermediate_output_q181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.447353736279986,r[:number],0.001)
end

def test_intermediate_output_s181
  r = spreadsheet.intermediate_output_s181
  assert_equal(:ExcelString,r[:type])
  assert_equal("1A",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_t181
  r = spreadsheet.intermediate_output_t181
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u181
  r = spreadsheet.intermediate_output_u181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.625,r[:number],0.001)
end

def test_intermediate_output_v181
  r = spreadsheet.intermediate_output_v181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27595.625,r[:number],0.001)
end

def test_intermediate_output_w181
  r = spreadsheet.intermediate_output_w181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32586.9974,r[:number],0.001)
end

def test_intermediate_output_x181
  r = spreadsheet.intermediate_output_x181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31466.0,r[:number],0.001)
end

def test_intermediate_output_y181
  r = spreadsheet.intermediate_output_y181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28999.4,r[:number],0.001)
end

def test_intermediate_output_z181
  r = spreadsheet.intermediate_output_z181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29549.3,r[:number],0.001)
end

def test_intermediate_output_c182
  r = spreadsheet.intermediate_output_c182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.0,r[:number],0.001)
end

def test_intermediate_output_d182
  r = spreadsheet.intermediate_output_d182
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f182
  r = spreadsheet.intermediate_output_f182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33028.389,r[:number],0.001)
end

def test_intermediate_output_h182
  r = spreadsheet.intermediate_output_h182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29186.88993910411,r[:number],0.001)
end

def test_intermediate_output_i182
  r = spreadsheet.intermediate_output_i182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29085.177736780563,r[:number],0.001)
end

def test_intermediate_output_j182
  r = spreadsheet.intermediate_output_j182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47584.95712169078,r[:number],0.001)
end

def test_intermediate_output_k182
  r = spreadsheet.intermediate_output_k182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65204.6192294824,r[:number],0.001)
end

def test_intermediate_output_l182
  r = spreadsheet.intermediate_output_l182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81563.25101444611,r[:number],0.001)
end

def test_intermediate_output_m182
  r = spreadsheet.intermediate_output_m182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95974.0406867844,r[:number],0.001)
end

def test_intermediate_output_n182
  r = spreadsheet.intermediate_output_n182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109231.84390749551,r[:number],0.001)
end

def test_intermediate_output_o182
  r = spreadsheet.intermediate_output_o182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123446.0054496394,r[:number],0.001)
end

def test_intermediate_output_p182
  r = spreadsheet.intermediate_output_p182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137825.59204119694,r[:number],0.001)
end

def test_intermediate_output_q182
  r = spreadsheet.intermediate_output_q182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151529.64093651483,r[:number],0.001)
end

def test_intermediate_output_s182
  r = spreadsheet.intermediate_output_s182
  assert_equal(:ExcelString,r[:type])
  assert_equal("1B",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_t182
  r = spreadsheet.intermediate_output_t182
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fugitive emissions from fuel",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u182
  r = spreadsheet.intermediate_output_u182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.04,r[:number],0.001)
end

def test_intermediate_output_v182
  r = spreadsheet.intermediate_output_v182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1766.1200000000001,r[:number],0.001)
end

def test_intermediate_output_w182
  r = spreadsheet.intermediate_output_w182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.3916,r[:number],0.001)
end

def test_intermediate_output_c183
  r = spreadsheet.intermediate_output_c183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number],0.001)
end

def test_intermediate_output_d183
  r = spreadsheet.intermediate_output_d183
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial Processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f183
  r = spreadsheet.intermediate_output_f183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2569.7825000000003,r[:number],0.001)
end

def test_intermediate_output_h183
  r = spreadsheet.intermediate_output_h183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2570.0,r[:number],0.001)
end

def test_intermediate_output_i183
  r = spreadsheet.intermediate_output_i183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2570.0,r[:number],0.001)
end

def test_intermediate_output_j183
  r = spreadsheet.intermediate_output_j183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2866.347156230302,r[:number],0.001)
end

def test_intermediate_output_k183
  r = spreadsheet.intermediate_output_k183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3162.6943124606046,r[:number],0.001)
end

def test_intermediate_output_l183
  r = spreadsheet.intermediate_output_l183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3459.0414686909066,r[:number],0.001)
end

def test_intermediate_output_m183
  r = spreadsheet.intermediate_output_m183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3755.388624921209,r[:number],0.001)
end

def test_intermediate_output_n183
  r = spreadsheet.intermediate_output_n183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4051.7357811515108,r[:number],0.001)
end

def test_intermediate_output_o183
  r = spreadsheet.intermediate_output_o183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4348.082937381812,r[:number],0.001)
end

def test_intermediate_output_p183
  r = spreadsheet.intermediate_output_p183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4644.430093612114,r[:number],0.001)
end

def test_intermediate_output_q183
  r = spreadsheet.intermediate_output_q183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4940.777249842418,r[:number],0.001)
end

def test_intermediate_output_s183
  r = spreadsheet.intermediate_output_s183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number],0.001)
end

def test_intermediate_output_t183
  r = spreadsheet.intermediate_output_t183
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial Processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u183
  r = spreadsheet.intermediate_output_u183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.043,r[:number],0.001)
end

def test_intermediate_output_v183
  r = spreadsheet.intermediate_output_v183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898.579,r[:number],0.001)
end

def test_intermediate_output_w183
  r = spreadsheet.intermediate_output_w183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2569.7825000000003,r[:number],0.001)
end

def test_intermediate_output_c184
  r = spreadsheet.intermediate_output_c184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_intermediate_output_d184
  r = spreadsheet.intermediate_output_d184
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solvent and Other Product Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f184
  r = spreadsheet.intermediate_output_f184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h184
  r = spreadsheet.intermediate_output_h184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i184
  r = spreadsheet.intermediate_output_i184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j184
  r = spreadsheet.intermediate_output_j184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k184
  r = spreadsheet.intermediate_output_k184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l184
  r = spreadsheet.intermediate_output_l184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m184
  r = spreadsheet.intermediate_output_m184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n184
  r = spreadsheet.intermediate_output_n184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o184
  r = spreadsheet.intermediate_output_o184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p184
  r = spreadsheet.intermediate_output_p184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q184
  r = spreadsheet.intermediate_output_q184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s184
  r = spreadsheet.intermediate_output_s184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_intermediate_output_t184
  r = spreadsheet.intermediate_output_t184
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u184
  r = spreadsheet.intermediate_output_u184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.138,r[:number],0.001)
end

def test_intermediate_output_v184
  r = spreadsheet.intermediate_output_v184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6093.1140000000005,r[:number],0.001)
end

def test_intermediate_output_w184
  r = spreadsheet.intermediate_output_w184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5517.7004,r[:number],0.001)
end

def test_intermediate_output_c185
  r = spreadsheet.intermediate_output_c185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_intermediate_output_d185
  r = spreadsheet.intermediate_output_d185
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f185
  r = spreadsheet.intermediate_output_f185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5517.7004,r[:number],0.001)
end

def test_intermediate_output_h185
  r = spreadsheet.intermediate_output_h185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i185
  r = spreadsheet.intermediate_output_i185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j185
  r = spreadsheet.intermediate_output_j185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k185
  r = spreadsheet.intermediate_output_k185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l185
  r = spreadsheet.intermediate_output_l185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m185
  r = spreadsheet.intermediate_output_m185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n185
  r = spreadsheet.intermediate_output_n185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o185
  r = spreadsheet.intermediate_output_o185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p185
  r = spreadsheet.intermediate_output_p185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q185
  r = spreadsheet.intermediate_output_q185
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s185
  r = spreadsheet.intermediate_output_s185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_intermediate_output_t185
  r = spreadsheet.intermediate_output_t185
  assert_equal(:ExcelString,r[:type])
  assert_equal("LULUCF",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u185
  r = spreadsheet.intermediate_output_u185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.122,r[:number],0.001)
end

def test_intermediate_output_v185
  r = spreadsheet.intermediate_output_v185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5386.666,r[:number],0.001)
end

def test_intermediate_output_w185
  r = spreadsheet.intermediate_output_w185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6002.2192000000005,r[:number],0.001)
end

def test_intermediate_output_c186
  r = spreadsheet.intermediate_output_c186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_intermediate_output_d186
  r = spreadsheet.intermediate_output_d186
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land Use, Land-Use Change and Forestry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f186
  r = spreadsheet.intermediate_output_f186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6002.2192000000005,r[:number],0.001)
end

def test_intermediate_output_h186
  r = spreadsheet.intermediate_output_h186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i186
  r = spreadsheet.intermediate_output_i186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j186
  r = spreadsheet.intermediate_output_j186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k186
  r = spreadsheet.intermediate_output_k186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l186
  r = spreadsheet.intermediate_output_l186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m186
  r = spreadsheet.intermediate_output_m186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n186
  r = spreadsheet.intermediate_output_n186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o186
  r = spreadsheet.intermediate_output_o186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p186
  r = spreadsheet.intermediate_output_p186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q186
  r = spreadsheet.intermediate_output_q186
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s186
  r = spreadsheet.intermediate_output_s186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number],0.001)
end

def test_intermediate_output_t186
  r = spreadsheet.intermediate_output_t186
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u186
  r = spreadsheet.intermediate_output_u186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.032,r[:number],0.001)
end

def test_intermediate_output_v186
  r = spreadsheet.intermediate_output_v186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1412.896,r[:number],0.001)
end

def test_intermediate_output_w186
  r = spreadsheet.intermediate_output_w186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.5893,r[:number],0.001)
end

def test_intermediate_output_c187
  r = spreadsheet.intermediate_output_c187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number],0.001)
end

def test_intermediate_output_d187
  r = spreadsheet.intermediate_output_d187
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f187
  r = spreadsheet.intermediate_output_f187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.5893,r[:number],0.001)
end

def test_intermediate_output_h187
  r = spreadsheet.intermediate_output_h187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i187
  r = spreadsheet.intermediate_output_i187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j187
  r = spreadsheet.intermediate_output_j187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k187
  r = spreadsheet.intermediate_output_k187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l187
  r = spreadsheet.intermediate_output_l187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m187
  r = spreadsheet.intermediate_output_m187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n187
  r = spreadsheet.intermediate_output_n187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o187
  r = spreadsheet.intermediate_output_o187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p187
  r = spreadsheet.intermediate_output_p187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q187
  r = spreadsheet.intermediate_output_q187
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t187
  r = spreadsheet.intermediate_output_t187
  assert_equal(:ExcelString,r[:type])
  assert_equal("TOTAL",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u187
  r = spreadsheet.intermediate_output_u187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44153.0,r[:number],0.001)
end

def test_intermediate_output_w187
  r = spreadsheet.intermediate_output_w187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48390.680400000005,r[:number],0.001)
end

def test_intermediate_output_c188
  r = spreadsheet.intermediate_output_c188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.0,r[:number],0.001)
end

def test_intermediate_output_d188
  r = spreadsheet.intermediate_output_d188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h188
  r = spreadsheet.intermediate_output_h188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i188
  r = spreadsheet.intermediate_output_i188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j188
  r = spreadsheet.intermediate_output_j188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k188
  r = spreadsheet.intermediate_output_k188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l188
  r = spreadsheet.intermediate_output_l188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m188
  r = spreadsheet.intermediate_output_m188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n188
  r = spreadsheet.intermediate_output_n188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o188
  r = spreadsheet.intermediate_output_o188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p188
  r = spreadsheet.intermediate_output_p188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q188
  r = spreadsheet.intermediate_output_q188
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u188
  r = spreadsheet.intermediate_output_u188
  assert_equal(:ExcelString,r[:type])
  assert_equal("%",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_v188
  r = spreadsheet.intermediate_output_v188
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2eq",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_w188
  r = spreadsheet.intermediate_output_w188
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2eq",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_x188
  r = spreadsheet.intermediate_output_x188
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2eq",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_y188
  r = spreadsheet.intermediate_output_y188
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_z188
  r = spreadsheet.intermediate_output_z188
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c189
  r = spreadsheet.intermediate_output_c189
  assert_equal(:ExcelString,r[:type])
  assert_equal("X1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d189
  r = spreadsheet.intermediate_output_d189
  assert_equal(:ExcelString,r[:type])
  assert_equal("International Aviation and Shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f189
  r = spreadsheet.intermediate_output_f189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6421.99,r[:number],0.001)
end

def test_intermediate_output_h189
  r = spreadsheet.intermediate_output_h189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_i189
  r = spreadsheet.intermediate_output_i189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_j189
  r = spreadsheet.intermediate_output_j189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_k189
  r = spreadsheet.intermediate_output_k189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_l189
  r = spreadsheet.intermediate_output_l189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_m189
  r = spreadsheet.intermediate_output_m189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_n189
  r = spreadsheet.intermediate_output_n189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_o189
  r = spreadsheet.intermediate_output_o189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_p189
  r = spreadsheet.intermediate_output_p189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_q189
  r = spreadsheet.intermediate_output_q189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05350994487000125,r[:number],0.001)
end

def test_intermediate_output_t189
  r = spreadsheet.intermediate_output_t189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Source:",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u189
  r = spreadsheet.intermediate_output_u189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Herzog, Timothy. World Greenhouse Gas Emissions in 2005. WRI Working Paper. World Resources Institute. Available online at http://www.wri.org/publication/navigating-the-numbers.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_w189
  r = spreadsheet.intermediate_output_w189
  assert_equal(:ExcelString,r[:type])
  assert_equal("IEA Non-CO2 emissions database",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c190
  r = spreadsheet.intermediate_output_c190
  assert_equal(:ExcelString,r[:type])
  assert_equal("X2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d190
  r = spreadsheet.intermediate_output_d190
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy credit",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h190
  r = spreadsheet.intermediate_output_h190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2257.30832,r[:number],0.001)
end

def test_intermediate_output_i190
  r = spreadsheet.intermediate_output_i190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2257.30832,r[:number],0.001)
end

def test_intermediate_output_j190
  r = spreadsheet.intermediate_output_j190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2582.9177,r[:number],0.001)
end

def test_intermediate_output_k190
  r = spreadsheet.intermediate_output_k190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2908.52708,r[:number],0.001)
end

def test_intermediate_output_l190
  r = spreadsheet.intermediate_output_l190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3125.5999999999995,r[:number],0.001)
end

def test_intermediate_output_m190
  r = spreadsheet.intermediate_output_m190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3342.6729199999995,r[:number],0.001)
end

def test_intermediate_output_n190
  r = spreadsheet.intermediate_output_n190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3559.745839999999,r[:number],0.001)
end

def test_intermediate_output_o190
  r = spreadsheet.intermediate_output_o190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3733.3729199999993,r[:number],0.001)
end

def test_intermediate_output_p190
  r = spreadsheet.intermediate_output_p190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3863.5541599999992,r[:number],0.001)
end

def test_intermediate_output_q190
  r = spreadsheet.intermediate_output_q190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3993.8916799999997,r[:number],0.001)
end

def test_intermediate_output_t190
  r = spreadsheet.intermediate_output_t190
  assert_equal(:ExcelString,r[:type])
  assert_equal("Notes:",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_u190
  r = spreadsheet.intermediate_output_u190
  assert_equal(:ExcelString,r[:type])
  assert_equal("More detail available for fuel combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_w190
  r = spreadsheet.intermediate_output_w190
  assert_equal(:ExcelString,r[:type])
  assert_equal("LULUCF may be over-estimated as it includes other IPCC categories for CH4 and NO2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_y190
  r = spreadsheet.intermediate_output_y190
  assert_equal(:ExcelString,r[:type])
  assert_equal("CO2 Emissions from fuel combustion 2011",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_z190
  r = spreadsheet.intermediate_output_z190
  assert_equal(:ExcelString,r[:type])
  assert_equal("CO2 Emissions from fuel combustion 2012",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c191
  r = spreadsheet.intermediate_output_c191
  assert_equal(:ExcelString,r[:type])
  assert_equal("X3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d191
  r = spreadsheet.intermediate_output_d191
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon capture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h191
  r = spreadsheet.intermediate_output_h191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i191
  r = spreadsheet.intermediate_output_i191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j191
  r = spreadsheet.intermediate_output_j191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8350150827586207,r[:number],0.001)
end

def test_intermediate_output_k191
  r = spreadsheet.intermediate_output_k191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.678458816949152,r[:number],0.001)
end

def test_intermediate_output_l191
  r = spreadsheet.intermediate_output_l191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.538048685217391,r[:number],0.001)
end

def test_intermediate_output_m191
  r = spreadsheet.intermediate_output_m191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.403460266271363,r[:number],0.001)
end

def test_intermediate_output_n191
  r = spreadsheet.intermediate_output_n191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.274336960887095,r[:number],0.001)
end

def test_intermediate_output_o191
  r = spreadsheet.intermediate_output_o191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.260121498214285,r[:number],0.001)
end

def test_intermediate_output_p191
  r = spreadsheet.intermediate_output_p191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.136579599107142,r[:number],0.001)
end

def test_intermediate_output_q191
  r = spreadsheet.intermediate_output_q191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.017852256923077,r[:number],0.001)
end

def test_intermediate_output_d192
  r = spreadsheet.intermediate_output_d192
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f192
  r = spreadsheet.intermediate_output_f192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48390.680400000005,r[:number],0.001)
end

def test_intermediate_output_h192
  r = spreadsheet.intermediate_output_h192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29499.63512904898,r[:number],0.001)
end

def test_intermediate_output_i192
  r = spreadsheet.intermediate_output_i192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29397.922926725434,r[:number],0.001)
end

def test_intermediate_output_j192
  r = spreadsheet.intermediate_output_j192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47865.60507278319,r[:number],0.001)
end

def test_intermediate_output_k192
  r = spreadsheet.intermediate_output_k192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65452.16151307093,r[:number],0.001)
end

def test_intermediate_output_l192
  r = spreadsheet.intermediate_output_l192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81890.20794439666,r[:number],0.001)
end

def test_intermediate_output_m192
  r = spreadsheet.intermediate_output_m192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96380.40644138421,r[:number],0.001)
end

def test_intermediate_output_n192
  r = spreadsheet.intermediate_output_n192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109717.613021631,r[:number],0.001)
end

def test_intermediate_output_o192
  r = spreadsheet.intermediate_output_o192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124054.50885546788,r[:number],0.001)
end

def test_intermediate_output_p192
  r = spreadsheet.intermediate_output_p192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138600.38490515482,r[:number],0.001)
end

def test_intermediate_output_q192
  r = spreadsheet.intermediate_output_q192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152470.5621640452,r[:number],0.001)
end

def test_intermediate_output_r192
  r = spreadsheet.intermediate_output_r192
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED - All costs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c194
  r = spreadsheet.intermediate_output_c194
  assert_equal(:ExcelString,r[:type])
  assert_equal("Excluding international bunkers",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f194
  r = spreadsheet.intermediate_output_f194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41968.69040000001,r[:number],0.001)
end

def test_intermediate_output_h194
  r = spreadsheet.intermediate_output_h194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29499.58161910411,r[:number],0.001)
end

def test_intermediate_output_i194
  r = spreadsheet.intermediate_output_i194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29397.869416780562,r[:number],0.001)
end

def test_intermediate_output_j194
  r = spreadsheet.intermediate_output_j194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47865.55156283832,r[:number],0.001)
end

def test_intermediate_output_k194
  r = spreadsheet.intermediate_output_k194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65452.108003126064,r[:number],0.001)
end

def test_intermediate_output_l194
  r = spreadsheet.intermediate_output_l194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81890.15443445179,r[:number],0.001)
end

def test_intermediate_output_m194
  r = spreadsheet.intermediate_output_m194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96380.35293143934,r[:number],0.001)
end

def test_intermediate_output_n194
  r = spreadsheet.intermediate_output_n194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109717.55951168612,r[:number],0.001)
end

def test_intermediate_output_o194
  r = spreadsheet.intermediate_output_o194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124054.455345523,r[:number],0.001)
end

def test_intermediate_output_p194
  r = spreadsheet.intermediate_output_p194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138600.33139520994,r[:number],0.001)
end

def test_intermediate_output_q194
  r = spreadsheet.intermediate_output_q194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152470.50865410033,r[:number],0.001)
end

def test_intermediate_output_r194
  r = spreadsheet.intermediate_output_r194
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED - All costs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c197
  r = spreadsheet.intermediate_output_c197
  assert_equal(:ExcelString,r[:type])
  assert_equal("Please note: emissions by sector need to account for bio-energy, which is accounted for seperately (in V). ",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c198
  r = spreadsheet.intermediate_output_c198
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative emissions are estimates based on a linear trajectory between the 5 year time periods",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c201
  r = spreadsheet.intermediate_output_c201
  assert_equal(:ExcelString,r[:type])
  assert_equal("Targets",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h201
  r = spreadsheet.intermediate_output_h201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 target",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i201
  r = spreadsheet.intermediate_output_i201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020 target ",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k201
  r = spreadsheet.intermediate_output_k201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 target",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l201
  r = spreadsheet.intermediate_output_l201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020 target",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n201
  r = spreadsheet.intermediate_output_n201
  assert_equal(:ExcelString,r[:type])
  assert_equal("Actuals, as % of 2007, modelled",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f202
  r = spreadsheet.intermediate_output_f202
  assert_equal(:ExcelString,r[:type])
  assert_equal("Base year (1990)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h202
  r = spreadsheet.intermediate_output_h202
  assert_equal(:ExcelString,r[:type])
  assert_equal("(20% of base)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i202
  r = spreadsheet.intermediate_output_i202
  assert_equal(:ExcelString,r[:type])
  assert_equal("(66% of base)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k202
  r = spreadsheet.intermediate_output_k202
  assert_equal(:ExcelString,r[:type])
  assert_equal("% of 2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l202
  r = spreadsheet.intermediate_output_l202
  assert_equal(:ExcelString,r[:type])
  assert_equal("% of 2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o202
  r = spreadsheet.intermediate_output_o202
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_p202
  r = spreadsheet.intermediate_output_p202
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_q202
  r = spreadsheet.intermediate_output_q202
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_d203
  r = spreadsheet.intermediate_output_d203
  assert_equal(:ExcelString,r[:type])
  assert_equal("Kyoto agreed sectors",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f203
  r = spreadsheet.intermediate_output_f203
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(777.11767,r[:number],0.001)
end

def test_intermediate_output_h203
  r = spreadsheet.intermediate_output_h203
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.42353400000002,r[:number],0.001)
end

def test_intermediate_output_i203
  r = spreadsheet.intermediate_output_i203
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(512.8976622,r[:number],0.001)
end

def test_intermediate_output_d204
  r = spreadsheet.intermediate_output_d204
  assert_equal(:ExcelString,r[:type])
  assert_equal("International bunkers (CO2 only)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f204
  r = spreadsheet.intermediate_output_f204
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.4685,r[:number],0.001)
end

def test_intermediate_output_k204
  r = spreadsheet.intermediate_output_k204
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48778101179056,r[:number],0.001)
end

def test_intermediate_output_l204
  r = spreadsheet.intermediate_output_l204
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(321.7096773389089,r[:number],0.001)
end

def test_intermediate_output_d205
  r = spreadsheet.intermediate_output_d205
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f205
  r = spreadsheet.intermediate_output_f205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(799.5861699999999,r[:number],0.001)
end

def test_intermediate_output_h205
  r = spreadsheet.intermediate_output_h205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.917234,r[:number],0.001)
end

def test_intermediate_output_i205
  r = spreadsheet.intermediate_output_i205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(527.7268722,r[:number],0.001)
end

def test_intermediate_output_k205
  r = spreadsheet.intermediate_output_k205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0033047114171182433,r[:number],0.001)
end

def test_intermediate_output_l205
  r = spreadsheet.intermediate_output_l205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010905547676490202,r[:number],0.001)
end

def test_intermediate_output_o205
  r = spreadsheet.intermediate_output_o205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2187447819860884,r[:number],0.001)
end

def test_intermediate_output_p205
  r = spreadsheet.intermediate_output_p205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.267172831791271,r[:number],0.001)
end

def test_intermediate_output_q205
  r = spreadsheet.intermediate_output_q205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.1685575600188995,r[:number],0.001)
end

def test_intermediate_output_d206
  r = spreadsheet.intermediate_output_d206
  assert_equal(:ExcelString,r[:type])
  assert_equal("Target, for chart",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h206
  r = spreadsheet.intermediate_output_h206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_i206
  r = spreadsheet.intermediate_output_i206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_j206
  r = spreadsheet.intermediate_output_j206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_k206
  r = spreadsheet.intermediate_output_k206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_l206
  r = spreadsheet.intermediate_output_l206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_m206
  r = spreadsheet.intermediate_output_m206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_n206
  r = spreadsheet.intermediate_output_n206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_o206
  r = spreadsheet.intermediate_output_o206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_p206
  r = spreadsheet.intermediate_output_p206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_q206
  r = spreadsheet.intermediate_output_q206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_intermediate_output_d207
  r = spreadsheet.intermediate_output_d207
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy, for chart",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h207
  r = spreadsheet.intermediate_output_h207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i207
  r = spreadsheet.intermediate_output_i207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j207
  r = spreadsheet.intermediate_output_j207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k207
  r = spreadsheet.intermediate_output_k207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l207
  r = spreadsheet.intermediate_output_l207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m207
  r = spreadsheet.intermediate_output_m207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n207
  r = spreadsheet.intermediate_output_n207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o207
  r = spreadsheet.intermediate_output_o207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p207
  r = spreadsheet.intermediate_output_p207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q207
  r = spreadsheet.intermediate_output_q207
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_b210
  r = spreadsheet.intermediate_output_b210
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-energy - Production and Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_b212
  r = spreadsheet.intermediate_output_b212
  assert_equal(:ExcelString,r[:type])
  assert_equal("Production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c214
  r = spreadsheet.intermediate_output_c214
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h214
  r = spreadsheet.intermediate_output_h214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i214
  r = spreadsheet.intermediate_output_i214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j214
  r = spreadsheet.intermediate_output_j214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k214
  r = spreadsheet.intermediate_output_k214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l214
  r = spreadsheet.intermediate_output_l214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m214
  r = spreadsheet.intermediate_output_m214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n214
  r = spreadsheet.intermediate_output_n214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o214
  r = spreadsheet.intermediate_output_o214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p214
  r = spreadsheet.intermediate_output_p214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q214
  r = spreadsheet.intermediate_output_q214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c215
  r = spreadsheet.intermediate_output_c215
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d215
  r = spreadsheet.intermediate_output_d215
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e215
  r = spreadsheet.intermediate_output_e215
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h215
  r = spreadsheet.intermediate_output_h215
  assert_equal(:ExcelString,r[:type])
  assert_equal("na",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i215
  r = spreadsheet.intermediate_output_i215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_intermediate_output_j215
  r = spreadsheet.intermediate_output_j215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_intermediate_output_k215
  r = spreadsheet.intermediate_output_k215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_intermediate_output_l215
  r = spreadsheet.intermediate_output_l215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_m215
  r = spreadsheet.intermediate_output_m215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_n215
  r = spreadsheet.intermediate_output_n215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_o215
  r = spreadsheet.intermediate_output_o215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_p215
  r = spreadsheet.intermediate_output_p215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_q215
  r = spreadsheet.intermediate_output_q215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_c216
  r = spreadsheet.intermediate_output_c216
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d216
  r = spreadsheet.intermediate_output_d216
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e216
  r = spreadsheet.intermediate_output_e216
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h216
  r = spreadsheet.intermediate_output_h216
  assert_equal(:ExcelString,r[:type])
  assert_equal("na",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i216
  r = spreadsheet.intermediate_output_i216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.33333333333331,r[:number],0.001)
end

def test_intermediate_output_j216
  r = spreadsheet.intermediate_output_j216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.93333333333334,r[:number],0.001)
end

def test_intermediate_output_k216
  r = spreadsheet.intermediate_output_k216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.53333333333333,r[:number],0.001)
end

def test_intermediate_output_l216
  r = spreadsheet.intermediate_output_l216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.16,r[:number],0.001)
end

def test_intermediate_output_m216
  r = spreadsheet.intermediate_output_m216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.96666666666667,r[:number],0.001)
end

def test_intermediate_output_n216
  r = spreadsheet.intermediate_output_n216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.77333333333334,r[:number],0.001)
end

def test_intermediate_output_o216
  r = spreadsheet.intermediate_output_o216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.57999999999998,r[:number],0.001)
end

def test_intermediate_output_p216
  r = spreadsheet.intermediate_output_p216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.19333333333333,r[:number],0.001)
end

def test_intermediate_output_q216
  r = spreadsheet.intermediate_output_q216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.0,r[:number],0.001)
end

def test_intermediate_output_c217
  r = spreadsheet.intermediate_output_c217
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d217
  r = spreadsheet.intermediate_output_d217
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e217
  r = spreadsheet.intermediate_output_e217
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h217
  r = spreadsheet.intermediate_output_h217
  assert_equal(:ExcelString,r[:type])
  assert_equal("na",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i217
  r = spreadsheet.intermediate_output_i217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_intermediate_output_j217
  r = spreadsheet.intermediate_output_j217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_intermediate_output_k217
  r = spreadsheet.intermediate_output_k217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_intermediate_output_l217
  r = spreadsheet.intermediate_output_l217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_m217
  r = spreadsheet.intermediate_output_m217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_n217
  r = spreadsheet.intermediate_output_n217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_o217
  r = spreadsheet.intermediate_output_o217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_p217
  r = spreadsheet.intermediate_output_p217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_q217
  r = spreadsheet.intermediate_output_q217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_c219
  r = spreadsheet.intermediate_output_c219
  assert_equal(:ExcelString,r[:type])
  assert_equal("Imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c220
  r = spreadsheet.intermediate_output_c220
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d220
  r = spreadsheet.intermediate_output_d220
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e220
  r = spreadsheet.intermediate_output_e220
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c221
  r = spreadsheet.intermediate_output_c221
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d221
  r = spreadsheet.intermediate_output_d221
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e221
  r = spreadsheet.intermediate_output_e221
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c222
  r = spreadsheet.intermediate_output_c222
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d222
  r = spreadsheet.intermediate_output_d222
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e222
  r = spreadsheet.intermediate_output_e222
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c224
  r = spreadsheet.intermediate_output_c224
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c225
  r = spreadsheet.intermediate_output_c225
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d225
  r = spreadsheet.intermediate_output_d225
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e225
  r = spreadsheet.intermediate_output_e225
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h225
  r = spreadsheet.intermediate_output_h225
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_i225
  r = spreadsheet.intermediate_output_i225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_intermediate_output_j225
  r = spreadsheet.intermediate_output_j225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_intermediate_output_k225
  r = spreadsheet.intermediate_output_k225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_intermediate_output_l225
  r = spreadsheet.intermediate_output_l225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_m225
  r = spreadsheet.intermediate_output_m225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_n225
  r = spreadsheet.intermediate_output_n225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_o225
  r = spreadsheet.intermediate_output_o225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_p225
  r = spreadsheet.intermediate_output_p225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_q225
  r = spreadsheet.intermediate_output_q225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_c226
  r = spreadsheet.intermediate_output_c226
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d226
  r = spreadsheet.intermediate_output_d226
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e226
  r = spreadsheet.intermediate_output_e226
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h226
  r = spreadsheet.intermediate_output_h226
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_i226
  r = spreadsheet.intermediate_output_i226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.33333333333331,r[:number],0.001)
end

def test_intermediate_output_j226
  r = spreadsheet.intermediate_output_j226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.93333333333334,r[:number],0.001)
end

def test_intermediate_output_k226
  r = spreadsheet.intermediate_output_k226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.53333333333333,r[:number],0.001)
end

def test_intermediate_output_l226
  r = spreadsheet.intermediate_output_l226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.16,r[:number],0.001)
end

def test_intermediate_output_m226
  r = spreadsheet.intermediate_output_m226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.96666666666667,r[:number],0.001)
end

def test_intermediate_output_n226
  r = spreadsheet.intermediate_output_n226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.77333333333334,r[:number],0.001)
end

def test_intermediate_output_o226
  r = spreadsheet.intermediate_output_o226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.57999999999998,r[:number],0.001)
end

def test_intermediate_output_p226
  r = spreadsheet.intermediate_output_p226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.19333333333333,r[:number],0.001)
end

def test_intermediate_output_q226
  r = spreadsheet.intermediate_output_q226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.0,r[:number],0.001)
end

def test_intermediate_output_c227
  r = spreadsheet.intermediate_output_c227
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d227
  r = spreadsheet.intermediate_output_d227
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e227
  r = spreadsheet.intermediate_output_e227
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h227
  r = spreadsheet.intermediate_output_h227
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_i227
  r = spreadsheet.intermediate_output_i227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_intermediate_output_j227
  r = spreadsheet.intermediate_output_j227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_intermediate_output_k227
  r = spreadsheet.intermediate_output_k227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_intermediate_output_l227
  r = spreadsheet.intermediate_output_l227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_m227
  r = spreadsheet.intermediate_output_m227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_n227
  r = spreadsheet.intermediate_output_n227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_o227
  r = spreadsheet.intermediate_output_o227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_p227
  r = spreadsheet.intermediate_output_p227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_q227
  r = spreadsheet.intermediate_output_q227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_b229
  r = spreadsheet.intermediate_output_b229
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro-carbon use by sector and Bio-energy share",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h229
  r = spreadsheet.intermediate_output_h229
  assert_equal(:ExcelString,r[:type])
  assert_equal("Please note: Bio-energy is not assigned to sectors but is assumed to replace fossil fuels up to maximum demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c231
  r = spreadsheet.intermediate_output_c231
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid Hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h231
  r = spreadsheet.intermediate_output_h231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_intermediate_output_i231
  r = spreadsheet.intermediate_output_i231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39368.46556277542,r[:number],0.001)
end

def test_intermediate_output_j231
  r = spreadsheet.intermediate_output_j231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68219.9068701443,r[:number],0.001)
end

def test_intermediate_output_k231
  r = spreadsheet.intermediate_output_k231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94158.30199403531,r[:number],0.001)
end

def test_intermediate_output_l231
  r = spreadsheet.intermediate_output_l231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116001.50255188122,r[:number],0.001)
end

def test_intermediate_output_m231
  r = spreadsheet.intermediate_output_m231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131519.62712672516,r[:number],0.001)
end

def test_intermediate_output_n231
  r = spreadsheet.intermediate_output_n231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143735.43950572965,r[:number],0.001)
end

def test_intermediate_output_o231
  r = spreadsheet.intermediate_output_o231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157873.1940190867,r[:number],0.001)
end

def test_intermediate_output_p231
  r = spreadsheet.intermediate_output_p231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171643.97412016665,r[:number],0.001)
end

def test_intermediate_output_q231
  r = spreadsheet.intermediate_output_q231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182988.67696339038,r[:number],0.001)
end

def test_intermediate_output_c232
  r = spreadsheet.intermediate_output_c232
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d232
  r = spreadsheet.intermediate_output_d232
  assert_equal(:ExcelString,r[:type])
  assert_equal("Share of solid biomass to total solid hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h232
  r = spreadsheet.intermediate_output_h232
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i232
  r = spreadsheet.intermediate_output_i232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08292965266309539,r[:number],0.001)
end

def test_intermediate_output_j232
  r = spreadsheet.intermediate_output_j232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.04785719190755459,r[:number],0.001)
end

def test_intermediate_output_k232
  r = spreadsheet.intermediate_output_k232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.03467366239470647,r[:number],0.001)
end

def test_intermediate_output_l232
  r = spreadsheet.intermediate_output_l232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02970816419538121,r[:number],0.001)
end

def test_intermediate_output_m232
  r = spreadsheet.intermediate_output_m232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02620286994428335,r[:number],0.001)
end

def test_intermediate_output_n232
  r = spreadsheet.intermediate_output_n232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02397593590399705,r[:number],0.001)
end

def test_intermediate_output_o232
  r = spreadsheet.intermediate_output_o232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.021828858953126515,r[:number],0.001)
end

def test_intermediate_output_p232
  r = spreadsheet.intermediate_output_p232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02007755706186089,r[:number],0.001)
end

def test_intermediate_output_q232
  r = spreadsheet.intermediate_output_q232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.018832813821653468,r[:number],0.001)
end

def test_intermediate_output_c233
  r = spreadsheet.intermediate_output_c233
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d233
  r = spreadsheet.intermediate_output_d233
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h233
  r = spreadsheet.intermediate_output_h233
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i233
  r = spreadsheet.intermediate_output_i233
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j233
  r = spreadsheet.intermediate_output_j233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.773727272727275,r[:number],0.001)
end

def test_intermediate_output_k233
  r = spreadsheet.intermediate_output_k233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.6975,r[:number],0.001)
end

def test_intermediate_output_l233
  r = spreadsheet.intermediate_output_l233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.24755434782609,r[:number],0.001)
end

def test_intermediate_output_m233
  r = spreadsheet.intermediate_output_m233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.81675531914894,r[:number],0.001)
end

def test_intermediate_output_n233
  r = spreadsheet.intermediate_output_n233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.40390625,r[:number],0.001)
end

def test_intermediate_output_o233
  r = spreadsheet.intermediate_output_o233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.403906250000002,r[:number],0.001)
end

def test_intermediate_output_p233
  r = spreadsheet.intermediate_output_p233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.007908163265306,r[:number],0.001)
end

def test_intermediate_output_q233
  r = spreadsheet.intermediate_output_q233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.627750000000002,r[:number],0.001)
end

def test_intermediate_output_c234
  r = spreadsheet.intermediate_output_c234
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d234
  r = spreadsheet.intermediate_output_d234
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydrocarbon power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h234
  r = spreadsheet.intermediate_output_h234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25873.666912456054,r[:number],0.001)
end

def test_intermediate_output_i234
  r = spreadsheet.intermediate_output_i234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25505.488114851403,r[:number],0.001)
end

def test_intermediate_output_j234
  r = spreadsheet.intermediate_output_j234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52590.68564127534,r[:number],0.001)
end

def test_intermediate_output_k234
  r = spreadsheet.intermediate_output_k234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77129.09535924884,r[:number],0.001)
end

def test_intermediate_output_l234
  r = spreadsheet.intermediate_output_l234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97955.87125900133,r[:number],0.001)
end

def test_intermediate_output_m234
  r = spreadsheet.intermediate_output_m234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112823.62168883061,r[:number],0.001)
end

def test_intermediate_output_n234
  r = spreadsheet.intermediate_output_n234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124750.3931699122,r[:number],0.001)
end

def test_intermediate_output_o234
  r = spreadsheet.intermediate_output_o234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138957.6516099781,r[:number],0.001)
end

def test_intermediate_output_p234
  r = spreadsheet.intermediate_output_p234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153154.52372069264,r[:number],0.001)
end

def test_intermediate_output_q234
  r = spreadsheet.intermediate_output_q234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165279.0232689064,r[:number],0.001)
end

def test_intermediate_output_c235
  r = spreadsheet.intermediate_output_c235
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d235
  r = spreadsheet.intermediate_output_d235
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h235
  r = spreadsheet.intermediate_output_h235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11266.716104442912,r[:number],0.001)
end

def test_intermediate_output_i235
  r = spreadsheet.intermediate_output_i235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11266.716104442912,r[:number],0.001)
end

def test_intermediate_output_j235
  r = spreadsheet.intermediate_output_j235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12069.670931111643,r[:number],0.001)
end

def test_intermediate_output_k235
  r = spreadsheet.intermediate_output_k235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12872.625757780374,r[:number],0.001)
end

def test_intermediate_output_l235
  r = spreadsheet.intermediate_output_l235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13675.580584449104,r[:number],0.001)
end

def test_intermediate_output_m235
  r = spreadsheet.intermediate_output_m235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14478.535411117835,r[:number],0.001)
end

def test_intermediate_output_n235
  r = spreadsheet.intermediate_output_n235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15281.490237786566,r[:number],0.001)
end

def test_intermediate_output_o235
  r = spreadsheet.intermediate_output_o235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16084.445064455296,r[:number],0.001)
end

def test_intermediate_output_p235
  r = spreadsheet.intermediate_output_p235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16887.399891124027,r[:number],0.001)
end

def test_intermediate_output_q235
  r = spreadsheet.intermediate_output_q235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17690.35471779275,r[:number],0.001)
end

def test_intermediate_output_c236
  r = spreadsheet.intermediate_output_c236
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d236
  r = spreadsheet.intermediate_output_d236
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h236
  r = spreadsheet.intermediate_output_h236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2225.1783340750876,r[:number],0.001)
end

def test_intermediate_output_i236
  r = spreadsheet.intermediate_output_i236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2286.5895919152035,r[:number],0.001)
end

def test_intermediate_output_j236
  r = spreadsheet.intermediate_output_j236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3281.6462333884947,r[:number],0.001)
end

def test_intermediate_output_k236
  r = spreadsheet.intermediate_output_k236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3903.294454379811,r[:number],0.001)
end

def test_intermediate_output_l236
  r = spreadsheet.intermediate_output_l236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4155.755645926467,r[:number],0.001)
end

def test_intermediate_output_m236
  r = spreadsheet.intermediate_output_m236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4042.816386887151,r[:number],0.001)
end

def test_intermediate_output_n236
  r = spreadsheet.intermediate_output_n236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3567.8567216802817,r[:number],0.001)
end

def test_intermediate_output_o236
  r = spreadsheet.intermediate_output_o236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2733.939382772483,r[:number],0.001)
end

def test_intermediate_output_p236
  r = spreadsheet.intermediate_output_p236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1543.829959025696,r[:number],0.001)
end

def test_intermediate_output_q236
  r = spreadsheet.intermediate_output_q236
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c238
  r = spreadsheet.intermediate_output_c238
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid Hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h238
  r = spreadsheet.intermediate_output_h238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41927.52455539733,r[:number],0.001)
end

def test_intermediate_output_i238
  r = spreadsheet.intermediate_output_i238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41988.68553077358,r[:number],0.001)
end

def test_intermediate_output_j238
  r = spreadsheet.intermediate_output_j238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61511.20520883764,r[:number],0.001)
end

def test_intermediate_output_k238
  r = spreadsheet.intermediate_output_k238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81413.35754479661,r[:number],0.001)
end

def test_intermediate_output_l238
  r = spreadsheet.intermediate_output_l238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101027.30996464801,r[:number],0.001)
end

def test_intermediate_output_m238
  r = spreadsheet.intermediate_output_m238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120807.76905107049,r[:number],0.001)
end

def test_intermediate_output_n238
  r = spreadsheet.intermediate_output_n238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139991.3925569267,r[:number],0.001)
end

def test_intermediate_output_o238
  r = spreadsheet.intermediate_output_o238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158915.91283816373,r[:number],0.001)
end

def test_intermediate_output_p238
  r = spreadsheet.intermediate_output_p238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178242.28224019724,r[:number],0.001)
end

def test_intermediate_output_q238
  r = spreadsheet.intermediate_output_q238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197752.01018006023,r[:number],0.001)
end

def test_intermediate_output_c239
  r = spreadsheet.intermediate_output_c239
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d239
  r = spreadsheet.intermediate_output_d239
  assert_equal(:ExcelString,r[:type])
  assert_equal("Share of Bioliquids to total liquid hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h239
  r = spreadsheet.intermediate_output_h239
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i239
  r = spreadsheet.intermediate_output_i239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.003199274557782481,r[:number],0.001)
end

def test_intermediate_output_j239
  r = spreadsheet.intermediate_output_j239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0022261526638671586,r[:number],0.001)
end

def test_intermediate_output_k239
  r = spreadsheet.intermediate_output_k239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0017138874693450271,r[:number],0.001)
end

def test_intermediate_output_l239
  r = spreadsheet.intermediate_output_l239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0015853139122089265,r[:number],0.001)
end

def test_intermediate_output_m239
  r = spreadsheet.intermediate_output_m239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0013738078930710625,r[:number],0.001)
end

def test_intermediate_output_n239
  r = spreadsheet.intermediate_output_n239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0012270278207532131,r[:number],0.001)
end

def test_intermediate_output_o239
  r = spreadsheet.intermediate_output_o239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0011174463074748425,r[:number],0.001)
end

def test_intermediate_output_p239
  r = spreadsheet.intermediate_output_p239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0010614391319248178,r[:number],0.001)
end

def test_intermediate_output_q239
  r = spreadsheet.intermediate_output_q239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0009860835286703057,r[:number],0.001)
end

def test_intermediate_output_c240
  r = spreadsheet.intermediate_output_c240
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d240
  r = spreadsheet.intermediate_output_d240
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h240
  r = spreadsheet.intermediate_output_h240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27069.52913630886,r[:number],0.001)
end

def test_intermediate_output_i240
  r = spreadsheet.intermediate_output_i240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27448.182119810677,r[:number],0.001)
end

def test_intermediate_output_j240
  r = spreadsheet.intermediate_output_j240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44049.67062416571,r[:number],0.001)
end

def test_intermediate_output_k240
  r = spreadsheet.intermediate_output_k240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61982.54706752039,r[:number],0.001)
end

def test_intermediate_output_l240
  r = spreadsheet.intermediate_output_l240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80308.16013606045,r[:number],0.001)
end

def test_intermediate_output_m240
  r = spreadsheet.intermediate_output_m240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98970.82704152951,r[:number],0.001)
end

def test_intermediate_output_n240
  r = spreadsheet.intermediate_output_n240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117819.44693458013,r[:number],0.001)
end

def test_intermediate_output_o240
  r = spreadsheet.intermediate_output_o240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136748.93049630514,r[:number],0.001)
end

def test_intermediate_output_p240
  r = spreadsheet.intermediate_output_p240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156495.26955067014,r[:number],0.001)
end

def test_intermediate_output_q240
  r = spreadsheet.intermediate_output_q240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176625.92545736788,r[:number],0.001)
end

def test_intermediate_output_c241
  r = spreadsheet.intermediate_output_c241
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d241
  r = spreadsheet.intermediate_output_d241
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h241
  r = spreadsheet.intermediate_output_h241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8004.602512493475,r[:number],0.001)
end

def test_intermediate_output_i241
  r = spreadsheet.intermediate_output_i241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8004.602512493475,r[:number],0.001)
end

def test_intermediate_output_j241
  r = spreadsheet.intermediate_output_j241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9096.613065227008,r[:number],0.001)
end

def test_intermediate_output_k241
  r = spreadsheet.intermediate_output_k241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10188.62361796054,r[:number],0.001)
end

def test_intermediate_output_l241
  r = spreadsheet.intermediate_output_l241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11280.634170694073,r[:number],0.001)
end

def test_intermediate_output_m241
  r = spreadsheet.intermediate_output_m241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12372.644723427606,r[:number],0.001)
end

def test_intermediate_output_n241
  r = spreadsheet.intermediate_output_n241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13464.655276161138,r[:number],0.001)
end

def test_intermediate_output_o241
  r = spreadsheet.intermediate_output_o241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14556.665828894671,r[:number],0.001)
end

def test_intermediate_output_p241
  r = spreadsheet.intermediate_output_p241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15648.676381628204,r[:number],0.001)
end

def test_intermediate_output_q241
  r = spreadsheet.intermediate_output_q241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16740.68693436174,r[:number],0.001)
end

def test_intermediate_output_c242
  r = spreadsheet.intermediate_output_c242
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d242
  r = spreadsheet.intermediate_output_d242
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h242
  r = spreadsheet.intermediate_output_h242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.266685142190774,r[:number],0.001)
end

def test_intermediate_output_i242
  r = spreadsheet.intermediate_output_i242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.99943367286665,r[:number],0.001)
end

def test_intermediate_output_j242
  r = spreadsheet.intermediate_output_j242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.22299177401593,r[:number],0.001)
end

def test_intermediate_output_k242
  r = spreadsheet.intermediate_output_k242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.6369582485937,r[:number],0.001)
end

def test_intermediate_output_l242
  r = spreadsheet.intermediate_output_l242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.613021339389,r[:number],0.001)
end

def test_intermediate_output_m242
  r = spreadsheet.intermediate_output_m242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.04693754034374,r[:number],0.001)
end

def test_intermediate_output_n242
  r = spreadsheet.intermediate_output_n242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.83513175011493,r[:number],0.001)
end

def test_intermediate_output_o242
  r = spreadsheet.intermediate_output_o242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.897459529683765,r[:number],0.001)
end

def test_intermediate_output_p242
  r = spreadsheet.intermediate_output_p242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.17190663989083,r[:number],0.001)
end

def test_intermediate_output_q242
  r = spreadsheet.intermediate_output_q242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.61048764462102,r[:number],0.001)
end

def test_intermediate_output_c244
  r = spreadsheet.intermediate_output_c244
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous Hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h244
  r = spreadsheet.intermediate_output_h244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24628.69337673878,r[:number],0.001)
end

def test_intermediate_output_i244
  r = spreadsheet.intermediate_output_i244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24816.75843551269,r[:number],0.001)
end

def test_intermediate_output_j244
  r = spreadsheet.intermediate_output_j244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43889.54344368764,r[:number],0.001)
end

def test_intermediate_output_k244
  r = spreadsheet.intermediate_output_k244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62806.07244728532,r[:number],0.001)
end

def test_intermediate_output_l244
  r = spreadsheet.intermediate_output_l244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82511.443289171,r[:number],0.001)
end

def test_intermediate_output_m244
  r = spreadsheet.intermediate_output_m244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102568.7063241658,r[:number],0.001)
end

def test_intermediate_output_n244
  r = spreadsheet.intermediate_output_n244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123052.53573517731,r[:number],0.001)
end

def test_intermediate_output_o244
  r = spreadsheet.intermediate_output_o244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145530.70536134404,r[:number],0.001)
end

def test_intermediate_output_p244
  r = spreadsheet.intermediate_output_p244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168894.21873343864,r[:number],0.001)
end

def test_intermediate_output_q244
  r = spreadsheet.intermediate_output_q244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192593.8437095409,r[:number],0.001)
end

def test_intermediate_output_c245
  r = spreadsheet.intermediate_output_c245
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d245
  r = spreadsheet.intermediate_output_d245
  assert_equal(:ExcelString,r[:type])
  assert_equal("Share of Biogas to total gaseous hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h245
  r = spreadsheet.intermediate_output_h245
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i245
  r = spreadsheet.intermediate_output_i245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02357850067630991,r[:number],0.001)
end

def test_intermediate_output_j245
  r = spreadsheet.intermediate_output_j245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.013332149519994903,r[:number],0.001)
end

def test_intermediate_output_k245
  r = spreadsheet.intermediate_output_k245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.009316646189692558,r[:number],0.001)
end

def test_intermediate_output_l245
  r = spreadsheet.intermediate_output_l245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0076168257860467145,r[:number],0.001)
end

def test_intermediate_output_m245
  r = spreadsheet.intermediate_output_m245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.006127359029981411,r[:number],0.001)
end

def test_intermediate_output_n245
  r = spreadsheet.intermediate_output_n245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.005107373733780157,r[:number],0.001)
end

def test_intermediate_output_o245
  r = spreadsheet.intermediate_output_o245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.004318506443904207,r[:number],0.001)
end

def test_intermediate_output_p245
  r = spreadsheet.intermediate_output_p245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0037211178310418962,r[:number],0.001)
end

def test_intermediate_output_q245
  r = spreadsheet.intermediate_output_q245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0032632158784717934,r[:number],0.001)
end

def test_intermediate_output_c246
  r = spreadsheet.intermediate_output_c246
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d246
  r = spreadsheet.intermediate_output_d246
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h246
  r = spreadsheet.intermediate_output_h246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3464.114504225812,r[:number],0.001)
end

def test_intermediate_output_i246
  r = spreadsheet.intermediate_output_i246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3465.6333111508247,r[:number],0.001)
end

def test_intermediate_output_j246
  r = spreadsheet.intermediate_output_j246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6156.389646889493,r[:number],0.001)
end

def test_intermediate_output_k246
  r = spreadsheet.intermediate_output_k246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9401.357926430675,r[:number],0.001)
end

def test_intermediate_output_l246
  r = spreadsheet.intermediate_output_l246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13162.345834333943,r[:number],0.001)
end

def test_intermediate_output_m246
  r = spreadsheet.intermediate_output_m246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17404.73595348343,r[:number],0.001)
end

def test_intermediate_output_n246
  r = spreadsheet.intermediate_output_n246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22096.930801033763,r[:number],0.001)
end

def test_intermediate_output_o246
  r = spreadsheet.intermediate_output_o246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27210.20102712285,r[:number],0.001)
end

def test_intermediate_output_p246
  r = spreadsheet.intermediate_output_p246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32718.47807766046,r[:number],0.001)
end

def test_intermediate_output_q246
  r = spreadsheet.intermediate_output_q246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38598.116615930405,r[:number],0.001)
end

def test_intermediate_output_c247
  r = spreadsheet.intermediate_output_c247
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d247
  r = spreadsheet.intermediate_output_d247
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h247
  r = spreadsheet.intermediate_output_h247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1311.111111111111,r[:number],0.001)
end

def test_intermediate_output_i247
  r = spreadsheet.intermediate_output_i247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2105.5555555555557,r[:number],0.001)
end

def test_intermediate_output_j247
  r = spreadsheet.intermediate_output_j247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5855.478374053319,r[:number],0.001)
end

def test_intermediate_output_k247
  r = spreadsheet.intermediate_output_k247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10518.859522164496,r[:number],0.001)
end

def test_intermediate_output_l247
  r = spreadsheet.intermediate_output_l247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16031.969348985824,r[:number],0.001)
end

def test_intermediate_output_m247
  r = spreadsheet.intermediate_output_m247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22336.871808241616,r[:number],0.001)
end

def test_intermediate_output_n247
  r = spreadsheet.intermediate_output_n247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29380.78072443623,r[:number],0.001)
end

def test_intermediate_output_o247
  r = spreadsheet.intermediate_output_o247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37115.50002429106,r[:number],0.001)
end

def test_intermediate_output_p247
  r = spreadsheet.intermediate_output_p247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45496.935427997996,r[:number],0.001)
end

def test_intermediate_output_q247
  r = spreadsheet.intermediate_output_q247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54484.66717906631,r[:number],0.001)
end

def test_intermediate_output_c248
  r = spreadsheet.intermediate_output_c248
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d248
  r = spreadsheet.intermediate_output_d248
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h248
  r = spreadsheet.intermediate_output_h248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7034.884518216515,r[:number],0.001)
end

def test_intermediate_output_i248
  r = spreadsheet.intermediate_output_i248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7034.884518216515,r[:number],0.001)
end

def test_intermediate_output_j248
  r = spreadsheet.intermediate_output_j248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8120.415645094587,r[:number],0.001)
end

def test_intermediate_output_k248
  r = spreadsheet.intermediate_output_k248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9205.946771972658,r[:number],0.001)
end

def test_intermediate_output_l248
  r = spreadsheet.intermediate_output_l248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10291.47789885073,r[:number],0.001)
end

def test_intermediate_output_m248
  r = spreadsheet.intermediate_output_m248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11377.009025728801,r[:number],0.001)
end

def test_intermediate_output_n248
  r = spreadsheet.intermediate_output_n248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12462.540152606873,r[:number],0.001)
end

def test_intermediate_output_o248
  r = spreadsheet.intermediate_output_o248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13548.071279484944,r[:number],0.001)
end

def test_intermediate_output_p248
  r = spreadsheet.intermediate_output_p248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14633.602406363016,r[:number],0.001)
end

def test_intermediate_output_q248
  r = spreadsheet.intermediate_output_q248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15719.133533241084,r[:number],0.001)
end

def test_intermediate_output_c249
  r = spreadsheet.intermediate_output_c249
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d249
  r = spreadsheet.intermediate_output_d249
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydrocarbon power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h249
  r = spreadsheet.intermediate_output_h249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11336.947860696517,r[:number],0.001)
end

def test_intermediate_output_i249
  r = spreadsheet.intermediate_output_i249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10733.876248961675,r[:number],0.001)
end

def test_intermediate_output_j249
  r = spreadsheet.intermediate_output_j249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21433.775257945064,r[:number],0.001)
end

def test_intermediate_output_k249
  r = spreadsheet.intermediate_output_k249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30515.330129445214,r[:number],0.001)
end

def test_intermediate_output_l249
  r = spreadsheet.intermediate_output_l249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39019.098891922426,r[:number],0.001)
end

def test_intermediate_output_m249
  r = spreadsheet.intermediate_output_m249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46600.84805199087,r[:number],0.001)
end

def test_intermediate_output_n249
  r = spreadsheet.intermediate_output_n249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53419.79708681667,r[:number],0.001)
end

def test_intermediate_output_o249
  r = spreadsheet.intermediate_output_o249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61120.77035392301,r[:number],0.001)
end

def test_intermediate_output_p249
  r = spreadsheet.intermediate_output_p249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68665.03103733546,r[:number],0.001)
end

def test_intermediate_output_q249
  r = spreadsheet.intermediate_output_q249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75567.48702703796,r[:number],0.001)
end

def test_intermediate_output_c250
  r = spreadsheet.intermediate_output_c250
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d250
  r = spreadsheet.intermediate_output_d250
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h250
  r = spreadsheet.intermediate_output_h250
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i250
  r = spreadsheet.intermediate_output_i250
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j250
  r = spreadsheet.intermediate_output_j250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.781025862068966,r[:number],0.001)
end

def test_intermediate_output_k250
  r = spreadsheet.intermediate_output_k250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.683042372881357,r[:number],0.001)
end

def test_intermediate_output_l250
  r = spreadsheet.intermediate_output_l250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.588325,r[:number],0.001)
end

def test_intermediate_output_m250
  r = spreadsheet.intermediate_output_m250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4967131147540975,r[:number],0.001)
end

def test_intermediate_output_n250
  r = spreadsheet.intermediate_output_n250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.408056451612903,r[:number],0.001)
end

def test_intermediate_output_o250
  r = spreadsheet.intermediate_output_o250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.322214285714286,r[:number],0.001)
end

def test_intermediate_output_p250
  r = spreadsheet.intermediate_output_p250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.2390546874999995,r[:number],0.001)
end

def test_intermediate_output_q250
  r = spreadsheet.intermediate_output_q250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.158453846153846,r[:number],0.001)
end

def test_intermediate_output_d252
  r = spreadsheet.intermediate_output_d252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio type",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e252
  r = spreadsheet.intermediate_output_e252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Column1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f252
  r = spreadsheet.intermediate_output_f252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Column2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g252
  r = spreadsheet.intermediate_output_g252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Column3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h252
  r = spreadsheet.intermediate_output_h252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i252
  r = spreadsheet.intermediate_output_i252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j252
  r = spreadsheet.intermediate_output_j252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k252
  r = spreadsheet.intermediate_output_k252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l252
  r = spreadsheet.intermediate_output_l252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m252
  r = spreadsheet.intermediate_output_m252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n252
  r = spreadsheet.intermediate_output_n252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o252
  r = spreadsheet.intermediate_output_o252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p252
  r = spreadsheet.intermediate_output_p252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q252
  r = spreadsheet.intermediate_output_q252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d253
  r = spreadsheet.intermediate_output_d253
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h253
  r = spreadsheet.intermediate_output_h253
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i253
  r = spreadsheet.intermediate_output_i253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08292965266309539,r[:number],0.001)
end

def test_intermediate_output_j253
  r = spreadsheet.intermediate_output_j253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.04785719190755459,r[:number],0.001)
end

def test_intermediate_output_k253
  r = spreadsheet.intermediate_output_k253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.03467366239470647,r[:number],0.001)
end

def test_intermediate_output_l253
  r = spreadsheet.intermediate_output_l253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02970816419538121,r[:number],0.001)
end

def test_intermediate_output_m253
  r = spreadsheet.intermediate_output_m253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02620286994428335,r[:number],0.001)
end

def test_intermediate_output_n253
  r = spreadsheet.intermediate_output_n253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02397593590399705,r[:number],0.001)
end

def test_intermediate_output_o253
  r = spreadsheet.intermediate_output_o253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.021828858953126515,r[:number],0.001)
end

def test_intermediate_output_p253
  r = spreadsheet.intermediate_output_p253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02007755706186089,r[:number],0.001)
end

def test_intermediate_output_q253
  r = spreadsheet.intermediate_output_q253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.018832813821653468,r[:number],0.001)
end

def test_intermediate_output_d254
  r = spreadsheet.intermediate_output_d254
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h254
  r = spreadsheet.intermediate_output_h254
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i254
  r = spreadsheet.intermediate_output_i254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.003199274557782481,r[:number],0.001)
end

def test_intermediate_output_j254
  r = spreadsheet.intermediate_output_j254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0022261526638671586,r[:number],0.001)
end

def test_intermediate_output_k254
  r = spreadsheet.intermediate_output_k254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0017138874693450271,r[:number],0.001)
end

def test_intermediate_output_l254
  r = spreadsheet.intermediate_output_l254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0015853139122089265,r[:number],0.001)
end

def test_intermediate_output_m254
  r = spreadsheet.intermediate_output_m254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0013738078930710625,r[:number],0.001)
end

def test_intermediate_output_n254
  r = spreadsheet.intermediate_output_n254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0012270278207532131,r[:number],0.001)
end

def test_intermediate_output_o254
  r = spreadsheet.intermediate_output_o254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0011174463074748425,r[:number],0.001)
end

def test_intermediate_output_p254
  r = spreadsheet.intermediate_output_p254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0010614391319248178,r[:number],0.001)
end

def test_intermediate_output_q254
  r = spreadsheet.intermediate_output_q254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0009860835286703057,r[:number],0.001)
end

def test_intermediate_output_d255
  r = spreadsheet.intermediate_output_d255
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h255
  r = spreadsheet.intermediate_output_h255
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i255
  r = spreadsheet.intermediate_output_i255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.02357850067630991,r[:number],0.001)
end

def test_intermediate_output_j255
  r = spreadsheet.intermediate_output_j255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.013332149519994903,r[:number],0.001)
end

def test_intermediate_output_k255
  r = spreadsheet.intermediate_output_k255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.009316646189692558,r[:number],0.001)
end

def test_intermediate_output_l255
  r = spreadsheet.intermediate_output_l255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0076168257860467145,r[:number],0.001)
end

def test_intermediate_output_m255
  r = spreadsheet.intermediate_output_m255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.006127359029981411,r[:number],0.001)
end

def test_intermediate_output_n255
  r = spreadsheet.intermediate_output_n255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.005107373733780157,r[:number],0.001)
end

def test_intermediate_output_o255
  r = spreadsheet.intermediate_output_o255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.004318506443904207,r[:number],0.001)
end

def test_intermediate_output_p255
  r = spreadsheet.intermediate_output_p255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0037211178310418962,r[:number],0.001)
end

def test_intermediate_output_q255
  r = spreadsheet.intermediate_output_q255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0032632158784717934,r[:number],0.001)
end

def test_intermediate_output_b257
  r = spreadsheet.intermediate_output_b257
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Generation Emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c260
  r = spreadsheet.intermediate_output_c260
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions from Electricity Generation, exlcuding CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h260
  r = spreadsheet.intermediate_output_h260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i260
  r = spreadsheet.intermediate_output_i260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j260
  r = spreadsheet.intermediate_output_j260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k260
  r = spreadsheet.intermediate_output_k260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l260
  r = spreadsheet.intermediate_output_l260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m260
  r = spreadsheet.intermediate_output_m260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n260
  r = spreadsheet.intermediate_output_n260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o260
  r = spreadsheet.intermediate_output_o260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p260
  r = spreadsheet.intermediate_output_p260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q260
  r = spreadsheet.intermediate_output_q260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c261
  r = spreadsheet.intermediate_output_c261
  assert_equal(:ExcelString,r[:type])
  assert_equal("Power Generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h261
  r = spreadsheet.intermediate_output_h261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10949.669618120157,r[:number],0.001)
end

def test_intermediate_output_i261
  r = spreadsheet.intermediate_output_i261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10573.877120697096,r[:number],0.001)
end

def test_intermediate_output_j261
  r = spreadsheet.intermediate_output_j261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21032.452034669663,r[:number],0.001)
end

def test_intermediate_output_k261
  r = spreadsheet.intermediate_output_k261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30301.580599470693,r[:number],0.001)
end

def test_intermediate_output_l261
  r = spreadsheet.intermediate_output_l261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38267.13816597656,r[:number],0.001)
end

def test_intermediate_output_m261
  r = spreadsheet.intermediate_output_m261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44291.64285258304,r[:number],0.001)
end

def test_intermediate_output_n261
  r = spreadsheet.intermediate_output_n261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49181.25931390139,r[:number],0.001)
end

def test_intermediate_output_o261
  r = spreadsheet.intermediate_output_o261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54976.35297584794,r[:number],0.001)
end

def test_intermediate_output_p261
  r = spreadsheet.intermediate_output_p261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60745.698886791935,r[:number],0.001)
end

def test_intermediate_output_q261
  r = spreadsheet.intermediate_output_q261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65806.89529445692,r[:number],0.001)
end

def test_intermediate_output_c262
  r = spreadsheet.intermediate_output_c262
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS in Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h262
  r = spreadsheet.intermediate_output_h262
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i262
  r = spreadsheet.intermediate_output_i262
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j262
  r = spreadsheet.intermediate_output_j262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8350150827586207,r[:number],0.001)
end

def test_intermediate_output_k262
  r = spreadsheet.intermediate_output_k262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.678458816949152,r[:number],0.001)
end

def test_intermediate_output_l262
  r = spreadsheet.intermediate_output_l262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.538048685217391,r[:number],0.001)
end

def test_intermediate_output_m262
  r = spreadsheet.intermediate_output_m262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.403460266271363,r[:number],0.001)
end

def test_intermediate_output_n262
  r = spreadsheet.intermediate_output_n262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.274336960887095,r[:number],0.001)
end

def test_intermediate_output_o262
  r = spreadsheet.intermediate_output_o262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.260121498214285,r[:number],0.001)
end

def test_intermediate_output_p262
  r = spreadsheet.intermediate_output_p262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.136579599107142,r[:number],0.001)
end

def test_intermediate_output_q262
  r = spreadsheet.intermediate_output_q262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.017852256923077,r[:number],0.001)
end

def test_intermediate_output_c263
  r = spreadsheet.intermediate_output_c263
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Gas Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h263
  r = spreadsheet.intermediate_output_h263
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i263
  r = spreadsheet.intermediate_output_i263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-46.762065544136014,r[:number],0.001)
end

def test_intermediate_output_j263
  r = spreadsheet.intermediate_output_j263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-52.79827881778949,r[:number],0.001)
end

def test_intermediate_output_k263
  r = spreadsheet.intermediate_output_k263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-52.52893460846118,r[:number],0.001)
end

def test_intermediate_output_l263
  r = spreadsheet.intermediate_output_l263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-54.91262119940819,r[:number],0.001)
end

def test_intermediate_output_m263
  r = spreadsheet.intermediate_output_m263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-52.757968636108615,r[:number],0.001)
end

def test_intermediate_output_n263
  r = spreadsheet.intermediate_output_n263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-50.41047498578683,r[:number],0.001)
end

def test_intermediate_output_o263
  r = spreadsheet.intermediate_output_o263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-48.76893909404699,r[:number],0.001)
end

def test_intermediate_output_p263
  r = spreadsheet.intermediate_output_p263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-47.20956077892199,r[:number],0.001)
end

def test_intermediate_output_q263
  r = spreadsheet.intermediate_output_q263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-45.56188699082288,r[:number],0.001)
end

def test_intermediate_output_c264
  r = spreadsheet.intermediate_output_c264
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Solid BM Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h264
  r = spreadsheet.intermediate_output_h264
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i264
  r = spreadsheet.intermediate_output_i264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-659.1545065783845,r[:number],0.001)
end

def test_intermediate_output_j264
  r = spreadsheet.intermediate_output_j264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-784.3317305033484,r[:number],0.001)
end

def test_intermediate_output_k264
  r = spreadsheet.intermediate_output_k264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-833.4157312967343,r[:number],0.001)
end

def test_intermediate_output_l264
  r = spreadsheet.intermediate_output_l264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-906.8804239520838,r[:number],0.001)
end

def test_intermediate_output_m264
  r = spreadsheet.intermediate_output_m264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-921.2821099863799,r[:number],0.001)
end

def test_intermediate_output_n264
  r = spreadsheet.intermediate_output_n264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-932.0972612048452,r[:number],0.001)
end

def test_intermediate_output_o264
  r = spreadsheet.intermediate_output_o264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-945.2729722995158,r[:number],0.001)
end

def test_intermediate_output_p264
  r = spreadsheet.intermediate_output_p264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-958.2623781576683,r[:number],0.001)
end

def test_intermediate_output_q264
  r = spreadsheet.intermediate_output_q264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-970.0110701997617,r[:number],0.001)
end

def test_intermediate_output_c265
  r = spreadsheet.intermediate_output_c265
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Solid HC CCS Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h265
  r = spreadsheet.intermediate_output_h265
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i265
  r = spreadsheet.intermediate_output_i265
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j265
  r = spreadsheet.intermediate_output_j265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.10102262727691395,r[:number],0.001)
end

def test_intermediate_output_k265
  r = spreadsheet.intermediate_output_k265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.2236461093983996,r[:number],0.001)
end

def test_intermediate_output_l265
  r = spreadsheet.intermediate_output_l265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.18745288500776877,r[:number],0.001)
end

def test_intermediate_output_m265
  r = spreadsheet.intermediate_output_m265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.16181737370443544,r[:number],0.001)
end

def test_intermediate_output_n265
  r = spreadsheet.intermediate_output_n265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.14498012721825,r[:number],0.001)
end

def test_intermediate_output_o265
  r = spreadsheet.intermediate_output_o265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.13199696398612407,r[:number],0.001)
end

def test_intermediate_output_p265
  r = spreadsheet.intermediate_output_p265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.11892931947312901,r[:number],0.001)
end

def test_intermediate_output_q265
  r = spreadsheet.intermediate_output_q265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.10932496668688216,r[:number],0.001)
end

def test_intermediate_output_c266
  r = spreadsheet.intermediate_output_c266
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Gas CCS Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h266
  r = spreadsheet.intermediate_output_h266
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i266
  r = spreadsheet.intermediate_output_i266
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j266
  r = spreadsheet.intermediate_output_j266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.014240525135917304,r[:number],0.001)
end

def test_intermediate_output_k266
  r = spreadsheet.intermediate_output_k266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.009782760334424285,r[:number],0.001)
end

def test_intermediate_output_l266
  r = spreadsheet.intermediate_output_l266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.007864599198309773,r[:number],0.001)
end

def test_intermediate_output_m266
  r = spreadsheet.intermediate_output_m266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.006222964392972983,r[:number],0.001)
end

def test_intermediate_output_n266
  r = spreadsheet.intermediate_output_n266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.005103401909833071,r[:number],0.001)
end

def test_intermediate_output_o266
  r = spreadsheet.intermediate_output_o266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.00424665367995983,r[:number],0.001)
end

def test_intermediate_output_p266
  r = spreadsheet.intermediate_output_p266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.0036020295477496244,r[:number],0.001)
end

def test_intermediate_output_q266
  r = spreadsheet.intermediate_output_q266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.0031101853512972336,r[:number],0.001)
end

def test_intermediate_output_c267
  r = spreadsheet.intermediate_output_c267
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Emissions from Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h267
  r = spreadsheet.intermediate_output_h267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10949.669618120157,r[:number],0.001)
end

def test_intermediate_output_i267
  r = spreadsheet.intermediate_output_i267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9867.960548574576,r[:number],0.001)
end

def test_intermediate_output_j267
  r = spreadsheet.intermediate_output_j267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20192.371747113353,r[:number],0.001)
end

def test_intermediate_output_k267
  r = spreadsheet.intermediate_output_k267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29408.724045878815,r[:number],0.001)
end

def test_intermediate_output_l267
  r = spreadsheet.intermediate_output_l267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37298.61175465565,r[:number],0.001)
end

def test_intermediate_output_m267
  r = spreadsheet.intermediate_output_m267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43311.03127335618,r[:number],0.001)
end

def test_intermediate_output_n267
  r = spreadsheet.intermediate_output_n267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48192.327157220745,r[:number],0.001)
end

def test_intermediate_output_o267
  r = spreadsheet.intermediate_output_o267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53975.91469933849,r[:number],0.001)
end

def test_intermediate_output_p267
  r = spreadsheet.intermediate_output_p267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59733.96783690721,r[:number],0.001)
end

def test_intermediate_output_q267
  r = spreadsheet.intermediate_output_q267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64785.192049857375,r[:number],0.001)
end

def test_intermediate_output_c269
  r = spreadsheet.intermediate_output_c269
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions reclassified",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h269
  r = spreadsheet.intermediate_output_h269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i269
  r = spreadsheet.intermediate_output_i269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j269
  r = spreadsheet.intermediate_output_j269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k269
  r = spreadsheet.intermediate_output_k269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l269
  r = spreadsheet.intermediate_output_l269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m269
  r = spreadsheet.intermediate_output_m269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n269
  r = spreadsheet.intermediate_output_n269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o269
  r = spreadsheet.intermediate_output_o269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p269
  r = spreadsheet.intermediate_output_p269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q269
  r = spreadsheet.intermediate_output_q269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c270
  r = spreadsheet.intermediate_output_c270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.0,r[:number],0.001)
end

def test_intermediate_output_d270
  r = spreadsheet.intermediate_output_d270
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h270
  r = spreadsheet.intermediate_output_h270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10949.669618120157,r[:number],0.001)
end

def test_intermediate_output_i270
  r = spreadsheet.intermediate_output_i270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10573.877120697096,r[:number],0.001)
end

def test_intermediate_output_j270
  r = spreadsheet.intermediate_output_j270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21032.452034669663,r[:number],0.001)
end

def test_intermediate_output_k270
  r = spreadsheet.intermediate_output_k270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30301.580599470693,r[:number],0.001)
end

def test_intermediate_output_l270
  r = spreadsheet.intermediate_output_l270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38267.13816597656,r[:number],0.001)
end

def test_intermediate_output_m270
  r = spreadsheet.intermediate_output_m270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44291.64285258304,r[:number],0.001)
end

def test_intermediate_output_n270
  r = spreadsheet.intermediate_output_n270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49181.25931390139,r[:number],0.001)
end

def test_intermediate_output_o270
  r = spreadsheet.intermediate_output_o270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54976.35297584794,r[:number],0.001)
end

def test_intermediate_output_p270
  r = spreadsheet.intermediate_output_p270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60745.698886791935,r[:number],0.001)
end

def test_intermediate_output_q270
  r = spreadsheet.intermediate_output_q270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65806.89529445692,r[:number],0.001)
end

def test_intermediate_output_c271
  r = spreadsheet.intermediate_output_c271
  assert_equal(:ExcelString,r[:type])
  assert_equal("X2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d271
  r = spreadsheet.intermediate_output_d271
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy credit",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h271
  r = spreadsheet.intermediate_output_h271
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i271
  r = spreadsheet.intermediate_output_i271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-705.9165721225205,r[:number],0.001)
end

def test_intermediate_output_j271
  r = spreadsheet.intermediate_output_j271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-837.2452724735508,r[:number],0.001)
end

def test_intermediate_output_k271
  r = spreadsheet.intermediate_output_k271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-886.1780947749284,r[:number],0.001)
end

def test_intermediate_output_l271
  r = spreadsheet.intermediate_output_l271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-961.9883626356981,r[:number],0.001)
end

def test_intermediate_output_m271
  r = spreadsheet.intermediate_output_m271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-974.2081189605858,r[:number],0.001)
end

def test_intermediate_output_n271
  r = spreadsheet.intermediate_output_n271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-982.65781971976,r[:number],0.001)
end

def test_intermediate_output_o271
  r = spreadsheet.intermediate_output_o271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-994.1781550112289,r[:number],0.001)
end

def test_intermediate_output_p271
  r = spreadsheet.intermediate_output_p271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1005.5944702856112,r[:number],0.001)
end

def test_intermediate_output_q271
  r = spreadsheet.intermediate_output_q271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1015.6853923426228,r[:number],0.001)
end

def test_intermediate_output_c272
  r = spreadsheet.intermediate_output_c272
  assert_equal(:ExcelString,r[:type])
  assert_equal("X3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d272
  r = spreadsheet.intermediate_output_d272
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon capture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h272
  r = spreadsheet.intermediate_output_h272
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i272
  r = spreadsheet.intermediate_output_i272
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j272
  r = spreadsheet.intermediate_output_j272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8350150827586207,r[:number],0.001)
end

def test_intermediate_output_k272
  r = spreadsheet.intermediate_output_k272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.678458816949152,r[:number],0.001)
end

def test_intermediate_output_l272
  r = spreadsheet.intermediate_output_l272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.538048685217391,r[:number],0.001)
end

def test_intermediate_output_m272
  r = spreadsheet.intermediate_output_m272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.403460266271363,r[:number],0.001)
end

def test_intermediate_output_n272
  r = spreadsheet.intermediate_output_n272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.274336960887095,r[:number],0.001)
end

def test_intermediate_output_o272
  r = spreadsheet.intermediate_output_o272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.260121498214285,r[:number],0.001)
end

def test_intermediate_output_p272
  r = spreadsheet.intermediate_output_p272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.136579599107142,r[:number],0.001)
end

def test_intermediate_output_q272
  r = spreadsheet.intermediate_output_q272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.017852256923077,r[:number],0.001)
end

def test_intermediate_output_d273
  r = spreadsheet.intermediate_output_d273
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h273
  r = spreadsheet.intermediate_output_h273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10949.669618120157,r[:number],0.001)
end

def test_intermediate_output_i273
  r = spreadsheet.intermediate_output_i273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9867.960548574576,r[:number],0.001)
end

def test_intermediate_output_j273
  r = spreadsheet.intermediate_output_j273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20192.371747113353,r[:number],0.001)
end

def test_intermediate_output_k273
  r = spreadsheet.intermediate_output_k273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29408.724045878815,r[:number],0.001)
end

def test_intermediate_output_l273
  r = spreadsheet.intermediate_output_l273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37298.61175465565,r[:number],0.001)
end

def test_intermediate_output_m273
  r = spreadsheet.intermediate_output_m273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43311.03127335618,r[:number],0.001)
end

def test_intermediate_output_n273
  r = spreadsheet.intermediate_output_n273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48192.327157220745,r[:number],0.001)
end

def test_intermediate_output_o273
  r = spreadsheet.intermediate_output_o273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53975.91469933849,r[:number],0.001)
end

def test_intermediate_output_p273
  r = spreadsheet.intermediate_output_p273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59733.96783690721,r[:number],0.001)
end

def test_intermediate_output_q273
  r = spreadsheet.intermediate_output_q273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64785.192049857375,r[:number],0.001)
end

def test_intermediate_output_c275
  r = spreadsheet.intermediate_output_c275
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions intensity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e275
  r = spreadsheet.intermediate_output_e275
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2e/TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h275
  r = spreadsheet.intermediate_output_h275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5546787717569261,r[:number],0.001)
end

def test_intermediate_output_i275
  r = spreadsheet.intermediate_output_i275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5089743199164805,r[:number],0.001)
end

def test_intermediate_output_j275
  r = spreadsheet.intermediate_output_j275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5931645018875351,r[:number],0.001)
end

def test_intermediate_output_k275
  r = spreadsheet.intermediate_output_k275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6134202896465524,r[:number],0.001)
end

def test_intermediate_output_l275
  r = spreadsheet.intermediate_output_l275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6107079241930744,r[:number],0.001)
end

def test_intermediate_output_m275
  r = spreadsheet.intermediate_output_m275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5891137540231871,r[:number],0.001)
end

def test_intermediate_output_n275
  r = spreadsheet.intermediate_output_n275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5645741434237922,r[:number],0.001)
end

def test_intermediate_output_o275
  r = spreadsheet.intermediate_output_o275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5588143436675952,r[:number],0.001)
end

def test_intermediate_output_p275
  r = spreadsheet.intermediate_output_p275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5573419863139731,r[:number],0.001)
end

def test_intermediate_output_q275
  r = spreadsheet.intermediate_output_q275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.552506688740257,r[:number],0.001)
end

def test_intermediate_output_e276
  r = spreadsheet.intermediate_output_e276
  assert_equal(:ExcelString,r[:type])
  assert_equal("gCO2e/KWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h276
  r = spreadsheet.intermediate_output_h276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(554.6787717569262,r[:number],0.001)
end

def test_intermediate_output_i276
  r = spreadsheet.intermediate_output_i276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(508.97431991648045,r[:number],0.001)
end

def test_intermediate_output_j276
  r = spreadsheet.intermediate_output_j276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(593.1645018875352,r[:number],0.001)
end

def test_intermediate_output_k276
  r = spreadsheet.intermediate_output_k276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(613.4202896465524,r[:number],0.001)
end

def test_intermediate_output_l276
  r = spreadsheet.intermediate_output_l276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(610.7079241930744,r[:number],0.001)
end

def test_intermediate_output_m276
  r = spreadsheet.intermediate_output_m276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(589.1137540231871,r[:number],0.001)
end

def test_intermediate_output_n276
  r = spreadsheet.intermediate_output_n276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(564.5741434237922,r[:number],0.001)
end

def test_intermediate_output_o276
  r = spreadsheet.intermediate_output_o276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.8143436675952,r[:number],0.001)
end

def test_intermediate_output_p276
  r = spreadsheet.intermediate_output_p276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557.3419863139732,r[:number],0.001)
end

def test_intermediate_output_q276
  r = spreadsheet.intermediate_output_q276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.506688740257,r[:number],0.001)
end

def test_intermediate_output_c278
  r = spreadsheet.intermediate_output_c278
  assert_equal(:ExcelString,r[:type])
  assert_equal("Note: Emissions from CHP are excluded, while emissions from district heating are included.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_b281
  r = spreadsheet.intermediate_output_b281
  assert_equal(:ExcelString,r[:type])
  assert_equal("Primary supply, format for web-based interface",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c283
  r = spreadsheet.intermediate_output_c283
  assert_equal(:ExcelString,r[:type])
  assert_equal("N.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d283
  r = spreadsheet.intermediate_output_d283
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear fission",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e283
  r = spreadsheet.intermediate_output_e283
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f283
  r = spreadsheet.intermediate_output_f283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.24447683045062,r[:number],0.001)
end

def test_intermediate_output_g283
  r = spreadsheet.intermediate_output_g283
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h283
  r = spreadsheet.intermediate_output_h283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7692.409950777203,r[:number],0.001)
end

def test_intermediate_output_i283
  r = spreadsheet.intermediate_output_i283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8240.833333333336,r[:number],0.001)
end

def test_intermediate_output_j283
  r = spreadsheet.intermediate_output_j283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9178.701685799006,r[:number],0.001)
end

def test_intermediate_output_k283
  r = spreadsheet.intermediate_output_k283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10582.170658400002,r[:number],0.001)
end

def test_intermediate_output_l283
  r = spreadsheet.intermediate_output_l283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11297.59158,r[:number],0.001)
end

def test_intermediate_output_m283
  r = spreadsheet.intermediate_output_m283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11760.703521404163,r[:number],0.001)
end

def test_intermediate_output_n283
  r = spreadsheet.intermediate_output_n283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11970.555889714316,r[:number],0.001)
end

def test_intermediate_output_o283
  r = spreadsheet.intermediate_output_o283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12218.535895963063,r[:number],0.001)
end

def test_intermediate_output_p283
  r = spreadsheet.intermediate_output_p283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12247.836980486622,r[:number],0.001)
end

def test_intermediate_output_q283
  r = spreadsheet.intermediate_output_q283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_intermediate_output_c284
  r = spreadsheet.intermediate_output_c284
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d284
  r = spreadsheet.intermediate_output_d284
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e284
  r = spreadsheet.intermediate_output_e284
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f284
  r = spreadsheet.intermediate_output_f284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5360591477000001,r[:number],0.001)
end

def test_intermediate_output_g284
  r = spreadsheet.intermediate_output_g284
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h284
  r = spreadsheet.intermediate_output_h284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.59528637575556,r[:number],0.001)
end

def test_intermediate_output_i284
  r = spreadsheet.intermediate_output_i284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.38791192880167,r[:number],0.001)
end

def test_intermediate_output_j284
  r = spreadsheet.intermediate_output_j284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.08989818370915,r[:number],0.001)
end

def test_intermediate_output_k284
  r = spreadsheet.intermediate_output_k284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.59220491630188,r[:number],0.001)
end

def test_intermediate_output_l284
  r = spreadsheet.intermediate_output_l284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.0782900934599,r[:number],0.001)
end

def test_intermediate_output_m284
  r = spreadsheet.intermediate_output_m284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(302.72155769891424,r[:number],0.001)
end

def test_intermediate_output_n284
  r = spreadsheet.intermediate_output_n284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.0142767374186,r[:number],0.001)
end

def test_intermediate_output_o284
  r = spreadsheet.intermediate_output_o284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.753353042571,r[:number],0.001)
end

def test_intermediate_output_p284
  r = spreadsheet.intermediate_output_p284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.8173045637367,r[:number],0.001)
end

def test_intermediate_output_q284
  r = spreadsheet.intermediate_output_q284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_c285
  r = spreadsheet.intermediate_output_c285
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d285
  r = spreadsheet.intermediate_output_d285
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e285
  r = spreadsheet.intermediate_output_e285
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f285
  r = spreadsheet.intermediate_output_f285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.978861884782586,r[:number],0.001)
end

def test_intermediate_output_g285
  r = spreadsheet.intermediate_output_g285
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h285
  r = spreadsheet.intermediate_output_h285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.2576375041322,r[:number],0.001)
end

def test_intermediate_output_i285
  r = spreadsheet.intermediate_output_i285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.3790095041322,r[:number],0.001)
end

def test_intermediate_output_j285
  r = spreadsheet.intermediate_output_j285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(675.3090991735538,r[:number],0.001)
end

def test_intermediate_output_k285
  r = spreadsheet.intermediate_output_k285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1253.5562870291576,r[:number],0.001)
end

def test_intermediate_output_l285
  r = spreadsheet.intermediate_output_l285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1645.151947682095,r[:number],0.001)
end

def test_intermediate_output_m285
  r = spreadsheet.intermediate_output_m285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1993.5094345306247,r[:number],0.001)
end

def test_intermediate_output_n285
  r = spreadsheet.intermediate_output_n285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2290.494572715729,r[:number],0.001)
end

def test_intermediate_output_o285
  r = spreadsheet.intermediate_output_o285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2549.2734081312665,r[:number],0.001)
end

def test_intermediate_output_p285
  r = spreadsheet.intermediate_output_p285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2685.88801133876,r[:number],0.001)
end

def test_intermediate_output_q285
  r = spreadsheet.intermediate_output_q285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2824.7156436528894,r[:number],0.001)
end

def test_intermediate_output_c286
  r = spreadsheet.intermediate_output_c286
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d286
  r = spreadsheet.intermediate_output_d286
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e286
  r = spreadsheet.intermediate_output_e286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f286
  r = spreadsheet.intermediate_output_f286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_g286
  r = spreadsheet.intermediate_output_g286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h286
  r = spreadsheet.intermediate_output_h286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i286
  r = spreadsheet.intermediate_output_i286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j286
  r = spreadsheet.intermediate_output_j286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k286
  r = spreadsheet.intermediate_output_k286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l286
  r = spreadsheet.intermediate_output_l286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m286
  r = spreadsheet.intermediate_output_m286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n286
  r = spreadsheet.intermediate_output_n286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o286
  r = spreadsheet.intermediate_output_o286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p286
  r = spreadsheet.intermediate_output_p286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q286
  r = spreadsheet.intermediate_output_q286
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c287
  r = spreadsheet.intermediate_output_c287
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d287
  r = spreadsheet.intermediate_output_d287
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e287
  r = spreadsheet.intermediate_output_e287
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f287
  r = spreadsheet.intermediate_output_f287
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_g287
  r = spreadsheet.intermediate_output_g287
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h287
  r = spreadsheet.intermediate_output_h287
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i287
  r = spreadsheet.intermediate_output_i287
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j287
  r = spreadsheet.intermediate_output_j287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.19723500000000002,r[:number],0.001)
end

def test_intermediate_output_k287
  r = spreadsheet.intermediate_output_k287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9288768981296096,r[:number],0.001)
end

def test_intermediate_output_l287
  r = spreadsheet.intermediate_output_l287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4240733812697526,r[:number],0.001)
end

def test_intermediate_output_m287
  r = spreadsheet.intermediate_output_m287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.920461149446789,r[:number],0.001)
end

def test_intermediate_output_n287
  r = spreadsheet.intermediate_output_n287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.283378034043395,r[:number],0.001)
end

def test_intermediate_output_o287
  r = spreadsheet.intermediate_output_o287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.880144313528724,r[:number],0.001)
end

def test_intermediate_output_p287
  r = spreadsheet.intermediate_output_p287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.6827757959162,r[:number],0.001)
end

def test_intermediate_output_q287
  r = spreadsheet.intermediate_output_q287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_intermediate_output_c288
  r = spreadsheet.intermediate_output_c288
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d288
  r = spreadsheet.intermediate_output_d288
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e288
  r = spreadsheet.intermediate_output_e288
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f288
  r = spreadsheet.intermediate_output_f288
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_g288
  r = spreadsheet.intermediate_output_g288
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h288
  r = spreadsheet.intermediate_output_h288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_intermediate_output_i288
  r = spreadsheet.intermediate_output_i288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_intermediate_output_j288
  r = spreadsheet.intermediate_output_j288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.54344669789631,r[:number],0.001)
end

def test_intermediate_output_k288
  r = spreadsheet.intermediate_output_k288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.21459580595813,r[:number],0.001)
end

def test_intermediate_output_l288
  r = spreadsheet.intermediate_output_l288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.28892750468282,r[:number],0.001)
end

def test_intermediate_output_m288
  r = spreadsheet.intermediate_output_m288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.0449836326222,r[:number],0.001)
end

def test_intermediate_output_n288
  r = spreadsheet.intermediate_output_n288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237.17958335569693,r[:number],0.001)
end

def test_intermediate_output_o288
  r = spreadsheet.intermediate_output_o288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.19663807255284,r[:number],0.001)
end

def test_intermediate_output_p288
  r = spreadsheet.intermediate_output_p288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.0221416680945,r[:number],0.001)
end

def test_intermediate_output_q288
  r = spreadsheet.intermediate_output_q288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_intermediate_output_c289
  r = spreadsheet.intermediate_output_c289
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d289
  r = spreadsheet.intermediate_output_d289
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e289
  r = spreadsheet.intermediate_output_e289
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f289
  r = spreadsheet.intermediate_output_f289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.088394340000001,r[:number],0.001)
end

def test_intermediate_output_g289
  r = spreadsheet.intermediate_output_g289
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h289
  r = spreadsheet.intermediate_output_h289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_intermediate_output_i289
  r = spreadsheet.intermediate_output_i289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_intermediate_output_j289
  r = spreadsheet.intermediate_output_j289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3656.6491221630395,r[:number],0.001)
end

def test_intermediate_output_k289
  r = spreadsheet.intermediate_output_k289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4078.9370920274823,r[:number],0.001)
end

def test_intermediate_output_l289
  r = spreadsheet.intermediate_output_l289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4467.077983986471,r[:number],0.001)
end

def test_intermediate_output_m289
  r = spreadsheet.intermediate_output_m289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4721.321387509617,r[:number],0.001)
end

def test_intermediate_output_n289
  r = spreadsheet.intermediate_output_n289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4972.473207220269,r[:number],0.001)
end

def test_intermediate_output_o289
  r = spreadsheet.intermediate_output_o289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5132.017140903075,r[:number],0.001)
end

def test_intermediate_output_p289
  r = spreadsheet.intermediate_output_p289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5240.990780676136,r[:number],0.001)
end

def test_intermediate_output_q289
  r = spreadsheet.intermediate_output_q289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_intermediate_output_c290
  r = spreadsheet.intermediate_output_c290
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d290
  r = spreadsheet.intermediate_output_d290
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e290
  r = spreadsheet.intermediate_output_e290
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f290
  r = spreadsheet.intermediate_output_f290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number],0.001)
end

def test_intermediate_output_g290
  r = spreadsheet.intermediate_output_g290
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h290
  r = spreadsheet.intermediate_output_h290
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i290
  r = spreadsheet.intermediate_output_i290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_intermediate_output_j290
  r = spreadsheet.intermediate_output_j290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.195800664286665,r[:number],0.001)
end

def test_intermediate_output_k290
  r = spreadsheet.intermediate_output_k290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.529601328544224,r[:number],0.001)
end

def test_intermediate_output_l290
  r = spreadsheet.intermediate_output_l290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.22501960257536,r[:number],0.001)
end

def test_intermediate_output_m290
  r = spreadsheet.intermediate_output_m290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.9316937694213,r[:number],0.001)
end

def test_intermediate_output_n290
  r = spreadsheet.intermediate_output_n290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.23065738478488,r[:number],0.001)
end

def test_intermediate_output_o290
  r = spreadsheet.intermediate_output_o290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.93160038059057,r[:number],0.001)
end

def test_intermediate_output_p290
  r = spreadsheet.intermediate_output_p290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.19058447405627,r[:number],0.001)
end

def test_intermediate_output_q290
  r = spreadsheet.intermediate_output_q290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_c291
  r = spreadsheet.intermediate_output_c291
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.07",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d291
  r = spreadsheet.intermediate_output_d291
  assert_equal(:ExcelString,r[:type])
  assert_equal("Environmental heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e291
  r = spreadsheet.intermediate_output_e291
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f291
  r = spreadsheet.intermediate_output_f291
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_g291
  r = spreadsheet.intermediate_output_g291
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h291
  r = spreadsheet.intermediate_output_h291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_intermediate_output_i291
  r = spreadsheet.intermediate_output_i291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_intermediate_output_j291
  r = spreadsheet.intermediate_output_j291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4076.654569296791,r[:number],0.001)
end

def test_intermediate_output_k291
  r = spreadsheet.intermediate_output_k291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6772.450097198011,r[:number],0.001)
end

def test_intermediate_output_l291
  r = spreadsheet.intermediate_output_l291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9570.488435555515,r[:number],0.001)
end

def test_intermediate_output_m291
  r = spreadsheet.intermediate_output_m291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12470.7695843693,r[:number],0.001)
end

def test_intermediate_output_n291
  r = spreadsheet.intermediate_output_n291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15473.29354363937,r[:number],0.001)
end

def test_intermediate_output_o291
  r = spreadsheet.intermediate_output_o291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18578.06031336572,r[:number],0.001)
end

def test_intermediate_output_p291
  r = spreadsheet.intermediate_output_p291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21785.069893548352,r[:number],0.001)
end

def test_intermediate_output_q291
  r = spreadsheet.intermediate_output_q291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_intermediate_output_d292
  r = spreadsheet.intermediate_output_d292
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e292
  r = spreadsheet.intermediate_output_e292
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f292
  r = spreadsheet.intermediate_output_f292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.50879965682326,r[:number],0.001)
end

def test_intermediate_output_g292
  r = spreadsheet.intermediate_output_g292
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h292
  r = spreadsheet.intermediate_output_h292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_i292
  r = spreadsheet.intermediate_output_i292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_j292
  r = spreadsheet.intermediate_output_j292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_k292
  r = spreadsheet.intermediate_output_k292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_l292
  r = spreadsheet.intermediate_output_l292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_m292
  r = spreadsheet.intermediate_output_m292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_n292
  r = spreadsheet.intermediate_output_n292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_o292
  r = spreadsheet.intermediate_output_o292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_p292
  r = spreadsheet.intermediate_output_p292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_q292
  r = spreadsheet.intermediate_output_q292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_d293
  r = spreadsheet.intermediate_output_d293
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e293
  r = spreadsheet.intermediate_output_e293
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f293
  r = spreadsheet.intermediate_output_f293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.4021773117744,r[:number],0.001)
end

def test_intermediate_output_g293
  r = spreadsheet.intermediate_output_g293
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h293
  r = spreadsheet.intermediate_output_h293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_intermediate_output_i293
  r = spreadsheet.intermediate_output_i293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36103.65238777542,r[:number],0.001)
end

def test_intermediate_output_j293
  r = spreadsheet.intermediate_output_j293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64955.09369514431,r[:number],0.001)
end

def test_intermediate_output_k293
  r = spreadsheet.intermediate_output_k293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90893.48881903531,r[:number],0.001)
end

def test_intermediate_output_l293
  r = spreadsheet.intermediate_output_l293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112555.310867159,r[:number],0.001)
end

def test_intermediate_output_m293
  r = spreadsheet.intermediate_output_m293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128073.43544200294,r[:number],0.001)
end

def test_intermediate_output_n293
  r = spreadsheet.intermediate_output_n293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140289.24782100742,r[:number],0.001)
end

def test_intermediate_output_o293
  r = spreadsheet.intermediate_output_o293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154427.00233436446,r[:number],0.001)
end

def test_intermediate_output_p293
  r = spreadsheet.intermediate_output_p293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168197.78243544442,r[:number],0.001)
end

def test_intermediate_output_q293
  r = spreadsheet.intermediate_output_q293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_intermediate_output_d294
  r = spreadsheet.intermediate_output_d294
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e294
  r = spreadsheet.intermediate_output_e294
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f294
  r = spreadsheet.intermediate_output_f294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.622998738918,r[:number],0.001)
end

def test_intermediate_output_g294
  r = spreadsheet.intermediate_output_g294
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h294
  r = spreadsheet.intermediate_output_h294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41924.201364077846,r[:number],0.001)
end

def test_intermediate_output_i294
  r = spreadsheet.intermediate_output_i294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.35219744025,r[:number],0.001)
end

def test_intermediate_output_j294
  r = spreadsheet.intermediate_output_j294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61374.2718755043,r[:number],0.001)
end

def test_intermediate_output_k294
  r = spreadsheet.intermediate_output_k294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.82421146327,r[:number],0.001)
end

def test_intermediate_output_l294
  r = spreadsheet.intermediate_output_l294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100867.14996464801,r[:number],0.001)
end

def test_intermediate_output_m294
  r = spreadsheet.intermediate_output_m294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120641.80238440383,r[:number],0.001)
end

def test_intermediate_output_n294
  r = spreadsheet.intermediate_output_n294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139819.61922359336,r[:number],0.001)
end

def test_intermediate_output_o294
  r = spreadsheet.intermediate_output_o294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158738.33283816374,r[:number],0.001)
end

def test_intermediate_output_p294
  r = spreadsheet.intermediate_output_p294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178053.0889068639,r[:number],0.001)
end

def test_intermediate_output_q294
  r = spreadsheet.intermediate_output_q294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_intermediate_output_d295
  r = spreadsheet.intermediate_output_d295
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e295
  r = spreadsheet.intermediate_output_e295
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f295
  r = spreadsheet.intermediate_output_f295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1048.9298032969484,r[:number],0.001)
end

def test_intermediate_output_g295
  r = spreadsheet.intermediate_output_g295
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h295
  r = spreadsheet.intermediate_output_h295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.26242773454,r[:number],0.001)
end

def test_intermediate_output_i295
  r = spreadsheet.intermediate_output_i295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24401.403280908125,r[:number],0.001)
end

def test_intermediate_output_j295
  r = spreadsheet.intermediate_output_j295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43607.828038393345,r[:number],0.001)
end

def test_intermediate_output_k295
  r = spreadsheet.intermediate_output_k295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62656.90193214617,r[:number],0.001)
end

def test_intermediate_output_l295
  r = spreadsheet.intermediate_output_l295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82456.70798170843,r[:number],0.001)
end

def test_intermediate_output_m295
  r = spreadsheet.intermediate_output_m295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102654.50883552192,r[:number],0.001)
end

def test_intermediate_output_n295
  r = spreadsheet.intermediate_output_n295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123281.86494314478,r[:number],0.001)
end

def test_intermediate_output_o295
  r = spreadsheet.intermediate_output_o295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145917.53526742704,r[:number],0.001)
end

def test_intermediate_output_p295
  r = spreadsheet.intermediate_output_p295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169444.75279015908,r[:number],0.001)
end

def test_intermediate_output_q295
  r = spreadsheet.intermediate_output_q295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_intermediate_output_d296
  r = spreadsheet.intermediate_output_d296
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Primary Supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e296
  r = spreadsheet.intermediate_output_e296
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_f296
  r = spreadsheet.intermediate_output_f296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2710.526095457397,r[:number],0.001)
end

def test_intermediate_output_g296
  r = spreadsheet.intermediate_output_g296
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h296
  r = spreadsheet.intermediate_output_h296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122823.24646633313,r[:number],0.001)
end

def test_intermediate_output_i296
  r = spreadsheet.intermediate_output_i296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120507.05078940859,r[:number],0.001)
end

def test_intermediate_output_j296
  r = spreadsheet.intermediate_output_j296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192476.9132826869,r[:number],0.001)
end

def test_intermediate_output_k296
  r = spreadsheet.intermediate_output_k296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262643.973192915,r[:number],0.001)
end

def test_intermediate_output_l296
  r = spreadsheet.intermediate_output_l296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(328089.87388798816,r[:number],0.001)
end

def test_intermediate_output_m296
  r = spreadsheet.intermediate_output_m296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387679.04810265946,r[:number],0.001)
end

def test_intermediate_output_n296
  r = spreadsheet.intermediate_output_n296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443624.6359132139,r[:number],0.001)
end

def test_intermediate_output_o296
  r = spreadsheet.intermediate_output_o296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(503243.89775079425,r[:number],0.001)
end

def test_intermediate_output_p296
  r = spreadsheet.intermediate_output_p296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(563506.5014216858,r[:number],0.001)
end

def test_intermediate_output_q296
  r = spreadsheet.intermediate_output_q296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(622258.9355837943,r[:number],0.001)
end

def test_intermediate_output_d297
  r = spreadsheet.intermediate_output_d297
  assert_equal(:ExcelString,r[:type])
  assert_equal("Imported energy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f297
  r = spreadsheet.intermediate_output_f297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(818.936866535737,r[:number],0.001)
end

def test_intermediate_output_g297
  r = spreadsheet.intermediate_output_g297
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h297
  r = spreadsheet.intermediate_output_h297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112261.78295915089,r[:number],0.001)
end

def test_intermediate_output_i297
  r = spreadsheet.intermediate_output_i297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109024.8523507358,r[:number],0.001)
end

def test_intermediate_output_j297
  r = spreadsheet.intermediate_output_j297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177863.44466884856,r[:number],0.001)
end

def test_intermediate_output_k297
  r = spreadsheet.intermediate_output_k297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(244429.075626362,r[:number],0.001)
end

def test_intermediate_output_l297
  r = spreadsheet.intermediate_output_l297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306423.32923631364,r[:number],0.001)
end

def test_intermediate_output_m297
  r = spreadsheet.intermediate_output_m297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(362640.58881408384,r[:number],0.001)
end

def test_intermediate_output_n297
  r = spreadsheet.intermediate_output_n297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(415061.58267952845,r[:number],0.001)
end

def test_intermediate_output_o297
  r = spreadsheet.intermediate_output_o297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(471172.1453035247,r[:number],0.001)
end

def test_intermediate_output_p297
  r = spreadsheet.intermediate_output_p297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(527976.2220023391,r[:number],0.001)
end

def test_intermediate_output_q297
  r = spreadsheet.intermediate_output_q297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(583179.7400926156,r[:number],0.001)
end

def test_intermediate_output_p298
  r = spreadsheet.intermediate_output_p298
  assert_equal(:ExcelString,r[:type])
  assert_equal("% imported",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q298
  r = spreadsheet.intermediate_output_q298
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9371978556571227,r[:number],0.001)
end

def test_intermediate_output_d299
  r = spreadsheet.intermediate_output_d299
  assert_equal(:ExcelString,r[:type])
  assert_equal("Primary demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f299
  r = spreadsheet.intermediate_output_f299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2715.1003243745527,r[:number],0.001)
end

def test_intermediate_output_g299
  r = spreadsheet.intermediate_output_g299
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h299
  r = spreadsheet.intermediate_output_h299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129414.26602334525,r[:number],0.001)
end

def test_intermediate_output_i299
  r = spreadsheet.intermediate_output_i299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130453.93090636765,r[:number],0.001)
end

def test_intermediate_output_j299
  r = spreadsheet.intermediate_output_j299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219378.9176637194,r[:number],0.001)
end

def test_intermediate_output_k299
  r = spreadsheet.intermediate_output_k299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306284.16533139674,r[:number],0.001)
end

def test_intermediate_output_l299
  r = spreadsheet.intermediate_output_l299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388225.85931552853,r[:number],0.001)
end

def test_intermediate_output_m299
  r = spreadsheet.intermediate_output_m299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464036.44124682265,r[:number],0.001)
end

def test_intermediate_output_n299
  r = spreadsheet.intermediate_output_n299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(535899.6327045965,r[:number],0.001)
end

def test_intermediate_output_o299
  r = spreadsheet.intermediate_output_o299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(611126.73478485,r[:number],0.001)
end

def test_intermediate_output_p299
  r = spreadsheet.intermediate_output_p299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(686668.6037751004,r[:number],0.001)
end

def test_intermediate_output_q299
  r = spreadsheet.intermediate_output_q299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(754602.5053407296,r[:number],0.001)
end

def test_intermediate_output_b302
  r = spreadsheet.intermediate_output_b302
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity, format for web-based interface",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c304
  r = spreadsheet.intermediate_output_c304
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h304
  r = spreadsheet.intermediate_output_h304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_intermediate_output_i304
  r = spreadsheet.intermediate_output_i304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j304
  r = spreadsheet.intermediate_output_j304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k304
  r = spreadsheet.intermediate_output_k304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l304
  r = spreadsheet.intermediate_output_l304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m304
  r = spreadsheet.intermediate_output_m304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n304
  r = spreadsheet.intermediate_output_n304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o304
  r = spreadsheet.intermediate_output_o304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p304
  r = spreadsheet.intermediate_output_p304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q304
  r = spreadsheet.intermediate_output_q304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_r304
  r = spreadsheet.intermediate_output_r304
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c306
  r = spreadsheet.intermediate_output_c306
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d306
  r = spreadsheet.intermediate_output_d306
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production for Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h306
  r = spreadsheet.intermediate_output_h306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i306
  r = spreadsheet.intermediate_output_i306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j306
  r = spreadsheet.intermediate_output_j306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k306
  r = spreadsheet.intermediate_output_k306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l306
  r = spreadsheet.intermediate_output_l306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m306
  r = spreadsheet.intermediate_output_m306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n306
  r = spreadsheet.intermediate_output_n306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o306
  r = spreadsheet.intermediate_output_o306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p306
  r = spreadsheet.intermediate_output_p306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q306
  r = spreadsheet.intermediate_output_q306
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c307
  r = spreadsheet.intermediate_output_c307
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d307
  r = spreadsheet.intermediate_output_d307
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h307
  r = spreadsheet.intermediate_output_h307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i307
  r = spreadsheet.intermediate_output_i307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j307
  r = spreadsheet.intermediate_output_j307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k307
  r = spreadsheet.intermediate_output_k307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l307
  r = spreadsheet.intermediate_output_l307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m307
  r = spreadsheet.intermediate_output_m307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n307
  r = spreadsheet.intermediate_output_n307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o307
  r = spreadsheet.intermediate_output_o307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p307
  r = spreadsheet.intermediate_output_p307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q307
  r = spreadsheet.intermediate_output_q307
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c308
  r = spreadsheet.intermediate_output_c308
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d308
  r = spreadsheet.intermediate_output_d308
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h308
  r = spreadsheet.intermediate_output_h308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9682539682539684,r[:number],0.001)
end

def test_intermediate_output_i308
  r = spreadsheet.intermediate_output_i308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.733713709200119,r[:number],0.001)
end

def test_intermediate_output_j308
  r = spreadsheet.intermediate_output_j308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.64099844169351,r[:number],0.001)
end

def test_intermediate_output_k308
  r = spreadsheet.intermediate_output_k308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.48370052389175,r[:number],0.001)
end

def test_intermediate_output_l308
  r = spreadsheet.intermediate_output_l308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.236777946848462,r[:number],0.001)
end

def test_intermediate_output_m308
  r = spreadsheet.intermediate_output_m308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.876573347358968,r[:number],0.001)
end

def test_intermediate_output_n308
  r = spreadsheet.intermediate_output_n308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3938502568465108,r[:number],0.001)
end

def test_intermediate_output_o308
  r = spreadsheet.intermediate_output_o308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7729775925100493,r[:number],0.001)
end

def test_intermediate_output_p308
  r = spreadsheet.intermediate_output_p308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9871820477013273,r[:number],0.001)
end

def test_intermediate_output_q308
  r = spreadsheet.intermediate_output_q308
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c309
  r = spreadsheet.intermediate_output_c309
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d309
  r = spreadsheet.intermediate_output_d309
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h309
  r = spreadsheet.intermediate_output_h309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2016.3125746902588,r[:number],0.001)
end

def test_intermediate_output_i309
  r = spreadsheet.intermediate_output_i309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2016.958875509413,r[:number],0.001)
end

def test_intermediate_output_j309
  r = spreadsheet.intermediate_output_j309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4002.6133407498683,r[:number],0.001)
end

def test_intermediate_output_k309
  r = spreadsheet.intermediate_output_k309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5791.176846620976,r[:number],0.001)
end

def test_intermediate_output_l309
  r = spreadsheet.intermediate_output_l309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7382.672838125651,r[:number],0.001)
end

def test_intermediate_output_m309
  r = spreadsheet.intermediate_output_m309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8777.104909681497,r[:number],0.001)
end

def test_intermediate_output_n309
  r = spreadsheet.intermediate_output_n309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9974.433100507518,r[:number],0.001)
end

def test_intermediate_output_o309
  r = spreadsheet.intermediate_output_o309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10974.622308917347,r[:number],0.001)
end

def test_intermediate_output_p309
  r = spreadsheet.intermediate_output_p309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11777.644325593868,r[:number],0.001)
end

def test_intermediate_output_q309
  r = spreadsheet.intermediate_output_q309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12383.466360618835,r[:number],0.001)
end

def test_intermediate_output_c310
  r = spreadsheet.intermediate_output_c310
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d310
  r = spreadsheet.intermediate_output_d310
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h310
  r = spreadsheet.intermediate_output_h310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1879.861111111111,r[:number],0.001)
end

def test_intermediate_output_i310
  r = spreadsheet.intermediate_output_i310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2271.527777777778,r[:number],0.001)
end

def test_intermediate_output_j310
  r = spreadsheet.intermediate_output_j310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5115.09998326838,r[:number],0.001)
end

def test_intermediate_output_k310
  r = spreadsheet.intermediate_output_k310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7416.11214967557,r[:number],0.001)
end

def test_intermediate_output_l310
  r = spreadsheet.intermediate_output_l310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9193.333701108648,r[:number],0.001)
end

def test_intermediate_output_m310
  r = spreadsheet.intermediate_output_m310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10463.827750394237,r[:number],0.001)
end

def test_intermediate_output_n310
  r = spreadsheet.intermediate_output_n310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11243.140689218824,r[:number],0.001)
end

def test_intermediate_output_o310
  r = spreadsheet.intermediate_output_o310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11545.46704912225,r[:number],0.001)
end

def test_intermediate_output_p310
  r = spreadsheet.intermediate_output_p310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11383.793316406907,r[:number],0.001)
end

def test_intermediate_output_q310
  r = spreadsheet.intermediate_output_q310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10770.023770183341,r[:number],0.001)
end

def test_intermediate_output_c311
  r = spreadsheet.intermediate_output_c311
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d311
  r = spreadsheet.intermediate_output_d311
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h311
  r = spreadsheet.intermediate_output_h311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3105.5555555555557,r[:number],0.001)
end

def test_intermediate_output_i311
  r = spreadsheet.intermediate_output_i311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3105.5555555555557,r[:number],0.001)
end

def test_intermediate_output_j311
  r = spreadsheet.intermediate_output_j311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6961.3792592348145,r[:number],0.001)
end

def test_intermediate_output_k311
  r = spreadsheet.intermediate_output_k311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10817.202962914072,r[:number],0.001)
end

def test_intermediate_output_l311
  r = spreadsheet.intermediate_output_l311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14673.02666659333,r[:number],0.001)
end

def test_intermediate_output_m311
  r = spreadsheet.intermediate_output_m311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18528.85037027259,r[:number],0.001)
end

def test_intermediate_output_n311
  r = spreadsheet.intermediate_output_n311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22384.674073951846,r[:number],0.001)
end

def test_intermediate_output_o311
  r = spreadsheet.intermediate_output_o311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26240.497777631106,r[:number],0.001)
end

def test_intermediate_output_p311
  r = spreadsheet.intermediate_output_p311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30096.321481310366,r[:number],0.001)
end

def test_intermediate_output_q311
  r = spreadsheet.intermediate_output_q311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33952.145184989626,r[:number],0.001)
end

def test_intermediate_output_c312
  r = spreadsheet.intermediate_output_c312
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d312
  r = spreadsheet.intermediate_output_d312
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h312
  r = spreadsheet.intermediate_output_h312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2533.333333333333,r[:number],0.001)
end

def test_intermediate_output_i312
  r = spreadsheet.intermediate_output_i312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2533.333333333333,r[:number],0.001)
end

def test_intermediate_output_j312
  r = spreadsheet.intermediate_output_j312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5926.541251744931,r[:number],0.001)
end

def test_intermediate_output_k312
  r = spreadsheet.intermediate_output_k312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9319.74917015653,r[:number],0.001)
end

def test_intermediate_output_l312
  r = spreadsheet.intermediate_output_l312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12712.95708856813,r[:number],0.001)
end

def test_intermediate_output_m312
  r = spreadsheet.intermediate_output_m312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16106.165006979729,r[:number],0.001)
end

def test_intermediate_output_n312
  r = spreadsheet.intermediate_output_n312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19499.372925391326,r[:number],0.001)
end

def test_intermediate_output_o312
  r = spreadsheet.intermediate_output_o312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22892.580843802923,r[:number],0.001)
end

def test_intermediate_output_p312
  r = spreadsheet.intermediate_output_p312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26285.78876221452,r[:number],0.001)
end

def test_intermediate_output_q312
  r = spreadsheet.intermediate_output_q312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29678.99668062612,r[:number],0.001)
end

def test_intermediate_output_c313
  r = spreadsheet.intermediate_output_c313
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d313
  r = spreadsheet.intermediate_output_d313
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h313
  r = spreadsheet.intermediate_output_h313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7253.926401999999,r[:number],0.001)
end

def test_intermediate_output_i313
  r = spreadsheet.intermediate_output_i313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7253.926401999999,r[:number],0.001)
end

def test_intermediate_output_j313
  r = spreadsheet.intermediate_output_j313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8690.603019549537,r[:number],0.001)
end

def test_intermediate_output_k313
  r = spreadsheet.intermediate_output_k313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10127.279637099075,r[:number],0.001)
end

def test_intermediate_output_l313
  r = spreadsheet.intermediate_output_l313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11563.956254648612,r[:number],0.001)
end

def test_intermediate_output_m313
  r = spreadsheet.intermediate_output_m313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13000.63287219815,r[:number],0.001)
end

def test_intermediate_output_n313
  r = spreadsheet.intermediate_output_n313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14437.309489747688,r[:number],0.001)
end

def test_intermediate_output_o313
  r = spreadsheet.intermediate_output_o313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15873.986107297225,r[:number],0.001)
end

def test_intermediate_output_p313
  r = spreadsheet.intermediate_output_p313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17310.662724846763,r[:number],0.001)
end

def test_intermediate_output_q313
  r = spreadsheet.intermediate_output_q313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18747.339342396306,r[:number],0.001)
end

def test_intermediate_output_c314
  r = spreadsheet.intermediate_output_c314
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d314
  r = spreadsheet.intermediate_output_d314
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic passenger transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h314
  r = spreadsheet.intermediate_output_h314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.83815574070756,r[:number],0.001)
end

def test_intermediate_output_i314
  r = spreadsheet.intermediate_output_i314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.42811749249668,r[:number],0.001)
end

def test_intermediate_output_j314
  r = spreadsheet.intermediate_output_j314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.53384026017028,r[:number],0.001)
end

def test_intermediate_output_k314
  r = spreadsheet.intermediate_output_k314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.99575784825154,r[:number],0.001)
end

def test_intermediate_output_l314
  r = spreadsheet.intermediate_output_l314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(445.9090729043708,r[:number],0.001)
end

def test_intermediate_output_m314
  r = spreadsheet.intermediate_output_m314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(738.6476066648845,r[:number],0.001)
end

def test_intermediate_output_n314
  r = spreadsheet.intermediate_output_n314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1154.537893016966,r[:number],0.001)
end

def test_intermediate_output_o314
  r = spreadsheet.intermediate_output_o314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1706.775101800795,r[:number],0.001)
end

def test_intermediate_output_p314
  r = spreadsheet.intermediate_output_p314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2370.8989750760584,r[:number],0.001)
end

def test_intermediate_output_q314
  r = spreadsheet.intermediate_output_q314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3258.404850031906,r[:number],0.001)
end

def test_intermediate_output_c315
  r = spreadsheet.intermediate_output_c315
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d315
  r = spreadsheet.intermediate_output_d315
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h315
  r = spreadsheet.intermediate_output_h315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.88193520579367,r[:number],0.001)
end

def test_intermediate_output_i315
  r = spreadsheet.intermediate_output_i315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.88193520579367,r[:number],0.001)
end

def test_intermediate_output_j315
  r = spreadsheet.intermediate_output_j315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.55086601305275,r[:number],0.001)
end

def test_intermediate_output_k315
  r = spreadsheet.intermediate_output_k315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.80980177722665,r[:number],0.001)
end

def test_intermediate_output_l315
  r = spreadsheet.intermediate_output_l315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207.39124545093537,r[:number],0.001)
end

def test_intermediate_output_m315
  r = spreadsheet.intermediate_output_m315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(250.4171125708516,r[:number],0.001)
end

def test_intermediate_output_n315
  r = spreadsheet.intermediate_output_n315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.99734200609265,r[:number],0.001)
end

def test_intermediate_output_o315
  r = spreadsheet.intermediate_output_o315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.5328954246269,r[:number],0.001)
end

def test_intermediate_output_p315
  r = spreadsheet.intermediate_output_p315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.0246389429538,r[:number],0.001)
end

def test_intermediate_output_q315
  r = spreadsheet.intermediate_output_q315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(400.5430694783389,r[:number],0.001)
end

def test_intermediate_output_c316
  r = spreadsheet.intermediate_output_c316
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d316
  r = spreadsheet.intermediate_output_d316
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h316
  r = spreadsheet.intermediate_output_h316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_i316
  r = spreadsheet.intermediate_output_i316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j316
  r = spreadsheet.intermediate_output_j316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_k316
  r = spreadsheet.intermediate_output_k316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_l316
  r = spreadsheet.intermediate_output_l316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_m316
  r = spreadsheet.intermediate_output_m316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n316
  r = spreadsheet.intermediate_output_n316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_o316
  r = spreadsheet.intermediate_output_o316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p316
  r = spreadsheet.intermediate_output_p316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q316
  r = spreadsheet.intermediate_output_q316
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_c317
  r = spreadsheet.intermediate_output_c317
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d317
  r = spreadsheet.intermediate_output_d317
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h317
  r = spreadsheet.intermediate_output_h317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.864816135126634,r[:number],0.001)
end

def test_intermediate_output_i317
  r = spreadsheet.intermediate_output_i317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.4661951652320635,r[:number],0.001)
end

def test_intermediate_output_j317
  r = spreadsheet.intermediate_output_j317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.127455410129975,r[:number],0.001)
end

def test_intermediate_output_k317
  r = spreadsheet.intermediate_output_k317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.811946425969375,r[:number],0.001)
end

def test_intermediate_output_l317
  r = spreadsheet.intermediate_output_l317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.5650160316218935,r[:number],0.001)
end

def test_intermediate_output_m317
  r = spreadsheet.intermediate_output_m317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3739459995864545,r[:number],0.001)
end

def test_intermediate_output_n317
  r = spreadsheet.intermediate_output_n317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.226099651069918,r[:number],0.001)
end

def test_intermediate_output_o317
  r = spreadsheet.intermediate_output_o317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.1116989649088405,r[:number],0.001)
end

def test_intermediate_output_p317
  r = spreadsheet.intermediate_output_p317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0231778947204795,r[:number],0.001)
end

def test_intermediate_output_q317
  r = spreadsheet.intermediate_output_q317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.954681978041625,r[:number],0.001)
end

def test_intermediate_output_c318
  r = spreadsheet.intermediate_output_c318
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d318
  r = spreadsheet.intermediate_output_d318
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h318
  r = spreadsheet.intermediate_output_h318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4273121787934433,r[:number],0.001)
end

def test_intermediate_output_i318
  r = spreadsheet.intermediate_output_i318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4380803036357483,r[:number],0.001)
end

def test_intermediate_output_j318
  r = spreadsheet.intermediate_output_j318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0406449373607782,r[:number],0.001)
end

def test_intermediate_output_k318
  r = spreadsheet.intermediate_output_k318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.670465686787959,r[:number],0.001)
end

def test_intermediate_output_l318
  r = spreadsheet.intermediate_output_l318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.380748078376933,r[:number],0.001)
end

def test_intermediate_output_m318
  r = spreadsheet.intermediate_output_m318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9616847417523144,r[:number],0.001)
end

def test_intermediate_output_n318
  r = spreadsheet.intermediate_output_n318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7882201076488335,r[:number],0.001)
end

def test_intermediate_output_o318
  r = spreadsheet.intermediate_output_o318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6539964804491478,r[:number],0.001)
end

def test_intermediate_output_p318
  r = spreadsheet.intermediate_output_p318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5501367963599244,r[:number],0.001)
end

def test_intermediate_output_q318
  r = spreadsheet.intermediate_output_q318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4697721526369113,r[:number],0.001)
end

def test_intermediate_output_c319
  r = spreadsheet.intermediate_output_c319
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d319
  r = spreadsheet.intermediate_output_d319
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h319
  r = spreadsheet.intermediate_output_h319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.0,r[:number],0.001)
end

def test_intermediate_output_i319
  r = spreadsheet.intermediate_output_i319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(405.69948482373667,r[:number],0.001)
end

def test_intermediate_output_j319
  r = spreadsheet.intermediate_output_j319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(560.1431722464131,r[:number],0.001)
end

def test_intermediate_output_k319
  r = spreadsheet.intermediate_output_k319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(664.9580087902197,r[:number],0.001)
end

def test_intermediate_output_l319
  r = spreadsheet.intermediate_output_l319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(720.1429002935962,r[:number],0.001)
end

def test_intermediate_output_m319
  r = spreadsheet.intermediate_output_m319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(725.6929176438067,r[:number],0.001)
end

def test_intermediate_output_n319
  r = spreadsheet.intermediate_output_n319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(681.5994011835177,r[:number],0.001)
end

def test_intermediate_output_o319
  r = spreadsheet.intermediate_output_o319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587.8530854363723,r[:number],0.001)
end

def test_intermediate_output_p319
  r = spreadsheet.intermediate_output_p319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(444.4433514284722,r[:number],0.001)
end

def test_intermediate_output_q319
  r = spreadsheet.intermediate_output_q319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.3567105282215,r[:number],0.001)
end

def test_intermediate_output_d320
  r = spreadsheet.intermediate_output_d320
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h320
  r = spreadsheet.intermediate_output_h320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17015.96944991893,r[:number],0.001)
end

def test_intermediate_output_i320
  r = spreadsheet.intermediate_output_i320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17788.949470876178,r[:number],0.001)
end

def test_intermediate_output_j320
  r = spreadsheet.intermediate_output_j320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31560.273831856357,r[:number],0.001)
end

def test_intermediate_output_k320
  r = spreadsheet.intermediate_output_k320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44540.25044751858,r[:number],0.001)
end

def test_intermediate_output_l320
  r = spreadsheet.intermediate_output_l320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56909.57230975012,r[:number],0.001)
end

def test_intermediate_output_m320
  r = spreadsheet.intermediate_output_m320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68600.55075049445,r[:number],0.001)
end

def test_intermediate_output_n320
  r = spreadsheet.intermediate_output_n320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79677.47308503935,r[:number],0.001)
end

def test_intermediate_output_o320
  r = spreadsheet.intermediate_output_o320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90158.85384247052,r[:number],0.001)
end

def test_intermediate_output_p320
  r = spreadsheet.intermediate_output_p320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100042.1380725587,r[:number],0.001)
end

def test_intermediate_output_q320
  r = spreadsheet.intermediate_output_q320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109447.70042298338,r[:number],0.001)
end

def test_intermediate_output_d322
  r = spreadsheet.intermediate_output_d322
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h322
  r = spreadsheet.intermediate_output_h322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.72009094650122,r[:number],0.001)
end

def test_intermediate_output_i322
  r = spreadsheet.intermediate_output_i322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.31005269829035,r[:number],0.001)
end

def test_intermediate_output_j322
  r = spreadsheet.intermediate_output_j322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.08470627322305,r[:number],0.001)
end

def test_intermediate_output_k322
  r = spreadsheet.intermediate_output_k322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.80555962547817,r[:number],0.001)
end

def test_intermediate_output_l322
  r = spreadsheet.intermediate_output_l322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(653.3003183553062,r[:number],0.001)
end

def test_intermediate_output_m322
  r = spreadsheet.intermediate_output_m322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(989.0647192357361,r[:number],0.001)
end

def test_intermediate_output_n322
  r = spreadsheet.intermediate_output_n322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1448.5352350230587,r[:number],0.001)
end

def test_intermediate_output_o322
  r = spreadsheet.intermediate_output_o322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2036.3079972254218,r[:number],0.001)
end

def test_intermediate_output_p322
  r = spreadsheet.intermediate_output_p322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2736.9236140190123,r[:number],0.001)
end

def test_intermediate_output_q322
  r = spreadsheet.intermediate_output_q322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3658.947919510245,r[:number],0.001)
end

def test_intermediate_output_d323
  r = spreadsheet.intermediate_output_d323
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h323
  r = spreadsheet.intermediate_output_h323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7263.2185303139195,r[:number],0.001)
end

def test_intermediate_output_i323
  r = spreadsheet.intermediate_output_i323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7262.830677468867,r[:number],0.001)
end

def test_intermediate_output_j323
  r = spreadsheet.intermediate_output_j323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8698.771119897028,r[:number],0.001)
end

def test_intermediate_output_k323
  r = spreadsheet.intermediate_output_k323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10134.762049211831,r[:number],0.001)
end

def test_intermediate_output_l323
  r = spreadsheet.intermediate_output_l323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11570.90201875861,r[:number],0.001)
end

def test_intermediate_output_m323
  r = spreadsheet.intermediate_output_m323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13006.96850293949,r[:number],0.001)
end

def test_intermediate_output_n323
  r = spreadsheet.intermediate_output_n323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14443.323809506406,r[:number],0.001)
end

def test_intermediate_output_o323
  r = spreadsheet.intermediate_output_o323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15879.751802742583,r[:number],0.001)
end

def test_intermediate_output_p323
  r = spreadsheet.intermediate_output_p323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17316.236039537842,r[:number],0.001)
end

def test_intermediate_output_q323
  r = spreadsheet.intermediate_output_q323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18752.763796526986,r[:number],0.001)
end

def test_intermediate_output_d324
  r = spreadsheet.intermediate_output_d324
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h324
  r = spreadsheet.intermediate_output_h324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3925.1419397696236,r[:number],0.001)
end

def test_intermediate_output_i324
  r = spreadsheet.intermediate_output_i324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4697.919851820127,r[:number],0.001)
end

def test_intermediate_output_j324
  r = spreadsheet.intermediate_output_j324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9681.497494706355,r[:number],0.001)
end

def test_intermediate_output_k324
  r = spreadsheet.intermediate_output_k324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13875.730705610657,r[:number],0.001)
end

def test_intermediate_output_l324
  r = spreadsheet.intermediate_output_l324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17299.38621747474,r[:number],0.001)
end

def test_intermediate_output_m324
  r = spreadsheet.intermediate_output_m324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19969.5021510669,r[:number],0.001)
end

def test_intermediate_output_n324
  r = spreadsheet.intermediate_output_n324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21901.567041166705,r[:number],0.001)
end

def test_intermediate_output_o324
  r = spreadsheet.intermediate_output_o324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23109.71542106848,r[:number],0.001)
end

def test_intermediate_output_p324
  r = spreadsheet.intermediate_output_p324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23606.86817547695,r[:number],0.001)
end

def test_intermediate_output_q324
  r = spreadsheet.intermediate_output_q324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23404.846841330396,r[:number],0.001)
end

def test_intermediate_output_d325
  r = spreadsheet.intermediate_output_d325
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h325
  r = spreadsheet.intermediate_output_h325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5638.888888888889,r[:number],0.001)
end

def test_intermediate_output_i325
  r = spreadsheet.intermediate_output_i325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5638.888888888889,r[:number],0.001)
end

def test_intermediate_output_j325
  r = spreadsheet.intermediate_output_j325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12887.920510979746,r[:number],0.001)
end

def test_intermediate_output_k325
  r = spreadsheet.intermediate_output_k325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20136.952133070605,r[:number],0.001)
end

def test_intermediate_output_l325
  r = spreadsheet.intermediate_output_l325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27385.983755161462,r[:number],0.001)
end

def test_intermediate_output_m325
  r = spreadsheet.intermediate_output_m325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34635.01537725232,r[:number],0.001)
end

def test_intermediate_output_n325
  r = spreadsheet.intermediate_output_n325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41884.046999343176,r[:number],0.001)
end

def test_intermediate_output_o325
  r = spreadsheet.intermediate_output_o325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49133.07862143403,r[:number],0.001)
end

def test_intermediate_output_p325
  r = spreadsheet.intermediate_output_p325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56382.11024352489,r[:number],0.001)
end

def test_intermediate_output_q325
  r = spreadsheet.intermediate_output_q325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63631.14186561575,r[:number],0.001)
end

def test_intermediate_output_d326
  r = spreadsheet.intermediate_output_d326
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h326
  r = spreadsheet.intermediate_output_h326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17015.969449918935,r[:number],0.001)
end

def test_intermediate_output_i326
  r = spreadsheet.intermediate_output_i326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17788.949470876174,r[:number],0.001)
end

def test_intermediate_output_j326
  r = spreadsheet.intermediate_output_j326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31560.27383185635,r[:number],0.001)
end

def test_intermediate_output_k326
  r = spreadsheet.intermediate_output_k326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44540.25044751857,r[:number],0.001)
end

def test_intermediate_output_l326
  r = spreadsheet.intermediate_output_l326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56909.57230975012,r[:number],0.001)
end

def test_intermediate_output_m326
  r = spreadsheet.intermediate_output_m326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68600.55075049444,r[:number],0.001)
end

def test_intermediate_output_n326
  r = spreadsheet.intermediate_output_n326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79677.47308503935,r[:number],0.001)
end

def test_intermediate_output_o326
  r = spreadsheet.intermediate_output_o326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90158.85384247052,r[:number],0.001)
end

def test_intermediate_output_p326
  r = spreadsheet.intermediate_output_p326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100042.1380725587,r[:number],0.001)
end

def test_intermediate_output_q326
  r = spreadsheet.intermediate_output_q326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109447.70042298337,r[:number],0.001)
end

def test_intermediate_output_c330
  r = spreadsheet.intermediate_output_c330
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions to Climate Impact",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h330
  r = spreadsheet.intermediate_output_h330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2009.0,r[:number],0.001)
end

def test_intermediate_output_i330
  r = spreadsheet.intermediate_output_i330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_j330
  r = spreadsheet.intermediate_output_j330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_k330
  r = spreadsheet.intermediate_output_k330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_l330
  r = spreadsheet.intermediate_output_l330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_m330
  r = spreadsheet.intermediate_output_m330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_n330
  r = spreadsheet.intermediate_output_n330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_o330
  r = spreadsheet.intermediate_output_o330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_p330
  r = spreadsheet.intermediate_output_p330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_q330
  r = spreadsheet.intermediate_output_q330
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_d331
  r = spreadsheet.intermediate_output_d331
  assert_equal(:ExcelString,r[:type])
  assert_equal("This scenario",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h331
  r = spreadsheet.intermediate_output_h331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29499.63512904898,r[:number],0.001)
end

def test_intermediate_output_i331
  r = spreadsheet.intermediate_output_i331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29397.922926725434,r[:number],0.001)
end

def test_intermediate_output_j331
  r = spreadsheet.intermediate_output_j331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47865.60507278319,r[:number],0.001)
end

def test_intermediate_output_k331
  r = spreadsheet.intermediate_output_k331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65452.16151307093,r[:number],0.001)
end

def test_intermediate_output_l331
  r = spreadsheet.intermediate_output_l331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81890.20794439666,r[:number],0.001)
end

def test_intermediate_output_m331
  r = spreadsheet.intermediate_output_m331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96380.40644138421,r[:number],0.001)
end

def test_intermediate_output_n331
  r = spreadsheet.intermediate_output_n331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109717.613021631,r[:number],0.001)
end

def test_intermediate_output_o331
  r = spreadsheet.intermediate_output_o331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124054.50885546788,r[:number],0.001)
end

def test_intermediate_output_p331
  r = spreadsheet.intermediate_output_p331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138600.38490515482,r[:number],0.001)
end

def test_intermediate_output_q331
  r = spreadsheet.intermediate_output_q331
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152470.5621640452,r[:number],0.001)
end

def test_intermediate_output_d332
  r = spreadsheet.intermediate_output_d332
  assert_equal(:ExcelString,r[:type])
  assert_equal("6DS",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h332
  r = spreadsheet.intermediate_output_h332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_i332
  r = spreadsheet.intermediate_output_i332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_j332
  r = spreadsheet.intermediate_output_j332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35965.189826828166,r[:number],0.001)
end

def test_intermediate_output_k332
  r = spreadsheet.intermediate_output_k332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40464.52792291077,r[:number],0.001)
end

def test_intermediate_output_l332
  r = spreadsheet.intermediate_output_l332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42751.16158907524,r[:number],0.001)
end

def test_intermediate_output_m332
  r = spreadsheet.intermediate_output_m332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45198.83732551004,r[:number],0.001)
end

def test_intermediate_output_n332
  r = spreadsheet.intermediate_output_n332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48545.10995748841,r[:number],0.001)
end

def test_intermediate_output_o332
  r = spreadsheet.intermediate_output_o332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51894.24182449135,r[:number],0.001)
end

def test_intermediate_output_p332
  r = spreadsheet.intermediate_output_p332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55069.51253126151,r[:number],0.001)
end

def test_intermediate_output_q332
  r = spreadsheet.intermediate_output_q332
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57834.02207156194,r[:number],0.001)
end

def test_intermediate_output_d333
  r = spreadsheet.intermediate_output_d333
  assert_equal(:ExcelString,r[:type])
  assert_equal("4DS",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h333
  r = spreadsheet.intermediate_output_h333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_i333
  r = spreadsheet.intermediate_output_i333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_j333
  r = spreadsheet.intermediate_output_j333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34464.689698394934,r[:number],0.001)
end

def test_intermediate_output_k333
  r = spreadsheet.intermediate_output_k333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37463.5276660443,r[:number],0.001)
end

def test_intermediate_output_l333
  r = spreadsheet.intermediate_output_l333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38048.39357058159,r[:number],0.001)
end

def test_intermediate_output_m333
  r = spreadsheet.intermediate_output_m333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38506.3899259832,r[:number],0.001)
end

def test_intermediate_output_n333
  r = spreadsheet.intermediate_output_n333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39219.12774470441,r[:number],0.001)
end

def test_intermediate_output_o333
  r = spreadsheet.intermediate_output_o333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39710.780006504196,r[:number],0.001)
end

def test_intermediate_output_p333
  r = spreadsheet.intermediate_output_p333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39985.99127864075,r[:number],0.001)
end

def test_intermediate_output_q333
  r = spreadsheet.intermediate_output_q333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40059.30293102435,r[:number],0.001)
end

def test_intermediate_output_s333
  r = spreadsheet.intermediate_output_s333
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumul emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_t333
  r = spreadsheet.intermediate_output_t333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3894909.5291708037,r[:number],0.001)
end

def test_intermediate_output_u333
  r = spreadsheet.intermediate_output_u333
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9,r[:number],0.001)
end

def test_intermediate_output_d334
  r = spreadsheet.intermediate_output_d334
  assert_equal(:ExcelString,r[:type])
  assert_equal("2DS",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h334
  r = spreadsheet.intermediate_output_h334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_i334
  r = spreadsheet.intermediate_output_i334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31465.85173074557,r[:number],0.001)
end

def test_intermediate_output_j334
  r = spreadsheet.intermediate_output_j334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32819.64347035086,r[:number],0.001)
end

def test_intermediate_output_k334
  r = spreadsheet.intermediate_output_k334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34173.43520995615,r[:number],0.001)
end

def test_intermediate_output_l334
  r = spreadsheet.intermediate_output_l334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30484.480855302947,r[:number],0.001)
end

def test_intermediate_output_m334
  r = spreadsheet.intermediate_output_m334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26171.64085497342,r[:number],0.001)
end

def test_intermediate_output_n334
  r = spreadsheet.intermediate_output_n334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22410.439744198196,r[:number],0.001)
end

def test_intermediate_output_o334
  r = spreadsheet.intermediate_output_o334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19795.792862208415,r[:number],0.001)
end

def test_intermediate_output_p334
  r = spreadsheet.intermediate_output_p334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17975.920546461537,r[:number],0.001)
end

def test_intermediate_output_q334
  r = spreadsheet.intermediate_output_q334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16206.06387649232,r[:number],0.001)
end

def test_intermediate_output_s334
  r = spreadsheet.intermediate_output_s334
  assert_equal(:ExcelString,r[:type])
  assert_equal("Temp",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_t334
  r = spreadsheet.intermediate_output_t334
  assert_equal(:ExcelString,r[:type])
  assert_equal(">6",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_v334
  r = spreadsheet.intermediate_output_v334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number],0.001)
end

def test_intermediate_output_w334
  r = spreadsheet.intermediate_output_w334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.5,r[:number],0.001)
end

def test_intermediate_output_x334
  r = spreadsheet.intermediate_output_x334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_intermediate_output_y334
  r = spreadsheet.intermediate_output_y334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.5,r[:number],0.001)
end

def test_intermediate_output_z334
  r = spreadsheet.intermediate_output_z334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_intermediate_output_aa334
  r = spreadsheet.intermediate_output_aa334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5,r[:number],0.001)
end

def test_intermediate_output_ab334
  r = spreadsheet.intermediate_output_ab334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number],0.001)
end

def test_intermediate_output_ac334
  r = spreadsheet.intermediate_output_ac334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number],0.001)
end

def test_intermediate_output_ad334
  r = spreadsheet.intermediate_output_ad334
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number],0.001)
end

def test_intermediate_output_c335
  r = spreadsheet.intermediate_output_c335
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d335
  r = spreadsheet.intermediate_output_d335
  assert_equal(:ExcelString,r[:type])
  assert_equal("This scenario",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i335
  r = spreadsheet.intermediate_output_i335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58897.55805577441,r[:number],0.001)
end

def test_intermediate_output_j335
  r = spreadsheet.intermediate_output_j335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202392.66107180045,r[:number],0.001)
end

def test_intermediate_output_k335
  r = spreadsheet.intermediate_output_k335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292087.69468477916,r[:number],0.001)
end

def test_intermediate_output_l335
  r = spreadsheet.intermediate_output_l335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376574.94685933186,r[:number],0.001)
end

def test_intermediate_output_m335
  r = spreadsheet.intermediate_output_m335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(452921.635212946,r[:number],0.001)
end

def test_intermediate_output_n335
  r = spreadsheet.intermediate_output_n335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(521913.6519476614,r[:number],0.001)
end

def test_intermediate_output_o335
  r = spreadsheet.intermediate_output_o335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(591598.7526096656,r[:number],0.001)
end

def test_intermediate_output_p335
  r = spreadsheet.intermediate_output_p335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(663910.1724264002,r[:number],0.001)
end

def test_intermediate_output_q335
  r = spreadsheet.intermediate_output_q335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(734612.4563024451,r[:number],0.001)
end

def test_intermediate_output_s335
  r = spreadsheet.intermediate_output_s335
  assert_equal(:ExcelString,r[:type])
  assert_equal("Sea rise",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_v335
  r = spreadsheet.intermediate_output_v335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898808.3780254952,r[:number],0.001)
end

def test_intermediate_output_w335
  r = spreadsheet.intermediate_output_w335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1819865.237311702,r[:number],0.001)
end

def test_intermediate_output_x335
  r = spreadsheet.intermediate_output_x335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1740922.0965979088,r[:number],0.001)
end

def test_intermediate_output_y335
  r = spreadsheet.intermediate_output_y335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1661978.9558841155,r[:number],0.001)
end

def test_intermediate_output_z335
  r = spreadsheet.intermediate_output_z335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1583035.8151703223,r[:number],0.001)
end

def test_intermediate_output_aa335
  r = spreadsheet.intermediate_output_aa335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1460686.452945171,r[:number],0.001)
end

def test_intermediate_output_ab335
  r = spreadsheet.intermediate_output_ab335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1338337.0907200198,r[:number],0.001)
end

def test_intermediate_output_ac335
  r = spreadsheet.intermediate_output_ac335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1215987.7284948684,r[:number],0.001)
end

def test_intermediate_output_ad335
  r = spreadsheet.intermediate_output_ad335
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1093638.366269717,r[:number],0.001)
end

def test_intermediate_output_i336
  r = spreadsheet.intermediate_output_i336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58897.55805577441,r[:number],0.001)
end

def test_intermediate_output_j336
  r = spreadsheet.intermediate_output_j336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261290.21912757488,r[:number],0.001)
end

def test_intermediate_output_k336
  r = spreadsheet.intermediate_output_k336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(553377.913812354,r[:number],0.001)
end

def test_intermediate_output_l336
  r = spreadsheet.intermediate_output_l336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(929952.8606716858,r[:number],0.001)
end

def test_intermediate_output_m336
  r = spreadsheet.intermediate_output_m336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1382874.4958846318,r[:number],0.001)
end

def test_intermediate_output_n336
  r = spreadsheet.intermediate_output_n336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1904788.147832293,r[:number],0.001)
end

def test_intermediate_output_o336
  r = spreadsheet.intermediate_output_o336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2496386.9004419586,r[:number],0.001)
end

def test_intermediate_output_p336
  r = spreadsheet.intermediate_output_p336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3160297.072868359,r[:number],0.001)
end

def test_intermediate_output_q336
  r = spreadsheet.intermediate_output_q336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3894909.5291708037,r[:number],0.001)
end

def test_intermediate_output_v336
  r = spreadsheet.intermediate_output_v336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number],0.001)
end

def test_intermediate_output_w336
  r = spreadsheet.intermediate_output_w336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8,r[:number],0.001)
end

def test_intermediate_output_x336
  r = spreadsheet.intermediate_output_x336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number],0.001)
end

def test_intermediate_output_y336
  r = spreadsheet.intermediate_output_y336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number],0.001)
end

def test_intermediate_output_z336
  r = spreadsheet.intermediate_output_z336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5,r[:number],0.001)
end

def test_intermediate_output_aa336
  r = spreadsheet.intermediate_output_aa336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4,r[:number],0.001)
end

def test_intermediate_output_ab336
  r = spreadsheet.intermediate_output_ab336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3,r[:number],0.001)
end

def test_intermediate_output_ac336
  r = spreadsheet.intermediate_output_ac336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2,r[:number],0.001)
end

def test_intermediate_output_ad336
  r = spreadsheet.intermediate_output_ad336
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1,r[:number],0.001)
end

def test_intermediate_output_d337
  r = spreadsheet.intermediate_output_d337
  assert_equal(:ExcelString,r[:type])
  assert_equal("6DS",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i337
  r = spreadsheet.intermediate_output_i337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62931.70346149114,r[:number],0.001)
end

def test_intermediate_output_j337
  r = spreadsheet.intermediate_output_j337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170827.27294197562,r[:number],0.001)
end

def test_intermediate_output_k337
  r = spreadsheet.intermediate_output_k337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193323.96342238862,r[:number],0.001)
end

def test_intermediate_output_l337
  r = spreadsheet.intermediate_output_l337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209182.54061304725,r[:number],0.001)
end

def test_intermediate_output_m337
  r = spreadsheet.intermediate_output_m337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221098.8351546806,r[:number],0.001)
end

def test_intermediate_output_n337
  r = spreadsheet.intermediate_output_n337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236033.0045234853,r[:number],0.001)
end

def test_intermediate_output_o337
  r = spreadsheet.intermediate_output_o337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(252772.94538845087,r[:number],0.001)
end

def test_intermediate_output_p337
  r = spreadsheet.intermediate_output_p337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(268997.0212427672,r[:number],0.001)
end

def test_intermediate_output_q337
  r = spreadsheet.intermediate_output_q337
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283641.0912772089,r[:number],0.001)
end

def test_intermediate_output_i338
  r = spreadsheet.intermediate_output_i338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62931.70346149114,r[:number],0.001)
end

def test_intermediate_output_j338
  r = spreadsheet.intermediate_output_j338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(233758.97640346678,r[:number],0.001)
end

def test_intermediate_output_k338
  r = spreadsheet.intermediate_output_k338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(427082.9398258554,r[:number],0.001)
end

def test_intermediate_output_l338
  r = spreadsheet.intermediate_output_l338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(636265.4804389027,r[:number],0.001)
end

def test_intermediate_output_m338
  r = spreadsheet.intermediate_output_m338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(857364.3155935833,r[:number],0.001)
end

def test_intermediate_output_n338
  r = spreadsheet.intermediate_output_n338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1093397.3201170685,r[:number],0.001)
end

def test_intermediate_output_o338
  r = spreadsheet.intermediate_output_o338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1346170.2655055192,r[:number],0.001)
end

def test_intermediate_output_p338
  r = spreadsheet.intermediate_output_p338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1615167.2867482863,r[:number],0.001)
end

def test_intermediate_output_q338
  r = spreadsheet.intermediate_output_q338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898808.3780254952,r[:number],0.001)
end

def test_intermediate_output_s338
  r = spreadsheet.intermediate_output_s338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number],0.001)
end

def test_intermediate_output_t338
  r = spreadsheet.intermediate_output_t338
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898808.3780254952,r[:number],0.001)
end

def test_intermediate_output_d339
  r = spreadsheet.intermediate_output_d339
  assert_equal(:ExcelString,r[:type])
  assert_equal("4DS",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i339
  r = spreadsheet.intermediate_output_i339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62931.70346149114,r[:number],0.001)
end

def test_intermediate_output_j339
  r = spreadsheet.intermediate_output_j339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166325.77255667595,r[:number],0.001)
end

def test_intermediate_output_k339
  r = spreadsheet.intermediate_output_k339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181319.96239492277,r[:number],0.001)
end

def test_intermediate_output_l339
  r = spreadsheet.intermediate_output_l339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189072.23604383337,r[:number],0.001)
end

def test_intermediate_output_m339
  r = spreadsheet.intermediate_output_m339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191615.9569191128,r[:number],0.001)
end

def test_intermediate_output_n339
  r = spreadsheet.intermediate_output_n339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194670.16308607964,r[:number],0.001)
end

def test_intermediate_output_o339
  r = spreadsheet.intermediate_output_o339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197570.59550892143,r[:number],0.001)
end

def test_intermediate_output_p339
  r = spreadsheet.intermediate_output_p339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199379.53384893065,r[:number],0.001)
end

def test_intermediate_output_q339
  r = spreadsheet.intermediate_output_q339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200149.89135035453,r[:number],0.001)
end

def test_intermediate_output_s339
  r = spreadsheet.intermediate_output_s339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number],0.001)
end

def test_intermediate_output_t339
  r = spreadsheet.intermediate_output_t339
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1583035.8151703223,r[:number],0.001)
end

def test_intermediate_output_i340
  r = spreadsheet.intermediate_output_i340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62931.70346149114,r[:number],0.001)
end

def test_intermediate_output_j340
  r = spreadsheet.intermediate_output_j340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229257.4760181671,r[:number],0.001)
end

def test_intermediate_output_k340
  r = spreadsheet.intermediate_output_k340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410577.43841308984,r[:number],0.001)
end

def test_intermediate_output_l340
  r = spreadsheet.intermediate_output_l340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(599649.6744569233,r[:number],0.001)
end

def test_intermediate_output_m340
  r = spreadsheet.intermediate_output_m340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(791265.6313760361,r[:number],0.001)
end

def test_intermediate_output_n340
  r = spreadsheet.intermediate_output_n340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(985935.7944621157,r[:number],0.001)
end

def test_intermediate_output_o340
  r = spreadsheet.intermediate_output_o340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1183506.3899710372,r[:number],0.001)
end

def test_intermediate_output_p340
  r = spreadsheet.intermediate_output_p340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1382885.9238199678,r[:number],0.001)
end

def test_intermediate_output_q340
  r = spreadsheet.intermediate_output_q340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1583035.8151703223,r[:number],0.001)
end

def test_intermediate_output_s340
  r = spreadsheet.intermediate_output_s340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number],0.001)
end

def test_intermediate_output_t340
  r = spreadsheet.intermediate_output_t340
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1093638.366269717,r[:number],0.001)
end

def test_intermediate_output_d341
  r = spreadsheet.intermediate_output_d341
  assert_equal(:ExcelString,r[:type])
  assert_equal("2DS",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i341
  r = spreadsheet.intermediate_output_i341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62931.70346149114,r[:number],0.001)
end

def test_intermediate_output_j341
  r = spreadsheet.intermediate_output_j341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161390.6338725437,r[:number],0.001)
end

def test_intermediate_output_k341
  r = spreadsheet.intermediate_output_k341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168159.59257057015,r[:number],0.001)
end

def test_intermediate_output_l341
  r = spreadsheet.intermediate_output_l341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159800.31298582113,r[:number],0.001)
end

def test_intermediate_output_m341
  r = spreadsheet.intermediate_output_m341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139483.88427552616,r[:number],0.001)
end

def test_intermediate_output_n341
  r = spreadsheet.intermediate_output_n341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119574.60094254144,r[:number],0.001)
end

def test_intermediate_output_o341
  r = spreadsheet.intermediate_output_o341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104208.25807502164,r[:number],0.001)
end

def test_intermediate_output_p341
  r = spreadsheet.intermediate_output_p341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93519.34736380144,r[:number],0.001)
end

def test_intermediate_output_q341
  r = spreadsheet.intermediate_output_q341
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84570.03272240004,r[:number],0.001)
end

def test_intermediate_output_i342
  r = spreadsheet.intermediate_output_i342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62931.70346149114,r[:number],0.001)
end

def test_intermediate_output_j342
  r = spreadsheet.intermediate_output_j342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(224322.33733403485,r[:number],0.001)
end

def test_intermediate_output_k342
  r = spreadsheet.intermediate_output_k342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392481.92990460503,r[:number],0.001)
end

def test_intermediate_output_l342
  r = spreadsheet.intermediate_output_l342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552282.2428904262,r[:number],0.001)
end

def test_intermediate_output_m342
  r = spreadsheet.intermediate_output_m342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(691766.1271659523,r[:number],0.001)
end

def test_intermediate_output_n342
  r = spreadsheet.intermediate_output_n342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(811340.7281084938,r[:number],0.001)
end

def test_intermediate_output_o342
  r = spreadsheet.intermediate_output_o342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(915548.9861835155,r[:number],0.001)
end

def test_intermediate_output_p342
  r = spreadsheet.intermediate_output_p342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1009068.333547317,r[:number],0.001)
end

def test_intermediate_output_q342
  r = spreadsheet.intermediate_output_q342
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1093638.366269717,r[:number],0.001)
end

def test_intermediate_output_b344
  r = spreadsheet.intermediate_output_b344
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuel Resources Graph",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d345
  r = spreadsheet.intermediate_output_d345
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e345
  r = spreadsheet.intermediate_output_e345
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f345
  r = spreadsheet.intermediate_output_f345
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g345
  r = spreadsheet.intermediate_output_g345
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus IPCC unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h345
  r = spreadsheet.intermediate_output_h345
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i345
  r = spreadsheet.intermediate_output_i345
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j345
  r = spreadsheet.intermediate_output_j345
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k345
  r = spreadsheet.intermediate_output_k345
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC+unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c346
  r = spreadsheet.intermediate_output_c346
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d346
  r = spreadsheet.intermediate_output_d346
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25232.370904,r[:number],0.001)
end

def test_intermediate_output_e346
  r = spreadsheet.intermediate_output_e346
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17268.07,r[:number],0.001)
end

def test_intermediate_output_f346
  r = spreadsheet.intermediate_output_f346
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100000.0,r[:number],0.001)
end

def test_intermediate_output_g346
  r = spreadsheet.intermediate_output_g346
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132000.0,r[:number],0.001)
end

def test_intermediate_output_h346
  r = spreadsheet.intermediate_output_h346
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68977.0,r[:number],0.001)
end

def test_intermediate_output_i346
  r = spreadsheet.intermediate_output_i346
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142351.0,r[:number],0.001)
end

def test_intermediate_output_m346
  r = spreadsheet.intermediate_output_m346
  assert_equal(:ExcelString,r[:type])
  assert_equal("For Graph",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c347
  r = spreadsheet.intermediate_output_c347
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d347
  r = spreadsheet.intermediate_output_d347
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7502.0,r[:number],0.001)
end

def test_intermediate_output_e347
  r = spreadsheet.intermediate_output_e347
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6750.0,r[:number],0.001)
end

def test_intermediate_output_f347
  r = spreadsheet.intermediate_output_f347
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15046.521840000001,r[:number],0.001)
end

def test_intermediate_output_g347
  r = spreadsheet.intermediate_output_g347
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15047.0,r[:number],0.001)
end

def test_intermediate_output_h347
  r = spreadsheet.intermediate_output_h347
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13942.0,r[:number],0.001)
end

def test_intermediate_output_i347
  r = spreadsheet.intermediate_output_i347
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36425.0,r[:number],0.001)
end

def test_intermediate_output_c348
  r = spreadsheet.intermediate_output_c348
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d348
  r = spreadsheet.intermediate_output_d348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9687.0,r[:number],0.001)
end

def test_intermediate_output_e348
  r = spreadsheet.intermediate_output_e348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7802.0,r[:number],0.001)
end

def test_intermediate_output_f348
  r = spreadsheet.intermediate_output_f348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17707.65192,r[:number],0.001)
end

def test_intermediate_output_g348
  r = spreadsheet.intermediate_output_g348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17708.0,r[:number],0.001)
end

def test_intermediate_output_h348
  r = spreadsheet.intermediate_output_h348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13942.0,r[:number],0.001)
end

def test_intermediate_output_i348
  r = spreadsheet.intermediate_output_i348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34080.0,r[:number],0.001)
end

def test_intermediate_output_j348
  r = spreadsheet.intermediate_output_j348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7837.0,r[:number],0.001)
end

def test_intermediate_output_k348
  r = spreadsheet.intermediate_output_k348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14085.0,r[:number],0.001)
end

def test_intermediate_output_m348
  r = spreadsheet.intermediate_output_m348
  assert_equal(:ExcelString,r[:type])
  assert_equal("Your Pathway",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n348
  r = spreadsheet.intermediate_output_n348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4983570.4161964245,r[:number],0.001)
end

def test_intermediate_output_o348
  r = spreadsheet.intermediate_output_o348
  assert_equal(:ExcelString,r[:type])
  assert_equal("Your Pathway",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p348
  r = spreadsheet.intermediate_output_p348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4328037.28219359,r[:number],0.001)
end

def test_intermediate_output_q348
  r = spreadsheet.intermediate_output_q348
  assert_equal(:ExcelString,r[:type])
  assert_equal("Your Pathway",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r348
  r = spreadsheet.intermediate_output_r348
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4963998.735519782,r[:number],0.001)
end

def test_intermediate_output_m349
  r = spreadsheet.intermediate_output_m349
  assert_equal(:ExcelString,r[:type])
  assert_equal("For Graphs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c350
  r = spreadsheet.intermediate_output_c350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d350
  r = spreadsheet.intermediate_output_d350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e350
  r = spreadsheet.intermediate_output_e350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f350
  r = spreadsheet.intermediate_output_f350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g350
  r = spreadsheet.intermediate_output_g350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h350
  r = spreadsheet.intermediate_output_h350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i350
  r = spreadsheet.intermediate_output_i350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j350
  r = spreadsheet.intermediate_output_j350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k350
  r = spreadsheet.intermediate_output_k350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m350
  r = spreadsheet.intermediate_output_m350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n350
  r = spreadsheet.intermediate_output_n350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o350
  r = spreadsheet.intermediate_output_o350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p350
  r = spreadsheet.intermediate_output_p350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q350
  r = spreadsheet.intermediate_output_q350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r350
  r = spreadsheet.intermediate_output_r350
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c351
  r = spreadsheet.intermediate_output_c351
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d351
  r = spreadsheet.intermediate_output_d351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17268.07,r[:number],0.001)
end

def test_intermediate_output_e351
  r = spreadsheet.intermediate_output_e351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17268.07,r[:number],0.001)
end

def test_intermediate_output_f351
  r = spreadsheet.intermediate_output_f351
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g351
  r = spreadsheet.intermediate_output_g351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6750.0,r[:number],0.001)
end

def test_intermediate_output_h351
  r = spreadsheet.intermediate_output_h351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6750.0,r[:number],0.001)
end

def test_intermediate_output_i351
  r = spreadsheet.intermediate_output_i351
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j351
  r = spreadsheet.intermediate_output_j351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7802.0,r[:number],0.001)
end

def test_intermediate_output_k351
  r = spreadsheet.intermediate_output_k351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7802.0,r[:number],0.001)
end

def test_intermediate_output_m351
  r = spreadsheet.intermediate_output_m351
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n351
  r = spreadsheet.intermediate_output_n351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4796686.111111111,r[:number],0.001)
end

def test_intermediate_output_o351
  r = spreadsheet.intermediate_output_o351
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p351
  r = spreadsheet.intermediate_output_p351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1875000.0,r[:number],0.001)
end

def test_intermediate_output_q351
  r = spreadsheet.intermediate_output_q351
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r351
  r = spreadsheet.intermediate_output_r351
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2167222.222222222,r[:number],0.001)
end

def test_intermediate_output_c352
  r = spreadsheet.intermediate_output_c352
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d352
  r = spreadsheet.intermediate_output_d352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25232.370904,r[:number],0.001)
end

def test_intermediate_output_e352
  r = spreadsheet.intermediate_output_e352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7964.300904,r[:number],0.001)
end

def test_intermediate_output_f352
  r = spreadsheet.intermediate_output_f352
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g352
  r = spreadsheet.intermediate_output_g352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7502.0,r[:number],0.001)
end

def test_intermediate_output_h352
  r = spreadsheet.intermediate_output_h352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(752.0,r[:number],0.001)
end

def test_intermediate_output_i352
  r = spreadsheet.intermediate_output_i352
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j352
  r = spreadsheet.intermediate_output_j352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7837.0,r[:number],0.001)
end

def test_intermediate_output_k352
  r = spreadsheet.intermediate_output_k352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.0,r[:number],0.001)
end

def test_intermediate_output_m352
  r = spreadsheet.intermediate_output_m352
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n352
  r = spreadsheet.intermediate_output_n352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2212305.8066666666,r[:number],0.001)
end

def test_intermediate_output_o352
  r = spreadsheet.intermediate_output_o352
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p352
  r = spreadsheet.intermediate_output_p352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208888.88888888888,r[:number],0.001)
end

def test_intermediate_output_q352
  r = spreadsheet.intermediate_output_q352
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r352
  r = spreadsheet.intermediate_output_r352
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9722.222222222223,r[:number],0.001)
end

def test_intermediate_output_c353
  r = spreadsheet.intermediate_output_c353
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d353
  r = spreadsheet.intermediate_output_d353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68977.0,r[:number],0.001)
end

def test_intermediate_output_e353
  r = spreadsheet.intermediate_output_e353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43744.629096000004,r[:number],0.001)
end

def test_intermediate_output_f353
  r = spreadsheet.intermediate_output_f353
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g353
  r = spreadsheet.intermediate_output_g353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13942.0,r[:number],0.001)
end

def test_intermediate_output_h353
  r = spreadsheet.intermediate_output_h353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6440.0,r[:number],0.001)
end

def test_intermediate_output_i353
  r = spreadsheet.intermediate_output_i353
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j353
  r = spreadsheet.intermediate_output_j353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9687.0,r[:number],0.001)
end

def test_intermediate_output_k353
  r = spreadsheet.intermediate_output_k353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1850.0,r[:number],0.001)
end

def test_intermediate_output_m353
  r = spreadsheet.intermediate_output_m353
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n353
  r = spreadsheet.intermediate_output_n353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12151285.860000001,r[:number],0.001)
end

def test_intermediate_output_o353
  r = spreadsheet.intermediate_output_o353
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p353
  r = spreadsheet.intermediate_output_p353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1788888.8888888888,r[:number],0.001)
end

def test_intermediate_output_q353
  r = spreadsheet.intermediate_output_q353
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r353
  r = spreadsheet.intermediate_output_r353
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(513888.8888888889,r[:number],0.001)
end

def test_intermediate_output_c354
  r = spreadsheet.intermediate_output_c354
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d354
  r = spreadsheet.intermediate_output_d354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100000.0,r[:number],0.001)
end

def test_intermediate_output_e354
  r = spreadsheet.intermediate_output_e354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31023.0,r[:number],0.001)
end

def test_intermediate_output_f354
  r = spreadsheet.intermediate_output_f354
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g354
  r = spreadsheet.intermediate_output_g354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15046.521840000001,r[:number],0.001)
end

def test_intermediate_output_h354
  r = spreadsheet.intermediate_output_h354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1104.5218400000012,r[:number],0.001)
end

def test_intermediate_output_i354
  r = spreadsheet.intermediate_output_i354
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j354
  r = spreadsheet.intermediate_output_j354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13942.0,r[:number],0.001)
end

def test_intermediate_output_k354
  r = spreadsheet.intermediate_output_k354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4255.0,r[:number],0.001)
end

def test_intermediate_output_m354
  r = spreadsheet.intermediate_output_m354
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n354
  r = spreadsheet.intermediate_output_n354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8617500.0,r[:number],0.001)
end

def test_intermediate_output_o354
  r = spreadsheet.intermediate_output_o354
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p354
  r = spreadsheet.intermediate_output_p354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306811.62222222256,r[:number],0.001)
end

def test_intermediate_output_q354
  r = spreadsheet.intermediate_output_q354
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r354
  r = spreadsheet.intermediate_output_r354
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1181944.4444444445,r[:number],0.001)
end

def test_intermediate_output_c355
  r = spreadsheet.intermediate_output_c355
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus IPCC unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d355
  r = spreadsheet.intermediate_output_d355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132000.0,r[:number],0.001)
end

def test_intermediate_output_e355
  r = spreadsheet.intermediate_output_e355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32000.0,r[:number],0.001)
end

def test_intermediate_output_f355
  r = spreadsheet.intermediate_output_f355
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus IPCC unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g355
  r = spreadsheet.intermediate_output_g355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15047.0,r[:number],0.001)
end

def test_intermediate_output_h355
  r = spreadsheet.intermediate_output_h355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.478159999998752,r[:number],0.001)
end

def test_intermediate_output_i355
  r = spreadsheet.intermediate_output_i355
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC+unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j355
  r = spreadsheet.intermediate_output_j355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14085.0,r[:number],0.001)
end

def test_intermediate_output_k355
  r = spreadsheet.intermediate_output_k355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.0,r[:number],0.001)
end

def test_intermediate_output_m355
  r = spreadsheet.intermediate_output_m355
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n355
  r = spreadsheet.intermediate_output_n355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8888888.888888888,r[:number],0.001)
end

def test_intermediate_output_o355
  r = spreadsheet.intermediate_output_o355
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus IPCC unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p355
  r = spreadsheet.intermediate_output_p355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.82222222187556,r[:number],0.001)
end

def test_intermediate_output_q355
  r = spreadsheet.intermediate_output_q355
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC+uncon",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r355
  r = spreadsheet.intermediate_output_r355
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39722.22222222222,r[:number],0.001)
end

def test_intermediate_output_c356
  r = spreadsheet.intermediate_output_c356
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d356
  r = spreadsheet.intermediate_output_d356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142351.0,r[:number],0.001)
end

def test_intermediate_output_e356
  r = spreadsheet.intermediate_output_e356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10351.0,r[:number],0.001)
end

def test_intermediate_output_f356
  r = spreadsheet.intermediate_output_f356
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g356
  r = spreadsheet.intermediate_output_g356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36425.0,r[:number],0.001)
end

def test_intermediate_output_h356
  r = spreadsheet.intermediate_output_h356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21378.0,r[:number],0.001)
end

def test_intermediate_output_i356
  r = spreadsheet.intermediate_output_i356
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j356
  r = spreadsheet.intermediate_output_j356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17707.65192,r[:number],0.001)
end

def test_intermediate_output_k356
  r = spreadsheet.intermediate_output_k356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3622.6519200000002,r[:number],0.001)
end

def test_intermediate_output_m356
  r = spreadsheet.intermediate_output_m356
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n356
  r = spreadsheet.intermediate_output_n356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2875277.7777777775,r[:number],0.001)
end

def test_intermediate_output_o356
  r = spreadsheet.intermediate_output_o356
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p356
  r = spreadsheet.intermediate_output_p356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5938333.333333333,r[:number],0.001)
end

def test_intermediate_output_q356
  r = spreadsheet.intermediate_output_q356
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r356
  r = spreadsheet.intermediate_output_r356
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1006292.2000000001,r[:number],0.001)
end

def test_intermediate_output_d357
  r = spreadsheet.intermediate_output_d357
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39541944.44444444,r[:number],0.001)
end

def test_intermediate_output_f357
  r = spreadsheet.intermediate_output_f357
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10118055.555555556,r[:number],0.001)
end

def test_intermediate_output_i357
  r = spreadsheet.intermediate_output_i357
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus IPCC unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j357
  r = spreadsheet.intermediate_output_j357
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17708.0,r[:number],0.001)
end

def test_intermediate_output_k357
  r = spreadsheet.intermediate_output_k357
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.34807999999975436,r[:number],0.001)
end

def test_intermediate_output_q357
  r = spreadsheet.intermediate_output_q357
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus uncon",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r357
  r = spreadsheet.intermediate_output_r357
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.68888888882066,r[:number],0.001)
end

def test_intermediate_output_i358
  r = spreadsheet.intermediate_output_i358
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j358
  r = spreadsheet.intermediate_output_j358
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34080.0,r[:number],0.001)
end

def test_intermediate_output_k358
  r = spreadsheet.intermediate_output_k358
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16372.0,r[:number],0.001)
end

def test_intermediate_output_q358
  r = spreadsheet.intermediate_output_q358
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + uncon",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r358
  r = spreadsheet.intermediate_output_r358
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4547777.777777778,r[:number],0.001)
end

def test_intermediate_output_j359
  r = spreadsheet.intermediate_output_j359
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9466666.666666666,r[:number],0.001)
end

def test_intermediate_output_e360
  r = spreadsheet.intermediate_output_e360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2009.0,r[:number],0.001)
end

def test_intermediate_output_f360
  r = spreadsheet.intermediate_output_f360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_intermediate_output_g360
  r = spreadsheet.intermediate_output_g360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_intermediate_output_h360
  r = spreadsheet.intermediate_output_h360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_intermediate_output_i360
  r = spreadsheet.intermediate_output_i360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_intermediate_output_j360
  r = spreadsheet.intermediate_output_j360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_intermediate_output_k360
  r = spreadsheet.intermediate_output_k360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_intermediate_output_l360
  r = spreadsheet.intermediate_output_l360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_intermediate_output_m360
  r = spreadsheet.intermediate_output_m360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_intermediate_output_n360
  r = spreadsheet.intermediate_output_n360
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_d361
  r = spreadsheet.intermediate_output_d361
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e361
  r = spreadsheet.intermediate_output_e361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_intermediate_output_f361
  r = spreadsheet.intermediate_output_f361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36103.65238777542,r[:number],0.001)
end

def test_intermediate_output_g361
  r = spreadsheet.intermediate_output_g361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64955.09369514431,r[:number],0.001)
end

def test_intermediate_output_h361
  r = spreadsheet.intermediate_output_h361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90893.48881903531,r[:number],0.001)
end

def test_intermediate_output_i361
  r = spreadsheet.intermediate_output_i361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112555.310867159,r[:number],0.001)
end

def test_intermediate_output_j361
  r = spreadsheet.intermediate_output_j361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128073.43544200294,r[:number],0.001)
end

def test_intermediate_output_k361
  r = spreadsheet.intermediate_output_k361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140289.24782100742,r[:number],0.001)
end

def test_intermediate_output_l361
  r = spreadsheet.intermediate_output_l361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154427.00233436446,r[:number],0.001)
end

def test_intermediate_output_m361
  r = spreadsheet.intermediate_output_m361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168197.78243544442,r[:number],0.001)
end

def test_intermediate_output_n361
  r = spreadsheet.intermediate_output_n361
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_intermediate_output_p361
  r = spreadsheet.intermediate_output_p361
  assert_equal(:ExcelString,r[:type])
  assert_equal("Org",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q361
  r = spreadsheet.intermediate_output_q361
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r361
  r = spreadsheet.intermediate_output_r361
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s361
  r = spreadsheet.intermediate_output_s361
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d362
  r = spreadsheet.intermediate_output_d362
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f362
  r = spreadsheet.intermediate_output_f362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75778.84851408076,r[:number],0.001)
end

def test_intermediate_output_g362
  r = spreadsheet.intermediate_output_g362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(267072.58586098376,r[:number],0.001)
end

def test_intermediate_output_h362
  r = spreadsheet.intermediate_output_h362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(402590.65384739457,r[:number],0.001)
end

def test_intermediate_output_i362
  r = spreadsheet.intermediate_output_i362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(519452.9102395476,r[:number],0.001)
end

def test_intermediate_output_j362
  r = spreadsheet.intermediate_output_j362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(609330.9280603267,r[:number],0.001)
end

def test_intermediate_output_k362
  r = spreadsheet.intermediate_output_k362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(677014.6143470282,r[:number],0.001)
end

def test_intermediate_output_l362
  r = spreadsheet.intermediate_output_l362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743859.5026451082,r[:number],0.001)
end

def test_intermediate_output_m362
  r = spreadsheet.intermediate_output_m362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(813447.3519750622,r[:number],0.001)
end

def test_intermediate_output_n362
  r = spreadsheet.intermediate_output_n362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(875023.0207068932,r[:number],0.001)
end

def test_intermediate_output_p362
  r = spreadsheet.intermediate_output_p362
  assert_equal(:ExcelString,r[:type])
  assert_equal("Info is Beautiful",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q362
  r = spreadsheet.intermediate_output_q362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-186884.3050853135,r[:number],0.001)
end

def test_intermediate_output_r362
  r = spreadsheet.intermediate_output_r362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2453037.28219359,r[:number],0.001)
end

def test_intermediate_output_s362
  r = spreadsheet.intermediate_output_s362
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2796776.5132975597,r[:number],0.001)
end

def test_intermediate_output_f363
  r = spreadsheet.intermediate_output_f363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75778.84851408076,r[:number],0.001)
end

def test_intermediate_output_g363
  r = spreadsheet.intermediate_output_g363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342851.4343750645,r[:number],0.001)
end

def test_intermediate_output_h363
  r = spreadsheet.intermediate_output_h363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(745442.0882224591,r[:number],0.001)
end

def test_intermediate_output_i363
  r = spreadsheet.intermediate_output_i363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1264894.9984620067,r[:number],0.001)
end

def test_intermediate_output_j363
  r = spreadsheet.intermediate_output_j363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1874225.9265223334,r[:number],0.001)
end

def test_intermediate_output_k363
  r = spreadsheet.intermediate_output_k363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2551240.5408693617,r[:number],0.001)
end

def test_intermediate_output_l363
  r = spreadsheet.intermediate_output_l363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3295100.0435144696,r[:number],0.001)
end

def test_intermediate_output_m363
  r = spreadsheet.intermediate_output_m363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4108547.3954895316,r[:number],0.001)
end

def test_intermediate_output_n363
  r = spreadsheet.intermediate_output_n363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4983570.4161964245,r[:number],0.001)
end

def test_intermediate_output_p363
  r = spreadsheet.intermediate_output_p363
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q363
  r = spreadsheet.intermediate_output_q363
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r363
  r = spreadsheet.intermediate_output_r363
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s363
  r = spreadsheet.intermediate_output_s363
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-9722.222222222223,r[:number],0.001)
end

def test_intermediate_output_d364
  r = spreadsheet.intermediate_output_d364
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e364
  r = spreadsheet.intermediate_output_e364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41924.201364077846,r[:number],0.001)
end

def test_intermediate_output_f364
  r = spreadsheet.intermediate_output_f364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.35219744025,r[:number],0.001)
end

def test_intermediate_output_g364
  r = spreadsheet.intermediate_output_g364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61374.2718755043,r[:number],0.001)
end

def test_intermediate_output_h364
  r = spreadsheet.intermediate_output_h364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.82421146327,r[:number],0.001)
end

def test_intermediate_output_i364
  r = spreadsheet.intermediate_output_i364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100867.14996464801,r[:number],0.001)
end

def test_intermediate_output_j364
  r = spreadsheet.intermediate_output_j364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120641.80238440383,r[:number],0.001)
end

def test_intermediate_output_k364
  r = spreadsheet.intermediate_output_k364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139819.61922359336,r[:number],0.001)
end

def test_intermediate_output_l364
  r = spreadsheet.intermediate_output_l364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158738.33283816374,r[:number],0.001)
end

def test_intermediate_output_m364
  r = spreadsheet.intermediate_output_m364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178053.0889068639,r[:number],0.001)
end

def test_intermediate_output_n364
  r = spreadsheet.intermediate_output_n364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_intermediate_output_p364
  r = spreadsheet.intermediate_output_p364
  assert_equal(:ExcelString,r[:type])
  assert_equal("BP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q364
  r = spreadsheet.intermediate_output_q364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7195876.222863091,r[:number],0.001)
end

def test_intermediate_output_r364
  r = spreadsheet.intermediate_output_r364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-208888.88888888888,r[:number],0.001)
end

def test_intermediate_output_s364
  r = spreadsheet.intermediate_output_s364
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-513888.8888888889,r[:number],0.001)
end

def test_intermediate_output_d365
  r = spreadsheet.intermediate_output_d365
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f365
  r = spreadsheet.intermediate_output_f365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83778.55356151809,r[:number],0.001)
end

def test_intermediate_output_g365
  r = spreadsheet.intermediate_output_g365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(267831.52002139343,r[:number],0.001)
end

def test_intermediate_output_h365
  r = spreadsheet.intermediate_output_h365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366570.01638539846,r[:number],0.001)
end

def test_intermediate_output_i365
  r = spreadsheet.intermediate_output_i365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(465149.0983168706,r[:number],0.001)
end

def test_intermediate_output_j365
  r = spreadsheet.intermediate_output_j365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(563659.7070825074,r[:number],0.001)
end

def test_intermediate_output_k365
  r = spreadsheet.intermediate_output_k365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(660742.4624395878,r[:number],0.001)
end

def test_intermediate_output_l365
  r = spreadsheet.intermediate_output_l365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(755854.2369616779,r[:number],0.001)
end

def test_intermediate_output_m365
  r = spreadsheet.intermediate_output_m365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(851635.9323969192,r[:number],0.001)
end

def test_intermediate_output_n365
  r = spreadsheet.intermediate_output_n365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(948777.2083539085,r[:number],0.001)
end

def test_intermediate_output_p365
  r = spreadsheet.intermediate_output_p365
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q365
  r = spreadsheet.intermediate_output_q365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11964401.554914685,r[:number],0.001)
end

def test_intermediate_output_r365
  r = spreadsheet.intermediate_output_r365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1788888.8888888888,r[:number],0.001)
end

def test_intermediate_output_s365
  r = spreadsheet.intermediate_output_s365
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1181944.4444444445,r[:number],0.001)
end

def test_intermediate_output_f366
  r = spreadsheet.intermediate_output_f366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83778.55356151809,r[:number],0.001)
end

def test_intermediate_output_g366
  r = spreadsheet.intermediate_output_g366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351610.0735829115,r[:number],0.001)
end

def test_intermediate_output_h366
  r = spreadsheet.intermediate_output_h366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(718180.08996831,r[:number],0.001)
end

def test_intermediate_output_i366
  r = spreadsheet.intermediate_output_i366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1183329.1882851806,r[:number],0.001)
end

def test_intermediate_output_j366
  r = spreadsheet.intermediate_output_j366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1746988.895367688,r[:number],0.001)
end

def test_intermediate_output_k366
  r = spreadsheet.intermediate_output_k366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2407731.357807276,r[:number],0.001)
end

def test_intermediate_output_l366
  r = spreadsheet.intermediate_output_l366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3163585.5947689535,r[:number],0.001)
end

def test_intermediate_output_m366
  r = spreadsheet.intermediate_output_m366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4015221.527165873,r[:number],0.001)
end

def test_intermediate_output_n366
  r = spreadsheet.intermediate_output_n366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4963998.735519782,r[:number],0.001)
end

def test_intermediate_output_p366
  r = spreadsheet.intermediate_output_p366
  assert_equal(:ExcelString,r[:type])
  assert_equal("OPEC+unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q366
  r = spreadsheet.intermediate_output_q366
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r366
  r = spreadsheet.intermediate_output_r366
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_s366
  r = spreadsheet.intermediate_output_s366
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-39722.22222222222,r[:number],0.001)
end

def test_intermediate_output_d367
  r = spreadsheet.intermediate_output_d367
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e367
  r = spreadsheet.intermediate_output_e367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.26242773454,r[:number],0.001)
end

def test_intermediate_output_f367
  r = spreadsheet.intermediate_output_f367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24401.403280908125,r[:number],0.001)
end

def test_intermediate_output_g367
  r = spreadsheet.intermediate_output_g367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43607.828038393345,r[:number],0.001)
end

def test_intermediate_output_h367
  r = spreadsheet.intermediate_output_h367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62656.90193214617,r[:number],0.001)
end

def test_intermediate_output_i367
  r = spreadsheet.intermediate_output_i367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82456.70798170843,r[:number],0.001)
end

def test_intermediate_output_j367
  r = spreadsheet.intermediate_output_j367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102654.50883552192,r[:number],0.001)
end

def test_intermediate_output_k367
  r = spreadsheet.intermediate_output_k367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123281.86494314478,r[:number],0.001)
end

def test_intermediate_output_l367
  r = spreadsheet.intermediate_output_l367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145917.53526742704,r[:number],0.001)
end

def test_intermediate_output_m367
  r = spreadsheet.intermediate_output_m367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169444.75279015908,r[:number],0.001)
end

def test_intermediate_output_n367
  r = spreadsheet.intermediate_output_n367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_intermediate_output_p367
  r = spreadsheet.intermediate_output_p367
  assert_equal(:ExcelString,r[:type])
  assert_equal("En-Roads Max",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q367
  r = spreadsheet.intermediate_output_q367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24702265.11175198,r[:number],0.001)
end

def test_intermediate_output_r367
  r = spreadsheet.intermediate_output_r367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-306811.62222222256,r[:number],0.001)
end

def test_intermediate_output_s367
  r = spreadsheet.intermediate_output_s367
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1006292.2000000001,r[:number],0.001)
end

def test_intermediate_output_f368
  r = spreadsheet.intermediate_output_f368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49202.665708642664,r[:number],0.001)
end

def test_intermediate_output_g368
  r = spreadsheet.intermediate_output_g368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179626.2906769963,r[:number],0.001)
end

def test_intermediate_output_h368
  r = spreadsheet.intermediate_output_h368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275186.3618732252,r[:number],0.001)
end

def test_intermediate_output_i368
  r = spreadsheet.intermediate_output_i368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(372683.92780941766,r[:number],0.001)
end

def test_intermediate_output_j368
  r = spreadsheet.intermediate_output_j368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472876.94246998266,r[:number],0.001)
end

def test_intermediate_output_k368
  r = spreadsheet.intermediate_output_k368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(575154.6125004782,r[:number],0.001)
end

def test_intermediate_output_l368
  r = spreadsheet.intermediate_output_l368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(684316.3356885707,r[:number],0.001)
end

def test_intermediate_output_m368
  r = spreadsheet.intermediate_output_m368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(800169.3289053313,r[:number],0.001)
end

def test_intermediate_output_n368
  r = spreadsheet.intermediate_output_n368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(918820.8165609451,r[:number],0.001)
end

def test_intermediate_output_p368
  r = spreadsheet.intermediate_output_p368
  assert_equal(:ExcelString,r[:type])
  assert_equal("EnRoads Max plus IPCC unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q368
  r = spreadsheet.intermediate_output_q368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14839679.33269246,r[:number],0.001)
end

def test_intermediate_output_r368
  r = spreadsheet.intermediate_output_r368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-132.82222222187556,r[:number],0.001)
end

def test_intermediate_output_s368
  r = spreadsheet.intermediate_output_s368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-96.68888888882066,r[:number],0.001)
end

def test_intermediate_output_f369
  r = spreadsheet.intermediate_output_f369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49202.665708642664,r[:number],0.001)
end

def test_intermediate_output_g369
  r = spreadsheet.intermediate_output_g369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228828.95638563894,r[:number],0.001)
end

def test_intermediate_output_h369
  r = spreadsheet.intermediate_output_h369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504015.3182588641,r[:number],0.001)
end

def test_intermediate_output_i369
  r = spreadsheet.intermediate_output_i369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(876699.2460682818,r[:number],0.001)
end

def test_intermediate_output_j369
  r = spreadsheet.intermediate_output_j369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1349576.1885382645,r[:number],0.001)
end

def test_intermediate_output_k369
  r = spreadsheet.intermediate_output_k369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1924730.8010387425,r[:number],0.001)
end

def test_intermediate_output_l369
  r = spreadsheet.intermediate_output_l369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2609047.1367273135,r[:number],0.001)
end

def test_intermediate_output_m369
  r = spreadsheet.intermediate_output_m369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3409216.465632645,r[:number],0.001)
end

def test_intermediate_output_n369
  r = spreadsheet.intermediate_output_n369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4328037.28219359,r[:number],0.001)
end

def test_intermediate_output_p369
  r = spreadsheet.intermediate_output_p369
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rogner + unconventional",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q369
  r = spreadsheet.intermediate_output_q369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24702265.11175198,r[:number],0.001)
end

def test_intermediate_output_r369
  r = spreadsheet.intermediate_output_r369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1610296.051139743,r[:number],0.001)
end

def test_intermediate_output_s369
  r = spreadsheet.intermediate_output_s369
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4502667.931146884,r[:number],0.001)
end

def test_intermediate_output_p370
  r = spreadsheet.intermediate_output_p370
  assert_equal(:ExcelString,r[:type])
  assert_equal("Your Pathway",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q370
  r = spreadsheet.intermediate_output_q370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4983570.4161964245,r[:number],0.001)
end

def test_intermediate_output_r370
  r = spreadsheet.intermediate_output_r370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4328037.28219359,r[:number],0.001)
end

def test_intermediate_output_s370
  r = spreadsheet.intermediate_output_s370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4963998.735519782,r[:number],0.001)
end

def test_intermediate_output_p371
  r = spreadsheet.intermediate_output_p371
  assert_equal(:ExcelString,r[:type])
  assert_equal("Overshoot",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q371
  r = spreadsheet.intermediate_output_q371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34558374.02824801,r[:number],0.001)
end

def test_intermediate_output_r371
  r = spreadsheet.intermediate_output_r371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5790018.273361966,r[:number],0.001)
end

def test_intermediate_output_s371
  r = spreadsheet.intermediate_output_s371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4502667.931146884,r[:number],0.001)
end

def test_intermediate_output_i374
  r = spreadsheet.intermediate_output_i374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_intermediate_output_d375
  r = spreadsheet.intermediate_output_d375
  assert_equal(:ExcelString,r[:type])
  assert_equal("This is the data used for the sankey diagram in the web tool",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h375
  r = spreadsheet.intermediate_output_h375
  assert_equal(:ExcelString,r[:type])
  assert_equal("From",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i375
  r = spreadsheet.intermediate_output_i375
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j375
  r = spreadsheet.intermediate_output_j375
  assert_equal(:ExcelString,r[:type])
  assert_equal("To",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n375
  r = spreadsheet.intermediate_output_n375
  assert_equal(:ExcelString,r[:type])
  assert_equal("Box",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o375
  r = spreadsheet.intermediate_output_o375
  assert_equal(:ExcelString,r[:type])
  assert_equal("Out",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p375
  r = spreadsheet.intermediate_output_p375
  assert_equal(:ExcelString,r[:type])
  assert_equal("In",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q375
  r = spreadsheet.intermediate_output_q375
  assert_equal(:ExcelString,r[:type])
  assert_equal("Delta",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r375
  r = spreadsheet.intermediate_output_r375
  assert_equal(:ExcelString,r[:type])
  assert_equal("Problem",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h376
  r = spreadsheet.intermediate_output_h376
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i376
  r = spreadsheet.intermediate_output_i376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_j376
  r = spreadsheet.intermediate_output_j376
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n376
  r = spreadsheet.intermediate_output_n376
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o376
  r = spreadsheet.intermediate_output_o376
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p376
  r = spreadsheet.intermediate_output_p376
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q376
  r = spreadsheet.intermediate_output_q376
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r376
  r = spreadsheet.intermediate_output_r376
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s376
  r = spreadsheet.intermediate_output_s376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.49638743214874,r[:number],0.001)
end

def test_intermediate_output_t376
  r = spreadsheet.intermediate_output_t376
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u376
  r = spreadsheet.intermediate_output_u376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.49638743214874,r[:number],0.001)
end

def test_intermediate_output_h377
  r = spreadsheet.intermediate_output_h377
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i377
  r = spreadsheet.intermediate_output_i377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179478.52027866815,r[:number],0.001)
end

def test_intermediate_output_j377
  r = spreadsheet.intermediate_output_j377
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n377
  r = spreadsheet.intermediate_output_n377
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o377
  r = spreadsheet.intermediate_output_o377
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p377
  r = spreadsheet.intermediate_output_p377
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q377
  r = spreadsheet.intermediate_output_q377
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r377
  r = spreadsheet.intermediate_output_r377
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s377
  r = spreadsheet.intermediate_output_s377
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t377
  r = spreadsheet.intermediate_output_t377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.394396627131044,r[:number],0.001)
end

def test_intermediate_output_u377
  r = spreadsheet.intermediate_output_u377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11.394396627131044,r[:number],0.001)
end

def test_intermediate_output_h378
  r = spreadsheet.intermediate_output_h378
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i378
  r = spreadsheet.intermediate_output_i378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_intermediate_output_j378
  r = spreadsheet.intermediate_output_j378
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n378
  r = spreadsheet.intermediate_output_n378
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o378
  r = spreadsheet.intermediate_output_o378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_intermediate_output_p378
  r = spreadsheet.intermediate_output_p378
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q378
  r = spreadsheet.intermediate_output_q378
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r378
  r = spreadsheet.intermediate_output_r378
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s378
  r = spreadsheet.intermediate_output_s378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.4319179503946,r[:number],0.001)
end

def test_intermediate_output_t378
  r = spreadsheet.intermediate_output_t378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.43191795039456,r[:number],0.001)
end

def test_intermediate_output_u378
  r = spreadsheet.intermediate_output_u378
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h379
  r = spreadsheet.intermediate_output_h379
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i379
  r = spreadsheet.intermediate_output_i379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197449.3068200564,r[:number],0.001)
end

def test_intermediate_output_j379
  r = spreadsheet.intermediate_output_j379
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n379
  r = spreadsheet.intermediate_output_n379
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o379
  r = spreadsheet.intermediate_output_o379
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p379
  r = spreadsheet.intermediate_output_p379
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q379
  r = spreadsheet.intermediate_output_q379
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r379
  r = spreadsheet.intermediate_output_r379
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s379
  r = spreadsheet.intermediate_output_s379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number],0.001)
end

def test_intermediate_output_t379
  r = spreadsheet.intermediate_output_t379
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u379
  r = spreadsheet.intermediate_output_u379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number],0.001)
end

def test_intermediate_output_h380
  r = spreadsheet.intermediate_output_h380
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i380
  r = spreadsheet.intermediate_output_i380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_intermediate_output_j380
  r = spreadsheet.intermediate_output_j380
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n380
  r = spreadsheet.intermediate_output_n380
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o380
  r = spreadsheet.intermediate_output_o380
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p380
  r = spreadsheet.intermediate_output_p380
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q380
  r = spreadsheet.intermediate_output_q380
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r380
  r = spreadsheet.intermediate_output_r380
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s380
  r = spreadsheet.intermediate_output_s380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number],0.001)
end

def test_intermediate_output_t380
  r = spreadsheet.intermediate_output_t380
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u380
  r = spreadsheet.intermediate_output_u380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number],0.001)
end

def test_intermediate_output_h381
  r = spreadsheet.intermediate_output_h381
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i381
  r = spreadsheet.intermediate_output_i381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193228.20445165702,r[:number],0.001)
end

def test_intermediate_output_j381
  r = spreadsheet.intermediate_output_j381
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n381
  r = spreadsheet.intermediate_output_n381
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o381
  r = spreadsheet.intermediate_output_o381
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p381
  r = spreadsheet.intermediate_output_p381
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q381
  r = spreadsheet.intermediate_output_q381
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r381
  r = spreadsheet.intermediate_output_r381
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s381
  r = spreadsheet.intermediate_output_s381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.8480139335702,r[:number],0.001)
end

def test_intermediate_output_t381
  r = spreadsheet.intermediate_output_t381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.8480139335702,r[:number],0.001)
end

def test_intermediate_output_u381
  r = spreadsheet.intermediate_output_u381
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h382
  r = spreadsheet.intermediate_output_h382
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i382
  r = spreadsheet.intermediate_output_i382
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j382
  r = spreadsheet.intermediate_output_j382
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n382
  r = spreadsheet.intermediate_output_n382
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o382
  r = spreadsheet.intermediate_output_o382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_intermediate_output_p382
  r = spreadsheet.intermediate_output_p382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_intermediate_output_q382
  r = spreadsheet.intermediate_output_q382
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r382
  r = spreadsheet.intermediate_output_r382
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s382
  r = spreadsheet.intermediate_output_s382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.55506943339304,r[:number],0.001)
end

def test_intermediate_output_t382
  r = spreadsheet.intermediate_output_t382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.55506943339304,r[:number],0.001)
end

def test_intermediate_output_u382
  r = spreadsheet.intermediate_output_u382
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h383
  r = spreadsheet.intermediate_output_h383
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i383
  r = spreadsheet.intermediate_output_i383
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j383
  r = spreadsheet.intermediate_output_j383
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n383
  r = spreadsheet.intermediate_output_n383
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o383
  r = spreadsheet.intermediate_output_o383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179478.52027866815,r[:number],0.001)
end

def test_intermediate_output_p383
  r = spreadsheet.intermediate_output_p383
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q383
  r = spreadsheet.intermediate_output_q383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179478.52027866815,r[:number],0.001)
end

def test_intermediate_output_r383
  r = spreadsheet.intermediate_output_r383
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s383
  r = spreadsheet.intermediate_output_s383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.59006943339304,r[:number],0.001)
end

def test_intermediate_output_t383
  r = spreadsheet.intermediate_output_t383
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u383
  r = spreadsheet.intermediate_output_u383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.59006943339304,r[:number],0.001)
end

def test_intermediate_output_h384
  r = spreadsheet.intermediate_output_h384
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i384
  r = spreadsheet.intermediate_output_i384
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j384
  r = spreadsheet.intermediate_output_j384
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n384
  r = spreadsheet.intermediate_output_n384
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o384
  r = spreadsheet.intermediate_output_o384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_p384
  r = spreadsheet.intermediate_output_p384
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q384
  r = spreadsheet.intermediate_output_q384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_r384
  r = spreadsheet.intermediate_output_r384
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s384
  r = spreadsheet.intermediate_output_s384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_t384
  r = spreadsheet.intermediate_output_t384
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u384
  r = spreadsheet.intermediate_output_u384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_intermediate_output_h385
  r = spreadsheet.intermediate_output_h385
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i385
  r = spreadsheet.intermediate_output_i385
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j385
  r = spreadsheet.intermediate_output_j385
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n385
  r = spreadsheet.intermediate_output_n385
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o385
  r = spreadsheet.intermediate_output_o385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_intermediate_output_p385
  r = spreadsheet.intermediate_output_p385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_intermediate_output_q385
  r = spreadsheet.intermediate_output_q385
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r385
  r = spreadsheet.intermediate_output_r385
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s385
  r = spreadsheet.intermediate_output_s385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.947704428248294,r[:number],0.001)
end

def test_intermediate_output_t385
  r = spreadsheet.intermediate_output_t385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.947704428248294,r[:number],0.001)
end

def test_intermediate_output_u385
  r = spreadsheet.intermediate_output_u385
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h386
  r = spreadsheet.intermediate_output_h386
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i386
  r = spreadsheet.intermediate_output_i386
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j386
  r = spreadsheet.intermediate_output_j386
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n386
  r = spreadsheet.intermediate_output_n386
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o386
  r = spreadsheet.intermediate_output_o386
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p386
  r = spreadsheet.intermediate_output_p386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-34.242058520416805,r[:number],0.001)
end

def test_intermediate_output_q386
  r = spreadsheet.intermediate_output_q386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.242058520416805,r[:number],0.001)
end

def test_intermediate_output_r386
  r = spreadsheet.intermediate_output_r386
  assert_equal(:ExcelString,r[:type])
  assert_equal("error",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s386
  r = spreadsheet.intermediate_output_s386
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t386
  r = spreadsheet.intermediate_output_t386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.45823092617519,r[:number],0.001)
end

def test_intermediate_output_u386
  r = spreadsheet.intermediate_output_u386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.45823092617519,r[:number],0.001)
end

def test_intermediate_output_h387
  r = spreadsheet.intermediate_output_h387
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i387
  r = spreadsheet.intermediate_output_i387
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j387
  r = spreadsheet.intermediate_output_j387
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n387
  r = spreadsheet.intermediate_output_n387
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o387
  r = spreadsheet.intermediate_output_o387
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p387
  r = spreadsheet.intermediate_output_p387
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q387
  r = spreadsheet.intermediate_output_q387
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r387
  r = spreadsheet.intermediate_output_r387
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s387
  r = spreadsheet.intermediate_output_s387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(551.5637593526618,r[:number],0.001)
end

def test_intermediate_output_t387
  r = spreadsheet.intermediate_output_t387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(551.5637593526618,r[:number],0.001)
end

def test_intermediate_output_u387
  r = spreadsheet.intermediate_output_u387
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h388
  r = spreadsheet.intermediate_output_h388
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i388
  r = spreadsheet.intermediate_output_i388
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j388
  r = spreadsheet.intermediate_output_j388
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n388
  r = spreadsheet.intermediate_output_n388
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o388
  r = spreadsheet.intermediate_output_o388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_p388
  r = spreadsheet.intermediate_output_p388
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q388
  r = spreadsheet.intermediate_output_q388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_r388
  r = spreadsheet.intermediate_output_r388
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s388
  r = spreadsheet.intermediate_output_s388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.0,r[:number],0.001)
end

def test_intermediate_output_t388
  r = spreadsheet.intermediate_output_t388
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u388
  r = spreadsheet.intermediate_output_u388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.0,r[:number],0.001)
end

def test_intermediate_output_h389
  r = spreadsheet.intermediate_output_h389
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i389
  r = spreadsheet.intermediate_output_i389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_intermediate_output_j389
  r = spreadsheet.intermediate_output_j389
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n389
  r = spreadsheet.intermediate_output_n389
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o389
  r = spreadsheet.intermediate_output_o389
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p389
  r = spreadsheet.intermediate_output_p389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193938.91228243118,r[:number],0.001)
end

def test_intermediate_output_q389
  r = spreadsheet.intermediate_output_q389
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r389
  r = spreadsheet.intermediate_output_r389
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s389
  r = spreadsheet.intermediate_output_s389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.6393702891703,r[:number],0.001)
end

def test_intermediate_output_t389
  r = spreadsheet.intermediate_output_t389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.63937028917024,r[:number],0.001)
end

def test_intermediate_output_u389
  r = spreadsheet.intermediate_output_u389
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h390
  r = spreadsheet.intermediate_output_h390
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i390
  r = spreadsheet.intermediate_output_i390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_intermediate_output_j390
  r = spreadsheet.intermediate_output_j390
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n390
  r = spreadsheet.intermediate_output_n390
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o390
  r = spreadsheet.intermediate_output_o390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193228.20445165702,r[:number],0.001)
end

def test_intermediate_output_p390
  r = spreadsheet.intermediate_output_p390
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q390
  r = spreadsheet.intermediate_output_q390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193228.20445165702,r[:number],0.001)
end

def test_intermediate_output_r390
  r = spreadsheet.intermediate_output_r390
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s390
  r = spreadsheet.intermediate_output_s390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.91648830119163,r[:number],0.001)
end

def test_intermediate_output_t390
  r = spreadsheet.intermediate_output_t390
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u390
  r = spreadsheet.intermediate_output_u390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.91648830119163,r[:number],0.001)
end

def test_intermediate_output_h391
  r = spreadsheet.intermediate_output_h391
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i391
  r = spreadsheet.intermediate_output_i391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_intermediate_output_j391
  r = spreadsheet.intermediate_output_j391
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n391
  r = spreadsheet.intermediate_output_n391
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o391
  r = spreadsheet.intermediate_output_o391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_intermediate_output_p391
  r = spreadsheet.intermediate_output_p391
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q391
  r = spreadsheet.intermediate_output_q391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_intermediate_output_r391
  r = spreadsheet.intermediate_output_r391
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s391
  r = spreadsheet.intermediate_output_s391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_intermediate_output_t391
  r = spreadsheet.intermediate_output_t391
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u391
  r = spreadsheet.intermediate_output_u391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_intermediate_output_h392
  r = spreadsheet.intermediate_output_h392
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i392
  r = spreadsheet.intermediate_output_i392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_j392
  r = spreadsheet.intermediate_output_j392
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n392
  r = spreadsheet.intermediate_output_n392
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o392
  r = spreadsheet.intermediate_output_o392
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p392
  r = spreadsheet.intermediate_output_p392
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q392
  r = spreadsheet.intermediate_output_q392
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r392
  r = spreadsheet.intermediate_output_r392
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s392
  r = spreadsheet.intermediate_output_s392
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t392
  r = spreadsheet.intermediate_output_t392
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u392
  r = spreadsheet.intermediate_output_u392
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h393
  r = spreadsheet.intermediate_output_h393
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i393
  r = spreadsheet.intermediate_output_i393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_j393
  r = spreadsheet.intermediate_output_j393
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n393
  r = spreadsheet.intermediate_output_n393
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o393
  r = spreadsheet.intermediate_output_o393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_intermediate_output_p393
  r = spreadsheet.intermediate_output_p393
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q393
  r = spreadsheet.intermediate_output_q393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_intermediate_output_r393
  r = spreadsheet.intermediate_output_r393
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s393
  r = spreadsheet.intermediate_output_s393
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t393
  r = spreadsheet.intermediate_output_t393
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u393
  r = spreadsheet.intermediate_output_u393
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h394
  r = spreadsheet.intermediate_output_h394
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i394
  r = spreadsheet.intermediate_output_i394
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j394
  r = spreadsheet.intermediate_output_j394
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n394
  r = spreadsheet.intermediate_output_n394
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o394
  r = spreadsheet.intermediate_output_o394
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p394
  r = spreadsheet.intermediate_output_p394
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q394
  r = spreadsheet.intermediate_output_q394
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r394
  r = spreadsheet.intermediate_output_r394
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s394
  r = spreadsheet.intermediate_output_s394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7012811485283734,r[:number],0.001)
end

def test_intermediate_output_t394
  r = spreadsheet.intermediate_output_t394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7012811485283734,r[:number],0.001)
end

def test_intermediate_output_u394
  r = spreadsheet.intermediate_output_u394
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_n395
  r = spreadsheet.intermediate_output_n395
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o395
  r = spreadsheet.intermediate_output_o395
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p395
  r = spreadsheet.intermediate_output_p395
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q395
  r = spreadsheet.intermediate_output_q395
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r395
  r = spreadsheet.intermediate_output_r395
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s395
  r = spreadsheet.intermediate_output_s395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2094560370498355,r[:number],0.001)
end

def test_intermediate_output_t395
  r = spreadsheet.intermediate_output_t395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2094560370498355,r[:number],0.001)
end

def test_intermediate_output_u395
  r = spreadsheet.intermediate_output_u395
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h396
  r = spreadsheet.intermediate_output_h396
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i396
  r = spreadsheet.intermediate_output_i396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_intermediate_output_j396
  r = spreadsheet.intermediate_output_j396
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n396
  r = spreadsheet.intermediate_output_n396
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o396
  r = spreadsheet.intermediate_output_o396
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p396
  r = spreadsheet.intermediate_output_p396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90349.01323343691,r[:number],0.001)
end

def test_intermediate_output_q396
  r = spreadsheet.intermediate_output_q396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-90349.01323343691,r[:number],0.001)
end

def test_intermediate_output_r396
  r = spreadsheet.intermediate_output_r396
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s396
  r = spreadsheet.intermediate_output_s396
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t396
  r = spreadsheet.intermediate_output_t396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.66839811374751,r[:number],0.001)
end

def test_intermediate_output_u396
  r = spreadsheet.intermediate_output_u396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-100.66839811374751,r[:number],0.001)
end

def test_intermediate_output_h397
  r = spreadsheet.intermediate_output_h397
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i397
  r = spreadsheet.intermediate_output_i397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.0,r[:number],0.001)
end

def test_intermediate_output_j397
  r = spreadsheet.intermediate_output_j397
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n397
  r = spreadsheet.intermediate_output_n397
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o397
  r = spreadsheet.intermediate_output_o397
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p397
  r = spreadsheet.intermediate_output_p397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50981.58297654924,r[:number],0.001)
end

def test_intermediate_output_q397
  r = spreadsheet.intermediate_output_q397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-50981.58297654924,r[:number],0.001)
end

def test_intermediate_output_r397
  r = spreadsheet.intermediate_output_r397
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s397
  r = spreadsheet.intermediate_output_s397
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t397
  r = spreadsheet.intermediate_output_t397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.59644437905297,r[:number],0.001)
end

def test_intermediate_output_u397
  r = spreadsheet.intermediate_output_u397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-272.59644437905297,r[:number],0.001)
end

def test_intermediate_output_h398
  r = spreadsheet.intermediate_output_h398
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i398
  r = spreadsheet.intermediate_output_i398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_intermediate_output_j398
  r = spreadsheet.intermediate_output_j398
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n398
  r = spreadsheet.intermediate_output_n398
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o398
  r = spreadsheet.intermediate_output_o398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_intermediate_output_p398
  r = spreadsheet.intermediate_output_p398
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q398
  r = spreadsheet.intermediate_output_q398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_intermediate_output_r398
  r = spreadsheet.intermediate_output_r398
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s398
  r = spreadsheet.intermediate_output_s398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number],0.001)
end

def test_intermediate_output_t398
  r = spreadsheet.intermediate_output_t398
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u398
  r = spreadsheet.intermediate_output_u398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number],0.001)
end

def test_intermediate_output_h399
  r = spreadsheet.intermediate_output_h399
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i399
  r = spreadsheet.intermediate_output_i399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.7118430555547,r[:number],0.001)
end

def test_intermediate_output_j399
  r = spreadsheet.intermediate_output_j399
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n399
  r = spreadsheet.intermediate_output_n399
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o399
  r = spreadsheet.intermediate_output_o399
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p399
  r = spreadsheet.intermediate_output_p399
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q399
  r = spreadsheet.intermediate_output_q399
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r399
  r = spreadsheet.intermediate_output_r399
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s399
  r = spreadsheet.intermediate_output_s399
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t399
  r = spreadsheet.intermediate_output_t399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.9804755886297,r[:number],0.001)
end

def test_intermediate_output_u399
  r = spreadsheet.intermediate_output_u399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-355.9804755886297,r[:number],0.001)
end

def test_intermediate_output_h400
  r = spreadsheet.intermediate_output_h400
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i400
  r = spreadsheet.intermediate_output_i400
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j400
  r = spreadsheet.intermediate_output_j400
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n400
  r = spreadsheet.intermediate_output_n400
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o400
  r = spreadsheet.intermediate_output_o400
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p400
  r = spreadsheet.intermediate_output_p400
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q400
  r = spreadsheet.intermediate_output_q400
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r400
  r = spreadsheet.intermediate_output_r400
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s400
  r = spreadsheet.intermediate_output_s400
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t400
  r = spreadsheet.intermediate_output_t400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.3002024926071,r[:number],0.001)
end

def test_intermediate_output_u400
  r = spreadsheet.intermediate_output_u400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-186.3002024926071,r[:number],0.001)
end

def test_intermediate_output_h401
  r = spreadsheet.intermediate_output_h401
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i401
  r = spreadsheet.intermediate_output_i401
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j401
  r = spreadsheet.intermediate_output_j401
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n401
  r = spreadsheet.intermediate_output_n401
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o401
  r = spreadsheet.intermediate_output_o401
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p401
  r = spreadsheet.intermediate_output_p401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_intermediate_output_q401
  r = spreadsheet.intermediate_output_q401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.21,r[:number],0.001)
end

def test_intermediate_output_r401
  r = spreadsheet.intermediate_output_r401
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s401
  r = spreadsheet.intermediate_output_s401
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t401
  r = spreadsheet.intermediate_output_t401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.15035135056532,r[:number],0.001)
end

def test_intermediate_output_u401
  r = spreadsheet.intermediate_output_u401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-96.15035135056532,r[:number],0.001)
end

def test_intermediate_output_h402
  r = spreadsheet.intermediate_output_h402
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i402
  r = spreadsheet.intermediate_output_i402
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j402
  r = spreadsheet.intermediate_output_j402
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n402
  r = spreadsheet.intermediate_output_n402
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o402
  r = spreadsheet.intermediate_output_o402
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p402
  r = spreadsheet.intermediate_output_p402
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q402
  r = spreadsheet.intermediate_output_q402
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r402
  r = spreadsheet.intermediate_output_r402
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s402
  r = spreadsheet.intermediate_output_s402
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t402
  r = spreadsheet.intermediate_output_t402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.90673211164959,r[:number],0.001)
end

def test_intermediate_output_u402
  r = spreadsheet.intermediate_output_u402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-72.90673211164959,r[:number],0.001)
end

def test_intermediate_output_h403
  r = spreadsheet.intermediate_output_h403
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i403
  r = spreadsheet.intermediate_output_i403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165297.6510189064,r[:number],0.001)
end

def test_intermediate_output_j403
  r = spreadsheet.intermediate_output_j403
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n403
  r = spreadsheet.intermediate_output_n403
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o403
  r = spreadsheet.intermediate_output_o403
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p403
  r = spreadsheet.intermediate_output_p403
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q403
  r = spreadsheet.intermediate_output_q403
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r403
  r = spreadsheet.intermediate_output_r403
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s403
  r = spreadsheet.intermediate_output_s403
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t403
  r = spreadsheet.intermediate_output_t403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.70002002556289,r[:number],0.001)
end

def test_intermediate_output_u403
  r = spreadsheet.intermediate_output_u403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-62.70002002556289,r[:number],0.001)
end

def test_intermediate_output_h404
  r = spreadsheet.intermediate_output_h404
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i404
  r = spreadsheet.intermediate_output_i404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1300.7303577804782,r[:number],0.001)
end

def test_intermediate_output_j404
  r = spreadsheet.intermediate_output_j404
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n404
  r = spreadsheet.intermediate_output_n404
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o404
  r = spreadsheet.intermediate_output_o404
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p404
  r = spreadsheet.intermediate_output_p404
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q404
  r = spreadsheet.intermediate_output_q404
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r404
  r = spreadsheet.intermediate_output_r404
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s404
  r = spreadsheet.intermediate_output_s404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.1736401050265,r[:number],0.001)
end

def test_intermediate_output_t404
  r = spreadsheet.intermediate_output_t404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.1736401050266,r[:number],0.001)
end

def test_intermediate_output_u404
  r = spreadsheet.intermediate_output_u404
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h405
  r = spreadsheet.intermediate_output_h405
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i405
  r = spreadsheet.intermediate_output_i405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75572.64548088411,r[:number],0.001)
end

def test_intermediate_output_j405
  r = spreadsheet.intermediate_output_j405
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n405
  r = spreadsheet.intermediate_output_n405
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o405
  r = spreadsheet.intermediate_output_o405
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p405
  r = spreadsheet.intermediate_output_p405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154947.78321075535,r[:number],0.001)
end

def test_intermediate_output_q405
  r = spreadsheet.intermediate_output_q405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-154947.78321075535,r[:number],0.001)
end

def test_intermediate_output_r405
  r = spreadsheet.intermediate_output_r405
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s405
  r = spreadsheet.intermediate_output_s405
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t405
  r = spreadsheet.intermediate_output_t405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.6504645311538,r[:number],0.001)
end

def test_intermediate_output_u405
  r = spreadsheet.intermediate_output_u405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-614.6504645311538,r[:number],0.001)
end

def test_intermediate_output_h406
  r = spreadsheet.intermediate_output_h406
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i406
  r = spreadsheet.intermediate_output_i406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_intermediate_output_j406
  r = spreadsheet.intermediate_output_j406
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n406
  r = spreadsheet.intermediate_output_n406
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o406
  r = spreadsheet.intermediate_output_o406
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p406
  r = spreadsheet.intermediate_output_p406
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q406
  r = spreadsheet.intermediate_output_q406
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r406
  r = spreadsheet.intermediate_output_r406
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s406
  r = spreadsheet.intermediate_output_s406
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t406
  r = spreadsheet.intermediate_output_t406
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u406
  r = spreadsheet.intermediate_output_u406
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h407
  r = spreadsheet.intermediate_output_h407
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i407
  r = spreadsheet.intermediate_output_i407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_intermediate_output_j407
  r = spreadsheet.intermediate_output_j407
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n407
  r = spreadsheet.intermediate_output_n407
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o407
  r = spreadsheet.intermediate_output_o407
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p407
  r = spreadsheet.intermediate_output_p407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number],0.001)
end

def test_intermediate_output_q407
  r = spreadsheet.intermediate_output_q407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-22.49614487028552,r[:number],0.001)
end

def test_intermediate_output_r407
  r = spreadsheet.intermediate_output_r407
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s407
  r = spreadsheet.intermediate_output_s407
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t407
  r = spreadsheet.intermediate_output_t407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.046644936214143,r[:number],0.001)
end

def test_intermediate_output_u407
  r = spreadsheet.intermediate_output_u407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-28.046644936214143,r[:number],0.001)
end

def test_intermediate_output_h408
  r = spreadsheet.intermediate_output_h408
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i408
  r = spreadsheet.intermediate_output_i408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107687.59286680566,r[:number],0.001)
end

def test_intermediate_output_j408
  r = spreadsheet.intermediate_output_j408
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n408
  r = spreadsheet.intermediate_output_n408
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o408
  r = spreadsheet.intermediate_output_o408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_intermediate_output_p408
  r = spreadsheet.intermediate_output_p408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_intermediate_output_q408
  r = spreadsheet.intermediate_output_q408
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r408
  r = spreadsheet.intermediate_output_r408
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s408
  r = spreadsheet.intermediate_output_s408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297.14903018646385,r[:number],0.001)
end

def test_intermediate_output_t408
  r = spreadsheet.intermediate_output_t408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297.14903018646385,r[:number],0.001)
end

def test_intermediate_output_u408
  r = spreadsheet.intermediate_output_u408
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h409
  r = spreadsheet.intermediate_output_h409
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i409
  r = spreadsheet.intermediate_output_i409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145308.85661278464,r[:number],0.001)
end

def test_intermediate_output_j409
  r = spreadsheet.intermediate_output_j409
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n409
  r = spreadsheet.intermediate_output_n409
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o409
  r = spreadsheet.intermediate_output_o409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_intermediate_output_p409
  r = spreadsheet.intermediate_output_p409
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q409
  r = spreadsheet.intermediate_output_q409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_intermediate_output_r409
  r = spreadsheet.intermediate_output_r409
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s409
  r = spreadsheet.intermediate_output_s409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.9888000000001,r[:number],0.001)
end

def test_intermediate_output_t409
  r = spreadsheet.intermediate_output_t409
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u409
  r = spreadsheet.intermediate_output_u409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.9888000000001,r[:number],0.001)
end

def test_intermediate_output_h410
  r = spreadsheet.intermediate_output_h410
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i410
  r = spreadsheet.intermediate_output_i410
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j410
  r = spreadsheet.intermediate_output_j410
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n410
  r = spreadsheet.intermediate_output_n410
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o410
  r = spreadsheet.intermediate_output_o410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_intermediate_output_p410
  r = spreadsheet.intermediate_output_p410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_intermediate_output_q410
  r = spreadsheet.intermediate_output_q410
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r410
  r = spreadsheet.intermediate_output_r410
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s410
  r = spreadsheet.intermediate_output_s410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.5771354262274,r[:number],0.001)
end

def test_intermediate_output_t410
  r = spreadsheet.intermediate_output_t410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.5771354262274,r[:number],0.001)
end

def test_intermediate_output_u410
  r = spreadsheet.intermediate_output_u410
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h411
  r = spreadsheet.intermediate_output_h411
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i411
  r = spreadsheet.intermediate_output_i411
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j411
  r = spreadsheet.intermediate_output_j411
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n411
  r = spreadsheet.intermediate_output_n411
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o411
  r = spreadsheet.intermediate_output_o411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197449.3068200564,r[:number],0.001)
end

def test_intermediate_output_p411
  r = spreadsheet.intermediate_output_p411
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q411
  r = spreadsheet.intermediate_output_q411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197449.3068200564,r[:number],0.001)
end

def test_intermediate_output_r411
  r = spreadsheet.intermediate_output_r411
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s411
  r = spreadsheet.intermediate_output_s411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(373.87377542238823,r[:number],0.001)
end

def test_intermediate_output_t411
  r = spreadsheet.intermediate_output_t411
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u411
  r = spreadsheet.intermediate_output_u411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(373.87377542238823,r[:number],0.001)
end

def test_intermediate_output_h412
  r = spreadsheet.intermediate_output_h412
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i412
  r = spreadsheet.intermediate_output_i412
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j412
  r = spreadsheet.intermediate_output_j412
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n412
  r = spreadsheet.intermediate_output_n412
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o412
  r = spreadsheet.intermediate_output_o412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_intermediate_output_p412
  r = spreadsheet.intermediate_output_p412
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q412
  r = spreadsheet.intermediate_output_q412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_intermediate_output_r412
  r = spreadsheet.intermediate_output_r412
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s412
  r = spreadsheet.intermediate_output_s412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_intermediate_output_t412
  r = spreadsheet.intermediate_output_t412
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u412
  r = spreadsheet.intermediate_output_u412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_intermediate_output_h413
  r = spreadsheet.intermediate_output_h413
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i413
  r = spreadsheet.intermediate_output_i413
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j413
  r = spreadsheet.intermediate_output_j413
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n413
  r = spreadsheet.intermediate_output_n413
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o413
  r = spreadsheet.intermediate_output_o413
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p413
  r = spreadsheet.intermediate_output_p413
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q413
  r = spreadsheet.intermediate_output_q413
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r413
  r = spreadsheet.intermediate_output_r413
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s413
  r = spreadsheet.intermediate_output_s413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.072098478484804,r[:number],0.001)
end

def test_intermediate_output_t413
  r = spreadsheet.intermediate_output_t413
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u413
  r = spreadsheet.intermediate_output_u413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.072098478484804,r[:number],0.001)
end

def test_intermediate_output_h414
  r = spreadsheet.intermediate_output_h414
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i414
  r = spreadsheet.intermediate_output_i414
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j414
  r = spreadsheet.intermediate_output_j414
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n414
  r = spreadsheet.intermediate_output_n414
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o414
  r = spreadsheet.intermediate_output_o414
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p414
  r = spreadsheet.intermediate_output_p414
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q414
  r = spreadsheet.intermediate_output_q414
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r414
  r = spreadsheet.intermediate_output_r414
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s414
  r = spreadsheet.intermediate_output_s414
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t414
  r = spreadsheet.intermediate_output_t414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.288314718968195,r[:number],0.001)
end

def test_intermediate_output_u414
  r = spreadsheet.intermediate_output_u414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-61.288314718968195,r[:number],0.001)
end

def test_intermediate_output_h415
  r = spreadsheet.intermediate_output_h415
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i415
  r = spreadsheet.intermediate_output_i415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_intermediate_output_j415
  r = spreadsheet.intermediate_output_j415
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n415
  r = spreadsheet.intermediate_output_n415
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o415
  r = spreadsheet.intermediate_output_o415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_intermediate_output_p415
  r = spreadsheet.intermediate_output_p415
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q415
  r = spreadsheet.intermediate_output_q415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_intermediate_output_r415
  r = spreadsheet.intermediate_output_r415
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s415
  r = spreadsheet.intermediate_output_s415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.41553252431277,r[:number],0.001)
end

def test_intermediate_output_t415
  r = spreadsheet.intermediate_output_t415
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u415
  r = spreadsheet.intermediate_output_u415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.41553252431277,r[:number],0.001)
end

def test_intermediate_output_h416
  r = spreadsheet.intermediate_output_h416
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i416
  r = spreadsheet.intermediate_output_i416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2824.7156436528894,r[:number],0.001)
end

def test_intermediate_output_j416
  r = spreadsheet.intermediate_output_j416
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n416
  r = spreadsheet.intermediate_output_n416
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o416
  r = spreadsheet.intermediate_output_o416
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p416
  r = spreadsheet.intermediate_output_p416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3214.1086823694945,r[:number],0.001)
end

def test_intermediate_output_q416
  r = spreadsheet.intermediate_output_q416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3214.1086823694945,r[:number],0.001)
end

def test_intermediate_output_r416
  r = spreadsheet.intermediate_output_r416
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s416
  r = spreadsheet.intermediate_output_s416
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t416
  r = spreadsheet.intermediate_output_t416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.302960702035355,r[:number],0.001)
end

def test_intermediate_output_u416
  r = spreadsheet.intermediate_output_u416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.302960702035355,r[:number],0.001)
end

def test_intermediate_output_h417
  r = spreadsheet.intermediate_output_h417
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i417
  r = spreadsheet.intermediate_output_i417
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j417
  r = spreadsheet.intermediate_output_j417
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n417
  r = spreadsheet.intermediate_output_n417
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o417
  r = spreadsheet.intermediate_output_o417
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p417
  r = spreadsheet.intermediate_output_p417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77313.72151028871,r[:number],0.001)
end

def test_intermediate_output_q417
  r = spreadsheet.intermediate_output_q417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-77313.72151028871,r[:number],0.001)
end

def test_intermediate_output_r417
  r = spreadsheet.intermediate_output_r417
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s417
  r = spreadsheet.intermediate_output_s417
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t417
  r = spreadsheet.intermediate_output_t417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.54009825396582,r[:number],0.001)
end

def test_intermediate_output_u417
  r = spreadsheet.intermediate_output_u417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-164.54009825396582,r[:number],0.001)
end

def test_intermediate_output_h418
  r = spreadsheet.intermediate_output_h418
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i418
  r = spreadsheet.intermediate_output_i418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_intermediate_output_j418
  r = spreadsheet.intermediate_output_j418
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n418
  r = spreadsheet.intermediate_output_n418
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o418
  r = spreadsheet.intermediate_output_o418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_p418
  r = spreadsheet.intermediate_output_p418
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q418
  r = spreadsheet.intermediate_output_q418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_r418
  r = spreadsheet.intermediate_output_r418
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s418
  r = spreadsheet.intermediate_output_s418
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t418
  r = spreadsheet.intermediate_output_t418
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u418
  r = spreadsheet.intermediate_output_u418
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h419
  r = spreadsheet.intermediate_output_h419
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i419
  r = spreadsheet.intermediate_output_i419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_intermediate_output_j419
  r = spreadsheet.intermediate_output_j419
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n419
  r = spreadsheet.intermediate_output_n419
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o419
  r = spreadsheet.intermediate_output_o419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_p419
  r = spreadsheet.intermediate_output_p419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_intermediate_output_q419
  r = spreadsheet.intermediate_output_q419
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r419
  r = spreadsheet.intermediate_output_r419
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s419
  r = spreadsheet.intermediate_output_s419
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t419
  r = spreadsheet.intermediate_output_t419
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u419
  r = spreadsheet.intermediate_output_u419
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h420
  r = spreadsheet.intermediate_output_h420
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i420
  r = spreadsheet.intermediate_output_i420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_intermediate_output_j420
  r = spreadsheet.intermediate_output_j420
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n420
  r = spreadsheet.intermediate_output_n420
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o420
  r = spreadsheet.intermediate_output_o420
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_p420
  r = spreadsheet.intermediate_output_p420
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q420
  r = spreadsheet.intermediate_output_q420
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r420
  r = spreadsheet.intermediate_output_r420
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s420
  r = spreadsheet.intermediate_output_s420
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t420
  r = spreadsheet.intermediate_output_t420
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u420
  r = spreadsheet.intermediate_output_u420
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h421
  r = spreadsheet.intermediate_output_h421
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i421
  r = spreadsheet.intermediate_output_i421
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j421
  r = spreadsheet.intermediate_output_j421
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n421
  r = spreadsheet.intermediate_output_n421
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o421
  r = spreadsheet.intermediate_output_o421
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p421
  r = spreadsheet.intermediate_output_p421
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_q421
  r = spreadsheet.intermediate_output_q421
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r421
  r = spreadsheet.intermediate_output_r421
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s421
  r = spreadsheet.intermediate_output_s421
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(448.3424689522869,r[:number],0.001)
end

def test_intermediate_output_t421
  r = spreadsheet.intermediate_output_t421
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(448.34246895228694,r[:number],0.001)
end

def test_intermediate_output_u421
  r = spreadsheet.intermediate_output_u421
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h422
  r = spreadsheet.intermediate_output_h422
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i422
  r = spreadsheet.intermediate_output_i422
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j422
  r = spreadsheet.intermediate_output_j422
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n422
  r = spreadsheet.intermediate_output_n422
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o422
  r = spreadsheet.intermediate_output_o422
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(254755.94645328785,r[:number],0.001)
end

def test_intermediate_output_p422
  r = spreadsheet.intermediate_output_p422
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(254755.94645328785,r[:number],0.001)
end

def test_intermediate_output_q422
  r = spreadsheet.intermediate_output_q422
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_r422
  r = spreadsheet.intermediate_output_r422
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s422
  r = spreadsheet.intermediate_output_s422
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(927.9827519145847,r[:number],0.001)
end

def test_intermediate_output_t422
  r = spreadsheet.intermediate_output_t422
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(927.9827519145847,r[:number],0.001)
end

def test_intermediate_output_u422
  r = spreadsheet.intermediate_output_u422
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h423
  r = spreadsheet.intermediate_output_h423
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i423
  r = spreadsheet.intermediate_output_i423
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7809.146182024884,r[:number],0.001)
end

def test_intermediate_output_j423
  r = spreadsheet.intermediate_output_j423
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n423
  r = spreadsheet.intermediate_output_n423
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o423
  r = spreadsheet.intermediate_output_o423
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p423
  r = spreadsheet.intermediate_output_p423
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q423
  r = spreadsheet.intermediate_output_q423
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r423
  r = spreadsheet.intermediate_output_r423
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s423
  r = spreadsheet.intermediate_output_s423
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t423
  r = spreadsheet.intermediate_output_t423
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u423
  r = spreadsheet.intermediate_output_u423
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h424
  r = spreadsheet.intermediate_output_h424
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i424
  r = spreadsheet.intermediate_output_i424
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j424
  r = spreadsheet.intermediate_output_j424
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n424
  r = spreadsheet.intermediate_output_n424
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o424
  r = spreadsheet.intermediate_output_o424
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_p424
  r = spreadsheet.intermediate_output_p424
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q424
  r = spreadsheet.intermediate_output_q424
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_r424
  r = spreadsheet.intermediate_output_r424
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_s424
  r = spreadsheet.intermediate_output_s424
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.0095179564277,r[:number],0.001)
end

def test_intermediate_output_t424
  r = spreadsheet.intermediate_output_t424
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u424
  r = spreadsheet.intermediate_output_u424
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.0095179564277,r[:number],0.001)
end

def test_intermediate_output_h425
  r = spreadsheet.intermediate_output_h425
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i425
  r = spreadsheet.intermediate_output_i425
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j425
  r = spreadsheet.intermediate_output_j425
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n425
  r = spreadsheet.intermediate_output_n425
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o425
  r = spreadsheet.intermediate_output_o425
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_intermediate_output_p425
  r = spreadsheet.intermediate_output_p425
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q425
  r = spreadsheet.intermediate_output_q425
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_intermediate_output_r425
  r = spreadsheet.intermediate_output_r425
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s425
  r = spreadsheet.intermediate_output_s425
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_t425
  r = spreadsheet.intermediate_output_t425
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u425
  r = spreadsheet.intermediate_output_u425
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_h426
  r = spreadsheet.intermediate_output_h426
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i426
  r = spreadsheet.intermediate_output_i426
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j426
  r = spreadsheet.intermediate_output_j426
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n426
  r = spreadsheet.intermediate_output_n426
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o426
  r = spreadsheet.intermediate_output_o426
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2824.7156436528894,r[:number],0.001)
end

def test_intermediate_output_p426
  r = spreadsheet.intermediate_output_p426
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_q426
  r = spreadsheet.intermediate_output_q426
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2824.7156436528894,r[:number],0.001)
end

def test_intermediate_output_r426
  r = spreadsheet.intermediate_output_r426
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s426
  r = spreadsheet.intermediate_output_s426
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.39043532000001,r[:number],0.001)
end

def test_intermediate_output_t426
  r = spreadsheet.intermediate_output_t426
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_u426
  r = spreadsheet.intermediate_output_u426
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.39043532000001,r[:number],0.001)
end

def test_intermediate_output_h427
  r = spreadsheet.intermediate_output_h427
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i427
  r = spreadsheet.intermediate_output_i427
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j427
  r = spreadsheet.intermediate_output_j427
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h428
  r = spreadsheet.intermediate_output_h428
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i428
  r = spreadsheet.intermediate_output_i428
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j428
  r = spreadsheet.intermediate_output_j428
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h429
  r = spreadsheet.intermediate_output_h429
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i429
  r = spreadsheet.intermediate_output_i429
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j429
  r = spreadsheet.intermediate_output_j429
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h430
  r = spreadsheet.intermediate_output_h430
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i430
  r = spreadsheet.intermediate_output_i430
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_intermediate_output_j430
  r = spreadsheet.intermediate_output_j430
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h431
  r = spreadsheet.intermediate_output_h431
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i431
  r = spreadsheet.intermediate_output_i431
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j431
  r = spreadsheet.intermediate_output_j431
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h432
  r = spreadsheet.intermediate_output_h432
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i432
  r = spreadsheet.intermediate_output_i432
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j432
  r = spreadsheet.intermediate_output_j432
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h433
  r = spreadsheet.intermediate_output_h433
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i433
  r = spreadsheet.intermediate_output_i433
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j433
  r = spreadsheet.intermediate_output_j433
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h434
  r = spreadsheet.intermediate_output_h434
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i434
  r = spreadsheet.intermediate_output_i434
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j434
  r = spreadsheet.intermediate_output_j434
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h435
  r = spreadsheet.intermediate_output_h435
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i435
  r = spreadsheet.intermediate_output_i435
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_intermediate_output_j435
  r = spreadsheet.intermediate_output_j435
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h436
  r = spreadsheet.intermediate_output_h436
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i436
  r = spreadsheet.intermediate_output_i436
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j436
  r = spreadsheet.intermediate_output_j436
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h437
  r = spreadsheet.intermediate_output_h437
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i437
  r = spreadsheet.intermediate_output_i437
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12383.466360618835,r[:number],0.001)
end

def test_intermediate_output_j437
  r = spreadsheet.intermediate_output_j437
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h438
  r = spreadsheet.intermediate_output_h438
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i438
  r = spreadsheet.intermediate_output_i438
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j438
  r = spreadsheet.intermediate_output_j438
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h439
  r = spreadsheet.intermediate_output_h439
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i439
  r = spreadsheet.intermediate_output_i439
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j439
  r = spreadsheet.intermediate_output_j439
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h440
  r = spreadsheet.intermediate_output_h440
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i440
  r = spreadsheet.intermediate_output_i440
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38598.116615930405,r[:number],0.001)
end

def test_intermediate_output_j440
  r = spreadsheet.intermediate_output_j440
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h441
  r = spreadsheet.intermediate_output_h441
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i441
  r = spreadsheet.intermediate_output_i441
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10770.023770183341,r[:number],0.001)
end

def test_intermediate_output_j441
  r = spreadsheet.intermediate_output_j441
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h442
  r = spreadsheet.intermediate_output_h442
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i442
  r = spreadsheet.intermediate_output_i442
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j442
  r = spreadsheet.intermediate_output_j442
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h443
  r = spreadsheet.intermediate_output_h443
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i443
  r = spreadsheet.intermediate_output_i443
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j443
  r = spreadsheet.intermediate_output_j443
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h444
  r = spreadsheet.intermediate_output_h444
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i444
  r = spreadsheet.intermediate_output_i444
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54484.66717906631,r[:number],0.001)
end

def test_intermediate_output_j444
  r = spreadsheet.intermediate_output_j444
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h445
  r = spreadsheet.intermediate_output_h445
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i445
  r = spreadsheet.intermediate_output_i445
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33952.145184989626,r[:number],0.001)
end

def test_intermediate_output_j445
  r = spreadsheet.intermediate_output_j445
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h446
  r = spreadsheet.intermediate_output_h446
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i446
  r = spreadsheet.intermediate_output_i446
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j446
  r = spreadsheet.intermediate_output_j446
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h447
  r = spreadsheet.intermediate_output_h447
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i447
  r = spreadsheet.intermediate_output_i447
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29678.99668062612,r[:number],0.001)
end

def test_intermediate_output_j447
  r = spreadsheet.intermediate_output_j447
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h448
  r = spreadsheet.intermediate_output_h448
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i448
  r = spreadsheet.intermediate_output_i448
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j448
  r = spreadsheet.intermediate_output_j448
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h449
  r = spreadsheet.intermediate_output_h449
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i449
  r = spreadsheet.intermediate_output_i449
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j449
  r = spreadsheet.intermediate_output_j449
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h450
  r = spreadsheet.intermediate_output_h450
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i450
  r = spreadsheet.intermediate_output_i450
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j450
  r = spreadsheet.intermediate_output_j450
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h451
  r = spreadsheet.intermediate_output_h451
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i451
  r = spreadsheet.intermediate_output_i451
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16781.297422006362,r[:number],0.001)
end

def test_intermediate_output_j451
  r = spreadsheet.intermediate_output_j451
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h452
  r = spreadsheet.intermediate_output_h452
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i452
  r = spreadsheet.intermediate_output_i452
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j452
  r = spreadsheet.intermediate_output_j452
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h453
  r = spreadsheet.intermediate_output_h453
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i453
  r = spreadsheet.intermediate_output_i453
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j453
  r = spreadsheet.intermediate_output_j453
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h454
  r = spreadsheet.intermediate_output_h454
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i454
  r = spreadsheet.intermediate_output_i454
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j454
  r = spreadsheet.intermediate_output_j454
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h455
  r = spreadsheet.intermediate_output_h455
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i455
  r = spreadsheet.intermediate_output_i455
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j455
  r = spreadsheet.intermediate_output_j455
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h456
  r = spreadsheet.intermediate_output_h456
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i456
  r = spreadsheet.intermediate_output_i456
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j456
  r = spreadsheet.intermediate_output_j456
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h457
  r = spreadsheet.intermediate_output_h457
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i457
  r = spreadsheet.intermediate_output_i457
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.547563558818,r[:number],0.001)
end

def test_intermediate_output_j457
  r = spreadsheet.intermediate_output_j457
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h458
  r = spreadsheet.intermediate_output_h458
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i458
  r = spreadsheet.intermediate_output_i458
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74103.17394672989,r[:number],0.001)
end

def test_intermediate_output_j458
  r = spreadsheet.intermediate_output_j458
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h459
  r = spreadsheet.intermediate_output_h459
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i459
  r = spreadsheet.intermediate_output_i459
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.6970912933234,r[:number],0.001)
end

def test_intermediate_output_j459
  r = spreadsheet.intermediate_output_j459
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h460
  r = spreadsheet.intermediate_output_h460
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i460
  r = spreadsheet.intermediate_output_i460
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.411591076171332,r[:number],0.001)
end

def test_intermediate_output_j460
  r = spreadsheet.intermediate_output_j460
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h461
  r = spreadsheet.intermediate_output_h461
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i461
  r = spreadsheet.intermediate_output_i461
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-34.242058520416805,r[:number],0.001)
end

def test_intermediate_output_j461
  r = spreadsheet.intermediate_output_j461
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h462
  r = spreadsheet.intermediate_output_h462
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i462
  r = spreadsheet.intermediate_output_i462
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number],0.001)
end

def test_intermediate_output_j462
  r = spreadsheet.intermediate_output_j462
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h463
  r = spreadsheet.intermediate_output_h463
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i463
  r = spreadsheet.intermediate_output_i463
  assert_equal(:ExcelError,r[:type])
end

def test_intermediate_output_j463
  r = spreadsheet.intermediate_output_j463
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h464
  r = spreadsheet.intermediate_output_h464
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i464
  r = spreadsheet.intermediate_output_i464
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_intermediate_output_j464
  r = spreadsheet.intermediate_output_j464
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h465
  r = spreadsheet.intermediate_output_h465
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i465
  r = spreadsheet.intermediate_output_i465
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_intermediate_output_j465
  r = spreadsheet.intermediate_output_j465
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h466
  r = spreadsheet.intermediate_output_h466
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i466
  r = spreadsheet.intermediate_output_i466
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1345.0685728902897,r[:number],0.001)
end

def test_intermediate_output_j466
  r = spreadsheet.intermediate_output_j466
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end


  # start of Land Use
def test_land_use_b2
  r = spreadsheet.land_use_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land use implications",r[:string].force_encoding('utf-8'))
end

def test_land_use_c4
  r = spreadsheet.land_use_c4
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.01",r[:string].force_encoding('utf-8'))
end

def test_land_use_d4
  r = spreadsheet.land_use_d4
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK Land area",r[:string].force_encoding('utf-8'))
end

def test_land_use_h4
  r = spreadsheet.land_use_h4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_land_use_i4
  r = spreadsheet.land_use_i4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_land_use_j4
  r = spreadsheet.land_use_j4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_land_use_k4
  r = spreadsheet.land_use_k4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_land_use_l4
  r = spreadsheet.land_use_l4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_land_use_m4
  r = spreadsheet.land_use_m4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_land_use_n4
  r = spreadsheet.land_use_n4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_land_use_o4
  r = spreadsheet.land_use_o4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_land_use_p4
  r = spreadsheet.land_use_p4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_land_use_q4
  r = spreadsheet.land_use_q4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_land_use_r4
  r = spreadsheet.land_use_r4
  assert_equal(:ExcelString,r[:type])
  assert_equal("ha",r[:string].force_encoding('utf-8'))
end

def test_land_use_c6
  r = spreadsheet.land_use_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_land_use_d6
  r = spreadsheet.land_use_d6
  assert_equal(:ExcelString,r[:type])
  assert_equal("onshore wind if 2.5 W/m2",r[:string].force_encoding('utf-8'))
end

def test_land_use_h6
  r = spreadsheet.land_use_h6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1171694.5448511622,r[:number],0.001)
end

def test_land_use_i6
  r = spreadsheet.land_use_i6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1171694.5448511622,r[:number],0.001)
end

def test_land_use_j6
  r = spreadsheet.land_use_j6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2941492.5812163074,r[:number],0.001)
end

def test_land_use_k6
  r = spreadsheet.land_use_k6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5278590.897489511,r[:number],0.001)
end

def test_land_use_l6
  r = spreadsheet.land_use_l6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6742374.274295507,r[:number],0.001)
end

def test_land_use_m6
  r = spreadsheet.land_use_m6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8001615.221828584,r[:number],0.001)
end

def test_land_use_n6
  r = spreadsheet.land_use_n6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8957666.133099161,r[:number],0.001)
end

def test_land_use_o6
  r = spreadsheet.land_use_o6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9772951.778174011,r[:number],0.001)
end

def test_land_use_p6
  r = spreadsheet.land_use_p6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10271897.825806417,r[:number],0.001)
end

def test_land_use_q6
  r = spreadsheet.land_use_q6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10649007.336211646,r[:number],0.001)
end

def test_land_use_c7
  r = spreadsheet.land_use_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d7
  r = spreadsheet.land_use_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("hydroelectric resevoir assuming similar to Loch Sloy",r[:string].force_encoding('utf-8'))
end

def test_land_use_h7
  r = spreadsheet.land_use_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3295636.3636363633,r[:number],0.001)
end

def test_land_use_i7
  r = spreadsheet.land_use_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3295636.3636363633,r[:number],0.001)
end

def test_land_use_j7
  r = spreadsheet.land_use_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3705715.1955902516,r[:number],0.001)
end

def test_land_use_k7
  r = spreadsheet.land_use_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4115794.02754414,r[:number],0.001)
end

def test_land_use_l7
  r = spreadsheet.land_use_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4388825.230133195,r[:number],0.001)
end

def test_land_use_m7
  r = spreadsheet.land_use_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4638614.8841256555,r[:number],0.001)
end

def test_land_use_n7
  r = spreadsheet.land_use_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4885367.111620082,r[:number],0.001)
end

def test_land_use_o7
  r = spreadsheet.land_use_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5042116.208898416,r[:number],0.001)
end

def test_land_use_p7
  r = spreadsheet.land_use_p7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5149180.885487885,r[:number],0.001)
end

def test_land_use_q7
  r = spreadsheet.land_use_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5233721.610512726,r[:number],0.001)
end

def test_land_use_c8
  r = spreadsheet.land_use_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d8
  r = spreadsheet.land_use_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("solar PV if 20% efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h8
  r = spreadsheet.land_use_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10391.248636363634,r[:number],0.001)
end

def test_land_use_i8
  r = spreadsheet.land_use_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18727.272727272724,r[:number],0.001)
end

def test_land_use_j8
  r = spreadsheet.land_use_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18727.272727272724,r[:number],0.001)
end

def test_land_use_k8
  r = spreadsheet.land_use_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89612.96620300405,r[:number],0.001)
end

def test_land_use_l8
  r = spreadsheet.land_use_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112398.83373653443,r[:number],0.001)
end

def test_land_use_m8
  r = spreadsheet.land_use_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136088.57094346374,r[:number],0.001)
end

def test_land_use_n8
  r = spreadsheet.land_use_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152189.43705098593,r[:number],0.001)
end

def test_land_use_o8
  r = spreadsheet.land_use_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161746.65896512882,r[:number],0.001)
end

def test_land_use_p8
  r = spreadsheet.land_use_p8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170076.92733076043,r[:number],0.001)
end

def test_land_use_q8
  r = spreadsheet.land_use_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178117.9203246938,r[:number],0.001)
end

def test_land_use_c9
  r = spreadsheet.land_use_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d9
  r = spreadsheet.land_use_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("solar thermal panels if 50% efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h9
  r = spreadsheet.land_use_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11522.941023283254,r[:number],0.001)
end

def test_land_use_i9
  r = spreadsheet.land_use_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10841.887442972158,r[:number],0.001)
end

def test_land_use_j9
  r = spreadsheet.land_use_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10572.662597994138,r[:number],0.001)
end

def test_land_use_k9
  r = spreadsheet.land_use_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10115.903871255576,r[:number],0.001)
end

def test_land_use_l9
  r = spreadsheet.land_use_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9398.894749523672,r[:number],0.001)
end

def test_land_use_m9
  r = spreadsheet.land_use_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8352.939427753003,r[:number],0.001)
end

def test_land_use_n9
  r = spreadsheet.land_use_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6951.217222709881,r[:number],0.001)
end

def test_land_use_o9
  r = spreadsheet.land_use_o9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5148.338890992199,r[:number],0.001)
end

def test_land_use_p9
  r = spreadsheet.land_use_p9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2866.560609756411,r[:number],0.001)
end

def test_land_use_q9
  r = spreadsheet.land_use_q9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_c10
  r = spreadsheet.land_use_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_land_use_d10
  r = spreadsheet.land_use_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("micro wind if 2 Wpeak/m2",r[:string].force_encoding('utf-8'))
end

def test_land_use_h10
  r = spreadsheet.land_use_h10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_i10
  r = spreadsheet.land_use_i10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_j10
  r = spreadsheet.land_use_j10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_k10
  r = spreadsheet.land_use_k10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_l10
  r = spreadsheet.land_use_l10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_m10
  r = spreadsheet.land_use_m10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_n10
  r = spreadsheet.land_use_n10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_o10
  r = spreadsheet.land_use_o10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_p10
  r = spreadsheet.land_use_p10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_q10
  r = spreadsheet.land_use_q10
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_c11
  r = spreadsheet.land_use_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Biocrop",r[:string].force_encoding('utf-8'))
end

def test_land_use_d11
  r = spreadsheet.land_use_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area of biocrops",r[:string].force_encoding('utf-8'))
end

def test_land_use_h11
  r = spreadsheet.land_use_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_i11
  r = spreadsheet.land_use_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_j11
  r = spreadsheet.land_use_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_k11
  r = spreadsheet.land_use_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_l11
  r = spreadsheet.land_use_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_m11
  r = spreadsheet.land_use_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_n11
  r = spreadsheet.land_use_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_o11
  r = spreadsheet.land_use_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_p11
  r = spreadsheet.land_use_p11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_q11
  r = spreadsheet.land_use_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24992607.63506936,r[:number],0.001)
end

def test_land_use_c12
  r = spreadsheet.land_use_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Forestry",r[:string].force_encoding('utf-8'))
end

def test_land_use_d12
  r = spreadsheet.land_use_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area of forest",r[:string].force_encoding('utf-8'))
end

def test_land_use_h12
  r = spreadsheet.land_use_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4033060000.0,r[:number],0.001)
end

def test_land_use_i12
  r = spreadsheet.land_use_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4033060000.0,r[:number],0.001)
end

def test_land_use_j12
  r = spreadsheet.land_use_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3996552500.0,r[:number],0.001)
end

def test_land_use_k12
  r = spreadsheet.land_use_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3960045000.0,r[:number],0.001)
end

def test_land_use_l12
  r = spreadsheet.land_use_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3923537500.0,r[:number],0.001)
end

def test_land_use_m12
  r = spreadsheet.land_use_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3887030000.0,r[:number],0.001)
end

def test_land_use_n12
  r = spreadsheet.land_use_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3850522500.0,r[:number],0.001)
end

def test_land_use_o12
  r = spreadsheet.land_use_o12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3814015000.0,r[:number],0.001)
end

def test_land_use_p12
  r = spreadsheet.land_use_p12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3777507500.0,r[:number],0.001)
end

def test_land_use_q12
  r = spreadsheet.land_use_q12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3741000000.0,r[:number],0.001)
end

def test_land_use_c14
  r = spreadsheet.land_use_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.04",r[:string].force_encoding('utf-8'))
end

def test_land_use_d14
  r = spreadsheet.land_use_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK Sea area",r[:string].force_encoding('utf-8'))
end

def test_land_use_h14
  r = spreadsheet.land_use_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_land_use_i14
  r = spreadsheet.land_use_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_land_use_j14
  r = spreadsheet.land_use_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_land_use_k14
  r = spreadsheet.land_use_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_land_use_l14
  r = spreadsheet.land_use_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_land_use_m14
  r = spreadsheet.land_use_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_land_use_n14
  r = spreadsheet.land_use_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_land_use_o14
  r = spreadsheet.land_use_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_land_use_p14
  r = spreadsheet.land_use_p14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_land_use_q14
  r = spreadsheet.land_use_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_land_use_r14
  r = spreadsheet.land_use_r14
  assert_equal(:ExcelString,r[:type])
  assert_equal("ha",r[:string].force_encoding('utf-8'))
end

def test_land_use_c16
  r = spreadsheet.land_use_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_land_use_d16
  r = spreadsheet.land_use_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("offshore wind area if 2.5 W/m2",r[:string].force_encoding('utf-8'))
end

def test_land_use_h16
  r = spreadsheet.land_use_h16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11319.999999999998,r[:number],0.001)
end

def test_land_use_i16
  r = spreadsheet.land_use_i16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20999.999999999993,r[:number],0.001)
end

def test_land_use_j16
  r = spreadsheet.land_use_j16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140000.0,r[:number],0.001)
end

def test_land_use_k16
  r = spreadsheet.land_use_k16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441492.547772444,r[:number],0.001)
end

def test_land_use_l16
  r = spreadsheet.land_use_l16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(764593.317226715,r[:number],0.001)
end

def test_land_use_m16
  r = spreadsheet.land_use_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1094937.0689796514,r[:number],0.001)
end

def test_land_use_n16
  r = spreadsheet.land_use_n16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1494054.4816201122,r[:number],0.001)
end

def test_land_use_o16
  r = spreadsheet.land_use_o16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1859598.5669378578,r[:number],0.001)
end

def test_land_use_p16
  r = spreadsheet.land_use_p16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1984036.5175144135,r[:number],0.001)
end

def test_land_use_q16
  r = spreadsheet.land_use_q16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2240409.2444540593,r[:number],0.001)
end

def test_land_use_c17
  r = spreadsheet.land_use_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalStream",r[:string].force_encoding('utf-8'))
end

def test_land_use_d17
  r = spreadsheet.land_use_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("tidal stream devices if >1m/s tides",r[:string].force_encoding('utf-8'))
end

def test_land_use_h17
  r = spreadsheet.land_use_h17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_i17
  r = spreadsheet.land_use_i17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_j17
  r = spreadsheet.land_use_j17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_k17
  r = spreadsheet.land_use_k17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_l17
  r = spreadsheet.land_use_l17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_m17
  r = spreadsheet.land_use_m17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_n17
  r = spreadsheet.land_use_n17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_o17
  r = spreadsheet.land_use_o17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_p17
  r = spreadsheet.land_use_p17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_q17
  r = spreadsheet.land_use_q17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_c18
  r = spreadsheet.land_use_c18
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalRange",r[:string].force_encoding('utf-8'))
end

def test_land_use_d18
  r = spreadsheet.land_use_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("tidal impoundment if >Xm tidal range",r[:string].force_encoding('utf-8'))
end

def test_land_use_h18
  r = spreadsheet.land_use_h18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_i18
  r = spreadsheet.land_use_i18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_j18
  r = spreadsheet.land_use_j18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_k18
  r = spreadsheet.land_use_k18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_l18
  r = spreadsheet.land_use_l18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_m18
  r = spreadsheet.land_use_m18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_n18
  r = spreadsheet.land_use_n18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_o18
  r = spreadsheet.land_use_o18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_p18
  r = spreadsheet.land_use_p18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_q18
  r = spreadsheet.land_use_q18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_c19
  r = spreadsheet.land_use_c19
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_land_use_d19
  r = spreadsheet.land_use_d19
  assert_equal(:ExcelString,r[:type])
  assert_equal("algae if 0.9W/m2 efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h19
  r = spreadsheet.land_use_h19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_i19
  r = spreadsheet.land_use_i19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_j19
  r = spreadsheet.land_use_j19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_k19
  r = spreadsheet.land_use_k19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_l19
  r = spreadsheet.land_use_l19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_m19
  r = spreadsheet.land_use_m19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_n19
  r = spreadsheet.land_use_n19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_o19
  r = spreadsheet.land_use_o19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_p19
  r = spreadsheet.land_use_p19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_q19
  r = spreadsheet.land_use_q19
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_c21
  r = spreadsheet.land_use_c21
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.05",r[:string].force_encoding('utf-8'))
end

def test_land_use_d21
  r = spreadsheet.land_use_d21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land area overseas",r[:string].force_encoding('utf-8'))
end

def test_land_use_h21
  r = spreadsheet.land_use_h21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_land_use_i21
  r = spreadsheet.land_use_i21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_land_use_j21
  r = spreadsheet.land_use_j21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_land_use_k21
  r = spreadsheet.land_use_k21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_land_use_l21
  r = spreadsheet.land_use_l21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_land_use_m21
  r = spreadsheet.land_use_m21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_land_use_n21
  r = spreadsheet.land_use_n21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_land_use_o21
  r = spreadsheet.land_use_o21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_land_use_p21
  r = spreadsheet.land_use_p21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_land_use_q21
  r = spreadsheet.land_use_q21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_land_use_r21
  r = spreadsheet.land_use_r21
  assert_equal(:ExcelString,r[:type])
  assert_equal("ha",r[:string].force_encoding('utf-8'))
end

def test_land_use_c23
  r = spreadsheet.land_use_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d23
  r = spreadsheet.land_use_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("biocrops overseas if 0.6W/m2 productivity",r[:string].force_encoding('utf-8'))
end

def test_land_use_h23
  r = spreadsheet.land_use_h23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_i23
  r = spreadsheet.land_use_i23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_j23
  r = spreadsheet.land_use_j23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_k23
  r = spreadsheet.land_use_k23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_l23
  r = spreadsheet.land_use_l23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_m23
  r = spreadsheet.land_use_m23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_n23
  r = spreadsheet.land_use_n23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_o23
  r = spreadsheet.land_use_o23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_p23
  r = spreadsheet.land_use_p23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_q23
  r = spreadsheet.land_use_q23
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_c24
  r = spreadsheet.land_use_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d24
  r = spreadsheet.land_use_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("solar devices overseas assuming 15W/m2 ",r[:string].force_encoding('utf-8'))
end

def test_land_use_h24
  r = spreadsheet.land_use_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.2507772901539,r[:number],0.001)
end

def test_land_use_i24
  r = spreadsheet.land_use_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.2507772901539,r[:number],0.001)
end

def test_land_use_j24
  r = spreadsheet.land_use_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16280.191886015064,r[:number],0.001)
end

def test_land_use_k24
  r = spreadsheet.land_use_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31789.13299473997,r[:number],0.001)
end

def test_land_use_l24
  r = spreadsheet.land_use_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52989.95638458986,r[:number],0.001)
end

def test_land_use_m24
  r = spreadsheet.land_use_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92990.02274332765,r[:number],0.001)
end

def test_land_use_n24
  r = spreadsheet.land_use_n24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155888.085772378,r[:number],0.001)
end

def test_land_use_o24
  r = spreadsheet.land_use_o24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225408.8661455588,r[:number],0.001)
end

def test_land_use_p24
  r = spreadsheet.land_use_p24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306165.608186748,r[:number],0.001)
end

def test_land_use_q24
  r = spreadsheet.land_use_q24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392594.3341852462,r[:number],0.001)
end

def test_land_use_c26
  r = spreadsheet.land_use_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.06",r[:string].force_encoding('utf-8'))
end

def test_land_use_d26
  r = spreadsheet.land_use_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Length of wave front",r[:string].force_encoding('utf-8'))
end

def test_land_use_h26
  r = spreadsheet.land_use_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_land_use_i26
  r = spreadsheet.land_use_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_land_use_j26
  r = spreadsheet.land_use_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_land_use_k26
  r = spreadsheet.land_use_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_land_use_l26
  r = spreadsheet.land_use_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_land_use_m26
  r = spreadsheet.land_use_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_land_use_n26
  r = spreadsheet.land_use_n26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_land_use_o26
  r = spreadsheet.land_use_o26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_land_use_p26
  r = spreadsheet.land_use_p26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_land_use_q26
  r = spreadsheet.land_use_q26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_land_use_r26
  r = spreadsheet.land_use_r26
  assert_equal(:ExcelString,r[:type])
  assert_equal("km",r[:string].force_encoding('utf-8'))
end

def test_land_use_c28
  r = spreadsheet.land_use_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.Wave",r[:string].force_encoding('utf-8'))
end

def test_land_use_d28
  r = spreadsheet.land_use_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("wave energy convertors if 25% efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h28
  r = spreadsheet.land_use_h28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_i28
  r = spreadsheet.land_use_i28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_j28
  r = spreadsheet.land_use_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number],0.001)
end

def test_land_use_k28
  r = spreadsheet.land_use_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.448968212153137,r[:number],0.001)
end

def test_land_use_l28
  r = spreadsheet.land_use_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.40093519494198,r[:number],0.001)
end

def test_land_use_m28
  r = spreadsheet.land_use_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.0946478749561,r[:number],0.001)
end

def test_land_use_n28
  r = spreadsheet.land_use_n28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(434.54987748172726,r[:number],0.001)
end

def test_land_use_o28
  r = spreadsheet.land_use_o28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(708.2939680270835,r[:number],0.001)
end

def test_land_use_p28
  r = spreadsheet.land_use_p28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(971.9722132977944,r[:number],0.001)
end

def test_land_use_q28
  r = spreadsheet.land_use_q28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1235.650458568505,r[:number],0.001)
end

def test_land_use_c30
  r = spreadsheet.land_use_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.03",r[:string].force_encoding('utf-8'))
end

def test_land_use_d30
  r = spreadsheet.land_use_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Number of units",r[:string].force_encoding('utf-8'))
end

def test_land_use_h30
  r = spreadsheet.land_use_h30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_land_use_i30
  r = spreadsheet.land_use_i30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_land_use_j30
  r = spreadsheet.land_use_j30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_land_use_k30
  r = spreadsheet.land_use_k30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_land_use_l30
  r = spreadsheet.land_use_l30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_land_use_m30
  r = spreadsheet.land_use_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_land_use_n30
  r = spreadsheet.land_use_n30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_land_use_o30
  r = spreadsheet.land_use_o30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_land_use_p30
  r = spreadsheet.land_use_p30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_land_use_q30
  r = spreadsheet.land_use_q30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_land_use_r30
  r = spreadsheet.land_use_r30
  assert_equal(:ExcelString,r[:type])
  assert_equal("#",r[:string].force_encoding('utf-8'))
end

def test_land_use_c32
  r = spreadsheet.land_use_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d32
  r = spreadsheet.land_use_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("2 GW thermal power stations",r[:string].force_encoding('utf-8'))
end

def test_land_use_h32
  r = spreadsheet.land_use_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1201.9427693109324,r[:number],0.001)
end

def test_land_use_i32
  r = spreadsheet.land_use_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1187.9040971153984,r[:number],0.001)
end

def test_land_use_j32
  r = spreadsheet.land_use_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2236.978145172182,r[:number],0.001)
end

def test_land_use_k32
  r = spreadsheet.land_use_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3199.283142730281,r[:number],0.001)
end

def test_land_use_l32
  r = spreadsheet.land_use_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4138.205758780025,r[:number],0.001)
end

def test_land_use_m32
  r = spreadsheet.land_use_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5047.804428327347,r[:number],0.001)
end

def test_land_use_n32
  r = spreadsheet.land_use_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5911.548388360278,r[:number],0.001)
end

def test_land_use_o32
  r = spreadsheet.land_use_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6742.291316656167,r[:number],0.001)
end

def test_land_use_p32
  r = spreadsheet.land_use_p32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7540.7725320829095,r[:number],0.001)
end

def test_land_use_q32
  r = spreadsheet.land_use_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8300.967574128388,r[:number],0.001)
end

def test_land_use_c33
  r = spreadsheet.land_use_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d33
  r = spreadsheet.land_use_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("1.2 GW CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_land_use_h33
  r = spreadsheet.land_use_h33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_i33
  r = spreadsheet.land_use_i33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_land_use_j33
  r = spreadsheet.land_use_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7083333333333335,r[:number],0.001)
end

def test_land_use_k33
  r = spreadsheet.land_use_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_l33
  r = spreadsheet.land_use_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_m33
  r = spreadsheet.land_use_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_n33
  r = spreadsheet.land_use_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_o33
  r = spreadsheet.land_use_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_p33
  r = spreadsheet.land_use_p33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_q33
  r = spreadsheet.land_use_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number],0.001)
end

def test_land_use_c34
  r = spreadsheet.land_use_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d34
  r = spreadsheet.land_use_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 GW nuclear power station complexes",r[:string].force_encoding('utf-8'))
end

def test_land_use_h34
  r = spreadsheet.land_use_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.102,r[:number],0.001)
end

def test_land_use_i34
  r = spreadsheet.land_use_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.102,r[:number],0.001)
end

def test_land_use_j34
  r = spreadsheet.land_use_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.02238629729447,r[:number],0.001)
end

def test_land_use_k34
  r = spreadsheet.land_use_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.61593333333334,r[:number],0.001)
end

def test_land_use_l34
  r = spreadsheet.land_use_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.745,r[:number],0.001)
end

def test_land_use_m34
  r = spreadsheet.land_use_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.94915564377075,r[:number],0.001)
end

def test_land_use_n34
  r = spreadsheet.land_use_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.213612869677,r[:number],0.001)
end

def test_land_use_o34
  r = spreadsheet.land_use_o34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.0711825020699,r[:number],0.001)
end

def test_land_use_p34
  r = spreadsheet.land_use_p34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.52698930506222,r[:number],0.001)
end

def test_land_use_q34
  r = spreadsheet.land_use_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.77063648367974,r[:number],0.001)
end

def test_land_use_c35
  r = spreadsheet.land_use_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_land_use_d35
  r = spreadsheet.land_use_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("0.01 GW geothermal power stations",r[:string].force_encoding('utf-8'))
end

def test_land_use_h35
  r = spreadsheet.land_use_h35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1127.4699999999998,r[:number],0.001)
end

def test_land_use_i35
  r = spreadsheet.land_use_i35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1127.4699999999998,r[:number],0.001)
end

def test_land_use_j35
  r = spreadsheet.land_use_j35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1508.1556451532922,r[:number],0.001)
end

def test_land_use_k35
  r = spreadsheet.land_use_k35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1888.8412903065844,r[:number],0.001)
end

def test_land_use_l35
  r = spreadsheet.land_use_l35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2332.243858406911,r[:number],0.001)
end

def test_land_use_m35
  r = spreadsheet.land_use_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2852.6031141945286,r[:number],0.001)
end

def test_land_use_n35
  r = spreadsheet.land_use_n35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3468.8157531092875,r[:number],0.001)
end

def test_land_use_o35
  r = spreadsheet.land_use_o35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4052.5416106626863,r[:number],0.001)
end

def test_land_use_p35
  r = spreadsheet.land_use_p35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4791.554609686495,r[:number],0.001)
end

def test_land_use_q35
  r = spreadsheet.land_use_q35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5473.556909816324,r[:number],0.001)
end

def test_land_use_c36
  r = spreadsheet.land_use_c36
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_land_use_d36
  r = spreadsheet.land_use_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("1 GW standby generators",r[:string].force_encoding('utf-8'))
end

def test_land_use_h36
  r = spreadsheet.land_use_h36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_i36
  r = spreadsheet.land_use_i36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_j36
  r = spreadsheet.land_use_j36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_k36
  r = spreadsheet.land_use_k36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_l36
  r = spreadsheet.land_use_l36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_m36
  r = spreadsheet.land_use_m36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_n36
  r = spreadsheet.land_use_n36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_o36
  r = spreadsheet.land_use_o36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_p36
  r = spreadsheet.land_use_p36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_q36
  r = spreadsheet.land_use_q36
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_c37
  r = spreadsheet.land_use_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d37
  r = spreadsheet.land_use_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Number of Household, C&I and CDW to energy facilities",r[:string].force_encoding('utf-8'))
end

def test_land_use_h37
  r = spreadsheet.land_use_h37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_i37
  r = spreadsheet.land_use_i37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_j37
  r = spreadsheet.land_use_j37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_k37
  r = spreadsheet.land_use_k37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_l37
  r = spreadsheet.land_use_l37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_m37
  r = spreadsheet.land_use_m37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_n37
  r = spreadsheet.land_use_n37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_o37
  r = spreadsheet.land_use_o37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_p37
  r = spreadsheet.land_use_p37
  assert_equal(:ExcelError,r[:type])
end

def test_land_use_q37
  r = spreadsheet.land_use_q37
  assert_equal(:ExcelError,r[:type])
end


  # start of Flows
def test_flows_b2
  r = spreadsheet.flows_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Flows through the energy system (for producing an energy flow diagram)",r[:string].force_encoding('utf-8'))
end

def test_flows_q2
  r = spreadsheet.flows_q2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cross check of flows through the energy system (based on the idea that energy is transformed, but not destroyed)",r[:string].force_encoding('utf-8'))
end

def test_flows_n4
  r = spreadsheet.flows_n4
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_flows_s4
  r = spreadsheet.flows_s4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Values flowing from the transformation",r[:string].force_encoding('utf-8'))
end

def test_flows_ad4
  r = spreadsheet.flows_ad4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Values flowing to the transformation",r[:string].force_encoding('utf-8'))
end

def test_flows_ao4
  r = spreadsheet.flows_ao4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Check that flows in equal flows out",r[:string].force_encoding('utf-8'))
end

def test_flows_c5
  r = spreadsheet.flows_c5
  assert_equal(:ExcelString,r[:type])
  assert_equal("From",r[:string].force_encoding('utf-8'))
end

def test_flows_d5
  r = spreadsheet.flows_d5
  assert_equal(:ExcelString,r[:type])
  assert_equal("To",r[:string].force_encoding('utf-8'))
end

def test_flows_e5
  r = spreadsheet.flows_e5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_flows_f5
  r = spreadsheet.flows_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_flows_g5
  r = spreadsheet.flows_g5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_flows_h5
  r = spreadsheet.flows_h5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_flows_i5
  r = spreadsheet.flows_i5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_flows_j5
  r = spreadsheet.flows_j5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_flows_k5
  r = spreadsheet.flows_k5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_flows_l5
  r = spreadsheet.flows_l5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_flows_m5
  r = spreadsheet.flows_m5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_flows_n5
  r = spreadsheet.flows_n5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_flows_r5
  r = spreadsheet.flows_r5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transformation",r[:string].force_encoding('utf-8'))
end

def test_flows_s5
  r = spreadsheet.flows_s5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_flows_t5
  r = spreadsheet.flows_t5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_flows_u5
  r = spreadsheet.flows_u5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_flows_v5
  r = spreadsheet.flows_v5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_flows_w5
  r = spreadsheet.flows_w5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_flows_x5
  r = spreadsheet.flows_x5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_flows_y5
  r = spreadsheet.flows_y5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_flows_z5
  r = spreadsheet.flows_z5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_flows_aa5
  r = spreadsheet.flows_aa5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_flows_ab5
  r = spreadsheet.flows_ab5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_flows_ad5
  r = spreadsheet.flows_ad5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_flows_ae5
  r = spreadsheet.flows_ae5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_flows_af5
  r = spreadsheet.flows_af5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_flows_ag5
  r = spreadsheet.flows_ag5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_flows_ah5
  r = spreadsheet.flows_ah5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_flows_ai5
  r = spreadsheet.flows_ai5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_flows_aj5
  r = spreadsheet.flows_aj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_flows_ak5
  r = spreadsheet.flows_ak5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_flows_al5
  r = spreadsheet.flows_al5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_flows_am5
  r = spreadsheet.flows_am5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_flows_ao5
  r = spreadsheet.flows_ao5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number],0.001)
end

def test_flows_ap5
  r = spreadsheet.flows_ap5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_flows_aq5
  r = spreadsheet.flows_aq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_flows_ar5
  r = spreadsheet.flows_ar5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_flows_as5
  r = spreadsheet.flows_as5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_flows_at5
  r = spreadsheet.flows_at5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_flows_au5
  r = spreadsheet.flows_au5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_flows_av5
  r = spreadsheet.flows_av5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_flows_aw5
  r = spreadsheet.flows_aw5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_flows_ax5
  r = spreadsheet.flows_ax5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_flows_c6
  r = spreadsheet.flows_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_d6
  r = spreadsheet.flows_d6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_e6
  r = spreadsheet.flows_e6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.3957013942179,r[:number],0.001)
end

def test_flows_f6
  r = spreadsheet.flows_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_g6
  r = spreadsheet.flows_g6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_h6
  r = spreadsheet.flows_h6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_i6
  r = spreadsheet.flows_i6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_j6
  r = spreadsheet.flows_j6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_k6
  r = spreadsheet.flows_k6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_l6
  r = spreadsheet.flows_l6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_m6
  r = spreadsheet.flows_m6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_n6
  r = spreadsheet.flows_n6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_r6
  r = spreadsheet.flows_r6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_flows_s6
  r = spreadsheet.flows_s6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_t6
  r = spreadsheet.flows_t6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_u6
  r = spreadsheet.flows_u6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_v6
  r = spreadsheet.flows_v6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_w6
  r = spreadsheet.flows_w6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_x6
  r = spreadsheet.flows_x6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_y6
  r = spreadsheet.flows_y6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_z6
  r = spreadsheet.flows_z6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_aa6
  r = spreadsheet.flows_aa6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_ab6
  r = spreadsheet.flows_ab6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_ad6
  r = spreadsheet.flows_ad6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae6
  r = spreadsheet.flows_ae6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af6
  r = spreadsheet.flows_af6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag6
  r = spreadsheet.flows_ag6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah6
  r = spreadsheet.flows_ah6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai6
  r = spreadsheet.flows_ai6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj6
  r = spreadsheet.flows_aj6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak6
  r = spreadsheet.flows_ak6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al6
  r = spreadsheet.flows_al6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am6
  r = spreadsheet.flows_am6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c7
  r = spreadsheet.flows_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d7
  r = spreadsheet.flows_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_e7
  r = spreadsheet.flows_e7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39550.80042491112,r[:number],0.001)
end

def test_flows_f7
  r = spreadsheet.flows_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35975.72238777542,r[:number],0.001)
end

def test_flows_g7
  r = spreadsheet.flows_g7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64827.16369514431,r[:number],0.001)
end

def test_flows_h7
  r = spreadsheet.flows_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90765.55881903532,r[:number],0.001)
end

def test_flows_i7
  r = spreadsheet.flows_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112427.38086715901,r[:number],0.001)
end

def test_flows_j7
  r = spreadsheet.flows_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128009.47044200294,r[:number],0.001)
end

def test_flows_k7
  r = spreadsheet.flows_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140225.28282100742,r[:number],0.001)
end

def test_flows_l7
  r = spreadsheet.flows_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154363.03733436446,r[:number],0.001)
end

def test_flows_m7
  r = spreadsheet.flows_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168133.81743544442,r[:number],0.001)
end

def test_flows_n7
  r = spreadsheet.flows_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179478.52027866815,r[:number],0.001)
end

def test_flows_r7
  r = spreadsheet.flows_r7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_s7
  r = spreadsheet.flows_s7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t7
  r = spreadsheet.flows_t7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u7
  r = spreadsheet.flows_u7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v7
  r = spreadsheet.flows_v7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w7
  r = spreadsheet.flows_w7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x7
  r = spreadsheet.flows_x7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y7
  r = spreadsheet.flows_y7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z7
  r = spreadsheet.flows_z7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa7
  r = spreadsheet.flows_aa7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab7
  r = spreadsheet.flows_ab7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad7
  r = spreadsheet.flows_ad7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae7
  r = spreadsheet.flows_ae7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af7
  r = spreadsheet.flows_af7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag7
  r = spreadsheet.flows_ag7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah7
  r = spreadsheet.flows_ah7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai7
  r = spreadsheet.flows_ai7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj7
  r = spreadsheet.flows_aj7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak7
  r = spreadsheet.flows_ak7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al7
  r = spreadsheet.flows_al7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am7
  r = spreadsheet.flows_am7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c8
  r = spreadsheet.flows_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_d8
  r = spreadsheet.flows_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_e8
  r = spreadsheet.flows_e8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number],0.001)
end

def test_flows_f8
  r = spreadsheet.flows_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.547952837212,r[:number],0.001)
end

def test_flows_g8
  r = spreadsheet.flows_g8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.8288435333163,r[:number],0.001)
end

def test_flows_h8
  r = spreadsheet.flows_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.7889500727494,r[:number],0.001)
end

def test_flows_i8
  r = spreadsheet.flows_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.27472421443264,r[:number],0.001)
end

def test_flows_j8
  r = spreadsheet.flows_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.43958011019754,r[:number],0.001)
end

def test_flows_k8
  r = spreadsheet.flows_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.47441995977493,r[:number],0.001)
end

def test_flows_l8
  r = spreadsheet.flows_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88427462124332,r[:number],0.001)
end

def test_flows_m8
  r = spreadsheet.flows_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19102265793308,r[:number],0.001)
end

def test_flows_n8
  r = spreadsheet.flows_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_flows_r8
  r = spreadsheet.flows_r8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_s8
  r = spreadsheet.flows_s8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t8
  r = spreadsheet.flows_t8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_u8
  r = spreadsheet.flows_u8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_v8
  r = spreadsheet.flows_v8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.3788166666645,r[:number],0.001)
end

def test_flows_w8
  r = spreadsheet.flows_w8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_x8
  r = spreadsheet.flows_x8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.3788166666645,r[:number],0.001)
end

def test_flows_y8
  r = spreadsheet.flows_y8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_z8
  r = spreadsheet.flows_z8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_aa8
  r = spreadsheet.flows_aa8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_ab8
  r = spreadsheet.flows_ab8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4754.378816666664,r[:number],0.001)
end

def test_flows_ad8
  r = spreadsheet.flows_ad8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae8
  r = spreadsheet.flows_ae8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_af8
  r = spreadsheet.flows_af8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ag8
  r = spreadsheet.flows_ag8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ah8
  r = spreadsheet.flows_ah8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ai8
  r = spreadsheet.flows_ai8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aj8
  r = spreadsheet.flows_aj8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ak8
  r = spreadsheet.flows_ak8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_al8
  r = spreadsheet.flows_al8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_am8
  r = spreadsheet.flows_am8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ao8
  r = spreadsheet.flows_ao8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ap8
  r = spreadsheet.flows_ap8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aq8
  r = spreadsheet.flows_aq8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ar8
  r = spreadsheet.flows_ar8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_as8
  r = spreadsheet.flows_as8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_at8
  r = spreadsheet.flows_at8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_au8
  r = spreadsheet.flows_au8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_av8
  r = spreadsheet.flows_av8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aw8
  r = spreadsheet.flows_aw8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ax8
  r = spreadsheet.flows_ax8
  assert_equal(:ExcelError,r[:type])
end

def test_flows_c9
  r = spreadsheet.flows_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d9
  r = spreadsheet.flows_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_e9
  r = spreadsheet.flows_e9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40948.310155728046,r[:number],0.001)
end

def test_flows_f9
  r = spreadsheet.flows_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41051.80424460304,r[:number],0.001)
end

def test_flows_g9
  r = spreadsheet.flows_g9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60727.443031970986,r[:number],0.001)
end

def test_flows_h9
  r = spreadsheet.flows_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80772.03526139053,r[:number],0.001)
end

def test_flows_i9
  r = spreadsheet.flows_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100478.87524043357,r[:number],0.001)
end

def test_flows_j9
  r = spreadsheet.flows_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120341.36280429363,r[:number],0.001)
end

def test_flows_k9
  r = spreadsheet.flows_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139587.1448036336,r[:number],0.001)
end

def test_flows_l9
  r = spreadsheet.flows_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158558.4485635425,r[:number],0.001)
end

def test_flows_m9
  r = spreadsheet.flows_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177913.89788420597,r[:number],0.001)
end

def test_flows_n9
  r = spreadsheet.flows_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197449.3068200564,r[:number],0.001)
end

def test_flows_r9
  r = spreadsheet.flows_r9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s9
  r = spreadsheet.flows_s9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t9
  r = spreadsheet.flows_t9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u9
  r = spreadsheet.flows_u9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v9
  r = spreadsheet.flows_v9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w9
  r = spreadsheet.flows_w9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x9
  r = spreadsheet.flows_x9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y9
  r = spreadsheet.flows_y9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z9
  r = spreadsheet.flows_z9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa9
  r = spreadsheet.flows_aa9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab9
  r = spreadsheet.flows_ab9
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad9
  r = spreadsheet.flows_ad9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae9
  r = spreadsheet.flows_ae9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af9
  r = spreadsheet.flows_af9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag9
  r = spreadsheet.flows_ag9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah9
  r = spreadsheet.flows_ah9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai9
  r = spreadsheet.flows_ai9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj9
  r = spreadsheet.flows_aj9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak9
  r = spreadsheet.flows_ak9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al9
  r = spreadsheet.flows_al9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am9
  r = spreadsheet.flows_am9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c10
  r = spreadsheet.flows_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_d10
  r = spreadsheet.flows_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e10
  r = spreadsheet.flows_e10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.0,r[:number],0.001)
end

def test_flows_f10
  r = spreadsheet.flows_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7728958841146,r[:number],0.001)
end

def test_flows_g10
  r = spreadsheet.flows_g10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.88758312334966,r[:number],0.001)
end

def test_flows_h10
  r = spreadsheet.flows_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.12064593855996,r[:number],0.001)
end

def test_flows_i10
  r = spreadsheet.flows_i10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.45145258994444,r[:number],0.001)
end

def test_flows_j10
  r = spreadsheet.flows_j10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.38848290828395,r[:number],0.001)
end

def test_flows_k10
  r = spreadsheet.flows_k10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.49643535647462,r[:number],0.001)
end

def test_flows_l10
  r = spreadsheet.flows_l10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.343358153041,r[:number],0.001)
end

def test_flows_m10
  r = spreadsheet.flows_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.27367243105833,r[:number],0.001)
end

def test_flows_n10
  r = spreadsheet.flows_n10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_flows_r10
  r = spreadsheet.flows_r10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s10
  r = spreadsheet.flows_s10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t10
  r = spreadsheet.flows_t10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u10
  r = spreadsheet.flows_u10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v10
  r = spreadsheet.flows_v10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w10
  r = spreadsheet.flows_w10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x10
  r = spreadsheet.flows_x10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y10
  r = spreadsheet.flows_y10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z10
  r = spreadsheet.flows_z10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa10
  r = spreadsheet.flows_aa10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab10
  r = spreadsheet.flows_ab10
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad10
  r = spreadsheet.flows_ad10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae10
  r = spreadsheet.flows_ae10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af10
  r = spreadsheet.flows_af10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag10
  r = spreadsheet.flows_ag10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah10
  r = spreadsheet.flows_ah10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai10
  r = spreadsheet.flows_ai10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj10
  r = spreadsheet.flows_aj10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak10
  r = spreadsheet.flows_ak10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al10
  r = spreadsheet.flows_al10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am10
  r = spreadsheet.flows_am10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c11
  r = spreadsheet.flows_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d11
  r = spreadsheet.flows_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e11
  r = spreadsheet.flows_e11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24070.26242773454,r[:number],0.001)
end

def test_flows_f11
  r = spreadsheet.flows_f11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23755.63038502401,r[:number],0.001)
end

def test_flows_g11
  r = spreadsheet.flows_g11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43111.94045526999,r[:number],0.001)
end

def test_flows_h11
  r = spreadsheet.flows_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62273.78128620761,r[:number],0.001)
end

def test_flows_i11
  r = spreadsheet.flows_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82160.25652911849,r[:number],0.001)
end

def test_flows_j11
  r = spreadsheet.flows_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102425.12035261364,r[:number],0.001)
end

def test_flows_k11
  r = spreadsheet.flows_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123104.36850778831,r[:number],0.001)
end

def test_flows_l11
  r = spreadsheet.flows_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145780.191909274,r[:number],0.001)
end

def test_flows_m11
  r = spreadsheet.flows_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169338.479117728,r[:number],0.001)
end

def test_flows_n11
  r = spreadsheet.flows_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193228.20445165702,r[:number],0.001)
end

def test_flows_r11
  r = spreadsheet.flows_r11
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_s11
  r = spreadsheet.flows_s11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t11
  r = spreadsheet.flows_t11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u11
  r = spreadsheet.flows_u11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v11
  r = spreadsheet.flows_v11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w11
  r = spreadsheet.flows_w11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x11
  r = spreadsheet.flows_x11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y11
  r = spreadsheet.flows_y11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z11
  r = spreadsheet.flows_z11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa11
  r = spreadsheet.flows_aa11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab11
  r = spreadsheet.flows_ab11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad11
  r = spreadsheet.flows_ad11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae11
  r = spreadsheet.flows_ae11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af11
  r = spreadsheet.flows_af11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag11
  r = spreadsheet.flows_ag11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah11
  r = spreadsheet.flows_ah11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai11
  r = spreadsheet.flows_ai11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj11
  r = spreadsheet.flows_aj11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak11
  r = spreadsheet.flows_ak11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al11
  r = spreadsheet.flows_al11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am11
  r = spreadsheet.flows_am11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ao11
  r = spreadsheet.flows_ao11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap11
  r = spreadsheet.flows_ap11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq11
  r = spreadsheet.flows_aq11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar11
  r = spreadsheet.flows_ar11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as11
  r = spreadsheet.flows_as11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at11
  r = spreadsheet.flows_at11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au11
  r = spreadsheet.flows_au11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av11
  r = spreadsheet.flows_av11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw11
  r = spreadsheet.flows_aw11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax11
  r = spreadsheet.flows_ax11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c12
  r = spreadsheet.flows_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_flows_d12
  r = spreadsheet.flows_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e12
  r = spreadsheet.flows_e12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_f12
  r = spreadsheet.flows_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_g12
  r = spreadsheet.flows_g12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_h12
  r = spreadsheet.flows_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_i12
  r = spreadsheet.flows_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.33333333333337,r[:number],0.001)
end

def test_flows_j12
  r = spreadsheet.flows_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_k12
  r = spreadsheet.flows_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.33333333333337,r[:number],0.001)
end

def test_flows_l12
  r = spreadsheet.flows_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_m12
  r = spreadsheet.flows_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_n12
  r = spreadsheet.flows_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_r12
  r = spreadsheet.flows_r12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_s12
  r = spreadsheet.flows_s12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_flows_t12
  r = spreadsheet.flows_t12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36103.65238777542,r[:number],0.001)
end

def test_flows_u12
  r = spreadsheet.flows_u12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64955.09369514431,r[:number],0.001)
end

def test_flows_v12
  r = spreadsheet.flows_v12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90893.48881903531,r[:number],0.001)
end

def test_flows_w12
  r = spreadsheet.flows_w12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112555.310867159,r[:number],0.001)
end

def test_flows_x12
  r = spreadsheet.flows_x12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128073.43544200294,r[:number],0.001)
end

def test_flows_y12
  r = spreadsheet.flows_y12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140289.24782100742,r[:number],0.001)
end

def test_flows_z12
  r = spreadsheet.flows_z12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154427.00233436446,r[:number],0.001)
end

def test_flows_aa12
  r = spreadsheet.flows_aa12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168197.78243544442,r[:number],0.001)
end

def test_flows_ab12
  r = spreadsheet.flows_ab12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_flows_ad12
  r = spreadsheet.flows_ad12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_flows_ae12
  r = spreadsheet.flows_ae12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36103.65238777542,r[:number],0.001)
end

def test_flows_af12
  r = spreadsheet.flows_af12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64955.09369514431,r[:number],0.001)
end

def test_flows_ag12
  r = spreadsheet.flows_ag12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90893.48881903531,r[:number],0.001)
end

def test_flows_ah12
  r = spreadsheet.flows_ah12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112555.310867159,r[:number],0.001)
end

def test_flows_ai12
  r = spreadsheet.flows_ai12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128073.43544200294,r[:number],0.001)
end

def test_flows_aj12
  r = spreadsheet.flows_aj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140289.24782100742,r[:number],0.001)
end

def test_flows_ak12
  r = spreadsheet.flows_ak12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154427.00233436446,r[:number],0.001)
end

def test_flows_al12
  r = spreadsheet.flows_al12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168197.78243544442,r[:number],0.001)
end

def test_flows_am12
  r = spreadsheet.flows_am12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_flows_ao12
  r = spreadsheet.flows_ao12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap12
  r = spreadsheet.flows_ap12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq12
  r = spreadsheet.flows_aq12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar12
  r = spreadsheet.flows_ar12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as12
  r = spreadsheet.flows_as12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at12
  r = spreadsheet.flows_at12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au12
  r = spreadsheet.flows_au12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av12
  r = spreadsheet.flows_av12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw12
  r = spreadsheet.flows_aw12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax12
  r = spreadsheet.flows_ax12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c13
  r = spreadsheet.flows_c13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_flows_d13
  r = spreadsheet.flows_d13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e13
  r = spreadsheet.flows_e13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f13
  r = spreadsheet.flows_f13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g13
  r = spreadsheet.flows_g13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h13
  r = spreadsheet.flows_h13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i13
  r = spreadsheet.flows_i13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j13
  r = spreadsheet.flows_j13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k13
  r = spreadsheet.flows_k13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l13
  r = spreadsheet.flows_l13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m13
  r = spreadsheet.flows_m13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n13
  r = spreadsheet.flows_n13
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r13
  r = spreadsheet.flows_r13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s13
  r = spreadsheet.flows_s13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39550.80042491112,r[:number],0.001)
end

def test_flows_t13
  r = spreadsheet.flows_t13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35975.72238777542,r[:number],0.001)
end

def test_flows_u13
  r = spreadsheet.flows_u13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64827.16369514431,r[:number],0.001)
end

def test_flows_v13
  r = spreadsheet.flows_v13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90765.55881903532,r[:number],0.001)
end

def test_flows_w13
  r = spreadsheet.flows_w13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112427.38086715901,r[:number],0.001)
end

def test_flows_x13
  r = spreadsheet.flows_x13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128009.47044200294,r[:number],0.001)
end

def test_flows_y13
  r = spreadsheet.flows_y13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140225.28282100742,r[:number],0.001)
end

def test_flows_z13
  r = spreadsheet.flows_z13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154363.03733436446,r[:number],0.001)
end

def test_flows_aa13
  r = spreadsheet.flows_aa13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168133.81743544442,r[:number],0.001)
end

def test_flows_ab13
  r = spreadsheet.flows_ab13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179478.52027866815,r[:number],0.001)
end

def test_flows_ad13
  r = spreadsheet.flows_ad13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae13
  r = spreadsheet.flows_ae13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af13
  r = spreadsheet.flows_af13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag13
  r = spreadsheet.flows_ag13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah13
  r = spreadsheet.flows_ah13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai13
  r = spreadsheet.flows_ai13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj13
  r = spreadsheet.flows_aj13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak13
  r = spreadsheet.flows_ak13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al13
  r = spreadsheet.flows_al13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am13
  r = spreadsheet.flows_am13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c14
  r = spreadsheet.flows_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_flows_d14
  r = spreadsheet.flows_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e14
  r = spreadsheet.flows_e14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_f14
  r = spreadsheet.flows_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_g14
  r = spreadsheet.flows_g14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_h14
  r = spreadsheet.flows_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_i14
  r = spreadsheet.flows_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_j14
  r = spreadsheet.flows_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_k14
  r = spreadsheet.flows_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_l14
  r = spreadsheet.flows_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_m14
  r = spreadsheet.flows_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_n14
  r = spreadsheet.flows_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.045483333331,r[:number],0.001)
end

def test_flows_r14
  r = spreadsheet.flows_r14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_s14
  r = spreadsheet.flows_s14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.3957013942179,r[:number],0.001)
end

def test_flows_t14
  r = spreadsheet.flows_t14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_u14
  r = spreadsheet.flows_u14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_v14
  r = spreadsheet.flows_v14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_w14
  r = spreadsheet.flows_w14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number],0.001)
end

def test_flows_x14
  r = spreadsheet.flows_x14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_y14
  r = spreadsheet.flows_y14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_z14
  r = spreadsheet.flows_z14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_aa14
  r = spreadsheet.flows_aa14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_ab14
  r = spreadsheet.flows_ab14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number],0.001)
end

def test_flows_ad14
  r = spreadsheet.flows_ad14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae14
  r = spreadsheet.flows_ae14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af14
  r = spreadsheet.flows_af14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag14
  r = spreadsheet.flows_ag14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah14
  r = spreadsheet.flows_ah14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai14
  r = spreadsheet.flows_ai14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj14
  r = spreadsheet.flows_aj14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak14
  r = spreadsheet.flows_ak14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al14
  r = spreadsheet.flows_al14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am14
  r = spreadsheet.flows_am14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c15
  r = spreadsheet.flows_c15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_flows_d15
  r = spreadsheet.flows_d15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e15
  r = spreadsheet.flows_e15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f15
  r = spreadsheet.flows_f15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g15
  r = spreadsheet.flows_g15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h15
  r = spreadsheet.flows_h15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i15
  r = spreadsheet.flows_i15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j15
  r = spreadsheet.flows_j15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k15
  r = spreadsheet.flows_k15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l15
  r = spreadsheet.flows_l15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m15
  r = spreadsheet.flows_m15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n15
  r = spreadsheet.flows_n15
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r15
  r = spreadsheet.flows_r15
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_s15
  r = spreadsheet.flows_s15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.1432943136892,r[:number],0.001)
end

def test_flows_t15
  r = spreadsheet.flows_t15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2809.340838210601,r[:number],0.001)
end

def test_flows_u15
  r = spreadsheet.flows_u15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3894.2660946137803,r[:number],0.001)
end

def test_flows_v15
  r = spreadsheet.flows_v15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4631.789394864872,r[:number],0.001)
end

def test_flows_w15
  r = spreadsheet.flows_w15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5021.903079832951,r[:number],0.001)
end

def test_flows_x15
  r = spreadsheet.flows_x15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5064.572645728868,r[:number],0.001)
end

def test_flows_y15
  r = spreadsheet.flows_y15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4759.737474951291,r[:number],0.001)
end

def test_flows_z15
  r = spreadsheet.flows_z15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4107.3327091657175,r[:number],0.001)
end

def test_flows_aa15
  r = spreadsheet.flows_aa15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3107.284015554861,r[:number],0.001)
end

def test_flows_ab15
  r = spreadsheet.flows_ab15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_flows_ad15
  r = spreadsheet.flows_ad15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2625.698849869245,r[:number],0.001)
end

def test_flows_ae15
  r = spreadsheet.flows_ae15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2839.8963937661565,r[:number],0.001)
end

def test_flows_af15
  r = spreadsheet.flows_af15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3921.0022057248916,r[:number],0.001)
end

def test_flows_ag15
  r = spreadsheet.flows_ag15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4654.706061531538,r[:number],0.001)
end

def test_flows_ah15
  r = spreadsheet.flows_ah15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5041.000302055173,r[:number],0.001)
end

def test_flows_ai15
  r = spreadsheet.flows_ai15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5079.850423506647,r[:number],0.001)
end

def test_flows_aj15
  r = spreadsheet.flows_aj15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4771.195808284624,r[:number],0.001)
end

def test_flows_ak15
  r = spreadsheet.flows_ak15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4114.971598054606,r[:number],0.001)
end

def test_flows_al15
  r = spreadsheet.flows_al15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3111.1034599993054,r[:number],0.001)
end

def test_flows_am15
  r = spreadsheet.flows_am15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_flows_ao15
  r = spreadsheet.flows_ao15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-30.555555555555657,r[:number],0.001)
end

def test_flows_ap15
  r = spreadsheet.flows_ap15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-30.555555555555657,r[:number],0.001)
end

def test_flows_aq15
  r = spreadsheet.flows_aq15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-26.736111111111313,r[:number],0.001)
end

def test_flows_ar15
  r = spreadsheet.flows_ar15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-22.91666666666606,r[:number],0.001)
end

def test_flows_as15
  r = spreadsheet.flows_as15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-19.097222222221717,r[:number],0.001)
end

def test_flows_at15
  r = spreadsheet.flows_at15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15.277777777778283,r[:number],0.001)
end

def test_flows_au15
  r = spreadsheet.flows_au15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11.45833333333303,r[:number],0.001)
end

def test_flows_av15
  r = spreadsheet.flows_av15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.638888888888687,r[:number],0.001)
end

def test_flows_aw15
  r = spreadsheet.flows_aw15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.8194444444443434,r[:number],0.001)
end

def test_flows_ax15
  r = spreadsheet.flows_ax15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c16
  r = spreadsheet.flows_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_flows_d16
  r = spreadsheet.flows_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e16
  r = spreadsheet.flows_e16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f16
  r = spreadsheet.flows_f16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g16
  r = spreadsheet.flows_g16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h16
  r = spreadsheet.flows_h16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i16
  r = spreadsheet.flows_i16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j16
  r = spreadsheet.flows_j16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k16
  r = spreadsheet.flows_k16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l16
  r = spreadsheet.flows_l16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m16
  r = spreadsheet.flows_m16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n16
  r = spreadsheet.flows_n16
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r16
  r = spreadsheet.flows_r16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_s16
  r = spreadsheet.flows_s16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t16
  r = spreadsheet.flows_t16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u16
  r = spreadsheet.flows_u16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v16
  r = spreadsheet.flows_v16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w16
  r = spreadsheet.flows_w16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x16
  r = spreadsheet.flows_x16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y16
  r = spreadsheet.flows_y16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z16
  r = spreadsheet.flows_z16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa16
  r = spreadsheet.flows_aa16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab16
  r = spreadsheet.flows_ab16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad16
  r = spreadsheet.flows_ad16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2906.4806145672337,r[:number],0.001)
end

def test_flows_ae16
  r = spreadsheet.flows_ae16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2990.0323835140016,r[:number],0.001)
end

def test_flows_af16
  r = spreadsheet.flows_af16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4863.271865550391,r[:number],0.001)
end

def test_flows_ag16
  r = spreadsheet.flows_ag16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7206.396091004765,r[:number],0.001)
end

def test_flows_ah16
  r = spreadsheet.flows_ah16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10085.94510929981,r[:number],0.001)
end

def test_flows_ai16
  r = spreadsheet.flows_ai16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13551.51759849119,r[:number],0.001)
end

def test_flows_aj16
  r = spreadsheet.flows_aj16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17707.281051856276,r[:number],0.001)
end

def test_flows_ak16
  r = spreadsheet.flows_ak16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22702.12584673048,r[:number],0.001)
end

def test_flows_al16
  r = spreadsheet.flows_al16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28712.896595171373,r[:number],0.001)
end

def test_flows_am16
  r = spreadsheet.flows_am16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35930.73284613621,r[:number],0.001)
end

def test_flows_c17
  r = spreadsheet.flows_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d17
  r = spreadsheet.flows_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e17
  r = spreadsheet.flows_e17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f17
  r = spreadsheet.flows_f17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g17
  r = spreadsheet.flows_g17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h17
  r = spreadsheet.flows_h17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i17
  r = spreadsheet.flows_i17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j17
  r = spreadsheet.flows_j17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k17
  r = spreadsheet.flows_k17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l17
  r = spreadsheet.flows_l17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m17
  r = spreadsheet.flows_m17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n17
  r = spreadsheet.flows_n17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r17
  r = spreadsheet.flows_r17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_s17
  r = spreadsheet.flows_s17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19650.77934326531,r[:number],0.001)
end

def test_flows_t17
  r = spreadsheet.flows_t17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18917.45522771143,r[:number],0.001)
end

def test_flows_u17
  r = spreadsheet.flows_u17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33366.18813597547,r[:number],0.001)
end

def test_flows_v17
  r = spreadsheet.flows_v17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47113.556031553504,r[:number],0.001)
end

def test_flows_w17
  r = spreadsheet.flows_w17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60146.97247412391,r[:number],0.001)
end

def test_flows_x17
  r = spreadsheet.flows_x17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72542.97731472099,r[:number],0.001)
end

def test_flows_y17
  r = spreadsheet.flows_y17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84385.02807800425,r[:number],0.001)
end

def test_flows_z17
  r = spreadsheet.flows_z17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95672.81846306004,r[:number],0.001)
end

def test_flows_aa17
  r = spreadsheet.flows_aa17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106366.18363858438,r[:number],0.001)
end

def test_flows_ab17
  r = spreadsheet.flows_ab17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116605.0963527362,r[:number],0.001)
end

def test_flows_ad17
  r = spreadsheet.flows_ad17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae17
  r = spreadsheet.flows_ae17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_af17
  r = spreadsheet.flows_af17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ag17
  r = spreadsheet.flows_ag17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ah17
  r = spreadsheet.flows_ah17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ai17
  r = spreadsheet.flows_ai17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aj17
  r = spreadsheet.flows_aj17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ak17
  r = spreadsheet.flows_ak17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_al17
  r = spreadsheet.flows_al17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_am17
  r = spreadsheet.flows_am17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ao17
  r = spreadsheet.flows_ao17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ap17
  r = spreadsheet.flows_ap17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aq17
  r = spreadsheet.flows_aq17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ar17
  r = spreadsheet.flows_ar17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_as17
  r = spreadsheet.flows_as17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_at17
  r = spreadsheet.flows_at17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_au17
  r = spreadsheet.flows_au17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_av17
  r = spreadsheet.flows_av17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aw17
  r = spreadsheet.flows_aw17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ax17
  r = spreadsheet.flows_ax17
  assert_equal(:ExcelError,r[:type])
end

def test_flows_c18
  r = spreadsheet.flows_c18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d18
  r = spreadsheet.flows_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_e18
  r = spreadsheet.flows_e18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f18
  r = spreadsheet.flows_f18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g18
  r = spreadsheet.flows_g18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h18
  r = spreadsheet.flows_h18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i18
  r = spreadsheet.flows_i18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j18
  r = spreadsheet.flows_j18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k18
  r = spreadsheet.flows_k18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l18
  r = spreadsheet.flows_l18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m18
  r = spreadsheet.flows_m18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n18
  r = spreadsheet.flows_n18
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r18
  r = spreadsheet.flows_r18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s18
  r = spreadsheet.flows_s18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_flows_t18
  r = spreadsheet.flows_t18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_flows_u18
  r = spreadsheet.flows_u18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.195800664283027,r[:number],0.001)
end

def test_flows_v18
  r = spreadsheet.flows_v18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.52960132856605,r[:number],0.001)
end

def test_flows_w18
  r = spreadsheet.flows_w18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.225019602582634,r[:number],0.001)
end

def test_flows_x18
  r = spreadsheet.flows_x18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.9316937694213,r[:number],0.001)
end

def test_flows_y18
  r = spreadsheet.flows_y18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.23065738478488,r[:number],0.001)
end

def test_flows_z18
  r = spreadsheet.flows_z18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.93160038057601,r[:number],0.001)
end

def test_flows_aa18
  r = spreadsheet.flows_aa18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.1905844740417,r[:number],0.001)
end

def test_flows_ab18
  r = spreadsheet.flows_ab18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_flows_ad18
  r = spreadsheet.flows_ad18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae18
  r = spreadsheet.flows_ae18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af18
  r = spreadsheet.flows_af18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag18
  r = spreadsheet.flows_ag18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah18
  r = spreadsheet.flows_ah18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai18
  r = spreadsheet.flows_ai18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj18
  r = spreadsheet.flows_aj18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak18
  r = spreadsheet.flows_ak18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al18
  r = spreadsheet.flows_al18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am18
  r = spreadsheet.flows_am18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c19
  r = spreadsheet.flows_c19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_d19
  r = spreadsheet.flows_d19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e19
  r = spreadsheet.flows_e19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39675.19612630534,r[:number],0.001)
end

def test_flows_f19
  r = spreadsheet.flows_f19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36103.65238777542,r[:number],0.001)
end

def test_flows_g19
  r = spreadsheet.flows_g19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64955.09369514431,r[:number],0.001)
end

def test_flows_h19
  r = spreadsheet.flows_h19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90893.48881903531,r[:number],0.001)
end

def test_flows_i19
  r = spreadsheet.flows_i19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112555.310867159,r[:number],0.001)
end

def test_flows_j19
  r = spreadsheet.flows_j19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128073.43544200294,r[:number],0.001)
end

def test_flows_k19
  r = spreadsheet.flows_k19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140289.24782100742,r[:number],0.001)
end

def test_flows_l19
  r = spreadsheet.flows_l19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154427.00233436446,r[:number],0.001)
end

def test_flows_m19
  r = spreadsheet.flows_m19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168197.78243544442,r[:number],0.001)
end

def test_flows_n19
  r = spreadsheet.flows_n19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179542.48527866814,r[:number],0.001)
end

def test_flows_r19
  r = spreadsheet.flows_r19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_s19
  r = spreadsheet.flows_s19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.262427734542,r[:number],0.001)
end

def test_flows_t19
  r = spreadsheet.flows_t19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24986.54523646368,r[:number],0.001)
end

def test_flows_u19
  r = spreadsheet.flows_u19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44192.9699939489,r[:number],0.001)
end

def test_flows_v19
  r = spreadsheet.flows_v19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63242.04388770172,r[:number],0.001)
end

def test_flows_w19
  r = spreadsheet.flows_w19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83085.1832705973,r[:number],0.001)
end

def test_flows_x19
  r = spreadsheet.flows_x19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103282.98412441081,r[:number],0.001)
end

def test_flows_y19
  r = spreadsheet.flows_y19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123910.34023203369,r[:number],0.001)
end

def test_flows_z19
  r = spreadsheet.flows_z19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146546.01055631592,r[:number],0.001)
end

def test_flows_aa19
  r = spreadsheet.flows_aa19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170073.22807904793,r[:number],0.001)
end

def test_flows_ab19
  r = spreadsheet.flows_ab19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193938.9122824312,r[:number],0.001)
end

def test_flows_ad19
  r = spreadsheet.flows_ad19
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae19
  r = spreadsheet.flows_ae19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24986.54523646368,r[:number],0.001)
end

def test_flows_af19
  r = spreadsheet.flows_af19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44192.9699939489,r[:number],0.001)
end

def test_flows_ag19
  r = spreadsheet.flows_ag19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63242.04388770172,r[:number],0.001)
end

def test_flows_ah19
  r = spreadsheet.flows_ah19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83085.18327059732,r[:number],0.001)
end

def test_flows_ai19
  r = spreadsheet.flows_ai19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103282.98412441081,r[:number],0.001)
end

def test_flows_aj19
  r = spreadsheet.flows_aj19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123910.34023203368,r[:number],0.001)
end

def test_flows_ak19
  r = spreadsheet.flows_ak19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146546.01055631592,r[:number],0.001)
end

def test_flows_al19
  r = spreadsheet.flows_al19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170073.22807904796,r[:number],0.001)
end

def test_flows_am19
  r = spreadsheet.flows_am19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193938.91228243118,r[:number],0.001)
end

def test_flows_ao19
  r = spreadsheet.flows_ao19
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ap19
  r = spreadsheet.flows_ap19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq19
  r = spreadsheet.flows_aq19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar19
  r = spreadsheet.flows_ar19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as19
  r = spreadsheet.flows_as19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at19
  r = spreadsheet.flows_at19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au19
  r = spreadsheet.flows_au19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av19
  r = spreadsheet.flows_av19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw19
  r = spreadsheet.flows_aw19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax19
  r = spreadsheet.flows_ax19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c20
  r = spreadsheet.flows_c20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_d20
  r = spreadsheet.flows_d20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_e20
  r = spreadsheet.flows_e20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41924.201364077846,r[:number],0.001)
end

def test_flows_f20
  r = spreadsheet.flows_f20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.35219744025,r[:number],0.001)
end

def test_flows_g20
  r = spreadsheet.flows_g20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61374.2718755043,r[:number],0.001)
end

def test_flows_h20
  r = spreadsheet.flows_h20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.82421146327,r[:number],0.001)
end

def test_flows_i20
  r = spreadsheet.flows_i20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100867.14996464801,r[:number],0.001)
end

def test_flows_j20
  r = spreadsheet.flows_j20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120641.80238440383,r[:number],0.001)
end

def test_flows_k20
  r = spreadsheet.flows_k20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139819.61922359336,r[:number],0.001)
end

def test_flows_l20
  r = spreadsheet.flows_l20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158738.33283816374,r[:number],0.001)
end

def test_flows_m20
  r = spreadsheet.flows_m20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178053.0889068639,r[:number],0.001)
end

def test_flows_n20
  r = spreadsheet.flows_n20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_flows_r20
  r = spreadsheet.flows_r20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s20
  r = spreadsheet.flows_s20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24070.26242773454,r[:number],0.001)
end

def test_flows_t20
  r = spreadsheet.flows_t20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23755.63038502401,r[:number],0.001)
end

def test_flows_u20
  r = spreadsheet.flows_u20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43111.94045526999,r[:number],0.001)
end

def test_flows_v20
  r = spreadsheet.flows_v20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62273.78128620761,r[:number],0.001)
end

def test_flows_w20
  r = spreadsheet.flows_w20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82160.25652911849,r[:number],0.001)
end

def test_flows_x20
  r = spreadsheet.flows_x20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102425.12035261364,r[:number],0.001)
end

def test_flows_y20
  r = spreadsheet.flows_y20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123104.36850778831,r[:number],0.001)
end

def test_flows_z20
  r = spreadsheet.flows_z20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145780.191909274,r[:number],0.001)
end

def test_flows_aa20
  r = spreadsheet.flows_aa20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169338.479117728,r[:number],0.001)
end

def test_flows_ab20
  r = spreadsheet.flows_ab20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193228.20445165702,r[:number],0.001)
end

def test_flows_ad20
  r = spreadsheet.flows_ad20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae20
  r = spreadsheet.flows_ae20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af20
  r = spreadsheet.flows_af20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag20
  r = spreadsheet.flows_ag20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah20
  r = spreadsheet.flows_ah20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai20
  r = spreadsheet.flows_ai20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj20
  r = spreadsheet.flows_aj20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak20
  r = spreadsheet.flows_ak20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al20
  r = spreadsheet.flows_al20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am20
  r = spreadsheet.flows_am20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c21
  r = spreadsheet.flows_c21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d21
  r = spreadsheet.flows_d21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e21
  r = spreadsheet.flows_e21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.26242773454,r[:number],0.001)
end

def test_flows_f21
  r = spreadsheet.flows_f21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24401.403280908125,r[:number],0.001)
end

def test_flows_g21
  r = spreadsheet.flows_g21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43607.828038393345,r[:number],0.001)
end

def test_flows_h21
  r = spreadsheet.flows_h21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62656.90193214617,r[:number],0.001)
end

def test_flows_i21
  r = spreadsheet.flows_i21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82456.70798170843,r[:number],0.001)
end

def test_flows_j21
  r = spreadsheet.flows_j21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102654.50883552192,r[:number],0.001)
end

def test_flows_k21
  r = spreadsheet.flows_k21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123281.86494314478,r[:number],0.001)
end

def test_flows_l21
  r = spreadsheet.flows_l21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145917.53526742704,r[:number],0.001)
end

def test_flows_m21
  r = spreadsheet.flows_m21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169444.75279015908,r[:number],0.001)
end

def test_flows_n21
  r = spreadsheet.flows_n21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_flows_r21
  r = spreadsheet.flows_r21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_s21
  r = spreadsheet.flows_s21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.0,r[:number],0.001)
end

def test_flows_t21
  r = spreadsheet.flows_t21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7728958841146,r[:number],0.001)
end

def test_flows_u21
  r = spreadsheet.flows_u21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.88758312334966,r[:number],0.001)
end

def test_flows_v21
  r = spreadsheet.flows_v21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.12064593855996,r[:number],0.001)
end

def test_flows_w21
  r = spreadsheet.flows_w21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.45145258994444,r[:number],0.001)
end

def test_flows_x21
  r = spreadsheet.flows_x21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.38848290828395,r[:number],0.001)
end

def test_flows_y21
  r = spreadsheet.flows_y21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.49643535647462,r[:number],0.001)
end

def test_flows_z21
  r = spreadsheet.flows_z21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.343358153041,r[:number],0.001)
end

def test_flows_aa21
  r = spreadsheet.flows_aa21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.27367243105833,r[:number],0.001)
end

def test_flows_ab21
  r = spreadsheet.flows_ab21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number],0.001)
end

def test_flows_ad21
  r = spreadsheet.flows_ad21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae21
  r = spreadsheet.flows_ae21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af21
  r = spreadsheet.flows_af21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag21
  r = spreadsheet.flows_ag21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah21
  r = spreadsheet.flows_ah21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai21
  r = spreadsheet.flows_ai21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj21
  r = spreadsheet.flows_aj21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak21
  r = spreadsheet.flows_ak21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al21
  r = spreadsheet.flows_al21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am21
  r = spreadsheet.flows_am21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c22
  r = spreadsheet.flows_c22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_flows_d22
  r = spreadsheet.flows_d22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_flows_e22
  r = spreadsheet.flows_e22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.0397308202,r[:number],0.001)
end

def test_flows_f22
  r = spreadsheet.flows_f22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_g22
  r = spreadsheet.flows_g22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_h22
  r = spreadsheet.flows_h22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.8203975818174,r[:number],0.001)
end

def test_flows_i22
  r = spreadsheet.flows_i22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.7633988375814,r[:number],0.001)
end

def test_flows_j22
  r = spreadsheet.flows_j22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.4495308358887,r[:number],0.001)
end

def test_flows_k22
  r = spreadsheet.flows_k22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.5003731415674,r[:number],0.001)
end

def test_flows_l22
  r = spreadsheet.flows_l22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9316667474303,r[:number],0.001)
end

def test_flows_m22
  r = spreadsheet.flows_m22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.9967558959181,r[:number],0.001)
end

def test_flows_n22
  r = spreadsheet.flows_n22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_flows_r22
  r = spreadsheet.flows_r22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_flows_s22
  r = spreadsheet.flows_s22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t22
  r = spreadsheet.flows_t22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u22
  r = spreadsheet.flows_u22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v22
  r = spreadsheet.flows_v22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w22
  r = spreadsheet.flows_w22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x22
  r = spreadsheet.flows_x22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y22
  r = spreadsheet.flows_y22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z22
  r = spreadsheet.flows_z22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa22
  r = spreadsheet.flows_aa22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab22
  r = spreadsheet.flows_ab22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad22
  r = spreadsheet.flows_ad22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae22
  r = spreadsheet.flows_ae22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af22
  r = spreadsheet.flows_af22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag22
  r = spreadsheet.flows_ag22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah22
  r = spreadsheet.flows_ah22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai22
  r = spreadsheet.flows_ai22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj22
  r = spreadsheet.flows_aj22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak22
  r = spreadsheet.flows_ak22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al22
  r = spreadsheet.flows_al22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am22
  r = spreadsheet.flows_am22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c23
  r = spreadsheet.flows_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_flows_d23
  r = spreadsheet.flows_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e23
  r = spreadsheet.flows_e23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.0397308202,r[:number],0.001)
end

def test_flows_f23
  r = spreadsheet.flows_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_g23
  r = spreadsheet.flows_g23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_h23
  r = spreadsheet.flows_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.8203975818174,r[:number],0.001)
end

def test_flows_i23
  r = spreadsheet.flows_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.7633988375814,r[:number],0.001)
end

def test_flows_j23
  r = spreadsheet.flows_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.4495308358887,r[:number],0.001)
end

def test_flows_k23
  r = spreadsheet.flows_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.5003731415674,r[:number],0.001)
end

def test_flows_l23
  r = spreadsheet.flows_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9316667474303,r[:number],0.001)
end

def test_flows_m23
  r = spreadsheet.flows_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.9967558959181,r[:number],0.001)
end

def test_flows_n23
  r = spreadsheet.flows_n23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_flows_r23
  r = spreadsheet.flows_r23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_flows_s23
  r = spreadsheet.flows_s23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_flows_t23
  r = spreadsheet.flows_t23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_flows_u23
  r = spreadsheet.flows_u23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.54344669789631,r[:number],0.001)
end

def test_flows_v23
  r = spreadsheet.flows_v23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.21459580595813,r[:number],0.001)
end

def test_flows_w23
  r = spreadsheet.flows_w23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.28892750468282,r[:number],0.001)
end

def test_flows_x23
  r = spreadsheet.flows_x23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.0449836326222,r[:number],0.001)
end

def test_flows_y23
  r = spreadsheet.flows_y23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237.17958335569693,r[:number],0.001)
end

def test_flows_z23
  r = spreadsheet.flows_z23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.19663807255284,r[:number],0.001)
end

def test_flows_aa23
  r = spreadsheet.flows_aa23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.0221416680945,r[:number],0.001)
end

def test_flows_ab23
  r = spreadsheet.flows_ab23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_flows_ad23
  r = spreadsheet.flows_ad23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae23
  r = spreadsheet.flows_ae23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af23
  r = spreadsheet.flows_af23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag23
  r = spreadsheet.flows_ag23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah23
  r = spreadsheet.flows_ah23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai23
  r = spreadsheet.flows_ai23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj23
  r = spreadsheet.flows_aj23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak23
  r = spreadsheet.flows_ak23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al23
  r = spreadsheet.flows_al23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am23
  r = spreadsheet.flows_am23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c24
  r = spreadsheet.flows_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_flows_d24
  r = spreadsheet.flows_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_flows_e24
  r = spreadsheet.flows_e24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.55555555555556,r[:number],0.001)
end

def test_flows_f24
  r = spreadsheet.flows_f24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27199192880167,r[:number],0.001)
end

def test_flows_g24
  r = spreadsheet.flows_g24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.97397818370914,r[:number],0.001)
end

def test_flows_h24
  r = spreadsheet.flows_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.7718073344845,r[:number],0.001)
end

def test_flows_i24
  r = spreadsheet.flows_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.31489125587847,r[:number],0.001)
end

def test_flows_j24
  r = spreadsheet.flows_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.27202686302555,r[:number],0.001)
end

def test_flows_k24
  r = spreadsheet.flows_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.513903595851154,r[:number],0.001)
end

def test_flows_l24
  r = spreadsheet.flows_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.82168629514069,r[:number],0.001)
end

def test_flows_m24
  r = spreadsheet.flows_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.820548667818583,r[:number],0.001)
end

def test_flows_n24
  r = spreadsheet.flows_n24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r24
  r = spreadsheet.flows_r24
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_flows_s24
  r = spreadsheet.flows_s24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t24
  r = spreadsheet.flows_t24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u24
  r = spreadsheet.flows_u24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v24
  r = spreadsheet.flows_v24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w24
  r = spreadsheet.flows_w24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x24
  r = spreadsheet.flows_x24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y24
  r = spreadsheet.flows_y24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z24
  r = spreadsheet.flows_z24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa24
  r = spreadsheet.flows_aa24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab24
  r = spreadsheet.flows_ab24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad24
  r = spreadsheet.flows_ad24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae24
  r = spreadsheet.flows_ae24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af24
  r = spreadsheet.flows_af24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag24
  r = spreadsheet.flows_ag24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah24
  r = spreadsheet.flows_ah24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai24
  r = spreadsheet.flows_ai24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj24
  r = spreadsheet.flows_aj24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak24
  r = spreadsheet.flows_ak24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al24
  r = spreadsheet.flows_al24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am24
  r = spreadsheet.flows_am24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ao24
  r = spreadsheet.flows_ao24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap24
  r = spreadsheet.flows_ap24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq24
  r = spreadsheet.flows_aq24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar24
  r = spreadsheet.flows_ar24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as24
  r = spreadsheet.flows_as24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at24
  r = spreadsheet.flows_at24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au24
  r = spreadsheet.flows_au24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av24
  r = spreadsheet.flows_av24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw24
  r = spreadsheet.flows_aw24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax24
  r = spreadsheet.flows_ax24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c25
  r = spreadsheet.flows_c25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d25
  r = spreadsheet.flows_d25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e25
  r = spreadsheet.flows_e25
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f25
  r = spreadsheet.flows_f25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_flows_g25
  r = spreadsheet.flows_g25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_flows_h25
  r = spreadsheet.flows_h25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3264.8131749999975,r[:number],0.001)
end

def test_flows_i25
  r = spreadsheet.flows_i25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_flows_j25
  r = spreadsheet.flows_j25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_flows_k25
  r = spreadsheet.flows_k25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_flows_l25
  r = spreadsheet.flows_l25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_flows_m25
  r = spreadsheet.flows_m25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_flows_n25
  r = spreadsheet.flows_n25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3446.1916847222196,r[:number],0.001)
end

def test_flows_r25
  r = spreadsheet.flows_r25
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_s25
  r = spreadsheet.flows_s25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t25
  r = spreadsheet.flows_t25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u25
  r = spreadsheet.flows_u25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v25
  r = spreadsheet.flows_v25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w25
  r = spreadsheet.flows_w25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x25
  r = spreadsheet.flows_x25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y25
  r = spreadsheet.flows_y25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z25
  r = spreadsheet.flows_z25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa25
  r = spreadsheet.flows_aa25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab25
  r = spreadsheet.flows_ab25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad25
  r = spreadsheet.flows_ad25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae25
  r = spreadsheet.flows_ae25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af25
  r = spreadsheet.flows_af25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag25
  r = spreadsheet.flows_ag25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah25
  r = spreadsheet.flows_ah25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai25
  r = spreadsheet.flows_ai25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj25
  r = spreadsheet.flows_aj25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak25
  r = spreadsheet.flows_ak25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al25
  r = spreadsheet.flows_al25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am25
  r = spreadsheet.flows_am25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ao25
  r = spreadsheet.flows_ao25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap25
  r = spreadsheet.flows_ap25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq25
  r = spreadsheet.flows_aq25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar25
  r = spreadsheet.flows_ar25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as25
  r = spreadsheet.flows_as25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at25
  r = spreadsheet.flows_at25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au25
  r = spreadsheet.flows_au25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av25
  r = spreadsheet.flows_av25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw25
  r = spreadsheet.flows_aw25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax25
  r = spreadsheet.flows_ax25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c26
  r = spreadsheet.flows_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d26
  r = spreadsheet.flows_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_e26
  r = spreadsheet.flows_e26
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f26
  r = spreadsheet.flows_f26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.33333333333331,r[:number],0.001)
end

def test_flows_g26
  r = spreadsheet.flows_g26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.93333333333334,r[:number],0.001)
end

def test_flows_h26
  r = spreadsheet.flows_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.53333333333333,r[:number],0.001)
end

def test_flows_i26
  r = spreadsheet.flows_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.16,r[:number],0.001)
end

def test_flows_j26
  r = spreadsheet.flows_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.96666666666667,r[:number],0.001)
end

def test_flows_k26
  r = spreadsheet.flows_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.77333333333334,r[:number],0.001)
end

def test_flows_l26
  r = spreadsheet.flows_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.57999999999998,r[:number],0.001)
end

def test_flows_m26
  r = spreadsheet.flows_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.19333333333333,r[:number],0.001)
end

def test_flows_n26
  r = spreadsheet.flows_n26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.0,r[:number],0.001)
end

def test_flows_r26
  r = spreadsheet.flows_r26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_s26
  r = spreadsheet.flows_s26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t26
  r = spreadsheet.flows_t26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u26
  r = spreadsheet.flows_u26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v26
  r = spreadsheet.flows_v26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w26
  r = spreadsheet.flows_w26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x26
  r = spreadsheet.flows_x26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y26
  r = spreadsheet.flows_y26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z26
  r = spreadsheet.flows_z26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa26
  r = spreadsheet.flows_aa26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab26
  r = spreadsheet.flows_ab26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad26
  r = spreadsheet.flows_ad26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6057.935672514621,r[:number],0.001)
end

def test_flows_ae26
  r = spreadsheet.flows_ae26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7790.713450292397,r[:number],0.001)
end

def test_flows_af26
  r = spreadsheet.flows_af26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19035.15562718385,r[:number],0.001)
end

def test_flows_ag26
  r = spreadsheet.flows_ag26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30064.1957043492,r[:number],0.001)
end

def test_flows_ah26
  r = spreadsheet.flows_ah26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40850.60486770894,r[:number],0.001)
end

def test_flows_ai26
  r = spreadsheet.flows_ai26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51369.62964991803,r[:number],0.001)
end

def test_flows_aj26
  r = spreadsheet.flows_aj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61598.71689183987,r[:number],0.001)
end

def test_flows_ak26
  r = spreadsheet.flows_ak26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71517.27457861064,r[:number],0.001)
end

def test_flows_al26
  r = spreadsheet.flows_al26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81106.46320726982,r[:number],0.001)
end

def test_flows_am26
  r = spreadsheet.flows_am26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90349.01323343691,r[:number],0.001)
end

def test_flows_c27
  r = spreadsheet.flows_c27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d27
  r = spreadsheet.flows_d27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e27
  r = spreadsheet.flows_e27
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f27
  r = spreadsheet.flows_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_flows_g27
  r = spreadsheet.flows_g27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_flows_h27
  r = spreadsheet.flows_h27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.1419555555556,r[:number],0.001)
end

def test_flows_i27
  r = spreadsheet.flows_i27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_flows_j27
  r = spreadsheet.flows_j27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_flows_k27
  r = spreadsheet.flows_k27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_flows_l27
  r = spreadsheet.flows_l27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_flows_m27
  r = spreadsheet.flows_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_flows_n27
  r = spreadsheet.flows_n27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.4752888888888,r[:number],0.001)
end

def test_flows_r27
  r = spreadsheet.flows_r27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_s27
  r = spreadsheet.flows_s27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t27
  r = spreadsheet.flows_t27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u27
  r = spreadsheet.flows_u27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v27
  r = spreadsheet.flows_v27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w27
  r = spreadsheet.flows_w27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x27
  r = spreadsheet.flows_x27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y27
  r = spreadsheet.flows_y27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z27
  r = spreadsheet.flows_z27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa27
  r = spreadsheet.flows_aa27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab27
  r = spreadsheet.flows_ab27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad27
  r = spreadsheet.flows_ad27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10059.968767862698,r[:number],0.001)
end

def test_flows_ae27
  r = spreadsheet.flows_ae27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10060.833809194095,r[:number],0.001)
end

def test_flows_af27
  r = spreadsheet.flows_af27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16165.480209710387,r[:number],0.001)
end

def test_flows_ag27
  r = spreadsheet.flows_ag27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22026.377780353803,r[:number],0.001)
end

def test_flows_ah27
  r = spreadsheet.flows_ah27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27621.830767206702,r[:number],0.001)
end

def test_flows_ai27
  r = spreadsheet.flows_ai27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32932.076610471704,r[:number],0.001)
end

def test_flows_aj27
  r = spreadsheet.flows_aj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37939.03200968468,r[:number],0.001)
end

def test_flows_ak27
  r = spreadsheet.flows_ak27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42626.165506413534,r[:number],0.001)
end

def test_flows_al27
  r = spreadsheet.flows_al27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46978.32796740651,r[:number],0.001)
end

def test_flows_am27
  r = spreadsheet.flows_am27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50981.58297654924,r[:number],0.001)
end

def test_flows_c28
  r = spreadsheet.flows_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d28
  r = spreadsheet.flows_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e28
  r = spreadsheet.flows_e28
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f28
  r = spreadsheet.flows_f28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(770.0903527777773,r[:number],0.001)
end

def test_flows_g28
  r = spreadsheet.flows_g28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(767.4903527777769,r[:number],0.001)
end

def test_flows_h28
  r = spreadsheet.flows_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(764.8903527777784,r[:number],0.001)
end

def test_flows_i28
  r = spreadsheet.flows_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(519.5518430555549,r[:number],0.001)
end

def test_flows_j28
  r = spreadsheet.flows_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(513.7451763888894,r[:number],0.001)
end

def test_flows_k28
  r = spreadsheet.flows_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(507.9385097222221,r[:number],0.001)
end

def test_flows_l28
  r = spreadsheet.flows_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(502.1318430555548,r[:number],0.001)
end

def test_flows_m28
  r = spreadsheet.flows_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.518509722222,r[:number],0.001)
end

def test_flows_n28
  r = spreadsheet.flows_n28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.7118430555547,r[:number],0.001)
end

def test_flows_r28
  r = spreadsheet.flows_r28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_flows_s28
  r = spreadsheet.flows_s28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_flows_t28
  r = spreadsheet.flows_t28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_flows_u28
  r = spreadsheet.flows_u28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3656.6491221630395,r[:number],0.001)
end

def test_flows_v28
  r = spreadsheet.flows_v28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4078.9370920274823,r[:number],0.001)
end

def test_flows_w28
  r = spreadsheet.flows_w28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4467.077983986471,r[:number],0.001)
end

def test_flows_x28
  r = spreadsheet.flows_x28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4721.321387509617,r[:number],0.001)
end

def test_flows_y28
  r = spreadsheet.flows_y28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4972.473207220269,r[:number],0.001)
end

def test_flows_z28
  r = spreadsheet.flows_z28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5132.017140903075,r[:number],0.001)
end

def test_flows_aa28
  r = spreadsheet.flows_aa28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5240.990780676136,r[:number],0.001)
end

def test_flows_ab28
  r = spreadsheet.flows_ab28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_flows_ad28
  r = spreadsheet.flows_ad28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae28
  r = spreadsheet.flows_ae28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af28
  r = spreadsheet.flows_af28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag28
  r = spreadsheet.flows_ag28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah28
  r = spreadsheet.flows_ah28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai28
  r = spreadsheet.flows_ai28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj28
  r = spreadsheet.flows_aj28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak28
  r = spreadsheet.flows_ak28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al28
  r = spreadsheet.flows_al28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am28
  r = spreadsheet.flows_am28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c29
  r = spreadsheet.flows_c29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d29
  r = spreadsheet.flows_d29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e29
  r = spreadsheet.flows_e29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f29
  r = spreadsheet.flows_f29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g29
  r = spreadsheet.flows_g29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h29
  r = spreadsheet.flows_h29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i29
  r = spreadsheet.flows_i29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j29
  r = spreadsheet.flows_j29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k29
  r = spreadsheet.flows_k29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l29
  r = spreadsheet.flows_l29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m29
  r = spreadsheet.flows_m29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n29
  r = spreadsheet.flows_n29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r29
  r = spreadsheet.flows_r29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_s29
  r = spreadsheet.flows_s29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t29
  r = spreadsheet.flows_t29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u29
  r = spreadsheet.flows_u29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v29
  r = spreadsheet.flows_v29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w29
  r = spreadsheet.flows_w29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x29
  r = spreadsheet.flows_x29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y29
  r = spreadsheet.flows_y29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z29
  r = spreadsheet.flows_z29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa29
  r = spreadsheet.flows_aa29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab29
  r = spreadsheet.flows_ab29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad29
  r = spreadsheet.flows_ad29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34952.082593778185,r[:number],0.001)
end

def test_flows_ae29
  r = spreadsheet.flows_ae29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34943.5910743952,r[:number],0.001)
end

def test_flows_af29
  r = spreadsheet.flows_af29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39410.81876699382,r[:number],0.001)
end

def test_flows_ag29
  r = spreadsheet.flows_ag29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43878.58695170552,r[:number],0.001)
end

def test_flows_ah29
  r = spreadsheet.flows_ah29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48347.95070063732,r[:number],0.001)
end

def test_flows_ai29
  r = spreadsheet.flows_ai29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52817.75001428254,r[:number],0.001)
end

def test_flows_aj29
  r = spreadsheet.flows_aj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57289.4190739351,r[:number],0.001)
end

def test_flows_ak29
  r = spreadsheet.flows_ak29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61761.86628756132,r[:number],0.001)
end

def test_flows_al29
  r = spreadsheet.flows_al29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66234.91562189882,r[:number],0.001)
end

def test_flows_am29
  r = spreadsheet.flows_am29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70708.43086576476,r[:number],0.001)
end

def test_flows_c30
  r = spreadsheet.flows_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d30
  r = spreadsheet.flows_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e30
  r = spreadsheet.flows_e30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f30
  r = spreadsheet.flows_f30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g30
  r = spreadsheet.flows_g30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h30
  r = spreadsheet.flows_h30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i30
  r = spreadsheet.flows_i30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j30
  r = spreadsheet.flows_j30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k30
  r = spreadsheet.flows_k30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l30
  r = spreadsheet.flows_l30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m30
  r = spreadsheet.flows_m30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n30
  r = spreadsheet.flows_n30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r30
  r = spreadsheet.flows_r30
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_s30
  r = spreadsheet.flows_s30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t30
  r = spreadsheet.flows_t30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u30
  r = spreadsheet.flows_u30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v30
  r = spreadsheet.flows_v30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w30
  r = spreadsheet.flows_w30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x30
  r = spreadsheet.flows_x30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y30
  r = spreadsheet.flows_y30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z30
  r = spreadsheet.flows_z30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa30
  r = spreadsheet.flows_aa30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab30
  r = spreadsheet.flows_ab30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad30
  r = spreadsheet.flows_ad30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae30
  r = spreadsheet.flows_ae30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_af30
  r = spreadsheet.flows_af30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ag30
  r = spreadsheet.flows_ag30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ah30
  r = spreadsheet.flows_ah30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ai30
  r = spreadsheet.flows_ai30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aj30
  r = spreadsheet.flows_aj30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ak30
  r = spreadsheet.flows_ak30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_al30
  r = spreadsheet.flows_al30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_am30
  r = spreadsheet.flows_am30
  assert_equal(:ExcelError,r[:type])
end

def test_flows_c31
  r = spreadsheet.flows_c31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d31
  r = spreadsheet.flows_d31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e31
  r = spreadsheet.flows_e31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f31
  r = spreadsheet.flows_f31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g31
  r = spreadsheet.flows_g31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h31
  r = spreadsheet.flows_h31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i31
  r = spreadsheet.flows_i31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j31
  r = spreadsheet.flows_j31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k31
  r = spreadsheet.flows_k31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l31
  r = spreadsheet.flows_l31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m31
  r = spreadsheet.flows_m31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n31
  r = spreadsheet.flows_n31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r31
  r = spreadsheet.flows_r31
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_flows_s31
  r = spreadsheet.flows_s31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t31
  r = spreadsheet.flows_t31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u31
  r = spreadsheet.flows_u31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v31
  r = spreadsheet.flows_v31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w31
  r = spreadsheet.flows_w31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x31
  r = spreadsheet.flows_x31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y31
  r = spreadsheet.flows_y31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z31
  r = spreadsheet.flows_z31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa31
  r = spreadsheet.flows_aa31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab31
  r = spreadsheet.flows_ab31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad31
  r = spreadsheet.flows_ad31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_ae31
  r = spreadsheet.flows_ae31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_af31
  r = spreadsheet.flows_af31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_ag31
  r = spreadsheet.flows_ag31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_ah31
  r = spreadsheet.flows_ah31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_ai31
  r = spreadsheet.flows_ai31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_aj31
  r = spreadsheet.flows_aj31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_ak31
  r = spreadsheet.flows_ak31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_al31
  r = spreadsheet.flows_al31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_am31
  r = spreadsheet.flows_am31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_c32
  r = spreadsheet.flows_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d32
  r = spreadsheet.flows_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e32
  r = spreadsheet.flows_e32
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f32
  r = spreadsheet.flows_f32
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g32
  r = spreadsheet.flows_g32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52597.459368548065,r[:number],0.001)
end

def test_flows_h32
  r = spreadsheet.flows_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77149.79285924883,r[:number],0.001)
end

def test_flows_i32
  r = spreadsheet.flows_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97976.11881334915,r[:number],0.001)
end

def test_flows_j32
  r = spreadsheet.flows_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112843.43844414975,r[:number],0.001)
end

def test_flows_k32
  r = spreadsheet.flows_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124769.7970761622,r[:number],0.001)
end

def test_flows_l32
  r = spreadsheet.flows_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138977.05551622808,r[:number],0.001)
end

def test_flows_m32
  r = spreadsheet.flows_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153173.5316288559,r[:number],0.001)
end

def test_flows_n32
  r = spreadsheet.flows_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165297.6510189064,r[:number],0.001)
end

def test_flows_r32
  r = spreadsheet.flows_r32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_s32
  r = spreadsheet.flows_s32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t32
  r = spreadsheet.flows_t32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u32
  r = spreadsheet.flows_u32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v32
  r = spreadsheet.flows_v32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w32
  r = spreadsheet.flows_w32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x32
  r = spreadsheet.flows_x32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y32
  r = spreadsheet.flows_y32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z32
  r = spreadsheet.flows_z32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa32
  r = spreadsheet.flows_aa32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab32
  r = spreadsheet.flows_ab32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad32
  r = spreadsheet.flows_ad32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3222.2222222222217,r[:number],0.001)
end

def test_flows_ae32
  r = spreadsheet.flows_ae32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3222.2222222222217,r[:number],0.001)
end

def test_flows_af32
  r = spreadsheet.flows_af32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7394.948535406369,r[:number],0.001)
end

def test_flows_ag32
  r = spreadsheet.flows_ag32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11567.67484859052,r[:number],0.001)
end

def test_flows_ah32
  r = spreadsheet.flows_ah32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15740.401161774667,r[:number],0.001)
end

def test_flows_ai32
  r = spreadsheet.flows_ai32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19913.127474958816,r[:number],0.001)
end

def test_flows_aj32
  r = spreadsheet.flows_aj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24085.853788142962,r[:number],0.001)
end

def test_flows_ak32
  r = spreadsheet.flows_ak32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28258.58010132711,r[:number],0.001)
end

def test_flows_al32
  r = spreadsheet.flows_al32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32431.306414511255,r[:number],0.001)
end

def test_flows_am32
  r = spreadsheet.flows_am32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36604.032727695405,r[:number],0.001)
end

def test_flows_c33
  r = spreadsheet.flows_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d33
  r = spreadsheet.flows_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e33
  r = spreadsheet.flows_e33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3107.8093659942365,r[:number],0.001)
end

def test_flows_f33
  r = spreadsheet.flows_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2520.590057636888,r[:number],0.001)
end

def test_flows_g33
  r = spreadsheet.flows_g33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2668.8434251084773,r[:number],0.001)
end

def test_flows_h33
  r = spreadsheet.flows_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2432.846856370433,r[:number],0.001)
end

def test_flows_i33
  r = spreadsheet.flows_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2056.867358967422,r[:number],0.001)
end

def test_flows_j33
  r = spreadsheet.flows_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2019.6835171672626,r[:number],0.001)
end

def test_flows_k33
  r = spreadsheet.flows_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1678.552785085362,r[:number],0.001)
end

def test_flows_l33
  r = spreadsheet.flows_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1461.8479825722668,r[:number],0.001)
end

def test_flows_m33
  r = spreadsheet.flows_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1270.915265078404,r[:number],0.001)
end

def test_flows_n33
  r = spreadsheet.flows_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1300.7303577804782,r[:number],0.001)
end

def test_flows_r33
  r = spreadsheet.flows_r33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_s33
  r = spreadsheet.flows_s33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t33
  r = spreadsheet.flows_t33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u33
  r = spreadsheet.flows_u33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v33
  r = spreadsheet.flows_v33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w33
  r = spreadsheet.flows_w33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x33
  r = spreadsheet.flows_x33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y33
  r = spreadsheet.flows_y33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z33
  r = spreadsheet.flows_z33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa33
  r = spreadsheet.flows_aa33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab33
  r = spreadsheet.flows_ab33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad33
  r = spreadsheet.flows_ad33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3873.4126984126983,r[:number],0.001)
end

def test_flows_ae33
  r = spreadsheet.flows_ae33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3873.1781581536443,r[:number],0.001)
end

def test_flows_af33
  r = spreadsheet.flows_af33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7794.614240450033,r[:number],0.001)
end

def test_flows_ag33
  r = spreadsheet.flows_ag33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11715.985740096126,r[:number],0.001)
end

def test_flows_ah33
  r = spreadsheet.flows_ah33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15637.267615082977,r[:number],0.001)
end

def test_flows_ai33
  r = spreadsheet.flows_ai33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19558.436208047384,r[:number],0.001)
end

def test_flows_aj33
  r = spreadsheet.flows_aj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23479.482282520763,r[:number],0.001)
end

def test_flows_ak33
  r = spreadsheet.flows_ak33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27400.390207420325,r[:number],0.001)
end

def test_flows_al33
  r = spreadsheet.flows_al33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31321.133209439413,r[:number],0.001)
end

def test_flows_am33
  r = spreadsheet.flows_am33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35241.67482495561,r[:number],0.001)
end

def test_flows_c34
  r = spreadsheet.flows_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d34
  r = spreadsheet.flows_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e34
  r = spreadsheet.flows_e34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11336.947860696517,r[:number],0.001)
end

def test_flows_f34
  r = spreadsheet.flows_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10733.876248961675,r[:number],0.001)
end

def test_flows_g34
  r = spreadsheet.flows_g34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21439.556283807135,r[:number],0.001)
end

def test_flows_h34
  r = spreadsheet.flows_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30521.013171818096,r[:number],0.001)
end

def test_flows_i34
  r = spreadsheet.flows_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39024.68721692242,r[:number],0.001)
end

def test_flows_j34
  r = spreadsheet.flows_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46606.34476510563,r[:number],0.001)
end

def test_flows_k34
  r = spreadsheet.flows_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53425.20514326828,r[:number],0.001)
end

def test_flows_l34
  r = spreadsheet.flows_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61126.092568208725,r[:number],0.001)
end

def test_flows_m34
  r = spreadsheet.flows_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68670.27009202295,r[:number],0.001)
end

def test_flows_n34
  r = spreadsheet.flows_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75572.64548088411,r[:number],0.001)
end

def test_flows_r34
  r = spreadsheet.flows_r34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_s34
  r = spreadsheet.flows_s34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t34
  r = spreadsheet.flows_t34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u34
  r = spreadsheet.flows_u34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v34
  r = spreadsheet.flows_v34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w34
  r = spreadsheet.flows_w34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x34
  r = spreadsheet.flows_x34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y34
  r = spreadsheet.flows_y34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z34
  r = spreadsheet.flows_z34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa34
  r = spreadsheet.flows_aa34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab34
  r = spreadsheet.flows_ab34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad34
  r = spreadsheet.flows_ad34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae34
  r = spreadsheet.flows_ae34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_af34
  r = spreadsheet.flows_af34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ag34
  r = spreadsheet.flows_ag34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ah34
  r = spreadsheet.flows_ah34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ai34
  r = spreadsheet.flows_ai34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aj34
  r = spreadsheet.flows_aj34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ak34
  r = spreadsheet.flows_ak34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_al34
  r = spreadsheet.flows_al34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_am34
  r = spreadsheet.flows_am34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ao34
  r = spreadsheet.flows_ao34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ap34
  r = spreadsheet.flows_ap34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aq34
  r = spreadsheet.flows_aq34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ar34
  r = spreadsheet.flows_ar34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_as34
  r = spreadsheet.flows_as34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_at34
  r = spreadsheet.flows_at34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_au34
  r = spreadsheet.flows_au34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_av34
  r = spreadsheet.flows_av34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aw34
  r = spreadsheet.flows_aw34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ax34
  r = spreadsheet.flows_ax34
  assert_equal(:ExcelError,r[:type])
end

def test_flows_c35
  r = spreadsheet.flows_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_flows_d35
  r = spreadsheet.flows_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e35
  r = spreadsheet.flows_e35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7692.409950777203,r[:number],0.001)
end

def test_flows_f35
  r = spreadsheet.flows_f35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8240.833333333336,r[:number],0.001)
end

def test_flows_g35
  r = spreadsheet.flows_g35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9178.701685799006,r[:number],0.001)
end

def test_flows_h35
  r = spreadsheet.flows_h35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10582.170658400002,r[:number],0.001)
end

def test_flows_i35
  r = spreadsheet.flows_i35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11297.59158,r[:number],0.001)
end

def test_flows_j35
  r = spreadsheet.flows_j35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11760.703521404163,r[:number],0.001)
end

def test_flows_k35
  r = spreadsheet.flows_k35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11970.555889714316,r[:number],0.001)
end

def test_flows_l35
  r = spreadsheet.flows_l35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12218.535895963063,r[:number],0.001)
end

def test_flows_m35
  r = spreadsheet.flows_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12247.836980486622,r[:number],0.001)
end

def test_flows_n35
  r = spreadsheet.flows_n35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_flows_r35
  r = spreadsheet.flows_r35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_s35
  r = spreadsheet.flows_s35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t35
  r = spreadsheet.flows_t35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u35
  r = spreadsheet.flows_u35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v35
  r = spreadsheet.flows_v35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w35
  r = spreadsheet.flows_w35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x35
  r = spreadsheet.flows_x35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y35
  r = spreadsheet.flows_y35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z35
  r = spreadsheet.flows_z35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa35
  r = spreadsheet.flows_aa35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab35
  r = spreadsheet.flows_ab35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad35
  r = spreadsheet.flows_ad35
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae35
  r = spreadsheet.flows_ae35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31334.57545819761,r[:number],0.001)
end

def test_flows_af35
  r = spreadsheet.flows_af35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56513.158189665664,r[:number],0.001)
end

def test_flows_ag35
  r = spreadsheet.flows_ag35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79016.74481254462,r[:number],0.001)
end

def test_flows_ah35
  r = spreadsheet.flows_ah35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96757.63435982258,r[:number],0.001)
end

def test_flows_ai35
  r = spreadsheet.flows_ai35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108774.7419983816,r[:number],0.001)
end

def test_flows_aj35
  r = spreadsheet.flows_aj35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117410.66280248637,r[:number],0.001)
end

def test_flows_ak35
  r = spreadsheet.flows_ak35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130144.34710014571,r[:number],0.001)
end

def test_flows_al35
  r = spreadsheet.flows_al35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143256.37191469883,r[:number],0.001)
end

def test_flows_am35
  r = spreadsheet.flows_am35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154947.78321075535,r[:number],0.001)
end

def test_flows_c36
  r = spreadsheet.flows_c36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_d36
  r = spreadsheet.flows_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_e36
  r = spreadsheet.flows_e36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2625.698849869245,r[:number],0.001)
end

def test_flows_f36
  r = spreadsheet.flows_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2839.8963937661565,r[:number],0.001)
end

def test_flows_g36
  r = spreadsheet.flows_g36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3921.0022057248916,r[:number],0.001)
end

def test_flows_h36
  r = spreadsheet.flows_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4654.706061531538,r[:number],0.001)
end

def test_flows_i36
  r = spreadsheet.flows_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5041.000302055173,r[:number],0.001)
end

def test_flows_j36
  r = spreadsheet.flows_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5079.850423506647,r[:number],0.001)
end

def test_flows_k36
  r = spreadsheet.flows_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4771.195808284624,r[:number],0.001)
end

def test_flows_l36
  r = spreadsheet.flows_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4114.971598054606,r[:number],0.001)
end

def test_flows_m36
  r = spreadsheet.flows_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3111.1034599993054,r[:number],0.001)
end

def test_flows_n36
  r = spreadsheet.flows_n36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_flows_r36
  r = spreadsheet.flows_r36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_flows_s36
  r = spreadsheet.flows_s36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t36
  r = spreadsheet.flows_t36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u36
  r = spreadsheet.flows_u36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v36
  r = spreadsheet.flows_v36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w36
  r = spreadsheet.flows_w36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x36
  r = spreadsheet.flows_x36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y36
  r = spreadsheet.flows_y36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z36
  r = spreadsheet.flows_z36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa36
  r = spreadsheet.flows_aa36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab36
  r = spreadsheet.flows_ab36
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad36
  r = spreadsheet.flows_ad36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae36
  r = spreadsheet.flows_ae36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af36
  r = spreadsheet.flows_af36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag36
  r = spreadsheet.flows_ag36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah36
  r = spreadsheet.flows_ah36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai36
  r = spreadsheet.flows_ai36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj36
  r = spreadsheet.flows_aj36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak36
  r = spreadsheet.flows_ak36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al36
  r = spreadsheet.flows_al36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am36
  r = spreadsheet.flows_am36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c37
  r = spreadsheet.flows_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_d37
  r = spreadsheet.flows_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e37
  r = spreadsheet.flows_e37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16116.700710146763,r[:number],0.001)
end

def test_flows_f37
  r = spreadsheet.flows_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15365.177637421237,r[:number],0.001)
end

def test_flows_g37
  r = spreadsheet.flows_g37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29002.817150830066,r[:number],0.001)
end

def test_flows_h37
  r = spreadsheet.flows_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41617.193530630226,r[:number],0.001)
end

def test_flows_i37
  r = spreadsheet.flows_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53814.736246566084,r[:number],0.001)
end

def test_flows_j37
  r = spreadsheet.flows_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65522.011335150506,r[:number],0.001)
end

def test_flows_k37
  r = spreadsheet.flows_k37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76711.0150978613,r[:number],0.001)
end

def test_flows_l37
  r = spreadsheet.flows_l37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87472.86310945092,r[:number],0.001)
end

def test_flows_m37
  r = spreadsheet.flows_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97798.97634220768,r[:number],0.001)
end

def test_flows_n37
  r = spreadsheet.flows_n37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107687.59286680566,r[:number],0.001)
end

def test_flows_r37
  r = spreadsheet.flows_r37
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_flows_s37
  r = spreadsheet.flows_s37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t37
  r = spreadsheet.flows_t37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u37
  r = spreadsheet.flows_u37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v37
  r = spreadsheet.flows_v37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w37
  r = spreadsheet.flows_w37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x37
  r = spreadsheet.flows_x37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y37
  r = spreadsheet.flows_y37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z37
  r = spreadsheet.flows_z37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa37
  r = spreadsheet.flows_aa37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab37
  r = spreadsheet.flows_ab37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad37
  r = spreadsheet.flows_ad37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.817339999999998,r[:number],0.001)
end

def test_flows_ae37
  r = spreadsheet.flows_ae37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.572895707388618,r[:number],0.001)
end

def test_flows_af37
  r = spreadsheet.flows_af37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.383064556311584,r[:number],0.001)
end

def test_flows_ag37
  r = spreadsheet.flows_ag37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.58984378892685,r[:number],0.001)
end

def test_flows_ah37
  r = spreadsheet.flows_ah37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.99670495670838,r[:number],0.001)
end

def test_flows_ai37
  r = spreadsheet.flows_ai37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.688791719453825,r[:number],0.001)
end

def test_flows_aj37
  r = spreadsheet.flows_aj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.384829464713203,r[:number],0.001)
end

def test_flows_ak37
  r = spreadsheet.flows_ak37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.084767495533725,r[:number],0.001)
end

def test_flows_al37
  r = spreadsheet.flows_al37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.788555765479813,r[:number],0.001)
end

def test_flows_am37
  r = spreadsheet.flows_am37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number],0.001)
end

def test_flows_c38
  r = spreadsheet.flows_c38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_d38
  r = spreadsheet.flows_d38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e38
  r = spreadsheet.flows_e38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31868.133379777246,r[:number],0.001)
end

def test_flows_f38
  r = spreadsheet.flows_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28795.713723595905,r[:number],0.001)
end

def test_flows_g38
  r = spreadsheet.flows_g38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52960.74140670772,r[:number],0.001)
end

def test_flows_h38
  r = spreadsheet.flows_h38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74413.9239536756,r[:number],0.001)
end

def test_flows_i38
  r = spreadsheet.flows_i38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91499.52842061775,r[:number],0.001)
end

def test_flows_j38
  r = spreadsheet.flows_j38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102628.30848916968,r[:number],0.001)
end

def test_flows_k38
  r = spreadsheet.flows_k38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110361.89998808427,r[:number],0.001)
end

def test_flows_l38
  r = spreadsheet.flows_l38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122195.69725546658,r[:number],0.001)
end

def test_flows_m38
  r = spreadsheet.flows_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134452.47416423686,r[:number],0.001)
end

def test_flows_n38
  r = spreadsheet.flows_n38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145308.85661278464,r[:number],0.001)
end

def test_flows_r38
  r = spreadsheet.flows_r38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_s38
  r = spreadsheet.flows_s38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.26242773454,r[:number],0.001)
end

def test_flows_t38
  r = spreadsheet.flows_t38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24401.403280908125,r[:number],0.001)
end

def test_flows_u38
  r = spreadsheet.flows_u38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43607.828038393345,r[:number],0.001)
end

def test_flows_v38
  r = spreadsheet.flows_v38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62656.90193214617,r[:number],0.001)
end

def test_flows_w38
  r = spreadsheet.flows_w38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82456.70798170843,r[:number],0.001)
end

def test_flows_x38
  r = spreadsheet.flows_x38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102654.50883552192,r[:number],0.001)
end

def test_flows_y38
  r = spreadsheet.flows_y38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123281.86494314478,r[:number],0.001)
end

def test_flows_z38
  r = spreadsheet.flows_z38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145917.53526742704,r[:number],0.001)
end

def test_flows_aa38
  r = spreadsheet.flows_aa38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169444.75279015908,r[:number],0.001)
end

def test_flows_ab38
  r = spreadsheet.flows_ab38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_flows_ad38
  r = spreadsheet.flows_ad38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24801.26242773454,r[:number],0.001)
end

def test_flows_ae38
  r = spreadsheet.flows_ae38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24401.403280908125,r[:number],0.001)
end

def test_flows_af38
  r = spreadsheet.flows_af38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43607.828038393345,r[:number],0.001)
end

def test_flows_ag38
  r = spreadsheet.flows_ag38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62656.90193214617,r[:number],0.001)
end

def test_flows_ah38
  r = spreadsheet.flows_ah38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82456.70798170843,r[:number],0.001)
end

def test_flows_ai38
  r = spreadsheet.flows_ai38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102654.50883552192,r[:number],0.001)
end

def test_flows_aj38
  r = spreadsheet.flows_aj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123281.86494314478,r[:number],0.001)
end

def test_flows_ak38
  r = spreadsheet.flows_ak38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145917.53526742704,r[:number],0.001)
end

def test_flows_al38
  r = spreadsheet.flows_al38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169444.75279015908,r[:number],0.001)
end

def test_flows_am38
  r = spreadsheet.flows_am38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193310.4369935423,r[:number],0.001)
end

def test_flows_ao38
  r = spreadsheet.flows_ao38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap38
  r = spreadsheet.flows_ap38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq38
  r = spreadsheet.flows_aq38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar38
  r = spreadsheet.flows_ar38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as38
  r = spreadsheet.flows_as38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at38
  r = spreadsheet.flows_at38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au38
  r = spreadsheet.flows_au38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av38
  r = spreadsheet.flows_av38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw38
  r = spreadsheet.flows_aw38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax38
  r = spreadsheet.flows_ax38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c39
  r = spreadsheet.flows_c39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d39
  r = spreadsheet.flows_d39
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_e39
  r = spreadsheet.flows_e39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f39
  r = spreadsheet.flows_f39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g39
  r = spreadsheet.flows_g39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h39
  r = spreadsheet.flows_h39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i39
  r = spreadsheet.flows_i39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j39
  r = spreadsheet.flows_j39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k39
  r = spreadsheet.flows_k39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l39
  r = spreadsheet.flows_l39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m39
  r = spreadsheet.flows_m39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n39
  r = spreadsheet.flows_n39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r39
  r = spreadsheet.flows_r39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_flows_s39
  r = spreadsheet.flows_s39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7692.409950777203,r[:number],0.001)
end

def test_flows_t39
  r = spreadsheet.flows_t39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8240.833333333336,r[:number],0.001)
end

def test_flows_u39
  r = spreadsheet.flows_u39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9178.701685799006,r[:number],0.001)
end

def test_flows_v39
  r = spreadsheet.flows_v39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10582.170658400002,r[:number],0.001)
end

def test_flows_w39
  r = spreadsheet.flows_w39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11297.59158,r[:number],0.001)
end

def test_flows_x39
  r = spreadsheet.flows_x39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11760.703521404163,r[:number],0.001)
end

def test_flows_y39
  r = spreadsheet.flows_y39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11970.555889714316,r[:number],0.001)
end

def test_flows_z39
  r = spreadsheet.flows_z39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12218.535895963063,r[:number],0.001)
end

def test_flows_aa39
  r = spreadsheet.flows_aa39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12247.836980486622,r[:number],0.001)
end

def test_flows_ab39
  r = spreadsheet.flows_ab39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12584.919595716869,r[:number],0.001)
end

def test_flows_ad39
  r = spreadsheet.flows_ad39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae39
  r = spreadsheet.flows_ae39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af39
  r = spreadsheet.flows_af39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag39
  r = spreadsheet.flows_ag39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah39
  r = spreadsheet.flows_ah39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai39
  r = spreadsheet.flows_ai39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj39
  r = spreadsheet.flows_aj39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak39
  r = spreadsheet.flows_ak39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al39
  r = spreadsheet.flows_al39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am39
  r = spreadsheet.flows_am39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c40
  r = spreadsheet.flows_c40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d40
  r = spreadsheet.flows_d40
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_e40
  r = spreadsheet.flows_e40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f40
  r = spreadsheet.flows_f40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g40
  r = spreadsheet.flows_g40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h40
  r = spreadsheet.flows_h40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i40
  r = spreadsheet.flows_i40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j40
  r = spreadsheet.flows_j40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k40
  r = spreadsheet.flows_k40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l40
  r = spreadsheet.flows_l40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m40
  r = spreadsheet.flows_m40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n40
  r = spreadsheet.flows_n40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r40
  r = spreadsheet.flows_r40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_s40
  r = spreadsheet.flows_s40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41924.201364077846,r[:number],0.001)
end

def test_flows_t40
  r = spreadsheet.flows_t40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.35219744025,r[:number],0.001)
end

def test_flows_u40
  r = spreadsheet.flows_u40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61374.2718755043,r[:number],0.001)
end

def test_flows_v40
  r = spreadsheet.flows_v40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.82421146327,r[:number],0.001)
end

def test_flows_w40
  r = spreadsheet.flows_w40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100867.14996464801,r[:number],0.001)
end

def test_flows_x40
  r = spreadsheet.flows_x40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120641.80238440383,r[:number],0.001)
end

def test_flows_y40
  r = spreadsheet.flows_y40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139819.61922359336,r[:number],0.001)
end

def test_flows_z40
  r = spreadsheet.flows_z40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158738.33283816374,r[:number],0.001)
end

def test_flows_aa40
  r = spreadsheet.flows_aa40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178053.0889068639,r[:number],0.001)
end

def test_flows_ab40
  r = spreadsheet.flows_ab40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_flows_ad40
  r = spreadsheet.flows_ad40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41924.201364077846,r[:number],0.001)
end

def test_flows_ae40
  r = spreadsheet.flows_ae40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.35219744025,r[:number],0.001)
end

def test_flows_af40
  r = spreadsheet.flows_af40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61374.2718755043,r[:number],0.001)
end

def test_flows_ag40
  r = spreadsheet.flows_ag40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.82421146327,r[:number],0.001)
end

def test_flows_ah40
  r = spreadsheet.flows_ah40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100867.14996464801,r[:number],0.001)
end

def test_flows_ai40
  r = spreadsheet.flows_ai40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120641.80238440383,r[:number],0.001)
end

def test_flows_aj40
  r = spreadsheet.flows_aj40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139819.61922359336,r[:number],0.001)
end

def test_flows_ak40
  r = spreadsheet.flows_ak40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158738.33283816374,r[:number],0.001)
end

def test_flows_al40
  r = spreadsheet.flows_al40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178053.0889068639,r[:number],0.001)
end

def test_flows_am40
  r = spreadsheet.flows_am40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197557.01018006023,r[:number],0.001)
end

def test_flows_ao40
  r = spreadsheet.flows_ao40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap40
  r = spreadsheet.flows_ap40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq40
  r = spreadsheet.flows_aq40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar40
  r = spreadsheet.flows_ar40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as40
  r = spreadsheet.flows_as40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at40
  r = spreadsheet.flows_at40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au40
  r = spreadsheet.flows_au40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av40
  r = spreadsheet.flows_av40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw40
  r = spreadsheet.flows_aw40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax40
  r = spreadsheet.flows_ax40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c41
  r = spreadsheet.flows_c41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d41
  r = spreadsheet.flows_d41
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_e41
  r = spreadsheet.flows_e41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f41
  r = spreadsheet.flows_f41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g41
  r = spreadsheet.flows_g41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h41
  r = spreadsheet.flows_h41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i41
  r = spreadsheet.flows_i41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j41
  r = spreadsheet.flows_j41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k41
  r = spreadsheet.flows_k41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l41
  r = spreadsheet.flows_l41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m41
  r = spreadsheet.flows_m41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n41
  r = spreadsheet.flows_n41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r41
  r = spreadsheet.flows_r41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s41
  r = spreadsheet.flows_s41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40948.310155728046,r[:number],0.001)
end

def test_flows_t41
  r = spreadsheet.flows_t41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41051.80424460304,r[:number],0.001)
end

def test_flows_u41
  r = spreadsheet.flows_u41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60727.443031970986,r[:number],0.001)
end

def test_flows_v41
  r = spreadsheet.flows_v41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80772.03526139053,r[:number],0.001)
end

def test_flows_w41
  r = spreadsheet.flows_w41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100478.87524043357,r[:number],0.001)
end

def test_flows_x41
  r = spreadsheet.flows_x41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120341.36280429363,r[:number],0.001)
end

def test_flows_y41
  r = spreadsheet.flows_y41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139587.1448036336,r[:number],0.001)
end

def test_flows_z41
  r = spreadsheet.flows_z41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158558.4485635425,r[:number],0.001)
end

def test_flows_aa41
  r = spreadsheet.flows_aa41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177913.89788420597,r[:number],0.001)
end

def test_flows_ab41
  r = spreadsheet.flows_ab41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197449.3068200564,r[:number],0.001)
end

def test_flows_ad41
  r = spreadsheet.flows_ad41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae41
  r = spreadsheet.flows_ae41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af41
  r = spreadsheet.flows_af41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag41
  r = spreadsheet.flows_ag41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah41
  r = spreadsheet.flows_ah41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai41
  r = spreadsheet.flows_ai41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj41
  r = spreadsheet.flows_aj41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak41
  r = spreadsheet.flows_ak41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al41
  r = spreadsheet.flows_al41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am41
  r = spreadsheet.flows_am41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c42
  r = spreadsheet.flows_c42
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d42
  r = spreadsheet.flows_d42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e42
  r = spreadsheet.flows_e42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f42
  r = spreadsheet.flows_f42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g42
  r = spreadsheet.flows_g42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h42
  r = spreadsheet.flows_h42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i42
  r = spreadsheet.flows_i42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j42
  r = spreadsheet.flows_j42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k42
  r = spreadsheet.flows_k42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l42
  r = spreadsheet.flows_l42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m42
  r = spreadsheet.flows_m42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n42
  r = spreadsheet.flows_n42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r42
  r = spreadsheet.flows_r42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_s42
  r = spreadsheet.flows_s42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number],0.001)
end

def test_flows_t42
  r = spreadsheet.flows_t42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.547952837212,r[:number],0.001)
end

def test_flows_u42
  r = spreadsheet.flows_u42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.8288435333163,r[:number],0.001)
end

def test_flows_v42
  r = spreadsheet.flows_v42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.7889500727494,r[:number],0.001)
end

def test_flows_w42
  r = spreadsheet.flows_w42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.27472421443264,r[:number],0.001)
end

def test_flows_x42
  r = spreadsheet.flows_x42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.43958011019754,r[:number],0.001)
end

def test_flows_y42
  r = spreadsheet.flows_y42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.47441995977493,r[:number],0.001)
end

def test_flows_z42
  r = spreadsheet.flows_z42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88427462124332,r[:number],0.001)
end

def test_flows_aa42
  r = spreadsheet.flows_aa42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19102265793308,r[:number],0.001)
end

def test_flows_ab42
  r = spreadsheet.flows_ab42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number],0.001)
end

def test_flows_ad42
  r = spreadsheet.flows_ad42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae42
  r = spreadsheet.flows_ae42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af42
  r = spreadsheet.flows_af42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag42
  r = spreadsheet.flows_ag42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah42
  r = spreadsheet.flows_ah42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai42
  r = spreadsheet.flows_ai42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj42
  r = spreadsheet.flows_aj42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak42
  r = spreadsheet.flows_ak42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al42
  r = spreadsheet.flows_al42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am42
  r = spreadsheet.flows_am42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c43
  r = spreadsheet.flows_c43
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d43
  r = spreadsheet.flows_d43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e43
  r = spreadsheet.flows_e43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f43
  r = spreadsheet.flows_f43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g43
  r = spreadsheet.flows_g43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h43
  r = spreadsheet.flows_h43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i43
  r = spreadsheet.flows_i43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j43
  r = spreadsheet.flows_j43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k43
  r = spreadsheet.flows_k43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l43
  r = spreadsheet.flows_l43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m43
  r = spreadsheet.flows_m43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n43
  r = spreadsheet.flows_n43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r43
  r = spreadsheet.flows_r43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_flows_s43
  r = spreadsheet.flows_s43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t43
  r = spreadsheet.flows_t43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u43
  r = spreadsheet.flows_u43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v43
  r = spreadsheet.flows_v43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w43
  r = spreadsheet.flows_w43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x43
  r = spreadsheet.flows_x43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y43
  r = spreadsheet.flows_y43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z43
  r = spreadsheet.flows_z43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa43
  r = spreadsheet.flows_aa43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab43
  r = spreadsheet.flows_ab43
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad43
  r = spreadsheet.flows_ad43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae43
  r = spreadsheet.flows_ae43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af43
  r = spreadsheet.flows_af43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag43
  r = spreadsheet.flows_ag43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah43
  r = spreadsheet.flows_ah43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai43
  r = spreadsheet.flows_ai43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj43
  r = spreadsheet.flows_aj43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak43
  r = spreadsheet.flows_ak43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al43
  r = spreadsheet.flows_al43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am43
  r = spreadsheet.flows_am43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c44
  r = spreadsheet.flows_c44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d44
  r = spreadsheet.flows_d44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e44
  r = spreadsheet.flows_e44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_flows_f44
  r = spreadsheet.flows_f44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.862,r[:number],0.001)
end

def test_flows_g44
  r = spreadsheet.flows_g44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.195800664283027,r[:number],0.001)
end

def test_flows_h44
  r = spreadsheet.flows_h44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.52960132856605,r[:number],0.001)
end

def test_flows_i44
  r = spreadsheet.flows_i44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.225019602582634,r[:number],0.001)
end

def test_flows_j44
  r = spreadsheet.flows_j44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.9316937694213,r[:number],0.001)
end

def test_flows_k44
  r = spreadsheet.flows_k44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.23065738478488,r[:number],0.001)
end

def test_flows_l44
  r = spreadsheet.flows_l44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.93160038057601,r[:number],0.001)
end

def test_flows_m44
  r = spreadsheet.flows_m44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.1905844740417,r[:number],0.001)
end

def test_flows_n44
  r = spreadsheet.flows_n44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438.78894651715325,r[:number],0.001)
end

def test_flows_r44
  r = spreadsheet.flows_r44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_s44
  r = spreadsheet.flows_s44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t44
  r = spreadsheet.flows_t44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u44
  r = spreadsheet.flows_u44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v44
  r = spreadsheet.flows_v44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w44
  r = spreadsheet.flows_w44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x44
  r = spreadsheet.flows_x44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y44
  r = spreadsheet.flows_y44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z44
  r = spreadsheet.flows_z44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa44
  r = spreadsheet.flows_aa44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab44
  r = spreadsheet.flows_ab44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad44
  r = spreadsheet.flows_ad44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1161.7189949601961,r[:number],0.001)
end

def test_flows_ae44
  r = spreadsheet.flows_ae44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af44
  r = spreadsheet.flows_af44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag44
  r = spreadsheet.flows_ag44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.1827872842550278e-11,r[:number],0.001)
end

def test_flows_ah44
  r = spreadsheet.flows_ah44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(7.275957614183426e-12,r[:number],0.001)
end

def test_flows_ai44
  r = spreadsheet.flows_ai44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj44
  r = spreadsheet.flows_aj44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak44
  r = spreadsheet.flows_ak44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al44
  r = spreadsheet.flows_al44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am44
  r = spreadsheet.flows_am44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c45
  r = spreadsheet.flows_c45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_flows_d45
  r = spreadsheet.flows_d45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e45
  r = spreadsheet.flows_e45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f45
  r = spreadsheet.flows_f45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g45
  r = spreadsheet.flows_g45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h45
  r = spreadsheet.flows_h45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i45
  r = spreadsheet.flows_i45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j45
  r = spreadsheet.flows_j45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k45
  r = spreadsheet.flows_k45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l45
  r = spreadsheet.flows_l45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m45
  r = spreadsheet.flows_m45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n45
  r = spreadsheet.flows_n45
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r45
  r = spreadsheet.flows_r45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_flows_s45
  r = spreadsheet.flows_s45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_flows_t45
  r = spreadsheet.flows_t45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_flows_u45
  r = spreadsheet.flows_u45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4076.654569296791,r[:number],0.001)
end

def test_flows_v45
  r = spreadsheet.flows_v45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6772.450097198011,r[:number],0.001)
end

def test_flows_w45
  r = spreadsheet.flows_w45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9570.488435555515,r[:number],0.001)
end

def test_flows_x45
  r = spreadsheet.flows_x45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12470.7695843693,r[:number],0.001)
end

def test_flows_y45
  r = spreadsheet.flows_y45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15473.29354363937,r[:number],0.001)
end

def test_flows_z45
  r = spreadsheet.flows_z45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18578.06031336572,r[:number],0.001)
end

def test_flows_aa45
  r = spreadsheet.flows_aa45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21785.069893548352,r[:number],0.001)
end

def test_flows_ab45
  r = spreadsheet.flows_ab45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_flows_ad45
  r = spreadsheet.flows_ad45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae45
  r = spreadsheet.flows_ae45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af45
  r = spreadsheet.flows_af45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag45
  r = spreadsheet.flows_ag45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah45
  r = spreadsheet.flows_ah45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai45
  r = spreadsheet.flows_ai45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj45
  r = spreadsheet.flows_aj45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak45
  r = spreadsheet.flows_ak45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al45
  r = spreadsheet.flows_al45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am45
  r = spreadsheet.flows_am45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c46
  r = spreadsheet.flows_c46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_flows_d46
  r = spreadsheet.flows_d46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e46
  r = spreadsheet.flows_e46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f46
  r = spreadsheet.flows_f46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g46
  r = spreadsheet.flows_g46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h46
  r = spreadsheet.flows_h46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i46
  r = spreadsheet.flows_i46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j46
  r = spreadsheet.flows_j46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k46
  r = spreadsheet.flows_k46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l46
  r = spreadsheet.flows_l46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m46
  r = spreadsheet.flows_m46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n46
  r = spreadsheet.flows_n46
  assert_equal(:ExcelError,r[:type])
end

def test_flows_r46
  r = spreadsheet.flows_r46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_flows_s46
  r = spreadsheet.flows_s46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t46
  r = spreadsheet.flows_t46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u46
  r = spreadsheet.flows_u46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v46
  r = spreadsheet.flows_v46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w46
  r = spreadsheet.flows_w46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x46
  r = spreadsheet.flows_x46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y46
  r = spreadsheet.flows_y46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z46
  r = spreadsheet.flows_z46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa46
  r = spreadsheet.flows_aa46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab46
  r = spreadsheet.flows_ab46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad46
  r = spreadsheet.flows_ad46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.08803025264945,r[:number],0.001)
end

def test_flows_ae46
  r = spreadsheet.flows_ae46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.21310206958543,r[:number],0.001)
end

def test_flows_af46
  r = spreadsheet.flows_af46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.6420703714108,r[:number],0.001)
end

def test_flows_ag46
  r = spreadsheet.flows_ag46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(384.69630328761616,r[:number],0.001)
end

def test_flows_ah46
  r = spreadsheet.flows_ah46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(439.6680477607726,r[:number],0.001)
end

def test_flows_ai46
  r = spreadsheet.flows_ai46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.3110094479489,r[:number],0.001)
end

def test_flows_aj46
  r = spreadsheet.flows_aj46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.1749050989815,r[:number],0.001)
end

def test_flows_ak46
  r = spreadsheet.flows_ak46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430.520129035978,r[:number],0.001)
end

def test_flows_al46
  r = spreadsheet.flows_al46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.64313889978985,r[:number],0.001)
end

def test_flows_am46
  r = spreadsheet.flows_am46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.22373390885835,r[:number],0.001)
end

def test_flows_c47
  r = spreadsheet.flows_c47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_flows_d47
  r = spreadsheet.flows_d47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e47
  r = spreadsheet.flows_e47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f47
  r = spreadsheet.flows_f47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g47
  r = spreadsheet.flows_g47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.19723500000000002,r[:number],0.001)
end

def test_flows_h47
  r = spreadsheet.flows_h47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9288768981296096,r[:number],0.001)
end

def test_flows_i47
  r = spreadsheet.flows_i47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4240733812697526,r[:number],0.001)
end

def test_flows_j47
  r = spreadsheet.flows_j47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.920461149446789,r[:number],0.001)
end

def test_flows_k47
  r = spreadsheet.flows_k47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.283378034043395,r[:number],0.001)
end

def test_flows_l47
  r = spreadsheet.flows_l47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.880144313528724,r[:number],0.001)
end

def test_flows_m47
  r = spreadsheet.flows_m47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.6827757959162,r[:number],0.001)
end

def test_flows_n47
  r = spreadsheet.flows_n47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_flows_r47
  r = spreadsheet.flows_r47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_s47
  r = spreadsheet.flows_s47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t47
  r = spreadsheet.flows_t47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u47
  r = spreadsheet.flows_u47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_v47
  r = spreadsheet.flows_v47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_w47
  r = spreadsheet.flows_w47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_x47
  r = spreadsheet.flows_x47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_y47
  r = spreadsheet.flows_y47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_z47
  r = spreadsheet.flows_z47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aa47
  r = spreadsheet.flows_aa47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ab47
  r = spreadsheet.flows_ab47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad47
  r = spreadsheet.flows_ad47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13767.982020983483,r[:number],0.001)
end

def test_flows_ae47
  r = spreadsheet.flows_ae47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14067.150095863088,r[:number],0.001)
end

def test_flows_af47
  r = spreadsheet.flows_af47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21472.46252269687,r[:number],0.001)
end

def test_flows_ag47
  r = spreadsheet.flows_ag47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29790.23073776863,r[:number],0.001)
end

def test_flows_ah47
  r = spreadsheet.flows_ah47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38006.69275338106,r[:number],0.001)
end

def test_flows_ai47
  r = spreadsheet.flows_ai47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46266.134581066064,r[:number],0.001)
end

def test_flows_aj47
  r = spreadsheet.flows_aj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54333.27399859886,r[:number],0.001)
end

def test_flows_ak47
  r = spreadsheet.flows_ak47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62153.4860738792,r[:number],0.001)
end

def test_flows_al47
  r = spreadsheet.flows_al47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70024.28279301016,r[:number],0.001)
end

def test_flows_am47
  r = spreadsheet.flows_am47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77313.72151028871,r[:number],0.001)
end

def test_flows_c48
  r = spreadsheet.flows_c48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_flows_d48
  r = spreadsheet.flows_d48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e48
  r = spreadsheet.flows_e48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_flows_f48
  r = spreadsheet.flows_f48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.7,r[:number],0.001)
end

def test_flows_g48
  r = spreadsheet.flows_g48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.54344669789631,r[:number],0.001)
end

def test_flows_h48
  r = spreadsheet.flows_h48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.21459580595813,r[:number],0.001)
end

def test_flows_i48
  r = spreadsheet.flows_i48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.28892750468282,r[:number],0.001)
end

def test_flows_j48
  r = spreadsheet.flows_j48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.0449836326222,r[:number],0.001)
end

def test_flows_k48
  r = spreadsheet.flows_k48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237.17958335569693,r[:number],0.001)
end

def test_flows_l48
  r = spreadsheet.flows_l48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.19663807255284,r[:number],0.001)
end

def test_flows_m48
  r = spreadsheet.flows_m48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.0221416680945,r[:number],0.001)
end

def test_flows_n48
  r = spreadsheet.flows_n48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.8495989715992,r[:number],0.001)
end

def test_flows_r48
  r = spreadsheet.flows_r48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_flows_s48
  r = spreadsheet.flows_s48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.59528637575556,r[:number],0.001)
end

def test_flows_t48
  r = spreadsheet.flows_t48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.38791192880167,r[:number],0.001)
end

def test_flows_u48
  r = spreadsheet.flows_u48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.08989818370915,r[:number],0.001)
end

def test_flows_v48
  r = spreadsheet.flows_v48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.59220491630188,r[:number],0.001)
end

def test_flows_w48
  r = spreadsheet.flows_w48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.0782900934599,r[:number],0.001)
end

def test_flows_x48
  r = spreadsheet.flows_x48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(302.72155769891424,r[:number],0.001)
end

def test_flows_y48
  r = spreadsheet.flows_y48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.0142767374186,r[:number],0.001)
end

def test_flows_z48
  r = spreadsheet.flows_z48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.753353042571,r[:number],0.001)
end

def test_flows_aa48
  r = spreadsheet.flows_aa48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.8173045637367,r[:number],0.001)
end

def test_flows_ab48
  r = spreadsheet.flows_ab48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_flows_ad48
  r = spreadsheet.flows_ad48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae48
  r = spreadsheet.flows_ae48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af48
  r = spreadsheet.flows_af48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag48
  r = spreadsheet.flows_ag48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah48
  r = spreadsheet.flows_ah48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai48
  r = spreadsheet.flows_ai48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj48
  r = spreadsheet.flows_aj48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak48
  r = spreadsheet.flows_ak48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al48
  r = spreadsheet.flows_al48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am48
  r = spreadsheet.flows_am48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c49
  r = spreadsheet.flows_c49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_flows_d49
  r = spreadsheet.flows_d49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e49
  r = spreadsheet.flows_e49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_flows_f49
  r = spreadsheet.flows_f49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.0000000000005,r[:number],0.001)
end

def test_flows_g49
  r = spreadsheet.flows_g49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3656.6491221630395,r[:number],0.001)
end

def test_flows_h49
  r = spreadsheet.flows_h49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4078.9370920274823,r[:number],0.001)
end

def test_flows_i49
  r = spreadsheet.flows_i49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4467.077983986471,r[:number],0.001)
end

def test_flows_j49
  r = spreadsheet.flows_j49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4721.321387509617,r[:number],0.001)
end

def test_flows_k49
  r = spreadsheet.flows_k49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4972.473207220269,r[:number],0.001)
end

def test_flows_l49
  r = spreadsheet.flows_l49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5132.017140903075,r[:number],0.001)
end

def test_flows_m49
  r = spreadsheet.flows_m49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5240.990780676136,r[:number],0.001)
end

def test_flows_n49
  r = spreadsheet.flows_n49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5327.038866828169,r[:number],0.001)
end

def test_flows_r49
  r = spreadsheet.flows_r49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_flows_s49
  r = spreadsheet.flows_s49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.0397308202,r[:number],0.001)
end

def test_flows_t49
  r = spreadsheet.flows_t49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_u49
  r = spreadsheet.flows_u49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_v49
  r = spreadsheet.flows_v49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.8203975818174,r[:number],0.001)
end

def test_flows_w49
  r = spreadsheet.flows_w49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.7633988375814,r[:number],0.001)
end

def test_flows_x49
  r = spreadsheet.flows_x49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.4495308358887,r[:number],0.001)
end

def test_flows_y49
  r = spreadsheet.flows_y49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.5003731415674,r[:number],0.001)
end

def test_flows_z49
  r = spreadsheet.flows_z49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9316667474303,r[:number],0.001)
end

def test_flows_aa49
  r = spreadsheet.flows_aa49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.9967558959181,r[:number],0.001)
end

def test_flows_ab49
  r = spreadsheet.flows_ab49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_flows_ad49
  r = spreadsheet.flows_ad49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.0397308202,r[:number],0.001)
end

def test_flows_ae49
  r = spreadsheet.flows_ae49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_af49
  r = spreadsheet.flows_af49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.11592,r[:number],0.001)
end

def test_flows_ag49
  r = spreadsheet.flows_ag49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.8203975818174,r[:number],0.001)
end

def test_flows_ah49
  r = spreadsheet.flows_ah49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.7633988375814,r[:number],0.001)
end

def test_flows_ai49
  r = spreadsheet.flows_ai49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.4495308358887,r[:number],0.001)
end

def test_flows_aj49
  r = spreadsheet.flows_aj49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.5003731415674,r[:number],0.001)
end

def test_flows_ak49
  r = spreadsheet.flows_ak49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9316667474303,r[:number],0.001)
end

def test_flows_al49
  r = spreadsheet.flows_al49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.9967558959181,r[:number],0.001)
end

def test_flows_am49
  r = spreadsheet.flows_am49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.50397170457853,r[:number],0.001)
end

def test_flows_ao49
  r = spreadsheet.flows_ao49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap49
  r = spreadsheet.flows_ap49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq49
  r = spreadsheet.flows_aq49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar49
  r = spreadsheet.flows_ar49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as49
  r = spreadsheet.flows_as49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at49
  r = spreadsheet.flows_at49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au49
  r = spreadsheet.flows_au49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av49
  r = spreadsheet.flows_av49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw49
  r = spreadsheet.flows_aw49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax49
  r = spreadsheet.flows_ax49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c50
  r = spreadsheet.flows_c50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d50
  r = spreadsheet.flows_d50
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e50
  r = spreadsheet.flows_e50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f50
  r = spreadsheet.flows_f50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g50
  r = spreadsheet.flows_g50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h50
  r = spreadsheet.flows_h50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i50
  r = spreadsheet.flows_i50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j50
  r = spreadsheet.flows_j50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k50
  r = spreadsheet.flows_k50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l50
  r = spreadsheet.flows_l50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m50
  r = spreadsheet.flows_m50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n50
  r = spreadsheet.flows_n50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r50
  r = spreadsheet.flows_r50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_flows_s50
  r = spreadsheet.flows_s50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.55555555555556,r[:number],0.001)
end

def test_flows_t50
  r = spreadsheet.flows_t50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27199192880167,r[:number],0.001)
end

def test_flows_u50
  r = spreadsheet.flows_u50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.97397818370914,r[:number],0.001)
end

def test_flows_v50
  r = spreadsheet.flows_v50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.7718073344845,r[:number],0.001)
end

def test_flows_w50
  r = spreadsheet.flows_w50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.31489125587847,r[:number],0.001)
end

def test_flows_x50
  r = spreadsheet.flows_x50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.27202686302555,r[:number],0.001)
end

def test_flows_y50
  r = spreadsheet.flows_y50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.513903595851154,r[:number],0.001)
end

def test_flows_z50
  r = spreadsheet.flows_z50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.82168629514069,r[:number],0.001)
end

def test_flows_aa50
  r = spreadsheet.flows_aa50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.820548667818583,r[:number],0.001)
end

def test_flows_ab50
  r = spreadsheet.flows_ab50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ad50
  r = spreadsheet.flows_ad50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.55555555555556,r[:number],0.001)
end

def test_flows_ae50
  r = spreadsheet.flows_ae50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27199192880167,r[:number],0.001)
end

def test_flows_af50
  r = spreadsheet.flows_af50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.97397818370914,r[:number],0.001)
end

def test_flows_ag50
  r = spreadsheet.flows_ag50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.7718073344845,r[:number],0.001)
end

def test_flows_ah50
  r = spreadsheet.flows_ah50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.31489125587847,r[:number],0.001)
end

def test_flows_ai50
  r = spreadsheet.flows_ai50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.27202686302555,r[:number],0.001)
end

def test_flows_aj50
  r = spreadsheet.flows_aj50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.513903595851154,r[:number],0.001)
end

def test_flows_ak50
  r = spreadsheet.flows_ak50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.82168629514069,r[:number],0.001)
end

def test_flows_al50
  r = spreadsheet.flows_al50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.820548667818583,r[:number],0.001)
end

def test_flows_am50
  r = spreadsheet.flows_am50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ao50
  r = spreadsheet.flows_ao50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ap50
  r = spreadsheet.flows_ap50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aq50
  r = spreadsheet.flows_aq50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar50
  r = spreadsheet.flows_ar50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as50
  r = spreadsheet.flows_as50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at50
  r = spreadsheet.flows_at50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au50
  r = spreadsheet.flows_au50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av50
  r = spreadsheet.flows_av50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw50
  r = spreadsheet.flows_aw50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax50
  r = spreadsheet.flows_ax50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c51
  r = spreadsheet.flows_c51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d51
  r = spreadsheet.flows_d51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e51
  r = spreadsheet.flows_e51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1161.7189949601961,r[:number],0.001)
end

def test_flows_f51
  r = spreadsheet.flows_f51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g51
  r = spreadsheet.flows_g51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h51
  r = spreadsheet.flows_h51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.1827872842550278e-11,r[:number],0.001)
end

def test_flows_i51
  r = spreadsheet.flows_i51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(7.275957614183426e-12,r[:number],0.001)
end

def test_flows_j51
  r = spreadsheet.flows_j51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k51
  r = spreadsheet.flows_k51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l51
  r = spreadsheet.flows_l51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m51
  r = spreadsheet.flows_m51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n51
  r = spreadsheet.flows_n51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r51
  r = spreadsheet.flows_r51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_s51
  r = spreadsheet.flows_s51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t51
  r = spreadsheet.flows_t51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u51
  r = spreadsheet.flows_u51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67950.11495128076,r[:number],0.001)
end

def test_flows_v51
  r = spreadsheet.flows_v51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93927.05148964157,r[:number],0.001)
end

def test_flows_w51
  r = spreadsheet.flows_w51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115808.79346195729,r[:number],0.001)
end

def test_flows_x51
  r = spreadsheet.flows_x51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131365.45945127102,r[:number],0.001)
end

def test_flows_y51
  r = spreadsheet.flows_y51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143619.81324474534,r[:number],0.001)
end

def test_flows_z51
  r = spreadsheet.flows_z51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157796.10917257215,r[:number],0.001)
end

def test_flows_aa51
  r = spreadsheet.flows_aa51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171605.4306881219,r[:number],0.001)
end

def test_flows_ab51
  r = spreadsheet.flows_ab51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182988.67494581544,r[:number],0.001)
end

def test_flows_ad51
  r = spreadsheet.flows_ad51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae51
  r = spreadsheet.flows_ae51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_af51
  r = spreadsheet.flows_af51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ag51
  r = spreadsheet.flows_ag51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ah51
  r = spreadsheet.flows_ah51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ai51
  r = spreadsheet.flows_ai51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aj51
  r = spreadsheet.flows_aj51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ak51
  r = spreadsheet.flows_ak51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_al51
  r = spreadsheet.flows_al51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_am51
  r = spreadsheet.flows_am51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ao51
  r = spreadsheet.flows_ao51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ap51
  r = spreadsheet.flows_ap51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aq51
  r = spreadsheet.flows_aq51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ar51
  r = spreadsheet.flows_ar51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_as51
  r = spreadsheet.flows_as51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_at51
  r = spreadsheet.flows_at51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_au51
  r = spreadsheet.flows_au51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_av51
  r = spreadsheet.flows_av51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aw51
  r = spreadsheet.flows_aw51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ax51
  r = spreadsheet.flows_ax51
  assert_equal(:ExcelError,r[:type])
end

def test_flows_c52
  r = spreadsheet.flows_c52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d52
  r = spreadsheet.flows_d52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e52
  r = spreadsheet.flows_e52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1562.8716335919705,r[:number],0.001)
end

def test_flows_f52
  r = spreadsheet.flows_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1598.9845808729385,r[:number],0.001)
end

def test_flows_g52
  r = spreadsheet.flows_g52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2481.4998799189034,r[:number],0.001)
end

def test_flows_h52
  r = spreadsheet.flows_h52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3401.959065674841,r[:number],0.001)
end

def test_flows_i52
  r = spreadsheet.flows_i52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4164.814114722965,r[:number],0.001)
end

def test_flows_j52
  r = spreadsheet.flows_j52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4918.41053257803,r[:number],0.001)
end

def test_flows_k52
  r = spreadsheet.flows_k52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5683.0198078235135,r[:number],0.001)
end

def test_flows_l52
  r = spreadsheet.flows_l52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6431.212806651689,r[:number],0.001)
end

def test_flows_m52
  r = spreadsheet.flows_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7134.3698951304295,r[:number],0.001)
end

def test_flows_n52
  r = spreadsheet.flows_n52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7809.146182024884,r[:number],0.001)
end

def test_flows_r52
  r = spreadsheet.flows_r52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_s52
  r = spreadsheet.flows_s52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50610.53293979325,r[:number],0.001)
end

def test_flows_t52
  r = spreadsheet.flows_t52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47000.7877547833,r[:number],0.001)
end

def test_flows_u52
  r = spreadsheet.flows_u52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85884.56076326268,r[:number],0.001)
end

def test_flows_v52
  r = spreadsheet.flows_v52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120685.82354583737,r[:number],0.001)
end

def test_flows_w52
  r = spreadsheet.flows_w52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(150355.264969239,r[:number],0.001)
end

def test_flows_x52
  r = spreadsheet.flows_x52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173230.17024782684,r[:number],0.001)
end

def test_flows_y52
  r = spreadsheet.flows_y52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191844.1108942302,r[:number],0.001)
end

def test_flows_z52
  r = spreadsheet.flows_z52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213783.5319629721,r[:number],0.001)
end

def test_flows_aa52
  r = spreadsheet.flows_aa52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235362.55396644384,r[:number],0.001)
end

def test_flows_ab52
  r = spreadsheet.flows_ab52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(254755.94645328785,r[:number],0.001)
end

def test_flows_ad52
  r = spreadsheet.flows_ad52
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ae52
  r = spreadsheet.flows_ae52
  assert_equal(:ExcelError,r[:type])
end

def test_flows_af52
  r = spreadsheet.flows_af52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85884.56076326269,r[:number],0.001)
end

def test_flows_ag52
  r = spreadsheet.flows_ag52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120685.82354583737,r[:number],0.001)
end

def test_flows_ah52
  r = spreadsheet.flows_ah52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(150355.264969239,r[:number],0.001)
end

def test_flows_ai52
  r = spreadsheet.flows_ai52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173230.17024782678,r[:number],0.001)
end

def test_flows_aj52
  r = spreadsheet.flows_aj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191844.11089423017,r[:number],0.001)
end

def test_flows_ak52
  r = spreadsheet.flows_ak52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213783.53196297213,r[:number],0.001)
end

def test_flows_al52
  r = spreadsheet.flows_al52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235362.55396644387,r[:number],0.001)
end

def test_flows_am52
  r = spreadsheet.flows_am52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(254755.94645328785,r[:number],0.001)
end

def test_flows_ao52
  r = spreadsheet.flows_ao52
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ap52
  r = spreadsheet.flows_ap52
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aq52
  r = spreadsheet.flows_aq52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ar52
  r = spreadsheet.flows_ar52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_as52
  r = spreadsheet.flows_as52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_at52
  r = spreadsheet.flows_at52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_au52
  r = spreadsheet.flows_au52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_av52
  r = spreadsheet.flows_av52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aw52
  r = spreadsheet.flows_aw52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ax52
  r = spreadsheet.flows_ax52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c53
  r = spreadsheet.flows_c53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d53
  r = spreadsheet.flows_d53
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e53
  r = spreadsheet.flows_e53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f53
  r = spreadsheet.flows_f53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g53
  r = spreadsheet.flows_g53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h53
  r = spreadsheet.flows_h53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i53
  r = spreadsheet.flows_i53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j53
  r = spreadsheet.flows_j53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k53
  r = spreadsheet.flows_k53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l53
  r = spreadsheet.flows_l53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m53
  r = spreadsheet.flows_m53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n53
  r = spreadsheet.flows_n53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r53
  r = spreadsheet.flows_r53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_flows_s53
  r = spreadsheet.flows_s53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t53
  r = spreadsheet.flows_t53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u53
  r = spreadsheet.flows_u53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v53
  r = spreadsheet.flows_v53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w53
  r = spreadsheet.flows_w53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x53
  r = spreadsheet.flows_x53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y53
  r = spreadsheet.flows_y53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z53
  r = spreadsheet.flows_z53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa53
  r = spreadsheet.flows_aa53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab53
  r = spreadsheet.flows_ab53
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad53
  r = spreadsheet.flows_ad53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae53
  r = spreadsheet.flows_ae53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af53
  r = spreadsheet.flows_af53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag53
  r = spreadsheet.flows_ag53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah53
  r = spreadsheet.flows_ah53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai53
  r = spreadsheet.flows_ai53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj53
  r = spreadsheet.flows_aj53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak53
  r = spreadsheet.flows_ak53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al53
  r = spreadsheet.flows_al53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am53
  r = spreadsheet.flows_am53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c54
  r = spreadsheet.flows_c54
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d54
  r = spreadsheet.flows_d54
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_flows_e54
  r = spreadsheet.flows_e54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f54
  r = spreadsheet.flows_f54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g54
  r = spreadsheet.flows_g54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h54
  r = spreadsheet.flows_h54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i54
  r = spreadsheet.flows_i54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j54
  r = spreadsheet.flows_j54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k54
  r = spreadsheet.flows_k54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l54
  r = spreadsheet.flows_l54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m54
  r = spreadsheet.flows_m54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n54
  r = spreadsheet.flows_n54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r54
  r = spreadsheet.flows_r54
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_flows_s54
  r = spreadsheet.flows_s54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_t54
  r = spreadsheet.flows_t54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_u54
  r = spreadsheet.flows_u54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_v54
  r = spreadsheet.flows_v54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_w54
  r = spreadsheet.flows_w54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.33333333333337,r[:number],0.001)
end

def test_flows_x54
  r = spreadsheet.flows_x54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_y54
  r = spreadsheet.flows_y54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.33333333333337,r[:number],0.001)
end

def test_flows_z54
  r = spreadsheet.flows_z54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_aa54
  r = spreadsheet.flows_aa54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_ab54
  r = spreadsheet.flows_ab54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.3333333333333,r[:number],0.001)
end

def test_flows_ad54
  r = spreadsheet.flows_ad54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae54
  r = spreadsheet.flows_ae54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af54
  r = spreadsheet.flows_af54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag54
  r = spreadsheet.flows_ag54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah54
  r = spreadsheet.flows_ah54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai54
  r = spreadsheet.flows_ai54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj54
  r = spreadsheet.flows_aj54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak54
  r = spreadsheet.flows_ak54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al54
  r = spreadsheet.flows_al54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am54
  r = spreadsheet.flows_am54
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c55
  r = spreadsheet.flows_c55
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d55
  r = spreadsheet.flows_d55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e55
  r = spreadsheet.flows_e55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f55
  r = spreadsheet.flows_f55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g55
  r = spreadsheet.flows_g55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h55
  r = spreadsheet.flows_h55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i55
  r = spreadsheet.flows_i55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j55
  r = spreadsheet.flows_j55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k55
  r = spreadsheet.flows_k55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l55
  r = spreadsheet.flows_l55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m55
  r = spreadsheet.flows_m55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n55
  r = spreadsheet.flows_n55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r55
  r = spreadsheet.flows_r55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_flows_s55
  r = spreadsheet.flows_s55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_t55
  r = spreadsheet.flows_t55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_u55
  r = spreadsheet.flows_u55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.19723500000000002,r[:number],0.001)
end

def test_flows_v55
  r = spreadsheet.flows_v55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9288768981296096,r[:number],0.001)
end

def test_flows_w55
  r = spreadsheet.flows_w55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4240733812697526,r[:number],0.001)
end

def test_flows_x55
  r = spreadsheet.flows_x55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.920461149446789,r[:number],0.001)
end

def test_flows_y55
  r = spreadsheet.flows_y55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.283378034043395,r[:number],0.001)
end

def test_flows_z55
  r = spreadsheet.flows_z55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.880144313528724,r[:number],0.001)
end

def test_flows_aa55
  r = spreadsheet.flows_aa55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.6827757959162,r[:number],0.001)
end

def test_flows_ab55
  r = spreadsheet.flows_ab55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.48540727830364,r[:number],0.001)
end

def test_flows_ad55
  r = spreadsheet.flows_ad55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae55
  r = spreadsheet.flows_ae55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af55
  r = spreadsheet.flows_af55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag55
  r = spreadsheet.flows_ag55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah55
  r = spreadsheet.flows_ah55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai55
  r = spreadsheet.flows_ai55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj55
  r = spreadsheet.flows_aj55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak55
  r = spreadsheet.flows_ak55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al55
  r = spreadsheet.flows_al55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am55
  r = spreadsheet.flows_am55
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c56
  r = spreadsheet.flows_c56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_flows_d56
  r = spreadsheet.flows_d56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e56
  r = spreadsheet.flows_e56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.55555555555556,r[:number],0.001)
end

def test_flows_f56
  r = spreadsheet.flows_f56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27199192880167,r[:number],0.001)
end

def test_flows_g56
  r = spreadsheet.flows_g56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.97397818370914,r[:number],0.001)
end

def test_flows_h56
  r = spreadsheet.flows_h56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.7718073344845,r[:number],0.001)
end

def test_flows_i56
  r = spreadsheet.flows_i56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.31489125587847,r[:number],0.001)
end

def test_flows_j56
  r = spreadsheet.flows_j56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.27202686302555,r[:number],0.001)
end

def test_flows_k56
  r = spreadsheet.flows_k56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.513903595851154,r[:number],0.001)
end

def test_flows_l56
  r = spreadsheet.flows_l56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.82168629514069,r[:number],0.001)
end

def test_flows_m56
  r = spreadsheet.flows_m56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.820548667818583,r[:number],0.001)
end

def test_flows_n56
  r = spreadsheet.flows_n56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_r56
  r = spreadsheet.flows_r56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_flows_s56
  r = spreadsheet.flows_s56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_t56
  r = spreadsheet.flows_t56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_u56
  r = spreadsheet.flows_u56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_v56
  r = spreadsheet.flows_v56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_w56
  r = spreadsheet.flows_w56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_x56
  r = spreadsheet.flows_x56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_y56
  r = spreadsheet.flows_y56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_z56
  r = spreadsheet.flows_z56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_aa56
  r = spreadsheet.flows_aa56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ab56
  r = spreadsheet.flows_ab56
  assert_equal(:ExcelError,r[:type])
end

def test_flows_ad56
  r = spreadsheet.flows_ad56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ae56
  r = spreadsheet.flows_ae56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_af56
  r = spreadsheet.flows_af56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ag56
  r = spreadsheet.flows_ag56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ah56
  r = spreadsheet.flows_ah56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ai56
  r = spreadsheet.flows_ai56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_aj56
  r = spreadsheet.flows_aj56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_ak56
  r = spreadsheet.flows_ak56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_al56
  r = spreadsheet.flows_al56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_am56
  r = spreadsheet.flows_am56
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c57
  r = spreadsheet.flows_c57
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_flows_d57
  r = spreadsheet.flows_d57
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e57
  r = spreadsheet.flows_e57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f57
  r = spreadsheet.flows_f57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g57
  r = spreadsheet.flows_g57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h57
  r = spreadsheet.flows_h57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i57
  r = spreadsheet.flows_i57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j57
  r = spreadsheet.flows_j57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k57
  r = spreadsheet.flows_k57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l57
  r = spreadsheet.flows_l57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m57
  r = spreadsheet.flows_m57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n57
  r = spreadsheet.flows_n57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c58
  r = spreadsheet.flows_c58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_flows_d58
  r = spreadsheet.flows_d58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e58
  r = spreadsheet.flows_e58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f58
  r = spreadsheet.flows_f58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g58
  r = spreadsheet.flows_g58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h58
  r = spreadsheet.flows_h58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i58
  r = spreadsheet.flows_i58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j58
  r = spreadsheet.flows_j58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k58
  r = spreadsheet.flows_k58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l58
  r = spreadsheet.flows_l58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m58
  r = spreadsheet.flows_m58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n58
  r = spreadsheet.flows_n58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c59
  r = spreadsheet.flows_c59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_flows_d59
  r = spreadsheet.flows_d59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e59
  r = spreadsheet.flows_e59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_flows_f59
  r = spreadsheet.flows_f59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1483.1018518518517,r[:number],0.001)
end

def test_flows_g59
  r = spreadsheet.flows_g59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4076.654569296791,r[:number],0.001)
end

def test_flows_h59
  r = spreadsheet.flows_h59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6772.450097198011,r[:number],0.001)
end

def test_flows_i59
  r = spreadsheet.flows_i59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9570.488435555515,r[:number],0.001)
end

def test_flows_j59
  r = spreadsheet.flows_j59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12470.7695843693,r[:number],0.001)
end

def test_flows_k59
  r = spreadsheet.flows_k59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15473.29354363937,r[:number],0.001)
end

def test_flows_l59
  r = spreadsheet.flows_l59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18578.06031336572,r[:number],0.001)
end

def test_flows_m59
  r = spreadsheet.flows_m59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21785.069893548352,r[:number],0.001)
end

def test_flows_n59
  r = spreadsheet.flows_n59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25094.322284187263,r[:number],0.001)
end

def test_flows_c60
  r = spreadsheet.flows_c60
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d60
  r = spreadsheet.flows_d60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e60
  r = spreadsheet.flows_e60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f60
  r = spreadsheet.flows_f60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g60
  r = spreadsheet.flows_g60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h60
  r = spreadsheet.flows_h60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i60
  r = spreadsheet.flows_i60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j60
  r = spreadsheet.flows_j60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k60
  r = spreadsheet.flows_k60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l60
  r = spreadsheet.flows_l60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m60
  r = spreadsheet.flows_m60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n60
  r = spreadsheet.flows_n60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c61
  r = spreadsheet.flows_c61
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d61
  r = spreadsheet.flows_d61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e61
  r = spreadsheet.flows_e61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f61
  r = spreadsheet.flows_f61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g61
  r = spreadsheet.flows_g61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h61
  r = spreadsheet.flows_h61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i61
  r = spreadsheet.flows_i61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j61
  r = spreadsheet.flows_j61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k61
  r = spreadsheet.flows_k61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l61
  r = spreadsheet.flows_l61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m61
  r = spreadsheet.flows_m61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n61
  r = spreadsheet.flows_n61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c62
  r = spreadsheet.flows_c62
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_d62
  r = spreadsheet.flows_d62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e62
  r = spreadsheet.flows_e62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(810.7502031166794,r[:number],0.001)
end

def test_flows_f62
  r = spreadsheet.flows_f62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(811.1056685672143,r[:number],0.001)
end

def test_flows_g62
  r = spreadsheet.flows_g62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1077.527786556309,r[:number],0.001)
end

def test_flows_h62
  r = spreadsheet.flows_h62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1238.9346501347984,r[:number],0.001)
end

def test_flows_i62
  r = spreadsheet.flows_i62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1295.313274933929,r[:number],0.001)
end

def test_flows_j62
  r = spreadsheet.flows_j62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1246.6306506781946,r[:number],0.001)
end

def test_flows_k62
  r = spreadsheet.flows_k62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.8276437035631,r[:number],0.001)
end

def test_flows_l62
  r = spreadsheet.flows_l62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(833.840543917931,r[:number],0.001)
end

def test_flows_m62
  r = spreadsheet.flows_m62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(469.5959069920883,r[:number],0.001)
end

def test_flows_n62
  r = spreadsheet.flows_n62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c63
  r = spreadsheet.flows_c63
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_d63
  r = spreadsheet.flows_d63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e63
  r = spreadsheet.flows_e63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(488.1578947368422,r[:number],0.001)
end

def test_flows_f63
  r = spreadsheet.flows_f63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.046783625731,r[:number],0.001)
end

def test_flows_g63
  r = spreadsheet.flows_g63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1462.653939808635,r[:number],0.001)
end

def test_flows_h63
  r = spreadsheet.flows_h63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1980.8716662383613,r[:number],0.001)
end

def test_flows_i63
  r = spreadsheet.flows_i63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2256.699962914911,r[:number],0.001)
end

def test_flows_j63
  r = spreadsheet.flows_j63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2290.138829838283,r[:number],0.001)
end

def test_flows_k63
  r = spreadsheet.flows_k63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2081.1882670084783,r[:number],0.001)
end

def test_flows_l63
  r = spreadsheet.flows_l63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1629.8482744254961,r[:number],0.001)
end

def test_flows_m63
  r = spreadsheet.flows_m63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(936.1188520893365,r[:number],0.001)
end

def test_flows_n63
  r = spreadsheet.flows_n63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c64
  r = spreadsheet.flows_c64
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_d64
  r = spreadsheet.flows_d64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e64
  r = spreadsheet.flows_e64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1296.2351964601676,r[:number],0.001)
end

def test_flows_f64
  r = spreadsheet.flows_f64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1296.1883860176556,r[:number],0.001)
end

def test_flows_g64
  r = spreadsheet.flows_g64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1354.0843682488364,r[:number],0.001)
end

def test_flows_h64
  r = spreadsheet.flows_h64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1411.983078491712,r[:number],0.001)
end

def test_flows_i64
  r = spreadsheet.flows_i64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1469.8898419841114,r[:number],0.001)
end

def test_flows_j64
  r = spreadsheet.flows_j64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1527.8031652123907,r[:number],0.001)
end

def test_flows_k64
  r = spreadsheet.flows_k64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1585.721564239249,r[:number],0.001)
end

def test_flows_l64
  r = spreadsheet.flows_l64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1643.64389082229,r[:number],0.001)
end

def test_flows_m64
  r = spreadsheet.flows_m64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1701.5692564734363,r[:number],0.001)
end

def test_flows_n64
  r = spreadsheet.flows_n64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1759.4969736975504,r[:number],0.001)
end

def test_flows_c65
  r = spreadsheet.flows_c65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d65
  r = spreadsheet.flows_d65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e65
  r = spreadsheet.flows_e65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2016.3125746902588,r[:number],0.001)
end

def test_flows_f65
  r = spreadsheet.flows_f65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2016.958875509413,r[:number],0.001)
end

def test_flows_g65
  r = spreadsheet.flows_g65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4002.6133407498683,r[:number],0.001)
end

def test_flows_h65
  r = spreadsheet.flows_h65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5791.176846620976,r[:number],0.001)
end

def test_flows_i65
  r = spreadsheet.flows_i65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7382.672838125651,r[:number],0.001)
end

def test_flows_j65
  r = spreadsheet.flows_j65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8777.104909681497,r[:number],0.001)
end

def test_flows_k65
  r = spreadsheet.flows_k65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9974.433100507518,r[:number],0.001)
end

def test_flows_l65
  r = spreadsheet.flows_l65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10974.622308917347,r[:number],0.001)
end

def test_flows_m65
  r = spreadsheet.flows_m65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11777.644325593868,r[:number],0.001)
end

def test_flows_n65
  r = spreadsheet.flows_n65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12383.466360618835,r[:number],0.001)
end

def test_flows_c66
  r = spreadsheet.flows_c66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d66
  r = spreadsheet.flows_d66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e66
  r = spreadsheet.flows_e66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1951.6968525936063,r[:number],0.001)
end

def test_flows_f66
  r = spreadsheet.flows_f66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.5525548781663,r[:number],0.001)
end

def test_flows_g66
  r = spreadsheet.flows_g66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2593.903253455551,r[:number],0.001)
end

def test_flows_h66
  r = spreadsheet.flows_h66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2982.453594142678,r[:number],0.001)
end

def test_flows_i66
  r = spreadsheet.flows_i66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3118.1723200227666,r[:number],0.001)
end

def test_flows_j66
  r = spreadsheet.flows_j66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3000.979966359872,r[:number],0.001)
end

def test_flows_k66
  r = spreadsheet.flows_k66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2630.7341822973044,r[:number],0.001)
end

def test_flows_l66
  r = spreadsheet.flows_l66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.281600267892,r[:number],0.001)
end

def test_flows_m66
  r = spreadsheet.flows_m66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1130.4454197409543,r[:number],0.001)
end

def test_flows_n66
  r = spreadsheet.flows_n66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c67
  r = spreadsheet.flows_c67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d67
  r = spreadsheet.flows_d67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e67
  r = spreadsheet.flows_e67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1761.5390776807849,r[:number],0.001)
end

def test_flows_f67
  r = spreadsheet.flows_f67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1762.3114071596742,r[:number],0.001)
end

def test_flows_g67
  r = spreadsheet.flows_g67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2284.072203875457,r[:number],0.001)
end

def test_flows_h67
  r = spreadsheet.flows_h67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2563.682955690188,r[:number],0.001)
end

def test_flows_i67
  r = spreadsheet.flows_i67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2618.0116085345358,r[:number],0.001)
end

def test_flows_j67
  r = spreadsheet.flows_j67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2462.3531034056878,r[:number],0.001)
end

def test_flows_k67
  r = spreadsheet.flows_k67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2110.5923785466766,r[:number],0.001)
end

def test_flows_l67
  r = spreadsheet.flows_l67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1575.3983398923726,r[:number],0.001)
end

def test_flows_m67
  r = spreadsheet.flows_m67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.3436887513249,r[:number],0.001)
end

def test_flows_n67
  r = spreadsheet.flows_n67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c68
  r = spreadsheet.flows_c68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d68
  r = spreadsheet.flows_d68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e68
  r = spreadsheet.flows_e68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3464.114504225812,r[:number],0.001)
end

def test_flows_f68
  r = spreadsheet.flows_f68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3465.6333111508247,r[:number],0.001)
end

def test_flows_g68
  r = spreadsheet.flows_g68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6156.389646889493,r[:number],0.001)
end

def test_flows_h68
  r = spreadsheet.flows_h68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9401.357926430675,r[:number],0.001)
end

def test_flows_i68
  r = spreadsheet.flows_i68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13162.345834333943,r[:number],0.001)
end

def test_flows_j68
  r = spreadsheet.flows_j68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17404.73595348343,r[:number],0.001)
end

def test_flows_k68
  r = spreadsheet.flows_k68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22096.930801033763,r[:number],0.001)
end

def test_flows_l68
  r = spreadsheet.flows_l68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27210.20102712285,r[:number],0.001)
end

def test_flows_m68
  r = spreadsheet.flows_m68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32718.47807766046,r[:number],0.001)
end

def test_flows_n68
  r = spreadsheet.flows_n68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38598.116615930405,r[:number],0.001)
end

def test_flows_c69
  r = spreadsheet.flows_c69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d69
  r = spreadsheet.flows_d69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e69
  r = spreadsheet.flows_e69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1879.861111111111,r[:number],0.001)
end

def test_flows_f69
  r = spreadsheet.flows_f69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2271.527777777778,r[:number],0.001)
end

def test_flows_g69
  r = spreadsheet.flows_g69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5115.09998326838,r[:number],0.001)
end

def test_flows_h69
  r = spreadsheet.flows_h69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7416.11214967557,r[:number],0.001)
end

def test_flows_i69
  r = spreadsheet.flows_i69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9193.333701108648,r[:number],0.001)
end

def test_flows_j69
  r = spreadsheet.flows_j69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10463.827750394237,r[:number],0.001)
end

def test_flows_k69
  r = spreadsheet.flows_k69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11243.140689218824,r[:number],0.001)
end

def test_flows_l69
  r = spreadsheet.flows_l69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11545.46704912225,r[:number],0.001)
end

def test_flows_m69
  r = spreadsheet.flows_m69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11383.793316406907,r[:number],0.001)
end

def test_flows_n69
  r = spreadsheet.flows_n69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10770.023770183341,r[:number],0.001)
end

def test_flows_c70
  r = spreadsheet.flows_c70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d70
  r = spreadsheet.flows_d70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e70
  r = spreadsheet.flows_e70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(273.48148148148147,r[:number],0.001)
end

def test_flows_f70
  r = spreadsheet.flows_f70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.037037037037,r[:number],0.001)
end

def test_flows_g70
  r = spreadsheet.flows_g70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(687.7429799329436,r[:number],0.001)
end

def test_flows_h70
  r = spreadsheet.flows_h70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(920.840860237133,r[:number],0.001)
end

def test_flows_i70
  r = spreadsheet.flows_i70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1037.5833259037008,r[:number],0.001)
end

def test_flows_j70
  r = spreadsheet.flows_j70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1041.8364205272792,r[:number],0.001)
end

def test_flows_k70
  r = spreadsheet.flows_k70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(937.1225393829773,r[:number],0.001)
end

def test_flows_l70
  r = spreadsheet.flows_l70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(726.6577825045911,r[:number],0.001)
end

def test_flows_m70
  r = spreadsheet.flows_m70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(413.3845392847419,r[:number],0.001)
end

def test_flows_n70
  r = spreadsheet.flows_n70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c71
  r = spreadsheet.flows_c71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d71
  r = spreadsheet.flows_d71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e71
  r = spreadsheet.flows_e71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(622.2222222222222,r[:number],0.001)
end

def test_flows_f71
  r = spreadsheet.flows_f71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(894.4444444444443,r[:number],0.001)
end

def test_flows_g71
  r = spreadsheet.flows_g71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1837.5257808237793,r[:number],0.001)
end

def test_flows_h71
  r = spreadsheet.flows_h71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2455.0614088356324,r[:number],0.001)
end

def test_flows_i71
  r = spreadsheet.flows_i71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2760.5300932403443,r[:number],0.001)
end

def test_flows_j71
  r = spreadsheet.flows_j71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2766.1852565473127,r[:number],0.001)
end

def test_flows_k71
  r = spreadsheet.flows_k71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2483.1911281539915,r[:number],0.001)
end

def test_flows_l71
  r = spreadsheet.flows_l71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1921.741134901533,r[:number],0.001)
end

def test_flows_m71
  r = spreadsheet.flows_m71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1091.1611779424811,r[:number],0.001)
end

def test_flows_n71
  r = spreadsheet.flows_n71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c72
  r = spreadsheet.flows_c72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d72
  r = spreadsheet.flows_d72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e72
  r = spreadsheet.flows_e72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1311.111111111111,r[:number],0.001)
end

def test_flows_f72
  r = spreadsheet.flows_f72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2105.5555555555557,r[:number],0.001)
end

def test_flows_g72
  r = spreadsheet.flows_g72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5855.478374053319,r[:number],0.001)
end

def test_flows_h72
  r = spreadsheet.flows_h72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10518.859522164496,r[:number],0.001)
end

def test_flows_i72
  r = spreadsheet.flows_i72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16031.969348985824,r[:number],0.001)
end

def test_flows_j72
  r = spreadsheet.flows_j72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22336.871808241616,r[:number],0.001)
end

def test_flows_k72
  r = spreadsheet.flows_k72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29380.78072443623,r[:number],0.001)
end

def test_flows_l72
  r = spreadsheet.flows_l72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37115.50002429106,r[:number],0.001)
end

def test_flows_m72
  r = spreadsheet.flows_m72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45496.935427997996,r[:number],0.001)
end

def test_flows_n72
  r = spreadsheet.flows_n72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54484.66717906631,r[:number],0.001)
end

def test_flows_c73
  r = spreadsheet.flows_c73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d73
  r = spreadsheet.flows_d73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e73
  r = spreadsheet.flows_e73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3109.5238095238096,r[:number],0.001)
end

def test_flows_f73
  r = spreadsheet.flows_f73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3109.2892692647556,r[:number],0.001)
end

def test_flows_g73
  r = spreadsheet.flows_g73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6965.020257676508,r[:number],0.001)
end

def test_flows_h73
  r = spreadsheet.flows_h73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10820.686663437964,r[:number],0.001)
end

def test_flows_i73
  r = spreadsheet.flows_i73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14676.263444540178,r[:number],0.001)
end

def test_flows_j73
  r = spreadsheet.flows_j73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18531.72694361995,r[:number],0.001)
end

def test_flows_k73
  r = spreadsheet.flows_k73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22387.06792420869,r[:number],0.001)
end

def test_flows_l73
  r = spreadsheet.flows_l73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26242.270755223617,r[:number],0.001)
end

def test_flows_m73
  r = spreadsheet.flows_m73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30097.308663358068,r[:number],0.001)
end

def test_flows_n73
  r = spreadsheet.flows_n73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33952.145184989626,r[:number],0.001)
end

def test_flows_c74
  r = spreadsheet.flows_c74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d74
  r = spreadsheet.flows_d74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e74
  r = spreadsheet.flows_e74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(763.8888888888888,r[:number],0.001)
end

def test_flows_f74
  r = spreadsheet.flows_f74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(763.8888888888888,r[:number],0.001)
end

def test_flows_g74
  r = spreadsheet.flows_g74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(829.5939827735256,r[:number],0.001)
end

def test_flows_h74
  r = spreadsheet.flows_h74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(895.2990766581623,r[:number],0.001)
end

def test_flows_i74
  r = spreadsheet.flows_i74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(961.0041705427991,r[:number],0.001)
end

def test_flows_j74
  r = spreadsheet.flows_j74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1026.709264427436,r[:number],0.001)
end

def test_flows_k74
  r = spreadsheet.flows_k74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.4143583120729,r[:number],0.001)
end

def test_flows_l74
  r = spreadsheet.flows_l74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1158.1194521967097,r[:number],0.001)
end

def test_flows_m74
  r = spreadsheet.flows_m74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1223.8245460813466,r[:number],0.001)
end

def test_flows_n74
  r = spreadsheet.flows_n74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1289.5296399659833,r[:number],0.001)
end

def test_flows_c75
  r = spreadsheet.flows_c75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d75
  r = spreadsheet.flows_d75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e75
  r = spreadsheet.flows_e75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2533.333333333333,r[:number],0.001)
end

def test_flows_f75
  r = spreadsheet.flows_f75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2533.333333333333,r[:number],0.001)
end

def test_flows_g75
  r = spreadsheet.flows_g75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5926.541251744931,r[:number],0.001)
end

def test_flows_h75
  r = spreadsheet.flows_h75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9319.74917015653,r[:number],0.001)
end

def test_flows_i75
  r = spreadsheet.flows_i75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12712.95708856813,r[:number],0.001)
end

def test_flows_j75
  r = spreadsheet.flows_j75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16106.165006979729,r[:number],0.001)
end

def test_flows_k75
  r = spreadsheet.flows_k75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19499.372925391326,r[:number],0.001)
end

def test_flows_l75
  r = spreadsheet.flows_l75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22892.580843802923,r[:number],0.001)
end

def test_flows_m75
  r = spreadsheet.flows_m75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26285.78876221452,r[:number],0.001)
end

def test_flows_n75
  r = spreadsheet.flows_n75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29678.99668062612,r[:number],0.001)
end

def test_flows_c76
  r = spreadsheet.flows_c76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d76
  r = spreadsheet.flows_d76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e76
  r = spreadsheet.flows_e76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(688.8888888888888,r[:number],0.001)
end

def test_flows_f76
  r = spreadsheet.flows_f76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(688.8888888888888,r[:number],0.001)
end

def test_flows_g76
  r = spreadsheet.flows_g76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1468.4072836614382,r[:number],0.001)
end

def test_flows_h76
  r = spreadsheet.flows_h76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2247.9256784339877,r[:number],0.001)
end

def test_flows_i76
  r = spreadsheet.flows_i76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3027.4440732065373,r[:number],0.001)
end

def test_flows_j76
  r = spreadsheet.flows_j76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3806.962467979087,r[:number],0.001)
end

def test_flows_k76
  r = spreadsheet.flows_k76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4586.480862751636,r[:number],0.001)
end

def test_flows_l76
  r = spreadsheet.flows_l76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5365.999257524185,r[:number],0.001)
end

def test_flows_m76
  r = spreadsheet.flows_m76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6145.517652296734,r[:number],0.001)
end

def test_flows_n76
  r = spreadsheet.flows_n76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6925.036047069284,r[:number],0.001)
end

def test_flows_c77
  r = spreadsheet.flows_c77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d77
  r = spreadsheet.flows_d77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e77
  r = spreadsheet.flows_e77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7263.2185303139195,r[:number],0.001)
end

def test_flows_f77
  r = spreadsheet.flows_f77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7262.830677468867,r[:number],0.001)
end

def test_flows_g77
  r = spreadsheet.flows_g77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8698.771119897026,r[:number],0.001)
end

def test_flows_h77
  r = spreadsheet.flows_h77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10134.762049211831,r[:number],0.001)
end

def test_flows_i77
  r = spreadsheet.flows_i77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11570.90201875861,r[:number],0.001)
end

def test_flows_j77
  r = spreadsheet.flows_j77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13006.96850293949,r[:number],0.001)
end

def test_flows_k77
  r = spreadsheet.flows_k77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14443.323809506406,r[:number],0.001)
end

def test_flows_l77
  r = spreadsheet.flows_l77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15879.751802742583,r[:number],0.001)
end

def test_flows_m77
  r = spreadsheet.flows_m77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17316.236039537842,r[:number],0.001)
end

def test_flows_n77
  r = spreadsheet.flows_n77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18752.763796526982,r[:number],0.001)
end

def test_flows_c78
  r = spreadsheet.flows_c78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d78
  r = spreadsheet.flows_d78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e78
  r = spreadsheet.flows_e78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11268.01754644087,r[:number],0.001)
end

def test_flows_f78
  r = spreadsheet.flows_f78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11268.054522675477,r[:number],0.001)
end

def test_flows_g78
  r = spreadsheet.flows_g78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12071.009349344207,r[:number],0.001)
end

def test_flows_h78
  r = spreadsheet.flows_h78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12873.964176012938,r[:number],0.001)
end

def test_flows_i78
  r = spreadsheet.flows_i78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13676.919002681669,r[:number],0.001)
end

def test_flows_j78
  r = spreadsheet.flows_j78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14479.204620234117,r[:number],0.001)
end

def test_flows_k78
  r = spreadsheet.flows_k78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15282.159446902848,r[:number],0.001)
end

def test_flows_l78
  r = spreadsheet.flows_l78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16085.114273571578,r[:number],0.001)
end

def test_flows_m78
  r = spreadsheet.flows_m78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16888.069100240307,r[:number],0.001)
end

def test_flows_n78
  r = spreadsheet.flows_n78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17691.02392690903,r[:number],0.001)
end

def test_flows_c79
  r = spreadsheet.flows_c79
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d79
  r = spreadsheet.flows_d79
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e79
  r = spreadsheet.flows_e79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8060.869197635666,r[:number],0.001)
end

def test_flows_f79
  r = spreadsheet.flows_f79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8057.601946166342,r[:number],0.001)
end

def test_flows_g79
  r = spreadsheet.flows_g79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9146.836057001023,r[:number],0.001)
end

def test_flows_h79
  r = spreadsheet.flows_h79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10236.260576209133,r[:number],0.001)
end

def test_flows_i79
  r = spreadsheet.flows_i79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11326.247192033463,r[:number],0.001)
end

def test_flows_j79
  r = spreadsheet.flows_j79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12416.69166096795,r[:number],0.001)
end

def test_flows_k79
  r = spreadsheet.flows_k79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13507.490407911253,r[:number],0.001)
end

def test_flows_l79
  r = spreadsheet.flows_l79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14598.563288424355,r[:number],0.001)
end

def test_flows_m79
  r = spreadsheet.flows_m79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15689.848288268095,r[:number],0.001)
end

def test_flows_n79
  r = spreadsheet.flows_n79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16781.297422006362,r[:number],0.001)
end

def test_flows_c80
  r = spreadsheet.flows_c80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d80
  r = spreadsheet.flows_d80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e80
  r = spreadsheet.flows_e80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7063.742122927563,r[:number],0.001)
end

def test_flows_f80
  r = spreadsheet.flows_f80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7058.915542066856,r[:number],0.001)
end

def test_flows_g80
  r = spreadsheet.flows_g80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8140.117872502726,r[:number],0.001)
end

def test_flows_h80
  r = spreadsheet.flows_h80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9221.617071779901,r[:number],0.001)
end

def test_flows_i80
  r = spreadsheet.flows_i80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10303.992645179462,r[:number],0.001)
end

def test_flows_j80
  r = spreadsheet.flows_j80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11387.082064928598,r[:number],0.001)
end

def test_flows_k80
  r = spreadsheet.flows_k80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12470.723845375343,r[:number],0.001)
end

def test_flows_l80
  r = spreadsheet.flows_l80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13554.79303200052,r[:number],0.001)
end

def test_flows_m80
  r = spreadsheet.flows_m80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14639.192937379137,r[:number],0.001)
end

def test_flows_n80
  r = spreadsheet.flows_n80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15723.848746624839,r[:number],0.001)
end

def test_flows_c81
  r = spreadsheet.flows_c81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d81
  r = spreadsheet.flows_d81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e81
  r = spreadsheet.flows_e81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f81
  r = spreadsheet.flows_f81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g81
  r = spreadsheet.flows_g81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h81
  r = spreadsheet.flows_h81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i81
  r = spreadsheet.flows_i81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j81
  r = spreadsheet.flows_j81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k81
  r = spreadsheet.flows_k81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l81
  r = spreadsheet.flows_l81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m81
  r = spreadsheet.flows_m81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n81
  r = spreadsheet.flows_n81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c82
  r = spreadsheet.flows_c82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d82
  r = spreadsheet.flows_d82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e82
  r = spreadsheet.flows_e82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f82
  r = spreadsheet.flows_f82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g82
  r = spreadsheet.flows_g82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h82
  r = spreadsheet.flows_h82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i82
  r = spreadsheet.flows_i82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j82
  r = spreadsheet.flows_j82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k82
  r = spreadsheet.flows_k82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l82
  r = spreadsheet.flows_l82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m82
  r = spreadsheet.flows_m82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n82
  r = spreadsheet.flows_n82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c83
  r = spreadsheet.flows_c83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d83
  r = spreadsheet.flows_d83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e83
  r = spreadsheet.flows_e83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f83
  r = spreadsheet.flows_f83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g83
  r = spreadsheet.flows_g83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h83
  r = spreadsheet.flows_h83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i83
  r = spreadsheet.flows_i83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j83
  r = spreadsheet.flows_j83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k83
  r = spreadsheet.flows_k83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l83
  r = spreadsheet.flows_l83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m83
  r = spreadsheet.flows_m83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n83
  r = spreadsheet.flows_n83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c84
  r = spreadsheet.flows_c84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d84
  r = spreadsheet.flows_d84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e84
  r = spreadsheet.flows_e84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f84
  r = spreadsheet.flows_f84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g84
  r = spreadsheet.flows_g84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h84
  r = spreadsheet.flows_h84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i84
  r = spreadsheet.flows_i84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j84
  r = spreadsheet.flows_j84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k84
  r = spreadsheet.flows_k84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l84
  r = spreadsheet.flows_l84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m84
  r = spreadsheet.flows_m84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n84
  r = spreadsheet.flows_n84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c85
  r = spreadsheet.flows_c85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d85
  r = spreadsheet.flows_d85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e85
  r = spreadsheet.flows_e85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f85
  r = spreadsheet.flows_f85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g85
  r = spreadsheet.flows_g85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.480606539590624,r[:number],0.001)
end

def test_flows_h85
  r = spreadsheet.flows_h85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.8914012100769,r[:number],0.001)
end

def test_flows_i85
  r = spreadsheet.flows_i85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.14481167135327,r[:number],0.001)
end

def test_flows_j85
  r = spreadsheet.flows_j85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(524.5481531535203,r[:number],0.001)
end

def test_flows_k85
  r = spreadsheet.flows_k85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(954.9991158813635,r[:number],0.001)
end

def test_flows_l85
  r = spreadsheet.flows_l85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1539.7458103851102,r[:number],0.001)
end

def test_flows_m85
  r = spreadsheet.flows_m85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2254.855787587494,r[:number],0.001)
end

def test_flows_n85
  r = spreadsheet.flows_n85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.547563558818,r[:number],0.001)
end

def test_flows_c86
  r = spreadsheet.flows_c86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d86
  r = spreadsheet.flows_d86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e86
  r = spreadsheet.flows_e86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13767.982020983483,r[:number],0.001)
end

def test_flows_f86
  r = spreadsheet.flows_f86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14067.150095863088,r[:number],0.001)
end

def test_flows_g86
  r = spreadsheet.flows_g86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21459.98191615728,r[:number],0.001)
end

def test_flows_h86
  r = spreadsheet.flows_h86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29755.339336558554,r[:number],0.001)
end

def test_flows_i86
  r = spreadsheet.flows_i86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37772.54794170971,r[:number],0.001)
end

def test_flows_j86
  r = spreadsheet.flows_j86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45741.586427912545,r[:number],0.001)
end

def test_flows_k86
  r = spreadsheet.flows_k86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53378.274882717495,r[:number],0.001)
end

def test_flows_l86
  r = spreadsheet.flows_l86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60613.74026349409,r[:number],0.001)
end

def test_flows_m86
  r = spreadsheet.flows_m86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67769.42700542267,r[:number],0.001)
end

def test_flows_n86
  r = spreadsheet.flows_n86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74103.17394672989,r[:number],0.001)
end

def test_flows_c87
  r = spreadsheet.flows_c87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d87
  r = spreadsheet.flows_d87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e87
  r = spreadsheet.flows_e87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.93935574070757,r[:number],0.001)
end

def test_flows_f87
  r = spreadsheet.flows_f87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.53071348434753,r[:number],0.001)
end

def test_flows_g87
  r = spreadsheet.flows_g87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.16169618026234,r[:number],0.001)
end

def test_flows_h87
  r = spreadsheet.flows_h87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.2186855656891,r[:number],0.001)
end

def test_flows_i87
  r = spreadsheet.flows_i87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.88445662836384,r[:number],0.001)
end

def test_flows_j87
  r = spreadsheet.flows_j87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.2255153745423,r[:number],0.001)
end

def test_flows_k87
  r = spreadsheet.flows_k87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199.67070546661247,r[:number],0.001)
end

def test_flows_l87
  r = spreadsheet.flows_l87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.1670862145265,r[:number],0.001)
end

def test_flows_m87
  r = spreadsheet.flows_m87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.1868487552378,r[:number],0.001)
end

def test_flows_n87
  r = spreadsheet.flows_n87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.00681420759282,r[:number],0.001)
end

def test_flows_c88
  r = spreadsheet.flows_c88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d88
  r = spreadsheet.flows_d88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e88
  r = spreadsheet.flows_e88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.14867451194188,r[:number],0.001)
end

def test_flows_f88
  r = spreadsheet.flows_f88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.6823885852379,r[:number],0.001)
end

def test_flows_g88
  r = spreadsheet.flows_g88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.48037419114848,r[:number],0.001)
end

def test_flows_h88
  r = spreadsheet.flows_h88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.4776177219271,r[:number],0.001)
end

def test_flows_i88
  r = spreadsheet.flows_i88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.78359113240876,r[:number],0.001)
end

def test_flows_j88
  r = spreadsheet.flows_j88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256.08549407340655,r[:number],0.001)
end

def test_flows_k88
  r = spreadsheet.flows_k88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.5041996323691,r[:number],0.001)
end

def test_flows_l88
  r = spreadsheet.flows_l88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(263.3530428214515,r[:number],0.001)
end

def test_flows_m88
  r = spreadsheet.flows_m88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(220.45629014455204,r[:number],0.001)
end

def test_flows_n88
  r = spreadsheet.flows_n88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.21691970126552,r[:number],0.001)
end

def test_flows_c89
  r = spreadsheet.flows_c89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d89
  r = spreadsheet.flows_d89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_e89
  r = spreadsheet.flows_e89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2906.4806145672337,r[:number],0.001)
end

def test_flows_f89
  r = spreadsheet.flows_f89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2990.0323835140016,r[:number],0.001)
end

def test_flows_g89
  r = spreadsheet.flows_g89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4863.271865550391,r[:number],0.001)
end

def test_flows_h89
  r = spreadsheet.flows_h89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7206.396091004765,r[:number],0.001)
end

def test_flows_i89
  r = spreadsheet.flows_i89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10085.94510929981,r[:number],0.001)
end

def test_flows_j89
  r = spreadsheet.flows_j89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13551.51759849119,r[:number],0.001)
end

def test_flows_k89
  r = spreadsheet.flows_k89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17707.281051856276,r[:number],0.001)
end

def test_flows_l89
  r = spreadsheet.flows_l89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22702.12584673048,r[:number],0.001)
end

def test_flows_m89
  r = spreadsheet.flows_m89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28712.896595171373,r[:number],0.001)
end

def test_flows_n89
  r = spreadsheet.flows_n89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35930.73284613621,r[:number],0.001)
end

def test_flows_c90
  r = spreadsheet.flows_c90
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d90
  r = spreadsheet.flows_d90
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_flows_e90
  r = spreadsheet.flows_e90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.817339999999998,r[:number],0.001)
end

def test_flows_f90
  r = spreadsheet.flows_f90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.572895707388618,r[:number],0.001)
end

def test_flows_g90
  r = spreadsheet.flows_g90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.383064556311584,r[:number],0.001)
end

def test_flows_h90
  r = spreadsheet.flows_h90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.58984378892685,r[:number],0.001)
end

def test_flows_i90
  r = spreadsheet.flows_i90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.99670495670838,r[:number],0.001)
end

def test_flows_j90
  r = spreadsheet.flows_j90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.688791719453825,r[:number],0.001)
end

def test_flows_k90
  r = spreadsheet.flows_k90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.384829464713203,r[:number],0.001)
end

def test_flows_l90
  r = spreadsheet.flows_l90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.084767495533725,r[:number],0.001)
end

def test_flows_m90
  r = spreadsheet.flows_m90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.788555765479813,r[:number],0.001)
end

def test_flows_n90
  r = spreadsheet.flows_n90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number],0.001)
end

def test_flows_c91
  r = spreadsheet.flows_c91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d91
  r = spreadsheet.flows_d91
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_e91
  r = spreadsheet.flows_e91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_f91
  r = spreadsheet.flows_f91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_g91
  r = spreadsheet.flows_g91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_h91
  r = spreadsheet.flows_h91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_i91
  r = spreadsheet.flows_i91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_j91
  r = spreadsheet.flows_j91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_k91
  r = spreadsheet.flows_k91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_l91
  r = spreadsheet.flows_l91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_m91
  r = spreadsheet.flows_m91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_n91
  r = spreadsheet.flows_n91
  assert_equal(:ExcelError,r[:type])
end

def test_flows_c92
  r = spreadsheet.flows_c92
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d92
  r = spreadsheet.flows_d92
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_flows_e92
  r = spreadsheet.flows_e92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_f92
  r = spreadsheet.flows_f92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_g92
  r = spreadsheet.flows_g92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_h92
  r = spreadsheet.flows_h92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_i92
  r = spreadsheet.flows_i92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_j92
  r = spreadsheet.flows_j92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_k92
  r = spreadsheet.flows_k92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_l92
  r = spreadsheet.flows_l92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_m92
  r = spreadsheet.flows_m92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_n92
  r = spreadsheet.flows_n92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21,r[:number],0.001)
end

def test_flows_c93
  r = spreadsheet.flows_c93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d93
  r = spreadsheet.flows_d93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_flows_e93
  r = spreadsheet.flows_e93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_f93
  r = spreadsheet.flows_f93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_g93
  r = spreadsheet.flows_g93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_h93
  r = spreadsheet.flows_h93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_i93
  r = spreadsheet.flows_i93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_j93
  r = spreadsheet.flows_j93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_k93
  r = spreadsheet.flows_k93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_l93
  r = spreadsheet.flows_l93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_m93
  r = spreadsheet.flows_m93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_n93
  r = spreadsheet.flows_n93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_flows_c94
  r = spreadsheet.flows_c94
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d94
  r = spreadsheet.flows_d94
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e94
  r = spreadsheet.flows_e94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.56905099575587,r[:number],0.001)
end

def test_flows_f94
  r = spreadsheet.flows_f94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.7868009509903,r[:number],0.001)
end

def test_flows_g94
  r = spreadsheet.flows_g94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.4265502612584,r[:number],0.001)
end

def test_flows_h94
  r = spreadsheet.flows_h94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(435.9714404164015,r[:number],0.001)
end

def test_flows_i94
  r = spreadsheet.flows_i94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(573.7399814263156,r[:number],0.001)
end

def test_flows_j94
  r = spreadsheet.flows_j94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(714.2778002450104,r[:number],0.001)
end

def test_flows_k94
  r = spreadsheet.flows_k94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(857.8044968563628,r[:number],0.001)
end

def test_flows_l94
  r = spreadsheet.flows_l94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1015.3051949718737,r[:number],0.001)
end

def test_flows_m94
  r = spreadsheet.flows_m94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1179.0093456093157,r[:number],0.001)
end

def test_flows_n94
  r = spreadsheet.flows_n94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1345.0685728902897,r[:number],0.001)
end


  # start of CostPerCapita
def test_costpercapita_b1
  r = spreadsheet.costpercapita_b1
  assert_equal(:ExcelString,r[:type])
  assert_equal("£/Capita/yr",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e1
  r = spreadsheet.costpercapita_e1
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f1
  r = spreadsheet.costpercapita_f1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o1
  r = spreadsheet.costpercapita_o1
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p1
  r = spreadsheet.costpercapita_p1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y1
  r = spreadsheet.costpercapita_y1
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z1
  r = spreadsheet.costpercapita_z1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai1
  r = spreadsheet.costpercapita_ai1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as1
  r = spreadsheet.costpercapita_as1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av1
  r = spreadsheet.costpercapita_av1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay1
  r = spreadsheet.costpercapita_ay1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi1
  r = spreadsheet.costpercapita_bi1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs1
  r = spreadsheet.costpercapita_bs1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc1
  r = spreadsheet.costpercapita_cc1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf1
  r = spreadsheet.costpercapita_cf1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp1
  r = spreadsheet.costpercapita_cp1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a2
  r = spreadsheet.costpercapita_a2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Code",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b2
  r = spreadsheet.costpercapita_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Description",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c2
  r = spreadsheet.costpercapita_c2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e2
  r = spreadsheet.costpercapita_e2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f2
  r = spreadsheet.costpercapita_f2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g2
  r = spreadsheet.costpercapita_g2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h2
  r = spreadsheet.costpercapita_h2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i2
  r = spreadsheet.costpercapita_i2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j2
  r = spreadsheet.costpercapita_j2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k2
  r = spreadsheet.costpercapita_k2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l2
  r = spreadsheet.costpercapita_l2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m2
  r = spreadsheet.costpercapita_m2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o2
  r = spreadsheet.costpercapita_o2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p2
  r = spreadsheet.costpercapita_p2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q2
  r = spreadsheet.costpercapita_q2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r2
  r = spreadsheet.costpercapita_r2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s2
  r = spreadsheet.costpercapita_s2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t2
  r = spreadsheet.costpercapita_t2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u2
  r = spreadsheet.costpercapita_u2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v2
  r = spreadsheet.costpercapita_v2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w2
  r = spreadsheet.costpercapita_w2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y2
  r = spreadsheet.costpercapita_y2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z2
  r = spreadsheet.costpercapita_z2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa2
  r = spreadsheet.costpercapita_aa2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab2
  r = spreadsheet.costpercapita_ab2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac2
  r = spreadsheet.costpercapita_ac2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad2
  r = spreadsheet.costpercapita_ad2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae2
  r = spreadsheet.costpercapita_ae2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af2
  r = spreadsheet.costpercapita_af2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag2
  r = spreadsheet.costpercapita_ag2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai2
  r = spreadsheet.costpercapita_ai2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj2
  r = spreadsheet.costpercapita_aj2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak2
  r = spreadsheet.costpercapita_ak2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al2
  r = spreadsheet.costpercapita_al2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am2
  r = spreadsheet.costpercapita_am2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an2
  r = spreadsheet.costpercapita_an2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao2
  r = spreadsheet.costpercapita_ao2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap2
  r = spreadsheet.costpercapita_ap2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq2
  r = spreadsheet.costpercapita_aq2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as2
  r = spreadsheet.costpercapita_as2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at2
  r = spreadsheet.costpercapita_at2
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av2
  r = spreadsheet.costpercapita_av2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw2
  r = spreadsheet.costpercapita_aw2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay2
  r = spreadsheet.costpercapita_ay2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_az2
  r = spreadsheet.costpercapita_az2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_ba2
  r = spreadsheet.costpercapita_ba2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bb2
  r = spreadsheet.costpercapita_bb2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bc2
  r = spreadsheet.costpercapita_bc2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bd2
  r = spreadsheet.costpercapita_bd2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_be2
  r = spreadsheet.costpercapita_be2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bf2
  r = spreadsheet.costpercapita_bf2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bg2
  r = spreadsheet.costpercapita_bg2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bi2
  r = spreadsheet.costpercapita_bi2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_bj2
  r = spreadsheet.costpercapita_bj2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_bk2
  r = spreadsheet.costpercapita_bk2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bl2
  r = spreadsheet.costpercapita_bl2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bm2
  r = spreadsheet.costpercapita_bm2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bn2
  r = spreadsheet.costpercapita_bn2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_bo2
  r = spreadsheet.costpercapita_bo2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bp2
  r = spreadsheet.costpercapita_bp2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bq2
  r = spreadsheet.costpercapita_bq2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bs2
  r = spreadsheet.costpercapita_bs2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt2
  r = spreadsheet.costpercapita_bt2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu2
  r = spreadsheet.costpercapita_bu2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv2
  r = spreadsheet.costpercapita_bv2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw2
  r = spreadsheet.costpercapita_bw2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx2
  r = spreadsheet.costpercapita_bx2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by2
  r = spreadsheet.costpercapita_by2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz2
  r = spreadsheet.costpercapita_bz2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca2
  r = spreadsheet.costpercapita_ca2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc2
  r = spreadsheet.costpercapita_cc2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd2
  r = spreadsheet.costpercapita_cd2
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf2
  r = spreadsheet.costpercapita_cf2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg2
  r = spreadsheet.costpercapita_cg2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch2
  r = spreadsheet.costpercapita_ch2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci2
  r = spreadsheet.costpercapita_ci2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj2
  r = spreadsheet.costpercapita_cj2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck2
  r = spreadsheet.costpercapita_ck2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl2
  r = spreadsheet.costpercapita_cl2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm2
  r = spreadsheet.costpercapita_cm2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn2
  r = spreadsheet.costpercapita_cn2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp2
  r = spreadsheet.costpercapita_cp2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq2
  r = spreadsheet.costpercapita_cq2
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a3
  r = spreadsheet.costpercapita_a3
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b3
  r = spreadsheet.costpercapita_b3
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional thermal plant",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c3
  r = spreadsheet.costpercapita_c3
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e3
  r = spreadsheet.costpercapita_e3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.92496999781946,r[:number],0.001)
end

def test_costpercapita_f3
  r = spreadsheet.costpercapita_f3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(818.4084674547236,r[:number],0.001)
end

def test_costpercapita_g3
  r = spreadsheet.costpercapita_g3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(888.3102844745949,r[:number],0.001)
end

def test_costpercapita_h3
  r = spreadsheet.costpercapita_h3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.2372439079317,r[:number],0.001)
end

def test_costpercapita_i3
  r = spreadsheet.costpercapita_i3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1039.6359545063729,r[:number],0.001)
end

def test_costpercapita_j3
  r = spreadsheet.costpercapita_j3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1098.1429500169868,r[:number],0.001)
end

def test_costpercapita_k3
  r = spreadsheet.costpercapita_k3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1143.665741833105,r[:number],0.001)
end

def test_costpercapita_l3
  r = spreadsheet.costpercapita_l3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1184.276818598129,r[:number],0.001)
end

def test_costpercapita_m3
  r = spreadsheet.costpercapita_m3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1208.6632605944117,r[:number],0.001)
end

def test_costpercapita_o3
  r = spreadsheet.costpercapita_o3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(804.2950096300833,r[:number],0.001)
end

def test_costpercapita_p3
  r = spreadsheet.costpercapita_p3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(879.6912980654429,r[:number],0.001)
end

def test_costpercapita_q3
  r = spreadsheet.costpercapita_q3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969.4231178733799,r[:number],0.001)
end

def test_costpercapita_r3
  r = spreadsheet.costpercapita_r3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1054.9759226809222,r[:number],0.001)
end

def test_costpercapita_s3
  r = spreadsheet.costpercapita_s3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1130.807885365785,r[:number],0.001)
end

def test_costpercapita_t3
  r = spreadsheet.costpercapita_t3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1163.1603396587582,r[:number],0.001)
end

def test_costpercapita_u3
  r = spreadsheet.costpercapita_u3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1178.8092338539661,r[:number],0.001)
end

def test_costpercapita_v3
  r = spreadsheet.costpercapita_v3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1177.1497672419584,r[:number],0.001)
end

def test_costpercapita_w3
  r = spreadsheet.costpercapita_w3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1149.7311368872047,r[:number],0.001)
end

def test_costpercapita_y3
  r = spreadsheet.costpercapita_y3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z3
  r = spreadsheet.costpercapita_z3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa3
  r = spreadsheet.costpercapita_aa3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab3
  r = spreadsheet.costpercapita_ab3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac3
  r = spreadsheet.costpercapita_ac3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad3
  r = spreadsheet.costpercapita_ad3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae3
  r = spreadsheet.costpercapita_ae3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af3
  r = spreadsheet.costpercapita_af3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag3
  r = spreadsheet.costpercapita_ag3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai3
  r = spreadsheet.costpercapita_ai3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1247.2199796279028,r[:number],0.001)
end

def test_costpercapita_aj3
  r = spreadsheet.costpercapita_aj3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1698.0997655201663,r[:number],0.001)
end

def test_costpercapita_ak3
  r = spreadsheet.costpercapita_ak3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1857.7334023479748,r[:number],0.001)
end

def test_costpercapita_al3
  r = spreadsheet.costpercapita_al3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.213166588854,r[:number],0.001)
end

def test_costpercapita_am3
  r = spreadsheet.costpercapita_am3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2170.443839872158,r[:number],0.001)
end

def test_costpercapita_an3
  r = spreadsheet.costpercapita_an3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2261.303289675745,r[:number],0.001)
end

def test_costpercapita_ao3
  r = spreadsheet.costpercapita_ao3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2322.4749756870715,r[:number],0.001)
end

def test_costpercapita_ap3
  r = spreadsheet.costpercapita_ap3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2361.4265858400872,r[:number],0.001)
end

def test_costpercapita_aq3
  r = spreadsheet.costpercapita_aq3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2358.3943974816166,r[:number],0.001)
end

def test_costpercapita_as3
  r = spreadsheet.costpercapita_as3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.1454891823971,r[:number],0.001)
end

def test_costpercapita_at3
  r = spreadsheet.costpercapita_at3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42170.26993205467,r[:number],0.001)
end

def test_costpercapita_av3
  r = spreadsheet.costpercapita_av3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw3
  r = spreadsheet.costpercapita_aw3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay3
  r = spreadsheet.costpercapita_ay3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.7549819986917,r[:number],0.001)
end

def test_costpercapita_az3
  r = spreadsheet.costpercapita_az3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(818.4084674547236,r[:number],0.001)
end

def test_costpercapita_ba3
  r = spreadsheet.costpercapita_ba3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(888.3102844745949,r[:number],0.001)
end

def test_costpercapita_bb3
  r = spreadsheet.costpercapita_bb3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.2372439079317,r[:number],0.001)
end

def test_costpercapita_bc3
  r = spreadsheet.costpercapita_bc3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1039.6359545063729,r[:number],0.001)
end

def test_costpercapita_bd3
  r = spreadsheet.costpercapita_bd3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1098.1429500169868,r[:number],0.001)
end

def test_costpercapita_be3
  r = spreadsheet.costpercapita_be3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1143.665741833105,r[:number],0.001)
end

def test_costpercapita_bf3
  r = spreadsheet.costpercapita_bf3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1184.276818598129,r[:number],0.001)
end

def test_costpercapita_bg3
  r = spreadsheet.costpercapita_bg3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1208.6632605944117,r[:number],0.001)
end

def test_costpercapita_bi3
  r = spreadsheet.costpercapita_bi3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.7549819986917,r[:number],0.001)
end

def test_costpercapita_bj3
  r = spreadsheet.costpercapita_bj3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(818.4084674547236,r[:number],0.001)
end

def test_costpercapita_bk3
  r = spreadsheet.costpercapita_bk3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(888.3102844745949,r[:number],0.001)
end

def test_costpercapita_bl3
  r = spreadsheet.costpercapita_bl3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.2372439079317,r[:number],0.001)
end

def test_costpercapita_bm3
  r = spreadsheet.costpercapita_bm3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1039.6359545063729,r[:number],0.001)
end

def test_costpercapita_bn3
  r = spreadsheet.costpercapita_bn3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1098.1429500169868,r[:number],0.001)
end

def test_costpercapita_bo3
  r = spreadsheet.costpercapita_bo3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1143.665741833105,r[:number],0.001)
end

def test_costpercapita_bp3
  r = spreadsheet.costpercapita_bp3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1184.276818598129,r[:number],0.001)
end

def test_costpercapita_bq3
  r = spreadsheet.costpercapita_bq3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1208.6632605944117,r[:number],0.001)
end

def test_costpercapita_bs3
  r = spreadsheet.costpercapita_bs3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1070.049991628775,r[:number],0.001)
end

def test_costpercapita_bt3
  r = spreadsheet.costpercapita_bt3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1698.0997655201663,r[:number],0.001)
end

def test_costpercapita_bu3
  r = spreadsheet.costpercapita_bu3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1857.7334023479748,r[:number],0.001)
end

def test_costpercapita_bv3
  r = spreadsheet.costpercapita_bv3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.213166588854,r[:number],0.001)
end

def test_costpercapita_bw3
  r = spreadsheet.costpercapita_bw3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2170.443839872158,r[:number],0.001)
end

def test_costpercapita_bx3
  r = spreadsheet.costpercapita_bx3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2261.303289675745,r[:number],0.001)
end

def test_costpercapita_by3
  r = spreadsheet.costpercapita_by3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2322.4749756870715,r[:number],0.001)
end

def test_costpercapita_bz3
  r = spreadsheet.costpercapita_bz3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2361.4265858400872,r[:number],0.001)
end

def test_costpercapita_ca3
  r = spreadsheet.costpercapita_ca3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2358.3943974816166,r[:number],0.001)
end

def test_costpercapita_cc3
  r = spreadsheet.costpercapita_cc3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2014.4599349602718,r[:number],0.001)
end

def test_costpercapita_cd3
  r = spreadsheet.costpercapita_cd3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41993.09994405554,r[:number],0.001)
end

def test_costpercapita_cf3
  r = spreadsheet.costpercapita_cf3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-177.16998799912778,r[:number],0.001)
end

def test_costpercapita_cg3
  r = spreadsheet.costpercapita_cg3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch3
  r = spreadsheet.costpercapita_ch3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci3
  r = spreadsheet.costpercapita_ci3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj3
  r = spreadsheet.costpercapita_cj3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck3
  r = spreadsheet.costpercapita_ck3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl3
  r = spreadsheet.costpercapita_cl3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm3
  r = spreadsheet.costpercapita_cm3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn3
  r = spreadsheet.costpercapita_cn3
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp3
  r = spreadsheet.costpercapita_cp3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-19.685554222125308,r[:number],0.001)
end

def test_costpercapita_cq3
  r = spreadsheet.costpercapita_cq3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-177.16998799912778,r[:number],0.001)
end

def test_costpercapita_cr3
  r = spreadsheet.costpercapita_cr3
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a4
  r = spreadsheet.costpercapita_a4
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b4
  r = spreadsheet.costpercapita_b4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Combustion + CCS",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c4
  r = spreadsheet.costpercapita_c4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e4
  r = spreadsheet.costpercapita_e4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f4
  r = spreadsheet.costpercapita_f4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1002490109591307,r[:number],0.001)
end

def test_costpercapita_g4
  r = spreadsheet.costpercapita_g4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9332713006871323,r[:number],0.001)
end

def test_costpercapita_h4
  r = spreadsheet.costpercapita_h4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i4
  r = spreadsheet.costpercapita_i4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j4
  r = spreadsheet.costpercapita_j4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k4
  r = spreadsheet.costpercapita_k4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l4
  r = spreadsheet.costpercapita_l4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m4
  r = spreadsheet.costpercapita_m4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o4
  r = spreadsheet.costpercapita_o4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p4
  r = spreadsheet.costpercapita_p4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2710424859718418,r[:number],0.001)
end

def test_costpercapita_q4
  r = spreadsheet.costpercapita_q4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5192270185897403,r[:number],0.001)
end

def test_costpercapita_r4
  r = spreadsheet.costpercapita_r4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.45886575842905813,r[:number],0.001)
end

def test_costpercapita_s4
  r = spreadsheet.costpercapita_s4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.44632947565808306,r[:number],0.001)
end

def test_costpercapita_t4
  r = spreadsheet.costpercapita_t4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4358158742957596,r[:number],0.001)
end

def test_costpercapita_u4
  r = spreadsheet.costpercapita_u4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.42652149662249816,r[:number],0.001)
end

def test_costpercapita_v4
  r = spreadsheet.costpercapita_v4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41801327764104834,r[:number],0.001)
end

def test_costpercapita_w4
  r = spreadsheet.costpercapita_w4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41021242453214596,r[:number],0.001)
end

def test_costpercapita_y4
  r = spreadsheet.costpercapita_y4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z4
  r = spreadsheet.costpercapita_z4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa4
  r = spreadsheet.costpercapita_aa4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab4
  r = spreadsheet.costpercapita_ab4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac4
  r = spreadsheet.costpercapita_ac4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad4
  r = spreadsheet.costpercapita_ad4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae4
  r = spreadsheet.costpercapita_ae4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af4
  r = spreadsheet.costpercapita_af4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag4
  r = spreadsheet.costpercapita_ag4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai4
  r = spreadsheet.costpercapita_ai4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj4
  r = spreadsheet.costpercapita_aj4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3712914969309726,r[:number],0.001)
end

def test_costpercapita_ak4
  r = spreadsheet.costpercapita_ak4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4524983192768723,r[:number],0.001)
end

def test_costpercapita_al4
  r = spreadsheet.costpercapita_al4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.45886575842905813,r[:number],0.001)
end

def test_costpercapita_am4
  r = spreadsheet.costpercapita_am4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.44632947565808306,r[:number],0.001)
end

def test_costpercapita_an4
  r = spreadsheet.costpercapita_an4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4358158742957596,r[:number],0.001)
end

def test_costpercapita_ao4
  r = spreadsheet.costpercapita_ao4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.42652149662249816,r[:number],0.001)
end

def test_costpercapita_ap4
  r = spreadsheet.costpercapita_ap4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41801327764104834,r[:number],0.001)
end

def test_costpercapita_aq4
  r = spreadsheet.costpercapita_aq4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41021242453214596,r[:number],0.001)
end

def test_costpercapita_as4
  r = spreadsheet.costpercapita_as4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.8243942359318264,r[:number],0.001)
end

def test_costpercapita_at4
  r = spreadsheet.costpercapita_at4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.034899876440434,r[:number],0.001)
end

def test_costpercapita_av4
  r = spreadsheet.costpercapita_av4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw4
  r = spreadsheet.costpercapita_aw4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay4
  r = spreadsheet.costpercapita_ay4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az4
  r = spreadsheet.costpercapita_az4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1002490109591307,r[:number],0.001)
end

def test_costpercapita_ba4
  r = spreadsheet.costpercapita_ba4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9332713006871323,r[:number],0.001)
end

def test_costpercapita_bb4
  r = spreadsheet.costpercapita_bb4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc4
  r = spreadsheet.costpercapita_bc4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd4
  r = spreadsheet.costpercapita_bd4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be4
  r = spreadsheet.costpercapita_be4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf4
  r = spreadsheet.costpercapita_bf4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg4
  r = spreadsheet.costpercapita_bg4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi4
  r = spreadsheet.costpercapita_bi4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj4
  r = spreadsheet.costpercapita_bj4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1002490109591307,r[:number],0.001)
end

def test_costpercapita_bk4
  r = spreadsheet.costpercapita_bk4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9332713006871323,r[:number],0.001)
end

def test_costpercapita_bl4
  r = spreadsheet.costpercapita_bl4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm4
  r = spreadsheet.costpercapita_bm4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn4
  r = spreadsheet.costpercapita_bn4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo4
  r = spreadsheet.costpercapita_bo4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp4
  r = spreadsheet.costpercapita_bp4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq4
  r = spreadsheet.costpercapita_bq4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs4
  r = spreadsheet.costpercapita_bs4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt4
  r = spreadsheet.costpercapita_bt4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3712914969309726,r[:number],0.001)
end

def test_costpercapita_bu4
  r = spreadsheet.costpercapita_bu4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4524983192768723,r[:number],0.001)
end

def test_costpercapita_bv4
  r = spreadsheet.costpercapita_bv4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.45886575842905813,r[:number],0.001)
end

def test_costpercapita_bw4
  r = spreadsheet.costpercapita_bw4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.44632947565808306,r[:number],0.001)
end

def test_costpercapita_bx4
  r = spreadsheet.costpercapita_bx4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4358158742957596,r[:number],0.001)
end

def test_costpercapita_by4
  r = spreadsheet.costpercapita_by4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.42652149662249816,r[:number],0.001)
end

def test_costpercapita_bz4
  r = spreadsheet.costpercapita_bz4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41801327764104834,r[:number],0.001)
end

def test_costpercapita_ca4
  r = spreadsheet.costpercapita_ca4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41021242453214596,r[:number],0.001)
end

def test_costpercapita_cc4
  r = spreadsheet.costpercapita_cc4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.8243942359318264,r[:number],0.001)
end

def test_costpercapita_cd4
  r = spreadsheet.costpercapita_cd4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.034899876440434,r[:number],0.001)
end

def test_costpercapita_cf4
  r = spreadsheet.costpercapita_cf4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg4
  r = spreadsheet.costpercapita_cg4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch4
  r = spreadsheet.costpercapita_ch4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci4
  r = spreadsheet.costpercapita_ci4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj4
  r = spreadsheet.costpercapita_cj4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck4
  r = spreadsheet.costpercapita_ck4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl4
  r = spreadsheet.costpercapita_cl4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm4
  r = spreadsheet.costpercapita_cm4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn4
  r = spreadsheet.costpercapita_cn4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp4
  r = spreadsheet.costpercapita_cp4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq4
  r = spreadsheet.costpercapita_cq4
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr4
  r = spreadsheet.costpercapita_cr4
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a5
  r = spreadsheet.costpercapita_a5
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b5
  r = spreadsheet.costpercapita_b5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c5
  r = spreadsheet.costpercapita_c5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e5
  r = spreadsheet.costpercapita_e5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15663.365942327879,r[:number],0.001)
end

def test_costpercapita_f5
  r = spreadsheet.costpercapita_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14292.638394386588,r[:number],0.001)
end

def test_costpercapita_g5
  r = spreadsheet.costpercapita_g5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14477.784777661935,r[:number],0.001)
end

def test_costpercapita_h5
  r = spreadsheet.costpercapita_h5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14810.572031814461,r[:number],0.001)
end

def test_costpercapita_i5
  r = spreadsheet.costpercapita_i5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14335.875555180735,r[:number],0.001)
end

def test_costpercapita_j5
  r = spreadsheet.costpercapita_j5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13510.80201517853,r[:number],0.001)
end

def test_costpercapita_k5
  r = spreadsheet.costpercapita_k5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12401.507282279177,r[:number],0.001)
end

def test_costpercapita_l5
  r = spreadsheet.costpercapita_l5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11348.433705209949,r[:number],0.001)
end

def test_costpercapita_m5
  r = spreadsheet.costpercapita_m5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10123.132569660012,r[:number],0.001)
end

def test_costpercapita_o5
  r = spreadsheet.costpercapita_o5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.54041758386668,r[:number],0.001)
end

def test_costpercapita_p5
  r = spreadsheet.costpercapita_p5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.30020458039172,r[:number],0.001)
end

def test_costpercapita_q5
  r = spreadsheet.costpercapita_q5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.64428944492084,r[:number],0.001)
end

def test_costpercapita_r5
  r = spreadsheet.costpercapita_r5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.43824249254007,r[:number],0.001)
end

def test_costpercapita_s5
  r = spreadsheet.costpercapita_s5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.99180563582942,r[:number],0.001)
end

def test_costpercapita_t5
  r = spreadsheet.costpercapita_t5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.72856280338465,r[:number],0.001)
end

def test_costpercapita_u5
  r = spreadsheet.costpercapita_u5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.51311678063573,r[:number],0.001)
end

def test_costpercapita_v5
  r = spreadsheet.costpercapita_v5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.91416091983325,r[:number],0.001)
end

def test_costpercapita_w5
  r = spreadsheet.costpercapita_w5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.59108450925785,r[:number],0.001)
end

def test_costpercapita_y5
  r = spreadsheet.costpercapita_y5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.203402215104363,r[:number],0.001)
end

def test_costpercapita_z5
  r = spreadsheet.costpercapita_z5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.298194589896381,r[:number],0.001)
end

def test_costpercapita_aa5
  r = spreadsheet.costpercapita_aa5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.05994966487259,r[:number],0.001)
end

def test_costpercapita_ab5
  r = spreadsheet.costpercapita_ab5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.6493616297207,r[:number],0.001)
end

def test_costpercapita_ac5
  r = spreadsheet.costpercapita_ac5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.870896965496588,r[:number],0.001)
end

def test_costpercapita_ad5
  r = spreadsheet.costpercapita_ad5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.76130385604575,r[:number],0.001)
end

def test_costpercapita_ae5
  r = spreadsheet.costpercapita_ae5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.742612754900797,r[:number],0.001)
end

def test_costpercapita_af5
  r = spreadsheet.costpercapita_af5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.430383978745123,r[:number],0.001)
end

def test_costpercapita_ag5
  r = spreadsheet.costpercapita_ag5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.575866118644406,r[:number],0.001)
end

def test_costpercapita_ai5
  r = spreadsheet.costpercapita_ai5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15843.10976212685,r[:number],0.001)
end

def test_costpercapita_aj5
  r = spreadsheet.costpercapita_aj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14486.236793556875,r[:number],0.001)
end

def test_costpercapita_ak5
  r = spreadsheet.costpercapita_ak5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14691.48901677173,r[:number],0.001)
end

def test_costpercapita_al5
  r = spreadsheet.costpercapita_al5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15031.659635936723,r[:number],0.001)
end

def test_costpercapita_am5
  r = spreadsheet.costpercapita_am5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14559.738257782059,r[:number],0.001)
end

def test_costpercapita_an5
  r = spreadsheet.costpercapita_an5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13733.29188183796,r[:number],0.001)
end

def test_costpercapita_ao5
  r = spreadsheet.costpercapita_ao5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12623.763011814712,r[:number],0.001)
end

def test_costpercapita_ap5
  r = spreadsheet.costpercapita_ap5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11566.778250108528,r[:number],0.001)
end

def test_costpercapita_aq5
  r = spreadsheet.costpercapita_aq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10343.299520287916,r[:number],0.001)
end

def test_costpercapita_as5
  r = spreadsheet.costpercapita_as5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13653.262903358149,r[:number],0.001)
end

def test_costpercapita_at5
  r = spreadsheet.costpercapita_at5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293379.1930556202,r[:number],0.001)
end

def test_costpercapita_av5
  r = spreadsheet.costpercapita_av5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw5
  r = spreadsheet.costpercapita_aw5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay5
  r = spreadsheet.costpercapita_ay5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9398.019565396728,r[:number],0.001)
end

def test_costpercapita_az5
  r = spreadsheet.costpercapita_az5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14292.638394386588,r[:number],0.001)
end

def test_costpercapita_ba5
  r = spreadsheet.costpercapita_ba5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14477.784777661935,r[:number],0.001)
end

def test_costpercapita_bb5
  r = spreadsheet.costpercapita_bb5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14810.572031814461,r[:number],0.001)
end

def test_costpercapita_bc5
  r = spreadsheet.costpercapita_bc5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14335.875555180735,r[:number],0.001)
end

def test_costpercapita_bd5
  r = spreadsheet.costpercapita_bd5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13510.802015178528,r[:number],0.001)
end

def test_costpercapita_be5
  r = spreadsheet.costpercapita_be5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12401.507282279175,r[:number],0.001)
end

def test_costpercapita_bf5
  r = spreadsheet.costpercapita_bf5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11348.43370520995,r[:number],0.001)
end

def test_costpercapita_bg5
  r = spreadsheet.costpercapita_bg5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10123.132569660012,r[:number],0.001)
end

def test_costpercapita_bi5
  r = spreadsheet.costpercapita_bi5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9398.019565396728,r[:number],0.001)
end

def test_costpercapita_bj5
  r = spreadsheet.costpercapita_bj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14292.638394386588,r[:number],0.001)
end

def test_costpercapita_bk5
  r = spreadsheet.costpercapita_bk5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14477.784777661935,r[:number],0.001)
end

def test_costpercapita_bl5
  r = spreadsheet.costpercapita_bl5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14810.572031814461,r[:number],0.001)
end

def test_costpercapita_bm5
  r = spreadsheet.costpercapita_bm5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14335.875555180735,r[:number],0.001)
end

def test_costpercapita_bn5
  r = spreadsheet.costpercapita_bn5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13510.802015178528,r[:number],0.001)
end

def test_costpercapita_bo5
  r = spreadsheet.costpercapita_bo5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12401.507282279175,r[:number],0.001)
end

def test_costpercapita_bp5
  r = spreadsheet.costpercapita_bp5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11348.43370520995,r[:number],0.001)
end

def test_costpercapita_bq5
  r = spreadsheet.costpercapita_bq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10123.132569660012,r[:number],0.001)
end

def test_costpercapita_bs5
  r = spreadsheet.costpercapita_bs5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9577.763385195698,r[:number],0.001)
end

def test_costpercapita_bt5
  r = spreadsheet.costpercapita_bt5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14486.236793556875,r[:number],0.001)
end

def test_costpercapita_bu5
  r = spreadsheet.costpercapita_bu5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14691.48901677173,r[:number],0.001)
end

def test_costpercapita_bv5
  r = spreadsheet.costpercapita_bv5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15031.659635936723,r[:number],0.001)
end

def test_costpercapita_bw5
  r = spreadsheet.costpercapita_bw5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14559.73825778206,r[:number],0.001)
end

def test_costpercapita_bx5
  r = spreadsheet.costpercapita_bx5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13733.291881837958,r[:number],0.001)
end

def test_costpercapita_by5
  r = spreadsheet.costpercapita_by5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12623.763011814712,r[:number],0.001)
end

def test_costpercapita_bz5
  r = spreadsheet.costpercapita_bz5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11566.77825010853,r[:number],0.001)
end

def test_costpercapita_ca5
  r = spreadsheet.costpercapita_ca5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10343.299520287916,r[:number],0.001)
end

def test_costpercapita_cc5
  r = spreadsheet.costpercapita_cc5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12957.113305921353,r[:number],0.001)
end

def test_costpercapita_cd5
  r = spreadsheet.costpercapita_cd5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(287113.846678689,r[:number],0.001)
end

def test_costpercapita_cf5
  r = spreadsheet.costpercapita_cf5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6265.346376931152,r[:number],0.001)
end

def test_costpercapita_cg5
  r = spreadsheet.costpercapita_cg5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch5
  r = spreadsheet.costpercapita_ch5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci5
  r = spreadsheet.costpercapita_ci5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj5
  r = spreadsheet.costpercapita_cj5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck5
  r = spreadsheet.costpercapita_ck5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl5
  r = spreadsheet.costpercapita_cl5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm5
  r = spreadsheet.costpercapita_cm5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn5
  r = spreadsheet.costpercapita_cn5
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp5
  r = spreadsheet.costpercapita_cp5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-696.1495974367947,r[:number],0.001)
end

def test_costpercapita_cq5
  r = spreadsheet.costpercapita_cq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6265.346376931152,r[:number],0.001)
end

def test_costpercapita_cr5
  r = spreadsheet.costpercapita_cr5
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a6
  r = spreadsheet.costpercapita_a6
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b6
  r = spreadsheet.costpercapita_b6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c6
  r = spreadsheet.costpercapita_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e6
  r = spreadsheet.costpercapita_e6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1678.543337517839,r[:number],0.001)
end

def test_costpercapita_f6
  r = spreadsheet.costpercapita_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1611.1214513405073,r[:number],0.001)
end

def test_costpercapita_g6
  r = spreadsheet.costpercapita_g6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3882.928167392297,r[:number],0.001)
end

def test_costpercapita_h6
  r = spreadsheet.costpercapita_h6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6317.8866423733825,r[:number],0.001)
end

def test_costpercapita_i6
  r = spreadsheet.costpercapita_i6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7501.186589086595,r[:number],0.001)
end

def test_costpercapita_j6
  r = spreadsheet.costpercapita_j6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8317.757456607951,r[:number],0.001)
end

def test_costpercapita_k6
  r = spreadsheet.costpercapita_k6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8730.793741253397,r[:number],0.001)
end

def test_costpercapita_l6
  r = spreadsheet.costpercapita_l6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8953.988774500225,r[:number],0.001)
end

def test_costpercapita_m6
  r = spreadsheet.costpercapita_m6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9163.038655537499,r[:number],0.001)
end

def test_costpercapita_o6
  r = spreadsheet.costpercapita_o6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.443710941218391,r[:number],0.001)
end

def test_costpercapita_p6
  r = spreadsheet.costpercapita_p6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.63699659064609,r[:number],0.001)
end

def test_costpercapita_q6
  r = spreadsheet.costpercapita_q6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.409394621645326,r[:number],0.001)
end

def test_costpercapita_r6
  r = spreadsheet.costpercapita_r6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.65935565817239,r[:number],0.001)
end

def test_costpercapita_s6
  r = spreadsheet.costpercapita_s6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.86025250747001,r[:number],0.001)
end

def test_costpercapita_t6
  r = spreadsheet.costpercapita_t6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.78722408900627,r[:number],0.001)
end

def test_costpercapita_u6
  r = spreadsheet.costpercapita_u6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.1921114601164,r[:number],0.001)
end

def test_costpercapita_v6
  r = spreadsheet.costpercapita_v6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.51462366220925,r[:number],0.001)
end

def test_costpercapita_w6
  r = spreadsheet.costpercapita_w6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.89546515274054,r[:number],0.001)
end

def test_costpercapita_y6
  r = spreadsheet.costpercapita_y6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z6
  r = spreadsheet.costpercapita_z6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa6
  r = spreadsheet.costpercapita_aa6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab6
  r = spreadsheet.costpercapita_ab6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac6
  r = spreadsheet.costpercapita_ac6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad6
  r = spreadsheet.costpercapita_ad6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae6
  r = spreadsheet.costpercapita_ae6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af6
  r = spreadsheet.costpercapita_af6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag6
  r = spreadsheet.costpercapita_ag6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai6
  r = spreadsheet.costpercapita_ai6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1691.9870484590574,r[:number],0.001)
end

def test_costpercapita_aj6
  r = spreadsheet.costpercapita_aj6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1643.7584479311536,r[:number],0.001)
end

def test_costpercapita_ak6
  r = spreadsheet.costpercapita_ak6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3936.3375620139423,r[:number],0.001)
end

def test_costpercapita_al6
  r = spreadsheet.costpercapita_al6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6381.5459980315545,r[:number],0.001)
end

def test_costpercapita_am6
  r = spreadsheet.costpercapita_am6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7572.046841594065,r[:number],0.001)
end

def test_costpercapita_an6
  r = spreadsheet.costpercapita_an6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8392.544680696958,r[:number],0.001)
end

def test_costpercapita_ao6
  r = spreadsheet.costpercapita_ao6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8807.985852713515,r[:number],0.001)
end

def test_costpercapita_ap6
  r = spreadsheet.costpercapita_ap6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9033.503398162435,r[:number],0.001)
end

def test_costpercapita_aq6
  r = spreadsheet.costpercapita_aq6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9243.934120690239,r[:number],0.001)
end

def test_costpercapita_as6
  r = spreadsheet.costpercapita_as6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6300.40488336588,r[:number],0.001)
end

def test_costpercapita_at6
  r = spreadsheet.costpercapita_at6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120218.60108038614,r[:number],0.001)
end

def test_costpercapita_av6
  r = spreadsheet.costpercapita_av6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw6
  r = spreadsheet.costpercapita_aw6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay6
  r = spreadsheet.costpercapita_ay6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1007.1260025107034,r[:number],0.001)
end

def test_costpercapita_az6
  r = spreadsheet.costpercapita_az6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1611.1214513405073,r[:number],0.001)
end

def test_costpercapita_ba6
  r = spreadsheet.costpercapita_ba6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3882.9281673922974,r[:number],0.001)
end

def test_costpercapita_bb6
  r = spreadsheet.costpercapita_bb6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6317.886642373382,r[:number],0.001)
end

def test_costpercapita_bc6
  r = spreadsheet.costpercapita_bc6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7501.186589086595,r[:number],0.001)
end

def test_costpercapita_bd6
  r = spreadsheet.costpercapita_bd6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8317.757456607951,r[:number],0.001)
end

def test_costpercapita_be6
  r = spreadsheet.costpercapita_be6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8730.793741253397,r[:number],0.001)
end

def test_costpercapita_bf6
  r = spreadsheet.costpercapita_bf6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8953.988774500225,r[:number],0.001)
end

def test_costpercapita_bg6
  r = spreadsheet.costpercapita_bg6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9163.038655537499,r[:number],0.001)
end

def test_costpercapita_bi6
  r = spreadsheet.costpercapita_bi6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1007.1260025107034,r[:number],0.001)
end

def test_costpercapita_bj6
  r = spreadsheet.costpercapita_bj6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1611.1214513405073,r[:number],0.001)
end

def test_costpercapita_bk6
  r = spreadsheet.costpercapita_bk6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3882.9281673922974,r[:number],0.001)
end

def test_costpercapita_bl6
  r = spreadsheet.costpercapita_bl6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6317.886642373382,r[:number],0.001)
end

def test_costpercapita_bm6
  r = spreadsheet.costpercapita_bm6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7501.186589086595,r[:number],0.001)
end

def test_costpercapita_bn6
  r = spreadsheet.costpercapita_bn6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8317.757456607951,r[:number],0.001)
end

def test_costpercapita_bo6
  r = spreadsheet.costpercapita_bo6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8730.793741253397,r[:number],0.001)
end

def test_costpercapita_bp6
  r = spreadsheet.costpercapita_bp6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8953.988774500225,r[:number],0.001)
end

def test_costpercapita_bq6
  r = spreadsheet.costpercapita_bq6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9163.038655537499,r[:number],0.001)
end

def test_costpercapita_bs6
  r = spreadsheet.costpercapita_bs6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1020.5697134519219,r[:number],0.001)
end

def test_costpercapita_bt6
  r = spreadsheet.costpercapita_bt6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1643.7584479311536,r[:number],0.001)
end

def test_costpercapita_bu6
  r = spreadsheet.costpercapita_bu6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3936.3375620139427,r[:number],0.001)
end

def test_costpercapita_bv6
  r = spreadsheet.costpercapita_bv6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6381.545998031554,r[:number],0.001)
end

def test_costpercapita_bw6
  r = spreadsheet.costpercapita_bw6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7572.046841594065,r[:number],0.001)
end

def test_costpercapita_bx6
  r = spreadsheet.costpercapita_bx6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8392.544680696958,r[:number],0.001)
end

def test_costpercapita_by6
  r = spreadsheet.costpercapita_by6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8807.985852713515,r[:number],0.001)
end

def test_costpercapita_bz6
  r = spreadsheet.costpercapita_bz6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9033.503398162435,r[:number],0.001)
end

def test_costpercapita_ca6
  r = spreadsheet.costpercapita_ca6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9243.934120690239,r[:number],0.001)
end

def test_costpercapita_cc6
  r = spreadsheet.costpercapita_cc6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6225.802957253976,r[:number],0.001)
end

def test_costpercapita_cd6
  r = spreadsheet.costpercapita_cd6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119547.183745379,r[:number],0.001)
end

def test_costpercapita_cf6
  r = spreadsheet.costpercapita_cf6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-671.4173350071355,r[:number],0.001)
end

def test_costpercapita_cg6
  r = spreadsheet.costpercapita_cg6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch6
  r = spreadsheet.costpercapita_ch6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci6
  r = spreadsheet.costpercapita_ci6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj6
  r = spreadsheet.costpercapita_cj6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck6
  r = spreadsheet.costpercapita_ck6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl6
  r = spreadsheet.costpercapita_cl6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm6
  r = spreadsheet.costpercapita_cm6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn6
  r = spreadsheet.costpercapita_cn6
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp6
  r = spreadsheet.costpercapita_cp6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-74.60192611190395,r[:number],0.001)
end

def test_costpercapita_cq6
  r = spreadsheet.costpercapita_cq6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-671.4173350071355,r[:number],0.001)
end

def test_costpercapita_cr6
  r = spreadsheet.costpercapita_cr6
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a7
  r = spreadsheet.costpercapita_a7
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b7
  r = spreadsheet.costpercapita_b7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c7
  r = spreadsheet.costpercapita_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e7
  r = spreadsheet.costpercapita_e7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.9641783201462,r[:number],0.001)
end

def test_costpercapita_f7
  r = spreadsheet.costpercapita_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.97540102942683,r[:number],0.001)
end

def test_costpercapita_g7
  r = spreadsheet.costpercapita_g7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(298.7735088150286,r[:number],0.001)
end

def test_costpercapita_h7
  r = spreadsheet.costpercapita_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(795.7641991486117,r[:number],0.001)
end

def test_costpercapita_i7
  r = spreadsheet.costpercapita_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1134.1495933906135,r[:number],0.001)
end

def test_costpercapita_j7
  r = spreadsheet.costpercapita_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1337.6407612580447,r[:number],0.001)
end

def test_costpercapita_k7
  r = spreadsheet.costpercapita_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1531.3018636561187,r[:number],0.001)
end

def test_costpercapita_l7
  r = spreadsheet.costpercapita_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1653.7259718697317,r[:number],0.001)
end

def test_costpercapita_m7
  r = spreadsheet.costpercapita_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1507.1785744627834,r[:number],0.001)
end

def test_costpercapita_o7
  r = spreadsheet.costpercapita_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7232121845245996,r[:number],0.001)
end

def test_costpercapita_p7
  r = spreadsheet.costpercapita_p7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.662428084378012,r[:number],0.001)
end

def test_costpercapita_q7
  r = spreadsheet.costpercapita_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.452960490939288,r[:number],0.001)
end

def test_costpercapita_r7
  r = spreadsheet.costpercapita_r7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.883672166608694,r[:number],0.001)
end

def test_costpercapita_s7
  r = spreadsheet.costpercapita_s7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.059949494810972,r[:number],0.001)
end

def test_costpercapita_t7
  r = spreadsheet.costpercapita_t7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.4514635001464,r[:number],0.001)
end

def test_costpercapita_u7
  r = spreadsheet.costpercapita_u7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.966072163353864,r[:number],0.001)
end

def test_costpercapita_v7
  r = spreadsheet.costpercapita_v7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.8811432616789,r[:number],0.001)
end

def test_costpercapita_w7
  r = spreadsheet.costpercapita_w7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.62665122284301,r[:number],0.001)
end

def test_costpercapita_y7
  r = spreadsheet.costpercapita_y7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z7
  r = spreadsheet.costpercapita_z7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa7
  r = spreadsheet.costpercapita_aa7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab7
  r = spreadsheet.costpercapita_ab7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac7
  r = spreadsheet.costpercapita_ac7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad7
  r = spreadsheet.costpercapita_ad7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae7
  r = spreadsheet.costpercapita_ae7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af7
  r = spreadsheet.costpercapita_af7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag7
  r = spreadsheet.costpercapita_ag7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai7
  r = spreadsheet.costpercapita_ai7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.6873905046708,r[:number],0.001)
end

def test_costpercapita_aj7
  r = spreadsheet.costpercapita_aj7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.63782911380484,r[:number],0.001)
end

def test_costpercapita_ak7
  r = spreadsheet.costpercapita_ak7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.22646930596795,r[:number],0.001)
end

def test_costpercapita_al7
  r = spreadsheet.costpercapita_al7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(816.6478713152204,r[:number],0.001)
end

def test_costpercapita_am7
  r = spreadsheet.costpercapita_am7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1161.2095428854243,r[:number],0.001)
end

def test_costpercapita_an7
  r = spreadsheet.costpercapita_an7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.0922247581912,r[:number],0.001)
end

def test_costpercapita_ao7
  r = spreadsheet.costpercapita_ao7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1573.2679358194725,r[:number],0.001)
end

def test_costpercapita_ap7
  r = spreadsheet.costpercapita_ap7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1697.6071151314106,r[:number],0.001)
end

def test_costpercapita_aq7
  r = spreadsheet.costpercapita_aq7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1555.8052256856265,r[:number],0.001)
end

def test_costpercapita_as7
  r = spreadsheet.costpercapita_as7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(953.4646227244211,r[:number],0.001)
end

def test_costpercapita_at7
  r = spreadsheet.costpercapita_at7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17106.05476251213,r[:number],0.001)
end

def test_costpercapita_av7
  r = spreadsheet.costpercapita_av7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw7
  r = spreadsheet.costpercapita_aw7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay7
  r = spreadsheet.costpercapita_ay7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.178506992087723,r[:number],0.001)
end

def test_costpercapita_az7
  r = spreadsheet.costpercapita_az7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.97540102942683,r[:number],0.001)
end

def test_costpercapita_ba7
  r = spreadsheet.costpercapita_ba7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(298.7735088150286,r[:number],0.001)
end

def test_costpercapita_bb7
  r = spreadsheet.costpercapita_bb7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(795.7641991486117,r[:number],0.001)
end

def test_costpercapita_bc7
  r = spreadsheet.costpercapita_bc7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1134.1495933906135,r[:number],0.001)
end

def test_costpercapita_bd7
  r = spreadsheet.costpercapita_bd7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1337.6407612580447,r[:number],0.001)
end

def test_costpercapita_be7
  r = spreadsheet.costpercapita_be7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1531.3018636561187,r[:number],0.001)
end

def test_costpercapita_bf7
  r = spreadsheet.costpercapita_bf7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1653.7259718697317,r[:number],0.001)
end

def test_costpercapita_bg7
  r = spreadsheet.costpercapita_bg7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1507.1785744627834,r[:number],0.001)
end

def test_costpercapita_bi7
  r = spreadsheet.costpercapita_bi7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.178506992087723,r[:number],0.001)
end

def test_costpercapita_bj7
  r = spreadsheet.costpercapita_bj7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.97540102942683,r[:number],0.001)
end

def test_costpercapita_bk7
  r = spreadsheet.costpercapita_bk7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(298.7735088150286,r[:number],0.001)
end

def test_costpercapita_bl7
  r = spreadsheet.costpercapita_bl7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(795.7641991486117,r[:number],0.001)
end

def test_costpercapita_bm7
  r = spreadsheet.costpercapita_bm7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1134.1495933906135,r[:number],0.001)
end

def test_costpercapita_bn7
  r = spreadsheet.costpercapita_bn7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1337.6407612580447,r[:number],0.001)
end

def test_costpercapita_bo7
  r = spreadsheet.costpercapita_bo7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1531.3018636561187,r[:number],0.001)
end

def test_costpercapita_bp7
  r = spreadsheet.costpercapita_bp7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1653.7259718697317,r[:number],0.001)
end

def test_costpercapita_bq7
  r = spreadsheet.costpercapita_bq7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1507.1785744627834,r[:number],0.001)
end

def test_costpercapita_bs7
  r = spreadsheet.costpercapita_bs7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.90171917661232,r[:number],0.001)
end

def test_costpercapita_bt7
  r = spreadsheet.costpercapita_bt7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.63782911380484,r[:number],0.001)
end

def test_costpercapita_bu7
  r = spreadsheet.costpercapita_bu7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.22646930596795,r[:number],0.001)
end

def test_costpercapita_bv7
  r = spreadsheet.costpercapita_bv7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(816.6478713152204,r[:number],0.001)
end

def test_costpercapita_bw7
  r = spreadsheet.costpercapita_bw7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1161.2095428854243,r[:number],0.001)
end

def test_costpercapita_bx7
  r = spreadsheet.costpercapita_bx7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.0922247581912,r[:number],0.001)
end

def test_costpercapita_by7
  r = spreadsheet.costpercapita_by7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1573.2679358194725,r[:number],0.001)
end

def test_costpercapita_bz7
  r = spreadsheet.costpercapita_bz7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1697.6071151314104,r[:number],0.001)
end

def test_costpercapita_ca7
  r = spreadsheet.costpercapita_ca7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1555.8052256856265,r[:number],0.001)
end

def test_costpercapita_cc7
  r = spreadsheet.costpercapita_cc7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(951.8217703546367,r[:number],0.001)
end

def test_costpercapita_cd7
  r = spreadsheet.costpercapita_cd7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17091.26909118407,r[:number],0.001)
end

def test_costpercapita_cf7
  r = spreadsheet.costpercapita_cf7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.78567132805848,r[:number],0.001)
end

def test_costpercapita_cg7
  r = spreadsheet.costpercapita_cg7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch7
  r = spreadsheet.costpercapita_ch7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci7
  r = spreadsheet.costpercapita_ci7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj7
  r = spreadsheet.costpercapita_cj7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck7
  r = spreadsheet.costpercapita_ck7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl7
  r = spreadsheet.costpercapita_cl7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm7
  r = spreadsheet.costpercapita_cm7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn7
  r = spreadsheet.costpercapita_cn7
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp7
  r = spreadsheet.costpercapita_cp7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.6428523697842756,r[:number],0.001)
end

def test_costpercapita_cq7
  r = spreadsheet.costpercapita_cq7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.78567132805848,r[:number],0.001)
end

def test_costpercapita_cr7
  r = spreadsheet.costpercapita_cr7
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a8
  r = spreadsheet.costpercapita_a8
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b8
  r = spreadsheet.costpercapita_b8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c8
  r = spreadsheet.costpercapita_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e8
  r = spreadsheet.costpercapita_e8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f8
  r = spreadsheet.costpercapita_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.4950197209404,r[:number],0.001)
end

def test_costpercapita_g8
  r = spreadsheet.costpercapita_g8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.2853390606143,r[:number],0.001)
end

def test_costpercapita_h8
  r = spreadsheet.costpercapita_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.80671915696604,r[:number],0.001)
end

def test_costpercapita_i8
  r = spreadsheet.costpercapita_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(224.07809142492079,r[:number],0.001)
end

def test_costpercapita_j8
  r = spreadsheet.costpercapita_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.1391845347322,r[:number],0.001)
end

def test_costpercapita_k8
  r = spreadsheet.costpercapita_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.37403379313463,r[:number],0.001)
end

def test_costpercapita_l8
  r = spreadsheet.costpercapita_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.95093208376522,r[:number],0.001)
end

def test_costpercapita_m8
  r = spreadsheet.costpercapita_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.70182668714607,r[:number],0.001)
end

def test_costpercapita_o8
  r = spreadsheet.costpercapita_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.83881551472706,r[:number],0.001)
end

def test_costpercapita_p8
  r = spreadsheet.costpercapita_p8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.97586722860171,r[:number],0.001)
end

def test_costpercapita_q8
  r = spreadsheet.costpercapita_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.0509078247703,r[:number],0.001)
end

def test_costpercapita_r8
  r = spreadsheet.costpercapita_r8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.35006874968428,r[:number],0.001)
end

def test_costpercapita_s8
  r = spreadsheet.costpercapita_s8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.82765466602666,r[:number],0.001)
end

def test_costpercapita_t8
  r = spreadsheet.costpercapita_t8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.52844734630526,r[:number],0.001)
end

def test_costpercapita_u8
  r = spreadsheet.costpercapita_u8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.60917519579365,r[:number],0.001)
end

def test_costpercapita_v8
  r = spreadsheet.costpercapita_v8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.7891161393624,r[:number],0.001)
end

def test_costpercapita_w8
  r = spreadsheet.costpercapita_w8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.25673671006916,r[:number],0.001)
end

def test_costpercapita_y8
  r = spreadsheet.costpercapita_y8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z8
  r = spreadsheet.costpercapita_z8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa8
  r = spreadsheet.costpercapita_aa8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab8
  r = spreadsheet.costpercapita_ab8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac8
  r = spreadsheet.costpercapita_ac8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad8
  r = spreadsheet.costpercapita_ad8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae8
  r = spreadsheet.costpercapita_ae8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af8
  r = spreadsheet.costpercapita_af8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag8
  r = spreadsheet.costpercapita_ag8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai8
  r = spreadsheet.costpercapita_ai8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.83881551472706,r[:number],0.001)
end

def test_costpercapita_aj8
  r = spreadsheet.costpercapita_aj8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(579.4708869495421,r[:number],0.001)
end

def test_costpercapita_ak8
  r = spreadsheet.costpercapita_ak8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(579.3362468853846,r[:number],0.001)
end

def test_costpercapita_al8
  r = spreadsheet.costpercapita_al8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(447.15678790665027,r[:number],0.001)
end

def test_costpercapita_am8
  r = spreadsheet.costpercapita_am8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.90574609094745,r[:number],0.001)
end

def test_costpercapita_an8
  r = spreadsheet.costpercapita_an8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(422.66763188103744,r[:number],0.001)
end

def test_costpercapita_ao8
  r = spreadsheet.costpercapita_ao8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.9832089889283,r[:number],0.001)
end

def test_costpercapita_ap8
  r = spreadsheet.costpercapita_ap8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(298.7400482231276,r[:number],0.001)
end

def test_costpercapita_aq8
  r = spreadsheet.costpercapita_aq8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(277.95856339721524,r[:number],0.001)
end

def test_costpercapita_as8
  r = spreadsheet.costpercapita_as8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.78421509306213,r[:number],0.001)
end

def test_costpercapita_at8
  r = spreadsheet.costpercapita_at8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9389.817387582389,r[:number],0.001)
end

def test_costpercapita_av8
  r = spreadsheet.costpercapita_av8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw8
  r = spreadsheet.costpercapita_aw8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay8
  r = spreadsheet.costpercapita_ay8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az8
  r = spreadsheet.costpercapita_az8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.4950197209404,r[:number],0.001)
end

def test_costpercapita_ba8
  r = spreadsheet.costpercapita_ba8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.2853390606143,r[:number],0.001)
end

def test_costpercapita_bb8
  r = spreadsheet.costpercapita_bb8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.80671915696604,r[:number],0.001)
end

def test_costpercapita_bc8
  r = spreadsheet.costpercapita_bc8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(224.07809142492079,r[:number],0.001)
end

def test_costpercapita_bd8
  r = spreadsheet.costpercapita_bd8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.1391845347322,r[:number],0.001)
end

def test_costpercapita_be8
  r = spreadsheet.costpercapita_be8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.37403379313463,r[:number],0.001)
end

def test_costpercapita_bf8
  r = spreadsheet.costpercapita_bf8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.95093208376521,r[:number],0.001)
end

def test_costpercapita_bg8
  r = spreadsheet.costpercapita_bg8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.70182668714607,r[:number],0.001)
end

def test_costpercapita_bi8
  r = spreadsheet.costpercapita_bi8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj8
  r = spreadsheet.costpercapita_bj8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.4950197209404,r[:number],0.001)
end

def test_costpercapita_bk8
  r = spreadsheet.costpercapita_bk8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.2853390606143,r[:number],0.001)
end

def test_costpercapita_bl8
  r = spreadsheet.costpercapita_bl8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.80671915696604,r[:number],0.001)
end

def test_costpercapita_bm8
  r = spreadsheet.costpercapita_bm8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(224.07809142492079,r[:number],0.001)
end

def test_costpercapita_bn8
  r = spreadsheet.costpercapita_bn8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.1391845347322,r[:number],0.001)
end

def test_costpercapita_bo8
  r = spreadsheet.costpercapita_bo8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.37403379313463,r[:number],0.001)
end

def test_costpercapita_bp8
  r = spreadsheet.costpercapita_bp8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.95093208376521,r[:number],0.001)
end

def test_costpercapita_bq8
  r = spreadsheet.costpercapita_bq8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.70182668714607,r[:number],0.001)
end

def test_costpercapita_bs8
  r = spreadsheet.costpercapita_bs8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.83881551472706,r[:number],0.001)
end

def test_costpercapita_bt8
  r = spreadsheet.costpercapita_bt8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(579.4708869495421,r[:number],0.001)
end

def test_costpercapita_bu8
  r = spreadsheet.costpercapita_bu8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(579.3362468853846,r[:number],0.001)
end

def test_costpercapita_bv8
  r = spreadsheet.costpercapita_bv8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(447.15678790665027,r[:number],0.001)
end

def test_costpercapita_bw8
  r = spreadsheet.costpercapita_bw8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.90574609094745,r[:number],0.001)
end

def test_costpercapita_bx8
  r = spreadsheet.costpercapita_bx8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(422.66763188103744,r[:number],0.001)
end

def test_costpercapita_by8
  r = spreadsheet.costpercapita_by8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.9832089889283,r[:number],0.001)
end

def test_costpercapita_bz8
  r = spreadsheet.costpercapita_bz8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(298.7400482231276,r[:number],0.001)
end

def test_costpercapita_ca8
  r = spreadsheet.costpercapita_ca8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(277.95856339721524,r[:number],0.001)
end

def test_costpercapita_cc8
  r = spreadsheet.costpercapita_cc8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.78421509306213,r[:number],0.001)
end

def test_costpercapita_cd8
  r = spreadsheet.costpercapita_cd8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9389.817387582389,r[:number],0.001)
end

def test_costpercapita_cf8
  r = spreadsheet.costpercapita_cf8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg8
  r = spreadsheet.costpercapita_cg8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch8
  r = spreadsheet.costpercapita_ch8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci8
  r = spreadsheet.costpercapita_ci8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj8
  r = spreadsheet.costpercapita_cj8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck8
  r = spreadsheet.costpercapita_ck8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl8
  r = spreadsheet.costpercapita_cl8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm8
  r = spreadsheet.costpercapita_cm8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn8
  r = spreadsheet.costpercapita_cn8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp8
  r = spreadsheet.costpercapita_cp8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq8
  r = spreadsheet.costpercapita_cq8
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr8
  r = spreadsheet.costpercapita_cr8
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a9
  r = spreadsheet.costpercapita_a9
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b9
  r = spreadsheet.costpercapita_b9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave and Tidal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c9
  r = spreadsheet.costpercapita_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e9
  r = spreadsheet.costpercapita_e9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f9
  r = spreadsheet.costpercapita_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7385286085654773,r[:number],0.001)
end

def test_costpercapita_g9
  r = spreadsheet.costpercapita_g9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.638197634779216,r[:number],0.001)
end

def test_costpercapita_h9
  r = spreadsheet.costpercapita_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.187527847979336,r[:number],0.001)
end

def test_costpercapita_i9
  r = spreadsheet.costpercapita_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.215555678706988,r[:number],0.001)
end

def test_costpercapita_j9
  r = spreadsheet.costpercapita_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.42528325590575,r[:number],0.001)
end

def test_costpercapita_k9
  r = spreadsheet.costpercapita_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.19011415584784,r[:number],0.001)
end

def test_costpercapita_l9
  r = spreadsheet.costpercapita_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.630546496223154,r[:number],0.001)
end

def test_costpercapita_m9
  r = spreadsheet.costpercapita_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.266289731795098,r[:number],0.001)
end

def test_costpercapita_o9
  r = spreadsheet.costpercapita_o9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p9
  r = spreadsheet.costpercapita_p9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.031082853895853416,r[:number],0.001)
end

def test_costpercapita_q9
  r = spreadsheet.costpercapita_q9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2940258221746753,r[:number],0.001)
end

def test_costpercapita_r9
  r = spreadsheet.costpercapita_r9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5057829344700305,r[:number],0.001)
end

def test_costpercapita_s9
  r = spreadsheet.costpercapita_s9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.712710983130714,r[:number],0.001)
end

def test_costpercapita_t9
  r = spreadsheet.costpercapita_t9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.809745645201629,r[:number],0.001)
end

def test_costpercapita_u9
  r = spreadsheet.costpercapita_u9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.672447067723161,r[:number],0.001)
end

def test_costpercapita_v9
  r = spreadsheet.costpercapita_v9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.318661350009782,r[:number],0.001)
end

def test_costpercapita_w9
  r = spreadsheet.costpercapita_w9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.87312179006081,r[:number],0.001)
end

def test_costpercapita_y9
  r = spreadsheet.costpercapita_y9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z9
  r = spreadsheet.costpercapita_z9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa9
  r = spreadsheet.costpercapita_aa9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab9
  r = spreadsheet.costpercapita_ab9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac9
  r = spreadsheet.costpercapita_ac9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad9
  r = spreadsheet.costpercapita_ad9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae9
  r = spreadsheet.costpercapita_ae9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af9
  r = spreadsheet.costpercapita_af9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag9
  r = spreadsheet.costpercapita_ag9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai9
  r = spreadsheet.costpercapita_ai9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj9
  r = spreadsheet.costpercapita_aj9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7696114624613307,r[:number],0.001)
end

def test_costpercapita_ak9
  r = spreadsheet.costpercapita_ak9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.932223456953891,r[:number],0.001)
end

def test_costpercapita_al9
  r = spreadsheet.costpercapita_al9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.693310782449366,r[:number],0.001)
end

def test_costpercapita_am9
  r = spreadsheet.costpercapita_am9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.9282666618377,r[:number],0.001)
end

def test_costpercapita_an9
  r = spreadsheet.costpercapita_an9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.23502890110738,r[:number],0.001)
end

def test_costpercapita_ao9
  r = spreadsheet.costpercapita_ao9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.862561223571,r[:number],0.001)
end

def test_costpercapita_ap9
  r = spreadsheet.costpercapita_ap9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.94920784623294,r[:number],0.001)
end

def test_costpercapita_aq9
  r = spreadsheet.costpercapita_aq9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.139411521855905,r[:number],0.001)
end

def test_costpercapita_as9
  r = spreadsheet.costpercapita_as9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.167735761829945,r[:number],0.001)
end

def test_costpercapita_at9
  r = spreadsheet.costpercapita_at9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.3287229045193,r[:number],0.001)
end

def test_costpercapita_av9
  r = spreadsheet.costpercapita_av9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw9
  r = spreadsheet.costpercapita_aw9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay9
  r = spreadsheet.costpercapita_ay9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az9
  r = spreadsheet.costpercapita_az9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7385286085654773,r[:number],0.001)
end

def test_costpercapita_ba9
  r = spreadsheet.costpercapita_ba9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.638197634779216,r[:number],0.001)
end

def test_costpercapita_bb9
  r = spreadsheet.costpercapita_bb9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.187527847979336,r[:number],0.001)
end

def test_costpercapita_bc9
  r = spreadsheet.costpercapita_bc9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.215555678706988,r[:number],0.001)
end

def test_costpercapita_bd9
  r = spreadsheet.costpercapita_bd9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.42528325590575,r[:number],0.001)
end

def test_costpercapita_be9
  r = spreadsheet.costpercapita_be9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.19011415584784,r[:number],0.001)
end

def test_costpercapita_bf9
  r = spreadsheet.costpercapita_bf9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.630546496223154,r[:number],0.001)
end

def test_costpercapita_bg9
  r = spreadsheet.costpercapita_bg9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.266289731795094,r[:number],0.001)
end

def test_costpercapita_bi9
  r = spreadsheet.costpercapita_bi9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj9
  r = spreadsheet.costpercapita_bj9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7385286085654773,r[:number],0.001)
end

def test_costpercapita_bk9
  r = spreadsheet.costpercapita_bk9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.638197634779216,r[:number],0.001)
end

def test_costpercapita_bl9
  r = spreadsheet.costpercapita_bl9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.187527847979336,r[:number],0.001)
end

def test_costpercapita_bm9
  r = spreadsheet.costpercapita_bm9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.215555678706988,r[:number],0.001)
end

def test_costpercapita_bn9
  r = spreadsheet.costpercapita_bn9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.42528325590575,r[:number],0.001)
end

def test_costpercapita_bo9
  r = spreadsheet.costpercapita_bo9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.19011415584784,r[:number],0.001)
end

def test_costpercapita_bp9
  r = spreadsheet.costpercapita_bp9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.630546496223154,r[:number],0.001)
end

def test_costpercapita_bq9
  r = spreadsheet.costpercapita_bq9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.266289731795094,r[:number],0.001)
end

def test_costpercapita_bs9
  r = spreadsheet.costpercapita_bs9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt9
  r = spreadsheet.costpercapita_bt9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7696114624613307,r[:number],0.001)
end

def test_costpercapita_bu9
  r = spreadsheet.costpercapita_bu9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.932223456953891,r[:number],0.001)
end

def test_costpercapita_bv9
  r = spreadsheet.costpercapita_bv9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.693310782449366,r[:number],0.001)
end

def test_costpercapita_bw9
  r = spreadsheet.costpercapita_bw9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.9282666618377,r[:number],0.001)
end

def test_costpercapita_bx9
  r = spreadsheet.costpercapita_bx9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.23502890110738,r[:number],0.001)
end

def test_costpercapita_by9
  r = spreadsheet.costpercapita_by9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.862561223571,r[:number],0.001)
end

def test_costpercapita_bz9
  r = spreadsheet.costpercapita_bz9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.94920784623294,r[:number],0.001)
end

def test_costpercapita_ca9
  r = spreadsheet.costpercapita_ca9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.139411521855905,r[:number],0.001)
end

def test_costpercapita_cc9
  r = spreadsheet.costpercapita_cc9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.167735761829945,r[:number],0.001)
end

def test_costpercapita_cd9
  r = spreadsheet.costpercapita_cd9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.3287229045193,r[:number],0.001)
end

def test_costpercapita_cf9
  r = spreadsheet.costpercapita_cf9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg9
  r = spreadsheet.costpercapita_cg9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch9
  r = spreadsheet.costpercapita_ch9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci9
  r = spreadsheet.costpercapita_ci9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj9
  r = spreadsheet.costpercapita_cj9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck9
  r = spreadsheet.costpercapita_ck9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl9
  r = spreadsheet.costpercapita_cl9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm9
  r = spreadsheet.costpercapita_cm9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn9
  r = spreadsheet.costpercapita_cn9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp9
  r = spreadsheet.costpercapita_cp9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq9
  r = spreadsheet.costpercapita_cq9
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr9
  r = spreadsheet.costpercapita_cr9
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a10
  r = spreadsheet.costpercapita_a10
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b10
  r = spreadsheet.costpercapita_b10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c10
  r = spreadsheet.costpercapita_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e10
  r = spreadsheet.costpercapita_e10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f10
  r = spreadsheet.costpercapita_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.74719826468218,r[:number],0.001)
end

def test_costpercapita_g10
  r = spreadsheet.costpercapita_g10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.59973921905718,r[:number],0.001)
end

def test_costpercapita_h10
  r = spreadsheet.costpercapita_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.79650922886458,r[:number],0.001)
end

def test_costpercapita_i10
  r = spreadsheet.costpercapita_i10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.395985889589234,r[:number],0.001)
end

def test_costpercapita_j10
  r = spreadsheet.costpercapita_j10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.49553653025091,r[:number],0.001)
end

def test_costpercapita_k10
  r = spreadsheet.costpercapita_k10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.84149729163016,r[:number],0.001)
end

def test_costpercapita_l10
  r = spreadsheet.costpercapita_l10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.66965985896476,r[:number],0.001)
end

def test_costpercapita_m10
  r = spreadsheet.costpercapita_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.08293983245497,r[:number],0.001)
end

def test_costpercapita_o10
  r = spreadsheet.costpercapita_o10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.402000787401281,r[:number],0.001)
end

def test_costpercapita_p10
  r = spreadsheet.costpercapita_p10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.923057167465192,r[:number],0.001)
end

def test_costpercapita_q10
  r = spreadsheet.costpercapita_q10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.13511340451138,r[:number],0.001)
end

def test_costpercapita_r10
  r = spreadsheet.costpercapita_r10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.878057774285395,r[:number],0.001)
end

def test_costpercapita_s10
  r = spreadsheet.costpercapita_s10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.35621347257778,r[:number],0.001)
end

def test_costpercapita_t10
  r = spreadsheet.costpercapita_t10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.7936579263617,r[:number],0.001)
end

def test_costpercapita_u10
  r = spreadsheet.costpercapita_u10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.641958602192965,r[:number],0.001)
end

def test_costpercapita_v10
  r = spreadsheet.costpercapita_v10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.047410485157364,r[:number],0.001)
end

def test_costpercapita_w10
  r = spreadsheet.costpercapita_w10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.58802835466253,r[:number],0.001)
end

def test_costpercapita_y10
  r = spreadsheet.costpercapita_y10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z10
  r = spreadsheet.costpercapita_z10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa10
  r = spreadsheet.costpercapita_aa10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab10
  r = spreadsheet.costpercapita_ab10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac10
  r = spreadsheet.costpercapita_ac10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad10
  r = spreadsheet.costpercapita_ad10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae10
  r = spreadsheet.costpercapita_ae10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af10
  r = spreadsheet.costpercapita_af10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag10
  r = spreadsheet.costpercapita_ag10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai10
  r = spreadsheet.costpercapita_ai10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.402000787401281,r[:number],0.001)
end

def test_costpercapita_aj10
  r = spreadsheet.costpercapita_aj10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.67025543214737,r[:number],0.001)
end

def test_costpercapita_ak10
  r = spreadsheet.costpercapita_ak10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.73485262356856,r[:number],0.001)
end

def test_costpercapita_al10
  r = spreadsheet.costpercapita_al10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.67456700314997,r[:number],0.001)
end

def test_costpercapita_am10
  r = spreadsheet.costpercapita_am10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.75219936216702,r[:number],0.001)
end

def test_costpercapita_an10
  r = spreadsheet.costpercapita_an10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.28919445661262,r[:number],0.001)
end

def test_costpercapita_ao10
  r = spreadsheet.costpercapita_ao10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.48345589382313,r[:number],0.001)
end

def test_costpercapita_ap10
  r = spreadsheet.costpercapita_ap10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.71707034412213,r[:number],0.001)
end

def test_costpercapita_aq10
  r = spreadsheet.costpercapita_aq10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.6709681871175,r[:number],0.001)
end

def test_costpercapita_as10
  r = spreadsheet.costpercapita_as10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.26606267667883,r[:number],0.001)
end

def test_costpercapita_at10
  r = spreadsheet.costpercapita_at10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2107.526120088194,r[:number],0.001)
end

def test_costpercapita_av10
  r = spreadsheet.costpercapita_av10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw10
  r = spreadsheet.costpercapita_aw10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay10
  r = spreadsheet.costpercapita_ay10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az10
  r = spreadsheet.costpercapita_az10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.74719826468218,r[:number],0.001)
end

def test_costpercapita_ba10
  r = spreadsheet.costpercapita_ba10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.59973921905718,r[:number],0.001)
end

def test_costpercapita_bb10
  r = spreadsheet.costpercapita_bb10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.79650922886458,r[:number],0.001)
end

def test_costpercapita_bc10
  r = spreadsheet.costpercapita_bc10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.395985889589234,r[:number],0.001)
end

def test_costpercapita_bd10
  r = spreadsheet.costpercapita_bd10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.49553653025091,r[:number],0.001)
end

def test_costpercapita_be10
  r = spreadsheet.costpercapita_be10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.84149729163016,r[:number],0.001)
end

def test_costpercapita_bf10
  r = spreadsheet.costpercapita_bf10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.66965985896476,r[:number],0.001)
end

def test_costpercapita_bg10
  r = spreadsheet.costpercapita_bg10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.08293983245497,r[:number],0.001)
end

def test_costpercapita_bi10
  r = spreadsheet.costpercapita_bi10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj10
  r = spreadsheet.costpercapita_bj10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.74719826468218,r[:number],0.001)
end

def test_costpercapita_bk10
  r = spreadsheet.costpercapita_bk10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.59973921905718,r[:number],0.001)
end

def test_costpercapita_bl10
  r = spreadsheet.costpercapita_bl10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.79650922886458,r[:number],0.001)
end

def test_costpercapita_bm10
  r = spreadsheet.costpercapita_bm10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.395985889589234,r[:number],0.001)
end

def test_costpercapita_bn10
  r = spreadsheet.costpercapita_bn10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.49553653025091,r[:number],0.001)
end

def test_costpercapita_bo10
  r = spreadsheet.costpercapita_bo10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.84149729163016,r[:number],0.001)
end

def test_costpercapita_bp10
  r = spreadsheet.costpercapita_bp10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.66965985896476,r[:number],0.001)
end

def test_costpercapita_bq10
  r = spreadsheet.costpercapita_bq10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.08293983245497,r[:number],0.001)
end

def test_costpercapita_bs10
  r = spreadsheet.costpercapita_bs10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.402000787401281,r[:number],0.001)
end

def test_costpercapita_bt10
  r = spreadsheet.costpercapita_bt10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.67025543214737,r[:number],0.001)
end

def test_costpercapita_bu10
  r = spreadsheet.costpercapita_bu10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.73485262356856,r[:number],0.001)
end

def test_costpercapita_bv10
  r = spreadsheet.costpercapita_bv10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.67456700314997,r[:number],0.001)
end

def test_costpercapita_bw10
  r = spreadsheet.costpercapita_bw10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.75219936216702,r[:number],0.001)
end

def test_costpercapita_bx10
  r = spreadsheet.costpercapita_bx10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.28919445661262,r[:number],0.001)
end

def test_costpercapita_by10
  r = spreadsheet.costpercapita_by10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.48345589382313,r[:number],0.001)
end

def test_costpercapita_bz10
  r = spreadsheet.costpercapita_bz10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.71707034412213,r[:number],0.001)
end

def test_costpercapita_ca10
  r = spreadsheet.costpercapita_ca10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.6709681871175,r[:number],0.001)
end

def test_costpercapita_cc10
  r = spreadsheet.costpercapita_cc10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.26606267667883,r[:number],0.001)
end

def test_costpercapita_cd10
  r = spreadsheet.costpercapita_cd10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2107.526120088194,r[:number],0.001)
end

def test_costpercapita_cf10
  r = spreadsheet.costpercapita_cf10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg10
  r = spreadsheet.costpercapita_cg10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch10
  r = spreadsheet.costpercapita_ch10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci10
  r = spreadsheet.costpercapita_ci10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj10
  r = spreadsheet.costpercapita_cj10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck10
  r = spreadsheet.costpercapita_ck10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl10
  r = spreadsheet.costpercapita_cl10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm10
  r = spreadsheet.costpercapita_cm10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn10
  r = spreadsheet.costpercapita_cn10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp10
  r = spreadsheet.costpercapita_cp10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq10
  r = spreadsheet.costpercapita_cq10
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr10
  r = spreadsheet.costpercapita_cr10
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a11
  r = spreadsheet.costpercapita_a11
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b11
  r = spreadsheet.costpercapita_b11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar PV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c11
  r = spreadsheet.costpercapita_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e11
  r = spreadsheet.costpercapita_e11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.49128637799473,r[:number],0.001)
end

def test_costpercapita_f11
  r = spreadsheet.costpercapita_f11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g11
  r = spreadsheet.costpercapita_g11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(857.8377150062491,r[:number],0.001)
end

def test_costpercapita_h11
  r = spreadsheet.costpercapita_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.7259177140037,r[:number],0.001)
end

def test_costpercapita_i11
  r = spreadsheet.costpercapita_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.45260306311917,r[:number],0.001)
end

def test_costpercapita_j11
  r = spreadsheet.costpercapita_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.88833271039819,r[:number],0.001)
end

def test_costpercapita_k11
  r = spreadsheet.costpercapita_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.840943672577744,r[:number],0.001)
end

def test_costpercapita_l11
  r = spreadsheet.costpercapita_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.903991871422672,r[:number],0.001)
end

def test_costpercapita_m11
  r = spreadsheet.costpercapita_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.13255622881674,r[:number],0.001)
end

def test_costpercapita_o11
  r = spreadsheet.costpercapita_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6428552751329775,r[:number],0.001)
end

def test_costpercapita_p11
  r = spreadsheet.costpercapita_p11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6216570779170684,r[:number],0.001)
end

def test_costpercapita_q11
  r = spreadsheet.costpercapita_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.877340502663345,r[:number],0.001)
end

def test_costpercapita_r11
  r = spreadsheet.costpercapita_r11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.497215207148228,r[:number],0.001)
end

def test_costpercapita_s11
  r = spreadsheet.costpercapita_s11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.118623798026162,r[:number],0.001)
end

def test_costpercapita_t11
  r = spreadsheet.costpercapita_t11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.497409759509964,r[:number],0.001)
end

def test_costpercapita_u11
  r = spreadsheet.costpercapita_u11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.677902281463716,r[:number],0.001)
end

def test_costpercapita_v11
  r = spreadsheet.costpercapita_v11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.820703050030176,r[:number],0.001)
end

def test_costpercapita_w11
  r = spreadsheet.costpercapita_w11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.954402980053498,r[:number],0.001)
end

def test_costpercapita_y11
  r = spreadsheet.costpercapita_y11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z11
  r = spreadsheet.costpercapita_z11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa11
  r = spreadsheet.costpercapita_aa11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab11
  r = spreadsheet.costpercapita_ab11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac11
  r = spreadsheet.costpercapita_ac11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad11
  r = spreadsheet.costpercapita_ad11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae11
  r = spreadsheet.costpercapita_ae11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af11
  r = spreadsheet.costpercapita_af11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag11
  r = spreadsheet.costpercapita_ag11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai11
  r = spreadsheet.costpercapita_ai11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.1341416531277,r[:number],0.001)
end

def test_costpercapita_aj11
  r = spreadsheet.costpercapita_aj11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6216570779170684,r[:number],0.001)
end

def test_costpercapita_ak11
  r = spreadsheet.costpercapita_ak11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(860.7150555089125,r[:number],0.001)
end

def test_costpercapita_al11
  r = spreadsheet.costpercapita_al11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.22313292115194,r[:number],0.001)
end

def test_costpercapita_am11
  r = spreadsheet.costpercapita_am11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.57122686114533,r[:number],0.001)
end

def test_costpercapita_an11
  r = spreadsheet.costpercapita_an11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.38574246990815,r[:number],0.001)
end

def test_costpercapita_ao11
  r = spreadsheet.costpercapita_ao11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.51884595404146,r[:number],0.001)
end

def test_costpercapita_ap11
  r = spreadsheet.costpercapita_ap11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.72469492145285,r[:number],0.001)
end

def test_costpercapita_aq11
  r = spreadsheet.costpercapita_aq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.086959208870237,r[:number],0.001)
end

def test_costpercapita_as11
  r = spreadsheet.costpercapita_as11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.4423840640586,r[:number],0.001)
end

def test_costpercapita_at11
  r = spreadsheet.costpercapita_at11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4908.428831546535,r[:number],0.001)
end

def test_costpercapita_av11
  r = spreadsheet.costpercapita_av11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw11
  r = spreadsheet.costpercapita_aw11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay11
  r = spreadsheet.costpercapita_ay11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.49477182679684,r[:number],0.001)
end

def test_costpercapita_az11
  r = spreadsheet.costpercapita_az11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba11
  r = spreadsheet.costpercapita_ba11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(857.8377150062491,r[:number],0.001)
end

def test_costpercapita_bb11
  r = spreadsheet.costpercapita_bb11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.7259177140037,r[:number],0.001)
end

def test_costpercapita_bc11
  r = spreadsheet.costpercapita_bc11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.45260306311917,r[:number],0.001)
end

def test_costpercapita_bd11
  r = spreadsheet.costpercapita_bd11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.88833271039819,r[:number],0.001)
end

def test_costpercapita_be11
  r = spreadsheet.costpercapita_be11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.840943672577744,r[:number],0.001)
end

def test_costpercapita_bf11
  r = spreadsheet.costpercapita_bf11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.903991871422672,r[:number],0.001)
end

def test_costpercapita_bg11
  r = spreadsheet.costpercapita_bg11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.13255622881674,r[:number],0.001)
end

def test_costpercapita_bi11
  r = spreadsheet.costpercapita_bi11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.49477182679684,r[:number],0.001)
end

def test_costpercapita_bj11
  r = spreadsheet.costpercapita_bj11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk11
  r = spreadsheet.costpercapita_bk11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(857.8377150062491,r[:number],0.001)
end

def test_costpercapita_bl11
  r = spreadsheet.costpercapita_bl11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.7259177140037,r[:number],0.001)
end

def test_costpercapita_bm11
  r = spreadsheet.costpercapita_bm11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.45260306311917,r[:number],0.001)
end

def test_costpercapita_bn11
  r = spreadsheet.costpercapita_bn11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.88833271039819,r[:number],0.001)
end

def test_costpercapita_bo11
  r = spreadsheet.costpercapita_bo11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.840943672577744,r[:number],0.001)
end

def test_costpercapita_bp11
  r = spreadsheet.costpercapita_bp11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.903991871422672,r[:number],0.001)
end

def test_costpercapita_bq11
  r = spreadsheet.costpercapita_bq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.13255622881674,r[:number],0.001)
end

def test_costpercapita_bs11
  r = spreadsheet.costpercapita_bs11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.13762710192984,r[:number],0.001)
end

def test_costpercapita_bt11
  r = spreadsheet.costpercapita_bt11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6216570779170684,r[:number],0.001)
end

def test_costpercapita_bu11
  r = spreadsheet.costpercapita_bu11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(860.7150555089125,r[:number],0.001)
end

def test_costpercapita_bv11
  r = spreadsheet.costpercapita_bv11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.22313292115194,r[:number],0.001)
end

def test_costpercapita_bw11
  r = spreadsheet.costpercapita_bw11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.57122686114533,r[:number],0.001)
end

def test_costpercapita_bx11
  r = spreadsheet.costpercapita_bx11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.38574246990815,r[:number],0.001)
end

def test_costpercapita_by11
  r = spreadsheet.costpercapita_by11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.51884595404146,r[:number],0.001)
end

def test_costpercapita_bz11
  r = spreadsheet.costpercapita_bz11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.72469492145285,r[:number],0.001)
end

def test_costpercapita_ca11
  r = spreadsheet.costpercapita_ca11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.086959208870237,r[:number],0.001)
end

def test_costpercapita_cc11
  r = spreadsheet.costpercapita_cc11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.33166022503656,r[:number],0.001)
end

def test_costpercapita_cd11
  r = spreadsheet.costpercapita_cd11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4817.432316995337,r[:number],0.001)
end

def test_costpercapita_cf11
  r = spreadsheet.costpercapita_cf11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-90.99651455119788,r[:number],0.001)
end

def test_costpercapita_cg11
  r = spreadsheet.costpercapita_cg11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch11
  r = spreadsheet.costpercapita_ch11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci11
  r = spreadsheet.costpercapita_ci11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj11
  r = spreadsheet.costpercapita_cj11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck11
  r = spreadsheet.costpercapita_ck11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl11
  r = spreadsheet.costpercapita_cl11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm11
  r = spreadsheet.costpercapita_cm11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn11
  r = spreadsheet.costpercapita_cn11
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp11
  r = spreadsheet.costpercapita_cp11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-10.110723839021986,r[:number],0.001)
end

def test_costpercapita_cq11
  r = spreadsheet.costpercapita_cq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-90.99651455119788,r[:number],0.001)
end

def test_costpercapita_cr11
  r = spreadsheet.costpercapita_cr11
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a12
  r = spreadsheet.costpercapita_a12
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b12
  r = spreadsheet.costpercapita_b12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar thermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c12
  r = spreadsheet.costpercapita_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e12
  r = spreadsheet.costpercapita_e12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.155893723148,r[:number],0.001)
end

def test_costpercapita_f12
  r = spreadsheet.costpercapita_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.8516792015709,r[:number],0.001)
end

def test_costpercapita_g12
  r = spreadsheet.costpercapita_g12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.90416524958567,r[:number],0.001)
end

def test_costpercapita_h12
  r = spreadsheet.costpercapita_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.60996969703282,r[:number],0.001)
end

def test_costpercapita_i12
  r = spreadsheet.costpercapita_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.3200329365198,r[:number],0.001)
end

def test_costpercapita_j12
  r = spreadsheet.costpercapita_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.53134289271037,r[:number],0.001)
end

def test_costpercapita_k12
  r = spreadsheet.costpercapita_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.2747810049039,r[:number],0.001)
end

def test_costpercapita_l12
  r = spreadsheet.costpercapita_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.23789044969635,r[:number],0.001)
end

def test_costpercapita_m12
  r = spreadsheet.costpercapita_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.40882031060683,r[:number],0.001)
end

def test_costpercapita_o12
  r = spreadsheet.costpercapita_o12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p12
  r = spreadsheet.costpercapita_p12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q12
  r = spreadsheet.costpercapita_q12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r12
  r = spreadsheet.costpercapita_r12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s12
  r = spreadsheet.costpercapita_s12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t12
  r = spreadsheet.costpercapita_t12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u12
  r = spreadsheet.costpercapita_u12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v12
  r = spreadsheet.costpercapita_v12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w12
  r = spreadsheet.costpercapita_w12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y12
  r = spreadsheet.costpercapita_y12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z12
  r = spreadsheet.costpercapita_z12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa12
  r = spreadsheet.costpercapita_aa12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab12
  r = spreadsheet.costpercapita_ab12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac12
  r = spreadsheet.costpercapita_ac12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad12
  r = spreadsheet.costpercapita_ad12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae12
  r = spreadsheet.costpercapita_ae12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af12
  r = spreadsheet.costpercapita_af12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag12
  r = spreadsheet.costpercapita_ag12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai12
  r = spreadsheet.costpercapita_ai12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.155893723148,r[:number],0.001)
end

def test_costpercapita_aj12
  r = spreadsheet.costpercapita_aj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.8516792015709,r[:number],0.001)
end

def test_costpercapita_ak12
  r = spreadsheet.costpercapita_ak12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.90416524958567,r[:number],0.001)
end

def test_costpercapita_al12
  r = spreadsheet.costpercapita_al12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.60996969703282,r[:number],0.001)
end

def test_costpercapita_am12
  r = spreadsheet.costpercapita_am12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.3200329365198,r[:number],0.001)
end

def test_costpercapita_an12
  r = spreadsheet.costpercapita_an12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.53134289271037,r[:number],0.001)
end

def test_costpercapita_ao12
  r = spreadsheet.costpercapita_ao12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.2747810049039,r[:number],0.001)
end

def test_costpercapita_ap12
  r = spreadsheet.costpercapita_ap12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.23789044969635,r[:number],0.001)
end

def test_costpercapita_aq12
  r = spreadsheet.costpercapita_aq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.40882031060683,r[:number],0.001)
end

def test_costpercapita_as12
  r = spreadsheet.costpercapita_as12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.47717505175274,r[:number],0.001)
end

def test_costpercapita_at12
  r = spreadsheet.costpercapita_at12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3917.0935374499663,r[:number],0.001)
end

def test_costpercapita_av12
  r = spreadsheet.costpercapita_av12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw12
  r = spreadsheet.costpercapita_aw12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay12
  r = spreadsheet.costpercapita_ay12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.89353623388882,r[:number],0.001)
end

def test_costpercapita_az12
  r = spreadsheet.costpercapita_az12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.8516792015709,r[:number],0.001)
end

def test_costpercapita_ba12
  r = spreadsheet.costpercapita_ba12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.90416524958567,r[:number],0.001)
end

def test_costpercapita_bb12
  r = spreadsheet.costpercapita_bb12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.60996969703282,r[:number],0.001)
end

def test_costpercapita_bc12
  r = spreadsheet.costpercapita_bc12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.3200329365198,r[:number],0.001)
end

def test_costpercapita_bd12
  r = spreadsheet.costpercapita_bd12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.53134289271037,r[:number],0.001)
end

def test_costpercapita_be12
  r = spreadsheet.costpercapita_be12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.2747810049039,r[:number],0.001)
end

def test_costpercapita_bf12
  r = spreadsheet.costpercapita_bf12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.23789044969635,r[:number],0.001)
end

def test_costpercapita_bg12
  r = spreadsheet.costpercapita_bg12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.40882031060683,r[:number],0.001)
end

def test_costpercapita_bi12
  r = spreadsheet.costpercapita_bi12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.89353623388882,r[:number],0.001)
end

def test_costpercapita_bj12
  r = spreadsheet.costpercapita_bj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.8516792015709,r[:number],0.001)
end

def test_costpercapita_bk12
  r = spreadsheet.costpercapita_bk12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.90416524958567,r[:number],0.001)
end

def test_costpercapita_bl12
  r = spreadsheet.costpercapita_bl12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.60996969703282,r[:number],0.001)
end

def test_costpercapita_bm12
  r = spreadsheet.costpercapita_bm12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.3200329365198,r[:number],0.001)
end

def test_costpercapita_bn12
  r = spreadsheet.costpercapita_bn12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.53134289271037,r[:number],0.001)
end

def test_costpercapita_bo12
  r = spreadsheet.costpercapita_bo12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.2747810049039,r[:number],0.001)
end

def test_costpercapita_bp12
  r = spreadsheet.costpercapita_bp12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.23789044969635,r[:number],0.001)
end

def test_costpercapita_bq12
  r = spreadsheet.costpercapita_bq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.40882031060683,r[:number],0.001)
end

def test_costpercapita_bs12
  r = spreadsheet.costpercapita_bs12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.89353623388882,r[:number],0.001)
end

def test_costpercapita_bt12
  r = spreadsheet.costpercapita_bt12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.8516792015709,r[:number],0.001)
end

def test_costpercapita_bu12
  r = spreadsheet.costpercapita_bu12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.90416524958567,r[:number],0.001)
end

def test_costpercapita_bv12
  r = spreadsheet.costpercapita_bv12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.60996969703282,r[:number],0.001)
end

def test_costpercapita_bw12
  r = spreadsheet.costpercapita_bw12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.3200329365198,r[:number],0.001)
end

def test_costpercapita_bx12
  r = spreadsheet.costpercapita_bx12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.53134289271037,r[:number],0.001)
end

def test_costpercapita_by12
  r = spreadsheet.costpercapita_by12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.2747810049039,r[:number],0.001)
end

def test_costpercapita_bz12
  r = spreadsheet.costpercapita_bz12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.23789044969635,r[:number],0.001)
end

def test_costpercapita_ca12
  r = spreadsheet.costpercapita_ca12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.40882031060683,r[:number],0.001)
end

def test_costpercapita_cc12
  r = spreadsheet.costpercapita_cc12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.55913533072396,r[:number],0.001)
end

def test_costpercapita_cd12
  r = spreadsheet.costpercapita_cd12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3845.8311799607072,r[:number],0.001)
end

def test_costpercapita_cf12
  r = spreadsheet.costpercapita_cf12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-71.26235748925919,r[:number],0.001)
end

def test_costpercapita_cg12
  r = spreadsheet.costpercapita_cg12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch12
  r = spreadsheet.costpercapita_ch12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci12
  r = spreadsheet.costpercapita_ci12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj12
  r = spreadsheet.costpercapita_cj12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck12
  r = spreadsheet.costpercapita_ck12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl12
  r = spreadsheet.costpercapita_cl12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm12
  r = spreadsheet.costpercapita_cm12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn12
  r = spreadsheet.costpercapita_cn12
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp12
  r = spreadsheet.costpercapita_cp12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.918039721028799,r[:number],0.001)
end

def test_costpercapita_cq12
  r = spreadsheet.costpercapita_cq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-71.26235748925919,r[:number],0.001)
end

def test_costpercapita_cr12
  r = spreadsheet.costpercapita_cr12
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a13
  r = spreadsheet.costpercapita_a13
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b13
  r = spreadsheet.costpercapita_b13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c13
  r = spreadsheet.costpercapita_c13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e13
  r = spreadsheet.costpercapita_e13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f13
  r = spreadsheet.costpercapita_f13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g13
  r = spreadsheet.costpercapita_g13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h13
  r = spreadsheet.costpercapita_h13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i13
  r = spreadsheet.costpercapita_i13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j13
  r = spreadsheet.costpercapita_j13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k13
  r = spreadsheet.costpercapita_k13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l13
  r = spreadsheet.costpercapita_l13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m13
  r = spreadsheet.costpercapita_m13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o13
  r = spreadsheet.costpercapita_o13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p13
  r = spreadsheet.costpercapita_p13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q13
  r = spreadsheet.costpercapita_q13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r13
  r = spreadsheet.costpercapita_r13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s13
  r = spreadsheet.costpercapita_s13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t13
  r = spreadsheet.costpercapita_t13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u13
  r = spreadsheet.costpercapita_u13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v13
  r = spreadsheet.costpercapita_v13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w13
  r = spreadsheet.costpercapita_w13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y13
  r = spreadsheet.costpercapita_y13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z13
  r = spreadsheet.costpercapita_z13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa13
  r = spreadsheet.costpercapita_aa13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab13
  r = spreadsheet.costpercapita_ab13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac13
  r = spreadsheet.costpercapita_ac13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad13
  r = spreadsheet.costpercapita_ad13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae13
  r = spreadsheet.costpercapita_ae13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af13
  r = spreadsheet.costpercapita_af13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag13
  r = spreadsheet.costpercapita_ag13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai13
  r = spreadsheet.costpercapita_ai13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj13
  r = spreadsheet.costpercapita_aj13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak13
  r = spreadsheet.costpercapita_ak13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al13
  r = spreadsheet.costpercapita_al13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am13
  r = spreadsheet.costpercapita_am13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an13
  r = spreadsheet.costpercapita_an13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao13
  r = spreadsheet.costpercapita_ao13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap13
  r = spreadsheet.costpercapita_ap13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq13
  r = spreadsheet.costpercapita_aq13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as13
  r = spreadsheet.costpercapita_as13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at13
  r = spreadsheet.costpercapita_at13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av13
  r = spreadsheet.costpercapita_av13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw13
  r = spreadsheet.costpercapita_aw13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay13
  r = spreadsheet.costpercapita_ay13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az13
  r = spreadsheet.costpercapita_az13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba13
  r = spreadsheet.costpercapita_ba13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb13
  r = spreadsheet.costpercapita_bb13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc13
  r = spreadsheet.costpercapita_bc13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd13
  r = spreadsheet.costpercapita_bd13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be13
  r = spreadsheet.costpercapita_be13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf13
  r = spreadsheet.costpercapita_bf13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg13
  r = spreadsheet.costpercapita_bg13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi13
  r = spreadsheet.costpercapita_bi13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj13
  r = spreadsheet.costpercapita_bj13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk13
  r = spreadsheet.costpercapita_bk13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl13
  r = spreadsheet.costpercapita_bl13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm13
  r = spreadsheet.costpercapita_bm13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn13
  r = spreadsheet.costpercapita_bn13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo13
  r = spreadsheet.costpercapita_bo13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp13
  r = spreadsheet.costpercapita_bp13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq13
  r = spreadsheet.costpercapita_bq13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs13
  r = spreadsheet.costpercapita_bs13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt13
  r = spreadsheet.costpercapita_bt13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu13
  r = spreadsheet.costpercapita_bu13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv13
  r = spreadsheet.costpercapita_bv13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw13
  r = spreadsheet.costpercapita_bw13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx13
  r = spreadsheet.costpercapita_bx13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by13
  r = spreadsheet.costpercapita_by13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz13
  r = spreadsheet.costpercapita_bz13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca13
  r = spreadsheet.costpercapita_ca13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc13
  r = spreadsheet.costpercapita_cc13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd13
  r = spreadsheet.costpercapita_cd13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf13
  r = spreadsheet.costpercapita_cf13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg13
  r = spreadsheet.costpercapita_cg13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch13
  r = spreadsheet.costpercapita_ch13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci13
  r = spreadsheet.costpercapita_ci13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj13
  r = spreadsheet.costpercapita_cj13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck13
  r = spreadsheet.costpercapita_ck13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl13
  r = spreadsheet.costpercapita_cl13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm13
  r = spreadsheet.costpercapita_cm13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn13
  r = spreadsheet.costpercapita_cn13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp13
  r = spreadsheet.costpercapita_cp13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq13
  r = spreadsheet.costpercapita_cq13
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr13
  r = spreadsheet.costpercapita_cr13
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a14
  r = spreadsheet.costpercapita_a14
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b14
  r = spreadsheet.costpercapita_b14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomatter to fuel conversion",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c14
  r = spreadsheet.costpercapita_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e14
  r = spreadsheet.costpercapita_e14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.004051215610723,r[:number],0.001)
end

def test_costpercapita_f14
  r = spreadsheet.costpercapita_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.5178957862041,r[:number],0.001)
end

def test_costpercapita_g14
  r = spreadsheet.costpercapita_g14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.46107939732968,r[:number],0.001)
end

def test_costpercapita_h14
  r = spreadsheet.costpercapita_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.4971000223592,r[:number],0.001)
end

def test_costpercapita_i14
  r = spreadsheet.costpercapita_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.15329658200279,r[:number],0.001)
end

def test_costpercapita_j14
  r = spreadsheet.costpercapita_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880297110721123,r[:number],0.001)
end

def test_costpercapita_k14
  r = spreadsheet.costpercapita_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.863135476289767,r[:number],0.001)
end

def test_costpercapita_l14
  r = spreadsheet.costpercapita_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56786996327557,r[:number],0.001)
end

def test_costpercapita_m14
  r = spreadsheet.costpercapita_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.326060140095661,r[:number],0.001)
end

def test_costpercapita_o14
  r = spreadsheet.costpercapita_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.52095453822669,r[:number],0.001)
end

def test_costpercapita_p14
  r = spreadsheet.costpercapita_p14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.98312186355437,r[:number],0.001)
end

def test_costpercapita_q14
  r = spreadsheet.costpercapita_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.57706478784985,r[:number],0.001)
end

def test_costpercapita_r14
  r = spreadsheet.costpercapita_r14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.96620091371354,r[:number],0.001)
end

def test_costpercapita_s14
  r = spreadsheet.costpercapita_s14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.40307349388351,r[:number],0.001)
end

def test_costpercapita_t14
  r = spreadsheet.costpercapita_t14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.31325615303217,r[:number],0.001)
end

def test_costpercapita_u14
  r = spreadsheet.costpercapita_u14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.50323609005788,r[:number],0.001)
end

def test_costpercapita_v14
  r = spreadsheet.costpercapita_v14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.35859368918024,r[:number],0.001)
end

def test_costpercapita_w14
  r = spreadsheet.costpercapita_w14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.87321451659957,r[:number],0.001)
end

def test_costpercapita_y14
  r = spreadsheet.costpercapita_y14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z14
  r = spreadsheet.costpercapita_z14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa14
  r = spreadsheet.costpercapita_aa14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab14
  r = spreadsheet.costpercapita_ab14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac14
  r = spreadsheet.costpercapita_ac14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad14
  r = spreadsheet.costpercapita_ad14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae14
  r = spreadsheet.costpercapita_ae14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af14
  r = spreadsheet.costpercapita_af14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag14
  r = spreadsheet.costpercapita_ag14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai14
  r = spreadsheet.costpercapita_ai14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.5250057538374,r[:number],0.001)
end

def test_costpercapita_aj14
  r = spreadsheet.costpercapita_aj14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.5010176497585,r[:number],0.001)
end

def test_costpercapita_ak14
  r = spreadsheet.costpercapita_ak14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.03814418517953,r[:number],0.001)
end

def test_costpercapita_al14
  r = spreadsheet.costpercapita_al14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.46330093607273,r[:number],0.001)
end

def test_costpercapita_am14
  r = spreadsheet.costpercapita_am14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.5563700758863,r[:number],0.001)
end

def test_costpercapita_an14
  r = spreadsheet.costpercapita_an14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1935532637533,r[:number],0.001)
end

def test_costpercapita_ao14
  r = spreadsheet.costpercapita_ao14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.36637156634765,r[:number],0.001)
end

def test_costpercapita_ap14
  r = spreadsheet.costpercapita_ap14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.92646365245581,r[:number],0.001)
end

def test_costpercapita_aq14
  r = spreadsheet.costpercapita_aq14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.19927465669525,r[:number],0.001)
end

def test_costpercapita_as14
  r = spreadsheet.costpercapita_as14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.86327797110961,r[:number],0.001)
end

def test_costpercapita_at14
  r = spreadsheet.costpercapita_at14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2707.5723733375225,r[:number],0.001)
end

def test_costpercapita_av14
  r = spreadsheet.costpercapita_av14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw14
  r = spreadsheet.costpercapita_aw14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay14
  r = spreadsheet.costpercapita_ay14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.802430729366433,r[:number],0.001)
end

def test_costpercapita_az14
  r = spreadsheet.costpercapita_az14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.5178957862041,r[:number],0.001)
end

def test_costpercapita_ba14
  r = spreadsheet.costpercapita_ba14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.46107939732968,r[:number],0.001)
end

def test_costpercapita_bb14
  r = spreadsheet.costpercapita_bb14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.4971000223592,r[:number],0.001)
end

def test_costpercapita_bc14
  r = spreadsheet.costpercapita_bc14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.15329658200279,r[:number],0.001)
end

def test_costpercapita_bd14
  r = spreadsheet.costpercapita_bd14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880297110721123,r[:number],0.001)
end

def test_costpercapita_be14
  r = spreadsheet.costpercapita_be14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.863135476289767,r[:number],0.001)
end

def test_costpercapita_bf14
  r = spreadsheet.costpercapita_bf14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56786996327557,r[:number],0.001)
end

def test_costpercapita_bg14
  r = spreadsheet.costpercapita_bg14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.326060140095661,r[:number],0.001)
end

def test_costpercapita_bi14
  r = spreadsheet.costpercapita_bi14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.802430729366433,r[:number],0.001)
end

def test_costpercapita_bj14
  r = spreadsheet.costpercapita_bj14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.5178957862041,r[:number],0.001)
end

def test_costpercapita_bk14
  r = spreadsheet.costpercapita_bk14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.46107939732968,r[:number],0.001)
end

def test_costpercapita_bl14
  r = spreadsheet.costpercapita_bl14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.4971000223592,r[:number],0.001)
end

def test_costpercapita_bm14
  r = spreadsheet.costpercapita_bm14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.15329658200279,r[:number],0.001)
end

def test_costpercapita_bn14
  r = spreadsheet.costpercapita_bn14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880297110721123,r[:number],0.001)
end

def test_costpercapita_bo14
  r = spreadsheet.costpercapita_bo14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.863135476289767,r[:number],0.001)
end

def test_costpercapita_bp14
  r = spreadsheet.costpercapita_bp14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56786996327557,r[:number],0.001)
end

def test_costpercapita_bq14
  r = spreadsheet.costpercapita_bq14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.326060140095661,r[:number],0.001)
end

def test_costpercapita_bs14
  r = spreadsheet.costpercapita_bs14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.32338526759312,r[:number],0.001)
end

def test_costpercapita_bt14
  r = spreadsheet.costpercapita_bt14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.5010176497585,r[:number],0.001)
end

def test_costpercapita_bu14
  r = spreadsheet.costpercapita_bu14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.03814418517953,r[:number],0.001)
end

def test_costpercapita_bv14
  r = spreadsheet.costpercapita_bv14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.46330093607273,r[:number],0.001)
end

def test_costpercapita_bw14
  r = spreadsheet.costpercapita_bw14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.5563700758863,r[:number],0.001)
end

def test_costpercapita_bx14
  r = spreadsheet.costpercapita_bx14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1935532637533,r[:number],0.001)
end

def test_costpercapita_by14
  r = spreadsheet.costpercapita_by14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.36637156634765,r[:number],0.001)
end

def test_costpercapita_bz14
  r = spreadsheet.costpercapita_bz14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.92646365245581,r[:number],0.001)
end

def test_costpercapita_ca14
  r = spreadsheet.costpercapita_ca14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.19927465669525,r[:number],0.001)
end

def test_costpercapita_cc14
  r = spreadsheet.costpercapita_cc14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.06309791708246,r[:number],0.001)
end

def test_costpercapita_cd14
  r = spreadsheet.costpercapita_cd14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2700.370752851278,r[:number],0.001)
end

def test_costpercapita_cf14
  r = spreadsheet.costpercapita_cf14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.201620486244289,r[:number],0.001)
end

def test_costpercapita_cg14
  r = spreadsheet.costpercapita_cg14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch14
  r = spreadsheet.costpercapita_ch14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci14
  r = spreadsheet.costpercapita_ci14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj14
  r = spreadsheet.costpercapita_cj14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck14
  r = spreadsheet.costpercapita_ck14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl14
  r = spreadsheet.costpercapita_cl14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm14
  r = spreadsheet.costpercapita_cm14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn14
  r = spreadsheet.costpercapita_cn14
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp14
  r = spreadsheet.costpercapita_cp14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.8001800540271433,r[:number],0.001)
end

def test_costpercapita_cq14
  r = spreadsheet.costpercapita_cq14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.201620486244289,r[:number],0.001)
end

def test_costpercapita_cr14
  r = spreadsheet.costpercapita_cr14
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a15
  r = spreadsheet.costpercapita_a15
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b15
  r = spreadsheet.costpercapita_b15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c15
  r = spreadsheet.costpercapita_c15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e15
  r = spreadsheet.costpercapita_e15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f15
  r = spreadsheet.costpercapita_f15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g15
  r = spreadsheet.costpercapita_g15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h15
  r = spreadsheet.costpercapita_h15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i15
  r = spreadsheet.costpercapita_i15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j15
  r = spreadsheet.costpercapita_j15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k15
  r = spreadsheet.costpercapita_k15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l15
  r = spreadsheet.costpercapita_l15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m15
  r = spreadsheet.costpercapita_m15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o15
  r = spreadsheet.costpercapita_o15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p15
  r = spreadsheet.costpercapita_p15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q15
  r = spreadsheet.costpercapita_q15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r15
  r = spreadsheet.costpercapita_r15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s15
  r = spreadsheet.costpercapita_s15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t15
  r = spreadsheet.costpercapita_t15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u15
  r = spreadsheet.costpercapita_u15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v15
  r = spreadsheet.costpercapita_v15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w15
  r = spreadsheet.costpercapita_w15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y15
  r = spreadsheet.costpercapita_y15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z15
  r = spreadsheet.costpercapita_z15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa15
  r = spreadsheet.costpercapita_aa15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab15
  r = spreadsheet.costpercapita_ab15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac15
  r = spreadsheet.costpercapita_ac15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad15
  r = spreadsheet.costpercapita_ad15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae15
  r = spreadsheet.costpercapita_ae15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af15
  r = spreadsheet.costpercapita_af15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag15
  r = spreadsheet.costpercapita_ag15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai15
  r = spreadsheet.costpercapita_ai15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj15
  r = spreadsheet.costpercapita_aj15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak15
  r = spreadsheet.costpercapita_ak15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al15
  r = spreadsheet.costpercapita_al15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am15
  r = spreadsheet.costpercapita_am15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an15
  r = spreadsheet.costpercapita_an15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao15
  r = spreadsheet.costpercapita_ao15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap15
  r = spreadsheet.costpercapita_ap15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq15
  r = spreadsheet.costpercapita_aq15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as15
  r = spreadsheet.costpercapita_as15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at15
  r = spreadsheet.costpercapita_at15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av15
  r = spreadsheet.costpercapita_av15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw15
  r = spreadsheet.costpercapita_aw15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay15
  r = spreadsheet.costpercapita_ay15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az15
  r = spreadsheet.costpercapita_az15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba15
  r = spreadsheet.costpercapita_ba15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb15
  r = spreadsheet.costpercapita_bb15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc15
  r = spreadsheet.costpercapita_bc15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd15
  r = spreadsheet.costpercapita_bd15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be15
  r = spreadsheet.costpercapita_be15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf15
  r = spreadsheet.costpercapita_bf15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg15
  r = spreadsheet.costpercapita_bg15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi15
  r = spreadsheet.costpercapita_bi15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj15
  r = spreadsheet.costpercapita_bj15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk15
  r = spreadsheet.costpercapita_bk15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl15
  r = spreadsheet.costpercapita_bl15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm15
  r = spreadsheet.costpercapita_bm15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn15
  r = spreadsheet.costpercapita_bn15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo15
  r = spreadsheet.costpercapita_bo15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp15
  r = spreadsheet.costpercapita_bp15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq15
  r = spreadsheet.costpercapita_bq15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs15
  r = spreadsheet.costpercapita_bs15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt15
  r = spreadsheet.costpercapita_bt15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu15
  r = spreadsheet.costpercapita_bu15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv15
  r = spreadsheet.costpercapita_bv15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw15
  r = spreadsheet.costpercapita_bw15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx15
  r = spreadsheet.costpercapita_bx15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by15
  r = spreadsheet.costpercapita_by15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz15
  r = spreadsheet.costpercapita_bz15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca15
  r = spreadsheet.costpercapita_ca15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc15
  r = spreadsheet.costpercapita_cc15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd15
  r = spreadsheet.costpercapita_cd15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf15
  r = spreadsheet.costpercapita_cf15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg15
  r = spreadsheet.costpercapita_cg15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch15
  r = spreadsheet.costpercapita_ch15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci15
  r = spreadsheet.costpercapita_ci15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj15
  r = spreadsheet.costpercapita_cj15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck15
  r = spreadsheet.costpercapita_ck15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl15
  r = spreadsheet.costpercapita_cl15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm15
  r = spreadsheet.costpercapita_cm15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn15
  r = spreadsheet.costpercapita_cn15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp15
  r = spreadsheet.costpercapita_cp15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq15
  r = spreadsheet.costpercapita_cq15
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr15
  r = spreadsheet.costpercapita_cr15
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a16
  r = spreadsheet.costpercapita_a16
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b16
  r = spreadsheet.costpercapita_b16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c16
  r = spreadsheet.costpercapita_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e16
  r = spreadsheet.costpercapita_e16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f16
  r = spreadsheet.costpercapita_f16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g16
  r = spreadsheet.costpercapita_g16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h16
  r = spreadsheet.costpercapita_h16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i16
  r = spreadsheet.costpercapita_i16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j16
  r = spreadsheet.costpercapita_j16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k16
  r = spreadsheet.costpercapita_k16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l16
  r = spreadsheet.costpercapita_l16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m16
  r = spreadsheet.costpercapita_m16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o16
  r = spreadsheet.costpercapita_o16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p16
  r = spreadsheet.costpercapita_p16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q16
  r = spreadsheet.costpercapita_q16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r16
  r = spreadsheet.costpercapita_r16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s16
  r = spreadsheet.costpercapita_s16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t16
  r = spreadsheet.costpercapita_t16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u16
  r = spreadsheet.costpercapita_u16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v16
  r = spreadsheet.costpercapita_v16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w16
  r = spreadsheet.costpercapita_w16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y16
  r = spreadsheet.costpercapita_y16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z16
  r = spreadsheet.costpercapita_z16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa16
  r = spreadsheet.costpercapita_aa16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab16
  r = spreadsheet.costpercapita_ab16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac16
  r = spreadsheet.costpercapita_ac16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad16
  r = spreadsheet.costpercapita_ad16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae16
  r = spreadsheet.costpercapita_ae16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af16
  r = spreadsheet.costpercapita_af16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag16
  r = spreadsheet.costpercapita_ag16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai16
  r = spreadsheet.costpercapita_ai16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj16
  r = spreadsheet.costpercapita_aj16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak16
  r = spreadsheet.costpercapita_ak16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al16
  r = spreadsheet.costpercapita_al16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am16
  r = spreadsheet.costpercapita_am16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an16
  r = spreadsheet.costpercapita_an16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao16
  r = spreadsheet.costpercapita_ao16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap16
  r = spreadsheet.costpercapita_ap16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq16
  r = spreadsheet.costpercapita_aq16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as16
  r = spreadsheet.costpercapita_as16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at16
  r = spreadsheet.costpercapita_at16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av16
  r = spreadsheet.costpercapita_av16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw16
  r = spreadsheet.costpercapita_aw16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay16
  r = spreadsheet.costpercapita_ay16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az16
  r = spreadsheet.costpercapita_az16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba16
  r = spreadsheet.costpercapita_ba16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb16
  r = spreadsheet.costpercapita_bb16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc16
  r = spreadsheet.costpercapita_bc16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd16
  r = spreadsheet.costpercapita_bd16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be16
  r = spreadsheet.costpercapita_be16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf16
  r = spreadsheet.costpercapita_bf16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg16
  r = spreadsheet.costpercapita_bg16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi16
  r = spreadsheet.costpercapita_bi16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj16
  r = spreadsheet.costpercapita_bj16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk16
  r = spreadsheet.costpercapita_bk16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl16
  r = spreadsheet.costpercapita_bl16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm16
  r = spreadsheet.costpercapita_bm16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn16
  r = spreadsheet.costpercapita_bn16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo16
  r = spreadsheet.costpercapita_bo16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp16
  r = spreadsheet.costpercapita_bp16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq16
  r = spreadsheet.costpercapita_bq16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs16
  r = spreadsheet.costpercapita_bs16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt16
  r = spreadsheet.costpercapita_bt16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu16
  r = spreadsheet.costpercapita_bu16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv16
  r = spreadsheet.costpercapita_bv16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw16
  r = spreadsheet.costpercapita_bw16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx16
  r = spreadsheet.costpercapita_bx16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by16
  r = spreadsheet.costpercapita_by16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz16
  r = spreadsheet.costpercapita_bz16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca16
  r = spreadsheet.costpercapita_ca16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc16
  r = spreadsheet.costpercapita_cc16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd16
  r = spreadsheet.costpercapita_cd16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf16
  r = spreadsheet.costpercapita_cf16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg16
  r = spreadsheet.costpercapita_cg16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch16
  r = spreadsheet.costpercapita_ch16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci16
  r = spreadsheet.costpercapita_ci16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj16
  r = spreadsheet.costpercapita_cj16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck16
  r = spreadsheet.costpercapita_ck16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl16
  r = spreadsheet.costpercapita_cl16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm16
  r = spreadsheet.costpercapita_cm16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn16
  r = spreadsheet.costpercapita_cn16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp16
  r = spreadsheet.costpercapita_cp16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq16
  r = spreadsheet.costpercapita_cq16
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr16
  r = spreadsheet.costpercapita_cr16
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a17
  r = spreadsheet.costpercapita_a17
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Emissions",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b17
  r = spreadsheet.costpercapita_b17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c17
  r = spreadsheet.costpercapita_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e17
  r = spreadsheet.costpercapita_e17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f17
  r = spreadsheet.costpercapita_f17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g17
  r = spreadsheet.costpercapita_g17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h17
  r = spreadsheet.costpercapita_h17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i17
  r = spreadsheet.costpercapita_i17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j17
  r = spreadsheet.costpercapita_j17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k17
  r = spreadsheet.costpercapita_k17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l17
  r = spreadsheet.costpercapita_l17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m17
  r = spreadsheet.costpercapita_m17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o17
  r = spreadsheet.costpercapita_o17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p17
  r = spreadsheet.costpercapita_p17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q17
  r = spreadsheet.costpercapita_q17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r17
  r = spreadsheet.costpercapita_r17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s17
  r = spreadsheet.costpercapita_s17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t17
  r = spreadsheet.costpercapita_t17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u17
  r = spreadsheet.costpercapita_u17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v17
  r = spreadsheet.costpercapita_v17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w17
  r = spreadsheet.costpercapita_w17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y17
  r = spreadsheet.costpercapita_y17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z17
  r = spreadsheet.costpercapita_z17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa17
  r = spreadsheet.costpercapita_aa17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab17
  r = spreadsheet.costpercapita_ab17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac17
  r = spreadsheet.costpercapita_ac17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad17
  r = spreadsheet.costpercapita_ad17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae17
  r = spreadsheet.costpercapita_ae17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af17
  r = spreadsheet.costpercapita_af17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag17
  r = spreadsheet.costpercapita_ag17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai17
  r = spreadsheet.costpercapita_ai17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj17
  r = spreadsheet.costpercapita_aj17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak17
  r = spreadsheet.costpercapita_ak17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al17
  r = spreadsheet.costpercapita_al17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am17
  r = spreadsheet.costpercapita_am17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an17
  r = spreadsheet.costpercapita_an17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao17
  r = spreadsheet.costpercapita_ao17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap17
  r = spreadsheet.costpercapita_ap17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq17
  r = spreadsheet.costpercapita_aq17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as17
  r = spreadsheet.costpercapita_as17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at17
  r = spreadsheet.costpercapita_at17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av17
  r = spreadsheet.costpercapita_av17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw17
  r = spreadsheet.costpercapita_aw17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay17
  r = spreadsheet.costpercapita_ay17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az17
  r = spreadsheet.costpercapita_az17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba17
  r = spreadsheet.costpercapita_ba17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb17
  r = spreadsheet.costpercapita_bb17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc17
  r = spreadsheet.costpercapita_bc17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd17
  r = spreadsheet.costpercapita_bd17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be17
  r = spreadsheet.costpercapita_be17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf17
  r = spreadsheet.costpercapita_bf17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg17
  r = spreadsheet.costpercapita_bg17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi17
  r = spreadsheet.costpercapita_bi17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj17
  r = spreadsheet.costpercapita_bj17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk17
  r = spreadsheet.costpercapita_bk17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl17
  r = spreadsheet.costpercapita_bl17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm17
  r = spreadsheet.costpercapita_bm17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn17
  r = spreadsheet.costpercapita_bn17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo17
  r = spreadsheet.costpercapita_bo17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp17
  r = spreadsheet.costpercapita_bp17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq17
  r = spreadsheet.costpercapita_bq17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs17
  r = spreadsheet.costpercapita_bs17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt17
  r = spreadsheet.costpercapita_bt17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu17
  r = spreadsheet.costpercapita_bu17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv17
  r = spreadsheet.costpercapita_bv17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw17
  r = spreadsheet.costpercapita_bw17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx17
  r = spreadsheet.costpercapita_bx17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by17
  r = spreadsheet.costpercapita_by17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz17
  r = spreadsheet.costpercapita_bz17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca17
  r = spreadsheet.costpercapita_ca17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc17
  r = spreadsheet.costpercapita_cc17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd17
  r = spreadsheet.costpercapita_cd17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf17
  r = spreadsheet.costpercapita_cf17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg17
  r = spreadsheet.costpercapita_cg17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch17
  r = spreadsheet.costpercapita_ch17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci17
  r = spreadsheet.costpercapita_ci17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj17
  r = spreadsheet.costpercapita_cj17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck17
  r = spreadsheet.costpercapita_ck17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl17
  r = spreadsheet.costpercapita_cl17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm17
  r = spreadsheet.costpercapita_cm17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn17
  r = spreadsheet.costpercapita_cn17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp17
  r = spreadsheet.costpercapita_cp17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq17
  r = spreadsheet.costpercapita_cq17
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr17
  r = spreadsheet.costpercapita_cr17
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a18
  r = spreadsheet.costpercapita_a18
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b18
  r = spreadsheet.costpercapita_b18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy from waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c18
  r = spreadsheet.costpercapita_c18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e18
  r = spreadsheet.costpercapita_e18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f18
  r = spreadsheet.costpercapita_f18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g18
  r = spreadsheet.costpercapita_g18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h18
  r = spreadsheet.costpercapita_h18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i18
  r = spreadsheet.costpercapita_i18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j18
  r = spreadsheet.costpercapita_j18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k18
  r = spreadsheet.costpercapita_k18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l18
  r = spreadsheet.costpercapita_l18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m18
  r = spreadsheet.costpercapita_m18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o18
  r = spreadsheet.costpercapita_o18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p18
  r = spreadsheet.costpercapita_p18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q18
  r = spreadsheet.costpercapita_q18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r18
  r = spreadsheet.costpercapita_r18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s18
  r = spreadsheet.costpercapita_s18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t18
  r = spreadsheet.costpercapita_t18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u18
  r = spreadsheet.costpercapita_u18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v18
  r = spreadsheet.costpercapita_v18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w18
  r = spreadsheet.costpercapita_w18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y18
  r = spreadsheet.costpercapita_y18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z18
  r = spreadsheet.costpercapita_z18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa18
  r = spreadsheet.costpercapita_aa18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab18
  r = spreadsheet.costpercapita_ab18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac18
  r = spreadsheet.costpercapita_ac18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad18
  r = spreadsheet.costpercapita_ad18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae18
  r = spreadsheet.costpercapita_ae18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af18
  r = spreadsheet.costpercapita_af18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag18
  r = spreadsheet.costpercapita_ag18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai18
  r = spreadsheet.costpercapita_ai18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj18
  r = spreadsheet.costpercapita_aj18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak18
  r = spreadsheet.costpercapita_ak18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al18
  r = spreadsheet.costpercapita_al18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am18
  r = spreadsheet.costpercapita_am18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an18
  r = spreadsheet.costpercapita_an18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao18
  r = spreadsheet.costpercapita_ao18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap18
  r = spreadsheet.costpercapita_ap18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq18
  r = spreadsheet.costpercapita_aq18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as18
  r = spreadsheet.costpercapita_as18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at18
  r = spreadsheet.costpercapita_at18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av18
  r = spreadsheet.costpercapita_av18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw18
  r = spreadsheet.costpercapita_aw18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay18
  r = spreadsheet.costpercapita_ay18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az18
  r = spreadsheet.costpercapita_az18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba18
  r = spreadsheet.costpercapita_ba18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb18
  r = spreadsheet.costpercapita_bb18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc18
  r = spreadsheet.costpercapita_bc18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd18
  r = spreadsheet.costpercapita_bd18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be18
  r = spreadsheet.costpercapita_be18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf18
  r = spreadsheet.costpercapita_bf18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg18
  r = spreadsheet.costpercapita_bg18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi18
  r = spreadsheet.costpercapita_bi18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj18
  r = spreadsheet.costpercapita_bj18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk18
  r = spreadsheet.costpercapita_bk18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl18
  r = spreadsheet.costpercapita_bl18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm18
  r = spreadsheet.costpercapita_bm18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn18
  r = spreadsheet.costpercapita_bn18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo18
  r = spreadsheet.costpercapita_bo18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp18
  r = spreadsheet.costpercapita_bp18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq18
  r = spreadsheet.costpercapita_bq18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs18
  r = spreadsheet.costpercapita_bs18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt18
  r = spreadsheet.costpercapita_bt18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu18
  r = spreadsheet.costpercapita_bu18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv18
  r = spreadsheet.costpercapita_bv18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw18
  r = spreadsheet.costpercapita_bw18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx18
  r = spreadsheet.costpercapita_bx18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by18
  r = spreadsheet.costpercapita_by18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz18
  r = spreadsheet.costpercapita_bz18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca18
  r = spreadsheet.costpercapita_ca18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc18
  r = spreadsheet.costpercapita_cc18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd18
  r = spreadsheet.costpercapita_cd18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf18
  r = spreadsheet.costpercapita_cf18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg18
  r = spreadsheet.costpercapita_cg18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch18
  r = spreadsheet.costpercapita_ch18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci18
  r = spreadsheet.costpercapita_ci18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj18
  r = spreadsheet.costpercapita_cj18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck18
  r = spreadsheet.costpercapita_ck18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl18
  r = spreadsheet.costpercapita_cl18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm18
  r = spreadsheet.costpercapita_cm18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn18
  r = spreadsheet.costpercapita_cn18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp18
  r = spreadsheet.costpercapita_cp18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq18
  r = spreadsheet.costpercapita_cq18
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr18
  r = spreadsheet.costpercapita_cr18
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a19
  r = spreadsheet.costpercapita_a19
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b19
  r = spreadsheet.costpercapita_b19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste arising",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c19
  r = spreadsheet.costpercapita_c19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e19
  r = spreadsheet.costpercapita_e19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f19
  r = spreadsheet.costpercapita_f19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g19
  r = spreadsheet.costpercapita_g19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h19
  r = spreadsheet.costpercapita_h19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i19
  r = spreadsheet.costpercapita_i19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j19
  r = spreadsheet.costpercapita_j19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k19
  r = spreadsheet.costpercapita_k19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l19
  r = spreadsheet.costpercapita_l19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m19
  r = spreadsheet.costpercapita_m19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o19
  r = spreadsheet.costpercapita_o19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p19
  r = spreadsheet.costpercapita_p19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q19
  r = spreadsheet.costpercapita_q19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r19
  r = spreadsheet.costpercapita_r19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s19
  r = spreadsheet.costpercapita_s19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t19
  r = spreadsheet.costpercapita_t19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u19
  r = spreadsheet.costpercapita_u19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v19
  r = spreadsheet.costpercapita_v19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w19
  r = spreadsheet.costpercapita_w19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y19
  r = spreadsheet.costpercapita_y19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z19
  r = spreadsheet.costpercapita_z19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa19
  r = spreadsheet.costpercapita_aa19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab19
  r = spreadsheet.costpercapita_ab19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac19
  r = spreadsheet.costpercapita_ac19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad19
  r = spreadsheet.costpercapita_ad19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae19
  r = spreadsheet.costpercapita_ae19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af19
  r = spreadsheet.costpercapita_af19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag19
  r = spreadsheet.costpercapita_ag19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai19
  r = spreadsheet.costpercapita_ai19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj19
  r = spreadsheet.costpercapita_aj19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak19
  r = spreadsheet.costpercapita_ak19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al19
  r = spreadsheet.costpercapita_al19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am19
  r = spreadsheet.costpercapita_am19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an19
  r = spreadsheet.costpercapita_an19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao19
  r = spreadsheet.costpercapita_ao19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap19
  r = spreadsheet.costpercapita_ap19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq19
  r = spreadsheet.costpercapita_aq19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as19
  r = spreadsheet.costpercapita_as19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at19
  r = spreadsheet.costpercapita_at19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av19
  r = spreadsheet.costpercapita_av19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw19
  r = spreadsheet.costpercapita_aw19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay19
  r = spreadsheet.costpercapita_ay19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az19
  r = spreadsheet.costpercapita_az19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba19
  r = spreadsheet.costpercapita_ba19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb19
  r = spreadsheet.costpercapita_bb19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc19
  r = spreadsheet.costpercapita_bc19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd19
  r = spreadsheet.costpercapita_bd19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be19
  r = spreadsheet.costpercapita_be19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf19
  r = spreadsheet.costpercapita_bf19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg19
  r = spreadsheet.costpercapita_bg19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi19
  r = spreadsheet.costpercapita_bi19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj19
  r = spreadsheet.costpercapita_bj19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk19
  r = spreadsheet.costpercapita_bk19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl19
  r = spreadsheet.costpercapita_bl19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm19
  r = spreadsheet.costpercapita_bm19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn19
  r = spreadsheet.costpercapita_bn19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo19
  r = spreadsheet.costpercapita_bo19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp19
  r = spreadsheet.costpercapita_bp19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq19
  r = spreadsheet.costpercapita_bq19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs19
  r = spreadsheet.costpercapita_bs19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt19
  r = spreadsheet.costpercapita_bt19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu19
  r = spreadsheet.costpercapita_bu19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv19
  r = spreadsheet.costpercapita_bv19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw19
  r = spreadsheet.costpercapita_bw19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx19
  r = spreadsheet.costpercapita_bx19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by19
  r = spreadsheet.costpercapita_by19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz19
  r = spreadsheet.costpercapita_bz19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca19
  r = spreadsheet.costpercapita_ca19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc19
  r = spreadsheet.costpercapita_cc19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd19
  r = spreadsheet.costpercapita_cd19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf19
  r = spreadsheet.costpercapita_cf19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg19
  r = spreadsheet.costpercapita_cg19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch19
  r = spreadsheet.costpercapita_ch19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci19
  r = spreadsheet.costpercapita_ci19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj19
  r = spreadsheet.costpercapita_cj19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck19
  r = spreadsheet.costpercapita_ck19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl19
  r = spreadsheet.costpercapita_cl19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm19
  r = spreadsheet.costpercapita_cm19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn19
  r = spreadsheet.costpercapita_cn19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp19
  r = spreadsheet.costpercapita_cp19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq19
  r = spreadsheet.costpercapita_cq19
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr19
  r = spreadsheet.costpercapita_cr19
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a20
  r = spreadsheet.costpercapita_a20
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b20
  r = spreadsheet.costpercapita_b20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c20
  r = spreadsheet.costpercapita_c20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e20
  r = spreadsheet.costpercapita_e20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f20
  r = spreadsheet.costpercapita_f20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g20
  r = spreadsheet.costpercapita_g20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h20
  r = spreadsheet.costpercapita_h20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i20
  r = spreadsheet.costpercapita_i20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j20
  r = spreadsheet.costpercapita_j20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k20
  r = spreadsheet.costpercapita_k20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l20
  r = spreadsheet.costpercapita_l20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m20
  r = spreadsheet.costpercapita_m20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o20
  r = spreadsheet.costpercapita_o20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p20
  r = spreadsheet.costpercapita_p20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q20
  r = spreadsheet.costpercapita_q20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r20
  r = spreadsheet.costpercapita_r20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s20
  r = spreadsheet.costpercapita_s20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t20
  r = spreadsheet.costpercapita_t20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u20
  r = spreadsheet.costpercapita_u20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v20
  r = spreadsheet.costpercapita_v20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w20
  r = spreadsheet.costpercapita_w20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y20
  r = spreadsheet.costpercapita_y20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z20
  r = spreadsheet.costpercapita_z20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa20
  r = spreadsheet.costpercapita_aa20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab20
  r = spreadsheet.costpercapita_ab20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac20
  r = spreadsheet.costpercapita_ac20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad20
  r = spreadsheet.costpercapita_ad20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae20
  r = spreadsheet.costpercapita_ae20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af20
  r = spreadsheet.costpercapita_af20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag20
  r = spreadsheet.costpercapita_ag20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai20
  r = spreadsheet.costpercapita_ai20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj20
  r = spreadsheet.costpercapita_aj20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak20
  r = spreadsheet.costpercapita_ak20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al20
  r = spreadsheet.costpercapita_al20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am20
  r = spreadsheet.costpercapita_am20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an20
  r = spreadsheet.costpercapita_an20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao20
  r = spreadsheet.costpercapita_ao20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap20
  r = spreadsheet.costpercapita_ap20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq20
  r = spreadsheet.costpercapita_aq20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as20
  r = spreadsheet.costpercapita_as20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at20
  r = spreadsheet.costpercapita_at20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av20
  r = spreadsheet.costpercapita_av20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw20
  r = spreadsheet.costpercapita_aw20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay20
  r = spreadsheet.costpercapita_ay20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az20
  r = spreadsheet.costpercapita_az20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba20
  r = spreadsheet.costpercapita_ba20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb20
  r = spreadsheet.costpercapita_bb20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc20
  r = spreadsheet.costpercapita_bc20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd20
  r = spreadsheet.costpercapita_bd20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be20
  r = spreadsheet.costpercapita_be20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf20
  r = spreadsheet.costpercapita_bf20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg20
  r = spreadsheet.costpercapita_bg20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi20
  r = spreadsheet.costpercapita_bi20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj20
  r = spreadsheet.costpercapita_bj20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk20
  r = spreadsheet.costpercapita_bk20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl20
  r = spreadsheet.costpercapita_bl20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm20
  r = spreadsheet.costpercapita_bm20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn20
  r = spreadsheet.costpercapita_bn20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo20
  r = spreadsheet.costpercapita_bo20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp20
  r = spreadsheet.costpercapita_bp20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq20
  r = spreadsheet.costpercapita_bq20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs20
  r = spreadsheet.costpercapita_bs20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt20
  r = spreadsheet.costpercapita_bt20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu20
  r = spreadsheet.costpercapita_bu20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv20
  r = spreadsheet.costpercapita_bv20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw20
  r = spreadsheet.costpercapita_bw20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx20
  r = spreadsheet.costpercapita_bx20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by20
  r = spreadsheet.costpercapita_by20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz20
  r = spreadsheet.costpercapita_bz20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca20
  r = spreadsheet.costpercapita_ca20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc20
  r = spreadsheet.costpercapita_cc20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd20
  r = spreadsheet.costpercapita_cd20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf20
  r = spreadsheet.costpercapita_cf20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg20
  r = spreadsheet.costpercapita_cg20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch20
  r = spreadsheet.costpercapita_ch20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci20
  r = spreadsheet.costpercapita_ci20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj20
  r = spreadsheet.costpercapita_cj20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck20
  r = spreadsheet.costpercapita_ck20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl20
  r = spreadsheet.costpercapita_cl20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm20
  r = spreadsheet.costpercapita_cm20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn20
  r = spreadsheet.costpercapita_cn20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp20
  r = spreadsheet.costpercapita_cp20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq20
  r = spreadsheet.costpercapita_cq20
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr20
  r = spreadsheet.costpercapita_cr20
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a21
  r = spreadsheet.costpercapita_a21
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b21
  r = spreadsheet.costpercapita_b21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c21
  r = spreadsheet.costpercapita_c21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e21
  r = spreadsheet.costpercapita_e21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f21
  r = spreadsheet.costpercapita_f21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.30984924682194,r[:number],0.001)
end

def test_costpercapita_g21
  r = spreadsheet.costpercapita_g21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.350298992594254,r[:number],0.001)
end

def test_costpercapita_h21
  r = spreadsheet.costpercapita_h21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.55505235691815,r[:number],0.001)
end

def test_costpercapita_i21
  r = spreadsheet.costpercapita_i21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.92015938400138,r[:number],0.001)
end

def test_costpercapita_j21
  r = spreadsheet.costpercapita_j21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.8206218020496,r[:number],0.001)
end

def test_costpercapita_k21
  r = spreadsheet.costpercapita_k21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.468385000483,r[:number],0.001)
end

def test_costpercapita_l21
  r = spreadsheet.costpercapita_l21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.3163355869124,r[:number],0.001)
end

def test_costpercapita_m21
  r = spreadsheet.costpercapita_m21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.86642206316893,r[:number],0.001)
end

def test_costpercapita_o21
  r = spreadsheet.costpercapita_o21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0026735262481714767,r[:number],0.001)
end

def test_costpercapita_p21
  r = spreadsheet.costpercapita_p21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.01689095202127503,r[:number],0.001)
end

def test_costpercapita_q21
  r = spreadsheet.costpercapita_q21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.031901958887443294,r[:number],0.001)
end

def test_costpercapita_r21
  r = spreadsheet.costpercapita_r21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.050513290641985585,r[:number],0.001)
end

def test_costpercapita_s21
  r = spreadsheet.costpercapita_s21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08025707515656104,r[:number],0.001)
end

def test_costpercapita_t21
  r = spreadsheet.costpercapita_t21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.12422446795052011,r[:number],0.001)
end

def test_costpercapita_u21
  r = spreadsheet.costpercapita_u21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.17155041811197874,r[:number],0.001)
end

def test_costpercapita_v21
  r = spreadsheet.costpercapita_v21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.22298175364867517,r[:number],0.001)
end

def test_costpercapita_w21
  r = spreadsheet.costpercapita_w21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2412659078300528,r[:number],0.001)
end

def test_costpercapita_y21
  r = spreadsheet.costpercapita_y21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z21
  r = spreadsheet.costpercapita_z21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa21
  r = spreadsheet.costpercapita_aa21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab21
  r = spreadsheet.costpercapita_ab21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac21
  r = spreadsheet.costpercapita_ac21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad21
  r = spreadsheet.costpercapita_ad21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae21
  r = spreadsheet.costpercapita_ae21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af21
  r = spreadsheet.costpercapita_af21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag21
  r = spreadsheet.costpercapita_ag21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai21
  r = spreadsheet.costpercapita_ai21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0026735262481714767,r[:number],0.001)
end

def test_costpercapita_aj21
  r = spreadsheet.costpercapita_aj21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.32674019884322,r[:number],0.001)
end

def test_costpercapita_ak21
  r = spreadsheet.costpercapita_ak21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.382200951481696,r[:number],0.001)
end

def test_costpercapita_al21
  r = spreadsheet.costpercapita_al21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.605565647560134,r[:number],0.001)
end

def test_costpercapita_am21
  r = spreadsheet.costpercapita_am21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.00041645915793,r[:number],0.001)
end

def test_costpercapita_an21
  r = spreadsheet.costpercapita_an21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.94484627000013,r[:number],0.001)
end

def test_costpercapita_ao21
  r = spreadsheet.costpercapita_ao21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.63993541859497,r[:number],0.001)
end

def test_costpercapita_ap21
  r = spreadsheet.costpercapita_ap21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.53931734056107,r[:number],0.001)
end

def test_costpercapita_aq21
  r = spreadsheet.costpercapita_aq21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.10768797099897,r[:number],0.001)
end

def test_costpercapita_as21
  r = spreadsheet.costpercapita_as21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.50548708704959,r[:number],0.001)
end

def test_costpercapita_at21
  r = spreadsheet.costpercapita_at21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1320.3878105359802,r[:number],0.001)
end

def test_costpercapita_av21
  r = spreadsheet.costpercapita_av21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw21
  r = spreadsheet.costpercapita_aw21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay21
  r = spreadsheet.costpercapita_ay21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az21
  r = spreadsheet.costpercapita_az21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.309849246821944,r[:number],0.001)
end

def test_costpercapita_ba21
  r = spreadsheet.costpercapita_ba21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.350298992594254,r[:number],0.001)
end

def test_costpercapita_bb21
  r = spreadsheet.costpercapita_bb21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.55505235691815,r[:number],0.001)
end

def test_costpercapita_bc21
  r = spreadsheet.costpercapita_bc21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.92015938400138,r[:number],0.001)
end

def test_costpercapita_bd21
  r = spreadsheet.costpercapita_bd21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.82062180204962,r[:number],0.001)
end

def test_costpercapita_be21
  r = spreadsheet.costpercapita_be21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.468385000483,r[:number],0.001)
end

def test_costpercapita_bf21
  r = spreadsheet.costpercapita_bf21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.3163355869124,r[:number],0.001)
end

def test_costpercapita_bg21
  r = spreadsheet.costpercapita_bg21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.86642206316893,r[:number],0.001)
end

def test_costpercapita_bi21
  r = spreadsheet.costpercapita_bi21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj21
  r = spreadsheet.costpercapita_bj21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.309849246821944,r[:number],0.001)
end

def test_costpercapita_bk21
  r = spreadsheet.costpercapita_bk21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.350298992594254,r[:number],0.001)
end

def test_costpercapita_bl21
  r = spreadsheet.costpercapita_bl21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.55505235691815,r[:number],0.001)
end

def test_costpercapita_bm21
  r = spreadsheet.costpercapita_bm21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.92015938400138,r[:number],0.001)
end

def test_costpercapita_bn21
  r = spreadsheet.costpercapita_bn21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.82062180204962,r[:number],0.001)
end

def test_costpercapita_bo21
  r = spreadsheet.costpercapita_bo21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.468385000483,r[:number],0.001)
end

def test_costpercapita_bp21
  r = spreadsheet.costpercapita_bp21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.3163355869124,r[:number],0.001)
end

def test_costpercapita_bq21
  r = spreadsheet.costpercapita_bq21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.86642206316893,r[:number],0.001)
end

def test_costpercapita_bs21
  r = spreadsheet.costpercapita_bs21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0026735262481714767,r[:number],0.001)
end

def test_costpercapita_bt21
  r = spreadsheet.costpercapita_bt21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.326740198843222,r[:number],0.001)
end

def test_costpercapita_bu21
  r = spreadsheet.costpercapita_bu21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.382200951481696,r[:number],0.001)
end

def test_costpercapita_bv21
  r = spreadsheet.costpercapita_bv21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.605565647560134,r[:number],0.001)
end

def test_costpercapita_bw21
  r = spreadsheet.costpercapita_bw21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.00041645915793,r[:number],0.001)
end

def test_costpercapita_bx21
  r = spreadsheet.costpercapita_bx21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.94484627000014,r[:number],0.001)
end

def test_costpercapita_by21
  r = spreadsheet.costpercapita_by21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.63993541859497,r[:number],0.001)
end

def test_costpercapita_bz21
  r = spreadsheet.costpercapita_bz21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.53931734056107,r[:number],0.001)
end

def test_costpercapita_ca21
  r = spreadsheet.costpercapita_ca21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.10768797099897,r[:number],0.001)
end

def test_costpercapita_cc21
  r = spreadsheet.costpercapita_cc21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.50548708704959,r[:number],0.001)
end

def test_costpercapita_cd21
  r = spreadsheet.costpercapita_cd21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1320.3878105359804,r[:number],0.001)
end

def test_costpercapita_cf21
  r = spreadsheet.costpercapita_cf21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg21
  r = spreadsheet.costpercapita_cg21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch21
  r = spreadsheet.costpercapita_ch21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci21
  r = spreadsheet.costpercapita_ci21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj21
  r = spreadsheet.costpercapita_cj21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck21
  r = spreadsheet.costpercapita_ck21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl21
  r = spreadsheet.costpercapita_cl21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm21
  r = spreadsheet.costpercapita_cm21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn21
  r = spreadsheet.costpercapita_cn21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp21
  r = spreadsheet.costpercapita_cp21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq21
  r = spreadsheet.costpercapita_cq21
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr21
  r = spreadsheet.costpercapita_cr21
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a22
  r = spreadsheet.costpercapita_a22
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b22
  r = spreadsheet.costpercapita_b22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c22
  r = spreadsheet.costpercapita_c22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e22
  r = spreadsheet.costpercapita_e22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.516109038047713,r[:number],0.001)
end

def test_costpercapita_f22
  r = spreadsheet.costpercapita_f22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g22
  r = spreadsheet.costpercapita_g22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h22
  r = spreadsheet.costpercapita_h22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i22
  r = spreadsheet.costpercapita_i22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j22
  r = spreadsheet.costpercapita_j22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k22
  r = spreadsheet.costpercapita_k22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l22
  r = spreadsheet.costpercapita_l22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m22
  r = spreadsheet.costpercapita_m22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o22
  r = spreadsheet.costpercapita_o22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p22
  r = spreadsheet.costpercapita_p22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q22
  r = spreadsheet.costpercapita_q22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r22
  r = spreadsheet.costpercapita_r22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s22
  r = spreadsheet.costpercapita_s22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t22
  r = spreadsheet.costpercapita_t22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u22
  r = spreadsheet.costpercapita_u22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v22
  r = spreadsheet.costpercapita_v22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w22
  r = spreadsheet.costpercapita_w22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y22
  r = spreadsheet.costpercapita_y22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z22
  r = spreadsheet.costpercapita_z22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa22
  r = spreadsheet.costpercapita_aa22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.562606449446057e-12,r[:number],0.001)
end

def test_costpercapita_ab22
  r = spreadsheet.costpercapita_ab22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.1198017834475922e-12,r[:number],0.001)
end

def test_costpercapita_ac22
  r = spreadsheet.costpercapita_ac22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad22
  r = spreadsheet.costpercapita_ad22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae22
  r = spreadsheet.costpercapita_ae22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af22
  r = spreadsheet.costpercapita_af22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag22
  r = spreadsheet.costpercapita_ag22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai22
  r = spreadsheet.costpercapita_ai22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.516109038047713,r[:number],0.001)
end

def test_costpercapita_aj22
  r = spreadsheet.costpercapita_aj22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak22
  r = spreadsheet.costpercapita_ak22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.562606449446057e-12,r[:number],0.001)
end

def test_costpercapita_al22
  r = spreadsheet.costpercapita_al22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.1198017834475922e-12,r[:number],0.001)
end

def test_costpercapita_am22
  r = spreadsheet.costpercapita_am22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an22
  r = spreadsheet.costpercapita_an22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao22
  r = spreadsheet.costpercapita_ao22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap22
  r = spreadsheet.costpercapita_ap22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq22
  r = spreadsheet.costpercapita_aq22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as22
  r = spreadsheet.costpercapita_as22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.057345448671003,r[:number],0.001)
end

def test_costpercapita_at22
  r = spreadsheet.costpercapita_at22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.516109038018126,r[:number],0.001)
end

def test_costpercapita_av22
  r = spreadsheet.costpercapita_av22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw22
  r = spreadsheet.costpercapita_aw22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay22
  r = spreadsheet.costpercapita_ay22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.109665422828627,r[:number],0.001)
end

def test_costpercapita_az22
  r = spreadsheet.costpercapita_az22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba22
  r = spreadsheet.costpercapita_ba22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb22
  r = spreadsheet.costpercapita_bb22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc22
  r = spreadsheet.costpercapita_bc22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd22
  r = spreadsheet.costpercapita_bd22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be22
  r = spreadsheet.costpercapita_be22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf22
  r = spreadsheet.costpercapita_bf22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg22
  r = spreadsheet.costpercapita_bg22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi22
  r = spreadsheet.costpercapita_bi22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.109665422828627,r[:number],0.001)
end

def test_costpercapita_bj22
  r = spreadsheet.costpercapita_bj22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk22
  r = spreadsheet.costpercapita_bk22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl22
  r = spreadsheet.costpercapita_bl22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm22
  r = spreadsheet.costpercapita_bm22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn22
  r = spreadsheet.costpercapita_bn22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo22
  r = spreadsheet.costpercapita_bo22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp22
  r = spreadsheet.costpercapita_bp22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq22
  r = spreadsheet.costpercapita_bq22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs22
  r = spreadsheet.costpercapita_bs22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.109665422828627,r[:number],0.001)
end

def test_costpercapita_bt22
  r = spreadsheet.costpercapita_bt22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu22
  r = spreadsheet.costpercapita_bu22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.562606449446057e-12,r[:number],0.001)
end

def test_costpercapita_bv22
  r = spreadsheet.costpercapita_bv22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.1198017834475922e-12,r[:number],0.001)
end

def test_costpercapita_bw22
  r = spreadsheet.costpercapita_bw22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx22
  r = spreadsheet.costpercapita_bx22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by22
  r = spreadsheet.costpercapita_by22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz22
  r = spreadsheet.costpercapita_bz22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca22
  r = spreadsheet.costpercapita_ca22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc22
  r = spreadsheet.costpercapita_cc22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.234407269202216,r[:number],0.001)
end

def test_costpercapita_cd22
  r = spreadsheet.costpercapita_cd22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.109665422799038,r[:number],0.001)
end

def test_costpercapita_cf22
  r = spreadsheet.costpercapita_cf22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.406443615219084,r[:number],0.001)
end

def test_costpercapita_cg22
  r = spreadsheet.costpercapita_cg22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch22
  r = spreadsheet.costpercapita_ch22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci22
  r = spreadsheet.costpercapita_ci22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj22
  r = spreadsheet.costpercapita_cj22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck22
  r = spreadsheet.costpercapita_ck22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl22
  r = spreadsheet.costpercapita_cl22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm22
  r = spreadsheet.costpercapita_cm22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn22
  r = spreadsheet.costpercapita_cn22
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp22
  r = spreadsheet.costpercapita_cp22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.8229381794687871,r[:number],0.001)
end

def test_costpercapita_cq22
  r = spreadsheet.costpercapita_cq22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.406443615219084,r[:number],0.001)
end

def test_costpercapita_cr22
  r = spreadsheet.costpercapita_cr22
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a23
  r = spreadsheet.costpercapita_a23
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b23
  r = spreadsheet.costpercapita_b23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid distribution",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c23
  r = spreadsheet.costpercapita_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e23
  r = spreadsheet.costpercapita_e23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(810.1130397349227,r[:number],0.001)
end

def test_costpercapita_f23
  r = spreadsheet.costpercapita_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2311.230148897371,r[:number],0.001)
end

def test_costpercapita_g23
  r = spreadsheet.costpercapita_g23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3170.539101568467,r[:number],0.001)
end

def test_costpercapita_h23
  r = spreadsheet.costpercapita_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4099.173433531089,r[:number],0.001)
end

def test_costpercapita_i23
  r = spreadsheet.costpercapita_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4937.159251636029,r[:number],0.001)
end

def test_costpercapita_j23
  r = spreadsheet.costpercapita_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5728.354604353873,r[:number],0.001)
end

def test_costpercapita_k23
  r = spreadsheet.costpercapita_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6457.897637133099,r[:number],0.001)
end

def test_costpercapita_l23
  r = spreadsheet.costpercapita_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7136.085731704384,r[:number],0.001)
end

def test_costpercapita_m23
  r = spreadsheet.costpercapita_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7791.751067302779,r[:number],0.001)
end

def test_costpercapita_o23
  r = spreadsheet.costpercapita_o23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.2404605484938,r[:number],0.001)
end

def test_costpercapita_p23
  r = spreadsheet.costpercapita_p23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.4618027320946,r[:number],0.001)
end

def test_costpercapita_q23
  r = spreadsheet.costpercapita_q23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(826.7483393912701,r[:number],0.001)
end

def test_costpercapita_r23
  r = spreadsheet.costpercapita_r23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1145.964853747443,r[:number],0.001)
end

def test_costpercapita_s23
  r = spreadsheet.costpercapita_s23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1492.529823401049,r[:number],0.001)
end

def test_costpercapita_t23
  r = spreadsheet.costpercapita_t23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1854.7784661573783,r[:number],0.001)
end

def test_costpercapita_u23
  r = spreadsheet.costpercapita_u23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2220.180041783017,r[:number],0.001)
end

def test_costpercapita_v23
  r = spreadsheet.costpercapita_v23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2580.8666127138704,r[:number],0.001)
end

def test_costpercapita_w23
  r = spreadsheet.costpercapita_w23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2935.6644825111657,r[:number],0.001)
end

def test_costpercapita_y23
  r = spreadsheet.costpercapita_y23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z23
  r = spreadsheet.costpercapita_z23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa23
  r = spreadsheet.costpercapita_aa23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab23
  r = spreadsheet.costpercapita_ab23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac23
  r = spreadsheet.costpercapita_ac23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad23
  r = spreadsheet.costpercapita_ad23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae23
  r = spreadsheet.costpercapita_ae23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af23
  r = spreadsheet.costpercapita_af23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag23
  r = spreadsheet.costpercapita_ag23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai23
  r = spreadsheet.costpercapita_ai23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1156.3535002834165,r[:number],0.001)
end

def test_costpercapita_aj23
  r = spreadsheet.costpercapita_aj23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2869.691951629465,r[:number],0.001)
end

def test_costpercapita_ak23
  r = spreadsheet.costpercapita_ak23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3997.2874409597366,r[:number],0.001)
end

def test_costpercapita_al23
  r = spreadsheet.costpercapita_al23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5245.1382872785325,r[:number],0.001)
end

def test_costpercapita_am23
  r = spreadsheet.costpercapita_am23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6429.6890750370785,r[:number],0.001)
end

def test_costpercapita_an23
  r = spreadsheet.costpercapita_an23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7583.1330705112505,r[:number],0.001)
end

def test_costpercapita_ao23
  r = spreadsheet.costpercapita_ao23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8678.077678916115,r[:number],0.001)
end

def test_costpercapita_ap23
  r = spreadsheet.costpercapita_ap23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9716.952344418254,r[:number],0.001)
end

def test_costpercapita_aq23
  r = spreadsheet.costpercapita_aq23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10727.415549813944,r[:number],0.001)
end

def test_costpercapita_as23
  r = spreadsheet.costpercapita_as23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6267.082099871977,r[:number],0.001)
end

def test_costpercapita_at23
  r = spreadsheet.costpercapita_at23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119870.60890539986,r[:number],0.001)
end

def test_costpercapita_av23
  r = spreadsheet.costpercapita_av23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw23
  r = spreadsheet.costpercapita_aw23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay23
  r = spreadsheet.costpercapita_ay23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(486.0678238409536,r[:number],0.001)
end

def test_costpercapita_az23
  r = spreadsheet.costpercapita_az23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2311.230148897371,r[:number],0.001)
end

def test_costpercapita_ba23
  r = spreadsheet.costpercapita_ba23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3170.539101568467,r[:number],0.001)
end

def test_costpercapita_bb23
  r = spreadsheet.costpercapita_bb23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4099.173433531089,r[:number],0.001)
end

def test_costpercapita_bc23
  r = spreadsheet.costpercapita_bc23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4937.159251636029,r[:number],0.001)
end

def test_costpercapita_bd23
  r = spreadsheet.costpercapita_bd23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5728.354604353873,r[:number],0.001)
end

def test_costpercapita_be23
  r = spreadsheet.costpercapita_be23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6457.897637133099,r[:number],0.001)
end

def test_costpercapita_bf23
  r = spreadsheet.costpercapita_bf23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7136.085731704384,r[:number],0.001)
end

def test_costpercapita_bg23
  r = spreadsheet.costpercapita_bg23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7791.751067302779,r[:number],0.001)
end

def test_costpercapita_bi23
  r = spreadsheet.costpercapita_bi23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(486.0678238409536,r[:number],0.001)
end

def test_costpercapita_bj23
  r = spreadsheet.costpercapita_bj23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2311.230148897371,r[:number],0.001)
end

def test_costpercapita_bk23
  r = spreadsheet.costpercapita_bk23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3170.539101568467,r[:number],0.001)
end

def test_costpercapita_bl23
  r = spreadsheet.costpercapita_bl23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4099.173433531089,r[:number],0.001)
end

def test_costpercapita_bm23
  r = spreadsheet.costpercapita_bm23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4937.159251636029,r[:number],0.001)
end

def test_costpercapita_bn23
  r = spreadsheet.costpercapita_bn23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5728.354604353873,r[:number],0.001)
end

def test_costpercapita_bo23
  r = spreadsheet.costpercapita_bo23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6457.897637133099,r[:number],0.001)
end

def test_costpercapita_bp23
  r = spreadsheet.costpercapita_bp23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7136.085731704384,r[:number],0.001)
end

def test_costpercapita_bq23
  r = spreadsheet.costpercapita_bq23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7791.751067302779,r[:number],0.001)
end

def test_costpercapita_bs23
  r = spreadsheet.costpercapita_bs23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.3082843894474,r[:number],0.001)
end

def test_costpercapita_bt23
  r = spreadsheet.costpercapita_bt23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2869.691951629465,r[:number],0.001)
end

def test_costpercapita_bu23
  r = spreadsheet.costpercapita_bu23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3997.2874409597366,r[:number],0.001)
end

def test_costpercapita_bv23
  r = spreadsheet.costpercapita_bv23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5245.1382872785325,r[:number],0.001)
end

def test_costpercapita_bw23
  r = spreadsheet.costpercapita_bw23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6429.6890750370785,r[:number],0.001)
end

def test_costpercapita_bx23
  r = spreadsheet.costpercapita_bx23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7583.1330705112505,r[:number],0.001)
end

def test_costpercapita_by23
  r = spreadsheet.costpercapita_by23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8678.077678916115,r[:number],0.001)
end

def test_costpercapita_bz23
  r = spreadsheet.costpercapita_bz23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9716.952344418254,r[:number],0.001)
end

def test_costpercapita_ca23
  r = spreadsheet.costpercapita_ca23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10727.415549813944,r[:number],0.001)
end

def test_costpercapita_cc23
  r = spreadsheet.costpercapita_cc23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6231.077075883758,r[:number],0.001)
end

def test_costpercapita_cd23
  r = spreadsheet.costpercapita_cd23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119546.5636895059,r[:number],0.001)
end

def test_costpercapita_cf23
  r = spreadsheet.costpercapita_cf23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-324.0452158939691,r[:number],0.001)
end

def test_costpercapita_cg23
  r = spreadsheet.costpercapita_cg23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch23
  r = spreadsheet.costpercapita_ch23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci23
  r = spreadsheet.costpercapita_ci23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj23
  r = spreadsheet.costpercapita_cj23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck23
  r = spreadsheet.costpercapita_ck23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl23
  r = spreadsheet.costpercapita_cl23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm23
  r = spreadsheet.costpercapita_cm23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn23
  r = spreadsheet.costpercapita_cn23
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp23
  r = spreadsheet.costpercapita_cp23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-36.00502398821879,r[:number],0.001)
end

def test_costpercapita_cq23
  r = spreadsheet.costpercapita_cq23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-324.0452158939691,r[:number],0.001)
end

def test_costpercapita_cr23
  r = spreadsheet.costpercapita_cr23
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a24
  r = spreadsheet.costpercapita_a24
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b24
  r = spreadsheet.costpercapita_b24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting, backup",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c24
  r = spreadsheet.costpercapita_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e24
  r = spreadsheet.costpercapita_e24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f24
  r = spreadsheet.costpercapita_f24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g24
  r = spreadsheet.costpercapita_g24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h24
  r = spreadsheet.costpercapita_h24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i24
  r = spreadsheet.costpercapita_i24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j24
  r = spreadsheet.costpercapita_j24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k24
  r = spreadsheet.costpercapita_k24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l24
  r = spreadsheet.costpercapita_l24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m24
  r = spreadsheet.costpercapita_m24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o24
  r = spreadsheet.costpercapita_o24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p24
  r = spreadsheet.costpercapita_p24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q24
  r = spreadsheet.costpercapita_q24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r24
  r = spreadsheet.costpercapita_r24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s24
  r = spreadsheet.costpercapita_s24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t24
  r = spreadsheet.costpercapita_t24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u24
  r = spreadsheet.costpercapita_u24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v24
  r = spreadsheet.costpercapita_v24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w24
  r = spreadsheet.costpercapita_w24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y24
  r = spreadsheet.costpercapita_y24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z24
  r = spreadsheet.costpercapita_z24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa24
  r = spreadsheet.costpercapita_aa24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab24
  r = spreadsheet.costpercapita_ab24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac24
  r = spreadsheet.costpercapita_ac24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad24
  r = spreadsheet.costpercapita_ad24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae24
  r = spreadsheet.costpercapita_ae24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af24
  r = spreadsheet.costpercapita_af24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag24
  r = spreadsheet.costpercapita_ag24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai24
  r = spreadsheet.costpercapita_ai24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj24
  r = spreadsheet.costpercapita_aj24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak24
  r = spreadsheet.costpercapita_ak24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al24
  r = spreadsheet.costpercapita_al24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am24
  r = spreadsheet.costpercapita_am24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an24
  r = spreadsheet.costpercapita_an24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao24
  r = spreadsheet.costpercapita_ao24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap24
  r = spreadsheet.costpercapita_ap24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq24
  r = spreadsheet.costpercapita_aq24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as24
  r = spreadsheet.costpercapita_as24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at24
  r = spreadsheet.costpercapita_at24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av24
  r = spreadsheet.costpercapita_av24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw24
  r = spreadsheet.costpercapita_aw24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay24
  r = spreadsheet.costpercapita_ay24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az24
  r = spreadsheet.costpercapita_az24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba24
  r = spreadsheet.costpercapita_ba24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb24
  r = spreadsheet.costpercapita_bb24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc24
  r = spreadsheet.costpercapita_bc24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd24
  r = spreadsheet.costpercapita_bd24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be24
  r = spreadsheet.costpercapita_be24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf24
  r = spreadsheet.costpercapita_bf24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg24
  r = spreadsheet.costpercapita_bg24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi24
  r = spreadsheet.costpercapita_bi24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj24
  r = spreadsheet.costpercapita_bj24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk24
  r = spreadsheet.costpercapita_bk24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl24
  r = spreadsheet.costpercapita_bl24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm24
  r = spreadsheet.costpercapita_bm24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn24
  r = spreadsheet.costpercapita_bn24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo24
  r = spreadsheet.costpercapita_bo24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp24
  r = spreadsheet.costpercapita_bp24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq24
  r = spreadsheet.costpercapita_bq24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs24
  r = spreadsheet.costpercapita_bs24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt24
  r = spreadsheet.costpercapita_bt24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu24
  r = spreadsheet.costpercapita_bu24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv24
  r = spreadsheet.costpercapita_bv24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw24
  r = spreadsheet.costpercapita_bw24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx24
  r = spreadsheet.costpercapita_bx24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by24
  r = spreadsheet.costpercapita_by24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz24
  r = spreadsheet.costpercapita_bz24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca24
  r = spreadsheet.costpercapita_ca24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc24
  r = spreadsheet.costpercapita_cc24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd24
  r = spreadsheet.costpercapita_cd24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf24
  r = spreadsheet.costpercapita_cf24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg24
  r = spreadsheet.costpercapita_cg24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch24
  r = spreadsheet.costpercapita_ch24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci24
  r = spreadsheet.costpercapita_ci24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj24
  r = spreadsheet.costpercapita_cj24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck24
  r = spreadsheet.costpercapita_ck24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl24
  r = spreadsheet.costpercapita_cl24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm24
  r = spreadsheet.costpercapita_cm24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn24
  r = spreadsheet.costpercapita_cn24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp24
  r = spreadsheet.costpercapita_cp24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq24
  r = spreadsheet.costpercapita_cq24
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr24
  r = spreadsheet.costpercapita_cr24
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a25
  r = spreadsheet.costpercapita_a25
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b25
  r = spreadsheet.costpercapita_b25
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c25
  r = spreadsheet.costpercapita_c25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e25
  r = spreadsheet.costpercapita_e25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f25
  r = spreadsheet.costpercapita_f25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g25
  r = spreadsheet.costpercapita_g25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h25
  r = spreadsheet.costpercapita_h25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i25
  r = spreadsheet.costpercapita_i25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j25
  r = spreadsheet.costpercapita_j25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k25
  r = spreadsheet.costpercapita_k25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l25
  r = spreadsheet.costpercapita_l25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m25
  r = spreadsheet.costpercapita_m25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o25
  r = spreadsheet.costpercapita_o25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p25
  r = spreadsheet.costpercapita_p25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q25
  r = spreadsheet.costpercapita_q25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r25
  r = spreadsheet.costpercapita_r25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s25
  r = spreadsheet.costpercapita_s25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t25
  r = spreadsheet.costpercapita_t25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u25
  r = spreadsheet.costpercapita_u25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v25
  r = spreadsheet.costpercapita_v25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w25
  r = spreadsheet.costpercapita_w25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y25
  r = spreadsheet.costpercapita_y25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z25
  r = spreadsheet.costpercapita_z25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa25
  r = spreadsheet.costpercapita_aa25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab25
  r = spreadsheet.costpercapita_ab25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac25
  r = spreadsheet.costpercapita_ac25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad25
  r = spreadsheet.costpercapita_ad25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae25
  r = spreadsheet.costpercapita_ae25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af25
  r = spreadsheet.costpercapita_af25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag25
  r = spreadsheet.costpercapita_ag25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai25
  r = spreadsheet.costpercapita_ai25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj25
  r = spreadsheet.costpercapita_aj25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak25
  r = spreadsheet.costpercapita_ak25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al25
  r = spreadsheet.costpercapita_al25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am25
  r = spreadsheet.costpercapita_am25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an25
  r = spreadsheet.costpercapita_an25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao25
  r = spreadsheet.costpercapita_ao25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap25
  r = spreadsheet.costpercapita_ap25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq25
  r = spreadsheet.costpercapita_aq25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as25
  r = spreadsheet.costpercapita_as25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at25
  r = spreadsheet.costpercapita_at25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av25
  r = spreadsheet.costpercapita_av25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw25
  r = spreadsheet.costpercapita_aw25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay25
  r = spreadsheet.costpercapita_ay25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az25
  r = spreadsheet.costpercapita_az25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba25
  r = spreadsheet.costpercapita_ba25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb25
  r = spreadsheet.costpercapita_bb25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc25
  r = spreadsheet.costpercapita_bc25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd25
  r = spreadsheet.costpercapita_bd25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be25
  r = spreadsheet.costpercapita_be25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf25
  r = spreadsheet.costpercapita_bf25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg25
  r = spreadsheet.costpercapita_bg25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi25
  r = spreadsheet.costpercapita_bi25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj25
  r = spreadsheet.costpercapita_bj25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk25
  r = spreadsheet.costpercapita_bk25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl25
  r = spreadsheet.costpercapita_bl25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm25
  r = spreadsheet.costpercapita_bm25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn25
  r = spreadsheet.costpercapita_bn25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo25
  r = spreadsheet.costpercapita_bo25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp25
  r = spreadsheet.costpercapita_bp25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq25
  r = spreadsheet.costpercapita_bq25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs25
  r = spreadsheet.costpercapita_bs25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt25
  r = spreadsheet.costpercapita_bt25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu25
  r = spreadsheet.costpercapita_bu25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv25
  r = spreadsheet.costpercapita_bv25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw25
  r = spreadsheet.costpercapita_bw25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx25
  r = spreadsheet.costpercapita_bx25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by25
  r = spreadsheet.costpercapita_by25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz25
  r = spreadsheet.costpercapita_bz25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca25
  r = spreadsheet.costpercapita_ca25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc25
  r = spreadsheet.costpercapita_cc25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd25
  r = spreadsheet.costpercapita_cd25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf25
  r = spreadsheet.costpercapita_cf25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg25
  r = spreadsheet.costpercapita_cg25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch25
  r = spreadsheet.costpercapita_ch25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci25
  r = spreadsheet.costpercapita_ci25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj25
  r = spreadsheet.costpercapita_cj25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck25
  r = spreadsheet.costpercapita_ck25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl25
  r = spreadsheet.costpercapita_cl25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm25
  r = spreadsheet.costpercapita_cm25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn25
  r = spreadsheet.costpercapita_cn25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp25
  r = spreadsheet.costpercapita_cp25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq25
  r = spreadsheet.costpercapita_cq25
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr25
  r = spreadsheet.costpercapita_cr25
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a26
  r = spreadsheet.costpercapita_a26
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b26
  r = spreadsheet.costpercapita_b26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c26
  r = spreadsheet.costpercapita_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e26
  r = spreadsheet.costpercapita_e26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.366044289235921,r[:number],0.001)
end

def test_costpercapita_f26
  r = spreadsheet.costpercapita_f26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.99691400116113,r[:number],0.001)
end

def test_costpercapita_g26
  r = spreadsheet.costpercapita_g26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.8460886951757,r[:number],0.001)
end

def test_costpercapita_h26
  r = spreadsheet.costpercapita_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.37377292979647,r[:number],0.001)
end

def test_costpercapita_i26
  r = spreadsheet.costpercapita_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.09854485221393,r[:number],0.001)
end

def test_costpercapita_j26
  r = spreadsheet.costpercapita_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.13018613496288,r[:number],0.001)
end

def test_costpercapita_k26
  r = spreadsheet.costpercapita_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.8666515042236,r[:number],0.001)
end

def test_costpercapita_l26
  r = spreadsheet.costpercapita_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.02201272616867,r[:number],0.001)
end

def test_costpercapita_m26
  r = spreadsheet.costpercapita_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.0580136707047,r[:number],0.001)
end

def test_costpercapita_o26
  r = spreadsheet.costpercapita_o26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.22369140817658,r[:number],0.001)
end

def test_costpercapita_p26
  r = spreadsheet.costpercapita_p26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.30857935174765,r[:number],0.001)
end

def test_costpercapita_q26
  r = spreadsheet.costpercapita_q26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.26391258222063,r[:number],0.001)
end

def test_costpercapita_r26
  r = spreadsheet.costpercapita_r26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.9960573350866,r[:number],0.001)
end

def test_costpercapita_s26
  r = spreadsheet.costpercapita_s26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.6409885927038,r[:number],0.001)
end

def test_costpercapita_t26
  r = spreadsheet.costpercapita_t26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.37656627179895,r[:number],0.001)
end

def test_costpercapita_u26
  r = spreadsheet.costpercapita_u26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.44941597113113,r[:number],0.001)
end

def test_costpercapita_v26
  r = spreadsheet.costpercapita_v26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.81498163620836,r[:number],0.001)
end

def test_costpercapita_w26
  r = spreadsheet.costpercapita_w26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48957995625537,r[:number],0.001)
end

def test_costpercapita_y26
  r = spreadsheet.costpercapita_y26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z26
  r = spreadsheet.costpercapita_z26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa26
  r = spreadsheet.costpercapita_aa26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab26
  r = spreadsheet.costpercapita_ab26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac26
  r = spreadsheet.costpercapita_ac26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad26
  r = spreadsheet.costpercapita_ad26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae26
  r = spreadsheet.costpercapita_ae26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af26
  r = spreadsheet.costpercapita_af26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag26
  r = spreadsheet.costpercapita_ag26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai26
  r = spreadsheet.costpercapita_ai26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.58973569741251,r[:number],0.001)
end

def test_costpercapita_aj26
  r = spreadsheet.costpercapita_aj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.30549335290877,r[:number],0.001)
end

def test_costpercapita_ak26
  r = spreadsheet.costpercapita_ak26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.11000127739635,r[:number],0.001)
end

def test_costpercapita_al26
  r = spreadsheet.costpercapita_al26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.3698302648831,r[:number],0.001)
end

def test_costpercapita_am26
  r = spreadsheet.costpercapita_am26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.73953344491773,r[:number],0.001)
end

def test_costpercapita_an26
  r = spreadsheet.costpercapita_an26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.50675240676188,r[:number],0.001)
end

def test_costpercapita_ao26
  r = spreadsheet.costpercapita_ao26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.31606747535477,r[:number],0.001)
end

def test_costpercapita_ap26
  r = spreadsheet.costpercapita_ap26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(267.8369943623771,r[:number],0.001)
end

def test_costpercapita_aq26
  r = spreadsheet.costpercapita_aq26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.54759362696007,r[:number],0.001)
end

def test_costpercapita_as26
  r = spreadsheet.costpercapita_as26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.48022243433024,r[:number],0.001)
end

def test_costpercapita_at26
  r = spreadsheet.costpercapita_at26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4287.9435509182085,r[:number],0.001)
end

def test_costpercapita_av26
  r = spreadsheet.costpercapita_av26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw26
  r = spreadsheet.costpercapita_aw26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay26
  r = spreadsheet.costpercapita_ay26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.219626573541552,r[:number],0.001)
end

def test_costpercapita_az26
  r = spreadsheet.costpercapita_az26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.99691400116114,r[:number],0.001)
end

def test_costpercapita_ba26
  r = spreadsheet.costpercapita_ba26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.8460886951757,r[:number],0.001)
end

def test_costpercapita_bb26
  r = spreadsheet.costpercapita_bb26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.37377292979647,r[:number],0.001)
end

def test_costpercapita_bc26
  r = spreadsheet.costpercapita_bc26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.09854485221393,r[:number],0.001)
end

def test_costpercapita_bd26
  r = spreadsheet.costpercapita_bd26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.13018613496288,r[:number],0.001)
end

def test_costpercapita_be26
  r = spreadsheet.costpercapita_be26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.8666515042236,r[:number],0.001)
end

def test_costpercapita_bf26
  r = spreadsheet.costpercapita_bf26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.0220127261687,r[:number],0.001)
end

def test_costpercapita_bg26
  r = spreadsheet.costpercapita_bg26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.05801367070472,r[:number],0.001)
end

def test_costpercapita_bi26
  r = spreadsheet.costpercapita_bi26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.219626573541552,r[:number],0.001)
end

def test_costpercapita_bj26
  r = spreadsheet.costpercapita_bj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.99691400116114,r[:number],0.001)
end

def test_costpercapita_bk26
  r = spreadsheet.costpercapita_bk26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.8460886951757,r[:number],0.001)
end

def test_costpercapita_bl26
  r = spreadsheet.costpercapita_bl26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.37377292979647,r[:number],0.001)
end

def test_costpercapita_bm26
  r = spreadsheet.costpercapita_bm26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.09854485221393,r[:number],0.001)
end

def test_costpercapita_bn26
  r = spreadsheet.costpercapita_bn26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.13018613496288,r[:number],0.001)
end

def test_costpercapita_bo26
  r = spreadsheet.costpercapita_bo26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.8666515042236,r[:number],0.001)
end

def test_costpercapita_bp26
  r = spreadsheet.costpercapita_bp26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.0220127261687,r[:number],0.001)
end

def test_costpercapita_bq26
  r = spreadsheet.costpercapita_bq26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.05801367070472,r[:number],0.001)
end

def test_costpercapita_bs26
  r = spreadsheet.costpercapita_bs26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.44331798171814,r[:number],0.001)
end

def test_costpercapita_bt26
  r = spreadsheet.costpercapita_bt26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.3054933529088,r[:number],0.001)
end

def test_costpercapita_bu26
  r = spreadsheet.costpercapita_bu26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.11000127739635,r[:number],0.001)
end

def test_costpercapita_bv26
  r = spreadsheet.costpercapita_bv26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.3698302648831,r[:number],0.001)
end

def test_costpercapita_bw26
  r = spreadsheet.costpercapita_bw26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.73953344491773,r[:number],0.001)
end

def test_costpercapita_bx26
  r = spreadsheet.costpercapita_bx26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.50675240676188,r[:number],0.001)
end

def test_costpercapita_by26
  r = spreadsheet.costpercapita_by26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.31606747535477,r[:number],0.001)
end

def test_costpercapita_bz26
  r = spreadsheet.costpercapita_bz26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(267.8369943623771,r[:number],0.001)
end

def test_costpercapita_ca26
  r = spreadsheet.costpercapita_ca26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.54759362696007,r[:number],0.001)
end

def test_costpercapita_cc26
  r = spreadsheet.costpercapita_cc26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207.7972871325864,r[:number],0.001)
end

def test_costpercapita_cd26
  r = spreadsheet.costpercapita_cd26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4281.797133202514,r[:number],0.001)
end

def test_costpercapita_cf26
  r = spreadsheet.costpercapita_cf26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.146417715694368,r[:number],0.001)
end

def test_costpercapita_cg26
  r = spreadsheet.costpercapita_cg26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch26
  r = spreadsheet.costpercapita_ch26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci26
  r = spreadsheet.costpercapita_ci26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj26
  r = spreadsheet.costpercapita_cj26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck26
  r = spreadsheet.costpercapita_ck26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl26
  r = spreadsheet.costpercapita_cl26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm26
  r = spreadsheet.costpercapita_cm26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn26
  r = spreadsheet.costpercapita_cn26
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp26
  r = spreadsheet.costpercapita_cp26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.6829353017438187,r[:number],0.001)
end

def test_costpercapita_cq26
  r = spreadsheet.costpercapita_cq26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.146417715694368,r[:number],0.001)
end

def test_costpercapita_cr26
  r = spreadsheet.costpercapita_cr26
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a27
  r = spreadsheet.costpercapita_a27
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b27
  r = spreadsheet.costpercapita_b27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c27
  r = spreadsheet.costpercapita_c27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e27
  r = spreadsheet.costpercapita_e27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.00682164100754,r[:number],0.001)
end

def test_costpercapita_f27
  r = spreadsheet.costpercapita_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number],0.001)
end

def test_costpercapita_g27
  r = spreadsheet.costpercapita_g27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6803049897874783,r[:number],0.001)
end

def test_costpercapita_h27
  r = spreadsheet.costpercapita_h27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.659240383412685,r[:number],0.001)
end

def test_costpercapita_i27
  r = spreadsheet.costpercapita_i27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6412298352105243,r[:number],0.001)
end

def test_costpercapita_j27
  r = spreadsheet.costpercapita_j27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6261252202641515,r[:number],0.001)
end

def test_costpercapita_k27
  r = spreadsheet.costpercapita_k27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6127722319699723,r[:number],0.001)
end

def test_costpercapita_l27
  r = spreadsheet.costpercapita_l27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6005486972205223,r[:number],0.001)
end

def test_costpercapita_m27
  r = spreadsheet.costpercapita_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5893414164417934,r[:number],0.001)
end

def test_costpercapita_o27
  r = spreadsheet.costpercapita_o27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p27
  r = spreadsheet.costpercapita_p27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q27
  r = spreadsheet.costpercapita_q27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r27
  r = spreadsheet.costpercapita_r27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s27
  r = spreadsheet.costpercapita_s27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t27
  r = spreadsheet.costpercapita_t27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u27
  r = spreadsheet.costpercapita_u27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v27
  r = spreadsheet.costpercapita_v27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w27
  r = spreadsheet.costpercapita_w27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y27
  r = spreadsheet.costpercapita_y27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z27
  r = spreadsheet.costpercapita_z27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa27
  r = spreadsheet.costpercapita_aa27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab27
  r = spreadsheet.costpercapita_ab27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac27
  r = spreadsheet.costpercapita_ac27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad27
  r = spreadsheet.costpercapita_ad27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae27
  r = spreadsheet.costpercapita_ae27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af27
  r = spreadsheet.costpercapita_af27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag27
  r = spreadsheet.costpercapita_ag27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai27
  r = spreadsheet.costpercapita_ai27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.00682164100754,r[:number],0.001)
end

def test_costpercapita_aj27
  r = spreadsheet.costpercapita_aj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number],0.001)
end

def test_costpercapita_ak27
  r = spreadsheet.costpercapita_ak27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6803049897874783,r[:number],0.001)
end

def test_costpercapita_al27
  r = spreadsheet.costpercapita_al27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.659240383412685,r[:number],0.001)
end

def test_costpercapita_am27
  r = spreadsheet.costpercapita_am27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6412298352105243,r[:number],0.001)
end

def test_costpercapita_an27
  r = spreadsheet.costpercapita_an27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6261252202641515,r[:number],0.001)
end

def test_costpercapita_ao27
  r = spreadsheet.costpercapita_ao27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6127722319699723,r[:number],0.001)
end

def test_costpercapita_ap27
  r = spreadsheet.costpercapita_ap27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6005486972205223,r[:number],0.001)
end

def test_costpercapita_aq27
  r = spreadsheet.costpercapita_aq27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5893414164417934,r[:number],0.001)
end

def test_costpercapita_as27
  r = spreadsheet.costpercapita_as27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6165212602831227,r[:number],0.001)
end

def test_costpercapita_at27
  r = spreadsheet.costpercapita_at27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.303909786451165,r[:number],0.001)
end

def test_costpercapita_av27
  r = spreadsheet.costpercapita_av27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw27
  r = spreadsheet.costpercapita_aw27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay27
  r = spreadsheet.costpercapita_ay27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.204092984604524,r[:number],0.001)
end

def test_costpercapita_az27
  r = spreadsheet.costpercapita_az27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number],0.001)
end

def test_costpercapita_ba27
  r = spreadsheet.costpercapita_ba27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6803049897874783,r[:number],0.001)
end

def test_costpercapita_bb27
  r = spreadsheet.costpercapita_bb27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.659240383412685,r[:number],0.001)
end

def test_costpercapita_bc27
  r = spreadsheet.costpercapita_bc27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6412298352105243,r[:number],0.001)
end

def test_costpercapita_bd27
  r = spreadsheet.costpercapita_bd27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6261252202641515,r[:number],0.001)
end

def test_costpercapita_be27
  r = spreadsheet.costpercapita_be27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6127722319699723,r[:number],0.001)
end

def test_costpercapita_bf27
  r = spreadsheet.costpercapita_bf27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6005486972205223,r[:number],0.001)
end

def test_costpercapita_bg27
  r = spreadsheet.costpercapita_bg27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5893414164417934,r[:number],0.001)
end

def test_costpercapita_bi27
  r = spreadsheet.costpercapita_bi27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.204092984604524,r[:number],0.001)
end

def test_costpercapita_bj27
  r = spreadsheet.costpercapita_bj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number],0.001)
end

def test_costpercapita_bk27
  r = spreadsheet.costpercapita_bk27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6803049897874783,r[:number],0.001)
end

def test_costpercapita_bl27
  r = spreadsheet.costpercapita_bl27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.659240383412685,r[:number],0.001)
end

def test_costpercapita_bm27
  r = spreadsheet.costpercapita_bm27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6412298352105243,r[:number],0.001)
end

def test_costpercapita_bn27
  r = spreadsheet.costpercapita_bn27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6261252202641515,r[:number],0.001)
end

def test_costpercapita_bo27
  r = spreadsheet.costpercapita_bo27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6127722319699723,r[:number],0.001)
end

def test_costpercapita_bp27
  r = spreadsheet.costpercapita_bp27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6005486972205223,r[:number],0.001)
end

def test_costpercapita_bq27
  r = spreadsheet.costpercapita_bq27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5893414164417934,r[:number],0.001)
end

def test_costpercapita_bs27
  r = spreadsheet.costpercapita_bs27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.204092984604524,r[:number],0.001)
end

def test_costpercapita_bt27
  r = spreadsheet.costpercapita_bt27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number],0.001)
end

def test_costpercapita_bu27
  r = spreadsheet.costpercapita_bu27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6803049897874783,r[:number],0.001)
end

def test_costpercapita_bv27
  r = spreadsheet.costpercapita_bv27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.659240383412685,r[:number],0.001)
end

def test_costpercapita_bw27
  r = spreadsheet.costpercapita_bw27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6412298352105243,r[:number],0.001)
end

def test_costpercapita_bx27
  r = spreadsheet.costpercapita_bx27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6261252202641515,r[:number],0.001)
end

def test_costpercapita_by27
  r = spreadsheet.costpercapita_by27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6127722319699723,r[:number],0.001)
end

def test_costpercapita_bz27
  r = spreadsheet.costpercapita_bz27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6005486972205223,r[:number],0.001)
end

def test_costpercapita_ca27
  r = spreadsheet.costpercapita_ca27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5893414164417934,r[:number],0.001)
end

def test_costpercapita_cc27
  r = spreadsheet.costpercapita_cc27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.305106965127232,r[:number],0.001)
end

def test_costpercapita_cd27
  r = spreadsheet.costpercapita_cd27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.50118113004815,r[:number],0.001)
end

def test_costpercapita_cf27
  r = spreadsheet.costpercapita_cf27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8027286564030156,r[:number],0.001)
end

def test_costpercapita_cg27
  r = spreadsheet.costpercapita_cg27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch27
  r = spreadsheet.costpercapita_ch27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci27
  r = spreadsheet.costpercapita_ci27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj27
  r = spreadsheet.costpercapita_cj27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck27
  r = spreadsheet.costpercapita_ck27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl27
  r = spreadsheet.costpercapita_cl27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm27
  r = spreadsheet.costpercapita_cm27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn27
  r = spreadsheet.costpercapita_cn27
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp27
  r = spreadsheet.costpercapita_cp27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.31141429515589064,r[:number],0.001)
end

def test_costpercapita_cq27
  r = spreadsheet.costpercapita_cq27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.8027286564030156,r[:number],0.001)
end

def test_costpercapita_cr27
  r = spreadsheet.costpercapita_cr27
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a28
  r = spreadsheet.costpercapita_a28
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b28
  r = spreadsheet.costpercapita_b28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c28
  r = spreadsheet.costpercapita_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e28
  r = spreadsheet.costpercapita_e28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2542.156922787044,r[:number],0.001)
end

def test_costpercapita_f28
  r = spreadsheet.costpercapita_f28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30842.36683559418,r[:number],0.001)
end

def test_costpercapita_g28
  r = spreadsheet.costpercapita_g28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36320.24243509838,r[:number],0.001)
end

def test_costpercapita_h28
  r = spreadsheet.costpercapita_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41481.26425883655,r[:number],0.001)
end

def test_costpercapita_i28
  r = spreadsheet.costpercapita_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46460.823722409456,r[:number],0.001)
end

def test_costpercapita_j28
  r = spreadsheet.costpercapita_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51334.210939003366,r[:number],0.001)
end

def test_costpercapita_k28
  r = spreadsheet.costpercapita_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56078.95673230588,r[:number],0.001)
end

def test_costpercapita_l28
  r = spreadsheet.costpercapita_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60720.04193217228,r[:number],0.001)
end

def test_costpercapita_m28
  r = spreadsheet.costpercapita_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65254.783659165434,r[:number],0.001)
end

def test_costpercapita_o28
  r = spreadsheet.costpercapita_o28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.89731293791881,r[:number],0.001)
end

def test_costpercapita_p28
  r = spreadsheet.costpercapita_p28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.47313911497827,r[:number],0.001)
end

def test_costpercapita_q28
  r = spreadsheet.costpercapita_q28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(491.84723992923944,r[:number],0.001)
end

def test_costpercapita_r28
  r = spreadsheet.costpercapita_r28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(698.2487286665206,r[:number],0.001)
end

def test_costpercapita_s28
  r = spreadsheet.costpercapita_s28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(919.7648559064819,r[:number],0.001)
end

def test_costpercapita_t28
  r = spreadsheet.costpercapita_t28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1157.4583992211747,r[:number],0.001)
end

def test_costpercapita_u28
  r = spreadsheet.costpercapita_u28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1410.5224883925991,r[:number],0.001)
end

def test_costpercapita_v28
  r = spreadsheet.costpercapita_v28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1678.044657791,r[:number],0.001)
end

def test_costpercapita_w28
  r = spreadsheet.costpercapita_w28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1959.8931074459877,r[:number],0.001)
end

def test_costpercapita_y28
  r = spreadsheet.costpercapita_y28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z28
  r = spreadsheet.costpercapita_z28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa28
  r = spreadsheet.costpercapita_aa28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab28
  r = spreadsheet.costpercapita_ab28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac28
  r = spreadsheet.costpercapita_ac28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad28
  r = spreadsheet.costpercapita_ad28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae28
  r = spreadsheet.costpercapita_ae28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af28
  r = spreadsheet.costpercapita_af28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag28
  r = spreadsheet.costpercapita_ag28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai28
  r = spreadsheet.costpercapita_ai28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2664.054235724963,r[:number],0.001)
end

def test_costpercapita_aj28
  r = spreadsheet.costpercapita_aj28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31141.839974709157,r[:number],0.001)
end

def test_costpercapita_ak28
  r = spreadsheet.costpercapita_ak28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36812.089675027615,r[:number],0.001)
end

def test_costpercapita_al28
  r = spreadsheet.costpercapita_al28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42179.512987503076,r[:number],0.001)
end

def test_costpercapita_am28
  r = spreadsheet.costpercapita_am28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47380.58857831593,r[:number],0.001)
end

def test_costpercapita_an28
  r = spreadsheet.costpercapita_an28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52491.669338224536,r[:number],0.001)
end

def test_costpercapita_ao28
  r = spreadsheet.costpercapita_ao28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57489.47922069848,r[:number],0.001)
end

def test_costpercapita_ap28
  r = spreadsheet.costpercapita_ap28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62398.086589963284,r[:number],0.001)
end

def test_costpercapita_aq28
  r = spreadsheet.costpercapita_aq28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67214.67676661143,r[:number],0.001)
end

def test_costpercapita_as28
  r = spreadsheet.costpercapita_as28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44419.11081853095,r[:number],0.001)
end

def test_costpercapita_at28
  r = spreadsheet.costpercapita_at28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(907641.0842306339,r[:number],0.001)
end

def test_costpercapita_av28
  r = spreadsheet.costpercapita_av28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw28
  r = spreadsheet.costpercapita_aw28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay28
  r = spreadsheet.costpercapita_ay28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1525.2941536722262,r[:number],0.001)
end

def test_costpercapita_az28
  r = spreadsheet.costpercapita_az28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30842.36683559418,r[:number],0.001)
end

def test_costpercapita_ba28
  r = spreadsheet.costpercapita_ba28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36320.24243509838,r[:number],0.001)
end

def test_costpercapita_bb28
  r = spreadsheet.costpercapita_bb28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41481.26425883655,r[:number],0.001)
end

def test_costpercapita_bc28
  r = spreadsheet.costpercapita_bc28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46460.823722409456,r[:number],0.001)
end

def test_costpercapita_bd28
  r = spreadsheet.costpercapita_bd28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51334.210939003366,r[:number],0.001)
end

def test_costpercapita_be28
  r = spreadsheet.costpercapita_be28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56078.95673230588,r[:number],0.001)
end

def test_costpercapita_bf28
  r = spreadsheet.costpercapita_bf28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60720.04193217228,r[:number],0.001)
end

def test_costpercapita_bg28
  r = spreadsheet.costpercapita_bg28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65254.783659165434,r[:number],0.001)
end

def test_costpercapita_bi28
  r = spreadsheet.costpercapita_bi28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1525.2941536722262,r[:number],0.001)
end

def test_costpercapita_bj28
  r = spreadsheet.costpercapita_bj28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30842.36683559418,r[:number],0.001)
end

def test_costpercapita_bk28
  r = spreadsheet.costpercapita_bk28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36320.24243509838,r[:number],0.001)
end

def test_costpercapita_bl28
  r = spreadsheet.costpercapita_bl28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41481.26425883655,r[:number],0.001)
end

def test_costpercapita_bm28
  r = spreadsheet.costpercapita_bm28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46460.823722409456,r[:number],0.001)
end

def test_costpercapita_bn28
  r = spreadsheet.costpercapita_bn28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51334.210939003366,r[:number],0.001)
end

def test_costpercapita_bo28
  r = spreadsheet.costpercapita_bo28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56078.95673230588,r[:number],0.001)
end

def test_costpercapita_bp28
  r = spreadsheet.costpercapita_bp28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60720.04193217228,r[:number],0.001)
end

def test_costpercapita_bq28
  r = spreadsheet.costpercapita_bq28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65254.783659165434,r[:number],0.001)
end

def test_costpercapita_bs28
  r = spreadsheet.costpercapita_bs28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1647.1914666101452,r[:number],0.001)
end

def test_costpercapita_bt28
  r = spreadsheet.costpercapita_bt28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31141.839974709157,r[:number],0.001)
end

def test_costpercapita_bu28
  r = spreadsheet.costpercapita_bu28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36812.089675027615,r[:number],0.001)
end

def test_costpercapita_bv28
  r = spreadsheet.costpercapita_bv28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42179.512987503076,r[:number],0.001)
end

def test_costpercapita_bw28
  r = spreadsheet.costpercapita_bw28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47380.58857831593,r[:number],0.001)
end

def test_costpercapita_bx28
  r = spreadsheet.costpercapita_bx28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52491.669338224536,r[:number],0.001)
end

def test_costpercapita_by28
  r = spreadsheet.costpercapita_by28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57489.47922069848,r[:number],0.001)
end

def test_costpercapita_bz28
  r = spreadsheet.costpercapita_bz28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62398.086589963284,r[:number],0.001)
end

def test_costpercapita_ca28
  r = spreadsheet.costpercapita_ca28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67214.67676661143,r[:number],0.001)
end

def test_costpercapita_cc28
  r = spreadsheet.costpercapita_cc28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44306.12606640707,r[:number],0.001)
end

def test_costpercapita_cd28
  r = spreadsheet.costpercapita_cd28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906624.2214615191,r[:number],0.001)
end

def test_costpercapita_cf28
  r = spreadsheet.costpercapita_cf28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1016.8627691148178,r[:number],0.001)
end

def test_costpercapita_cg28
  r = spreadsheet.costpercapita_cg28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch28
  r = spreadsheet.costpercapita_ch28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci28
  r = spreadsheet.costpercapita_ci28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj28
  r = spreadsheet.costpercapita_cj28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck28
  r = spreadsheet.costpercapita_ck28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl28
  r = spreadsheet.costpercapita_cl28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm28
  r = spreadsheet.costpercapita_cm28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn28
  r = spreadsheet.costpercapita_cn28
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp28
  r = spreadsheet.costpercapita_cp28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-112.98475212386865,r[:number],0.001)
end

def test_costpercapita_cq28
  r = spreadsheet.costpercapita_cq28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1016.8627691148178,r[:number],0.001)
end

def test_costpercapita_cr28
  r = spreadsheet.costpercapita_cr28
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a29
  r = spreadsheet.costpercapita_a29
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b29
  r = spreadsheet.costpercapita_b29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c29
  r = spreadsheet.costpercapita_c29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e29
  r = spreadsheet.costpercapita_e29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.25458564664322,r[:number],0.001)
end

def test_costpercapita_f29
  r = spreadsheet.costpercapita_f29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number],0.001)
end

def test_costpercapita_g29
  r = spreadsheet.costpercapita_g29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number],0.001)
end

def test_costpercapita_h29
  r = spreadsheet.costpercapita_h29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number],0.001)
end

def test_costpercapita_i29
  r = spreadsheet.costpercapita_i29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number],0.001)
end

def test_costpercapita_j29
  r = spreadsheet.costpercapita_j29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number],0.001)
end

def test_costpercapita_k29
  r = spreadsheet.costpercapita_k29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number],0.001)
end

def test_costpercapita_l29
  r = spreadsheet.costpercapita_l29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number],0.001)
end

def test_costpercapita_m29
  r = spreadsheet.costpercapita_m29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number],0.001)
end

def test_costpercapita_o29
  r = spreadsheet.costpercapita_o29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p29
  r = spreadsheet.costpercapita_p29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q29
  r = spreadsheet.costpercapita_q29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r29
  r = spreadsheet.costpercapita_r29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s29
  r = spreadsheet.costpercapita_s29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t29
  r = spreadsheet.costpercapita_t29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u29
  r = spreadsheet.costpercapita_u29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v29
  r = spreadsheet.costpercapita_v29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w29
  r = spreadsheet.costpercapita_w29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y29
  r = spreadsheet.costpercapita_y29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z29
  r = spreadsheet.costpercapita_z29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa29
  r = spreadsheet.costpercapita_aa29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab29
  r = spreadsheet.costpercapita_ab29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac29
  r = spreadsheet.costpercapita_ac29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad29
  r = spreadsheet.costpercapita_ad29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae29
  r = spreadsheet.costpercapita_ae29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af29
  r = spreadsheet.costpercapita_af29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag29
  r = spreadsheet.costpercapita_ag29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai29
  r = spreadsheet.costpercapita_ai29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.25458564664322,r[:number],0.001)
end

def test_costpercapita_aj29
  r = spreadsheet.costpercapita_aj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number],0.001)
end

def test_costpercapita_ak29
  r = spreadsheet.costpercapita_ak29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number],0.001)
end

def test_costpercapita_al29
  r = spreadsheet.costpercapita_al29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number],0.001)
end

def test_costpercapita_am29
  r = spreadsheet.costpercapita_am29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number],0.001)
end

def test_costpercapita_an29
  r = spreadsheet.costpercapita_an29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number],0.001)
end

def test_costpercapita_ao29
  r = spreadsheet.costpercapita_ao29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number],0.001)
end

def test_costpercapita_ap29
  r = spreadsheet.costpercapita_ap29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number],0.001)
end

def test_costpercapita_aq29
  r = spreadsheet.costpercapita_aq29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number],0.001)
end

def test_costpercapita_as29
  r = spreadsheet.costpercapita_as29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.64321700701357,r[:number],0.001)
end

def test_costpercapita_at29
  r = spreadsheet.costpercapita_at29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(866.2507209717971,r[:number],0.001)
end

def test_costpercapita_av29
  r = spreadsheet.costpercapita_av29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw29
  r = spreadsheet.costpercapita_aw29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay29
  r = spreadsheet.costpercapita_ay29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.352751387985933,r[:number],0.001)
end

def test_costpercapita_az29
  r = spreadsheet.costpercapita_az29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number],0.001)
end

def test_costpercapita_ba29
  r = spreadsheet.costpercapita_ba29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number],0.001)
end

def test_costpercapita_bb29
  r = spreadsheet.costpercapita_bb29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number],0.001)
end

def test_costpercapita_bc29
  r = spreadsheet.costpercapita_bc29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number],0.001)
end

def test_costpercapita_bd29
  r = spreadsheet.costpercapita_bd29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number],0.001)
end

def test_costpercapita_be29
  r = spreadsheet.costpercapita_be29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number],0.001)
end

def test_costpercapita_bf29
  r = spreadsheet.costpercapita_bf29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number],0.001)
end

def test_costpercapita_bg29
  r = spreadsheet.costpercapita_bg29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number],0.001)
end

def test_costpercapita_bi29
  r = spreadsheet.costpercapita_bi29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.352751387985933,r[:number],0.001)
end

def test_costpercapita_bj29
  r = spreadsheet.costpercapita_bj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number],0.001)
end

def test_costpercapita_bk29
  r = spreadsheet.costpercapita_bk29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number],0.001)
end

def test_costpercapita_bl29
  r = spreadsheet.costpercapita_bl29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number],0.001)
end

def test_costpercapita_bm29
  r = spreadsheet.costpercapita_bm29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number],0.001)
end

def test_costpercapita_bn29
  r = spreadsheet.costpercapita_bn29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number],0.001)
end

def test_costpercapita_bo29
  r = spreadsheet.costpercapita_bo29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number],0.001)
end

def test_costpercapita_bp29
  r = spreadsheet.costpercapita_bp29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number],0.001)
end

def test_costpercapita_bq29
  r = spreadsheet.costpercapita_bq29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number],0.001)
end

def test_costpercapita_bs29
  r = spreadsheet.costpercapita_bs29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.352751387985933,r[:number],0.001)
end

def test_costpercapita_bt29
  r = spreadsheet.costpercapita_bt29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number],0.001)
end

def test_costpercapita_bu29
  r = spreadsheet.costpercapita_bu29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number],0.001)
end

def test_costpercapita_bv29
  r = spreadsheet.costpercapita_bv29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number],0.001)
end

def test_costpercapita_bw29
  r = spreadsheet.costpercapita_bw29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number],0.001)
end

def test_costpercapita_bx29
  r = spreadsheet.costpercapita_bx29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number],0.001)
end

def test_costpercapita_by29
  r = spreadsheet.costpercapita_by29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number],0.001)
end

def test_costpercapita_bz29
  r = spreadsheet.costpercapita_bz29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number],0.001)
end

def test_costpercapita_ca29
  r = spreadsheet.costpercapita_ca29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number],0.001)
end

def test_costpercapita_cc29
  r = spreadsheet.costpercapita_cc29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.987457644940534,r[:number],0.001)
end

def test_costpercapita_cd29
  r = spreadsheet.costpercapita_cd29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(851.3488867131398,r[:number],0.001)
end

def test_costpercapita_cf29
  r = spreadsheet.costpercapita_cf29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.901834258657289,r[:number],0.001)
end

def test_costpercapita_cg29
  r = spreadsheet.costpercapita_cg29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch29
  r = spreadsheet.costpercapita_ch29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci29
  r = spreadsheet.costpercapita_ci29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj29
  r = spreadsheet.costpercapita_cj29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck29
  r = spreadsheet.costpercapita_ck29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl29
  r = spreadsheet.costpercapita_cl29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm29
  r = spreadsheet.costpercapita_cm29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn29
  r = spreadsheet.costpercapita_cn29
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp29
  r = spreadsheet.costpercapita_cp29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.655759362073032,r[:number],0.001)
end

def test_costpercapita_cq29
  r = spreadsheet.costpercapita_cq29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.901834258657289,r[:number],0.001)
end

def test_costpercapita_cr29
  r = spreadsheet.costpercapita_cr29
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a30
  r = spreadsheet.costpercapita_a30
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b30
  r = spreadsheet.costpercapita_b30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c30
  r = spreadsheet.costpercapita_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e30
  r = spreadsheet.costpercapita_e30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f30
  r = spreadsheet.costpercapita_f30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g30
  r = spreadsheet.costpercapita_g30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h30
  r = spreadsheet.costpercapita_h30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i30
  r = spreadsheet.costpercapita_i30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j30
  r = spreadsheet.costpercapita_j30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k30
  r = spreadsheet.costpercapita_k30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l30
  r = spreadsheet.costpercapita_l30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m30
  r = spreadsheet.costpercapita_m30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o30
  r = spreadsheet.costpercapita_o30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p30
  r = spreadsheet.costpercapita_p30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q30
  r = spreadsheet.costpercapita_q30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r30
  r = spreadsheet.costpercapita_r30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s30
  r = spreadsheet.costpercapita_s30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t30
  r = spreadsheet.costpercapita_t30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u30
  r = spreadsheet.costpercapita_u30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v30
  r = spreadsheet.costpercapita_v30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w30
  r = spreadsheet.costpercapita_w30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y30
  r = spreadsheet.costpercapita_y30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z30
  r = spreadsheet.costpercapita_z30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa30
  r = spreadsheet.costpercapita_aa30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab30
  r = spreadsheet.costpercapita_ab30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac30
  r = spreadsheet.costpercapita_ac30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad30
  r = spreadsheet.costpercapita_ad30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae30
  r = spreadsheet.costpercapita_ae30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af30
  r = spreadsheet.costpercapita_af30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag30
  r = spreadsheet.costpercapita_ag30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai30
  r = spreadsheet.costpercapita_ai30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj30
  r = spreadsheet.costpercapita_aj30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak30
  r = spreadsheet.costpercapita_ak30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al30
  r = spreadsheet.costpercapita_al30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am30
  r = spreadsheet.costpercapita_am30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an30
  r = spreadsheet.costpercapita_an30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao30
  r = spreadsheet.costpercapita_ao30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap30
  r = spreadsheet.costpercapita_ap30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq30
  r = spreadsheet.costpercapita_aq30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as30
  r = spreadsheet.costpercapita_as30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at30
  r = spreadsheet.costpercapita_at30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av30
  r = spreadsheet.costpercapita_av30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw30
  r = spreadsheet.costpercapita_aw30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay30
  r = spreadsheet.costpercapita_ay30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az30
  r = spreadsheet.costpercapita_az30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba30
  r = spreadsheet.costpercapita_ba30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb30
  r = spreadsheet.costpercapita_bb30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc30
  r = spreadsheet.costpercapita_bc30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd30
  r = spreadsheet.costpercapita_bd30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be30
  r = spreadsheet.costpercapita_be30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf30
  r = spreadsheet.costpercapita_bf30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg30
  r = spreadsheet.costpercapita_bg30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi30
  r = spreadsheet.costpercapita_bi30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj30
  r = spreadsheet.costpercapita_bj30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk30
  r = spreadsheet.costpercapita_bk30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl30
  r = spreadsheet.costpercapita_bl30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm30
  r = spreadsheet.costpercapita_bm30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn30
  r = spreadsheet.costpercapita_bn30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo30
  r = spreadsheet.costpercapita_bo30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp30
  r = spreadsheet.costpercapita_bp30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq30
  r = spreadsheet.costpercapita_bq30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs30
  r = spreadsheet.costpercapita_bs30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt30
  r = spreadsheet.costpercapita_bt30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu30
  r = spreadsheet.costpercapita_bu30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv30
  r = spreadsheet.costpercapita_bv30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw30
  r = spreadsheet.costpercapita_bw30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx30
  r = spreadsheet.costpercapita_bx30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by30
  r = spreadsheet.costpercapita_by30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz30
  r = spreadsheet.costpercapita_bz30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca30
  r = spreadsheet.costpercapita_ca30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc30
  r = spreadsheet.costpercapita_cc30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd30
  r = spreadsheet.costpercapita_cd30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf30
  r = spreadsheet.costpercapita_cf30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg30
  r = spreadsheet.costpercapita_cg30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch30
  r = spreadsheet.costpercapita_ch30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci30
  r = spreadsheet.costpercapita_ci30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj30
  r = spreadsheet.costpercapita_cj30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck30
  r = spreadsheet.costpercapita_ck30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl30
  r = spreadsheet.costpercapita_cl30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm30
  r = spreadsheet.costpercapita_cm30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn30
  r = spreadsheet.costpercapita_cn30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp30
  r = spreadsheet.costpercapita_cp30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq30
  r = spreadsheet.costpercapita_cq30
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr30
  r = spreadsheet.costpercapita_cr30
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a31
  r = spreadsheet.costpercapita_a31
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b31
  r = spreadsheet.costpercapita_b31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c31
  r = spreadsheet.costpercapita_c31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e31
  r = spreadsheet.costpercapita_e31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f31
  r = spreadsheet.costpercapita_f31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g31
  r = spreadsheet.costpercapita_g31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h31
  r = spreadsheet.costpercapita_h31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i31
  r = spreadsheet.costpercapita_i31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j31
  r = spreadsheet.costpercapita_j31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k31
  r = spreadsheet.costpercapita_k31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l31
  r = spreadsheet.costpercapita_l31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m31
  r = spreadsheet.costpercapita_m31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o31
  r = spreadsheet.costpercapita_o31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p31
  r = spreadsheet.costpercapita_p31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q31
  r = spreadsheet.costpercapita_q31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r31
  r = spreadsheet.costpercapita_r31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s31
  r = spreadsheet.costpercapita_s31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t31
  r = spreadsheet.costpercapita_t31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u31
  r = spreadsheet.costpercapita_u31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v31
  r = spreadsheet.costpercapita_v31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w31
  r = spreadsheet.costpercapita_w31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y31
  r = spreadsheet.costpercapita_y31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z31
  r = spreadsheet.costpercapita_z31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa31
  r = spreadsheet.costpercapita_aa31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab31
  r = spreadsheet.costpercapita_ab31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac31
  r = spreadsheet.costpercapita_ac31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad31
  r = spreadsheet.costpercapita_ad31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae31
  r = spreadsheet.costpercapita_ae31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af31
  r = spreadsheet.costpercapita_af31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag31
  r = spreadsheet.costpercapita_ag31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai31
  r = spreadsheet.costpercapita_ai31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj31
  r = spreadsheet.costpercapita_aj31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak31
  r = spreadsheet.costpercapita_ak31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al31
  r = spreadsheet.costpercapita_al31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am31
  r = spreadsheet.costpercapita_am31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an31
  r = spreadsheet.costpercapita_an31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao31
  r = spreadsheet.costpercapita_ao31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap31
  r = spreadsheet.costpercapita_ap31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq31
  r = spreadsheet.costpercapita_aq31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as31
  r = spreadsheet.costpercapita_as31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at31
  r = spreadsheet.costpercapita_at31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av31
  r = spreadsheet.costpercapita_av31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw31
  r = spreadsheet.costpercapita_aw31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay31
  r = spreadsheet.costpercapita_ay31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az31
  r = spreadsheet.costpercapita_az31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba31
  r = spreadsheet.costpercapita_ba31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb31
  r = spreadsheet.costpercapita_bb31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc31
  r = spreadsheet.costpercapita_bc31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd31
  r = spreadsheet.costpercapita_bd31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be31
  r = spreadsheet.costpercapita_be31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf31
  r = spreadsheet.costpercapita_bf31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg31
  r = spreadsheet.costpercapita_bg31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi31
  r = spreadsheet.costpercapita_bi31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj31
  r = spreadsheet.costpercapita_bj31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk31
  r = spreadsheet.costpercapita_bk31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl31
  r = spreadsheet.costpercapita_bl31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm31
  r = spreadsheet.costpercapita_bm31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn31
  r = spreadsheet.costpercapita_bn31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo31
  r = spreadsheet.costpercapita_bo31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp31
  r = spreadsheet.costpercapita_bp31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq31
  r = spreadsheet.costpercapita_bq31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs31
  r = spreadsheet.costpercapita_bs31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt31
  r = spreadsheet.costpercapita_bt31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu31
  r = spreadsheet.costpercapita_bu31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv31
  r = spreadsheet.costpercapita_bv31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw31
  r = spreadsheet.costpercapita_bw31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx31
  r = spreadsheet.costpercapita_bx31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by31
  r = spreadsheet.costpercapita_by31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz31
  r = spreadsheet.costpercapita_bz31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca31
  r = spreadsheet.costpercapita_ca31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc31
  r = spreadsheet.costpercapita_cc31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd31
  r = spreadsheet.costpercapita_cd31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf31
  r = spreadsheet.costpercapita_cf31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg31
  r = spreadsheet.costpercapita_cg31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch31
  r = spreadsheet.costpercapita_ch31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci31
  r = spreadsheet.costpercapita_ci31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj31
  r = spreadsheet.costpercapita_cj31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck31
  r = spreadsheet.costpercapita_ck31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl31
  r = spreadsheet.costpercapita_cl31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm31
  r = spreadsheet.costpercapita_cm31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn31
  r = spreadsheet.costpercapita_cn31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp31
  r = spreadsheet.costpercapita_cp31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq31
  r = spreadsheet.costpercapita_cq31
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr31
  r = spreadsheet.costpercapita_cr31
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a32
  r = spreadsheet.costpercapita_a32
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.ICE",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b32
  r = spreadsheet.costpercapita_b32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c32
  r = spreadsheet.costpercapita_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e32
  r = spreadsheet.costpercapita_e32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23238.70511259442,r[:number],0.001)
end

def test_costpercapita_f32
  r = spreadsheet.costpercapita_f32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50469.68520053892,r[:number],0.001)
end

def test_costpercapita_g32
  r = spreadsheet.costpercapita_g32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65399.86141549381,r[:number],0.001)
end

def test_costpercapita_h32
  r = spreadsheet.costpercapita_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77184.8693705736,r[:number],0.001)
end

def test_costpercapita_i32
  r = spreadsheet.costpercapita_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90251.19419258885,r[:number],0.001)
end

def test_costpercapita_j32
  r = spreadsheet.costpercapita_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102771.64059758873,r[:number],0.001)
end

def test_costpercapita_k32
  r = spreadsheet.costpercapita_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115813.73129622925,r[:number],0.001)
end

def test_costpercapita_l32
  r = spreadsheet.costpercapita_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131265.55273868842,r[:number],0.001)
end

def test_costpercapita_m32
  r = spreadsheet.costpercapita_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146647.82402868278,r[:number],0.001)
end

def test_costpercapita_o32
  r = spreadsheet.costpercapita_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27533.355005153106,r[:number],0.001)
end

def test_costpercapita_p32
  r = spreadsheet.costpercapita_p32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37511.6753940145,r[:number],0.001)
end

def test_costpercapita_q32
  r = spreadsheet.costpercapita_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45867.27700022531,r[:number],0.001)
end

def test_costpercapita_r32
  r = spreadsheet.costpercapita_r32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50402.254515034656,r[:number],0.001)
end

def test_costpercapita_s32
  r = spreadsheet.costpercapita_s32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51834.21614824535,r[:number],0.001)
end

def test_costpercapita_t32
  r = spreadsheet.costpercapita_t32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49729.03931707973,r[:number],0.001)
end

def test_costpercapita_u32
  r = spreadsheet.costpercapita_u32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44059.1894863953,r[:number],0.001)
end

def test_costpercapita_v32
  r = spreadsheet.costpercapita_v32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34930.830303515744,r[:number],0.001)
end

def test_costpercapita_w32
  r = spreadsheet.costpercapita_w32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21649.013600578874,r[:number],0.001)
end

def test_costpercapita_y32
  r = spreadsheet.costpercapita_y32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z32
  r = spreadsheet.costpercapita_z32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa32
  r = spreadsheet.costpercapita_aa32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab32
  r = spreadsheet.costpercapita_ab32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac32
  r = spreadsheet.costpercapita_ac32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad32
  r = spreadsheet.costpercapita_ad32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae32
  r = spreadsheet.costpercapita_ae32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af32
  r = spreadsheet.costpercapita_af32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag32
  r = spreadsheet.costpercapita_ag32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai32
  r = spreadsheet.costpercapita_ai32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50772.06011774753,r[:number],0.001)
end

def test_costpercapita_aj32
  r = spreadsheet.costpercapita_aj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87981.36059455344,r[:number],0.001)
end

def test_costpercapita_ak32
  r = spreadsheet.costpercapita_ak32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111267.13841571912,r[:number],0.001)
end

def test_costpercapita_al32
  r = spreadsheet.costpercapita_al32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127587.12388560826,r[:number],0.001)
end

def test_costpercapita_am32
  r = spreadsheet.costpercapita_am32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142085.4103408342,r[:number],0.001)
end

def test_costpercapita_an32
  r = spreadsheet.costpercapita_an32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152500.67991466844,r[:number],0.001)
end

def test_costpercapita_ao32
  r = spreadsheet.costpercapita_ao32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159872.92078262457,r[:number],0.001)
end

def test_costpercapita_ap32
  r = spreadsheet.costpercapita_ap32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166196.3830422042,r[:number],0.001)
end

def test_costpercapita_aq32
  r = spreadsheet.costpercapita_aq32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168296.83762926166,r[:number],0.001)
end

def test_costpercapita_as32
  r = spreadsheet.costpercapita_as32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129617.76830258017,r[:number],0.001)
end

def test_costpercapita_at32
  r = spreadsheet.costpercapita_at32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2639286.2512020697,r[:number],0.001)
end

def test_costpercapita_av32
  r = spreadsheet.costpercapita_av32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw32
  r = spreadsheet.costpercapita_aw32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay32
  r = spreadsheet.costpercapita_ay32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13943.22306755665,r[:number],0.001)
end

def test_costpercapita_az32
  r = spreadsheet.costpercapita_az32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50469.68520053892,r[:number],0.001)
end

def test_costpercapita_ba32
  r = spreadsheet.costpercapita_ba32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65399.86141549381,r[:number],0.001)
end

def test_costpercapita_bb32
  r = spreadsheet.costpercapita_bb32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77184.8693705736,r[:number],0.001)
end

def test_costpercapita_bc32
  r = spreadsheet.costpercapita_bc32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90251.19419258885,r[:number],0.001)
end

def test_costpercapita_bd32
  r = spreadsheet.costpercapita_bd32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102771.64059758875,r[:number],0.001)
end

def test_costpercapita_be32
  r = spreadsheet.costpercapita_be32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115813.73129622925,r[:number],0.001)
end

def test_costpercapita_bf32
  r = spreadsheet.costpercapita_bf32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131265.55273868842,r[:number],0.001)
end

def test_costpercapita_bg32
  r = spreadsheet.costpercapita_bg32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146647.82402868278,r[:number],0.001)
end

def test_costpercapita_bi32
  r = spreadsheet.costpercapita_bi32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13943.22306755665,r[:number],0.001)
end

def test_costpercapita_bj32
  r = spreadsheet.costpercapita_bj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50469.68520053892,r[:number],0.001)
end

def test_costpercapita_bk32
  r = spreadsheet.costpercapita_bk32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65399.86141549381,r[:number],0.001)
end

def test_costpercapita_bl32
  r = spreadsheet.costpercapita_bl32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77184.8693705736,r[:number],0.001)
end

def test_costpercapita_bm32
  r = spreadsheet.costpercapita_bm32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90251.19419258885,r[:number],0.001)
end

def test_costpercapita_bn32
  r = spreadsheet.costpercapita_bn32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102771.64059758875,r[:number],0.001)
end

def test_costpercapita_bo32
  r = spreadsheet.costpercapita_bo32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115813.73129622925,r[:number],0.001)
end

def test_costpercapita_bp32
  r = spreadsheet.costpercapita_bp32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131265.55273868842,r[:number],0.001)
end

def test_costpercapita_bq32
  r = spreadsheet.costpercapita_bq32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146647.82402868278,r[:number],0.001)
end

def test_costpercapita_bs32
  r = spreadsheet.costpercapita_bs32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41476.57807270976,r[:number],0.001)
end

def test_costpercapita_bt32
  r = spreadsheet.costpercapita_bt32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87981.36059455344,r[:number],0.001)
end

def test_costpercapita_bu32
  r = spreadsheet.costpercapita_bu32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111267.13841571912,r[:number],0.001)
end

def test_costpercapita_bv32
  r = spreadsheet.costpercapita_bv32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127587.12388560826,r[:number],0.001)
end

def test_costpercapita_bw32
  r = spreadsheet.costpercapita_bw32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142085.4103408342,r[:number],0.001)
end

def test_costpercapita_bx32
  r = spreadsheet.costpercapita_bx32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152500.67991466846,r[:number],0.001)
end

def test_costpercapita_by32
  r = spreadsheet.costpercapita_by32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159872.92078262457,r[:number],0.001)
end

def test_costpercapita_bz32
  r = spreadsheet.costpercapita_bz32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166196.3830422042,r[:number],0.001)
end

def test_costpercapita_ca32
  r = spreadsheet.costpercapita_ca32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168296.83762926166,r[:number],0.001)
end

def test_costpercapita_cc32
  r = spreadsheet.costpercapita_cc32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128584.93696424262,r[:number],0.001)
end

def test_costpercapita_cd32
  r = spreadsheet.costpercapita_cd32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2629990.769157032,r[:number],0.001)
end

def test_costpercapita_cf32
  r = spreadsheet.costpercapita_cf32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-9295.48204503777,r[:number],0.001)
end

def test_costpercapita_cg32
  r = spreadsheet.costpercapita_cg32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch32
  r = spreadsheet.costpercapita_ch32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci32
  r = spreadsheet.costpercapita_ci32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj32
  r = spreadsheet.costpercapita_cj32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck32
  r = spreadsheet.costpercapita_ck32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl32
  r = spreadsheet.costpercapita_cl32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm32
  r = spreadsheet.costpercapita_cm32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn32
  r = spreadsheet.costpercapita_cn32
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp32
  r = spreadsheet.costpercapita_cp32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1032.83133833753,r[:number],0.001)
end

def test_costpercapita_cq32
  r = spreadsheet.costpercapita_cq32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-9295.48204503777,r[:number],0.001)
end

def test_costpercapita_cr32
  r = spreadsheet.costpercapita_cr32
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a33
  r = spreadsheet.costpercapita_a33
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.HEV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b33
  r = spreadsheet.costpercapita_b33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hybrid cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c33
  r = spreadsheet.costpercapita_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e33
  r = spreadsheet.costpercapita_e33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.96276709975272,r[:number],0.001)
end

def test_costpercapita_f33
  r = spreadsheet.costpercapita_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.1180674362969,r[:number],0.001)
end

def test_costpercapita_g33
  r = spreadsheet.costpercapita_g33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1369.159863018116,r[:number],0.001)
end

def test_costpercapita_h33
  r = spreadsheet.costpercapita_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7501.823475188763,r[:number],0.001)
end

def test_costpercapita_i33
  r = spreadsheet.costpercapita_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13111.74567866884,r[:number],0.001)
end

def test_costpercapita_j33
  r = spreadsheet.costpercapita_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20817.780622362276,r[:number],0.001)
end

def test_costpercapita_k33
  r = spreadsheet.costpercapita_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29379.566565892263,r[:number],0.001)
end

def test_costpercapita_l33
  r = spreadsheet.costpercapita_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37239.9102553002,r[:number],0.001)
end

def test_costpercapita_m33
  r = spreadsheet.costpercapita_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46826.28029024359,r[:number],0.001)
end

def test_costpercapita_o33
  r = spreadsheet.costpercapita_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.65868137461477,r[:number],0.001)
end

def test_costpercapita_p33
  r = spreadsheet.costpercapita_p33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376.92912613699815,r[:number],0.001)
end

def test_costpercapita_q33
  r = spreadsheet.costpercapita_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(856.6946946010199,r[:number],0.001)
end

def test_costpercapita_r33
  r = spreadsheet.costpercapita_r33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3882.459670403373,r[:number],0.001)
end

def test_costpercapita_s33
  r = spreadsheet.costpercapita_s33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7140.434658017477,r[:number],0.001)
end

def test_costpercapita_t33
  r = spreadsheet.costpercapita_t33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10273.9925463082,r[:number],0.001)
end

def test_costpercapita_u33
  r = spreadsheet.costpercapita_u33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11998.439161327657,r[:number],0.001)
end

def test_costpercapita_v33
  r = spreadsheet.costpercapita_v33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10758.299456752497,r[:number],0.001)
end

def test_costpercapita_w33
  r = spreadsheet.costpercapita_w33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5638.42526584622,r[:number],0.001)
end

def test_costpercapita_y33
  r = spreadsheet.costpercapita_y33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z33
  r = spreadsheet.costpercapita_z33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa33
  r = spreadsheet.costpercapita_aa33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab33
  r = spreadsheet.costpercapita_ab33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac33
  r = spreadsheet.costpercapita_ac33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad33
  r = spreadsheet.costpercapita_ad33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae33
  r = spreadsheet.costpercapita_ae33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af33
  r = spreadsheet.costpercapita_af33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag33
  r = spreadsheet.costpercapita_ag33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai33
  r = spreadsheet.costpercapita_ai33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.6214484743675,r[:number],0.001)
end

def test_costpercapita_aj33
  r = spreadsheet.costpercapita_aj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1088.0471935732949,r[:number],0.001)
end

def test_costpercapita_ak33
  r = spreadsheet.costpercapita_ak33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2225.854557619136,r[:number],0.001)
end

def test_costpercapita_al33
  r = spreadsheet.costpercapita_al33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11384.283145592137,r[:number],0.001)
end

def test_costpercapita_am33
  r = spreadsheet.costpercapita_am33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20252.180336686317,r[:number],0.001)
end

def test_costpercapita_an33
  r = spreadsheet.costpercapita_an33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31091.773168670476,r[:number],0.001)
end

def test_costpercapita_ao33
  r = spreadsheet.costpercapita_ao33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41378.00572721992,r[:number],0.001)
end

def test_costpercapita_ap33
  r = spreadsheet.costpercapita_ap33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47998.209712052696,r[:number],0.001)
end

def test_costpercapita_aq33
  r = spreadsheet.costpercapita_aq33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52464.7055560898,r[:number],0.001)
end

def test_costpercapita_as33
  r = spreadsheet.costpercapita_as33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23109.742316219796,r[:number],0.001)
end

def test_costpercapita_at33
  r = spreadsheet.costpercapita_at33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380232.7952556569,r[:number],0.001)
end

def test_costpercapita_av33
  r = spreadsheet.costpercapita_av33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw33
  r = spreadsheet.costpercapita_aw33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay33
  r = spreadsheet.costpercapita_ay33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.177660259851635,r[:number],0.001)
end

def test_costpercapita_az33
  r = spreadsheet.costpercapita_az33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.1180674362969,r[:number],0.001)
end

def test_costpercapita_ba33
  r = spreadsheet.costpercapita_ba33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1369.159863018116,r[:number],0.001)
end

def test_costpercapita_bb33
  r = spreadsheet.costpercapita_bb33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7501.823475188763,r[:number],0.001)
end

def test_costpercapita_bc33
  r = spreadsheet.costpercapita_bc33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13111.74567866884,r[:number],0.001)
end

def test_costpercapita_bd33
  r = spreadsheet.costpercapita_bd33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20817.780622362276,r[:number],0.001)
end

def test_costpercapita_be33
  r = spreadsheet.costpercapita_be33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29379.566565892263,r[:number],0.001)
end

def test_costpercapita_bf33
  r = spreadsheet.costpercapita_bf33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37239.9102553002,r[:number],0.001)
end

def test_costpercapita_bg33
  r = spreadsheet.costpercapita_bg33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46826.28029024359,r[:number],0.001)
end

def test_costpercapita_bi33
  r = spreadsheet.costpercapita_bi33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.177660259851635,r[:number],0.001)
end

def test_costpercapita_bj33
  r = spreadsheet.costpercapita_bj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.1180674362969,r[:number],0.001)
end

def test_costpercapita_bk33
  r = spreadsheet.costpercapita_bk33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1369.159863018116,r[:number],0.001)
end

def test_costpercapita_bl33
  r = spreadsheet.costpercapita_bl33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7501.823475188763,r[:number],0.001)
end

def test_costpercapita_bm33
  r = spreadsheet.costpercapita_bm33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13111.74567866884,r[:number],0.001)
end

def test_costpercapita_bn33
  r = spreadsheet.costpercapita_bn33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20817.780622362276,r[:number],0.001)
end

def test_costpercapita_bo33
  r = spreadsheet.costpercapita_bo33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29379.566565892263,r[:number],0.001)
end

def test_costpercapita_bp33
  r = spreadsheet.costpercapita_bp33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37239.9102553002,r[:number],0.001)
end

def test_costpercapita_bq33
  r = spreadsheet.costpercapita_bq33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46826.28029024359,r[:number],0.001)
end

def test_costpercapita_bs33
  r = spreadsheet.costpercapita_bs33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.83634163446641,r[:number],0.001)
end

def test_costpercapita_bt33
  r = spreadsheet.costpercapita_bt33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1088.0471935732949,r[:number],0.001)
end

def test_costpercapita_bu33
  r = spreadsheet.costpercapita_bu33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2225.854557619136,r[:number],0.001)
end

def test_costpercapita_bv33
  r = spreadsheet.costpercapita_bv33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11384.283145592137,r[:number],0.001)
end

def test_costpercapita_bw33
  r = spreadsheet.costpercapita_bw33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20252.180336686317,r[:number],0.001)
end

def test_costpercapita_bx33
  r = spreadsheet.costpercapita_bx33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31091.773168670476,r[:number],0.001)
end

def test_costpercapita_by33
  r = spreadsheet.costpercapita_by33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41378.00572721992,r[:number],0.001)
end

def test_costpercapita_bz33
  r = spreadsheet.costpercapita_bz33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47998.209712052696,r[:number],0.001)
end

def test_costpercapita_ca33
  r = spreadsheet.costpercapita_ca33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52464.70555608981,r[:number],0.001)
end

def test_costpercapita_cc33
  r = spreadsheet.costpercapita_cc33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23106.09952657092,r[:number],0.001)
end

def test_costpercapita_cd33
  r = spreadsheet.costpercapita_cd33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380200.010148817,r[:number],0.001)
end

def test_costpercapita_cf33
  r = spreadsheet.costpercapita_cf33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-32.78510683990109,r[:number],0.001)
end

def test_costpercapita_cg33
  r = spreadsheet.costpercapita_cg33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch33
  r = spreadsheet.costpercapita_ch33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci33
  r = spreadsheet.costpercapita_ci33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj33
  r = spreadsheet.costpercapita_cj33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck33
  r = spreadsheet.costpercapita_ck33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl33
  r = spreadsheet.costpercapita_cl33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm33
  r = spreadsheet.costpercapita_cm33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn33
  r = spreadsheet.costpercapita_cn33
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp33
  r = spreadsheet.costpercapita_cp33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.642789648877899,r[:number],0.001)
end

def test_costpercapita_cq33
  r = spreadsheet.costpercapita_cq33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-32.78510683990109,r[:number],0.001)
end

def test_costpercapita_cr33
  r = spreadsheet.costpercapita_cr33
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a34
  r = spreadsheet.costpercapita_a34
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.EV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b34
  r = spreadsheet.costpercapita_b34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electric cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c34
  r = spreadsheet.costpercapita_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e34
  r = spreadsheet.costpercapita_e34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f34
  r = spreadsheet.costpercapita_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.35814478141765,r[:number],0.001)
end

def test_costpercapita_g34
  r = spreadsheet.costpercapita_g34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.9235806664247,r[:number],0.001)
end

def test_costpercapita_h34
  r = spreadsheet.costpercapita_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1172.217257602088,r[:number],0.001)
end

def test_costpercapita_i34
  r = spreadsheet.costpercapita_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2052.341722407643,r[:number],0.001)
end

def test_costpercapita_j34
  r = spreadsheet.costpercapita_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3231.023522119645,r[:number],0.001)
end

def test_costpercapita_k34
  r = spreadsheet.costpercapita_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4478.632886938765,r[:number],0.001)
end

def test_costpercapita_l34
  r = spreadsheet.costpercapita_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4868.869515362655,r[:number],0.001)
end

def test_costpercapita_m34
  r = spreadsheet.costpercapita_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5617.866876754632,r[:number],0.001)
end

def test_costpercapita_o34
  r = spreadsheet.costpercapita_o34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p34
  r = spreadsheet.costpercapita_p34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.42341739393301,r[:number],0.001)
end

def test_costpercapita_q34
  r = spreadsheet.costpercapita_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.2262143659175,r[:number],0.001)
end

def test_costpercapita_r34
  r = spreadsheet.costpercapita_r34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.0995394619278,r[:number],0.001)
end

def test_costpercapita_s34
  r = spreadsheet.costpercapita_s34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(740.5296855354206,r[:number],0.001)
end

def test_costpercapita_t34
  r = spreadsheet.costpercapita_t34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1091.8791977183994,r[:number],0.001)
end

def test_costpercapita_u34
  r = spreadsheet.costpercapita_u34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1317.0394595311013,r[:number],0.001)
end

def test_costpercapita_v34
  r = spreadsheet.costpercapita_v34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1161.591505636323,r[:number],0.001)
end

def test_costpercapita_w34
  r = spreadsheet.costpercapita_w34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.6442043740245,r[:number],0.001)
end

def test_costpercapita_y34
  r = spreadsheet.costpercapita_y34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z34
  r = spreadsheet.costpercapita_z34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa34
  r = spreadsheet.costpercapita_aa34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab34
  r = spreadsheet.costpercapita_ab34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac34
  r = spreadsheet.costpercapita_ac34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad34
  r = spreadsheet.costpercapita_ad34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae34
  r = spreadsheet.costpercapita_ae34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af34
  r = spreadsheet.costpercapita_af34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag34
  r = spreadsheet.costpercapita_ag34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai34
  r = spreadsheet.costpercapita_ai34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj34
  r = spreadsheet.costpercapita_aj34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.78156217535067,r[:number],0.001)
end

def test_costpercapita_ak34
  r = spreadsheet.costpercapita_ak34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.1497950323422,r[:number],0.001)
end

def test_costpercapita_al34
  r = spreadsheet.costpercapita_al34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1565.316797064016,r[:number],0.001)
end

def test_costpercapita_am34
  r = spreadsheet.costpercapita_am34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2792.8714079430633,r[:number],0.001)
end

def test_costpercapita_an34
  r = spreadsheet.costpercapita_an34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4322.9027198380445,r[:number],0.001)
end

def test_costpercapita_ao34
  r = spreadsheet.costpercapita_ao34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5795.672346469866,r[:number],0.001)
end

def test_costpercapita_ap34
  r = spreadsheet.costpercapita_ap34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6030.461020998978,r[:number],0.001)
end

def test_costpercapita_aq34
  r = spreadsheet.costpercapita_aq34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6320.511081128657,r[:number],0.001)
end

def test_costpercapita_as34
  r = spreadsheet.costpercapita_as34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3023.074081183369,r[:number],0.001)
end

def test_costpercapita_at34
  r = spreadsheet.costpercapita_at34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50231.817099329775,r[:number],0.001)
end

def test_costpercapita_av34
  r = spreadsheet.costpercapita_av34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw34
  r = spreadsheet.costpercapita_aw34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay34
  r = spreadsheet.costpercapita_ay34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az34
  r = spreadsheet.costpercapita_az34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.35814478141765,r[:number],0.001)
end

def test_costpercapita_ba34
  r = spreadsheet.costpercapita_ba34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.9235806664247,r[:number],0.001)
end

def test_costpercapita_bb34
  r = spreadsheet.costpercapita_bb34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1172.217257602088,r[:number],0.001)
end

def test_costpercapita_bc34
  r = spreadsheet.costpercapita_bc34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2052.341722407643,r[:number],0.001)
end

def test_costpercapita_bd34
  r = spreadsheet.costpercapita_bd34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3231.023522119645,r[:number],0.001)
end

def test_costpercapita_be34
  r = spreadsheet.costpercapita_be34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4478.632886938765,r[:number],0.001)
end

def test_costpercapita_bf34
  r = spreadsheet.costpercapita_bf34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4868.869515362655,r[:number],0.001)
end

def test_costpercapita_bg34
  r = spreadsheet.costpercapita_bg34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5617.866876754631,r[:number],0.001)
end

def test_costpercapita_bi34
  r = spreadsheet.costpercapita_bi34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj34
  r = spreadsheet.costpercapita_bj34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.35814478141765,r[:number],0.001)
end

def test_costpercapita_bk34
  r = spreadsheet.costpercapita_bk34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.9235806664247,r[:number],0.001)
end

def test_costpercapita_bl34
  r = spreadsheet.costpercapita_bl34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1172.217257602088,r[:number],0.001)
end

def test_costpercapita_bm34
  r = spreadsheet.costpercapita_bm34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2052.341722407643,r[:number],0.001)
end

def test_costpercapita_bn34
  r = spreadsheet.costpercapita_bn34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3231.023522119645,r[:number],0.001)
end

def test_costpercapita_bo34
  r = spreadsheet.costpercapita_bo34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4478.632886938765,r[:number],0.001)
end

def test_costpercapita_bp34
  r = spreadsheet.costpercapita_bp34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4868.869515362655,r[:number],0.001)
end

def test_costpercapita_bq34
  r = spreadsheet.costpercapita_bq34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5617.866876754631,r[:number],0.001)
end

def test_costpercapita_bs34
  r = spreadsheet.costpercapita_bs34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt34
  r = spreadsheet.costpercapita_bt34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.78156217535067,r[:number],0.001)
end

def test_costpercapita_bu34
  r = spreadsheet.costpercapita_bu34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.1497950323422,r[:number],0.001)
end

def test_costpercapita_bv34
  r = spreadsheet.costpercapita_bv34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1565.316797064016,r[:number],0.001)
end

def test_costpercapita_bw34
  r = spreadsheet.costpercapita_bw34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2792.8714079430633,r[:number],0.001)
end

def test_costpercapita_bx34
  r = spreadsheet.costpercapita_bx34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4322.9027198380445,r[:number],0.001)
end

def test_costpercapita_by34
  r = spreadsheet.costpercapita_by34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5795.672346469866,r[:number],0.001)
end

def test_costpercapita_bz34
  r = spreadsheet.costpercapita_bz34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6030.461020998978,r[:number],0.001)
end

def test_costpercapita_ca34
  r = spreadsheet.costpercapita_ca34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6320.511081128657,r[:number],0.001)
end

def test_costpercapita_cc34
  r = spreadsheet.costpercapita_cc34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3023.074081183369,r[:number],0.001)
end

def test_costpercapita_cd34
  r = spreadsheet.costpercapita_cd34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50231.817099329775,r[:number],0.001)
end

def test_costpercapita_cf34
  r = spreadsheet.costpercapita_cf34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg34
  r = spreadsheet.costpercapita_cg34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch34
  r = spreadsheet.costpercapita_ch34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci34
  r = spreadsheet.costpercapita_ci34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj34
  r = spreadsheet.costpercapita_cj34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck34
  r = spreadsheet.costpercapita_ck34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl34
  r = spreadsheet.costpercapita_cl34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm34
  r = spreadsheet.costpercapita_cm34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn34
  r = spreadsheet.costpercapita_cn34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp34
  r = spreadsheet.costpercapita_cp34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq34
  r = spreadsheet.costpercapita_cq34
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr34
  r = spreadsheet.costpercapita_cr34
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a35
  r = spreadsheet.costpercapita_a35
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.FCV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b35
  r = spreadsheet.costpercapita_b35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel cell cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c35
  r = spreadsheet.costpercapita_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e35
  r = spreadsheet.costpercapita_e35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f35
  r = spreadsheet.costpercapita_f35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g35
  r = spreadsheet.costpercapita_g35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h35
  r = spreadsheet.costpercapita_h35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i35
  r = spreadsheet.costpercapita_i35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j35
  r = spreadsheet.costpercapita_j35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k35
  r = spreadsheet.costpercapita_k35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l35
  r = spreadsheet.costpercapita_l35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m35
  r = spreadsheet.costpercapita_m35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o35
  r = spreadsheet.costpercapita_o35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p35
  r = spreadsheet.costpercapita_p35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q35
  r = spreadsheet.costpercapita_q35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r35
  r = spreadsheet.costpercapita_r35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s35
  r = spreadsheet.costpercapita_s35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t35
  r = spreadsheet.costpercapita_t35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u35
  r = spreadsheet.costpercapita_u35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v35
  r = spreadsheet.costpercapita_v35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w35
  r = spreadsheet.costpercapita_w35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y35
  r = spreadsheet.costpercapita_y35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z35
  r = spreadsheet.costpercapita_z35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa35
  r = spreadsheet.costpercapita_aa35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab35
  r = spreadsheet.costpercapita_ab35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac35
  r = spreadsheet.costpercapita_ac35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad35
  r = spreadsheet.costpercapita_ad35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae35
  r = spreadsheet.costpercapita_ae35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af35
  r = spreadsheet.costpercapita_af35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag35
  r = spreadsheet.costpercapita_ag35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai35
  r = spreadsheet.costpercapita_ai35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj35
  r = spreadsheet.costpercapita_aj35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak35
  r = spreadsheet.costpercapita_ak35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al35
  r = spreadsheet.costpercapita_al35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am35
  r = spreadsheet.costpercapita_am35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an35
  r = spreadsheet.costpercapita_an35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao35
  r = spreadsheet.costpercapita_ao35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap35
  r = spreadsheet.costpercapita_ap35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq35
  r = spreadsheet.costpercapita_aq35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as35
  r = spreadsheet.costpercapita_as35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at35
  r = spreadsheet.costpercapita_at35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av35
  r = spreadsheet.costpercapita_av35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw35
  r = spreadsheet.costpercapita_aw35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay35
  r = spreadsheet.costpercapita_ay35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az35
  r = spreadsheet.costpercapita_az35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba35
  r = spreadsheet.costpercapita_ba35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb35
  r = spreadsheet.costpercapita_bb35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc35
  r = spreadsheet.costpercapita_bc35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd35
  r = spreadsheet.costpercapita_bd35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be35
  r = spreadsheet.costpercapita_be35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf35
  r = spreadsheet.costpercapita_bf35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg35
  r = spreadsheet.costpercapita_bg35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi35
  r = spreadsheet.costpercapita_bi35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj35
  r = spreadsheet.costpercapita_bj35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk35
  r = spreadsheet.costpercapita_bk35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl35
  r = spreadsheet.costpercapita_bl35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm35
  r = spreadsheet.costpercapita_bm35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn35
  r = spreadsheet.costpercapita_bn35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo35
  r = spreadsheet.costpercapita_bo35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp35
  r = spreadsheet.costpercapita_bp35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq35
  r = spreadsheet.costpercapita_bq35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs35
  r = spreadsheet.costpercapita_bs35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt35
  r = spreadsheet.costpercapita_bt35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu35
  r = spreadsheet.costpercapita_bu35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv35
  r = spreadsheet.costpercapita_bv35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw35
  r = spreadsheet.costpercapita_bw35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx35
  r = spreadsheet.costpercapita_bx35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by35
  r = spreadsheet.costpercapita_by35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz35
  r = spreadsheet.costpercapita_bz35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca35
  r = spreadsheet.costpercapita_ca35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc35
  r = spreadsheet.costpercapita_cc35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd35
  r = spreadsheet.costpercapita_cd35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf35
  r = spreadsheet.costpercapita_cf35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg35
  r = spreadsheet.costpercapita_cg35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch35
  r = spreadsheet.costpercapita_ch35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci35
  r = spreadsheet.costpercapita_ci35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj35
  r = spreadsheet.costpercapita_cj35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck35
  r = spreadsheet.costpercapita_ck35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl35
  r = spreadsheet.costpercapita_cl35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm35
  r = spreadsheet.costpercapita_cm35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn35
  r = spreadsheet.costpercapita_cn35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp35
  r = spreadsheet.costpercapita_cp35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq35
  r = spreadsheet.costpercapita_cq35
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr35
  r = spreadsheet.costpercapita_cr35
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a36
  r = spreadsheet.costpercapita_a36
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Bike",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b36
  r = spreadsheet.costpercapita_b36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bikes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c36
  r = spreadsheet.costpercapita_c36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e36
  r = spreadsheet.costpercapita_e36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1960.5044441010261,r[:number],0.001)
end

def test_costpercapita_f36
  r = spreadsheet.costpercapita_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2636.353342657235,r[:number],0.001)
end

def test_costpercapita_g36
  r = spreadsheet.costpercapita_g36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3260.1377108732154,r[:number],0.001)
end

def test_costpercapita_h36
  r = spreadsheet.costpercapita_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3784.4307760325205,r[:number],0.001)
end

def test_costpercapita_i36
  r = spreadsheet.costpercapita_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4190.0331167862305,r[:number],0.001)
end

def test_costpercapita_j36
  r = spreadsheet.costpercapita_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4468.049772338084,r[:number],0.001)
end

def test_costpercapita_k36
  r = spreadsheet.costpercapita_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4597.584834413845,r[:number],0.001)
end

def test_costpercapita_l36
  r = spreadsheet.costpercapita_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4538.941348444527,r[:number],0.001)
end

def test_costpercapita_m36
  r = spreadsheet.costpercapita_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4204.882311387339,r[:number],0.001)
end

def test_costpercapita_o36
  r = spreadsheet.costpercapita_o36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969.1043127250674,r[:number],0.001)
end

def test_costpercapita_p36
  r = spreadsheet.costpercapita_p36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1464.6407459206857,r[:number],0.001)
end

def test_costpercapita_q36
  r = spreadsheet.costpercapita_q36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2037.5860692957592,r[:number],0.001)
end

def test_costpercapita_r36
  r = spreadsheet.costpercapita_r36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2703.1648400232284,r[:number],0.001)
end

def test_costpercapita_s36
  r = spreadsheet.costpercapita_s36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3491.6942639885247,r[:number],0.001)
end

def test_costpercapita_t36
  r = spreadsheet.costpercapita_t36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4468.049772338083,r[:number],0.001)
end

def test_costpercapita_u36
  r = spreadsheet.costpercapita_u36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5746.981043017304,r[:number],0.001)
end

def test_costpercapita_v36
  r = spreadsheet.costpercapita_v36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7564.902247407541,r[:number],0.001)
end

def test_costpercapita_w36
  r = spreadsheet.costpercapita_w36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10512.205778468347,r[:number],0.001)
end

def test_costpercapita_y36
  r = spreadsheet.costpercapita_y36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z36
  r = spreadsheet.costpercapita_z36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa36
  r = spreadsheet.costpercapita_aa36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab36
  r = spreadsheet.costpercapita_ab36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac36
  r = spreadsheet.costpercapita_ac36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad36
  r = spreadsheet.costpercapita_ad36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae36
  r = spreadsheet.costpercapita_ae36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af36
  r = spreadsheet.costpercapita_af36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag36
  r = spreadsheet.costpercapita_ag36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai36
  r = spreadsheet.costpercapita_ai36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2929.6087568260937,r[:number],0.001)
end

def test_costpercapita_aj36
  r = spreadsheet.costpercapita_aj36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4100.994088577921,r[:number],0.001)
end

def test_costpercapita_ak36
  r = spreadsheet.costpercapita_ak36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5297.723780168974,r[:number],0.001)
end

def test_costpercapita_al36
  r = spreadsheet.costpercapita_al36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6487.595616055749,r[:number],0.001)
end

def test_costpercapita_am36
  r = spreadsheet.costpercapita_am36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7681.727380774756,r[:number],0.001)
end

def test_costpercapita_an36
  r = spreadsheet.costpercapita_an36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8936.099544676166,r[:number],0.001)
end

def test_costpercapita_ao36
  r = spreadsheet.costpercapita_ao36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10344.565877431149,r[:number],0.001)
end

def test_costpercapita_ap36
  r = spreadsheet.costpercapita_ap36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12103.84359585207,r[:number],0.001)
end

def test_costpercapita_aq36
  r = spreadsheet.costpercapita_aq36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14717.088089855686,r[:number],0.001)
end

def test_costpercapita_as36
  r = spreadsheet.costpercapita_as36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8066.582970024284,r[:number],0.001)
end

def test_costpercapita_at36
  r = spreadsheet.costpercapita_at36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153078.6073043806,r[:number],0.001)
end

def test_costpercapita_av36
  r = spreadsheet.costpercapita_av36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw36
  r = spreadsheet.costpercapita_aw36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay36
  r = spreadsheet.costpercapita_ay36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1176.3026664606157,r[:number],0.001)
end

def test_costpercapita_az36
  r = spreadsheet.costpercapita_az36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2636.353342657235,r[:number],0.001)
end

def test_costpercapita_ba36
  r = spreadsheet.costpercapita_ba36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3260.1377108732154,r[:number],0.001)
end

def test_costpercapita_bb36
  r = spreadsheet.costpercapita_bb36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3784.4307760325205,r[:number],0.001)
end

def test_costpercapita_bc36
  r = spreadsheet.costpercapita_bc36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4190.0331167862305,r[:number],0.001)
end

def test_costpercapita_bd36
  r = spreadsheet.costpercapita_bd36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4468.049772338084,r[:number],0.001)
end

def test_costpercapita_be36
  r = spreadsheet.costpercapita_be36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4597.584834413845,r[:number],0.001)
end

def test_costpercapita_bf36
  r = spreadsheet.costpercapita_bf36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4538.941348444527,r[:number],0.001)
end

def test_costpercapita_bg36
  r = spreadsheet.costpercapita_bg36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4204.882311387339,r[:number],0.001)
end

def test_costpercapita_bi36
  r = spreadsheet.costpercapita_bi36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1176.3026664606157,r[:number],0.001)
end

def test_costpercapita_bj36
  r = spreadsheet.costpercapita_bj36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2636.353342657235,r[:number],0.001)
end

def test_costpercapita_bk36
  r = spreadsheet.costpercapita_bk36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3260.1377108732154,r[:number],0.001)
end

def test_costpercapita_bl36
  r = spreadsheet.costpercapita_bl36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3784.4307760325205,r[:number],0.001)
end

def test_costpercapita_bm36
  r = spreadsheet.costpercapita_bm36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4190.0331167862305,r[:number],0.001)
end

def test_costpercapita_bn36
  r = spreadsheet.costpercapita_bn36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4468.049772338084,r[:number],0.001)
end

def test_costpercapita_bo36
  r = spreadsheet.costpercapita_bo36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4597.584834413845,r[:number],0.001)
end

def test_costpercapita_bp36
  r = spreadsheet.costpercapita_bp36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4538.941348444527,r[:number],0.001)
end

def test_costpercapita_bq36
  r = spreadsheet.costpercapita_bq36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4204.882311387339,r[:number],0.001)
end

def test_costpercapita_bs36
  r = spreadsheet.costpercapita_bs36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2145.4069791856828,r[:number],0.001)
end

def test_costpercapita_bt36
  r = spreadsheet.costpercapita_bt36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4100.994088577921,r[:number],0.001)
end

def test_costpercapita_bu36
  r = spreadsheet.costpercapita_bu36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5297.723780168974,r[:number],0.001)
end

def test_costpercapita_bv36
  r = spreadsheet.costpercapita_bv36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6487.595616055749,r[:number],0.001)
end

def test_costpercapita_bw36
  r = spreadsheet.costpercapita_bw36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7681.727380774756,r[:number],0.001)
end

def test_costpercapita_bx36
  r = spreadsheet.costpercapita_bx36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8936.099544676166,r[:number],0.001)
end

def test_costpercapita_by36
  r = spreadsheet.costpercapita_by36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10344.565877431149,r[:number],0.001)
end

def test_costpercapita_bz36
  r = spreadsheet.costpercapita_bz36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12103.84359585207,r[:number],0.001)
end

def test_costpercapita_ca36
  r = spreadsheet.costpercapita_ca36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14717.088089855686,r[:number],0.001)
end

def test_costpercapita_cc36
  r = spreadsheet.costpercapita_cc36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7979.44943917535,r[:number],0.001)
end

def test_costpercapita_cd36
  r = spreadsheet.costpercapita_cd36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152294.4055267402,r[:number],0.001)
end

def test_costpercapita_cf36
  r = spreadsheet.costpercapita_cf36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-784.2017776404105,r[:number],0.001)
end

def test_costpercapita_cg36
  r = spreadsheet.costpercapita_cg36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch36
  r = spreadsheet.costpercapita_ch36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci36
  r = spreadsheet.costpercapita_ci36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj36
  r = spreadsheet.costpercapita_cj36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck36
  r = spreadsheet.costpercapita_ck36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl36
  r = spreadsheet.costpercapita_cl36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm36
  r = spreadsheet.costpercapita_cm36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn36
  r = spreadsheet.costpercapita_cn36
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp36
  r = spreadsheet.costpercapita_cp36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-87.1335308489345,r[:number],0.001)
end

def test_costpercapita_cq36
  r = spreadsheet.costpercapita_cq36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-784.2017776404105,r[:number],0.001)
end

def test_costpercapita_cr36
  r = spreadsheet.costpercapita_cr36
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a37
  r = spreadsheet.costpercapita_a37
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b37
  r = spreadsheet.costpercapita_b37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c37
  r = spreadsheet.costpercapita_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e37
  r = spreadsheet.costpercapita_e37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.184889562682116,r[:number],0.001)
end

def test_costpercapita_f37
  r = spreadsheet.costpercapita_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.8189564908229,r[:number],0.001)
end

def test_costpercapita_g37
  r = spreadsheet.costpercapita_g37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.9622729208874,r[:number],0.001)
end

def test_costpercapita_h37
  r = spreadsheet.costpercapita_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.48830692222306,r[:number],0.001)
end

def test_costpercapita_i37
  r = spreadsheet.costpercapita_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.527183443689,r[:number],0.001)
end

def test_costpercapita_j37
  r = spreadsheet.costpercapita_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.767693239225125,r[:number],0.001)
end

def test_costpercapita_k37
  r = spreadsheet.costpercapita_k37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l37
  r = spreadsheet.costpercapita_l37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m37
  r = spreadsheet.costpercapita_m37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o37
  r = spreadsheet.costpercapita_o37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5793.314608237358,r[:number],0.001)
end

def test_costpercapita_p37
  r = spreadsheet.costpercapita_p37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7088.362967472249,r[:number],0.001)
end

def test_costpercapita_q37
  r = spreadsheet.costpercapita_q37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7736.272252945386,r[:number],0.001)
end

def test_costpercapita_r37
  r = spreadsheet.costpercapita_r37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7768.997017411522,r[:number],0.001)
end

def test_costpercapita_s37
  r = spreadsheet.costpercapita_s37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7235.821866407572,r[:number],0.001)
end

def test_costpercapita_t37
  r = spreadsheet.costpercapita_t37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6222.89658250827,r[:number],0.001)
end

def test_costpercapita_u37
  r = spreadsheet.costpercapita_u37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4810.829472400808,r[:number],0.001)
end

def test_costpercapita_v37
  r = spreadsheet.costpercapita_v37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3085.0742147674127,r[:number],0.001)
end

def test_costpercapita_w37
  r = spreadsheet.costpercapita_w37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1141.8745020818405,r[:number],0.001)
end

def test_costpercapita_y37
  r = spreadsheet.costpercapita_y37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z37
  r = spreadsheet.costpercapita_z37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa37
  r = spreadsheet.costpercapita_aa37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab37
  r = spreadsheet.costpercapita_ab37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac37
  r = spreadsheet.costpercapita_ac37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad37
  r = spreadsheet.costpercapita_ad37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae37
  r = spreadsheet.costpercapita_ae37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af37
  r = spreadsheet.costpercapita_af37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag37
  r = spreadsheet.costpercapita_ag37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai37
  r = spreadsheet.costpercapita_ai37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5833.4994978000395,r[:number],0.001)
end

def test_costpercapita_aj37
  r = spreadsheet.costpercapita_aj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7248.181923963072,r[:number],0.001)
end

def test_costpercapita_ak37
  r = spreadsheet.costpercapita_ak37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7872.2345258662735,r[:number],0.001)
end

def test_costpercapita_al37
  r = spreadsheet.costpercapita_al37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7874.485324333746,r[:number],0.001)
end

def test_costpercapita_am37
  r = spreadsheet.costpercapita_am37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7305.349049851261,r[:number],0.001)
end

def test_costpercapita_an37
  r = spreadsheet.costpercapita_an37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6254.664275747495,r[:number],0.001)
end

def test_costpercapita_ao37
  r = spreadsheet.costpercapita_ao37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4810.829472400808,r[:number],0.001)
end

def test_costpercapita_ap37
  r = spreadsheet.costpercapita_ap37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3085.0742147674127,r[:number],0.001)
end

def test_costpercapita_aq37
  r = spreadsheet.costpercapita_aq37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1141.8745020818405,r[:number],0.001)
end

def test_costpercapita_as37
  r = spreadsheet.costpercapita_as37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5714.021420756882,r[:number],0.001)
end

def test_costpercapita_at37
  r = spreadsheet.costpercapita_at37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134166.80505687554,r[:number],0.001)
end

def test_costpercapita_av37
  r = spreadsheet.costpercapita_av37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw37
  r = spreadsheet.costpercapita_aw37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay37
  r = spreadsheet.costpercapita_ay37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.11093373760927,r[:number],0.001)
end

def test_costpercapita_az37
  r = spreadsheet.costpercapita_az37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.8189564908229,r[:number],0.001)
end

def test_costpercapita_ba37
  r = spreadsheet.costpercapita_ba37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.9622729208874,r[:number],0.001)
end

def test_costpercapita_bb37
  r = spreadsheet.costpercapita_bb37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.48830692222306,r[:number],0.001)
end

def test_costpercapita_bc37
  r = spreadsheet.costpercapita_bc37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.527183443689,r[:number],0.001)
end

def test_costpercapita_bd37
  r = spreadsheet.costpercapita_bd37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.767693239225125,r[:number],0.001)
end

def test_costpercapita_be37
  r = spreadsheet.costpercapita_be37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf37
  r = spreadsheet.costpercapita_bf37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg37
  r = spreadsheet.costpercapita_bg37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi37
  r = spreadsheet.costpercapita_bi37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.11093373760927,r[:number],0.001)
end

def test_costpercapita_bj37
  r = spreadsheet.costpercapita_bj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.8189564908229,r[:number],0.001)
end

def test_costpercapita_bk37
  r = spreadsheet.costpercapita_bk37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.9622729208874,r[:number],0.001)
end

def test_costpercapita_bl37
  r = spreadsheet.costpercapita_bl37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.48830692222306,r[:number],0.001)
end

def test_costpercapita_bm37
  r = spreadsheet.costpercapita_bm37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.527183443689,r[:number],0.001)
end

def test_costpercapita_bn37
  r = spreadsheet.costpercapita_bn37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.767693239225125,r[:number],0.001)
end

def test_costpercapita_bo37
  r = spreadsheet.costpercapita_bo37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp37
  r = spreadsheet.costpercapita_bp37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq37
  r = spreadsheet.costpercapita_bq37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs37
  r = spreadsheet.costpercapita_bs37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5817.425541974967,r[:number],0.001)
end

def test_costpercapita_bt37
  r = spreadsheet.costpercapita_bt37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7248.181923963072,r[:number],0.001)
end

def test_costpercapita_bu37
  r = spreadsheet.costpercapita_bu37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7872.2345258662735,r[:number],0.001)
end

def test_costpercapita_bv37
  r = spreadsheet.costpercapita_bv37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7874.485324333746,r[:number],0.001)
end

def test_costpercapita_bw37
  r = spreadsheet.costpercapita_bw37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7305.349049851261,r[:number],0.001)
end

def test_costpercapita_bx37
  r = spreadsheet.costpercapita_bx37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6254.664275747495,r[:number],0.001)
end

def test_costpercapita_by37
  r = spreadsheet.costpercapita_by37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4810.829472400808,r[:number],0.001)
end

def test_costpercapita_bz37
  r = spreadsheet.costpercapita_bz37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3085.0742147674127,r[:number],0.001)
end

def test_costpercapita_ca37
  r = spreadsheet.costpercapita_ca37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1141.8745020818405,r[:number],0.001)
end

def test_costpercapita_cc37
  r = spreadsheet.costpercapita_cc37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5712.235425665207,r[:number],0.001)
end

def test_costpercapita_cd37
  r = spreadsheet.costpercapita_cd37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134150.73110105045,r[:number],0.001)
end

def test_costpercapita_cf37
  r = spreadsheet.costpercapita_cf37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-16.07395582507285,r[:number],0.001)
end

def test_costpercapita_cg37
  r = spreadsheet.costpercapita_cg37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch37
  r = spreadsheet.costpercapita_ch37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci37
  r = spreadsheet.costpercapita_ci37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj37
  r = spreadsheet.costpercapita_cj37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck37
  r = spreadsheet.costpercapita_ck37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl37
  r = spreadsheet.costpercapita_cl37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm37
  r = spreadsheet.costpercapita_cm37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn37
  r = spreadsheet.costpercapita_cn37
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp37
  r = spreadsheet.costpercapita_cp37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.7859950916747611,r[:number],0.001)
end

def test_costpercapita_cq37
  r = spreadsheet.costpercapita_cq37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-16.07395582507285,r[:number],0.001)
end

def test_costpercapita_cr37
  r = spreadsheet.costpercapita_cr37
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a38
  r = spreadsheet.costpercapita_a38
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Air",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b38
  r = spreadsheet.costpercapita_b38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c38
  r = spreadsheet.costpercapita_c38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e38
  r = spreadsheet.costpercapita_e38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2457.276219024844,r[:number],0.001)
end

def test_costpercapita_f38
  r = spreadsheet.costpercapita_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8412.169617515263,r[:number],0.001)
end

def test_costpercapita_g38
  r = spreadsheet.costpercapita_g38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9594.398549266325,r[:number],0.001)
end

def test_costpercapita_h38
  r = spreadsheet.costpercapita_h38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10574.154154729966,r[:number],0.001)
end

def test_costpercapita_i38
  r = spreadsheet.costpercapita_i38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11276.763165563783,r[:number],0.001)
end

def test_costpercapita_j38
  r = spreadsheet.costpercapita_j38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11778.3119883311,r[:number],0.001)
end

def test_costpercapita_k38
  r = spreadsheet.costpercapita_k38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12065.320760428263,r[:number],0.001)
end

def test_costpercapita_l38
  r = spreadsheet.costpercapita_l38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12072.63045482137,r[:number],0.001)
end

def test_costpercapita_m38
  r = spreadsheet.costpercapita_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11717.480967206395,r[:number],0.001)
end

def test_costpercapita_o38
  r = spreadsheet.costpercapita_o38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1644.793999550656,r[:number],0.001)
end

def test_costpercapita_p38
  r = spreadsheet.costpercapita_p38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2515.4128971280898,r[:number],0.001)
end

def test_costpercapita_q38
  r = spreadsheet.costpercapita_q38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3499.3388261744167,r[:number],0.001)
end

def test_costpercapita_r38
  r = spreadsheet.costpercapita_r38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4597.51077875279,r[:number],0.001)
end

def test_costpercapita_s38
  r = spreadsheet.costpercapita_s38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5807.96614019896,r[:number],0.001)
end

def test_costpercapita_t38
  r = spreadsheet.costpercapita_t38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7145.770423413824,r[:number],0.001)
end

def test_costpercapita_u38
  r = spreadsheet.costpercapita_u38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8622.66349528015,r[:number],0.001)
end

def test_costpercapita_v38
  r = spreadsheet.costpercapita_v38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10247.47214379025,r[:number],0.001)
end

def test_costpercapita_w38
  r = spreadsheet.costpercapita_w38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12023.651063768335,r[:number],0.001)
end

def test_costpercapita_y38
  r = spreadsheet.costpercapita_y38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z38
  r = spreadsheet.costpercapita_z38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa38
  r = spreadsheet.costpercapita_aa38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab38
  r = spreadsheet.costpercapita_ab38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac38
  r = spreadsheet.costpercapita_ac38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad38
  r = spreadsheet.costpercapita_ad38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae38
  r = spreadsheet.costpercapita_ae38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af38
  r = spreadsheet.costpercapita_af38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag38
  r = spreadsheet.costpercapita_ag38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai38
  r = spreadsheet.costpercapita_ai38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4102.0702185755,r[:number],0.001)
end

def test_costpercapita_aj38
  r = spreadsheet.costpercapita_aj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10927.582514643353,r[:number],0.001)
end

def test_costpercapita_ak38
  r = spreadsheet.costpercapita_ak38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13093.737375440742,r[:number],0.001)
end

def test_costpercapita_al38
  r = spreadsheet.costpercapita_al38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15171.664933482758,r[:number],0.001)
end

def test_costpercapita_am38
  r = spreadsheet.costpercapita_am38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17084.729305762743,r[:number],0.001)
end

def test_costpercapita_an38
  r = spreadsheet.costpercapita_an38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18924.082411744923,r[:number],0.001)
end

def test_costpercapita_ao38
  r = spreadsheet.costpercapita_ao38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20687.984255708416,r[:number],0.001)
end

def test_costpercapita_ap38
  r = spreadsheet.costpercapita_ap38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22320.10259861162,r[:number],0.001)
end

def test_costpercapita_aq38
  r = spreadsheet.costpercapita_aq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23741.132030974728,r[:number],0.001)
end

def test_costpercapita_as38
  r = spreadsheet.costpercapita_as38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16228.120627216085,r[:number],0.001)
end

def test_costpercapita_at38
  r = spreadsheet.costpercapita_at38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327387.07402160333,r[:number],0.001)
end

def test_costpercapita_av38
  r = spreadsheet.costpercapita_av38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw38
  r = spreadsheet.costpercapita_aw38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay38
  r = spreadsheet.costpercapita_ay38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1474.3657314149063,r[:number],0.001)
end

def test_costpercapita_az38
  r = spreadsheet.costpercapita_az38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8412.169617515263,r[:number],0.001)
end

def test_costpercapita_ba38
  r = spreadsheet.costpercapita_ba38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9594.398549266325,r[:number],0.001)
end

def test_costpercapita_bb38
  r = spreadsheet.costpercapita_bb38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10574.154154729966,r[:number],0.001)
end

def test_costpercapita_bc38
  r = spreadsheet.costpercapita_bc38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11276.763165563783,r[:number],0.001)
end

def test_costpercapita_bd38
  r = spreadsheet.costpercapita_bd38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11778.3119883311,r[:number],0.001)
end

def test_costpercapita_be38
  r = spreadsheet.costpercapita_be38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12065.320760428262,r[:number],0.001)
end

def test_costpercapita_bf38
  r = spreadsheet.costpercapita_bf38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12072.63045482137,r[:number],0.001)
end

def test_costpercapita_bg38
  r = spreadsheet.costpercapita_bg38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11717.480967206397,r[:number],0.001)
end

def test_costpercapita_bi38
  r = spreadsheet.costpercapita_bi38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1474.3657314149063,r[:number],0.001)
end

def test_costpercapita_bj38
  r = spreadsheet.costpercapita_bj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8412.169617515263,r[:number],0.001)
end

def test_costpercapita_bk38
  r = spreadsheet.costpercapita_bk38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9594.398549266325,r[:number],0.001)
end

def test_costpercapita_bl38
  r = spreadsheet.costpercapita_bl38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10574.154154729966,r[:number],0.001)
end

def test_costpercapita_bm38
  r = spreadsheet.costpercapita_bm38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11276.763165563783,r[:number],0.001)
end

def test_costpercapita_bn38
  r = spreadsheet.costpercapita_bn38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11778.3119883311,r[:number],0.001)
end

def test_costpercapita_bo38
  r = spreadsheet.costpercapita_bo38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12065.320760428262,r[:number],0.001)
end

def test_costpercapita_bp38
  r = spreadsheet.costpercapita_bp38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12072.63045482137,r[:number],0.001)
end

def test_costpercapita_bq38
  r = spreadsheet.costpercapita_bq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11717.480967206397,r[:number],0.001)
end

def test_costpercapita_bs38
  r = spreadsheet.costpercapita_bs38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3119.159730965562,r[:number],0.001)
end

def test_costpercapita_bt38
  r = spreadsheet.costpercapita_bt38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10927.582514643353,r[:number],0.001)
end

def test_costpercapita_bu38
  r = spreadsheet.costpercapita_bu38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13093.737375440742,r[:number],0.001)
end

def test_costpercapita_bv38
  r = spreadsheet.costpercapita_bv38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15171.664933482758,r[:number],0.001)
end

def test_costpercapita_bw38
  r = spreadsheet.costpercapita_bw38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17084.729305762743,r[:number],0.001)
end

def test_costpercapita_bx38
  r = spreadsheet.costpercapita_bx38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18924.082411744923,r[:number],0.001)
end

def test_costpercapita_by38
  r = spreadsheet.costpercapita_by38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20687.984255708412,r[:number],0.001)
end

def test_costpercapita_bz38
  r = spreadsheet.costpercapita_bz38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22320.10259861162,r[:number],0.001)
end

def test_costpercapita_ca38
  r = spreadsheet.costpercapita_ca38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23741.13203097473,r[:number],0.001)
end

def test_costpercapita_cc38
  r = spreadsheet.costpercapita_cc38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16118.908350814982,r[:number],0.001)
end

def test_costpercapita_cd38
  r = spreadsheet.costpercapita_cd38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(326404.1635339934,r[:number],0.001)
end

def test_costpercapita_cf38
  r = spreadsheet.costpercapita_cf38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-982.9104876099376,r[:number],0.001)
end

def test_costpercapita_cg38
  r = spreadsheet.costpercapita_cg38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch38
  r = spreadsheet.costpercapita_ch38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci38
  r = spreadsheet.costpercapita_ci38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj38
  r = spreadsheet.costpercapita_cj38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck38
  r = spreadsheet.costpercapita_ck38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl38
  r = spreadsheet.costpercapita_cl38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm38
  r = spreadsheet.costpercapita_cm38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn38
  r = spreadsheet.costpercapita_cn38
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp38
  r = spreadsheet.costpercapita_cp38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-109.21227640110418,r[:number],0.001)
end

def test_costpercapita_cq38
  r = spreadsheet.costpercapita_cq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-982.9104876099376,r[:number],0.001)
end

def test_costpercapita_cr38
  r = spreadsheet.costpercapita_cr38
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a39
  r = spreadsheet.costpercapita_a39
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b39
  r = spreadsheet.costpercapita_b39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c39
  r = spreadsheet.costpercapita_c39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e39
  r = spreadsheet.costpercapita_e39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.51502071878326,r[:number],0.001)
end

def test_costpercapita_f39
  r = spreadsheet.costpercapita_f39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.78421071843833,r[:number],0.001)
end

def test_costpercapita_g39
  r = spreadsheet.costpercapita_g39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.8258298125078,r[:number],0.001)
end

def test_costpercapita_h39
  r = spreadsheet.costpercapita_h39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92138251002677,r[:number],0.001)
end

def test_costpercapita_i39
  r = spreadsheet.costpercapita_i39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.09661926487527,r[:number],0.001)
end

def test_costpercapita_j39
  r = spreadsheet.costpercapita_j39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.34590646920652,r[:number],0.001)
end

def test_costpercapita_k39
  r = spreadsheet.costpercapita_k39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.56104013149109,r[:number],0.001)
end

def test_costpercapita_l39
  r = spreadsheet.costpercapita_l39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.68880266731881,r[:number],0.001)
end

def test_costpercapita_m39
  r = spreadsheet.costpercapita_m39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72514149922843,r[:number],0.001)
end

def test_costpercapita_o39
  r = spreadsheet.costpercapita_o39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.33805341280801,r[:number],0.001)
end

def test_costpercapita_p39
  r = spreadsheet.costpercapita_p39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.026886244722,r[:number],0.001)
end

def test_costpercapita_q39
  r = spreadsheet.costpercapita_q39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.10695824626555,r[:number],0.001)
end

def test_costpercapita_r39
  r = spreadsheet.costpercapita_r39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.20387391171141,r[:number],0.001)
end

def test_costpercapita_s39
  r = spreadsheet.costpercapita_s39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55166379487936,r[:number],0.001)
end

def test_costpercapita_t39
  r = spreadsheet.costpercapita_t39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18613584478634,r[:number],0.001)
end

def test_costpercapita_u39
  r = spreadsheet.costpercapita_u39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.94699136772934,r[:number],0.001)
end

def test_costpercapita_v39
  r = spreadsheet.costpercapita_v39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.74737348640706,r[:number],0.001)
end

def test_costpercapita_w39
  r = spreadsheet.costpercapita_w39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.58744013692298,r[:number],0.001)
end

def test_costpercapita_y39
  r = spreadsheet.costpercapita_y39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z39
  r = spreadsheet.costpercapita_z39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa39
  r = spreadsheet.costpercapita_aa39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab39
  r = spreadsheet.costpercapita_ab39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac39
  r = spreadsheet.costpercapita_ac39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad39
  r = spreadsheet.costpercapita_ad39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae39
  r = spreadsheet.costpercapita_ae39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af39
  r = spreadsheet.costpercapita_af39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag39
  r = spreadsheet.costpercapita_ag39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai39
  r = spreadsheet.costpercapita_ai39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.85307413159126,r[:number],0.001)
end

def test_costpercapita_aj39
  r = spreadsheet.costpercapita_aj39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.81109696316034,r[:number],0.001)
end

def test_costpercapita_ak39
  r = spreadsheet.costpercapita_ak39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.93278805877335,r[:number],0.001)
end

def test_costpercapita_al39
  r = spreadsheet.costpercapita_al39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.1252564217382,r[:number],0.001)
end

def test_costpercapita_am39
  r = spreadsheet.costpercapita_am39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.64828305975462,r[:number],0.001)
end

def test_costpercapita_an39
  r = spreadsheet.costpercapita_an39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.53204231399283,r[:number],0.001)
end

def test_costpercapita_ao39
  r = spreadsheet.costpercapita_ao39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.50803149922044,r[:number],0.001)
end

def test_costpercapita_ap39
  r = spreadsheet.costpercapita_ap39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.43617615372588,r[:number],0.001)
end

def test_costpercapita_aq39
  r = spreadsheet.costpercapita_aq39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.3125816361514,r[:number],0.001)
end

def test_costpercapita_as39
  r = spreadsheet.costpercapita_as39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.12881447090092,r[:number],0.001)
end

def test_costpercapita_at39
  r = spreadsheet.costpercapita_at39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3842.916990144116,r[:number],0.001)
end

def test_costpercapita_av39
  r = spreadsheet.costpercapita_av39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw39
  r = spreadsheet.costpercapita_aw39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay39
  r = spreadsheet.costpercapita_ay39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.10901243126996,r[:number],0.001)
end

def test_costpercapita_az39
  r = spreadsheet.costpercapita_az39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.78421071843833,r[:number],0.001)
end

def test_costpercapita_ba39
  r = spreadsheet.costpercapita_ba39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.8258298125078,r[:number],0.001)
end

def test_costpercapita_bb39
  r = spreadsheet.costpercapita_bb39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92138251002677,r[:number],0.001)
end

def test_costpercapita_bc39
  r = spreadsheet.costpercapita_bc39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.09661926487527,r[:number],0.001)
end

def test_costpercapita_bd39
  r = spreadsheet.costpercapita_bd39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.34590646920652,r[:number],0.001)
end

def test_costpercapita_be39
  r = spreadsheet.costpercapita_be39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.56104013149109,r[:number],0.001)
end

def test_costpercapita_bf39
  r = spreadsheet.costpercapita_bf39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.68880266731881,r[:number],0.001)
end

def test_costpercapita_bg39
  r = spreadsheet.costpercapita_bg39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72514149922843,r[:number],0.001)
end

def test_costpercapita_bi39
  r = spreadsheet.costpercapita_bi39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.10901243126996,r[:number],0.001)
end

def test_costpercapita_bj39
  r = spreadsheet.costpercapita_bj39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.78421071843833,r[:number],0.001)
end

def test_costpercapita_bk39
  r = spreadsheet.costpercapita_bk39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.8258298125078,r[:number],0.001)
end

def test_costpercapita_bl39
  r = spreadsheet.costpercapita_bl39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92138251002677,r[:number],0.001)
end

def test_costpercapita_bm39
  r = spreadsheet.costpercapita_bm39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.09661926487527,r[:number],0.001)
end

def test_costpercapita_bn39
  r = spreadsheet.costpercapita_bn39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.34590646920652,r[:number],0.001)
end

def test_costpercapita_bo39
  r = spreadsheet.costpercapita_bo39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.56104013149109,r[:number],0.001)
end

def test_costpercapita_bp39
  r = spreadsheet.costpercapita_bp39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.68880266731881,r[:number],0.001)
end

def test_costpercapita_bq39
  r = spreadsheet.costpercapita_bq39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72514149922843,r[:number],0.001)
end

def test_costpercapita_bs39
  r = spreadsheet.costpercapita_bs39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199.44706584407797,r[:number],0.001)
end

def test_costpercapita_bt39
  r = spreadsheet.costpercapita_bt39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.81109696316034,r[:number],0.001)
end

def test_costpercapita_bu39
  r = spreadsheet.costpercapita_bu39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.93278805877335,r[:number],0.001)
end

def test_costpercapita_bv39
  r = spreadsheet.costpercapita_bv39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.1252564217382,r[:number],0.001)
end

def test_costpercapita_bw39
  r = spreadsheet.costpercapita_bw39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.64828305975462,r[:number],0.001)
end

def test_costpercapita_bx39
  r = spreadsheet.costpercapita_bx39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.53204231399283,r[:number],0.001)
end

def test_costpercapita_by39
  r = spreadsheet.costpercapita_by39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.50803149922044,r[:number],0.001)
end

def test_costpercapita_bz39
  r = spreadsheet.costpercapita_bz39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.43617615372588,r[:number],0.001)
end

def test_costpercapita_ca39
  r = spreadsheet.costpercapita_ca39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.3125816361514,r[:number],0.001)
end

def test_costpercapita_cc39
  r = spreadsheet.costpercapita_cc39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.083702438955,r[:number],0.001)
end

def test_costpercapita_cd39
  r = spreadsheet.costpercapita_cd39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3779.5109818566025,r[:number],0.001)
end

def test_costpercapita_cf39
  r = spreadsheet.costpercapita_cf39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-63.4060082875133,r[:number],0.001)
end

def test_costpercapita_cg39
  r = spreadsheet.costpercapita_cg39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch39
  r = spreadsheet.costpercapita_ch39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci39
  r = spreadsheet.costpercapita_ci39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj39
  r = spreadsheet.costpercapita_cj39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck39
  r = spreadsheet.costpercapita_ck39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl39
  r = spreadsheet.costpercapita_cl39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm39
  r = spreadsheet.costpercapita_cm39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn39
  r = spreadsheet.costpercapita_cn39
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp39
  r = spreadsheet.costpercapita_cp39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.045112031945923,r[:number],0.001)
end

def test_costpercapita_cq39
  r = spreadsheet.costpercapita_cq39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-63.4060082875133,r[:number],0.001)
end

def test_costpercapita_cr39
  r = spreadsheet.costpercapita_cr39
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a40
  r = spreadsheet.costpercapita_a40
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b40
  r = spreadsheet.costpercapita_b40
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c40
  r = spreadsheet.costpercapita_c40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e40
  r = spreadsheet.costpercapita_e40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f40
  r = spreadsheet.costpercapita_f40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g40
  r = spreadsheet.costpercapita_g40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h40
  r = spreadsheet.costpercapita_h40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i40
  r = spreadsheet.costpercapita_i40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j40
  r = spreadsheet.costpercapita_j40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k40
  r = spreadsheet.costpercapita_k40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l40
  r = spreadsheet.costpercapita_l40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m40
  r = spreadsheet.costpercapita_m40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o40
  r = spreadsheet.costpercapita_o40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p40
  r = spreadsheet.costpercapita_p40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q40
  r = spreadsheet.costpercapita_q40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r40
  r = spreadsheet.costpercapita_r40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s40
  r = spreadsheet.costpercapita_s40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t40
  r = spreadsheet.costpercapita_t40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u40
  r = spreadsheet.costpercapita_u40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v40
  r = spreadsheet.costpercapita_v40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w40
  r = spreadsheet.costpercapita_w40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y40
  r = spreadsheet.costpercapita_y40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z40
  r = spreadsheet.costpercapita_z40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa40
  r = spreadsheet.costpercapita_aa40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab40
  r = spreadsheet.costpercapita_ab40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac40
  r = spreadsheet.costpercapita_ac40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad40
  r = spreadsheet.costpercapita_ad40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae40
  r = spreadsheet.costpercapita_ae40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af40
  r = spreadsheet.costpercapita_af40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag40
  r = spreadsheet.costpercapita_ag40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai40
  r = spreadsheet.costpercapita_ai40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj40
  r = spreadsheet.costpercapita_aj40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak40
  r = spreadsheet.costpercapita_ak40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al40
  r = spreadsheet.costpercapita_al40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am40
  r = spreadsheet.costpercapita_am40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an40
  r = spreadsheet.costpercapita_an40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao40
  r = spreadsheet.costpercapita_ao40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap40
  r = spreadsheet.costpercapita_ap40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq40
  r = spreadsheet.costpercapita_aq40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as40
  r = spreadsheet.costpercapita_as40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at40
  r = spreadsheet.costpercapita_at40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av40
  r = spreadsheet.costpercapita_av40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw40
  r = spreadsheet.costpercapita_aw40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay40
  r = spreadsheet.costpercapita_ay40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az40
  r = spreadsheet.costpercapita_az40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba40
  r = spreadsheet.costpercapita_ba40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb40
  r = spreadsheet.costpercapita_bb40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc40
  r = spreadsheet.costpercapita_bc40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd40
  r = spreadsheet.costpercapita_bd40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be40
  r = spreadsheet.costpercapita_be40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf40
  r = spreadsheet.costpercapita_bf40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg40
  r = spreadsheet.costpercapita_bg40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi40
  r = spreadsheet.costpercapita_bi40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj40
  r = spreadsheet.costpercapita_bj40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk40
  r = spreadsheet.costpercapita_bk40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl40
  r = spreadsheet.costpercapita_bl40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm40
  r = spreadsheet.costpercapita_bm40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn40
  r = spreadsheet.costpercapita_bn40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo40
  r = spreadsheet.costpercapita_bo40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp40
  r = spreadsheet.costpercapita_bp40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq40
  r = spreadsheet.costpercapita_bq40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs40
  r = spreadsheet.costpercapita_bs40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt40
  r = spreadsheet.costpercapita_bt40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu40
  r = spreadsheet.costpercapita_bu40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv40
  r = spreadsheet.costpercapita_bv40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw40
  r = spreadsheet.costpercapita_bw40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx40
  r = spreadsheet.costpercapita_bx40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by40
  r = spreadsheet.costpercapita_by40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz40
  r = spreadsheet.costpercapita_bz40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca40
  r = spreadsheet.costpercapita_ca40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc40
  r = spreadsheet.costpercapita_cc40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd40
  r = spreadsheet.costpercapita_cd40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf40
  r = spreadsheet.costpercapita_cf40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg40
  r = spreadsheet.costpercapita_cg40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch40
  r = spreadsheet.costpercapita_ch40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci40
  r = spreadsheet.costpercapita_ci40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj40
  r = spreadsheet.costpercapita_cj40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck40
  r = spreadsheet.costpercapita_ck40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl40
  r = spreadsheet.costpercapita_cl40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm40
  r = spreadsheet.costpercapita_cm40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn40
  r = spreadsheet.costpercapita_cn40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp40
  r = spreadsheet.costpercapita_cp40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq40
  r = spreadsheet.costpercapita_cq40
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr40
  r = spreadsheet.costpercapita_cr40
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a41
  r = spreadsheet.costpercapita_a41
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.e",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b41
  r = spreadsheet.costpercapita_b41
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping (maritime bunkers)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c41
  r = spreadsheet.costpercapita_c41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e41
  r = spreadsheet.costpercapita_e41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f41
  r = spreadsheet.costpercapita_f41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g41
  r = spreadsheet.costpercapita_g41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h41
  r = spreadsheet.costpercapita_h41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i41
  r = spreadsheet.costpercapita_i41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j41
  r = spreadsheet.costpercapita_j41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k41
  r = spreadsheet.costpercapita_k41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l41
  r = spreadsheet.costpercapita_l41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m41
  r = spreadsheet.costpercapita_m41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o41
  r = spreadsheet.costpercapita_o41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p41
  r = spreadsheet.costpercapita_p41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q41
  r = spreadsheet.costpercapita_q41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r41
  r = spreadsheet.costpercapita_r41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s41
  r = spreadsheet.costpercapita_s41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t41
  r = spreadsheet.costpercapita_t41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u41
  r = spreadsheet.costpercapita_u41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v41
  r = spreadsheet.costpercapita_v41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w41
  r = spreadsheet.costpercapita_w41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y41
  r = spreadsheet.costpercapita_y41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z41
  r = spreadsheet.costpercapita_z41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa41
  r = spreadsheet.costpercapita_aa41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab41
  r = spreadsheet.costpercapita_ab41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac41
  r = spreadsheet.costpercapita_ac41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad41
  r = spreadsheet.costpercapita_ad41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae41
  r = spreadsheet.costpercapita_ae41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af41
  r = spreadsheet.costpercapita_af41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag41
  r = spreadsheet.costpercapita_ag41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai41
  r = spreadsheet.costpercapita_ai41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj41
  r = spreadsheet.costpercapita_aj41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak41
  r = spreadsheet.costpercapita_ak41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al41
  r = spreadsheet.costpercapita_al41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am41
  r = spreadsheet.costpercapita_am41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an41
  r = spreadsheet.costpercapita_an41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao41
  r = spreadsheet.costpercapita_ao41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap41
  r = spreadsheet.costpercapita_ap41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq41
  r = spreadsheet.costpercapita_aq41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as41
  r = spreadsheet.costpercapita_as41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at41
  r = spreadsheet.costpercapita_at41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av41
  r = spreadsheet.costpercapita_av41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw41
  r = spreadsheet.costpercapita_aw41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay41
  r = spreadsheet.costpercapita_ay41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az41
  r = spreadsheet.costpercapita_az41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba41
  r = spreadsheet.costpercapita_ba41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb41
  r = spreadsheet.costpercapita_bb41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc41
  r = spreadsheet.costpercapita_bc41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd41
  r = spreadsheet.costpercapita_bd41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be41
  r = spreadsheet.costpercapita_be41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf41
  r = spreadsheet.costpercapita_bf41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg41
  r = spreadsheet.costpercapita_bg41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi41
  r = spreadsheet.costpercapita_bi41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj41
  r = spreadsheet.costpercapita_bj41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk41
  r = spreadsheet.costpercapita_bk41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl41
  r = spreadsheet.costpercapita_bl41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm41
  r = spreadsheet.costpercapita_bm41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn41
  r = spreadsheet.costpercapita_bn41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo41
  r = spreadsheet.costpercapita_bo41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp41
  r = spreadsheet.costpercapita_bp41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq41
  r = spreadsheet.costpercapita_bq41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs41
  r = spreadsheet.costpercapita_bs41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt41
  r = spreadsheet.costpercapita_bt41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu41
  r = spreadsheet.costpercapita_bu41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv41
  r = spreadsheet.costpercapita_bv41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw41
  r = spreadsheet.costpercapita_bw41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx41
  r = spreadsheet.costpercapita_bx41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by41
  r = spreadsheet.costpercapita_by41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz41
  r = spreadsheet.costpercapita_bz41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca41
  r = spreadsheet.costpercapita_ca41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc41
  r = spreadsheet.costpercapita_cc41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd41
  r = spreadsheet.costpercapita_cd41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf41
  r = spreadsheet.costpercapita_cf41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg41
  r = spreadsheet.costpercapita_cg41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch41
  r = spreadsheet.costpercapita_ch41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci41
  r = spreadsheet.costpercapita_ci41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj41
  r = spreadsheet.costpercapita_cj41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck41
  r = spreadsheet.costpercapita_ck41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl41
  r = spreadsheet.costpercapita_cl41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm41
  r = spreadsheet.costpercapita_cm41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn41
  r = spreadsheet.costpercapita_cn41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp41
  r = spreadsheet.costpercapita_cp41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq41
  r = spreadsheet.costpercapita_cq41
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr41
  r = spreadsheet.costpercapita_cr41
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a42
  r = spreadsheet.costpercapita_a42
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b42
  r = spreadsheet.costpercapita_b42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c42
  r = spreadsheet.costpercapita_c42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e42
  r = spreadsheet.costpercapita_e42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f42
  r = spreadsheet.costpercapita_f42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g42
  r = spreadsheet.costpercapita_g42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h42
  r = spreadsheet.costpercapita_h42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i42
  r = spreadsheet.costpercapita_i42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j42
  r = spreadsheet.costpercapita_j42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k42
  r = spreadsheet.costpercapita_k42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l42
  r = spreadsheet.costpercapita_l42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m42
  r = spreadsheet.costpercapita_m42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o42
  r = spreadsheet.costpercapita_o42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p42
  r = spreadsheet.costpercapita_p42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q42
  r = spreadsheet.costpercapita_q42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r42
  r = spreadsheet.costpercapita_r42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s42
  r = spreadsheet.costpercapita_s42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t42
  r = spreadsheet.costpercapita_t42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u42
  r = spreadsheet.costpercapita_u42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v42
  r = spreadsheet.costpercapita_v42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w42
  r = spreadsheet.costpercapita_w42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y42
  r = spreadsheet.costpercapita_y42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z42
  r = spreadsheet.costpercapita_z42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa42
  r = spreadsheet.costpercapita_aa42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab42
  r = spreadsheet.costpercapita_ab42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac42
  r = spreadsheet.costpercapita_ac42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad42
  r = spreadsheet.costpercapita_ad42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae42
  r = spreadsheet.costpercapita_ae42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af42
  r = spreadsheet.costpercapita_af42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag42
  r = spreadsheet.costpercapita_ag42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai42
  r = spreadsheet.costpercapita_ai42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj42
  r = spreadsheet.costpercapita_aj42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak42
  r = spreadsheet.costpercapita_ak42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al42
  r = spreadsheet.costpercapita_al42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am42
  r = spreadsheet.costpercapita_am42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an42
  r = spreadsheet.costpercapita_an42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao42
  r = spreadsheet.costpercapita_ao42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap42
  r = spreadsheet.costpercapita_ap42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq42
  r = spreadsheet.costpercapita_aq42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as42
  r = spreadsheet.costpercapita_as42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at42
  r = spreadsheet.costpercapita_at42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av42
  r = spreadsheet.costpercapita_av42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw42
  r = spreadsheet.costpercapita_aw42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay42
  r = spreadsheet.costpercapita_ay42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az42
  r = spreadsheet.costpercapita_az42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba42
  r = spreadsheet.costpercapita_ba42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb42
  r = spreadsheet.costpercapita_bb42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc42
  r = spreadsheet.costpercapita_bc42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd42
  r = spreadsheet.costpercapita_bd42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be42
  r = spreadsheet.costpercapita_be42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf42
  r = spreadsheet.costpercapita_bf42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg42
  r = spreadsheet.costpercapita_bg42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi42
  r = spreadsheet.costpercapita_bi42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj42
  r = spreadsheet.costpercapita_bj42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk42
  r = spreadsheet.costpercapita_bk42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl42
  r = spreadsheet.costpercapita_bl42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm42
  r = spreadsheet.costpercapita_bm42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn42
  r = spreadsheet.costpercapita_bn42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo42
  r = spreadsheet.costpercapita_bo42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp42
  r = spreadsheet.costpercapita_bp42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq42
  r = spreadsheet.costpercapita_bq42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs42
  r = spreadsheet.costpercapita_bs42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt42
  r = spreadsheet.costpercapita_bt42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu42
  r = spreadsheet.costpercapita_bu42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv42
  r = spreadsheet.costpercapita_bv42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw42
  r = spreadsheet.costpercapita_bw42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx42
  r = spreadsheet.costpercapita_bx42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by42
  r = spreadsheet.costpercapita_by42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz42
  r = spreadsheet.costpercapita_bz42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca42
  r = spreadsheet.costpercapita_ca42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc42
  r = spreadsheet.costpercapita_cc42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd42
  r = spreadsheet.costpercapita_cd42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf42
  r = spreadsheet.costpercapita_cf42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg42
  r = spreadsheet.costpercapita_cg42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch42
  r = spreadsheet.costpercapita_ch42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci42
  r = spreadsheet.costpercapita_ci42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj42
  r = spreadsheet.costpercapita_cj42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck42
  r = spreadsheet.costpercapita_ck42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl42
  r = spreadsheet.costpercapita_cl42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm42
  r = spreadsheet.costpercapita_cm42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn42
  r = spreadsheet.costpercapita_cn42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp42
  r = spreadsheet.costpercapita_cp42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq42
  r = spreadsheet.costpercapita_cq42
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr42
  r = spreadsheet.costpercapita_cr42
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a43
  r = spreadsheet.costpercapita_a43
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b43
  r = spreadsheet.costpercapita_b43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c43
  r = spreadsheet.costpercapita_c43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e43
  r = spreadsheet.costpercapita_e43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number],0.001)
end

def test_costpercapita_f43
  r = spreadsheet.costpercapita_f43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_g43
  r = spreadsheet.costpercapita_g43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number],0.001)
end

def test_costpercapita_h43
  r = spreadsheet.costpercapita_h43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_i43
  r = spreadsheet.costpercapita_i43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_j43
  r = spreadsheet.costpercapita_j43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number],0.001)
end

def test_costpercapita_k43
  r = spreadsheet.costpercapita_k43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_l43
  r = spreadsheet.costpercapita_l43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number],0.001)
end

def test_costpercapita_m43
  r = spreadsheet.costpercapita_m43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number],0.001)
end

def test_costpercapita_o43
  r = spreadsheet.costpercapita_o43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number],0.001)
end

def test_costpercapita_p43
  r = spreadsheet.costpercapita_p43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number],0.001)
end

def test_costpercapita_q43
  r = spreadsheet.costpercapita_q43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number],0.001)
end

def test_costpercapita_r43
  r = spreadsheet.costpercapita_r43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number],0.001)
end

def test_costpercapita_s43
  r = spreadsheet.costpercapita_s43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number],0.001)
end

def test_costpercapita_t43
  r = spreadsheet.costpercapita_t43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number],0.001)
end

def test_costpercapita_u43
  r = spreadsheet.costpercapita_u43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number],0.001)
end

def test_costpercapita_v43
  r = spreadsheet.costpercapita_v43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number],0.001)
end

def test_costpercapita_w43
  r = spreadsheet.costpercapita_w43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number],0.001)
end

def test_costpercapita_y43
  r = spreadsheet.costpercapita_y43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z43
  r = spreadsheet.costpercapita_z43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa43
  r = spreadsheet.costpercapita_aa43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab43
  r = spreadsheet.costpercapita_ab43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac43
  r = spreadsheet.costpercapita_ac43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad43
  r = spreadsheet.costpercapita_ad43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae43
  r = spreadsheet.costpercapita_ae43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af43
  r = spreadsheet.costpercapita_af43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag43
  r = spreadsheet.costpercapita_ag43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai43
  r = spreadsheet.costpercapita_ai43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number],0.001)
end

def test_costpercapita_aj43
  r = spreadsheet.costpercapita_aj43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number],0.001)
end

def test_costpercapita_ak43
  r = spreadsheet.costpercapita_ak43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number],0.001)
end

def test_costpercapita_al43
  r = spreadsheet.costpercapita_al43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number],0.001)
end

def test_costpercapita_am43
  r = spreadsheet.costpercapita_am43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number],0.001)
end

def test_costpercapita_an43
  r = spreadsheet.costpercapita_an43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number],0.001)
end

def test_costpercapita_ao43
  r = spreadsheet.costpercapita_ao43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number],0.001)
end

def test_costpercapita_ap43
  r = spreadsheet.costpercapita_ap43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number],0.001)
end

def test_costpercapita_aq43
  r = spreadsheet.costpercapita_aq43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number],0.001)
end

def test_costpercapita_as43
  r = spreadsheet.costpercapita_as43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number],0.001)
end

def test_costpercapita_at43
  r = spreadsheet.costpercapita_at43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number],0.001)
end

def test_costpercapita_av43
  r = spreadsheet.costpercapita_av43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw43
  r = spreadsheet.costpercapita_aw43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay43
  r = spreadsheet.costpercapita_ay43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number],0.001)
end

def test_costpercapita_az43
  r = spreadsheet.costpercapita_az43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_ba43
  r = spreadsheet.costpercapita_ba43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number],0.001)
end

def test_costpercapita_bb43
  r = spreadsheet.costpercapita_bb43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_bc43
  r = spreadsheet.costpercapita_bc43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_bd43
  r = spreadsheet.costpercapita_bd43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number],0.001)
end

def test_costpercapita_be43
  r = spreadsheet.costpercapita_be43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_bf43
  r = spreadsheet.costpercapita_bf43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number],0.001)
end

def test_costpercapita_bg43
  r = spreadsheet.costpercapita_bg43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number],0.001)
end

def test_costpercapita_bi43
  r = spreadsheet.costpercapita_bi43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number],0.001)
end

def test_costpercapita_bj43
  r = spreadsheet.costpercapita_bj43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_bk43
  r = spreadsheet.costpercapita_bk43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number],0.001)
end

def test_costpercapita_bl43
  r = spreadsheet.costpercapita_bl43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_bm43
  r = spreadsheet.costpercapita_bm43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_bn43
  r = spreadsheet.costpercapita_bn43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number],0.001)
end

def test_costpercapita_bo43
  r = spreadsheet.costpercapita_bo43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_bp43
  r = spreadsheet.costpercapita_bp43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number],0.001)
end

def test_costpercapita_bq43
  r = spreadsheet.costpercapita_bq43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number],0.001)
end

def test_costpercapita_bs43
  r = spreadsheet.costpercapita_bs43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.893309368875432,r[:number],0.001)
end

def test_costpercapita_bt43
  r = spreadsheet.costpercapita_bt43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number],0.001)
end

def test_costpercapita_bu43
  r = spreadsheet.costpercapita_bu43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number],0.001)
end

def test_costpercapita_bv43
  r = spreadsheet.costpercapita_bv43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number],0.001)
end

def test_costpercapita_bw43
  r = spreadsheet.costpercapita_bw43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number],0.001)
end

def test_costpercapita_bx43
  r = spreadsheet.costpercapita_bx43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number],0.001)
end

def test_costpercapita_by43
  r = spreadsheet.costpercapita_by43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number],0.001)
end

def test_costpercapita_bz43
  r = spreadsheet.costpercapita_bz43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number],0.001)
end

def test_costpercapita_ca43
  r = spreadsheet.costpercapita_ca43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number],0.001)
end

def test_costpercapita_cc43
  r = spreadsheet.costpercapita_cc43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.528436409641897,r[:number],0.001)
end

def test_costpercapita_cd43
  r = spreadsheet.costpercapita_cd43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.19160492603066,r[:number],0.001)
end

def test_costpercapita_cf43
  r = spreadsheet.costpercapita_cf43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8209189795268315,r[:number],0.001)
end

def test_costpercapita_cg43
  r = spreadsheet.costpercapita_cg43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch43
  r = spreadsheet.costpercapita_ch43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci43
  r = spreadsheet.costpercapita_ci43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj43
  r = spreadsheet.costpercapita_cj43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck43
  r = spreadsheet.costpercapita_ck43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl43
  r = spreadsheet.costpercapita_cl43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm43
  r = spreadsheet.costpercapita_cm43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn43
  r = spreadsheet.costpercapita_cn43
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp43
  r = spreadsheet.costpercapita_cp43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.20232433105853684,r[:number],0.001)
end

def test_costpercapita_cq43
  r = spreadsheet.costpercapita_cq43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8209189795268315,r[:number],0.001)
end

def test_costpercapita_cr43
  r = spreadsheet.costpercapita_cr43
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a44
  r = spreadsheet.costpercapita_a44
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b44
  r = spreadsheet.costpercapita_b44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c44
  r = spreadsheet.costpercapita_c44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e44
  r = spreadsheet.costpercapita_e44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f44
  r = spreadsheet.costpercapita_f44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g44
  r = spreadsheet.costpercapita_g44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h44
  r = spreadsheet.costpercapita_h44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i44
  r = spreadsheet.costpercapita_i44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j44
  r = spreadsheet.costpercapita_j44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k44
  r = spreadsheet.costpercapita_k44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l44
  r = spreadsheet.costpercapita_l44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m44
  r = spreadsheet.costpercapita_m44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o44
  r = spreadsheet.costpercapita_o44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p44
  r = spreadsheet.costpercapita_p44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q44
  r = spreadsheet.costpercapita_q44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r44
  r = spreadsheet.costpercapita_r44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s44
  r = spreadsheet.costpercapita_s44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t44
  r = spreadsheet.costpercapita_t44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u44
  r = spreadsheet.costpercapita_u44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v44
  r = spreadsheet.costpercapita_v44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w44
  r = spreadsheet.costpercapita_w44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y44
  r = spreadsheet.costpercapita_y44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z44
  r = spreadsheet.costpercapita_z44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa44
  r = spreadsheet.costpercapita_aa44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab44
  r = spreadsheet.costpercapita_ab44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac44
  r = spreadsheet.costpercapita_ac44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad44
  r = spreadsheet.costpercapita_ad44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae44
  r = spreadsheet.costpercapita_ae44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af44
  r = spreadsheet.costpercapita_af44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag44
  r = spreadsheet.costpercapita_ag44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai44
  r = spreadsheet.costpercapita_ai44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj44
  r = spreadsheet.costpercapita_aj44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak44
  r = spreadsheet.costpercapita_ak44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al44
  r = spreadsheet.costpercapita_al44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am44
  r = spreadsheet.costpercapita_am44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an44
  r = spreadsheet.costpercapita_an44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao44
  r = spreadsheet.costpercapita_ao44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap44
  r = spreadsheet.costpercapita_ap44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq44
  r = spreadsheet.costpercapita_aq44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as44
  r = spreadsheet.costpercapita_as44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at44
  r = spreadsheet.costpercapita_at44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av44
  r = spreadsheet.costpercapita_av44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw44
  r = spreadsheet.costpercapita_aw44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay44
  r = spreadsheet.costpercapita_ay44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az44
  r = spreadsheet.costpercapita_az44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba44
  r = spreadsheet.costpercapita_ba44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb44
  r = spreadsheet.costpercapita_bb44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc44
  r = spreadsheet.costpercapita_bc44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd44
  r = spreadsheet.costpercapita_bd44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be44
  r = spreadsheet.costpercapita_be44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf44
  r = spreadsheet.costpercapita_bf44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg44
  r = spreadsheet.costpercapita_bg44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi44
  r = spreadsheet.costpercapita_bi44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj44
  r = spreadsheet.costpercapita_bj44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk44
  r = spreadsheet.costpercapita_bk44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl44
  r = spreadsheet.costpercapita_bl44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm44
  r = spreadsheet.costpercapita_bm44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn44
  r = spreadsheet.costpercapita_bn44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo44
  r = spreadsheet.costpercapita_bo44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp44
  r = spreadsheet.costpercapita_bp44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq44
  r = spreadsheet.costpercapita_bq44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs44
  r = spreadsheet.costpercapita_bs44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt44
  r = spreadsheet.costpercapita_bt44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu44
  r = spreadsheet.costpercapita_bu44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv44
  r = spreadsheet.costpercapita_bv44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw44
  r = spreadsheet.costpercapita_bw44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx44
  r = spreadsheet.costpercapita_bx44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by44
  r = spreadsheet.costpercapita_by44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz44
  r = spreadsheet.costpercapita_bz44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca44
  r = spreadsheet.costpercapita_ca44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc44
  r = spreadsheet.costpercapita_cc44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd44
  r = spreadsheet.costpercapita_cd44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf44
  r = spreadsheet.costpercapita_cf44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg44
  r = spreadsheet.costpercapita_cg44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch44
  r = spreadsheet.costpercapita_ch44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci44
  r = spreadsheet.costpercapita_ci44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj44
  r = spreadsheet.costpercapita_cj44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck44
  r = spreadsheet.costpercapita_ck44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl44
  r = spreadsheet.costpercapita_cl44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm44
  r = spreadsheet.costpercapita_cm44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn44
  r = spreadsheet.costpercapita_cn44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp44
  r = spreadsheet.costpercapita_cp44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq44
  r = spreadsheet.costpercapita_cq44
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr44
  r = spreadsheet.costpercapita_cr44
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a45
  r = spreadsheet.costpercapita_a45
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b45
  r = spreadsheet.costpercapita_b45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c45
  r = spreadsheet.costpercapita_c45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e45
  r = spreadsheet.costpercapita_e45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f45
  r = spreadsheet.costpercapita_f45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g45
  r = spreadsheet.costpercapita_g45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h45
  r = spreadsheet.costpercapita_h45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i45
  r = spreadsheet.costpercapita_i45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j45
  r = spreadsheet.costpercapita_j45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k45
  r = spreadsheet.costpercapita_k45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l45
  r = spreadsheet.costpercapita_l45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m45
  r = spreadsheet.costpercapita_m45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o45
  r = spreadsheet.costpercapita_o45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p45
  r = spreadsheet.costpercapita_p45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q45
  r = spreadsheet.costpercapita_q45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r45
  r = spreadsheet.costpercapita_r45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s45
  r = spreadsheet.costpercapita_s45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t45
  r = spreadsheet.costpercapita_t45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u45
  r = spreadsheet.costpercapita_u45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v45
  r = spreadsheet.costpercapita_v45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w45
  r = spreadsheet.costpercapita_w45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y45
  r = spreadsheet.costpercapita_y45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z45
  r = spreadsheet.costpercapita_z45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa45
  r = spreadsheet.costpercapita_aa45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab45
  r = spreadsheet.costpercapita_ab45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac45
  r = spreadsheet.costpercapita_ac45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad45
  r = spreadsheet.costpercapita_ad45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae45
  r = spreadsheet.costpercapita_ae45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af45
  r = spreadsheet.costpercapita_af45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag45
  r = spreadsheet.costpercapita_ag45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai45
  r = spreadsheet.costpercapita_ai45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj45
  r = spreadsheet.costpercapita_aj45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak45
  r = spreadsheet.costpercapita_ak45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al45
  r = spreadsheet.costpercapita_al45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am45
  r = spreadsheet.costpercapita_am45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an45
  r = spreadsheet.costpercapita_an45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao45
  r = spreadsheet.costpercapita_ao45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap45
  r = spreadsheet.costpercapita_ap45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq45
  r = spreadsheet.costpercapita_aq45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as45
  r = spreadsheet.costpercapita_as45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at45
  r = spreadsheet.costpercapita_at45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av45
  r = spreadsheet.costpercapita_av45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw45
  r = spreadsheet.costpercapita_aw45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay45
  r = spreadsheet.costpercapita_ay45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az45
  r = spreadsheet.costpercapita_az45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba45
  r = spreadsheet.costpercapita_ba45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb45
  r = spreadsheet.costpercapita_bb45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc45
  r = spreadsheet.costpercapita_bc45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd45
  r = spreadsheet.costpercapita_bd45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be45
  r = spreadsheet.costpercapita_be45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf45
  r = spreadsheet.costpercapita_bf45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg45
  r = spreadsheet.costpercapita_bg45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi45
  r = spreadsheet.costpercapita_bi45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj45
  r = spreadsheet.costpercapita_bj45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk45
  r = spreadsheet.costpercapita_bk45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl45
  r = spreadsheet.costpercapita_bl45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm45
  r = spreadsheet.costpercapita_bm45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn45
  r = spreadsheet.costpercapita_bn45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo45
  r = spreadsheet.costpercapita_bo45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp45
  r = spreadsheet.costpercapita_bp45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq45
  r = spreadsheet.costpercapita_bq45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs45
  r = spreadsheet.costpercapita_bs45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt45
  r = spreadsheet.costpercapita_bt45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu45
  r = spreadsheet.costpercapita_bu45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv45
  r = spreadsheet.costpercapita_bv45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw45
  r = spreadsheet.costpercapita_bw45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx45
  r = spreadsheet.costpercapita_bx45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by45
  r = spreadsheet.costpercapita_by45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz45
  r = spreadsheet.costpercapita_bz45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca45
  r = spreadsheet.costpercapita_ca45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc45
  r = spreadsheet.costpercapita_cc45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd45
  r = spreadsheet.costpercapita_cd45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf45
  r = spreadsheet.costpercapita_cf45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg45
  r = spreadsheet.costpercapita_cg45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch45
  r = spreadsheet.costpercapita_ch45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci45
  r = spreadsheet.costpercapita_ci45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj45
  r = spreadsheet.costpercapita_cj45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck45
  r = spreadsheet.costpercapita_ck45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl45
  r = spreadsheet.costpercapita_cl45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm45
  r = spreadsheet.costpercapita_cm45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn45
  r = spreadsheet.costpercapita_cn45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp45
  r = spreadsheet.costpercapita_cp45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq45
  r = spreadsheet.costpercapita_cq45
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr45
  r = spreadsheet.costpercapita_cr45
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a46
  r = spreadsheet.costpercapita_a46
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b46
  r = spreadsheet.costpercapita_b46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c46
  r = spreadsheet.costpercapita_c46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e46
  r = spreadsheet.costpercapita_e46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f46
  r = spreadsheet.costpercapita_f46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g46
  r = spreadsheet.costpercapita_g46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h46
  r = spreadsheet.costpercapita_h46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i46
  r = spreadsheet.costpercapita_i46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j46
  r = spreadsheet.costpercapita_j46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k46
  r = spreadsheet.costpercapita_k46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l46
  r = spreadsheet.costpercapita_l46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m46
  r = spreadsheet.costpercapita_m46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o46
  r = spreadsheet.costpercapita_o46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p46
  r = spreadsheet.costpercapita_p46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q46
  r = spreadsheet.costpercapita_q46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r46
  r = spreadsheet.costpercapita_r46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s46
  r = spreadsheet.costpercapita_s46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t46
  r = spreadsheet.costpercapita_t46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u46
  r = spreadsheet.costpercapita_u46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v46
  r = spreadsheet.costpercapita_v46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w46
  r = spreadsheet.costpercapita_w46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y46
  r = spreadsheet.costpercapita_y46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z46
  r = spreadsheet.costpercapita_z46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa46
  r = spreadsheet.costpercapita_aa46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab46
  r = spreadsheet.costpercapita_ab46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac46
  r = spreadsheet.costpercapita_ac46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad46
  r = spreadsheet.costpercapita_ad46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae46
  r = spreadsheet.costpercapita_ae46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af46
  r = spreadsheet.costpercapita_af46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag46
  r = spreadsheet.costpercapita_ag46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai46
  r = spreadsheet.costpercapita_ai46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj46
  r = spreadsheet.costpercapita_aj46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak46
  r = spreadsheet.costpercapita_ak46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al46
  r = spreadsheet.costpercapita_al46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am46
  r = spreadsheet.costpercapita_am46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an46
  r = spreadsheet.costpercapita_an46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao46
  r = spreadsheet.costpercapita_ao46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap46
  r = spreadsheet.costpercapita_ap46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq46
  r = spreadsheet.costpercapita_aq46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as46
  r = spreadsheet.costpercapita_as46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at46
  r = spreadsheet.costpercapita_at46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av46
  r = spreadsheet.costpercapita_av46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw46
  r = spreadsheet.costpercapita_aw46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay46
  r = spreadsheet.costpercapita_ay46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az46
  r = spreadsheet.costpercapita_az46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba46
  r = spreadsheet.costpercapita_ba46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb46
  r = spreadsheet.costpercapita_bb46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc46
  r = spreadsheet.costpercapita_bc46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd46
  r = spreadsheet.costpercapita_bd46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be46
  r = spreadsheet.costpercapita_be46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf46
  r = spreadsheet.costpercapita_bf46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg46
  r = spreadsheet.costpercapita_bg46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi46
  r = spreadsheet.costpercapita_bi46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj46
  r = spreadsheet.costpercapita_bj46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk46
  r = spreadsheet.costpercapita_bk46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl46
  r = spreadsheet.costpercapita_bl46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm46
  r = spreadsheet.costpercapita_bm46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn46
  r = spreadsheet.costpercapita_bn46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo46
  r = spreadsheet.costpercapita_bo46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp46
  r = spreadsheet.costpercapita_bp46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq46
  r = spreadsheet.costpercapita_bq46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs46
  r = spreadsheet.costpercapita_bs46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt46
  r = spreadsheet.costpercapita_bt46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu46
  r = spreadsheet.costpercapita_bu46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv46
  r = spreadsheet.costpercapita_bv46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw46
  r = spreadsheet.costpercapita_bw46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx46
  r = spreadsheet.costpercapita_bx46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by46
  r = spreadsheet.costpercapita_by46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz46
  r = spreadsheet.costpercapita_bz46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca46
  r = spreadsheet.costpercapita_ca46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc46
  r = spreadsheet.costpercapita_cc46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd46
  r = spreadsheet.costpercapita_cd46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf46
  r = spreadsheet.costpercapita_cf46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg46
  r = spreadsheet.costpercapita_cg46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch46
  r = spreadsheet.costpercapita_ch46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci46
  r = spreadsheet.costpercapita_ci46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj46
  r = spreadsheet.costpercapita_cj46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck46
  r = spreadsheet.costpercapita_ck46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl46
  r = spreadsheet.costpercapita_cl46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm46
  r = spreadsheet.costpercapita_cm46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn46
  r = spreadsheet.costpercapita_cn46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp46
  r = spreadsheet.costpercapita_cp46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq46
  r = spreadsheet.costpercapita_cq46
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr46
  r = spreadsheet.costpercapita_cr46
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a47
  r = spreadsheet.costpercapita_a47
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b47
  r = spreadsheet.costpercapita_b47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel transfers",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c47
  r = spreadsheet.costpercapita_c47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e47
  r = spreadsheet.costpercapita_e47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(294.3713083273192,r[:number],0.001)
end

def test_costpercapita_f47
  r = spreadsheet.costpercapita_f47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_g47
  r = spreadsheet.costpercapita_g47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.039884749071,r[:number],0.001)
end

def test_costpercapita_h47
  r = spreadsheet.costpercapita_h47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.154891813795,r[:number],0.001)
end

def test_costpercapita_i47
  r = spreadsheet.costpercapita_i47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.0030195685927,r[:number],0.001)
end

def test_costpercapita_j47
  r = spreadsheet.costpercapita_j47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2313.519417608476,r[:number],0.001)
end

def test_costpercapita_k47
  r = spreadsheet.costpercapita_k47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2590.951950404437,r[:number],0.001)
end

def test_costpercapita_l47
  r = spreadsheet.costpercapita_l47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.5342194217233,r[:number],0.001)
end

def test_costpercapita_m47
  r = spreadsheet.costpercapita_m47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3006.835587632441,r[:number],0.001)
end

def test_costpercapita_o47
  r = spreadsheet.costpercapita_o47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9079162930800998,r[:number],0.001)
end

def test_costpercapita_p47
  r = spreadsheet.costpercapita_p47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5690368174964877,r[:number],0.001)
end

def test_costpercapita_q47
  r = spreadsheet.costpercapita_q47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1806283511240525,r[:number],0.001)
end

def test_costpercapita_r47
  r = spreadsheet.costpercapita_r47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7808584020805944,r[:number],0.001)
end

def test_costpercapita_s47
  r = spreadsheet.costpercapita_s47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3674474789021858,r[:number],0.001)
end

def test_costpercapita_t47
  r = spreadsheet.costpercapita_t47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.948839419914746,r[:number],0.001)
end

def test_costpercapita_u47
  r = spreadsheet.costpercapita_u47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.57420519224071,r[:number],0.001)
end

def test_costpercapita_v47
  r = spreadsheet.costpercapita_v47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.205775488251698,r[:number],0.001)
end

def test_costpercapita_w47
  r = spreadsheet.costpercapita_w47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.828158385218579,r[:number],0.001)
end

def test_costpercapita_y47
  r = spreadsheet.costpercapita_y47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z47
  r = spreadsheet.costpercapita_z47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa47
  r = spreadsheet.costpercapita_aa47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab47
  r = spreadsheet.costpercapita_ab47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac47
  r = spreadsheet.costpercapita_ac47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad47
  r = spreadsheet.costpercapita_ad47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae47
  r = spreadsheet.costpercapita_ae47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af47
  r = spreadsheet.costpercapita_af47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag47
  r = spreadsheet.costpercapita_ag47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai47
  r = spreadsheet.costpercapita_ai47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(295.27922462039925,r[:number],0.001)
end

def test_costpercapita_aj47
  r = spreadsheet.costpercapita_aj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1604.3310892513707,r[:number],0.001)
end

def test_costpercapita_ak47
  r = spreadsheet.costpercapita_ak47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1755.2205131001951,r[:number],0.001)
end

def test_costpercapita_al47
  r = spreadsheet.costpercapita_al47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1954.9357502158757,r[:number],0.001)
end

def test_costpercapita_am47
  r = spreadsheet.costpercapita_am47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2134.370467047495,r[:number],0.001)
end

def test_costpercapita_an47
  r = spreadsheet.costpercapita_an47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2317.468257028391,r[:number],0.001)
end

def test_costpercapita_ao47
  r = spreadsheet.costpercapita_ao47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.5261555966777,r[:number],0.001)
end

def test_costpercapita_ap47
  r = spreadsheet.costpercapita_ap47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2818.739994909975,r[:number],0.001)
end

def test_costpercapita_aq47
  r = spreadsheet.costpercapita_aq47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3012.66374601766,r[:number],0.001)
end

def test_costpercapita_as47
  r = spreadsheet.costpercapita_as47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2054.2816886431156,r[:number],0.001)
end

def test_costpercapita_at47
  r = spreadsheet.costpercapita_at47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42320.11945205689,r[:number],0.001)
end

def test_costpercapita_av47
  r = spreadsheet.costpercapita_av47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw47
  r = spreadsheet.costpercapita_aw47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay47
  r = spreadsheet.costpercapita_ay47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.62278499639152,r[:number],0.001)
end

def test_costpercapita_az47
  r = spreadsheet.costpercapita_az47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_ba47
  r = spreadsheet.costpercapita_ba47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.039884749071,r[:number],0.001)
end

def test_costpercapita_bb47
  r = spreadsheet.costpercapita_bb47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.154891813795,r[:number],0.001)
end

def test_costpercapita_bc47
  r = spreadsheet.costpercapita_bc47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.0030195685927,r[:number],0.001)
end

def test_costpercapita_bd47
  r = spreadsheet.costpercapita_bd47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2313.519417608476,r[:number],0.001)
end

def test_costpercapita_be47
  r = spreadsheet.costpercapita_be47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2590.951950404437,r[:number],0.001)
end

def test_costpercapita_bf47
  r = spreadsheet.costpercapita_bf47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.534219421723,r[:number],0.001)
end

def test_costpercapita_bg47
  r = spreadsheet.costpercapita_bg47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3006.835587632441,r[:number],0.001)
end

def test_costpercapita_bi47
  r = spreadsheet.costpercapita_bi47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.62278499639152,r[:number],0.001)
end

def test_costpercapita_bj47
  r = spreadsheet.costpercapita_bj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_bk47
  r = spreadsheet.costpercapita_bk47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.039884749071,r[:number],0.001)
end

def test_costpercapita_bl47
  r = spreadsheet.costpercapita_bl47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.154891813795,r[:number],0.001)
end

def test_costpercapita_bm47
  r = spreadsheet.costpercapita_bm47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.0030195685927,r[:number],0.001)
end

def test_costpercapita_bn47
  r = spreadsheet.costpercapita_bn47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2313.519417608476,r[:number],0.001)
end

def test_costpercapita_bo47
  r = spreadsheet.costpercapita_bo47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2590.951950404437,r[:number],0.001)
end

def test_costpercapita_bp47
  r = spreadsheet.costpercapita_bp47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.534219421723,r[:number],0.001)
end

def test_costpercapita_bq47
  r = spreadsheet.costpercapita_bq47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3006.835587632441,r[:number],0.001)
end

def test_costpercapita_bs47
  r = spreadsheet.costpercapita_bs47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.53070128947164,r[:number],0.001)
end

def test_costpercapita_bt47
  r = spreadsheet.costpercapita_bt47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1604.3310892513707,r[:number],0.001)
end

def test_costpercapita_bu47
  r = spreadsheet.costpercapita_bu47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1755.2205131001951,r[:number],0.001)
end

def test_costpercapita_bv47
  r = spreadsheet.costpercapita_bv47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1954.9357502158757,r[:number],0.001)
end

def test_costpercapita_bw47
  r = spreadsheet.costpercapita_bw47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2134.370467047495,r[:number],0.001)
end

def test_costpercapita_bx47
  r = spreadsheet.costpercapita_bx47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2317.468257028391,r[:number],0.001)
end

def test_costpercapita_by47
  r = spreadsheet.costpercapita_by47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.5261555966777,r[:number],0.001)
end

def test_costpercapita_bz47
  r = spreadsheet.costpercapita_bz47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2818.7399949099745,r[:number],0.001)
end

def test_costpercapita_ca47
  r = spreadsheet.costpercapita_ca47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3012.66374601766,r[:number],0.001)
end

def test_costpercapita_cc47
  r = spreadsheet.costpercapita_cc47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2041.1985193841235,r[:number],0.001)
end

def test_costpercapita_cd47
  r = spreadsheet.costpercapita_cd47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42202.37092872596,r[:number],0.001)
end

def test_costpercapita_cf47
  r = spreadsheet.costpercapita_cf47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-117.74852333092767,r[:number],0.001)
end

def test_costpercapita_cg47
  r = spreadsheet.costpercapita_cg47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch47
  r = spreadsheet.costpercapita_ch47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci47
  r = spreadsheet.costpercapita_ci47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj47
  r = spreadsheet.costpercapita_cj47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck47
  r = spreadsheet.costpercapita_ck47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl47
  r = spreadsheet.costpercapita_cl47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm47
  r = spreadsheet.costpercapita_cm47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn47
  r = spreadsheet.costpercapita_cn47
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp47
  r = spreadsheet.costpercapita_cp47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-13.083169258991964,r[:number],0.001)
end

def test_costpercapita_cq47
  r = spreadsheet.costpercapita_cq47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-117.74852333092767,r[:number],0.001)
end

def test_costpercapita_cr47
  r = spreadsheet.costpercapita_cr47
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a48
  r = spreadsheet.costpercapita_a48
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b48
  r = spreadsheet.costpercapita_b48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c48
  r = spreadsheet.costpercapita_c48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e48
  r = spreadsheet.costpercapita_e48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f48
  r = spreadsheet.costpercapita_f48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g48
  r = spreadsheet.costpercapita_g48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h48
  r = spreadsheet.costpercapita_h48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i48
  r = spreadsheet.costpercapita_i48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j48
  r = spreadsheet.costpercapita_j48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k48
  r = spreadsheet.costpercapita_k48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l48
  r = spreadsheet.costpercapita_l48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m48
  r = spreadsheet.costpercapita_m48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o48
  r = spreadsheet.costpercapita_o48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p48
  r = spreadsheet.costpercapita_p48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q48
  r = spreadsheet.costpercapita_q48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r48
  r = spreadsheet.costpercapita_r48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s48
  r = spreadsheet.costpercapita_s48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t48
  r = spreadsheet.costpercapita_t48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u48
  r = spreadsheet.costpercapita_u48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v48
  r = spreadsheet.costpercapita_v48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w48
  r = spreadsheet.costpercapita_w48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y48
  r = spreadsheet.costpercapita_y48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012696391683876304,r[:number],0.001)
end

def test_costpercapita_z48
  r = spreadsheet.costpercapita_z48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012277727288862101,r[:number],0.001)
end

def test_costpercapita_aa48
  r = spreadsheet.costpercapita_aa48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011875777205729441,r[:number],0.001)
end

def test_costpercapita_ab48
  r = spreadsheet.costpercapita_ab48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011508061878062094,r[:number],0.001)
end

def test_costpercapita_ac48
  r = spreadsheet.costpercapita_ac48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011193659865710656,r[:number],0.001)
end

def test_costpercapita_ad48
  r = spreadsheet.costpercapita_ad48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010929985418846034,r[:number],0.001)
end

def test_costpercapita_ae48
  r = spreadsheet.costpercapita_ae48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010696888327992812,r[:number],0.001)
end

def test_costpercapita_af48
  r = spreadsheet.costpercapita_af48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010483507597981848,r[:number],0.001)
end

def test_costpercapita_ag48
  r = spreadsheet.costpercapita_ag48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010287867154933185,r[:number],0.001)
end

def test_costpercapita_ai48
  r = spreadsheet.costpercapita_ai48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012696391683876304,r[:number],0.001)
end

def test_costpercapita_aj48
  r = spreadsheet.costpercapita_aj48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012277727288862101,r[:number],0.001)
end

def test_costpercapita_ak48
  r = spreadsheet.costpercapita_ak48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011875777205729441,r[:number],0.001)
end

def test_costpercapita_al48
  r = spreadsheet.costpercapita_al48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011508061878062094,r[:number],0.001)
end

def test_costpercapita_am48
  r = spreadsheet.costpercapita_am48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011193659865710656,r[:number],0.001)
end

def test_costpercapita_an48
  r = spreadsheet.costpercapita_an48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010929985418846034,r[:number],0.001)
end

def test_costpercapita_ao48
  r = spreadsheet.costpercapita_ao48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010696888327992812,r[:number],0.001)
end

def test_costpercapita_ap48
  r = spreadsheet.costpercapita_ap48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010483507597981848,r[:number],0.001)
end

def test_costpercapita_aq48
  r = spreadsheet.costpercapita_aq48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010287867154933185,r[:number],0.001)
end

def test_costpercapita_as48
  r = spreadsheet.costpercapita_as48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011327762935777164,r[:number],0.001)
end

def test_costpercapita_at48
  r = spreadsheet.costpercapita_at48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.24087834644649175,r[:number],0.001)
end

def test_costpercapita_av48
  r = spreadsheet.costpercapita_av48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw48
  r = spreadsheet.costpercapita_aw48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay48
  r = spreadsheet.costpercapita_ay48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az48
  r = spreadsheet.costpercapita_az48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba48
  r = spreadsheet.costpercapita_ba48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb48
  r = spreadsheet.costpercapita_bb48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc48
  r = spreadsheet.costpercapita_bc48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd48
  r = spreadsheet.costpercapita_bd48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be48
  r = spreadsheet.costpercapita_be48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf48
  r = spreadsheet.costpercapita_bf48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg48
  r = spreadsheet.costpercapita_bg48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi48
  r = spreadsheet.costpercapita_bi48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj48
  r = spreadsheet.costpercapita_bj48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk48
  r = spreadsheet.costpercapita_bk48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl48
  r = spreadsheet.costpercapita_bl48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm48
  r = spreadsheet.costpercapita_bm48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn48
  r = spreadsheet.costpercapita_bn48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo48
  r = spreadsheet.costpercapita_bo48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp48
  r = spreadsheet.costpercapita_bp48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq48
  r = spreadsheet.costpercapita_bq48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs48
  r = spreadsheet.costpercapita_bs48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012696391683876304,r[:number],0.001)
end

def test_costpercapita_bt48
  r = spreadsheet.costpercapita_bt48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012277727288862101,r[:number],0.001)
end

def test_costpercapita_bu48
  r = spreadsheet.costpercapita_bu48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011875777205729441,r[:number],0.001)
end

def test_costpercapita_bv48
  r = spreadsheet.costpercapita_bv48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011508061878062094,r[:number],0.001)
end

def test_costpercapita_bw48
  r = spreadsheet.costpercapita_bw48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011193659865710656,r[:number],0.001)
end

def test_costpercapita_bx48
  r = spreadsheet.costpercapita_bx48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010929985418846034,r[:number],0.001)
end

def test_costpercapita_by48
  r = spreadsheet.costpercapita_by48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010696888327992812,r[:number],0.001)
end

def test_costpercapita_bz48
  r = spreadsheet.costpercapita_bz48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010483507597981848,r[:number],0.001)
end

def test_costpercapita_ca48
  r = spreadsheet.costpercapita_ca48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010287867154933185,r[:number],0.001)
end

def test_costpercapita_cc48
  r = spreadsheet.costpercapita_cc48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011327762935777164,r[:number],0.001)
end

def test_costpercapita_cd48
  r = spreadsheet.costpercapita_cd48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.24087834644649175,r[:number],0.001)
end

def test_costpercapita_cf48
  r = spreadsheet.costpercapita_cf48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg48
  r = spreadsheet.costpercapita_cg48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch48
  r = spreadsheet.costpercapita_ch48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci48
  r = spreadsheet.costpercapita_ci48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj48
  r = spreadsheet.costpercapita_cj48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck48
  r = spreadsheet.costpercapita_ck48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl48
  r = spreadsheet.costpercapita_cl48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm48
  r = spreadsheet.costpercapita_cm48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn48
  r = spreadsheet.costpercapita_cn48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp48
  r = spreadsheet.costpercapita_cp48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq48
  r = spreadsheet.costpercapita_cq48
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr48
  r = spreadsheet.costpercapita_cr48
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a49
  r = spreadsheet.costpercapita_a49
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b49
  r = spreadsheet.costpercapita_b49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c49
  r = spreadsheet.costpercapita_c49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e49
  r = spreadsheet.costpercapita_e49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f49
  r = spreadsheet.costpercapita_f49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g49
  r = spreadsheet.costpercapita_g49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h49
  r = spreadsheet.costpercapita_h49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i49
  r = spreadsheet.costpercapita_i49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j49
  r = spreadsheet.costpercapita_j49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k49
  r = spreadsheet.costpercapita_k49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l49
  r = spreadsheet.costpercapita_l49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m49
  r = spreadsheet.costpercapita_m49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o49
  r = spreadsheet.costpercapita_o49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p49
  r = spreadsheet.costpercapita_p49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q49
  r = spreadsheet.costpercapita_q49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r49
  r = spreadsheet.costpercapita_r49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s49
  r = spreadsheet.costpercapita_s49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t49
  r = spreadsheet.costpercapita_t49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u49
  r = spreadsheet.costpercapita_u49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v49
  r = spreadsheet.costpercapita_v49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w49
  r = spreadsheet.costpercapita_w49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y49
  r = spreadsheet.costpercapita_y49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_z49
  r = spreadsheet.costpercapita_z49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29212.34782273712,r[:number],0.001)
end

def test_costpercapita_aa49
  r = spreadsheet.costpercapita_aa49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36763.01897753495,r[:number],0.001)
end

def test_costpercapita_ab49
  r = spreadsheet.costpercapita_ab49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43328.51268503527,r[:number],0.001)
end

def test_costpercapita_ac49
  r = spreadsheet.costpercapita_ac49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49324.95967894072,r[:number],0.001)
end

def test_costpercapita_ad49
  r = spreadsheet.costpercapita_ad49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55865.631714063136,r[:number],0.001)
end

def test_costpercapita_ae49
  r = spreadsheet.costpercapita_ae49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62104.99870921016,r[:number],0.001)
end

def test_costpercapita_af49
  r = spreadsheet.costpercapita_af49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68296.14592631576,r[:number],0.001)
end

def test_costpercapita_ag49
  r = spreadsheet.costpercapita_ag49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74380.76975281602,r[:number],0.001)
end

def test_costpercapita_ai49
  r = spreadsheet.costpercapita_ai49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_aj49
  r = spreadsheet.costpercapita_aj49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29212.34782273712,r[:number],0.001)
end

def test_costpercapita_ak49
  r = spreadsheet.costpercapita_ak49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36763.01897753495,r[:number],0.001)
end

def test_costpercapita_al49
  r = spreadsheet.costpercapita_al49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43328.51268503527,r[:number],0.001)
end

def test_costpercapita_am49
  r = spreadsheet.costpercapita_am49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49324.95967894072,r[:number],0.001)
end

def test_costpercapita_an49
  r = spreadsheet.costpercapita_an49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55865.631714063136,r[:number],0.001)
end

def test_costpercapita_ao49
  r = spreadsheet.costpercapita_ao49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62104.99870921016,r[:number],0.001)
end

def test_costpercapita_ap49
  r = spreadsheet.costpercapita_ap49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68296.14592631576,r[:number],0.001)
end

def test_costpercapita_aq49
  r = spreadsheet.costpercapita_aq49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74380.76975281602,r[:number],0.001)
end

def test_costpercapita_as49
  r = spreadsheet.costpercapita_as49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48904.739660893596,r[:number],0.001)
end

def test_costpercapita_at49
  r = spreadsheet.costpercapita_at49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(959783.9723638458,r[:number],0.001)
end

def test_costpercapita_av49
  r = spreadsheet.costpercapita_av49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw49
  r = spreadsheet.costpercapita_aw49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay49
  r = spreadsheet.costpercapita_ay49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az49
  r = spreadsheet.costpercapita_az49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba49
  r = spreadsheet.costpercapita_ba49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb49
  r = spreadsheet.costpercapita_bb49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc49
  r = spreadsheet.costpercapita_bc49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd49
  r = spreadsheet.costpercapita_bd49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be49
  r = spreadsheet.costpercapita_be49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf49
  r = spreadsheet.costpercapita_bf49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg49
  r = spreadsheet.costpercapita_bg49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi49
  r = spreadsheet.costpercapita_bi49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj49
  r = spreadsheet.costpercapita_bj49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk49
  r = spreadsheet.costpercapita_bk49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl49
  r = spreadsheet.costpercapita_bl49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm49
  r = spreadsheet.costpercapita_bm49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn49
  r = spreadsheet.costpercapita_bn49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo49
  r = spreadsheet.costpercapita_bo49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp49
  r = spreadsheet.costpercapita_bp49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq49
  r = spreadsheet.costpercapita_bq49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs49
  r = spreadsheet.costpercapita_bs49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_bt49
  r = spreadsheet.costpercapita_bt49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29212.34782273712,r[:number],0.001)
end

def test_costpercapita_bu49
  r = spreadsheet.costpercapita_bu49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36763.01897753495,r[:number],0.001)
end

def test_costpercapita_bv49
  r = spreadsheet.costpercapita_bv49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43328.51268503527,r[:number],0.001)
end

def test_costpercapita_bw49
  r = spreadsheet.costpercapita_bw49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49324.95967894072,r[:number],0.001)
end

def test_costpercapita_bx49
  r = spreadsheet.costpercapita_bx49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55865.631714063136,r[:number],0.001)
end

def test_costpercapita_by49
  r = spreadsheet.costpercapita_by49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62104.99870921016,r[:number],0.001)
end

def test_costpercapita_bz49
  r = spreadsheet.costpercapita_bz49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68296.14592631576,r[:number],0.001)
end

def test_costpercapita_ca49
  r = spreadsheet.costpercapita_ca49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74380.76975281602,r[:number],0.001)
end

def test_costpercapita_cc49
  r = spreadsheet.costpercapita_cc49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48904.739660893596,r[:number],0.001)
end

def test_costpercapita_cd49
  r = spreadsheet.costpercapita_cd49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(959783.9723638458,r[:number],0.001)
end

def test_costpercapita_cf49
  r = spreadsheet.costpercapita_cf49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg49
  r = spreadsheet.costpercapita_cg49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch49
  r = spreadsheet.costpercapita_ch49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci49
  r = spreadsheet.costpercapita_ci49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj49
  r = spreadsheet.costpercapita_cj49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck49
  r = spreadsheet.costpercapita_ck49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl49
  r = spreadsheet.costpercapita_cl49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm49
  r = spreadsheet.costpercapita_cm49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn49
  r = spreadsheet.costpercapita_cn49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp49
  r = spreadsheet.costpercapita_cp49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq49
  r = spreadsheet.costpercapita_cq49
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr49
  r = spreadsheet.costpercapita_cr49
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a50
  r = spreadsheet.costpercapita_a50
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b50
  r = spreadsheet.costpercapita_b50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c50
  r = spreadsheet.costpercapita_c50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e50
  r = spreadsheet.costpercapita_e50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f50
  r = spreadsheet.costpercapita_f50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g50
  r = spreadsheet.costpercapita_g50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h50
  r = spreadsheet.costpercapita_h50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i50
  r = spreadsheet.costpercapita_i50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j50
  r = spreadsheet.costpercapita_j50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k50
  r = spreadsheet.costpercapita_k50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l50
  r = spreadsheet.costpercapita_l50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m50
  r = spreadsheet.costpercapita_m50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o50
  r = spreadsheet.costpercapita_o50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p50
  r = spreadsheet.costpercapita_p50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q50
  r = spreadsheet.costpercapita_q50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r50
  r = spreadsheet.costpercapita_r50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s50
  r = spreadsheet.costpercapita_s50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t50
  r = spreadsheet.costpercapita_t50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u50
  r = spreadsheet.costpercapita_u50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v50
  r = spreadsheet.costpercapita_v50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w50
  r = spreadsheet.costpercapita_w50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y50
  r = spreadsheet.costpercapita_y50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_z50
  r = spreadsheet.costpercapita_z50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9821.75948050675,r[:number],0.001)
end

def test_costpercapita_aa50
  r = spreadsheet.costpercapita_aa50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13800.275477609419,r[:number],0.001)
end

def test_costpercapita_ab50
  r = spreadsheet.costpercapita_ab50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17742.60895767489,r[:number],0.001)
end

def test_costpercapita_ac50
  r = spreadsheet.costpercapita_ac50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21634.73446065432,r[:number],0.001)
end

def test_costpercapita_ad50
  r = spreadsheet.costpercapita_ad50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25390.194472791634,r[:number],0.001)
end

def test_costpercapita_ae50
  r = spreadsheet.costpercapita_ae50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29425.846124641736,r[:number],0.001)
end

def test_costpercapita_af50
  r = spreadsheet.costpercapita_af50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33499.26275377501,r[:number],0.001)
end

def test_costpercapita_ag50
  r = spreadsheet.costpercapita_ag50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37511.88134373715,r[:number],0.001)
end

def test_costpercapita_ai50
  r = spreadsheet.costpercapita_ai50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_aj50
  r = spreadsheet.costpercapita_aj50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9821.75948050675,r[:number],0.001)
end

def test_costpercapita_ak50
  r = spreadsheet.costpercapita_ak50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13800.275477609419,r[:number],0.001)
end

def test_costpercapita_al50
  r = spreadsheet.costpercapita_al50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17742.60895767489,r[:number],0.001)
end

def test_costpercapita_am50
  r = spreadsheet.costpercapita_am50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21634.73446065432,r[:number],0.001)
end

def test_costpercapita_an50
  r = spreadsheet.costpercapita_an50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25390.194472791634,r[:number],0.001)
end

def test_costpercapita_ao50
  r = spreadsheet.costpercapita_ao50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29425.846124641736,r[:number],0.001)
end

def test_costpercapita_ap50
  r = spreadsheet.costpercapita_ap50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33499.26275377501,r[:number],0.001)
end

def test_costpercapita_aq50
  r = spreadsheet.costpercapita_aq50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37511.88134373715,r[:number],0.001)
end

def test_costpercapita_as50
  r = spreadsheet.costpercapita_as50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21599.0552247208,r[:number],0.001)
end

def test_costpercapita_at50
  r = spreadsheet.costpercapita_at50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410483.1865078233,r[:number],0.001)
end

def test_costpercapita_av50
  r = spreadsheet.costpercapita_av50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw50
  r = spreadsheet.costpercapita_aw50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay50
  r = spreadsheet.costpercapita_ay50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az50
  r = spreadsheet.costpercapita_az50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba50
  r = spreadsheet.costpercapita_ba50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb50
  r = spreadsheet.costpercapita_bb50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc50
  r = spreadsheet.costpercapita_bc50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd50
  r = spreadsheet.costpercapita_bd50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be50
  r = spreadsheet.costpercapita_be50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf50
  r = spreadsheet.costpercapita_bf50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg50
  r = spreadsheet.costpercapita_bg50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi50
  r = spreadsheet.costpercapita_bi50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj50
  r = spreadsheet.costpercapita_bj50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk50
  r = spreadsheet.costpercapita_bk50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl50
  r = spreadsheet.costpercapita_bl50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm50
  r = spreadsheet.costpercapita_bm50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn50
  r = spreadsheet.costpercapita_bn50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo50
  r = spreadsheet.costpercapita_bo50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp50
  r = spreadsheet.costpercapita_bp50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq50
  r = spreadsheet.costpercapita_bq50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs50
  r = spreadsheet.costpercapita_bs50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_bt50
  r = spreadsheet.costpercapita_bt50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9821.75948050675,r[:number],0.001)
end

def test_costpercapita_bu50
  r = spreadsheet.costpercapita_bu50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13800.275477609419,r[:number],0.001)
end

def test_costpercapita_bv50
  r = spreadsheet.costpercapita_bv50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17742.60895767489,r[:number],0.001)
end

def test_costpercapita_bw50
  r = spreadsheet.costpercapita_bw50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21634.73446065432,r[:number],0.001)
end

def test_costpercapita_bx50
  r = spreadsheet.costpercapita_bx50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25390.194472791634,r[:number],0.001)
end

def test_costpercapita_by50
  r = spreadsheet.costpercapita_by50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29425.846124641736,r[:number],0.001)
end

def test_costpercapita_bz50
  r = spreadsheet.costpercapita_bz50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33499.26275377501,r[:number],0.001)
end

def test_costpercapita_ca50
  r = spreadsheet.costpercapita_ca50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37511.88134373715,r[:number],0.001)
end

def test_costpercapita_cc50
  r = spreadsheet.costpercapita_cc50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21599.0552247208,r[:number],0.001)
end

def test_costpercapita_cd50
  r = spreadsheet.costpercapita_cd50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410483.1865078233,r[:number],0.001)
end

def test_costpercapita_cf50
  r = spreadsheet.costpercapita_cf50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg50
  r = spreadsheet.costpercapita_cg50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch50
  r = spreadsheet.costpercapita_ch50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci50
  r = spreadsheet.costpercapita_ci50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj50
  r = spreadsheet.costpercapita_cj50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck50
  r = spreadsheet.costpercapita_ck50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl50
  r = spreadsheet.costpercapita_cl50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm50
  r = spreadsheet.costpercapita_cm50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn50
  r = spreadsheet.costpercapita_cn50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp50
  r = spreadsheet.costpercapita_cp50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq50
  r = spreadsheet.costpercapita_cq50
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr50
  r = spreadsheet.costpercapita_cr50
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a51
  r = spreadsheet.costpercapita_a51
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b51
  r = spreadsheet.costpercapita_b51
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c51
  r = spreadsheet.costpercapita_c51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e51
  r = spreadsheet.costpercapita_e51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012696391683876304,r[:number],0.001)
end

def test_costpercapita_f51
  r = spreadsheet.costpercapita_f51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012277727288862101,r[:number],0.001)
end

def test_costpercapita_g51
  r = spreadsheet.costpercapita_g51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011875777205729441,r[:number],0.001)
end

def test_costpercapita_h51
  r = spreadsheet.costpercapita_h51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011508061878062094,r[:number],0.001)
end

def test_costpercapita_i51
  r = spreadsheet.costpercapita_i51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011193659865710656,r[:number],0.001)
end

def test_costpercapita_j51
  r = spreadsheet.costpercapita_j51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010929985418846034,r[:number],0.001)
end

def test_costpercapita_k51
  r = spreadsheet.costpercapita_k51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010696888327992812,r[:number],0.001)
end

def test_costpercapita_l51
  r = spreadsheet.costpercapita_l51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010483507597981848,r[:number],0.001)
end

def test_costpercapita_m51
  r = spreadsheet.costpercapita_m51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010287867154933185,r[:number],0.001)
end

def test_costpercapita_o51
  r = spreadsheet.costpercapita_o51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.363347797839484,r[:number],0.001)
end

def test_costpercapita_p51
  r = spreadsheet.costpercapita_p51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.199202201380125,r[:number],0.001)
end

def test_costpercapita_q51
  r = spreadsheet.costpercapita_q51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.417742571057175,r[:number],0.001)
end

def test_costpercapita_r51
  r = spreadsheet.costpercapita_r51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.41667902101213,r[:number],0.001)
end

def test_costpercapita_s51
  r = spreadsheet.costpercapita_s51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.57581599435571,r[:number],0.001)
end

def test_costpercapita_t51
  r = spreadsheet.costpercapita_t51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.12980407637298,r[:number],0.001)
end

def test_costpercapita_u51
  r = spreadsheet.costpercapita_u51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.18415083003196,r[:number],0.001)
end

def test_costpercapita_v51
  r = spreadsheet.costpercapita_v51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.84727824886113,r[:number],0.001)
end

def test_costpercapita_w51
  r = spreadsheet.costpercapita_w51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.235233960836062,r[:number],0.001)
end

def test_costpercapita_y51
  r = spreadsheet.costpercapita_y51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z51
  r = spreadsheet.costpercapita_z51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa51
  r = spreadsheet.costpercapita_aa51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab51
  r = spreadsheet.costpercapita_ab51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac51
  r = spreadsheet.costpercapita_ac51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad51
  r = spreadsheet.costpercapita_ad51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae51
  r = spreadsheet.costpercapita_ae51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af51
  r = spreadsheet.costpercapita_af51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag51
  r = spreadsheet.costpercapita_ag51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai51
  r = spreadsheet.costpercapita_ai51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.37604418952336,r[:number],0.001)
end

def test_costpercapita_aj51
  r = spreadsheet.costpercapita_aj51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.211479928668986,r[:number],0.001)
end

def test_costpercapita_ak51
  r = spreadsheet.costpercapita_ak51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.429618348262906,r[:number],0.001)
end

def test_costpercapita_al51
  r = spreadsheet.costpercapita_al51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.42818708289019,r[:number],0.001)
end

def test_costpercapita_am51
  r = spreadsheet.costpercapita_am51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.58700965422142,r[:number],0.001)
end

def test_costpercapita_an51
  r = spreadsheet.costpercapita_an51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.140734061791825,r[:number],0.001)
end

def test_costpercapita_ao51
  r = spreadsheet.costpercapita_ao51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.19484771835995,r[:number],0.001)
end

def test_costpercapita_ap51
  r = spreadsheet.costpercapita_ap51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.857761756459112,r[:number],0.001)
end

def test_costpercapita_aq51
  r = spreadsheet.costpercapita_aq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.245521827990995,r[:number],0.001)
end

def test_costpercapita_as51
  r = spreadsheet.costpercapita_as51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.60791161868542,r[:number],0.001)
end

def test_costpercapita_at51
  r = spreadsheet.costpercapita_at51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(741.3097017775281,r[:number],0.001)
end

def test_costpercapita_av51
  r = spreadsheet.costpercapita_av51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw51
  r = spreadsheet.costpercapita_aw51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay51
  r = spreadsheet.costpercapita_ay51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.007617835010325783,r[:number],0.001)
end

def test_costpercapita_az51
  r = spreadsheet.costpercapita_az51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012277727288862101,r[:number],0.001)
end

def test_costpercapita_ba51
  r = spreadsheet.costpercapita_ba51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011875777205729441,r[:number],0.001)
end

def test_costpercapita_bb51
  r = spreadsheet.costpercapita_bb51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011508061878062094,r[:number],0.001)
end

def test_costpercapita_bc51
  r = spreadsheet.costpercapita_bc51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011193659865710656,r[:number],0.001)
end

def test_costpercapita_bd51
  r = spreadsheet.costpercapita_bd51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010929985418846034,r[:number],0.001)
end

def test_costpercapita_be51
  r = spreadsheet.costpercapita_be51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010696888327992812,r[:number],0.001)
end

def test_costpercapita_bf51
  r = spreadsheet.costpercapita_bf51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010483507597981848,r[:number],0.001)
end

def test_costpercapita_bg51
  r = spreadsheet.costpercapita_bg51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010287867154933185,r[:number],0.001)
end

def test_costpercapita_bi51
  r = spreadsheet.costpercapita_bi51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.007617835010325783,r[:number],0.001)
end

def test_costpercapita_bj51
  r = spreadsheet.costpercapita_bj51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.012277727288862101,r[:number],0.001)
end

def test_costpercapita_bk51
  r = spreadsheet.costpercapita_bk51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011875777205729441,r[:number],0.001)
end

def test_costpercapita_bl51
  r = spreadsheet.costpercapita_bl51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011508061878062094,r[:number],0.001)
end

def test_costpercapita_bm51
  r = spreadsheet.costpercapita_bm51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.011193659865710656,r[:number],0.001)
end

def test_costpercapita_bn51
  r = spreadsheet.costpercapita_bn51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010929985418846034,r[:number],0.001)
end

def test_costpercapita_bo51
  r = spreadsheet.costpercapita_bo51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010696888327992812,r[:number],0.001)
end

def test_costpercapita_bp51
  r = spreadsheet.costpercapita_bp51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010483507597981848,r[:number],0.001)
end

def test_costpercapita_bq51
  r = spreadsheet.costpercapita_bq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.010287867154933185,r[:number],0.001)
end

def test_costpercapita_bs51
  r = spreadsheet.costpercapita_bs51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.37096563284981,r[:number],0.001)
end

def test_costpercapita_bt51
  r = spreadsheet.costpercapita_bt51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.211479928668986,r[:number],0.001)
end

def test_costpercapita_bu51
  r = spreadsheet.costpercapita_bu51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.429618348262906,r[:number],0.001)
end

def test_costpercapita_bv51
  r = spreadsheet.costpercapita_bv51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.42818708289019,r[:number],0.001)
end

def test_costpercapita_bw51
  r = spreadsheet.costpercapita_bw51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.58700965422142,r[:number],0.001)
end

def test_costpercapita_bx51
  r = spreadsheet.costpercapita_bx51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.140734061791825,r[:number],0.001)
end

def test_costpercapita_by51
  r = spreadsheet.costpercapita_by51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.19484771835995,r[:number],0.001)
end

def test_costpercapita_bz51
  r = spreadsheet.costpercapita_bz51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.857761756459112,r[:number],0.001)
end

def test_costpercapita_ca51
  r = spreadsheet.costpercapita_ca51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.245521827990995,r[:number],0.001)
end

def test_costpercapita_cc51
  r = spreadsheet.costpercapita_cc51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.60734733461058,r[:number],0.001)
end

def test_costpercapita_cd51
  r = spreadsheet.costpercapita_cd51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(741.3046232208545,r[:number],0.001)
end

def test_costpercapita_cf51
  r = spreadsheet.costpercapita_cf51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.0050785566735505215,r[:number],0.001)
end

def test_costpercapita_cg51
  r = spreadsheet.costpercapita_cg51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch51
  r = spreadsheet.costpercapita_ch51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci51
  r = spreadsheet.costpercapita_ci51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj51
  r = spreadsheet.costpercapita_cj51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck51
  r = spreadsheet.costpercapita_ck51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl51
  r = spreadsheet.costpercapita_cl51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm51
  r = spreadsheet.costpercapita_cm51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn51
  r = spreadsheet.costpercapita_cn51
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp51
  r = spreadsheet.costpercapita_cp51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.0005642840748389469,r[:number],0.001)
end

def test_costpercapita_cq51
  r = spreadsheet.costpercapita_cq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.0050785566735505215,r[:number],0.001)
end

def test_costpercapita_cr51
  r = spreadsheet.costpercapita_cr51
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a52
  r = spreadsheet.costpercapita_a52
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b52
  r = spreadsheet.costpercapita_b52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage of captured CO2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c52
  r = spreadsheet.costpercapita_c52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e52
  r = spreadsheet.costpercapita_e52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f52
  r = spreadsheet.costpercapita_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number],0.001)
end

def test_costpercapita_g52
  r = spreadsheet.costpercapita_g52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063093,r[:number],0.001)
end

def test_costpercapita_h52
  r = spreadsheet.costpercapita_h52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number],0.001)
end

def test_costpercapita_i52
  r = spreadsheet.costpercapita_i52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number],0.001)
end

def test_costpercapita_j52
  r = spreadsheet.costpercapita_j52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number],0.001)
end

def test_costpercapita_k52
  r = spreadsheet.costpercapita_k52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number],0.001)
end

def test_costpercapita_l52
  r = spreadsheet.costpercapita_l52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number],0.001)
end

def test_costpercapita_m52
  r = spreadsheet.costpercapita_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number],0.001)
end

def test_costpercapita_o52
  r = spreadsheet.costpercapita_o52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p52
  r = spreadsheet.costpercapita_p52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.04679482364530887,r[:number],0.001)
end

def test_costpercapita_q52
  r = spreadsheet.costpercapita_q52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.10662591036335282,r[:number],0.001)
end

def test_costpercapita_r52
  r = spreadsheet.costpercapita_r52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.10115207521230941,r[:number],0.001)
end

def test_costpercapita_s52
  r = spreadsheet.costpercapita_s52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09636321557658548,r[:number],0.001)
end

def test_costpercapita_t52
  r = spreadsheet.costpercapita_t52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09219595763383641,r[:number],0.001)
end

def test_costpercapita_u52
  r = spreadsheet.costpercapita_u52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09002532183418638,r[:number],0.001)
end

def test_costpercapita_v52
  r = spreadsheet.costpercapita_v52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08648831671431914,r[:number],0.001)
end

def test_costpercapita_w52
  r = spreadsheet.costpercapita_w52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08323219105211166,r[:number],0.001)
end

def test_costpercapita_y52
  r = spreadsheet.costpercapita_y52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z52
  r = spreadsheet.costpercapita_z52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa52
  r = spreadsheet.costpercapita_aa52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab52
  r = spreadsheet.costpercapita_ab52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac52
  r = spreadsheet.costpercapita_ac52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad52
  r = spreadsheet.costpercapita_ad52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae52
  r = spreadsheet.costpercapita_ae52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af52
  r = spreadsheet.costpercapita_af52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag52
  r = spreadsheet.costpercapita_ag52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai52
  r = spreadsheet.costpercapita_ai52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj52
  r = spreadsheet.costpercapita_aj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number],0.001)
end

def test_costpercapita_ak52
  r = spreadsheet.costpercapita_ak52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874474584696618,r[:number],0.001)
end

def test_costpercapita_al52
  r = spreadsheet.costpercapita_al52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number],0.001)
end

def test_costpercapita_am52
  r = spreadsheet.costpercapita_am52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number],0.001)
end

def test_costpercapita_an52
  r = spreadsheet.costpercapita_an52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number],0.001)
end

def test_costpercapita_ao52
  r = spreadsheet.costpercapita_ao52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number],0.001)
end

def test_costpercapita_ap52
  r = spreadsheet.costpercapita_ap52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.828800797900048,r[:number],0.001)
end

def test_costpercapita_aq52
  r = spreadsheet.costpercapita_aq52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number],0.001)
end

def test_costpercapita_as52
  r = spreadsheet.costpercapita_as52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number],0.001)
end

def test_costpercapita_at52
  r = spreadsheet.costpercapita_at52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number],0.001)
end

def test_costpercapita_av52
  r = spreadsheet.costpercapita_av52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw52
  r = spreadsheet.costpercapita_aw52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay52
  r = spreadsheet.costpercapita_ay52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az52
  r = spreadsheet.costpercapita_az52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number],0.001)
end

def test_costpercapita_ba52
  r = spreadsheet.costpercapita_ba52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063093,r[:number],0.001)
end

def test_costpercapita_bb52
  r = spreadsheet.costpercapita_bb52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number],0.001)
end

def test_costpercapita_bc52
  r = spreadsheet.costpercapita_bc52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number],0.001)
end

def test_costpercapita_bd52
  r = spreadsheet.costpercapita_bd52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number],0.001)
end

def test_costpercapita_be52
  r = spreadsheet.costpercapita_be52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number],0.001)
end

def test_costpercapita_bf52
  r = spreadsheet.costpercapita_bf52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number],0.001)
end

def test_costpercapita_bg52
  r = spreadsheet.costpercapita_bg52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number],0.001)
end

def test_costpercapita_bi52
  r = spreadsheet.costpercapita_bi52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj52
  r = spreadsheet.costpercapita_bj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number],0.001)
end

def test_costpercapita_bk52
  r = spreadsheet.costpercapita_bk52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063093,r[:number],0.001)
end

def test_costpercapita_bl52
  r = spreadsheet.costpercapita_bl52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number],0.001)
end

def test_costpercapita_bm52
  r = spreadsheet.costpercapita_bm52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number],0.001)
end

def test_costpercapita_bn52
  r = spreadsheet.costpercapita_bn52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number],0.001)
end

def test_costpercapita_bo52
  r = spreadsheet.costpercapita_bo52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number],0.001)
end

def test_costpercapita_bp52
  r = spreadsheet.costpercapita_bp52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number],0.001)
end

def test_costpercapita_bq52
  r = spreadsheet.costpercapita_bq52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number],0.001)
end

def test_costpercapita_bs52
  r = spreadsheet.costpercapita_bs52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt52
  r = spreadsheet.costpercapita_bt52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number],0.001)
end

def test_costpercapita_bu52
  r = spreadsheet.costpercapita_bu52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874474584696618,r[:number],0.001)
end

def test_costpercapita_bv52
  r = spreadsheet.costpercapita_bv52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number],0.001)
end

def test_costpercapita_bw52
  r = spreadsheet.costpercapita_bw52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number],0.001)
end

def test_costpercapita_bx52
  r = spreadsheet.costpercapita_bx52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number],0.001)
end

def test_costpercapita_by52
  r = spreadsheet.costpercapita_by52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number],0.001)
end

def test_costpercapita_bz52
  r = spreadsheet.costpercapita_bz52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8288007979000485,r[:number],0.001)
end

def test_costpercapita_ca52
  r = spreadsheet.costpercapita_ca52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number],0.001)
end

def test_costpercapita_cc52
  r = spreadsheet.costpercapita_cc52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number],0.001)
end

def test_costpercapita_cd52
  r = spreadsheet.costpercapita_cd52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number],0.001)
end

def test_costpercapita_cf52
  r = spreadsheet.costpercapita_cf52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg52
  r = spreadsheet.costpercapita_cg52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch52
  r = spreadsheet.costpercapita_ch52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci52
  r = spreadsheet.costpercapita_ci52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj52
  r = spreadsheet.costpercapita_cj52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck52
  r = spreadsheet.costpercapita_ck52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl52
  r = spreadsheet.costpercapita_cl52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm52
  r = spreadsheet.costpercapita_cm52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn52
  r = spreadsheet.costpercapita_cn52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp52
  r = spreadsheet.costpercapita_cp52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq52
  r = spreadsheet.costpercapita_cq52
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr52
  r = spreadsheet.costpercapita_cr52
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a53
  r = spreadsheet.costpercapita_a53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b53
  r = spreadsheet.costpercapita_b53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c53
  r = spreadsheet.costpercapita_c53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e53
  r = spreadsheet.costpercapita_e53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49911.94793788666,r[:number],0.001)
end

def test_costpercapita_f53
  r = spreadsheet.costpercapita_f53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114902.02199532514,r[:number],0.001)
end

def test_costpercapita_g53
  r = spreadsheet.costpercapita_g53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142460.84296253865,r[:number],0.001)
end

def test_costpercapita_h53
  r = spreadsheet.costpercapita_h53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171720.29191627473,r[:number],0.001)
end

def test_costpercapita_i53
  r = spreadsheet.costpercapita_i53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199599.65821687164,r[:number],0.001)
end

def test_costpercapita_j53
  r = spreadsheet.costpercapita_j53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227797.54437186965,r[:number],0.001)
end

def test_costpercapita_k53
  r = spreadsheet.costpercapita_k53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256262.05515322633,r[:number],0.001)
end

def test_costpercapita_l53
  r = spreadsheet.costpercapita_l53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284720.9032186798,r[:number],0.001)
end

def test_costpercapita_m53
  r = spreadsheet.costpercapita_m53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313854.4008457745,r[:number],0.001)
end

def test_costpercapita_o53
  r = spreadsheet.costpercapita_o53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37921.76897032013,r[:number],0.001)
end

def test_costpercapita_p53
  r = spreadsheet.costpercapita_p53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51481.78841767451,r[:number],0.001)
end

def test_costpercapita_q53
  r = spreadsheet.costpercapita_q53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63193.70670091403,r[:number],0.001)
end

def test_costpercapita_r53
  r = spreadsheet.costpercapita_r53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73518.3497484503,r[:number],0.001)
end

def test_costpercapita_s53
  r = spreadsheet.costpercapita_s53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80694.76573059509,r[:number],0.001)
end

def test_costpercapita_t53
  r = spreadsheet.costpercapita_t53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84033.69034793145,r[:number],0.001)
end

def test_costpercapita_u53
  r = spreadsheet.costpercapita_u53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82310.37296969371,r[:number],0.001)
end

def test_costpercapita_v53
  r = spreadsheet.costpercapita_v53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74138.01936358573,r[:number],0.001)
end

def test_costpercapita_w53
  r = spreadsheet.costpercapita_w53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58678.188145291875,r[:number],0.001)
end

def test_costpercapita_y53
  r = spreadsheet.costpercapita_y53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26445.421731092316,r[:number],0.001)
end

def test_costpercapita_z53
  r = spreadsheet.costpercapita_z53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39049.41777556105,r[:number],0.001)
end

def test_costpercapita_aa53
  r = spreadsheet.costpercapita_aa53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50580.366280586444,r[:number],0.001)
end

def test_costpercapita_ab53
  r = spreadsheet.costpercapita_ab53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61088.782512401755,r[:number],0.001)
end

def test_costpercapita_ac53
  r = spreadsheet.costpercapita_ac53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70977.5762302204,r[:number],0.001)
end

def test_costpercapita_ad53
  r = spreadsheet.costpercapita_ad53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.59842069623,r[:number],0.001)
end

def test_costpercapita_ae53
  r = spreadsheet.costpercapita_ae53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91548.59814349512,r[:number],0.001)
end

def test_costpercapita_af53
  r = spreadsheet.costpercapita_af53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101812.84954757712,r[:number],0.001)
end

def test_costpercapita_ag53
  r = spreadsheet.costpercapita_ag53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111910.23725053898,r[:number],0.001)
end

def test_costpercapita_ai53
  r = spreadsheet.costpercapita_ai53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114279.13863929911,r[:number],0.001)
end

def test_costpercapita_aj53
  r = spreadsheet.costpercapita_aj53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205433.22818856066,r[:number],0.001)
end

def test_costpercapita_ak53
  r = spreadsheet.costpercapita_ak53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256234.91594403912,r[:number],0.001)
end

def test_costpercapita_al53
  r = spreadsheet.costpercapita_al53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306327.4241771268,r[:number],0.001)
end

def test_costpercapita_am53
  r = spreadsheet.costpercapita_am53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351272.0001776871,r[:number],0.001)
end

def test_costpercapita_an53
  r = spreadsheet.costpercapita_an53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393104.83314049745,r[:number],0.001)
end

def test_costpercapita_ao53
  r = spreadsheet.costpercapita_ao53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430121.02626641525,r[:number],0.001)
end

def test_costpercapita_ap53
  r = spreadsheet.costpercapita_ap53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460671.7721298426,r[:number],0.001)
end

def test_costpercapita_aq53
  r = spreadsheet.costpercapita_aq53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484442.82624160545,r[:number],0.001)
end

def test_costpercapita_as53
  r = spreadsheet.costpercapita_as53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(333543.0183227859,r[:number],0.001)
end

def test_costpercapita_at53
  r = spreadsheet.costpercapita_at53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6632229.303499,r[:number],0.001)
end

def test_costpercapita_ay53
  r = spreadsheet.costpercapita_ay53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29947.168762731995,r[:number],0.001)
end

def test_costpercapita_az53
  r = spreadsheet.costpercapita_az53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114902.02199532514,r[:number],0.001)
end

def test_costpercapita_ba53
  r = spreadsheet.costpercapita_ba53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142460.84296253865,r[:number],0.001)
end

def test_costpercapita_bb53
  r = spreadsheet.costpercapita_bb53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171720.29191627473,r[:number],0.001)
end

def test_costpercapita_bc53
  r = spreadsheet.costpercapita_bc53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199599.65821687164,r[:number],0.001)
end

def test_costpercapita_bd53
  r = spreadsheet.costpercapita_bd53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227797.54437186965,r[:number],0.001)
end

def test_costpercapita_be53
  r = spreadsheet.costpercapita_be53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256262.05515322633,r[:number],0.001)
end

def test_costpercapita_bf53
  r = spreadsheet.costpercapita_bf53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284720.9032186798,r[:number],0.001)
end

def test_costpercapita_bg53
  r = spreadsheet.costpercapita_bg53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313854.4008457745,r[:number],0.001)
end

def test_costpercapita_bi53
  r = spreadsheet.costpercapita_bi53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29947.168762731995,r[:number],0.001)
end

def test_costpercapita_bj53
  r = spreadsheet.costpercapita_bj53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114902.02199532514,r[:number],0.001)
end

def test_costpercapita_bk53
  r = spreadsheet.costpercapita_bk53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142460.84296253865,r[:number],0.001)
end

def test_costpercapita_bl53
  r = spreadsheet.costpercapita_bl53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171720.29191627473,r[:number],0.001)
end

def test_costpercapita_bm53
  r = spreadsheet.costpercapita_bm53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199599.65821687164,r[:number],0.001)
end

def test_costpercapita_bn53
  r = spreadsheet.costpercapita_bn53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227797.54437186965,r[:number],0.001)
end

def test_costpercapita_bo53
  r = spreadsheet.costpercapita_bo53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256262.05515322633,r[:number],0.001)
end

def test_costpercapita_bp53
  r = spreadsheet.costpercapita_bp53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284720.9032186798,r[:number],0.001)
end

def test_costpercapita_bq53
  r = spreadsheet.costpercapita_bq53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313854.4008457745,r[:number],0.001)
end

def test_costpercapita_bs53
  r = spreadsheet.costpercapita_bs53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94314.35946414444,r[:number],0.001)
end

def test_costpercapita_bt53
  r = spreadsheet.costpercapita_bt53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205433.22818856066,r[:number],0.001)
end

def test_costpercapita_bu53
  r = spreadsheet.costpercapita_bu53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256234.91594403912,r[:number],0.001)
end

def test_costpercapita_bv53
  r = spreadsheet.costpercapita_bv53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306327.4241771268,r[:number],0.001)
end

def test_costpercapita_bw53
  r = spreadsheet.costpercapita_bw53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351272.0001776871,r[:number],0.001)
end

def test_costpercapita_bx53
  r = spreadsheet.costpercapita_bx53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393104.83314049745,r[:number],0.001)
end

def test_costpercapita_by53
  r = spreadsheet.costpercapita_by53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430121.02626641514,r[:number],0.001)
end

def test_costpercapita_bz53
  r = spreadsheet.costpercapita_bz53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460671.7721298426,r[:number],0.001)
end

def test_costpercapita_ca53
  r = spreadsheet.costpercapita_ca53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484442.82624160545,r[:number],0.001)
end

def test_costpercapita_cc53
  r = spreadsheet.costpercapita_cc53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(331324.7095255465,r[:number],0.001)
end

def test_costpercapita_cd53
  r = spreadsheet.costpercapita_cd53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6612264.524323845,r[:number],0.001)
end

def test_costpercapita_cf53
  r = spreadsheet.costpercapita_cf53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-19964.779175154672,r[:number],0.001)
end

def test_costpercapita_cg53
  r = spreadsheet.costpercapita_cg53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch53
  r = spreadsheet.costpercapita_ch53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci53
  r = spreadsheet.costpercapita_ci53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj53
  r = spreadsheet.costpercapita_cj53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck53
  r = spreadsheet.costpercapita_ck53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl53
  r = spreadsheet.costpercapita_cl53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm53
  r = spreadsheet.costpercapita_cm53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn53
  r = spreadsheet.costpercapita_cn53
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp53
  r = spreadsheet.costpercapita_cp53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2218.308797239408,r[:number],0.001)
end

def test_costpercapita_cq53
  r = spreadsheet.costpercapita_cq53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-19964.77917515467,r[:number],0.001)
end

def test_costpercapita_cr53
  r = spreadsheet.costpercapita_cr53
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b55
  r = spreadsheet.costpercapita_b55
  assert_equal(:ExcelString,r[:type])
  assert_equal("£/Capita/yr",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e55
  r = spreadsheet.costpercapita_e55
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f55
  r = spreadsheet.costpercapita_f55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o55
  r = spreadsheet.costpercapita_o55
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p55
  r = spreadsheet.costpercapita_p55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y55
  r = spreadsheet.costpercapita_y55
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z55
  r = spreadsheet.costpercapita_z55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai55
  r = spreadsheet.costpercapita_ai55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as55
  r = spreadsheet.costpercapita_as55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av55
  r = spreadsheet.costpercapita_av55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay55
  r = spreadsheet.costpercapita_ay55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi55
  r = spreadsheet.costpercapita_bi55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br55
  r = spreadsheet.costpercapita_br55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc55
  r = spreadsheet.costpercapita_cc55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf55
  r = spreadsheet.costpercapita_cf55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp55
  r = spreadsheet.costpercapita_cp55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a56
  r = spreadsheet.costpercapita_a56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Code",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b56
  r = spreadsheet.costpercapita_b56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Description",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c56
  r = spreadsheet.costpercapita_c56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e56
  r = spreadsheet.costpercapita_e56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f56
  r = spreadsheet.costpercapita_f56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g56
  r = spreadsheet.costpercapita_g56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h56
  r = spreadsheet.costpercapita_h56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i56
  r = spreadsheet.costpercapita_i56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j56
  r = spreadsheet.costpercapita_j56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k56
  r = spreadsheet.costpercapita_k56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l56
  r = spreadsheet.costpercapita_l56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m56
  r = spreadsheet.costpercapita_m56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o56
  r = spreadsheet.costpercapita_o56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p56
  r = spreadsheet.costpercapita_p56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q56
  r = spreadsheet.costpercapita_q56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r56
  r = spreadsheet.costpercapita_r56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s56
  r = spreadsheet.costpercapita_s56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t56
  r = spreadsheet.costpercapita_t56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u56
  r = spreadsheet.costpercapita_u56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v56
  r = spreadsheet.costpercapita_v56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w56
  r = spreadsheet.costpercapita_w56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y56
  r = spreadsheet.costpercapita_y56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z56
  r = spreadsheet.costpercapita_z56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa56
  r = spreadsheet.costpercapita_aa56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab56
  r = spreadsheet.costpercapita_ab56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac56
  r = spreadsheet.costpercapita_ac56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad56
  r = spreadsheet.costpercapita_ad56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae56
  r = spreadsheet.costpercapita_ae56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af56
  r = spreadsheet.costpercapita_af56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag56
  r = spreadsheet.costpercapita_ag56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai56
  r = spreadsheet.costpercapita_ai56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj56
  r = spreadsheet.costpercapita_aj56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak56
  r = spreadsheet.costpercapita_ak56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al56
  r = spreadsheet.costpercapita_al56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am56
  r = spreadsheet.costpercapita_am56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an56
  r = spreadsheet.costpercapita_an56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao56
  r = spreadsheet.costpercapita_ao56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap56
  r = spreadsheet.costpercapita_ap56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq56
  r = spreadsheet.costpercapita_aq56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as56
  r = spreadsheet.costpercapita_as56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at56
  r = spreadsheet.costpercapita_at56
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av56
  r = spreadsheet.costpercapita_av56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw56
  r = spreadsheet.costpercapita_aw56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay56
  r = spreadsheet.costpercapita_ay56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_az56
  r = spreadsheet.costpercapita_az56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_ba56
  r = spreadsheet.costpercapita_ba56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bb56
  r = spreadsheet.costpercapita_bb56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bc56
  r = spreadsheet.costpercapita_bc56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bd56
  r = spreadsheet.costpercapita_bd56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_be56
  r = spreadsheet.costpercapita_be56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bf56
  r = spreadsheet.costpercapita_bf56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bg56
  r = spreadsheet.costpercapita_bg56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bi56
  r = spreadsheet.costpercapita_bi56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_bj56
  r = spreadsheet.costpercapita_bj56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_bk56
  r = spreadsheet.costpercapita_bk56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bl56
  r = spreadsheet.costpercapita_bl56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bm56
  r = spreadsheet.costpercapita_bm56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bn56
  r = spreadsheet.costpercapita_bn56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_bo56
  r = spreadsheet.costpercapita_bo56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bp56
  r = spreadsheet.costpercapita_bp56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bq56
  r = spreadsheet.costpercapita_bq56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bs56
  r = spreadsheet.costpercapita_bs56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt56
  r = spreadsheet.costpercapita_bt56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu56
  r = spreadsheet.costpercapita_bu56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv56
  r = spreadsheet.costpercapita_bv56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw56
  r = spreadsheet.costpercapita_bw56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx56
  r = spreadsheet.costpercapita_bx56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by56
  r = spreadsheet.costpercapita_by56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz56
  r = spreadsheet.costpercapita_bz56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca56
  r = spreadsheet.costpercapita_ca56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc56
  r = spreadsheet.costpercapita_cc56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd56
  r = spreadsheet.costpercapita_cd56
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf56
  r = spreadsheet.costpercapita_cf56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg56
  r = spreadsheet.costpercapita_cg56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch56
  r = spreadsheet.costpercapita_ch56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci56
  r = spreadsheet.costpercapita_ci56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj56
  r = spreadsheet.costpercapita_cj56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck56
  r = spreadsheet.costpercapita_ck56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl56
  r = spreadsheet.costpercapita_cl56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm56
  r = spreadsheet.costpercapita_cm56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn56
  r = spreadsheet.costpercapita_cn56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp56
  r = spreadsheet.costpercapita_cp56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq56
  r = spreadsheet.costpercapita_cq56
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a57
  r = spreadsheet.costpercapita_a57
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b57
  r = spreadsheet.costpercapita_b57
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional thermal plant",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c57
  r = spreadsheet.costpercapita_c57
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e57
  r = spreadsheet.costpercapita_e57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(621.8188524177825,r[:number],0.001)
end

def test_costpercapita_f57
  r = spreadsheet.costpercapita_f57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1063.0808729456262,r[:number],0.001)
end

def test_costpercapita_g57
  r = spreadsheet.costpercapita_g57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1057.265575424611,r[:number],0.001)
end

def test_costpercapita_h57
  r = spreadsheet.costpercapita_h57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1050.7109380600386,r[:number],0.001)
end

def test_costpercapita_i57
  r = spreadsheet.costpercapita_i57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(998.3685982394475,r[:number],0.001)
end

def test_costpercapita_j57
  r = spreadsheet.costpercapita_j57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1074.9243138485358,r[:number],0.001)
end

def test_costpercapita_k57
  r = spreadsheet.costpercapita_k57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1141.5359618813663,r[:number],0.001)
end

def test_costpercapita_l57
  r = spreadsheet.costpercapita_l57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1205.8234653073293,r[:number],0.001)
end

def test_costpercapita_m57
  r = spreadsheet.costpercapita_m57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1255.8889048937265,r[:number],0.001)
end

def test_costpercapita_o57
  r = spreadsheet.costpercapita_o57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1993.248743118127,r[:number],0.001)
end

def test_costpercapita_p57
  r = spreadsheet.costpercapita_p57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2244.375433369285,r[:number],0.001)
end

def test_costpercapita_q57
  r = spreadsheet.costpercapita_q57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2525.09112872677,r[:number],0.001)
end

def test_costpercapita_r57
  r = spreadsheet.costpercapita_r57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2795.079561317859,r[:number],0.001)
end

def test_costpercapita_s57
  r = spreadsheet.costpercapita_s57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3039.4780507874675,r[:number],0.001)
end

def test_costpercapita_t57
  r = spreadsheet.costpercapita_t57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3178.707420305423,r[:number],0.001)
end

def test_costpercapita_u57
  r = spreadsheet.costpercapita_u57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3275.868391835719,r[:number],0.001)
end

def test_costpercapita_v57
  r = spreadsheet.costpercapita_v57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3330.20302511657,r[:number],0.001)
end

def test_costpercapita_w57
  r = spreadsheet.costpercapita_w57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3319.729857644314,r[:number],0.001)
end

def test_costpercapita_y57
  r = spreadsheet.costpercapita_y57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z57
  r = spreadsheet.costpercapita_z57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa57
  r = spreadsheet.costpercapita_aa57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab57
  r = spreadsheet.costpercapita_ab57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac57
  r = spreadsheet.costpercapita_ac57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad57
  r = spreadsheet.costpercapita_ad57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae57
  r = spreadsheet.costpercapita_ae57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af57
  r = spreadsheet.costpercapita_af57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag57
  r = spreadsheet.costpercapita_ag57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai57
  r = spreadsheet.costpercapita_ai57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2615.0675955359093,r[:number],0.001)
end

def test_costpercapita_aj57
  r = spreadsheet.costpercapita_aj57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3307.456306314911,r[:number],0.001)
end

def test_costpercapita_ak57
  r = spreadsheet.costpercapita_ak57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3582.3567041513807,r[:number],0.001)
end

def test_costpercapita_al57
  r = spreadsheet.costpercapita_al57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3845.790499377898,r[:number],0.001)
end

def test_costpercapita_am57
  r = spreadsheet.costpercapita_am57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4037.8466490269147,r[:number],0.001)
end

def test_costpercapita_an57
  r = spreadsheet.costpercapita_an57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4253.631734153958,r[:number],0.001)
end

def test_costpercapita_ao57
  r = spreadsheet.costpercapita_ao57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4417.4043537170855,r[:number],0.001)
end

def test_costpercapita_ap57
  r = spreadsheet.costpercapita_ap57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4536.026490423899,r[:number],0.001)
end

def test_costpercapita_aq57
  r = spreadsheet.costpercapita_aq57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4575.618762538041,r[:number],0.001)
end

def test_costpercapita_as57
  r = spreadsheet.costpercapita_as57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3907.9110105822215,r[:number],0.001)
end

def test_costpercapita_at57
  r = spreadsheet.costpercapita_at57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80765.05045974712,r[:number],0.001)
end

def test_costpercapita_av57
  r = spreadsheet.costpercapita_av57
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw57
  r = spreadsheet.costpercapita_aw57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay57
  r = spreadsheet.costpercapita_ay57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.81710259966303,r[:number],0.001)
end

def test_costpercapita_az57
  r = spreadsheet.costpercapita_az57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(583.6028273594173,r[:number],0.001)
end

def test_costpercapita_ba57
  r = spreadsheet.costpercapita_ba57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(580.4103853151943,r[:number],0.001)
end

def test_costpercapita_bb57
  r = spreadsheet.costpercapita_bb57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(576.8120655677225,r[:number],0.001)
end

def test_costpercapita_bc57
  r = spreadsheet.costpercapita_bc57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(548.0775277848506,r[:number],0.001)
end

def test_costpercapita_bd57
  r = spreadsheet.costpercapita_bd57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(590.1045581049348,r[:number],0.001)
end

def test_costpercapita_be57
  r = spreadsheet.costpercapita_be57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(626.6725625873356,r[:number],0.001)
end

def test_costpercapita_bf57
  r = spreadsheet.costpercapita_bf57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(661.964674145427,r[:number],0.001)
end

def test_costpercapita_bg57
  r = spreadsheet.costpercapita_bg57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(689.4492548948239,r[:number],0.001)
end

def test_costpercapita_bi57
  r = spreadsheet.costpercapita_bi57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.81710259966303,r[:number],0.001)
end

def test_costpercapita_bj57
  r = spreadsheet.costpercapita_bj57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(781.6660718170582,r[:number],0.001)
end

def test_costpercapita_bk57
  r = spreadsheet.costpercapita_bk57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1336.486155673621,r[:number],0.001)
end

def test_costpercapita_bl57
  r = spreadsheet.costpercapita_bl57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1686.268897895292,r[:number],0.001)
end

def test_costpercapita_bm57
  r = spreadsheet.costpercapita_bm57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1656.2039465726066,r[:number],0.001)
end

def test_costpercapita_bn57
  r = spreadsheet.costpercapita_bn57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1673.1092050760544,r[:number],0.001)
end

def test_costpercapita_bo57
  r = spreadsheet.costpercapita_bo57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1727.946321209805,r[:number],0.001)
end

def test_costpercapita_bp57
  r = spreadsheet.costpercapita_bp57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1842.135858513961,r[:number],0.001)
end

def test_costpercapita_bq57
  r = spreadsheet.costpercapita_bq57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1941.7707541507104,r[:number],0.001)
end

def test_costpercapita_bs57
  r = spreadsheet.costpercapita_bs57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2198.06584571779,r[:number],0.001)
end

def test_costpercapita_bt57
  r = spreadsheet.costpercapita_bt57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3026.0415051863433,r[:number],0.001)
end

def test_costpercapita_bu57
  r = spreadsheet.costpercapita_bu57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3861.577284400391,r[:number],0.001)
end

def test_costpercapita_bv57
  r = spreadsheet.costpercapita_bv57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4481.348459213151,r[:number],0.001)
end

def test_costpercapita_bw57
  r = spreadsheet.costpercapita_bw57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4695.681997360075,r[:number],0.001)
end

def test_costpercapita_bx57
  r = spreadsheet.costpercapita_bx57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4851.816625381478,r[:number],0.001)
end

def test_costpercapita_by57
  r = spreadsheet.costpercapita_by57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5003.8147130455245,r[:number],0.001)
end

def test_costpercapita_bz57
  r = spreadsheet.costpercapita_bz57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5172.338883630531,r[:number],0.001)
end

def test_costpercapita_ca57
  r = spreadsheet.costpercapita_ca57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5261.500611795025,r[:number],0.001)
end

def test_costpercapita_cc57
  r = spreadsheet.costpercapita_cc57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4283.576213970035,r[:number],0.001)
end

def test_costpercapita_cd57
  r = spreadsheet.costpercapita_cd57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87900.04019018148,r[:number],0.001)
end

def test_costpercapita_cf57
  r = spreadsheet.costpercapita_cf57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-417.00174981811944,r[:number],0.001)
end

def test_costpercapita_cg57
  r = spreadsheet.costpercapita_cg57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-281.414801128568,r[:number],0.001)
end

def test_costpercapita_ch57
  r = spreadsheet.costpercapita_ch57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.2205802490102,r[:number],0.001)
end

def test_costpercapita_ci57
  r = spreadsheet.costpercapita_ci57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(635.5579598352533,r[:number],0.001)
end

def test_costpercapita_cj57
  r = spreadsheet.costpercapita_cj57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(657.8353483331591,r[:number],0.001)
end

def test_costpercapita_ck57
  r = spreadsheet.costpercapita_ck57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(598.1848912275185,r[:number],0.001)
end

def test_costpercapita_cl57
  r = spreadsheet.costpercapita_cl57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(586.4103593284389,r[:number],0.001)
end

def test_costpercapita_cm57
  r = spreadsheet.costpercapita_cm57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(636.3123932066317,r[:number],0.001)
end

def test_costpercapita_cn57
  r = spreadsheet.costpercapita_cn57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(685.8818492569841,r[:number],0.001)
end

def test_costpercapita_cp57
  r = spreadsheet.costpercapita_cp57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.66520338781197,r[:number],0.001)
end

def test_costpercapita_cq57
  r = spreadsheet.costpercapita_cq57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7134.98973043436,r[:number],0.001)
end

def test_costpercapita_cr57
  r = spreadsheet.costpercapita_cr57
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a58
  r = spreadsheet.costpercapita_a58
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b58
  r = spreadsheet.costpercapita_b58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Combustion + CCS",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c58
  r = spreadsheet.costpercapita_c58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e58
  r = spreadsheet.costpercapita_e58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f58
  r = spreadsheet.costpercapita_f58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.681101831095091,r[:number],0.001)
end

def test_costpercapita_g58
  r = spreadsheet.costpercapita_g58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.692727914204925,r[:number],0.001)
end

def test_costpercapita_h58
  r = spreadsheet.costpercapita_h58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i58
  r = spreadsheet.costpercapita_i58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j58
  r = spreadsheet.costpercapita_j58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k58
  r = spreadsheet.costpercapita_k58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l58
  r = spreadsheet.costpercapita_l58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m58
  r = spreadsheet.costpercapita_m58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o58
  r = spreadsheet.costpercapita_o58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p58
  r = spreadsheet.costpercapita_p58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9209458388949089,r[:number],0.001)
end

def test_costpercapita_q58
  r = spreadsheet.costpercapita_q58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.68816574162139,r[:number],0.001)
end

def test_costpercapita_r58
  r = spreadsheet.costpercapita_r58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6385468513915973,r[:number],0.001)
end

def test_costpercapita_s58
  r = spreadsheet.costpercapita_s58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5965108140565025,r[:number],0.001)
end

def test_costpercapita_t58
  r = spreadsheet.costpercapita_t58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.559619870932544,r[:number],0.001)
end

def test_costpercapita_u58
  r = spreadsheet.costpercapita_u58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.527059525860367,r[:number],0.001)
end

def test_costpercapita_v58
  r = spreadsheet.costpercapita_v58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.49742431958075,r[:number],0.001)
end

def test_costpercapita_w58
  r = spreadsheet.costpercapita_w58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4717523896007523,r[:number],0.001)
end

def test_costpercapita_y58
  r = spreadsheet.costpercapita_y58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z58
  r = spreadsheet.costpercapita_z58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa58
  r = spreadsheet.costpercapita_aa58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab58
  r = spreadsheet.costpercapita_ab58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac58
  r = spreadsheet.costpercapita_ac58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad58
  r = spreadsheet.costpercapita_ad58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae58
  r = spreadsheet.costpercapita_ae58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af58
  r = spreadsheet.costpercapita_af58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag58
  r = spreadsheet.costpercapita_ag58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai58
  r = spreadsheet.costpercapita_ai58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj58
  r = spreadsheet.costpercapita_aj58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.60204766999,r[:number],0.001)
end

def test_costpercapita_ak58
  r = spreadsheet.costpercapita_ak58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.380893655826315,r[:number],0.001)
end

def test_costpercapita_al58
  r = spreadsheet.costpercapita_al58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6385468513915973,r[:number],0.001)
end

def test_costpercapita_am58
  r = spreadsheet.costpercapita_am58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5965108140565025,r[:number],0.001)
end

def test_costpercapita_an58
  r = spreadsheet.costpercapita_an58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.559619870932544,r[:number],0.001)
end

def test_costpercapita_ao58
  r = spreadsheet.costpercapita_ao58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.527059525860367,r[:number],0.001)
end

def test_costpercapita_ap58
  r = spreadsheet.costpercapita_ap58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.49742431958075,r[:number],0.001)
end

def test_costpercapita_aq58
  r = spreadsheet.costpercapita_aq58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4717523896007523,r[:number],0.001)
end

def test_costpercapita_as58
  r = spreadsheet.costpercapita_as58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.141539455248759,r[:number],0.001)
end

def test_costpercapita_at58
  r = spreadsheet.costpercapita_at58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.286168656566204,r[:number],0.001)
end

def test_costpercapita_av58
  r = spreadsheet.costpercapita_av58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw58
  r = spreadsheet.costpercapita_aw58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay58
  r = spreadsheet.costpercapita_ay58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az58
  r = spreadsheet.costpercapita_az58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5697990936614,r[:number],0.001)
end

def test_costpercapita_ba58
  r = spreadsheet.costpercapita_ba58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4782352538102697,r[:number],0.001)
end

def test_costpercapita_bb58
  r = spreadsheet.costpercapita_bb58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc58
  r = spreadsheet.costpercapita_bc58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd58
  r = spreadsheet.costpercapita_bd58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be58
  r = spreadsheet.costpercapita_be58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf58
  r = spreadsheet.costpercapita_bf58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg58
  r = spreadsheet.costpercapita_bg58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi58
  r = spreadsheet.costpercapita_bi58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj58
  r = spreadsheet.costpercapita_bj58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5697990936614,r[:number],0.001)
end

def test_costpercapita_bk58
  r = spreadsheet.costpercapita_bk58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9639038781242624,r[:number],0.001)
end

def test_costpercapita_bl58
  r = spreadsheet.costpercapita_bl58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8411676404754855,r[:number],0.001)
end

def test_costpercapita_bm58
  r = spreadsheet.costpercapita_bm58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.393328819327431,r[:number],0.001)
end

def test_costpercapita_bn58
  r = spreadsheet.costpercapita_bn58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo58
  r = spreadsheet.costpercapita_bo58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp58
  r = spreadsheet.costpercapita_bp58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq58
  r = spreadsheet.costpercapita_bq58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs58
  r = spreadsheet.costpercapita_bs58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt58
  r = spreadsheet.costpercapita_bt58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.490744932556309,r[:number],0.001)
end

def test_costpercapita_bu58
  r = spreadsheet.costpercapita_bu58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.652069619745653,r[:number],0.001)
end

def test_costpercapita_bv58
  r = spreadsheet.costpercapita_bv58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4797144918670835,r[:number],0.001)
end

def test_costpercapita_bw58
  r = spreadsheet.costpercapita_bw58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9898396333839337,r[:number],0.001)
end

def test_costpercapita_bx58
  r = spreadsheet.costpercapita_bx58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.559619870932544,r[:number],0.001)
end

def test_costpercapita_by58
  r = spreadsheet.costpercapita_by58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.527059525860367,r[:number],0.001)
end

def test_costpercapita_bz58
  r = spreadsheet.costpercapita_bz58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.49742431958075,r[:number],0.001)
end

def test_costpercapita_ca58
  r = spreadsheet.costpercapita_ca58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4717523896007523,r[:number],0.001)
end

def test_costpercapita_cc58
  r = spreadsheet.costpercapita_cc58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.629802753725266,r[:number],0.001)
end

def test_costpercapita_cd58
  r = spreadsheet.costpercapita_cd58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.8686524759581,r[:number],0.001)
end

def test_costpercapita_cf58
  r = spreadsheet.costpercapita_cf58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg58
  r = spreadsheet.costpercapita_cg58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.1113027374336912,r[:number],0.001)
end

def test_costpercapita_ch58
  r = spreadsheet.costpercapita_ch58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.271175963919337,r[:number],0.001)
end

def test_costpercapita_ci58
  r = spreadsheet.costpercapita_ci58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8411676404754855,r[:number],0.001)
end

def test_costpercapita_cj58
  r = spreadsheet.costpercapita_cj58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.393328819327431,r[:number],0.001)
end

def test_costpercapita_ck58
  r = spreadsheet.costpercapita_ck58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl58
  r = spreadsheet.costpercapita_cl58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm58
  r = spreadsheet.costpercapita_cm58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn58
  r = spreadsheet.costpercapita_cn58
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp58
  r = spreadsheet.costpercapita_cp58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.4882632984765069,r[:number],0.001)
end

def test_costpercapita_cq58
  r = spreadsheet.costpercapita_cq58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.582483819391884,r[:number],0.001)
end

def test_costpercapita_cr58
  r = spreadsheet.costpercapita_cr58
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a59
  r = spreadsheet.costpercapita_a59
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b59
  r = spreadsheet.costpercapita_b59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c59
  r = spreadsheet.costpercapita_c59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e59
  r = spreadsheet.costpercapita_e59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15661.61197277793,r[:number],0.001)
end

def test_costpercapita_f59
  r = spreadsheet.costpercapita_f59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16738.214611319425,r[:number],0.001)
end

def test_costpercapita_g59
  r = spreadsheet.costpercapita_g59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19749.063224207344,r[:number],0.001)
end

def test_costpercapita_h59
  r = spreadsheet.costpercapita_h59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21115.959120151856,r[:number],0.001)
end

def test_costpercapita_i59
  r = spreadsheet.costpercapita_i59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21451.556458167317,r[:number],0.001)
end

def test_costpercapita_j59
  r = spreadsheet.costpercapita_j59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21320.95847527854,r[:number],0.001)
end

def test_costpercapita_k59
  r = spreadsheet.costpercapita_k59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20756.53431151481,r[:number],0.001)
end

def test_costpercapita_l59
  r = spreadsheet.costpercapita_l59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20763.89597442529,r[:number],0.001)
end

def test_costpercapita_m59
  r = spreadsheet.costpercapita_m59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20425.26999297157,r[:number],0.001)
end

def test_costpercapita_o59
  r = spreadsheet.costpercapita_o59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587.831071515992,r[:number],0.001)
end

def test_costpercapita_p59
  r = spreadsheet.costpercapita_p59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(633.1408476537931,r[:number],0.001)
end

def test_costpercapita_q59
  r = spreadsheet.costpercapita_q59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(755.3054379687535,r[:number],0.001)
end

def test_costpercapita_r59
  r = spreadsheet.costpercapita_r59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(781.4008292799185,r[:number],0.001)
end

def test_costpercapita_s59
  r = spreadsheet.costpercapita_s59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(791.208996777522,r[:number],0.001)
end

def test_costpercapita_t59
  r = spreadsheet.costpercapita_t59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(786.3569149626172,r[:number],0.001)
end

def test_costpercapita_u59
  r = spreadsheet.costpercapita_u59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(785.5293925716526,r[:number],0.001)
end

def test_costpercapita_v59
  r = spreadsheet.costpercapita_v59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.7058997036585,r[:number],0.001)
end

def test_costpercapita_w59
  r = spreadsheet.costpercapita_w59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(778.1469182032332,r[:number],0.001)
end

def test_costpercapita_y59
  r = spreadsheet.costpercapita_y59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.91117449472222,r[:number],0.001)
end

def test_costpercapita_z59
  r = spreadsheet.costpercapita_z59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.066625552084965,r[:number],0.001)
end

def test_costpercapita_aa59
  r = spreadsheet.costpercapita_aa59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.75363503232074,r[:number],0.001)
end

def test_costpercapita_ab59
  r = spreadsheet.costpercapita_ab59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.99083783802683,r[:number],0.001)
end

def test_costpercapita_ac59
  r = spreadsheet.costpercapita_ac59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.83170891686314,r[:number],0.001)
end

def test_costpercapita_ad59
  r = spreadsheet.costpercapita_ad59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.41573159273017,r[:number],0.001)
end

def test_costpercapita_ae59
  r = spreadsheet.costpercapita_ae59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.34478667403648,r[:number],0.001)
end

def test_costpercapita_af59
  r = spreadsheet.costpercapita_af59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.15967484106301,r[:number],0.001)
end

def test_costpercapita_ag59
  r = spreadsheet.costpercapita_ag59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.71187444163724,r[:number],0.001)
end

def test_costpercapita_ai59
  r = spreadsheet.costpercapita_ai59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16303.354218788643,r[:number],0.001)
end

def test_costpercapita_aj59
  r = spreadsheet.costpercapita_aj59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17429.4220845253,r[:number],0.001)
end

def test_costpercapita_ak59
  r = spreadsheet.costpercapita_ak59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20569.12229720842,r[:number],0.001)
end

def test_costpercapita_al59
  r = spreadsheet.costpercapita_al59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21964.3507872698,r[:number],0.001)
end

def test_costpercapita_am59
  r = spreadsheet.costpercapita_am59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22310.597163861697,r[:number],0.001)
end

def test_costpercapita_an59
  r = spreadsheet.costpercapita_an59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22174.73112183389,r[:number],0.001)
end

def test_costpercapita_ao59
  r = spreadsheet.costpercapita_ao59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21609.4084907605,r[:number],0.001)
end

def test_costpercapita_ap59
  r = spreadsheet.costpercapita_ap59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21601.76154897001,r[:number],0.001)
end

def test_costpercapita_aq59
  r = spreadsheet.costpercapita_aq59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21270.12878561644,r[:number],0.001)
end

def test_costpercapita_as59
  r = spreadsheet.costpercapita_as59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20581.430722092744,r[:number],0.001)
end

def test_costpercapita_at59
  r = spreadsheet.costpercapita_at59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431001.32466494874,r[:number],0.001)
end

def test_costpercapita_av59
  r = spreadsheet.costpercapita_av59
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw59
  r = spreadsheet.costpercapita_aw59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay59
  r = spreadsheet.costpercapita_ay59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5158.682426291831,r[:number],0.001)
end

def test_costpercapita_az59
  r = spreadsheet.costpercapita_az59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9188.8299570736,r[:number],0.001)
end

def test_costpercapita_ba59
  r = spreadsheet.costpercapita_ba59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10841.70492449148,r[:number],0.001)
end

def test_costpercapita_bb59
  r = spreadsheet.costpercapita_bb59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11592.094033994346,r[:number],0.001)
end

def test_costpercapita_bc59
  r = spreadsheet.costpercapita_bc59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11776.327952884667,r[:number],0.001)
end

def test_costpercapita_bd59
  r = spreadsheet.costpercapita_bd59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11704.633170294761,r[:number],0.001)
end

def test_costpercapita_be59
  r = spreadsheet.costpercapita_be59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11394.779474131668,r[:number],0.001)
end

def test_costpercapita_bf59
  r = spreadsheet.costpercapita_bf59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11398.820829213824,r[:number],0.001)
end

def test_costpercapita_bg59
  r = spreadsheet.costpercapita_bg59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11212.924266475222,r[:number],0.001)
end

def test_costpercapita_bi59
  r = spreadsheet.costpercapita_bi59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5158.682426291831,r[:number],0.001)
end

def test_costpercapita_bj59
  r = spreadsheet.costpercapita_bj59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14177.404473114313,r[:number],0.001)
end

def test_costpercapita_bk59
  r = spreadsheet.costpercapita_bk59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24554.967397013937,r[:number],0.001)
end

def test_costpercapita_bl59
  r = spreadsheet.costpercapita_bl59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30710.903253426866,r[:number],0.001)
end

def test_costpercapita_bm59
  r = spreadsheet.costpercapita_bm59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33270.70652211411,r[:number],0.001)
end

def test_costpercapita_bn59
  r = spreadsheet.costpercapita_bn59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34213.35797009287,r[:number],0.001)
end

def test_costpercapita_bo59
  r = spreadsheet.costpercapita_bo59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34103.492882564016,r[:number],0.001)
end

def test_costpercapita_bp59
  r = spreadsheet.costpercapita_bp59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33792.80993802314,r[:number],0.001)
end

def test_costpercapita_bq59
  r = spreadsheet.costpercapita_bq59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33358.09607924065,r[:number],0.001)
end

def test_costpercapita_bs59
  r = spreadsheet.costpercapita_bs59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5800.424672302545,r[:number],0.001)
end

def test_costpercapita_bt59
  r = spreadsheet.costpercapita_bt59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14868.61194632019,r[:number],0.001)
end

def test_costpercapita_bu59
  r = spreadsheet.costpercapita_bu59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25375.026470015007,r[:number],0.001)
end

def test_costpercapita_bv59
  r = spreadsheet.costpercapita_bv59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31559.294920544813,r[:number],0.001)
end

def test_costpercapita_bw59
  r = spreadsheet.costpercapita_bw59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34129.74722780849,r[:number],0.001)
end

def test_costpercapita_bx59
  r = spreadsheet.costpercapita_bx59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35067.13061664822,r[:number],0.001)
end

def test_costpercapita_by59
  r = spreadsheet.costpercapita_by59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34956.3670618097,r[:number],0.001)
end

def test_costpercapita_bz59
  r = spreadsheet.costpercapita_bz59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34630.67551256787,r[:number],0.001)
end

def test_costpercapita_ca59
  r = spreadsheet.costpercapita_ca59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34202.95487188552,r[:number],0.001)
end

def test_costpercapita_cc59
  r = spreadsheet.costpercapita_cc59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27843.359255544707,r[:number],0.001)
end

def test_costpercapita_cd59
  r = spreadsheet.costpercapita_cd59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(573304.5086159037,r[:number],0.001)
end

def test_costpercapita_cf59
  r = spreadsheet.costpercapita_cf59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-10502.929546486097,r[:number],0.001)
end

def test_costpercapita_cg59
  r = spreadsheet.costpercapita_cg59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2560.810138205112,r[:number],0.001)
end

def test_costpercapita_ch59
  r = spreadsheet.costpercapita_ch59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4805.904172806592,r[:number],0.001)
end

def test_costpercapita_ci59
  r = spreadsheet.costpercapita_ci59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9594.944133275012,r[:number],0.001)
end

def test_costpercapita_cj59
  r = spreadsheet.costpercapita_cj59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11819.150063946792,r[:number],0.001)
end

def test_costpercapita_ck59
  r = spreadsheet.costpercapita_ck59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12892.399494814328,r[:number],0.001)
end

def test_costpercapita_cl59
  r = spreadsheet.costpercapita_cl59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13346.958571049205,r[:number],0.001)
end

def test_costpercapita_cm59
  r = spreadsheet.costpercapita_cm59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13028.913963597857,r[:number],0.001)
end

def test_costpercapita_cn59
  r = spreadsheet.costpercapita_cn59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12932.826086269077,r[:number],0.001)
end

def test_costpercapita_cp59
  r = spreadsheet.costpercapita_cp59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7261.928533451962,r[:number],0.001)
end

def test_costpercapita_cq59
  r = spreadsheet.costpercapita_cq59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142303.18395095484,r[:number],0.001)
end

def test_costpercapita_cr59
  r = spreadsheet.costpercapita_cr59
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a60
  r = spreadsheet.costpercapita_a60
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b60
  r = spreadsheet.costpercapita_b60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c60
  r = spreadsheet.costpercapita_c60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e60
  r = spreadsheet.costpercapita_e60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3004.8704828870095,r[:number],0.001)
end

def test_costpercapita_f60
  r = spreadsheet.costpercapita_f60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2859.4797410625465,r[:number],0.001)
end

def test_costpercapita_g60
  r = spreadsheet.costpercapita_g60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6831.154823318259,r[:number],0.001)
end

def test_costpercapita_h60
  r = spreadsheet.costpercapita_h60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11015.1318923799,r[:number],0.001)
end

def test_costpercapita_i60
  r = spreadsheet.costpercapita_i60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12957.893869050095,r[:number],0.001)
end

def test_costpercapita_j60
  r = spreadsheet.costpercapita_j60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14233.016981273733,r[:number],0.001)
end

def test_costpercapita_k60
  r = spreadsheet.costpercapita_k60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14795.38926858644,r[:number],0.001)
end

def test_costpercapita_l60
  r = spreadsheet.costpercapita_l60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15023.206172162172,r[:number],0.001)
end

def test_costpercapita_m60
  r = spreadsheet.costpercapita_m60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15217.594572062117,r[:number],0.001)
end

def test_costpercapita_o60
  r = spreadsheet.costpercapita_o60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.491614770485644,r[:number],0.001)
end

def test_costpercapita_p60
  r = spreadsheet.costpercapita_p60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.31310110173277,r[:number],0.001)
end

def test_costpercapita_q60
  r = spreadsheet.costpercapita_q60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.24632027778814,r[:number],0.001)
end

def test_costpercapita_r60
  r = spreadsheet.costpercapita_r60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.44446499984014,r[:number],0.001)
end

def test_costpercapita_s60
  r = spreadsheet.costpercapita_s60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.63425129974607,r[:number],0.001)
end

def test_costpercapita_t60
  r = spreadsheet.costpercapita_t60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.3725773324594,r[:number],0.001)
end

def test_costpercapita_u60
  r = spreadsheet.costpercapita_u60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.11154785037812,r[:number],0.001)
end

def test_costpercapita_v60
  r = spreadsheet.costpercapita_v60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.68819330390048,r[:number],0.001)
end

def test_costpercapita_w60
  r = spreadsheet.costpercapita_w60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.40922181947963,r[:number],0.001)
end

def test_costpercapita_y60
  r = spreadsheet.costpercapita_y60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z60
  r = spreadsheet.costpercapita_z60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa60
  r = spreadsheet.costpercapita_aa60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab60
  r = spreadsheet.costpercapita_ab60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac60
  r = spreadsheet.costpercapita_ac60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad60
  r = spreadsheet.costpercapita_ad60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae60
  r = spreadsheet.costpercapita_ae60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af60
  r = spreadsheet.costpercapita_af60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag60
  r = spreadsheet.costpercapita_ag60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai60
  r = spreadsheet.costpercapita_ai60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3031.362097657495,r[:number],0.001)
end

def test_costpercapita_aj60
  r = spreadsheet.costpercapita_aj60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2923.792842164279,r[:number],0.001)
end

def test_costpercapita_ak60
  r = spreadsheet.costpercapita_ak60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6936.401143596047,r[:number],0.001)
end

def test_costpercapita_al60
  r = spreadsheet.costpercapita_al60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11140.576357379741,r[:number],0.001)
end

def test_costpercapita_am60
  r = spreadsheet.costpercapita_am60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13097.528120349842,r[:number],0.001)
end

def test_costpercapita_an60
  r = spreadsheet.costpercapita_an60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14380.389558606194,r[:number],0.001)
end

def test_costpercapita_ao60
  r = spreadsheet.costpercapita_ao60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14947.500816436817,r[:number],0.001)
end

def test_costpercapita_ap60
  r = spreadsheet.costpercapita_ap60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15179.894365466072,r[:number],0.001)
end

def test_costpercapita_aq60
  r = spreadsheet.costpercapita_aq60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15377.003793881599,r[:number],0.001)
end

def test_costpercapita_as60
  r = spreadsheet.costpercapita_as60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10779.383232837565,r[:number],0.001)
end

def test_costpercapita_at60
  r = spreadsheet.costpercapita_at60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206848.36969739365,r[:number],0.001)
end

def test_costpercapita_av60
  r = spreadsheet.costpercapita_av60
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw60
  r = spreadsheet.costpercapita_aw60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay60
  r = spreadsheet.costpercapita_ay60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(989.7558808311346,r[:number],0.001)
end

def test_costpercapita_az60
  r = spreadsheet.costpercapita_az60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1569.777525050468,r[:number],0.001)
end

def test_costpercapita_ba60
  r = spreadsheet.costpercapita_ba60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3750.120400503495,r[:number],0.001)
end

def test_costpercapita_bb60
  r = spreadsheet.costpercapita_bb60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6047.011360779697,r[:number],0.001)
end

def test_costpercapita_bc60
  r = spreadsheet.costpercapita_bc60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7113.5354713391425,r[:number],0.001)
end

def test_costpercapita_bd60
  r = spreadsheet.costpercapita_bd60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7813.543789110013,r[:number],0.001)
end

def test_costpercapita_be60
  r = spreadsheet.costpercapita_be60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8122.27106024874,r[:number],0.001)
end

def test_costpercapita_bf60
  r = spreadsheet.costpercapita_bf60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8247.336417391953,r[:number],0.001)
end

def test_costpercapita_bg60
  r = spreadsheet.costpercapita_bg60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8354.050424458173,r[:number],0.001)
end

def test_costpercapita_bi60
  r = spreadsheet.costpercapita_bi60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(989.7558808311346,r[:number],0.001)
end

def test_costpercapita_bj60
  r = spreadsheet.costpercapita_bj60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2526.8961371695677,r[:number],0.001)
end

def test_costpercapita_bk60
  r = spreadsheet.costpercapita_bk60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6194.290631769916,r[:number],0.001)
end

def test_costpercapita_bl60
  r = spreadsheet.costpercapita_bl60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11152.386411354853,r[:number],0.001)
end

def test_costpercapita_bm60
  r = spreadsheet.costpercapita_bm60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16530.063662276236,r[:number],0.001)
end

def test_costpercapita_bn60
  r = spreadsheet.costpercapita_bn60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20502.771032359135,r[:number],0.001)
end

def test_costpercapita_bo60
  r = spreadsheet.costpercapita_bo60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22567.018925434164,r[:number],0.001)
end

def test_costpercapita_bp60
  r = spreadsheet.costpercapita_bp60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23701.954184212856,r[:number],0.001)
end

def test_costpercapita_bq60
  r = spreadsheet.costpercapita_bq60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24259.17378485631,r[:number],0.001)
end

def test_costpercapita_bs60
  r = spreadsheet.costpercapita_bs60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1016.2474956016204,r[:number],0.001)
end

def test_costpercapita_bt60
  r = spreadsheet.costpercapita_bt60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2591.2092382713004,r[:number],0.001)
end

def test_costpercapita_bu60
  r = spreadsheet.costpercapita_bu60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6299.536952047703,r[:number],0.001)
end

def test_costpercapita_bv60
  r = spreadsheet.costpercapita_bv60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11277.830876354694,r[:number],0.001)
end

def test_costpercapita_bw60
  r = spreadsheet.costpercapita_bw60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16669.69791357598,r[:number],0.001)
end

def test_costpercapita_bx60
  r = spreadsheet.costpercapita_bx60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20650.143609691593,r[:number],0.001)
end

def test_costpercapita_by60
  r = spreadsheet.costpercapita_by60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22719.13047328454,r[:number],0.001)
end

def test_costpercapita_bz60
  r = spreadsheet.costpercapita_bz60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23858.642377516757,r[:number],0.001)
end

def test_costpercapita_ca60
  r = spreadsheet.costpercapita_ca60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24418.58300667579,r[:number],0.001)
end

def test_costpercapita_cc60
  r = spreadsheet.costpercapita_cc60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14389.00243811333,r[:number],0.001)
end

def test_costpercapita_cd60
  r = spreadsheet.costpercapita_cd60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262992.0087038502,r[:number],0.001)
end

def test_costpercapita_cf60
  r = spreadsheet.costpercapita_cf60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2015.1146020558747,r[:number],0.001)
end

def test_costpercapita_cg60
  r = spreadsheet.costpercapita_cg60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-332.5836038929789,r[:number],0.001)
end

def test_costpercapita_ch60
  r = spreadsheet.costpercapita_ch60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-636.8641915483438,r[:number],0.001)
end

def test_costpercapita_ci60
  r = spreadsheet.costpercapita_ci60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.25451897495296,r[:number],0.001)
end

def test_costpercapita_cj60
  r = spreadsheet.costpercapita_cj60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3572.169793226141,r[:number],0.001)
end

def test_costpercapita_ck60
  r = spreadsheet.costpercapita_ck60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6269.754051085402,r[:number],0.001)
end

def test_costpercapita_cl60
  r = spreadsheet.costpercapita_cl60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7771.629656847723,r[:number],0.001)
end

def test_costpercapita_cm60
  r = spreadsheet.costpercapita_cm60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8678.748012050686,r[:number],0.001)
end

def test_costpercapita_cn60
  r = spreadsheet.costpercapita_cn60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9041.579212794195,r[:number],0.001)
end

def test_costpercapita_cp60
  r = spreadsheet.costpercapita_cp60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3609.619205275767,r[:number],0.001)
end

def test_costpercapita_cq60
  r = spreadsheet.costpercapita_cq60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56143.63900645661,r[:number],0.001)
end

def test_costpercapita_cr60
  r = spreadsheet.costpercapita_cr60
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a61
  r = spreadsheet.costpercapita_a61
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b61
  r = spreadsheet.costpercapita_b61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c61
  r = spreadsheet.costpercapita_c61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e61
  r = spreadsheet.costpercapita_e61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.47503458222164,r[:number],0.001)
end

def test_costpercapita_f61
  r = spreadsheet.costpercapita_f61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.10182324881818,r[:number],0.001)
end

def test_costpercapita_g61
  r = spreadsheet.costpercapita_g61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(454.21493568213054,r[:number],0.001)
end

def test_costpercapita_h61
  r = spreadsheet.costpercapita_h61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1300.6263536054093,r[:number],0.001)
end

def test_costpercapita_i61
  r = spreadsheet.costpercapita_i61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.3419945526932,r[:number],0.001)
end

def test_costpercapita_j61
  r = spreadsheet.costpercapita_j61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2586.0031835315444,r[:number],0.001)
end

def test_costpercapita_k61
  r = spreadsheet.costpercapita_k61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3267.9044150632217,r[:number],0.001)
end

def test_costpercapita_l61
  r = spreadsheet.costpercapita_l61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3947.288210057304,r[:number],0.001)
end

def test_costpercapita_m61
  r = spreadsheet.costpercapita_m61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4091.9767041073787,r[:number],0.001)
end

def test_costpercapita_o61
  r = spreadsheet.costpercapita_o61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.767252514596602,r[:number],0.001)
end

def test_costpercapita_p61
  r = spreadsheet.costpercapita_p61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.393181603624647,r[:number],0.001)
end

def test_costpercapita_q61
  r = spreadsheet.costpercapita_q61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.87386297564863,r[:number],0.001)
end

def test_costpercapita_r61
  r = spreadsheet.costpercapita_r61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.031665312318765,r[:number],0.001)
end

def test_costpercapita_s61
  r = spreadsheet.costpercapita_s61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.12411241522041,r[:number],0.001)
end

def test_costpercapita_t61
  r = spreadsheet.costpercapita_t61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.18613071651843,r[:number],0.001)
end

def test_costpercapita_u61
  r = spreadsheet.costpercapita_u61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.54894503358152,r[:number],0.001)
end

def test_costpercapita_v61
  r = spreadsheet.costpercapita_v61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.22864248139338,r[:number],0.001)
end

def test_costpercapita_w61
  r = spreadsheet.costpercapita_w61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.82483936090017,r[:number],0.001)
end

def test_costpercapita_y61
  r = spreadsheet.costpercapita_y61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z61
  r = spreadsheet.costpercapita_z61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa61
  r = spreadsheet.costpercapita_aa61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab61
  r = spreadsheet.costpercapita_ab61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac61
  r = spreadsheet.costpercapita_ac61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad61
  r = spreadsheet.costpercapita_ad61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae61
  r = spreadsheet.costpercapita_ae61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af61
  r = spreadsheet.costpercapita_af61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag61
  r = spreadsheet.costpercapita_ag61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai61
  r = spreadsheet.costpercapita_ai61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.24228709681824,r[:number],0.001)
end

def test_costpercapita_aj61
  r = spreadsheet.costpercapita_aj61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.49500485244283,r[:number],0.001)
end

def test_costpercapita_ak61
  r = spreadsheet.costpercapita_ak61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(487.08879865777914,r[:number],0.001)
end

def test_costpercapita_al61
  r = spreadsheet.costpercapita_al61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1351.6580189177282,r[:number],0.001)
end

def test_costpercapita_am61
  r = spreadsheet.costpercapita_am61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2073.4661069679137,r[:number],0.001)
end

def test_costpercapita_an61
  r = spreadsheet.costpercapita_an61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2670.1893142480626,r[:number],0.001)
end

def test_costpercapita_ao61
  r = spreadsheet.costpercapita_ao61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3370.4533600968034,r[:number],0.001)
end

def test_costpercapita_ap61
  r = spreadsheet.costpercapita_ap61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4054.516852538697,r[:number],0.001)
end

def test_costpercapita_aq61
  r = spreadsheet.costpercapita_aq61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4210.801543468278,r[:number],0.001)
end

def test_costpercapita_as61
  r = spreadsheet.costpercapita_as61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2039.101254093836,r[:number],0.001)
end

def test_costpercapita_at61
  r = spreadsheet.costpercapita_at61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34834.67051687268,r[:number],0.001)
end

def test_costpercapita_av61
  r = spreadsheet.costpercapita_av61
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw61
  r = spreadsheet.costpercapita_aw61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay61
  r = spreadsheet.costpercapita_ay61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.296278562073034,r[:number],0.001)
end

def test_costpercapita_az61
  r = spreadsheet.costpercapita_az61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.03298999580647,r[:number],0.001)
end

def test_costpercapita_ba61
  r = spreadsheet.costpercapita_ba61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(249.35179198405675,r[:number],0.001)
end

def test_costpercapita_bb61
  r = spreadsheet.costpercapita_bb61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(714.0089118517228,r[:number],0.001)
end

def test_costpercapita_bc61
  r = spreadsheet.costpercapita_bc61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1101.9768046924146,r[:number],0.001)
end

def test_costpercapita_bd61
  r = spreadsheet.costpercapita_bd61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1419.6462450572703,r[:number],0.001)
end

def test_costpercapita_be61
  r = spreadsheet.costpercapita_be61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1793.991694053144,r[:number],0.001)
end

def test_costpercapita_bf61
  r = spreadsheet.costpercapita_bf61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2166.955138049748,r[:number],0.001)
end

def test_costpercapita_bg61
  r = spreadsheet.costpercapita_bg61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2246.3852325636567,r[:number],0.001)
end

def test_costpercapita_bi61
  r = spreadsheet.costpercapita_bi61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.296278562073034,r[:number],0.001)
end

def test_costpercapita_bj61
  r = spreadsheet.costpercapita_bj61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.79189764376084,r[:number],0.001)
end

def test_costpercapita_bk61
  r = spreadsheet.costpercapita_bk61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(302.34990423946766,r[:number],0.001)
end

def test_costpercapita_bl61
  r = spreadsheet.costpercapita_bl61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(992.2259982474915,r[:number],0.001)
end

def test_costpercapita_bm61
  r = spreadsheet.costpercapita_bm61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2031.5084820780166,r[:number],0.001)
end

def test_costpercapita_bn61
  r = spreadsheet.costpercapita_bn61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3173.807818691679,r[:number],0.001)
end

def test_costpercapita_bo61
  r = spreadsheet.costpercapita_bo61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4236.433392953054,r[:number],0.001)
end

def test_costpercapita_bp61
  r = spreadsheet.costpercapita_bp61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5286.815685100555,r[:number],0.001)
end

def test_costpercapita_bq61
  r = spreadsheet.costpercapita_bq61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6098.295347769609,r[:number],0.001)
end

def test_costpercapita_bs61
  r = spreadsheet.costpercapita_bs61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.063531076669637,r[:number],0.001)
end

def test_costpercapita_bt61
  r = spreadsheet.costpercapita_bt61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.18507924738549,r[:number],0.001)
end

def test_costpercapita_bu61
  r = spreadsheet.costpercapita_bu61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.22376721511625,r[:number],0.001)
end

def test_costpercapita_bv61
  r = spreadsheet.costpercapita_bv61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1043.2576635598102,r[:number],0.001)
end

def test_costpercapita_bw61
  r = spreadsheet.costpercapita_bw61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2097.632594493237,r[:number],0.001)
end

def test_costpercapita_bx61
  r = spreadsheet.costpercapita_bx61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3257.9939494081978,r[:number],0.001)
end

def test_costpercapita_by61
  r = spreadsheet.costpercapita_by61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4338.982337986635,r[:number],0.001)
end

def test_costpercapita_bz61
  r = spreadsheet.costpercapita_bz61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5394.044327581949,r[:number],0.001)
end

def test_costpercapita_ca61
  r = spreadsheet.costpercapita_ca61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6217.120187130509,r[:number],0.001)
end

def test_costpercapita_cc61
  r = spreadsheet.costpercapita_cc61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2529.8337152999457,r[:number],0.001)
end

def test_costpercapita_cd61
  r = spreadsheet.costpercapita_cd61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41021.61669025006,r[:number],0.001)
end

def test_costpercapita_cf61
  r = spreadsheet.costpercapita_cf61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-33.1787560201486,r[:number],0.001)
end

def test_costpercapita_cg61
  r = spreadsheet.costpercapita_cg61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-16.309925605057344,r[:number],0.001)
end

def test_costpercapita_ch61
  r = spreadsheet.costpercapita_ch61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-151.86503144266285,r[:number],0.001)
end

def test_costpercapita_ci61
  r = spreadsheet.costpercapita_ci61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-308.40035535791793,r[:number],0.001)
end

def test_costpercapita_cj61
  r = spreadsheet.costpercapita_cj61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.16648752532337,r[:number],0.001)
end

def test_costpercapita_ck61
  r = spreadsheet.costpercapita_ck61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587.8046351601348,r[:number],0.001)
end

def test_costpercapita_cl61
  r = spreadsheet.costpercapita_cl61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(968.5289778898317,r[:number],0.001)
end

def test_costpercapita_cm61
  r = spreadsheet.costpercapita_cm61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1339.5274750432518,r[:number],0.001)
end

def test_costpercapita_cn61
  r = spreadsheet.costpercapita_cn61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2006.3186436622307,r[:number],0.001)
end

def test_costpercapita_cp61
  r = spreadsheet.costpercapita_cp61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.7324612061095,r[:number],0.001)
end

def test_costpercapita_cq61
  r = spreadsheet.costpercapita_cq61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6186.946173377386,r[:number],0.001)
end

def test_costpercapita_cr61
  r = spreadsheet.costpercapita_cr61
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a62
  r = spreadsheet.costpercapita_a62
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b62
  r = spreadsheet.costpercapita_b62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c62
  r = spreadsheet.costpercapita_c62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e62
  r = spreadsheet.costpercapita_e62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f62
  r = spreadsheet.costpercapita_f62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.55813621344424,r[:number],0.001)
end

def test_costpercapita_g62
  r = spreadsheet.costpercapita_g62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.34638923589085,r[:number],0.001)
end

def test_costpercapita_h62
  r = spreadsheet.costpercapita_h62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.84610788823986,r[:number],0.001)
end

def test_costpercapita_i62
  r = spreadsheet.costpercapita_i62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(224.1131427204423,r[:number],0.001)
end

def test_costpercapita_j62
  r = spreadsheet.costpercapita_j62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.17299399099244,r[:number],0.001)
end

def test_costpercapita_k62
  r = spreadsheet.costpercapita_k62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.39505317945193,r[:number],0.001)
end

def test_costpercapita_l62
  r = spreadsheet.costpercapita_l62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.96500261017347,r[:number],0.001)
end

def test_costpercapita_m62
  r = spreadsheet.costpercapita_m62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.71272975808023,r[:number],0.001)
end

def test_costpercapita_o62
  r = spreadsheet.costpercapita_o62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1676.9123978315934,r[:number],0.001)
end

def test_costpercapita_p62
  r = spreadsheet.costpercapita_p62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1823.395163491884,r[:number],0.001)
end

def test_costpercapita_q62
  r = spreadsheet.costpercapita_q62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1958.8737729227055,r[:number],0.001)
end

def test_costpercapita_r62
  r = spreadsheet.costpercapita_r62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2024.1432882570123,r[:number],0.001)
end

def test_costpercapita_s62
  r = spreadsheet.costpercapita_s62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2080.8999550930125,r[:number],0.001)
end

def test_costpercapita_t62
  r = spreadsheet.costpercapita_t62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2139.9694057227775,r[:number],0.001)
end

def test_costpercapita_u62
  r = spreadsheet.costpercapita_u62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2161.529118182506,r[:number],0.001)
end

def test_costpercapita_v62
  r = spreadsheet.costpercapita_v62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2163.3935979625157,r[:number],0.001)
end

def test_costpercapita_w62
  r = spreadsheet.costpercapita_w62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2157.877284323585,r[:number],0.001)
end

def test_costpercapita_y62
  r = spreadsheet.costpercapita_y62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z62
  r = spreadsheet.costpercapita_z62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa62
  r = spreadsheet.costpercapita_aa62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab62
  r = spreadsheet.costpercapita_ab62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac62
  r = spreadsheet.costpercapita_ac62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad62
  r = spreadsheet.costpercapita_ad62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae62
  r = spreadsheet.costpercapita_ae62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af62
  r = spreadsheet.costpercapita_af62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag62
  r = spreadsheet.costpercapita_ag62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai62
  r = spreadsheet.costpercapita_ai62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1676.9123978315934,r[:number],0.001)
end

def test_costpercapita_aj62
  r = spreadsheet.costpercapita_aj62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2226.9532997053284,r[:number],0.001)
end

def test_costpercapita_ak62
  r = spreadsheet.costpercapita_ak62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2349.2201621585964,r[:number],0.001)
end

def test_costpercapita_al62
  r = spreadsheet.costpercapita_al62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2275.989396145252,r[:number],0.001)
end

def test_costpercapita_am62
  r = spreadsheet.costpercapita_am62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2305.013097813455,r[:number],0.001)
end

def test_costpercapita_an62
  r = spreadsheet.costpercapita_an62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2356.1423997137695,r[:number],0.001)
end

def test_costpercapita_ao62
  r = spreadsheet.costpercapita_ao62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2295.9241713619576,r[:number],0.001)
end

def test_costpercapita_ap62
  r = spreadsheet.costpercapita_ap62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2253.3586005726893,r[:number],0.001)
end

def test_costpercapita_aq62
  r = spreadsheet.costpercapita_aq62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2227.5900140816652,r[:number],0.001)
end

def test_costpercapita_as62
  r = spreadsheet.costpercapita_as62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2218.56705993159,r[:number],0.001)
end

def test_costpercapita_at62
  r = spreadsheet.costpercapita_at62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47454.05379057344,r[:number],0.001)
end

def test_costpercapita_av62
  r = spreadsheet.costpercapita_av62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw62
  r = spreadsheet.costpercapita_aw62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay62
  r = spreadsheet.costpercapita_ay62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az62
  r = spreadsheet.costpercapita_az62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.54257055296395,r[:number],0.001)
end

def test_costpercapita_ba62
  r = spreadsheet.costpercapita_ba62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.2896765477383,r[:number],0.001)
end

def test_costpercapita_bb62
  r = spreadsheet.costpercapita_bb62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.25674448999249,r[:number],0.001)
end

def test_costpercapita_bc62
  r = spreadsheet.costpercapita_bc62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.03209197777039,r[:number],0.001)
end

def test_costpercapita_bd62
  r = spreadsheet.costpercapita_bd62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.6731637286698,r[:number],0.001)
end

def test_costpercapita_be62
  r = spreadsheet.costpercapita_be62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.7792721275487,r[:number],0.001)
end

def test_costpercapita_bf62
  r = spreadsheet.costpercapita_bf62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.388368489045355,r[:number],0.001)
end

def test_costpercapita_bg62
  r = spreadsheet.costpercapita_bg62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.27041500335555,r[:number],0.001)
end

def test_costpercapita_bi62
  r = spreadsheet.costpercapita_bi62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj62
  r = spreadsheet.costpercapita_bj62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.54257055296395,r[:number],0.001)
end

def test_costpercapita_bk62
  r = spreadsheet.costpercapita_bk62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(428.57935309547634,r[:number],0.001)
end

def test_costpercapita_bl62
  r = spreadsheet.costpercapita_bl62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(553.5657916067636,r[:number],0.001)
end

def test_costpercapita_bm62
  r = spreadsheet.costpercapita_bm62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(459.49301122529897,r[:number],0.001)
end

def test_costpercapita_bn62
  r = spreadsheet.costpercapita_bn62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(370.118938884896,r[:number],0.001)
end

def test_costpercapita_bo62
  r = spreadsheet.costpercapita_bo62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307.4935277949715,r[:number],0.001)
end

def test_costpercapita_bp62
  r = spreadsheet.costpercapita_bp62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.52139339050976,r[:number],0.001)
end

def test_costpercapita_bq62
  r = spreadsheet.costpercapita_bq62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.6952555941559,r[:number],0.001)
end

def test_costpercapita_bs62
  r = spreadsheet.costpercapita_bs62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1676.9123978315934,r[:number],0.001)
end

def test_costpercapita_bt62
  r = spreadsheet.costpercapita_bt62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2044.937734044848,r[:number],0.001)
end

def test_costpercapita_bu62
  r = spreadsheet.costpercapita_bu62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2387.4531260181816,r[:number],0.001)
end

def test_costpercapita_bv62
  r = spreadsheet.costpercapita_bv62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2577.709079863776,r[:number],0.001)
end

def test_costpercapita_bw62
  r = spreadsheet.costpercapita_bw62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2540.3929663183117,r[:number],0.001)
end

def test_costpercapita_bx62
  r = spreadsheet.costpercapita_bx62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2510.088344607673,r[:number],0.001)
end

def test_costpercapita_by62
  r = spreadsheet.costpercapita_by62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2469.022645977477,r[:number],0.001)
end

def test_costpercapita_bz62
  r = spreadsheet.costpercapita_bz62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2398.9149913530255,r[:number],0.001)
end

def test_costpercapita_ca62
  r = spreadsheet.costpercapita_ca62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2315.572539917741,r[:number],0.001)
end

def test_costpercapita_cc62
  r = spreadsheet.costpercapita_cc62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2324.5559806591805,r[:number],0.001)
end

def test_costpercapita_cd62
  r = spreadsheet.costpercapita_cd62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49289.607059187416,r[:number],0.001)
end

def test_costpercapita_cf62
  r = spreadsheet.costpercapita_cf62
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg62
  r = spreadsheet.costpercapita_cg62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-182.01556566048032,r[:number],0.001)
end

def test_costpercapita_ch62
  r = spreadsheet.costpercapita_ch62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.23296385958544,r[:number],0.001)
end

def test_costpercapita_ci62
  r = spreadsheet.costpercapita_ci62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(301.7196837185237,r[:number],0.001)
end

def test_costpercapita_cj62
  r = spreadsheet.costpercapita_cj62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.37986850485666,r[:number],0.001)
end

def test_costpercapita_ck62
  r = spreadsheet.costpercapita_ck62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.94594489390357,r[:number],0.001)
end

def test_costpercapita_cl62
  r = spreadsheet.costpercapita_cl62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.09847461551956,r[:number],0.001)
end

def test_costpercapita_cm62
  r = spreadsheet.costpercapita_cm62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.5563907803363,r[:number],0.001)
end

def test_costpercapita_cn62
  r = spreadsheet.costpercapita_cn62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.98252583607567,r[:number],0.001)
end

def test_costpercapita_cp62
  r = spreadsheet.costpercapita_cp62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.98892072759116,r[:number],0.001)
end

def test_costpercapita_cq62
  r = spreadsheet.costpercapita_cq62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1835.5532686139761,r[:number],0.001)
end

def test_costpercapita_cr62
  r = spreadsheet.costpercapita_cr62
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a63
  r = spreadsheet.costpercapita_a63
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b63
  r = spreadsheet.costpercapita_b63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave and Tidal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c63
  r = spreadsheet.costpercapita_c63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e63
  r = spreadsheet.costpercapita_e63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f63
  r = spreadsheet.costpercapita_f63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6638876172360657,r[:number],0.001)
end

def test_costpercapita_g63
  r = spreadsheet.costpercapita_g63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.64964880162904,r[:number],0.001)
end

def test_costpercapita_h63
  r = spreadsheet.costpercapita_h63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.34557887203574,r[:number],0.001)
end

def test_costpercapita_i63
  r = spreadsheet.costpercapita_i63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.808756765599796,r[:number],0.001)
end

def test_costpercapita_j63
  r = spreadsheet.costpercapita_j63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.56562021015581,r[:number],0.001)
end

def test_costpercapita_k63
  r = spreadsheet.costpercapita_k63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.27393377813026,r[:number],0.001)
end

def test_costpercapita_l63
  r = spreadsheet.costpercapita_l63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.81348140889274,r[:number],0.001)
end

def test_costpercapita_m63
  r = spreadsheet.costpercapita_m63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.72058756970817,r[:number],0.001)
end

def test_costpercapita_o63
  r = spreadsheet.costpercapita_o63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p63
  r = spreadsheet.costpercapita_p63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.41667642967319823,r[:number],0.001)
end

def test_costpercapita_q63
  r = spreadsheet.costpercapita_q63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.604217682673935,r[:number],0.001)
end

def test_costpercapita_r63
  r = spreadsheet.costpercapita_r63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.619747993347346,r[:number],0.001)
end

def test_costpercapita_s63
  r = spreadsheet.costpercapita_s63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.065123977083967,r[:number],0.001)
end

def test_costpercapita_t63
  r = spreadsheet.costpercapita_t63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.40574255699956,r[:number],0.001)
end

def test_costpercapita_u63
  r = spreadsheet.costpercapita_u63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.84344534191959,r[:number],0.001)
end

def test_costpercapita_v63
  r = spreadsheet.costpercapita_v63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.30109622020011,r[:number],0.001)
end

def test_costpercapita_w63
  r = spreadsheet.costpercapita_w63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.19419675260642,r[:number],0.001)
end

def test_costpercapita_y63
  r = spreadsheet.costpercapita_y63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z63
  r = spreadsheet.costpercapita_z63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa63
  r = spreadsheet.costpercapita_aa63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab63
  r = spreadsheet.costpercapita_ab63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac63
  r = spreadsheet.costpercapita_ac63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad63
  r = spreadsheet.costpercapita_ad63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae63
  r = spreadsheet.costpercapita_ae63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af63
  r = spreadsheet.costpercapita_af63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag63
  r = spreadsheet.costpercapita_ag63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai63
  r = spreadsheet.costpercapita_ai63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj63
  r = spreadsheet.costpercapita_aj63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0805640469092643,r[:number],0.001)
end

def test_costpercapita_ak63
  r = spreadsheet.costpercapita_ak63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.253866484302975,r[:number],0.001)
end

def test_costpercapita_al63
  r = spreadsheet.costpercapita_al63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.965326865383084,r[:number],0.001)
end

def test_costpercapita_am63
  r = spreadsheet.costpercapita_am63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.87388074268377,r[:number],0.001)
end

def test_costpercapita_an63
  r = spreadsheet.costpercapita_an63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.97136276715537,r[:number],0.001)
end

def test_costpercapita_ao63
  r = spreadsheet.costpercapita_ao63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.11737912004983,r[:number],0.001)
end

def test_costpercapita_ap63
  r = spreadsheet.costpercapita_ap63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.11457762909285,r[:number],0.001)
end

def test_costpercapita_aq63
  r = spreadsheet.costpercapita_aq63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.91478432231459,r[:number],0.001)
end

def test_costpercapita_as63
  r = spreadsheet.costpercapita_as63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.14352688643243,r[:number],0.001)
end

def test_costpercapita_at63
  r = spreadsheet.costpercapita_at63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1128.6827342730699,r[:number],0.001)
end

def test_costpercapita_av63
  r = spreadsheet.costpercapita_av63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw63
  r = spreadsheet.costpercapita_aw63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay63
  r = spreadsheet.costpercapita_ay63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az63
  r = spreadsheet.costpercapita_az63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9134295823954294,r[:number],0.001)
end

def test_costpercapita_ba63
  r = spreadsheet.costpercapita_ba63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.9443172138719875,r[:number],0.001)
end

def test_costpercapita_bb63
  r = spreadsheet.costpercapita_bb63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.130471624344101,r[:number],0.001)
end

def test_costpercapita_bc63
  r = spreadsheet.costpercapita_bc63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.59880316198859,r[:number],0.001)
end

def test_costpercapita_bd63
  r = spreadsheet.costpercapita_bd63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.560903273474985,r[:number],0.001)
end

def test_costpercapita_be63
  r = spreadsheet.costpercapita_be63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.87233966819619,r[:number],0.001)
end

def test_costpercapita_bf63
  r = spreadsheet.costpercapita_bf63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.38496684025509,r[:number],0.001)
end

def test_costpercapita_bg63
  r = spreadsheet.costpercapita_bg63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.217857543537477,r[:number],0.001)
end

def test_costpercapita_bi63
  r = spreadsheet.costpercapita_bi63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj63
  r = spreadsheet.costpercapita_bj63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9134295823954294,r[:number],0.001)
end

def test_costpercapita_bk63
  r = spreadsheet.costpercapita_bk63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.827842801176018,r[:number],0.001)
end

def test_costpercapita_bl63
  r = spreadsheet.costpercapita_bl63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.715937212585017,r[:number],0.001)
end

def test_costpercapita_bm63
  r = spreadsheet.costpercapita_bm63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.13456111434721,r[:number],0.001)
end

def test_costpercapita_bn63
  r = spreadsheet.costpercapita_bn63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.45302072634588,r[:number],0.001)
end

def test_costpercapita_bo63
  r = spreadsheet.costpercapita_bo63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.7980974918662,r[:number],0.001)
end

def test_costpercapita_bp63
  r = spreadsheet.costpercapita_bp63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.79503979014356,r[:number],0.001)
end

def test_costpercapita_bq63
  r = spreadsheet.costpercapita_bq63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.25105333606945,r[:number],0.001)
end

def test_costpercapita_bs63
  r = spreadsheet.costpercapita_bs63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt63
  r = spreadsheet.costpercapita_bt63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3301060120686277,r[:number],0.001)
end

def test_costpercapita_bu63
  r = spreadsheet.costpercapita_bu63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.432060483849952,r[:number],0.001)
end

def test_costpercapita_bv63
  r = spreadsheet.costpercapita_bv63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.33568520593236,r[:number],0.001)
end

def test_costpercapita_bw63
  r = spreadsheet.costpercapita_bw63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.19968509143117,r[:number],0.001)
end

def test_costpercapita_bx63
  r = spreadsheet.costpercapita_bx63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.85876328334544,r[:number],0.001)
end

def test_costpercapita_by63
  r = spreadsheet.costpercapita_by63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.6415428337858,r[:number],0.001)
end

def test_costpercapita_bz63
  r = spreadsheet.costpercapita_bz63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.09613601034368,r[:number],0.001)
end

def test_costpercapita_ca63
  r = spreadsheet.costpercapita_ca63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.4452500886759,r[:number],0.001)
end

def test_costpercapita_cc63
  r = spreadsheet.costpercapita_cc63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.81546988993699,r[:number],0.001)
end

def test_costpercapita_cd63
  r = spreadsheet.costpercapita_cd63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1318.7785981271375,r[:number],0.001)
end

def test_costpercapita_cf63
  r = spreadsheet.costpercapita_cf63
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg63
  r = spreadsheet.costpercapita_cg63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.7504580348406364,r[:number],0.001)
end

def test_costpercapita_ch63
  r = spreadsheet.costpercapita_ch63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-4.821806000453021,r[:number],0.001)
end

def test_costpercapita_ci63
  r = spreadsheet.costpercapita_ci63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3703583405492767,r[:number],0.001)
end

def test_costpercapita_cj63
  r = spreadsheet.costpercapita_cj63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-8.674195651252596,r[:number],0.001)
end

def test_costpercapita_ck63
  r = spreadsheet.costpercapita_ck63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15.112599483809927,r[:number],0.001)
end

def test_costpercapita_cl63
  r = spreadsheet.costpercapita_cl63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.52416371373594,r[:number],0.001)
end

def test_costpercapita_cm63
  r = spreadsheet.costpercapita_cm63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.98155838125082,r[:number],0.001)
end

def test_costpercapita_cn63
  r = spreadsheet.costpercapita_cn63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.530465766361274,r[:number],0.001)
end

def test_costpercapita_cp63
  r = spreadsheet.costpercapita_cp63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.671943003504573,r[:number],0.001)
end

def test_costpercapita_cq63
  r = spreadsheet.costpercapita_cq63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.09586385406766,r[:number],0.001)
end

def test_costpercapita_cr63
  r = spreadsheet.costpercapita_cr63
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a64
  r = spreadsheet.costpercapita_a64
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b64
  r = spreadsheet.costpercapita_b64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c64
  r = spreadsheet.costpercapita_c64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e64
  r = spreadsheet.costpercapita_e64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f64
  r = spreadsheet.costpercapita_f64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.58800371742839,r[:number],0.001)
end

def test_costpercapita_g64
  r = spreadsheet.costpercapita_g64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.828089337099605,r[:number],0.001)
end

def test_costpercapita_h64
  r = spreadsheet.costpercapita_h64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.30154839297249,r[:number],0.001)
end

def test_costpercapita_i64
  r = spreadsheet.costpercapita_i64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.01208273712489,r[:number],0.001)
end

def test_costpercapita_j64
  r = spreadsheet.costpercapita_j64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.35813434130287,r[:number],0.001)
end

def test_costpercapita_k64
  r = spreadsheet.costpercapita_k64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.70230890797595,r[:number],0.001)
end

def test_costpercapita_l64
  r = spreadsheet.costpercapita_l64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.2598394306043,r[:number],0.001)
end

def test_costpercapita_m64
  r = spreadsheet.costpercapita_m64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324.89623650145876,r[:number],0.001)
end

def test_costpercapita_o64
  r = spreadsheet.costpercapita_o64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.373661348308897,r[:number],0.001)
end

def test_costpercapita_p64
  r = spreadsheet.costpercapita_p64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.115305537935974,r[:number],0.001)
end

def test_costpercapita_q64
  r = spreadsheet.costpercapita_q64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.327832423842715,r[:number],0.001)
end

def test_costpercapita_r64
  r = spreadsheet.costpercapita_r64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.44942716526163,r[:number],0.001)
end

def test_costpercapita_s64
  r = spreadsheet.costpercapita_s64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.82996318745523,r[:number],0.001)
end

def test_costpercapita_t64
  r = spreadsheet.costpercapita_t64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.85314013155228,r[:number],0.001)
end

def test_costpercapita_u64
  r = spreadsheet.costpercapita_u64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.8674949946963,r[:number],0.001)
end

def test_costpercapita_v64
  r = spreadsheet.costpercapita_v64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.5482423072312,r[:number],0.001)
end

def test_costpercapita_w64
  r = spreadsheet.costpercapita_w64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.74808855318976,r[:number],0.001)
end

def test_costpercapita_y64
  r = spreadsheet.costpercapita_y64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z64
  r = spreadsheet.costpercapita_z64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa64
  r = spreadsheet.costpercapita_aa64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab64
  r = spreadsheet.costpercapita_ab64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac64
  r = spreadsheet.costpercapita_ac64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad64
  r = spreadsheet.costpercapita_ad64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae64
  r = spreadsheet.costpercapita_ae64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af64
  r = spreadsheet.costpercapita_af64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag64
  r = spreadsheet.costpercapita_ag64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai64
  r = spreadsheet.costpercapita_ai64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.373661348308897,r[:number],0.001)
end

def test_costpercapita_aj64
  r = spreadsheet.costpercapita_aj64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.70330925536437,r[:number],0.001)
end

def test_costpercapita_ak64
  r = spreadsheet.costpercapita_ak64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.15592176094232,r[:number],0.001)
end

def test_costpercapita_al64
  r = spreadsheet.costpercapita_al64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.75097555823413,r[:number],0.001)
end

def test_costpercapita_am64
  r = spreadsheet.costpercapita_am64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.8420459245801,r[:number],0.001)
end

def test_costpercapita_an64
  r = spreadsheet.costpercapita_an64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.21127447285514,r[:number],0.001)
end

def test_costpercapita_ao64
  r = spreadsheet.costpercapita_ao64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(331.5698039026723,r[:number],0.001)
end

def test_costpercapita_ap64
  r = spreadsheet.costpercapita_ap64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.8080817378355,r[:number],0.001)
end

def test_costpercapita_aq64
  r = spreadsheet.costpercapita_aq64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(428.6443250546485,r[:number],0.001)
end

def test_costpercapita_as64
  r = spreadsheet.costpercapita_as64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.8954887794935,r[:number],0.001)
end

def test_costpercapita_at64
  r = spreadsheet.costpercapita_at64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3515.476527173061,r[:number],0.001)
end

def test_costpercapita_av64
  r = spreadsheet.costpercapita_av64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw64
  r = spreadsheet.costpercapita_aw64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay64
  r = spreadsheet.costpercapita_ay64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az64
  r = spreadsheet.costpercapita_az64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.81015877119623,r[:number],0.001)
end

def test_costpercapita_ba64
  r = spreadsheet.costpercapita_ba64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.74606682971565,r[:number],0.001)
end

def test_costpercapita_bb64
  r = spreadsheet.costpercapita_bb64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.7508487439951,r[:number],0.001)
end

def test_costpercapita_bc64
  r = spreadsheet.costpercapita_bc64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.434751743292225,r[:number],0.001)
end

def test_costpercapita_bd64
  r = spreadsheet.costpercapita_bd64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.01650976137201,r[:number],0.001)
end

def test_costpercapita_be64
  r = spreadsheet.costpercapita_be64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.17780271464017,r[:number],0.001)
end

def test_costpercapita_bf64
  r = spreadsheet.costpercapita_bf64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.2856087918334,r[:number],0.001)
end

def test_costpercapita_bg64
  r = spreadsheet.costpercapita_bg64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.35930176723565,r[:number],0.001)
end

def test_costpercapita_bi64
  r = spreadsheet.costpercapita_bi64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj64
  r = spreadsheet.costpercapita_bj64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.81015877119623,r[:number],0.001)
end

def test_costpercapita_bk64
  r = spreadsheet.costpercapita_bk64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.4493435364162,r[:number],0.001)
end

def test_costpercapita_bl64
  r = spreadsheet.costpercapita_bl64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.20461665905279,r[:number],0.001)
end

def test_costpercapita_bm64
  r = spreadsheet.costpercapita_bm64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.1588477153086,r[:number],0.001)
end

def test_costpercapita_bn64
  r = spreadsheet.costpercapita_bn64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55113774001339,r[:number],0.001)
end

def test_costpercapita_bo64
  r = spreadsheet.costpercapita_bo64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217.00595383422865,r[:number],0.001)
end

def test_costpercapita_bp64
  r = spreadsheet.costpercapita_bp64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(340.9663839046724,r[:number],0.001)
end

def test_costpercapita_bq64
  r = spreadsheet.costpercapita_bq64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.4732991462079,r[:number],0.001)
end

def test_costpercapita_bs64
  r = spreadsheet.costpercapita_bs64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.373661348308897,r[:number],0.001)
end

def test_costpercapita_bt64
  r = spreadsheet.costpercapita_bt64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.92546430913221,r[:number],0.001)
end

def test_costpercapita_bu64
  r = spreadsheet.costpercapita_bu64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.77717596025892,r[:number],0.001)
end

def test_costpercapita_bv64
  r = spreadsheet.costpercapita_bv64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.65404382431444,r[:number],0.001)
end

def test_costpercapita_bw64
  r = spreadsheet.costpercapita_bw64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.98881090276384,r[:number],0.001)
end

def test_costpercapita_bx64
  r = spreadsheet.costpercapita_bx64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.40427787156568,r[:number],0.001)
end

def test_costpercapita_by64
  r = spreadsheet.costpercapita_by64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.87344882892495,r[:number],0.001)
end

def test_costpercapita_bz64
  r = spreadsheet.costpercapita_bz64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.5146262119036,r[:number],0.001)
end

def test_costpercapita_ca64
  r = spreadsheet.costpercapita_ca64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(576.2213876993976,r[:number],0.001)
end

def test_costpercapita_cc64
  r = spreadsheet.costpercapita_cc64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.97032188406334,r[:number],0.001)
end

def test_costpercapita_cd64
  r = spreadsheet.costpercapita_cd64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3876.322813167948,r[:number],0.001)
end

def test_costpercapita_cf64
  r = spreadsheet.costpercapita_cf64
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg64
  r = spreadsheet.costpercapita_cg64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-27.77784494623216,r[:number],0.001)
end

def test_costpercapita_ch64
  r = spreadsheet.costpercapita_ch64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.621254199316592,r[:number],0.001)
end

def test_costpercapita_ci64
  r = spreadsheet.costpercapita_ci64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.90306826608029,r[:number],0.001)
end

def test_costpercapita_cj64
  r = spreadsheet.costpercapita_cj64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.14676497818372,r[:number],0.001)
end

def test_costpercapita_ck64
  r = spreadsheet.costpercapita_ck64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.193003398710516,r[:number],0.001)
end

def test_costpercapita_cl64
  r = spreadsheet.costpercapita_cl64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-34.696355073747284,r[:number],0.001)
end

def test_costpercapita_cm64
  r = spreadsheet.costpercapita_cm64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.70654447406811,r[:number],0.001)
end

def test_costpercapita_cn64
  r = spreadsheet.costpercapita_cn64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.57706264474916,r[:number],0.001)
end

def test_costpercapita_cp64
  r = spreadsheet.costpercapita_cp64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.074833104569883,r[:number],0.001)
end

def test_costpercapita_cq64
  r = spreadsheet.costpercapita_cq64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(360.84628599488667,r[:number],0.001)
end

def test_costpercapita_cr64
  r = spreadsheet.costpercapita_cr64
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a65
  r = spreadsheet.costpercapita_a65
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b65
  r = spreadsheet.costpercapita_b65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar PV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c65
  r = spreadsheet.costpercapita_c65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e65
  r = spreadsheet.costpercapita_e65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.7734212457606,r[:number],0.001)
end

def test_costpercapita_f65
  r = spreadsheet.costpercapita_f65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g65
  r = spreadsheet.costpercapita_g65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1648.2890541754512,r[:number],0.001)
end

def test_costpercapita_h65
  r = spreadsheet.costpercapita_h65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(401.64751083622906,r[:number],0.001)
end

def test_costpercapita_i65
  r = spreadsheet.costpercapita_i65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.1309811824606,r[:number],0.001)
end

def test_costpercapita_j65
  r = spreadsheet.costpercapita_j65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.51617243920234,r[:number],0.001)
end

def test_costpercapita_k65
  r = spreadsheet.costpercapita_k65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.849519025231867,r[:number],0.001)
end

def test_costpercapita_l65
  r = spreadsheet.costpercapita_l65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15.14635305739067,r[:number],0.001)
end

def test_costpercapita_m65
  r = spreadsheet.costpercapita_m65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.33987854411563,r[:number],0.001)
end

def test_costpercapita_o65
  r = spreadsheet.costpercapita_o65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p65
  r = spreadsheet.costpercapita_p65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q65
  r = spreadsheet.costpercapita_q65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r65
  r = spreadsheet.costpercapita_r65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s65
  r = spreadsheet.costpercapita_s65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t65
  r = spreadsheet.costpercapita_t65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u65
  r = spreadsheet.costpercapita_u65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v65
  r = spreadsheet.costpercapita_v65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w65
  r = spreadsheet.costpercapita_w65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y65
  r = spreadsheet.costpercapita_y65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z65
  r = spreadsheet.costpercapita_z65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa65
  r = spreadsheet.costpercapita_aa65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab65
  r = spreadsheet.costpercapita_ab65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac65
  r = spreadsheet.costpercapita_ac65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad65
  r = spreadsheet.costpercapita_ad65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae65
  r = spreadsheet.costpercapita_ae65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af65
  r = spreadsheet.costpercapita_af65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag65
  r = spreadsheet.costpercapita_ag65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai65
  r = spreadsheet.costpercapita_ai65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.7734212457606,r[:number],0.001)
end

def test_costpercapita_aj65
  r = spreadsheet.costpercapita_aj65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak65
  r = spreadsheet.costpercapita_ak65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1648.2890541754512,r[:number],0.001)
end

def test_costpercapita_al65
  r = spreadsheet.costpercapita_al65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(401.64751083622906,r[:number],0.001)
end

def test_costpercapita_am65
  r = spreadsheet.costpercapita_am65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.1309811824606,r[:number],0.001)
end

def test_costpercapita_an65
  r = spreadsheet.costpercapita_an65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.51617243920234,r[:number],0.001)
end

def test_costpercapita_ao65
  r = spreadsheet.costpercapita_ao65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.849519025231867,r[:number],0.001)
end

def test_costpercapita_ap65
  r = spreadsheet.costpercapita_ap65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15.14635305739067,r[:number],0.001)
end

def test_costpercapita_aq65
  r = spreadsheet.costpercapita_aq65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.33987854411563,r[:number],0.001)
end

def test_costpercapita_as65
  r = spreadsheet.costpercapita_as65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.2666871545623,r[:number],0.001)
end

def test_costpercapita_at65
  r = spreadsheet.costpercapita_at65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8661.007895095214,r[:number],0.001)
end

def test_costpercapita_av65
  r = spreadsheet.costpercapita_av65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw65
  r = spreadsheet.costpercapita_aw65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay65
  r = spreadsheet.costpercapita_ay65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.29977016723691,r[:number],0.001)
end

def test_costpercapita_az65
  r = spreadsheet.costpercapita_az65
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba65
  r = spreadsheet.costpercapita_ba65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(904.8663905098537,r[:number],0.001)
end

def test_costpercapita_bb65
  r = spreadsheet.costpercapita_bb65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(220.49368857178612,r[:number],0.001)
end

def test_costpercapita_bc65
  r = spreadsheet.costpercapita_bc65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.92103033583035,r[:number],0.001)
end

def test_costpercapita_bd65
  r = spreadsheet.costpercapita_bd65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.61116649331501,r[:number],0.001)
end

def test_costpercapita_be65
  r = spreadsheet.costpercapita_be65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.190691200384308,r[:number],0.001)
end

def test_costpercapita_bf65
  r = spreadsheet.costpercapita_bf65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-8.314940747625759,r[:number],0.001)
end

def test_costpercapita_bg65
  r = spreadsheet.costpercapita_bg65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.300326560398254,r[:number],0.001)
end

def test_costpercapita_bi65
  r = spreadsheet.costpercapita_bi65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.29977016723691,r[:number],0.001)
end

def test_costpercapita_bj65
  r = spreadsheet.costpercapita_bj65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.91494893729265,r[:number],0.001)
end

def test_costpercapita_bk65
  r = spreadsheet.costpercapita_bk65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1057.6114960909729,r[:number],0.001)
end

def test_costpercapita_bl65
  r = spreadsheet.costpercapita_bl65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1097.3422714453552,r[:number],0.001)
end

def test_costpercapita_bm65
  r = spreadsheet.costpercapita_bm65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1228.2837429261533,r[:number],0.001)
end

def test_costpercapita_bn65
  r = spreadsheet.costpercapita_bn65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(432.1593726324581,r[:number],0.001)
end

def test_costpercapita_bo65
  r = spreadsheet.costpercapita_bo65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.18200800439223,r[:number],0.001)
end

def test_costpercapita_bp65
  r = spreadsheet.costpercapita_bp65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.52369848139655,r[:number],0.001)
end

def test_costpercapita_bq65
  r = spreadsheet.costpercapita_bq65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.788633132873905,r[:number],0.001)
end

def test_costpercapita_bs65
  r = spreadsheet.costpercapita_bs65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.29977016723691,r[:number],0.001)
end

def test_costpercapita_bt65
  r = spreadsheet.costpercapita_bt65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.91494893729265,r[:number],0.001)
end

def test_costpercapita_bu65
  r = spreadsheet.costpercapita_bu65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1057.6114960909729,r[:number],0.001)
end

def test_costpercapita_bv65
  r = spreadsheet.costpercapita_bv65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1097.3422714453552,r[:number],0.001)
end

def test_costpercapita_bw65
  r = spreadsheet.costpercapita_bw65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1228.2837429261533,r[:number],0.001)
end

def test_costpercapita_bx65
  r = spreadsheet.costpercapita_bx65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(432.1593726324581,r[:number],0.001)
end

def test_costpercapita_by65
  r = spreadsheet.costpercapita_by65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.18200800439223,r[:number],0.001)
end

def test_costpercapita_bz65
  r = spreadsheet.costpercapita_bz65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.52369848139655,r[:number],0.001)
end

def test_costpercapita_ca65
  r = spreadsheet.costpercapita_ca65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.788633132873905,r[:number],0.001)
end

def test_costpercapita_cc65
  r = spreadsheet.costpercapita_cc65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498.78954909090356,r[:number],0.001)
end

def test_costpercapita_cd65
  r = spreadsheet.costpercapita_cd65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12440.22347298407,r[:number],0.001)
end

def test_costpercapita_cf65
  r = spreadsheet.costpercapita_cf65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-332.47365107852363,r[:number],0.001)
end

def test_costpercapita_cg65
  r = spreadsheet.costpercapita_cg65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.91494893729265,r[:number],0.001)
end

def test_costpercapita_ch65
  r = spreadsheet.costpercapita_ch65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-590.6775580844783,r[:number],0.001)
end

def test_costpercapita_ci65
  r = spreadsheet.costpercapita_ci65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(695.6947606091262,r[:number],0.001)
end

def test_costpercapita_cj65
  r = spreadsheet.costpercapita_cj65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(935.1527617436927,r[:number],0.001)
end

def test_costpercapita_ck65
  r = spreadsheet.costpercapita_ck65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.6432001932558,r[:number],0.001)
end

def test_costpercapita_cl65
  r = spreadsheet.costpercapita_cl65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.33248897916036,r[:number],0.001)
end

def test_costpercapita_cm65
  r = spreadsheet.costpercapita_cm65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.67005153878722,r[:number],0.001)
end

def test_costpercapita_cn65
  r = spreadsheet.costpercapita_cn65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-32.55124541124174,r[:number],0.001)
end

def test_costpercapita_cp65
  r = spreadsheet.costpercapita_cp65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.52286193634126,r[:number],0.001)
end

def test_costpercapita_cq65
  r = spreadsheet.costpercapita_cq65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3779.215577888855,r[:number],0.001)
end

def test_costpercapita_cr65
  r = spreadsheet.costpercapita_cr65
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a66
  r = spreadsheet.costpercapita_a66
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b66
  r = spreadsheet.costpercapita_b66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar thermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c66
  r = spreadsheet.costpercapita_c66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e66
  r = spreadsheet.costpercapita_e66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(226.82532386155611,r[:number],0.001)
end

def test_costpercapita_f66
  r = spreadsheet.costpercapita_f66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.68100174169487,r[:number],0.001)
end

def test_costpercapita_g66
  r = spreadsheet.costpercapita_g66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.59792024287574,r[:number],0.001)
end

def test_costpercapita_h66
  r = spreadsheet.costpercapita_h66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.18868242506306,r[:number],0.001)
end

def test_costpercapita_i66
  r = spreadsheet.costpercapita_i66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306.25930990786554,r[:number],0.001)
end

def test_costpercapita_j66
  r = spreadsheet.costpercapita_j66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.3623833803929,r[:number],0.001)
end

def test_costpercapita_k66
  r = spreadsheet.costpercapita_k66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.57885376988557,r[:number],0.001)
end

def test_costpercapita_l66
  r = spreadsheet.costpercapita_l66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.83362541621318,r[:number],0.001)
end

def test_costpercapita_m66
  r = spreadsheet.costpercapita_m66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.37579978846752,r[:number],0.001)
end

def test_costpercapita_o66
  r = spreadsheet.costpercapita_o66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p66
  r = spreadsheet.costpercapita_p66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q66
  r = spreadsheet.costpercapita_q66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r66
  r = spreadsheet.costpercapita_r66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s66
  r = spreadsheet.costpercapita_s66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t66
  r = spreadsheet.costpercapita_t66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u66
  r = spreadsheet.costpercapita_u66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v66
  r = spreadsheet.costpercapita_v66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w66
  r = spreadsheet.costpercapita_w66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y66
  r = spreadsheet.costpercapita_y66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z66
  r = spreadsheet.costpercapita_z66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa66
  r = spreadsheet.costpercapita_aa66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab66
  r = spreadsheet.costpercapita_ab66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac66
  r = spreadsheet.costpercapita_ac66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad66
  r = spreadsheet.costpercapita_ad66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae66
  r = spreadsheet.costpercapita_ae66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af66
  r = spreadsheet.costpercapita_af66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag66
  r = spreadsheet.costpercapita_ag66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai66
  r = spreadsheet.costpercapita_ai66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(226.82532386155611,r[:number],0.001)
end

def test_costpercapita_aj66
  r = spreadsheet.costpercapita_aj66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.68100174169487,r[:number],0.001)
end

def test_costpercapita_ak66
  r = spreadsheet.costpercapita_ak66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.59792024287574,r[:number],0.001)
end

def test_costpercapita_al66
  r = spreadsheet.costpercapita_al66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.18868242506306,r[:number],0.001)
end

def test_costpercapita_am66
  r = spreadsheet.costpercapita_am66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306.25930990786554,r[:number],0.001)
end

def test_costpercapita_an66
  r = spreadsheet.costpercapita_an66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.3623833803929,r[:number],0.001)
end

def test_costpercapita_ao66
  r = spreadsheet.costpercapita_ao66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.57885376988557,r[:number],0.001)
end

def test_costpercapita_ap66
  r = spreadsheet.costpercapita_ap66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.83362541621318,r[:number],0.001)
end

def test_costpercapita_aq66
  r = spreadsheet.costpercapita_aq66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.37579978846752,r[:number],0.001)
end

def test_costpercapita_as66
  r = spreadsheet.costpercapita_as66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.96698894822384,r[:number],0.001)
end

def test_costpercapita_at66
  r = spreadsheet.costpercapita_at66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4321.948384833013,r[:number],0.001)
end

def test_costpercapita_av66
  r = spreadsheet.costpercapita_av66
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw66
  r = spreadsheet.costpercapita_aw66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay66
  r = spreadsheet.costpercapita_ay66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.71260391819146,r[:number],0.001)
end

def test_costpercapita_az66
  r = spreadsheet.costpercapita_az66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.46231509528734,r[:number],0.001)
end

def test_costpercapita_ba66
  r = spreadsheet.costpercapita_ba66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.33929686826441,r[:number],0.001)
end

def test_costpercapita_bb66
  r = spreadsheet.costpercapita_bb66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.93928134104262,r[:number],0.001)
end

def test_costpercapita_bc66
  r = spreadsheet.costpercapita_bc66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.12812996261675,r[:number],0.001)
end

def test_costpercapita_bd66
  r = spreadsheet.costpercapita_bd66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.02989709455915,r[:number],0.001)
end

def test_costpercapita_be66
  r = spreadsheet.costpercapita_be66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.79802359218372,r[:number],0.001)
end

def test_costpercapita_bf66
  r = spreadsheet.costpercapita_bf66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.842310832882,r[:number],0.001)
end

def test_costpercapita_bg66
  r = spreadsheet.costpercapita_bg66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.75053570470592,r[:number],0.001)
end

def test_costpercapita_bi66
  r = spreadsheet.costpercapita_bi66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.71260391819146,r[:number],0.001)
end

def test_costpercapita_bj66
  r = spreadsheet.costpercapita_bj66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.71126572535061,r[:number],0.001)
end

def test_costpercapita_bk66
  r = spreadsheet.costpercapita_bk66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(280.97071923655557,r[:number],0.001)
end

def test_costpercapita_bl66
  r = spreadsheet.costpercapita_bl66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.4903579361055,r[:number],0.001)
end

def test_costpercapita_bm66
  r = spreadsheet.costpercapita_bm66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.1834973117043,r[:number],0.001)
end

def test_costpercapita_bn66
  r = spreadsheet.costpercapita_bn66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.719540623535,r[:number],0.001)
end

def test_costpercapita_bo66
  r = spreadsheet.costpercapita_bo66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.42293339166287,r[:number],0.001)
end

def test_costpercapita_bp66
  r = spreadsheet.costpercapita_bp66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.43694327075997,r[:number],0.001)
end

def test_costpercapita_bq66
  r = spreadsheet.costpercapita_bq66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.2286285726385,r[:number],0.001)
end

def test_costpercapita_bs66
  r = spreadsheet.costpercapita_bs66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.71260391819146,r[:number],0.001)
end

def test_costpercapita_bt66
  r = spreadsheet.costpercapita_bt66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.71126572535061,r[:number],0.001)
end

def test_costpercapita_bu66
  r = spreadsheet.costpercapita_bu66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(280.97071923655557,r[:number],0.001)
end

def test_costpercapita_bv66
  r = spreadsheet.costpercapita_bv66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.4903579361055,r[:number],0.001)
end

def test_costpercapita_bw66
  r = spreadsheet.costpercapita_bw66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.1834973117043,r[:number],0.001)
end

def test_costpercapita_bx66
  r = spreadsheet.costpercapita_bx66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.719540623535,r[:number],0.001)
end

def test_costpercapita_by66
  r = spreadsheet.costpercapita_by66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.42293339166287,r[:number],0.001)
end

def test_costpercapita_bz66
  r = spreadsheet.costpercapita_bz66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.43694327075997,r[:number],0.001)
end

def test_costpercapita_ca66
  r = spreadsheet.costpercapita_ca66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.2286285726385,r[:number],0.001)
end

def test_costpercapita_cc66
  r = spreadsheet.costpercapita_cc66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(288.20849888738934,r[:number],0.001)
end

def test_costpercapita_cd66
  r = spreadsheet.costpercapita_cd66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6045.919264930677,r[:number],0.001)
end

def test_costpercapita_cf66
  r = spreadsheet.costpercapita_cf66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-152.11271994336468,r[:number],0.001)
end

def test_costpercapita_cg66
  r = spreadsheet.costpercapita_cg66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-20.96973601634426,r[:number],0.001)
end

def test_costpercapita_ch66
  r = spreadsheet.costpercapita_ch66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.37279899367981,r[:number],0.001)
end

def test_costpercapita_ci66
  r = spreadsheet.costpercapita_ci66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.30167551104248,r[:number],0.001)
end

def test_costpercapita_cj66
  r = spreadsheet.costpercapita_cj66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.92418740383872,r[:number],0.001)
end

def test_costpercapita_ck66
  r = spreadsheet.costpercapita_ck66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.35715724314213,r[:number],0.001)
end

def test_costpercapita_cl66
  r = spreadsheet.costpercapita_cl66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.84407962177733,r[:number],0.001)
end

def test_costpercapita_cm66
  r = spreadsheet.costpercapita_cm66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.60331785454682,r[:number],0.001)
end

def test_costpercapita_cn66
  r = spreadsheet.costpercapita_cn66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.852828784171,r[:number],0.001)
end

def test_costpercapita_cp66
  r = spreadsheet.costpercapita_cp66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.2415099391655,r[:number],0.001)
end

def test_costpercapita_cq66
  r = spreadsheet.costpercapita_cq66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1723.9708800976648,r[:number],0.001)
end

def test_costpercapita_cr66
  r = spreadsheet.costpercapita_cr66
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a67
  r = spreadsheet.costpercapita_a67
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b67
  r = spreadsheet.costpercapita_b67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c67
  r = spreadsheet.costpercapita_c67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e67
  r = spreadsheet.costpercapita_e67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f67
  r = spreadsheet.costpercapita_f67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g67
  r = spreadsheet.costpercapita_g67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h67
  r = spreadsheet.costpercapita_h67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i67
  r = spreadsheet.costpercapita_i67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j67
  r = spreadsheet.costpercapita_j67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k67
  r = spreadsheet.costpercapita_k67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l67
  r = spreadsheet.costpercapita_l67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m67
  r = spreadsheet.costpercapita_m67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o67
  r = spreadsheet.costpercapita_o67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p67
  r = spreadsheet.costpercapita_p67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q67
  r = spreadsheet.costpercapita_q67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r67
  r = spreadsheet.costpercapita_r67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s67
  r = spreadsheet.costpercapita_s67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t67
  r = spreadsheet.costpercapita_t67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u67
  r = spreadsheet.costpercapita_u67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v67
  r = spreadsheet.costpercapita_v67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w67
  r = spreadsheet.costpercapita_w67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y67
  r = spreadsheet.costpercapita_y67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z67
  r = spreadsheet.costpercapita_z67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa67
  r = spreadsheet.costpercapita_aa67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab67
  r = spreadsheet.costpercapita_ab67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac67
  r = spreadsheet.costpercapita_ac67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad67
  r = spreadsheet.costpercapita_ad67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae67
  r = spreadsheet.costpercapita_ae67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af67
  r = spreadsheet.costpercapita_af67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag67
  r = spreadsheet.costpercapita_ag67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai67
  r = spreadsheet.costpercapita_ai67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj67
  r = spreadsheet.costpercapita_aj67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak67
  r = spreadsheet.costpercapita_ak67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al67
  r = spreadsheet.costpercapita_al67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am67
  r = spreadsheet.costpercapita_am67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an67
  r = spreadsheet.costpercapita_an67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao67
  r = spreadsheet.costpercapita_ao67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap67
  r = spreadsheet.costpercapita_ap67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq67
  r = spreadsheet.costpercapita_aq67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as67
  r = spreadsheet.costpercapita_as67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at67
  r = spreadsheet.costpercapita_at67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av67
  r = spreadsheet.costpercapita_av67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw67
  r = spreadsheet.costpercapita_aw67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay67
  r = spreadsheet.costpercapita_ay67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az67
  r = spreadsheet.costpercapita_az67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba67
  r = spreadsheet.costpercapita_ba67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb67
  r = spreadsheet.costpercapita_bb67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc67
  r = spreadsheet.costpercapita_bc67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd67
  r = spreadsheet.costpercapita_bd67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be67
  r = spreadsheet.costpercapita_be67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf67
  r = spreadsheet.costpercapita_bf67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg67
  r = spreadsheet.costpercapita_bg67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi67
  r = spreadsheet.costpercapita_bi67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj67
  r = spreadsheet.costpercapita_bj67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk67
  r = spreadsheet.costpercapita_bk67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl67
  r = spreadsheet.costpercapita_bl67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm67
  r = spreadsheet.costpercapita_bm67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn67
  r = spreadsheet.costpercapita_bn67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo67
  r = spreadsheet.costpercapita_bo67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp67
  r = spreadsheet.costpercapita_bp67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq67
  r = spreadsheet.costpercapita_bq67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs67
  r = spreadsheet.costpercapita_bs67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt67
  r = spreadsheet.costpercapita_bt67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu67
  r = spreadsheet.costpercapita_bu67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv67
  r = spreadsheet.costpercapita_bv67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw67
  r = spreadsheet.costpercapita_bw67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx67
  r = spreadsheet.costpercapita_bx67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by67
  r = spreadsheet.costpercapita_by67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz67
  r = spreadsheet.costpercapita_bz67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca67
  r = spreadsheet.costpercapita_ca67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc67
  r = spreadsheet.costpercapita_cc67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd67
  r = spreadsheet.costpercapita_cd67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf67
  r = spreadsheet.costpercapita_cf67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg67
  r = spreadsheet.costpercapita_cg67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch67
  r = spreadsheet.costpercapita_ch67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci67
  r = spreadsheet.costpercapita_ci67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj67
  r = spreadsheet.costpercapita_cj67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck67
  r = spreadsheet.costpercapita_ck67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl67
  r = spreadsheet.costpercapita_cl67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm67
  r = spreadsheet.costpercapita_cm67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn67
  r = spreadsheet.costpercapita_cn67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp67
  r = spreadsheet.costpercapita_cp67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq67
  r = spreadsheet.costpercapita_cq67
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr67
  r = spreadsheet.costpercapita_cr67
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a68
  r = spreadsheet.costpercapita_a68
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b68
  r = spreadsheet.costpercapita_b68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomatter to fuel conversion",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c68
  r = spreadsheet.costpercapita_c68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e68
  r = spreadsheet.costpercapita_e68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.94640851678822,r[:number],0.001)
end

def test_costpercapita_f68
  r = spreadsheet.costpercapita_f68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.82674363505862,r[:number],0.001)
end

def test_costpercapita_g68
  r = spreadsheet.costpercapita_g68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.49579167088834,r[:number],0.001)
end

def test_costpercapita_h68
  r = spreadsheet.costpercapita_h68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.60613401916838,r[:number],0.001)
end

def test_costpercapita_i68
  r = spreadsheet.costpercapita_i68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.12853780707886,r[:number],0.001)
end

def test_costpercapita_j68
  r = spreadsheet.costpercapita_j68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.07852658579111,r[:number],0.001)
end

def test_costpercapita_k68
  r = spreadsheet.costpercapita_k68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.28947949022111,r[:number],0.001)
end

def test_costpercapita_l68
  r = spreadsheet.costpercapita_l68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.87927490558799,r[:number],0.001)
end

def test_costpercapita_m68
  r = spreadsheet.costpercapita_m68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.78101577128317,r[:number],0.001)
end

def test_costpercapita_o68
  r = spreadsheet.costpercapita_o68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(725.8735131040039,r[:number],0.001)
end

def test_costpercapita_p68
  r = spreadsheet.costpercapita_p68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.1852895348138,r[:number],0.001)
end

def test_costpercapita_q68
  r = spreadsheet.costpercapita_q68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(680.6096300760042,r[:number],0.001)
end

def test_costpercapita_r68
  r = spreadsheet.costpercapita_r68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(707.9468782423887,r[:number],0.001)
end

def test_costpercapita_s68
  r = spreadsheet.costpercapita_s68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(690.8282850791077,r[:number],0.001)
end

def test_costpercapita_t68
  r = spreadsheet.costpercapita_t68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(676.7256126157876,r[:number],0.001)
end

def test_costpercapita_u68
  r = spreadsheet.costpercapita_u68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(664.4174853066219,r[:number],0.001)
end

def test_costpercapita_v68
  r = spreadsheet.costpercapita_v68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(655.3269657240465,r[:number],0.001)
end

def test_costpercapita_w68
  r = spreadsheet.costpercapita_w68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.1565149482404,r[:number],0.001)
end

def test_costpercapita_y68
  r = spreadsheet.costpercapita_y68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z68
  r = spreadsheet.costpercapita_z68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa68
  r = spreadsheet.costpercapita_aa68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab68
  r = spreadsheet.costpercapita_ab68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac68
  r = spreadsheet.costpercapita_ac68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad68
  r = spreadsheet.costpercapita_ad68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae68
  r = spreadsheet.costpercapita_ae68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af68
  r = spreadsheet.costpercapita_af68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag68
  r = spreadsheet.costpercapita_ag68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai68
  r = spreadsheet.costpercapita_ai68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(823.8199216207921,r[:number],0.001)
end

def test_costpercapita_aj68
  r = spreadsheet.costpercapita_aj68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(797.0120331698724,r[:number],0.001)
end

def test_costpercapita_ak68
  r = spreadsheet.costpercapita_ak68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.1054217468926,r[:number],0.001)
end

def test_costpercapita_al68
  r = spreadsheet.costpercapita_al68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(807.5530122615571,r[:number],0.001)
end

def test_costpercapita_am68
  r = spreadsheet.costpercapita_am68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(787.9568228861865,r[:number],0.001)
end

def test_costpercapita_an68
  r = spreadsheet.costpercapita_an68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.8041392015787,r[:number],0.001)
end

def test_costpercapita_ao68
  r = spreadsheet.costpercapita_ao68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(762.706964796843,r[:number],0.001)
end

def test_costpercapita_ap68
  r = spreadsheet.costpercapita_ap68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(747.2062406296346,r[:number],0.001)
end

def test_costpercapita_aq68
  r = spreadsheet.costpercapita_aq68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.9375307195236,r[:number],0.001)
end

def test_costpercapita_as68
  r = spreadsheet.costpercapita_as68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(785.0113430036532,r[:number],0.001)
end

def test_costpercapita_at68
  r = spreadsheet.costpercapita_at68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16639.35199430221,r[:number],0.001)
end

def test_costpercapita_av68
  r = spreadsheet.costpercapita_av68
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw68
  r = spreadsheet.costpercapita_aw68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay68
  r = spreadsheet.costpercapita_ay68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.2619674917367,r[:number],0.001)
end

def test_costpercapita_az68
  r = spreadsheet.costpercapita_az68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.057333645149114,r[:number],0.001)
end

def test_costpercapita_ba68
  r = spreadsheet.costpercapita_ba68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.81403732195038,r[:number],0.001)
end

def test_costpercapita_bb68
  r = spreadsheet.costpercapita_bb68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.68109051276377,r[:number],0.001)
end

def test_costpercapita_bc68
  r = spreadsheet.costpercapita_bc68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.32095678142874,r[:number],0.001)
end

def test_costpercapita_bd68
  r = spreadsheet.costpercapita_bd68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.19555571805804,r[:number],0.001)
end

def test_costpercapita_be68
  r = spreadsheet.costpercapita_be68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.958282563430544,r[:number],0.001)
end

def test_costpercapita_bf68
  r = spreadsheet.costpercapita_bf68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.439252530298205,r[:number],0.001)
end

def test_costpercapita_bg68
  r = spreadsheet.costpercapita_bg68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.09147216539579,r[:number],0.001)
end

def test_costpercapita_bi68
  r = spreadsheet.costpercapita_bi68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.2619674917367,r[:number],0.001)
end

def test_costpercapita_bj68
  r = spreadsheet.costpercapita_bj68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.25546052467085,r[:number],0.001)
end

def test_costpercapita_bk68
  r = spreadsheet.costpercapita_bk68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.3438680544123,r[:number],0.001)
end

def test_costpercapita_bl68
  r = spreadsheet.costpercapita_bl68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.6629572568203,r[:number],0.001)
end

def test_costpercapita_bm68
  r = spreadsheet.costpercapita_bm68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.45066553745878,r[:number],0.001)
end

def test_costpercapita_bn68
  r = spreadsheet.costpercapita_bn68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.19483362859947,r[:number],0.001)
end

def test_costpercapita_bo68
  r = spreadsheet.costpercapita_bo68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.9952831241799,r[:number],0.001)
end

def test_costpercapita_bp68
  r = spreadsheet.costpercapita_bp68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.38460427135453,r[:number],0.001)
end

def test_costpercapita_bq68
  r = spreadsheet.costpercapita_bq68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.48449897420156,r[:number],0.001)
end

def test_costpercapita_bs68
  r = spreadsheet.costpercapita_bs68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(758.1354805957407,r[:number],0.001)
end

def test_costpercapita_bt68
  r = spreadsheet.costpercapita_bt68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(785.4407500594847,r[:number],0.001)
end

def test_costpercapita_bu68
  r = spreadsheet.costpercapita_bu68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.9534981304165,r[:number],0.001)
end

def test_costpercapita_bv68
  r = spreadsheet.costpercapita_bv68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(893.609835499209,r[:number],0.001)
end

def test_costpercapita_bw68
  r = spreadsheet.costpercapita_bw68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(877.2789506165664,r[:number],0.001)
end

def test_costpercapita_bx68
  r = spreadsheet.costpercapita_bx68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.920446244387,r[:number],0.001)
end

def test_costpercapita_by68
  r = spreadsheet.costpercapita_by68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(820.4127684308019,r[:number],0.001)
end

def test_costpercapita_bz68
  r = spreadsheet.costpercapita_bz68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(808.7115699954011,r[:number],0.001)
end

def test_costpercapita_ca68
  r = spreadsheet.costpercapita_ca68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(794.641013922442,r[:number],0.001)
end

def test_costpercapita_cc68
  r = spreadsheet.costpercapita_cc68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(824.1227014993833,r[:number],0.001)
end

def test_costpercapita_cd68
  r = spreadsheet.costpercapita_cd68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17454.419150894188,r[:number],0.001)
end

def test_costpercapita_cf68
  r = spreadsheet.costpercapita_cf68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-65.68444102505151,r[:number],0.001)
end

def test_costpercapita_cg68
  r = spreadsheet.costpercapita_cg68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11.571283110387768,r[:number],0.001)
end

def test_costpercapita_ch68
  r = spreadsheet.costpercapita_ch68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.848076383523939,r[:number],0.001)
end

def test_costpercapita_ci68
  r = spreadsheet.costpercapita_ci68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.05682323765193,r[:number],0.001)
end

def test_costpercapita_cj68
  r = spreadsheet.costpercapita_cj68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.3221277303799,r[:number],0.001)
end

def test_costpercapita_ck68
  r = spreadsheet.costpercapita_ck68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.116307042808366,r[:number],0.001)
end

def test_costpercapita_cl68
  r = spreadsheet.costpercapita_cl68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.7058036339588,r[:number],0.001)
end

def test_costpercapita_cm68
  r = spreadsheet.costpercapita_cm68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.505329365766535,r[:number],0.001)
end

def test_costpercapita_cn68
  r = spreadsheet.costpercapita_cn68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.703483202918406,r[:number],0.001)
end

def test_costpercapita_cp68
  r = spreadsheet.costpercapita_cp68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.11135849572984,r[:number],0.001)
end

def test_costpercapita_cq68
  r = spreadsheet.costpercapita_cq68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(815.0671565919743,r[:number],0.001)
end

def test_costpercapita_cr68
  r = spreadsheet.costpercapita_cr68
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a69
  r = spreadsheet.costpercapita_a69
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b69
  r = spreadsheet.costpercapita_b69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c69
  r = spreadsheet.costpercapita_c69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e69
  r = spreadsheet.costpercapita_e69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f69
  r = spreadsheet.costpercapita_f69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g69
  r = spreadsheet.costpercapita_g69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h69
  r = spreadsheet.costpercapita_h69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i69
  r = spreadsheet.costpercapita_i69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j69
  r = spreadsheet.costpercapita_j69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k69
  r = spreadsheet.costpercapita_k69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l69
  r = spreadsheet.costpercapita_l69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m69
  r = spreadsheet.costpercapita_m69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o69
  r = spreadsheet.costpercapita_o69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p69
  r = spreadsheet.costpercapita_p69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q69
  r = spreadsheet.costpercapita_q69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r69
  r = spreadsheet.costpercapita_r69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s69
  r = spreadsheet.costpercapita_s69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t69
  r = spreadsheet.costpercapita_t69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u69
  r = spreadsheet.costpercapita_u69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v69
  r = spreadsheet.costpercapita_v69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w69
  r = spreadsheet.costpercapita_w69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y69
  r = spreadsheet.costpercapita_y69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z69
  r = spreadsheet.costpercapita_z69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa69
  r = spreadsheet.costpercapita_aa69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab69
  r = spreadsheet.costpercapita_ab69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac69
  r = spreadsheet.costpercapita_ac69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad69
  r = spreadsheet.costpercapita_ad69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae69
  r = spreadsheet.costpercapita_ae69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af69
  r = spreadsheet.costpercapita_af69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag69
  r = spreadsheet.costpercapita_ag69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai69
  r = spreadsheet.costpercapita_ai69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj69
  r = spreadsheet.costpercapita_aj69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak69
  r = spreadsheet.costpercapita_ak69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al69
  r = spreadsheet.costpercapita_al69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am69
  r = spreadsheet.costpercapita_am69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an69
  r = spreadsheet.costpercapita_an69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao69
  r = spreadsheet.costpercapita_ao69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap69
  r = spreadsheet.costpercapita_ap69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq69
  r = spreadsheet.costpercapita_aq69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as69
  r = spreadsheet.costpercapita_as69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at69
  r = spreadsheet.costpercapita_at69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av69
  r = spreadsheet.costpercapita_av69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw69
  r = spreadsheet.costpercapita_aw69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay69
  r = spreadsheet.costpercapita_ay69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az69
  r = spreadsheet.costpercapita_az69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba69
  r = spreadsheet.costpercapita_ba69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb69
  r = spreadsheet.costpercapita_bb69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc69
  r = spreadsheet.costpercapita_bc69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd69
  r = spreadsheet.costpercapita_bd69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be69
  r = spreadsheet.costpercapita_be69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf69
  r = spreadsheet.costpercapita_bf69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg69
  r = spreadsheet.costpercapita_bg69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi69
  r = spreadsheet.costpercapita_bi69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj69
  r = spreadsheet.costpercapita_bj69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk69
  r = spreadsheet.costpercapita_bk69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl69
  r = spreadsheet.costpercapita_bl69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm69
  r = spreadsheet.costpercapita_bm69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn69
  r = spreadsheet.costpercapita_bn69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo69
  r = spreadsheet.costpercapita_bo69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp69
  r = spreadsheet.costpercapita_bp69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq69
  r = spreadsheet.costpercapita_bq69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs69
  r = spreadsheet.costpercapita_bs69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt69
  r = spreadsheet.costpercapita_bt69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu69
  r = spreadsheet.costpercapita_bu69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv69
  r = spreadsheet.costpercapita_bv69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw69
  r = spreadsheet.costpercapita_bw69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx69
  r = spreadsheet.costpercapita_bx69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by69
  r = spreadsheet.costpercapita_by69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz69
  r = spreadsheet.costpercapita_bz69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca69
  r = spreadsheet.costpercapita_ca69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc69
  r = spreadsheet.costpercapita_cc69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd69
  r = spreadsheet.costpercapita_cd69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf69
  r = spreadsheet.costpercapita_cf69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg69
  r = spreadsheet.costpercapita_cg69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch69
  r = spreadsheet.costpercapita_ch69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci69
  r = spreadsheet.costpercapita_ci69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj69
  r = spreadsheet.costpercapita_cj69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck69
  r = spreadsheet.costpercapita_ck69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl69
  r = spreadsheet.costpercapita_cl69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm69
  r = spreadsheet.costpercapita_cm69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn69
  r = spreadsheet.costpercapita_cn69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp69
  r = spreadsheet.costpercapita_cp69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq69
  r = spreadsheet.costpercapita_cq69
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr69
  r = spreadsheet.costpercapita_cr69
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a70
  r = spreadsheet.costpercapita_a70
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b70
  r = spreadsheet.costpercapita_b70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c70
  r = spreadsheet.costpercapita_c70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e70
  r = spreadsheet.costpercapita_e70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f70
  r = spreadsheet.costpercapita_f70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g70
  r = spreadsheet.costpercapita_g70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h70
  r = spreadsheet.costpercapita_h70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i70
  r = spreadsheet.costpercapita_i70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j70
  r = spreadsheet.costpercapita_j70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k70
  r = spreadsheet.costpercapita_k70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l70
  r = spreadsheet.costpercapita_l70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m70
  r = spreadsheet.costpercapita_m70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o70
  r = spreadsheet.costpercapita_o70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p70
  r = spreadsheet.costpercapita_p70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q70
  r = spreadsheet.costpercapita_q70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r70
  r = spreadsheet.costpercapita_r70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s70
  r = spreadsheet.costpercapita_s70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t70
  r = spreadsheet.costpercapita_t70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u70
  r = spreadsheet.costpercapita_u70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v70
  r = spreadsheet.costpercapita_v70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w70
  r = spreadsheet.costpercapita_w70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y70
  r = spreadsheet.costpercapita_y70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z70
  r = spreadsheet.costpercapita_z70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa70
  r = spreadsheet.costpercapita_aa70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab70
  r = spreadsheet.costpercapita_ab70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac70
  r = spreadsheet.costpercapita_ac70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad70
  r = spreadsheet.costpercapita_ad70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae70
  r = spreadsheet.costpercapita_ae70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af70
  r = spreadsheet.costpercapita_af70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag70
  r = spreadsheet.costpercapita_ag70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai70
  r = spreadsheet.costpercapita_ai70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj70
  r = spreadsheet.costpercapita_aj70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak70
  r = spreadsheet.costpercapita_ak70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al70
  r = spreadsheet.costpercapita_al70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am70
  r = spreadsheet.costpercapita_am70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an70
  r = spreadsheet.costpercapita_an70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao70
  r = spreadsheet.costpercapita_ao70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap70
  r = spreadsheet.costpercapita_ap70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq70
  r = spreadsheet.costpercapita_aq70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as70
  r = spreadsheet.costpercapita_as70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at70
  r = spreadsheet.costpercapita_at70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av70
  r = spreadsheet.costpercapita_av70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw70
  r = spreadsheet.costpercapita_aw70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay70
  r = spreadsheet.costpercapita_ay70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az70
  r = spreadsheet.costpercapita_az70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba70
  r = spreadsheet.costpercapita_ba70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb70
  r = spreadsheet.costpercapita_bb70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc70
  r = spreadsheet.costpercapita_bc70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd70
  r = spreadsheet.costpercapita_bd70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be70
  r = spreadsheet.costpercapita_be70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf70
  r = spreadsheet.costpercapita_bf70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg70
  r = spreadsheet.costpercapita_bg70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi70
  r = spreadsheet.costpercapita_bi70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj70
  r = spreadsheet.costpercapita_bj70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk70
  r = spreadsheet.costpercapita_bk70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl70
  r = spreadsheet.costpercapita_bl70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm70
  r = spreadsheet.costpercapita_bm70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn70
  r = spreadsheet.costpercapita_bn70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo70
  r = spreadsheet.costpercapita_bo70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp70
  r = spreadsheet.costpercapita_bp70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq70
  r = spreadsheet.costpercapita_bq70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs70
  r = spreadsheet.costpercapita_bs70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt70
  r = spreadsheet.costpercapita_bt70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu70
  r = spreadsheet.costpercapita_bu70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv70
  r = spreadsheet.costpercapita_bv70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw70
  r = spreadsheet.costpercapita_bw70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx70
  r = spreadsheet.costpercapita_bx70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by70
  r = spreadsheet.costpercapita_by70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz70
  r = spreadsheet.costpercapita_bz70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca70
  r = spreadsheet.costpercapita_ca70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc70
  r = spreadsheet.costpercapita_cc70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd70
  r = spreadsheet.costpercapita_cd70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf70
  r = spreadsheet.costpercapita_cf70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg70
  r = spreadsheet.costpercapita_cg70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch70
  r = spreadsheet.costpercapita_ch70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci70
  r = spreadsheet.costpercapita_ci70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj70
  r = spreadsheet.costpercapita_cj70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck70
  r = spreadsheet.costpercapita_ck70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl70
  r = spreadsheet.costpercapita_cl70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm70
  r = spreadsheet.costpercapita_cm70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn70
  r = spreadsheet.costpercapita_cn70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp70
  r = spreadsheet.costpercapita_cp70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq70
  r = spreadsheet.costpercapita_cq70
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr70
  r = spreadsheet.costpercapita_cr70
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a71
  r = spreadsheet.costpercapita_a71
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Emissions",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b71
  r = spreadsheet.costpercapita_b71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c71
  r = spreadsheet.costpercapita_c71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e71
  r = spreadsheet.costpercapita_e71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f71
  r = spreadsheet.costpercapita_f71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g71
  r = spreadsheet.costpercapita_g71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h71
  r = spreadsheet.costpercapita_h71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i71
  r = spreadsheet.costpercapita_i71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j71
  r = spreadsheet.costpercapita_j71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k71
  r = spreadsheet.costpercapita_k71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l71
  r = spreadsheet.costpercapita_l71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m71
  r = spreadsheet.costpercapita_m71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o71
  r = spreadsheet.costpercapita_o71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p71
  r = spreadsheet.costpercapita_p71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q71
  r = spreadsheet.costpercapita_q71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r71
  r = spreadsheet.costpercapita_r71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s71
  r = spreadsheet.costpercapita_s71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t71
  r = spreadsheet.costpercapita_t71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u71
  r = spreadsheet.costpercapita_u71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v71
  r = spreadsheet.costpercapita_v71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w71
  r = spreadsheet.costpercapita_w71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y71
  r = spreadsheet.costpercapita_y71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z71
  r = spreadsheet.costpercapita_z71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa71
  r = spreadsheet.costpercapita_aa71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab71
  r = spreadsheet.costpercapita_ab71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac71
  r = spreadsheet.costpercapita_ac71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad71
  r = spreadsheet.costpercapita_ad71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae71
  r = spreadsheet.costpercapita_ae71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af71
  r = spreadsheet.costpercapita_af71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag71
  r = spreadsheet.costpercapita_ag71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai71
  r = spreadsheet.costpercapita_ai71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj71
  r = spreadsheet.costpercapita_aj71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak71
  r = spreadsheet.costpercapita_ak71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al71
  r = spreadsheet.costpercapita_al71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am71
  r = spreadsheet.costpercapita_am71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an71
  r = spreadsheet.costpercapita_an71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao71
  r = spreadsheet.costpercapita_ao71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap71
  r = spreadsheet.costpercapita_ap71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq71
  r = spreadsheet.costpercapita_aq71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as71
  r = spreadsheet.costpercapita_as71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at71
  r = spreadsheet.costpercapita_at71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av71
  r = spreadsheet.costpercapita_av71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw71
  r = spreadsheet.costpercapita_aw71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay71
  r = spreadsheet.costpercapita_ay71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az71
  r = spreadsheet.costpercapita_az71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba71
  r = spreadsheet.costpercapita_ba71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb71
  r = spreadsheet.costpercapita_bb71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc71
  r = spreadsheet.costpercapita_bc71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd71
  r = spreadsheet.costpercapita_bd71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be71
  r = spreadsheet.costpercapita_be71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf71
  r = spreadsheet.costpercapita_bf71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg71
  r = spreadsheet.costpercapita_bg71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi71
  r = spreadsheet.costpercapita_bi71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj71
  r = spreadsheet.costpercapita_bj71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk71
  r = spreadsheet.costpercapita_bk71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl71
  r = spreadsheet.costpercapita_bl71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm71
  r = spreadsheet.costpercapita_bm71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn71
  r = spreadsheet.costpercapita_bn71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo71
  r = spreadsheet.costpercapita_bo71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp71
  r = spreadsheet.costpercapita_bp71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq71
  r = spreadsheet.costpercapita_bq71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs71
  r = spreadsheet.costpercapita_bs71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt71
  r = spreadsheet.costpercapita_bt71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu71
  r = spreadsheet.costpercapita_bu71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv71
  r = spreadsheet.costpercapita_bv71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw71
  r = spreadsheet.costpercapita_bw71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx71
  r = spreadsheet.costpercapita_bx71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by71
  r = spreadsheet.costpercapita_by71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz71
  r = spreadsheet.costpercapita_bz71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca71
  r = spreadsheet.costpercapita_ca71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc71
  r = spreadsheet.costpercapita_cc71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd71
  r = spreadsheet.costpercapita_cd71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf71
  r = spreadsheet.costpercapita_cf71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg71
  r = spreadsheet.costpercapita_cg71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch71
  r = spreadsheet.costpercapita_ch71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci71
  r = spreadsheet.costpercapita_ci71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj71
  r = spreadsheet.costpercapita_cj71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck71
  r = spreadsheet.costpercapita_ck71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl71
  r = spreadsheet.costpercapita_cl71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm71
  r = spreadsheet.costpercapita_cm71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn71
  r = spreadsheet.costpercapita_cn71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp71
  r = spreadsheet.costpercapita_cp71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq71
  r = spreadsheet.costpercapita_cq71
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr71
  r = spreadsheet.costpercapita_cr71
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a72
  r = spreadsheet.costpercapita_a72
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b72
  r = spreadsheet.costpercapita_b72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy from waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c72
  r = spreadsheet.costpercapita_c72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e72
  r = spreadsheet.costpercapita_e72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f72
  r = spreadsheet.costpercapita_f72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g72
  r = spreadsheet.costpercapita_g72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h72
  r = spreadsheet.costpercapita_h72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i72
  r = spreadsheet.costpercapita_i72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j72
  r = spreadsheet.costpercapita_j72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k72
  r = spreadsheet.costpercapita_k72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l72
  r = spreadsheet.costpercapita_l72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m72
  r = spreadsheet.costpercapita_m72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o72
  r = spreadsheet.costpercapita_o72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p72
  r = spreadsheet.costpercapita_p72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q72
  r = spreadsheet.costpercapita_q72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r72
  r = spreadsheet.costpercapita_r72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s72
  r = spreadsheet.costpercapita_s72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t72
  r = spreadsheet.costpercapita_t72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u72
  r = spreadsheet.costpercapita_u72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v72
  r = spreadsheet.costpercapita_v72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w72
  r = spreadsheet.costpercapita_w72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y72
  r = spreadsheet.costpercapita_y72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z72
  r = spreadsheet.costpercapita_z72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa72
  r = spreadsheet.costpercapita_aa72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab72
  r = spreadsheet.costpercapita_ab72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac72
  r = spreadsheet.costpercapita_ac72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad72
  r = spreadsheet.costpercapita_ad72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae72
  r = spreadsheet.costpercapita_ae72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af72
  r = spreadsheet.costpercapita_af72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag72
  r = spreadsheet.costpercapita_ag72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai72
  r = spreadsheet.costpercapita_ai72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj72
  r = spreadsheet.costpercapita_aj72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak72
  r = spreadsheet.costpercapita_ak72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al72
  r = spreadsheet.costpercapita_al72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am72
  r = spreadsheet.costpercapita_am72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an72
  r = spreadsheet.costpercapita_an72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao72
  r = spreadsheet.costpercapita_ao72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap72
  r = spreadsheet.costpercapita_ap72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq72
  r = spreadsheet.costpercapita_aq72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as72
  r = spreadsheet.costpercapita_as72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at72
  r = spreadsheet.costpercapita_at72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av72
  r = spreadsheet.costpercapita_av72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw72
  r = spreadsheet.costpercapita_aw72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay72
  r = spreadsheet.costpercapita_ay72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az72
  r = spreadsheet.costpercapita_az72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba72
  r = spreadsheet.costpercapita_ba72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb72
  r = spreadsheet.costpercapita_bb72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc72
  r = spreadsheet.costpercapita_bc72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd72
  r = spreadsheet.costpercapita_bd72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be72
  r = spreadsheet.costpercapita_be72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf72
  r = spreadsheet.costpercapita_bf72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg72
  r = spreadsheet.costpercapita_bg72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi72
  r = spreadsheet.costpercapita_bi72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj72
  r = spreadsheet.costpercapita_bj72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk72
  r = spreadsheet.costpercapita_bk72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl72
  r = spreadsheet.costpercapita_bl72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm72
  r = spreadsheet.costpercapita_bm72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn72
  r = spreadsheet.costpercapita_bn72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo72
  r = spreadsheet.costpercapita_bo72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp72
  r = spreadsheet.costpercapita_bp72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq72
  r = spreadsheet.costpercapita_bq72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs72
  r = spreadsheet.costpercapita_bs72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt72
  r = spreadsheet.costpercapita_bt72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu72
  r = spreadsheet.costpercapita_bu72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv72
  r = spreadsheet.costpercapita_bv72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw72
  r = spreadsheet.costpercapita_bw72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx72
  r = spreadsheet.costpercapita_bx72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by72
  r = spreadsheet.costpercapita_by72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz72
  r = spreadsheet.costpercapita_bz72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca72
  r = spreadsheet.costpercapita_ca72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc72
  r = spreadsheet.costpercapita_cc72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd72
  r = spreadsheet.costpercapita_cd72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf72
  r = spreadsheet.costpercapita_cf72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg72
  r = spreadsheet.costpercapita_cg72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch72
  r = spreadsheet.costpercapita_ch72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci72
  r = spreadsheet.costpercapita_ci72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj72
  r = spreadsheet.costpercapita_cj72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck72
  r = spreadsheet.costpercapita_ck72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl72
  r = spreadsheet.costpercapita_cl72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm72
  r = spreadsheet.costpercapita_cm72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn72
  r = spreadsheet.costpercapita_cn72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp72
  r = spreadsheet.costpercapita_cp72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq72
  r = spreadsheet.costpercapita_cq72
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr72
  r = spreadsheet.costpercapita_cr72
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a73
  r = spreadsheet.costpercapita_a73
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b73
  r = spreadsheet.costpercapita_b73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste arising",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c73
  r = spreadsheet.costpercapita_c73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e73
  r = spreadsheet.costpercapita_e73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f73
  r = spreadsheet.costpercapita_f73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g73
  r = spreadsheet.costpercapita_g73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h73
  r = spreadsheet.costpercapita_h73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i73
  r = spreadsheet.costpercapita_i73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j73
  r = spreadsheet.costpercapita_j73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k73
  r = spreadsheet.costpercapita_k73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l73
  r = spreadsheet.costpercapita_l73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m73
  r = spreadsheet.costpercapita_m73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o73
  r = spreadsheet.costpercapita_o73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p73
  r = spreadsheet.costpercapita_p73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q73
  r = spreadsheet.costpercapita_q73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r73
  r = spreadsheet.costpercapita_r73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s73
  r = spreadsheet.costpercapita_s73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t73
  r = spreadsheet.costpercapita_t73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u73
  r = spreadsheet.costpercapita_u73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v73
  r = spreadsheet.costpercapita_v73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w73
  r = spreadsheet.costpercapita_w73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y73
  r = spreadsheet.costpercapita_y73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z73
  r = spreadsheet.costpercapita_z73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa73
  r = spreadsheet.costpercapita_aa73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab73
  r = spreadsheet.costpercapita_ab73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac73
  r = spreadsheet.costpercapita_ac73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad73
  r = spreadsheet.costpercapita_ad73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae73
  r = spreadsheet.costpercapita_ae73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af73
  r = spreadsheet.costpercapita_af73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag73
  r = spreadsheet.costpercapita_ag73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai73
  r = spreadsheet.costpercapita_ai73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj73
  r = spreadsheet.costpercapita_aj73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak73
  r = spreadsheet.costpercapita_ak73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al73
  r = spreadsheet.costpercapita_al73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am73
  r = spreadsheet.costpercapita_am73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an73
  r = spreadsheet.costpercapita_an73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao73
  r = spreadsheet.costpercapita_ao73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap73
  r = spreadsheet.costpercapita_ap73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq73
  r = spreadsheet.costpercapita_aq73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as73
  r = spreadsheet.costpercapita_as73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at73
  r = spreadsheet.costpercapita_at73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av73
  r = spreadsheet.costpercapita_av73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw73
  r = spreadsheet.costpercapita_aw73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay73
  r = spreadsheet.costpercapita_ay73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az73
  r = spreadsheet.costpercapita_az73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba73
  r = spreadsheet.costpercapita_ba73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb73
  r = spreadsheet.costpercapita_bb73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc73
  r = spreadsheet.costpercapita_bc73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd73
  r = spreadsheet.costpercapita_bd73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be73
  r = spreadsheet.costpercapita_be73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf73
  r = spreadsheet.costpercapita_bf73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg73
  r = spreadsheet.costpercapita_bg73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi73
  r = spreadsheet.costpercapita_bi73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj73
  r = spreadsheet.costpercapita_bj73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk73
  r = spreadsheet.costpercapita_bk73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl73
  r = spreadsheet.costpercapita_bl73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm73
  r = spreadsheet.costpercapita_bm73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn73
  r = spreadsheet.costpercapita_bn73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo73
  r = spreadsheet.costpercapita_bo73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp73
  r = spreadsheet.costpercapita_bp73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq73
  r = spreadsheet.costpercapita_bq73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs73
  r = spreadsheet.costpercapita_bs73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt73
  r = spreadsheet.costpercapita_bt73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu73
  r = spreadsheet.costpercapita_bu73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv73
  r = spreadsheet.costpercapita_bv73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw73
  r = spreadsheet.costpercapita_bw73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx73
  r = spreadsheet.costpercapita_bx73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by73
  r = spreadsheet.costpercapita_by73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz73
  r = spreadsheet.costpercapita_bz73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca73
  r = spreadsheet.costpercapita_ca73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc73
  r = spreadsheet.costpercapita_cc73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd73
  r = spreadsheet.costpercapita_cd73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf73
  r = spreadsheet.costpercapita_cf73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg73
  r = spreadsheet.costpercapita_cg73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch73
  r = spreadsheet.costpercapita_ch73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci73
  r = spreadsheet.costpercapita_ci73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj73
  r = spreadsheet.costpercapita_cj73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck73
  r = spreadsheet.costpercapita_ck73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl73
  r = spreadsheet.costpercapita_cl73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm73
  r = spreadsheet.costpercapita_cm73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn73
  r = spreadsheet.costpercapita_cn73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp73
  r = spreadsheet.costpercapita_cp73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq73
  r = spreadsheet.costpercapita_cq73
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr73
  r = spreadsheet.costpercapita_cr73
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a74
  r = spreadsheet.costpercapita_a74
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b74
  r = spreadsheet.costpercapita_b74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c74
  r = spreadsheet.costpercapita_c74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e74
  r = spreadsheet.costpercapita_e74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f74
  r = spreadsheet.costpercapita_f74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g74
  r = spreadsheet.costpercapita_g74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h74
  r = spreadsheet.costpercapita_h74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i74
  r = spreadsheet.costpercapita_i74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j74
  r = spreadsheet.costpercapita_j74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k74
  r = spreadsheet.costpercapita_k74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l74
  r = spreadsheet.costpercapita_l74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m74
  r = spreadsheet.costpercapita_m74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o74
  r = spreadsheet.costpercapita_o74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p74
  r = spreadsheet.costpercapita_p74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q74
  r = spreadsheet.costpercapita_q74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r74
  r = spreadsheet.costpercapita_r74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s74
  r = spreadsheet.costpercapita_s74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t74
  r = spreadsheet.costpercapita_t74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u74
  r = spreadsheet.costpercapita_u74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v74
  r = spreadsheet.costpercapita_v74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w74
  r = spreadsheet.costpercapita_w74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y74
  r = spreadsheet.costpercapita_y74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z74
  r = spreadsheet.costpercapita_z74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa74
  r = spreadsheet.costpercapita_aa74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab74
  r = spreadsheet.costpercapita_ab74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac74
  r = spreadsheet.costpercapita_ac74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad74
  r = spreadsheet.costpercapita_ad74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae74
  r = spreadsheet.costpercapita_ae74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af74
  r = spreadsheet.costpercapita_af74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag74
  r = spreadsheet.costpercapita_ag74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai74
  r = spreadsheet.costpercapita_ai74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj74
  r = spreadsheet.costpercapita_aj74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak74
  r = spreadsheet.costpercapita_ak74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al74
  r = spreadsheet.costpercapita_al74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am74
  r = spreadsheet.costpercapita_am74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an74
  r = spreadsheet.costpercapita_an74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao74
  r = spreadsheet.costpercapita_ao74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap74
  r = spreadsheet.costpercapita_ap74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq74
  r = spreadsheet.costpercapita_aq74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as74
  r = spreadsheet.costpercapita_as74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at74
  r = spreadsheet.costpercapita_at74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av74
  r = spreadsheet.costpercapita_av74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw74
  r = spreadsheet.costpercapita_aw74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay74
  r = spreadsheet.costpercapita_ay74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az74
  r = spreadsheet.costpercapita_az74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba74
  r = spreadsheet.costpercapita_ba74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb74
  r = spreadsheet.costpercapita_bb74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc74
  r = spreadsheet.costpercapita_bc74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd74
  r = spreadsheet.costpercapita_bd74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be74
  r = spreadsheet.costpercapita_be74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf74
  r = spreadsheet.costpercapita_bf74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg74
  r = spreadsheet.costpercapita_bg74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi74
  r = spreadsheet.costpercapita_bi74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj74
  r = spreadsheet.costpercapita_bj74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk74
  r = spreadsheet.costpercapita_bk74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl74
  r = spreadsheet.costpercapita_bl74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm74
  r = spreadsheet.costpercapita_bm74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn74
  r = spreadsheet.costpercapita_bn74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo74
  r = spreadsheet.costpercapita_bo74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp74
  r = spreadsheet.costpercapita_bp74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq74
  r = spreadsheet.costpercapita_bq74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs74
  r = spreadsheet.costpercapita_bs74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt74
  r = spreadsheet.costpercapita_bt74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu74
  r = spreadsheet.costpercapita_bu74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv74
  r = spreadsheet.costpercapita_bv74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw74
  r = spreadsheet.costpercapita_bw74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx74
  r = spreadsheet.costpercapita_bx74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by74
  r = spreadsheet.costpercapita_by74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz74
  r = spreadsheet.costpercapita_bz74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca74
  r = spreadsheet.costpercapita_ca74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc74
  r = spreadsheet.costpercapita_cc74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd74
  r = spreadsheet.costpercapita_cd74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf74
  r = spreadsheet.costpercapita_cf74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg74
  r = spreadsheet.costpercapita_cg74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch74
  r = spreadsheet.costpercapita_ch74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci74
  r = spreadsheet.costpercapita_ci74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj74
  r = spreadsheet.costpercapita_cj74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck74
  r = spreadsheet.costpercapita_ck74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl74
  r = spreadsheet.costpercapita_cl74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm74
  r = spreadsheet.costpercapita_cm74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn74
  r = spreadsheet.costpercapita_cn74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp74
  r = spreadsheet.costpercapita_cp74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq74
  r = spreadsheet.costpercapita_cq74
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr74
  r = spreadsheet.costpercapita_cr74
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a75
  r = spreadsheet.costpercapita_a75
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b75
  r = spreadsheet.costpercapita_b75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c75
  r = spreadsheet.costpercapita_c75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e75
  r = spreadsheet.costpercapita_e75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f75
  r = spreadsheet.costpercapita_f75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.28876903887672,r[:number],0.001)
end

def test_costpercapita_g75
  r = spreadsheet.costpercapita_g75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.198956309879335,r[:number],0.001)
end

def test_costpercapita_h75
  r = spreadsheet.costpercapita_h75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.65328878441522,r[:number],0.001)
end

def test_costpercapita_i75
  r = spreadsheet.costpercapita_i75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.27632440331848,r[:number],0.001)
end

def test_costpercapita_j75
  r = spreadsheet.costpercapita_j75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.18616025808151,r[:number],0.001)
end

def test_costpercapita_k75
  r = spreadsheet.costpercapita_k75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.0078891039493,r[:number],0.001)
end

def test_costpercapita_l75
  r = spreadsheet.costpercapita_l75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.0072572470107,r[:number],0.001)
end

def test_costpercapita_m75
  r = spreadsheet.costpercapita_m75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.44654204361936,r[:number],0.001)
end

def test_costpercapita_o75
  r = spreadsheet.costpercapita_o75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.002631349854918538,r[:number],0.001)
end

def test_costpercapita_p75
  r = spreadsheet.costpercapita_p75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.016624487670923862,r[:number],0.001)
end

def test_costpercapita_q75
  r = spreadsheet.costpercapita_q75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.03139868738805325,r[:number],0.001)
end

def test_costpercapita_r75
  r = spreadsheet.costpercapita_r75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.04971641482598286,r[:number],0.001)
end

def test_costpercapita_s75
  r = spreadsheet.costpercapita_s75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.07899097426622984,r[:number],0.001)
end

def test_costpercapita_t75
  r = spreadsheet.costpercapita_t75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.12226475649621833,r[:number],0.001)
end

def test_costpercapita_u75
  r = spreadsheet.costpercapita_u75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.1688441129459287,r[:number],0.001)
end

def test_costpercapita_v75
  r = spreadsheet.costpercapita_v75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.21946408998760267,r[:number],0.001)
end

def test_costpercapita_w75
  r = spreadsheet.costpercapita_w75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.23745980126419167,r[:number],0.001)
end

def test_costpercapita_y75
  r = spreadsheet.costpercapita_y75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z75
  r = spreadsheet.costpercapita_z75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa75
  r = spreadsheet.costpercapita_aa75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab75
  r = spreadsheet.costpercapita_ab75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac75
  r = spreadsheet.costpercapita_ac75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad75
  r = spreadsheet.costpercapita_ad75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae75
  r = spreadsheet.costpercapita_ae75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af75
  r = spreadsheet.costpercapita_af75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag75
  r = spreadsheet.costpercapita_ag75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai75
  r = spreadsheet.costpercapita_ai75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.002631349854918538,r[:number],0.001)
end

def test_costpercapita_aj75
  r = spreadsheet.costpercapita_aj75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.30539352654765,r[:number],0.001)
end

def test_costpercapita_ak75
  r = spreadsheet.costpercapita_ak75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.23035499726739,r[:number],0.001)
end

def test_costpercapita_al75
  r = spreadsheet.costpercapita_al75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.7030051992412,r[:number],0.001)
end

def test_costpercapita_am75
  r = spreadsheet.costpercapita_am75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.3553153775847,r[:number],0.001)
end

def test_costpercapita_an75
  r = spreadsheet.costpercapita_an75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.30842501457774,r[:number],0.001)
end

def test_costpercapita_ao75
  r = spreadsheet.costpercapita_ao75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.17673321689523,r[:number],0.001)
end

def test_costpercapita_ap75
  r = spreadsheet.costpercapita_ap75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.22672133699828,r[:number],0.001)
end

def test_costpercapita_aq75
  r = spreadsheet.costpercapita_aq75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.68400184488357,r[:number],0.001)
end

def test_costpercapita_as75
  r = spreadsheet.costpercapita_as75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.33250909598341,r[:number],0.001)
end

def test_costpercapita_at75
  r = spreadsheet.costpercapita_at75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1499.3670791277352,r[:number],0.001)
end

def test_costpercapita_av75
  r = spreadsheet.costpercapita_av75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw75
  r = spreadsheet.costpercapita_aw75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay75
  r = spreadsheet.costpercapita_ay75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az75
  r = spreadsheet.costpercapita_az75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.27463951690978,r[:number],0.001)
end

def test_costpercapita_ba75
  r = spreadsheet.costpercapita_ba75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.67636161903654,r[:number],0.001)
end

def test_costpercapita_bb75
  r = spreadsheet.costpercapita_bb75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.415509171742602,r[:number],0.001)
end

def test_costpercapita_bc75
  r = spreadsheet.costpercapita_bc75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.97159830418296,r[:number],0.001)
end

def test_costpercapita_bd75
  r = spreadsheet.costpercapita_bd75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.97897179895546,r[:number],0.001)
end

def test_costpercapita_be75
  r = spreadsheet.costpercapita_be75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.37083696169096,r[:number],0.001)
end

def test_costpercapita_bf75
  r = spreadsheet.costpercapita_bf75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.25200631230436,r[:number],0.001)
end

def test_costpercapita_bg75
  r = spreadsheet.costpercapita_bg75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.33597372374211,r[:number],0.001)
end

def test_costpercapita_bi75
  r = spreadsheet.costpercapita_bi75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj75
  r = spreadsheet.costpercapita_bj75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.27463951690978,r[:number],0.001)
end

def test_costpercapita_bk75
  r = spreadsheet.costpercapita_bk75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.35272323807308,r[:number],0.001)
end

def test_costpercapita_bl75
  r = spreadsheet.costpercapita_bl75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.67358925642701,r[:number],0.001)
end

def test_costpercapita_bm75
  r = spreadsheet.costpercapita_bm75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.40846422651467,r[:number],0.001)
end

def test_costpercapita_bn75
  r = spreadsheet.costpercapita_bn75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.17763840857828,r[:number],0.001)
end

def test_costpercapita_bo75
  r = spreadsheet.costpercapita_bo75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.00724634572444,r[:number],0.001)
end

def test_costpercapita_bp75
  r = spreadsheet.costpercapita_bp75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.48294688811976,r[:number],0.001)
end

def test_costpercapita_bq75
  r = spreadsheet.costpercapita_bq75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(233.7134784927534,r[:number],0.001)
end

def test_costpercapita_bs75
  r = spreadsheet.costpercapita_bs75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.002631349854918538,r[:number],0.001)
end

def test_costpercapita_bt75
  r = spreadsheet.costpercapita_bt75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.291264004580704,r[:number],0.001)
end

def test_costpercapita_bu75
  r = spreadsheet.costpercapita_bu75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.38412192546114,r[:number],0.001)
end

def test_costpercapita_bv75
  r = spreadsheet.costpercapita_bv75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.72330567125299,r[:number],0.001)
end

def test_costpercapita_bw75
  r = spreadsheet.costpercapita_bw75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.48745520078089,r[:number],0.001)
end

def test_costpercapita_bx75
  r = spreadsheet.costpercapita_bx75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.29990316507448,r[:number],0.001)
end

def test_costpercapita_by75
  r = spreadsheet.costpercapita_by75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.1760904586704,r[:number],0.001)
end

def test_costpercapita_bz75
  r = spreadsheet.costpercapita_bz75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.70241097810734,r[:number],0.001)
end

def test_costpercapita_ca75
  r = spreadsheet.costpercapita_ca75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(233.9509382940176,r[:number],0.001)
end

def test_costpercapita_cc75
  r = spreadsheet.costpercapita_cc75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.55756900531115,r[:number],0.001)
end

def test_costpercapita_cd75
  r = spreadsheet.costpercapita_cd75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1813.306899274215,r[:number],0.001)
end

def test_costpercapita_cf75
  r = spreadsheet.costpercapita_cf75
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg75
  r = spreadsheet.costpercapita_cg75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15.014129521966941,r[:number],0.001)
end

def test_costpercapita_ch75
  r = spreadsheet.costpercapita_ch75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1537669281937455,r[:number],0.001)
end

def test_costpercapita_ci75
  r = spreadsheet.costpercapita_ci75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.020300472011789,r[:number],0.001)
end

def test_costpercapita_cj75
  r = spreadsheet.costpercapita_cj75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.132139823196188,r[:number],0.001)
end

def test_costpercapita_ck75
  r = spreadsheet.costpercapita_ck75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.991478150496752,r[:number],0.001)
end

def test_costpercapita_cl75
  r = spreadsheet.costpercapita_cl75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.999357241775144,r[:number],0.001)
end

def test_costpercapita_cm75
  r = spreadsheet.costpercapita_cm75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.47568964110907,r[:number],0.001)
end

def test_costpercapita_cn75
  r = spreadsheet.costpercapita_cn75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.26693644913404,r[:number],0.001)
end

def test_costpercapita_cp75
  r = spreadsheet.costpercapita_cp75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.225059909327754,r[:number],0.001)
end

def test_costpercapita_cq75
  r = spreadsheet.costpercapita_cq75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313.93982014648003,r[:number],0.001)
end

def test_costpercapita_cr75
  r = spreadsheet.costpercapita_cr75
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a76
  r = spreadsheet.costpercapita_a76
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b76
  r = spreadsheet.costpercapita_b76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c76
  r = spreadsheet.costpercapita_c76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e76
  r = spreadsheet.costpercapita_e76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.47738536468111,r[:number],0.001)
end

def test_costpercapita_f76
  r = spreadsheet.costpercapita_f76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g76
  r = spreadsheet.costpercapita_g76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h76
  r = spreadsheet.costpercapita_h76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i76
  r = spreadsheet.costpercapita_i76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j76
  r = spreadsheet.costpercapita_j76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k76
  r = spreadsheet.costpercapita_k76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l76
  r = spreadsheet.costpercapita_l76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m76
  r = spreadsheet.costpercapita_m76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o76
  r = spreadsheet.costpercapita_o76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p76
  r = spreadsheet.costpercapita_p76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q76
  r = spreadsheet.costpercapita_q76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r76
  r = spreadsheet.costpercapita_r76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s76
  r = spreadsheet.costpercapita_s76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t76
  r = spreadsheet.costpercapita_t76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u76
  r = spreadsheet.costpercapita_u76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v76
  r = spreadsheet.costpercapita_v76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w76
  r = spreadsheet.costpercapita_w76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y76
  r = spreadsheet.costpercapita_y76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z76
  r = spreadsheet.costpercapita_z76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa76
  r = spreadsheet.costpercapita_aa76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.4019139604972566e-11,r[:number],0.001)
end

def test_costpercapita_ab76
  r = spreadsheet.costpercapita_ab76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.758474527418187e-12,r[:number],0.001)
end

def test_costpercapita_ac76
  r = spreadsheet.costpercapita_ac76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad76
  r = spreadsheet.costpercapita_ad76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae76
  r = spreadsheet.costpercapita_ae76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af76
  r = spreadsheet.costpercapita_af76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag76
  r = spreadsheet.costpercapita_ag76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai76
  r = spreadsheet.costpercapita_ai76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.47738536468111,r[:number],0.001)
end

def test_costpercapita_aj76
  r = spreadsheet.costpercapita_aj76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak76
  r = spreadsheet.costpercapita_ak76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.4019139604972566e-11,r[:number],0.001)
end

def test_costpercapita_al76
  r = spreadsheet.costpercapita_al76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.758474527418187e-12,r[:number],0.001)
end

def test_costpercapita_am76
  r = spreadsheet.costpercapita_am76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an76
  r = spreadsheet.costpercapita_an76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao76
  r = spreadsheet.costpercapita_ao76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap76
  r = spreadsheet.costpercapita_ap76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq76
  r = spreadsheet.costpercapita_aq76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as76
  r = spreadsheet.costpercapita_as76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4974872627388143,r[:number],0.001)
end

def test_costpercapita_at76
  r = spreadsheet.costpercapita_at76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.477385364572815,r[:number],0.001)
end

def test_costpercapita_av76
  r = spreadsheet.costpercapita_av76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw76
  r = spreadsheet.costpercapita_aw76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay76
  r = spreadsheet.costpercapita_ay76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.368143138052355,r[:number],0.001)
end

def test_costpercapita_az76
  r = spreadsheet.costpercapita_az76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba76
  r = spreadsheet.costpercapita_ba76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb76
  r = spreadsheet.costpercapita_bb76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc76
  r = spreadsheet.costpercapita_bc76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd76
  r = spreadsheet.costpercapita_bd76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be76
  r = spreadsheet.costpercapita_be76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf76
  r = spreadsheet.costpercapita_bf76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg76
  r = spreadsheet.costpercapita_bg76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi76
  r = spreadsheet.costpercapita_bi76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.368143138052355,r[:number],0.001)
end

def test_costpercapita_bj76
  r = spreadsheet.costpercapita_bj76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.02625290007034,r[:number],0.001)
end

def test_costpercapita_bk76
  r = spreadsheet.costpercapita_bk76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.698011924205998,r[:number],0.001)
end

def test_costpercapita_bl76
  r = spreadsheet.costpercapita_bl76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm76
  r = spreadsheet.costpercapita_bm76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn76
  r = spreadsheet.costpercapita_bn76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo76
  r = spreadsheet.costpercapita_bo76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp76
  r = spreadsheet.costpercapita_bp76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq76
  r = spreadsheet.costpercapita_bq76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs76
  r = spreadsheet.costpercapita_bs76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.368143138052355,r[:number],0.001)
end

def test_costpercapita_bt76
  r = spreadsheet.costpercapita_bt76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.02625290007034,r[:number],0.001)
end

def test_costpercapita_bu76
  r = spreadsheet.costpercapita_bu76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.69801192418198,r[:number],0.001)
end

def test_costpercapita_bv76
  r = spreadsheet.costpercapita_bv76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.758474527418187e-12,r[:number],0.001)
end

def test_costpercapita_bw76
  r = spreadsheet.costpercapita_bw76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx76
  r = spreadsheet.costpercapita_bx76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by76
  r = spreadsheet.costpercapita_by76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz76
  r = spreadsheet.costpercapita_bz76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca76
  r = spreadsheet.costpercapita_ca76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc76
  r = spreadsheet.costpercapita_cc76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.343600884699657,r[:number],0.001)
end

def test_costpercapita_cd76
  r = spreadsheet.costpercapita_cd76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.9528382111842,r[:number],0.001)
end

def test_costpercapita_cf76
  r = spreadsheet.costpercapita_cf76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-21.109242226628755,r[:number],0.001)
end

def test_costpercapita_cg76
  r = spreadsheet.costpercapita_cg76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.02625290007034,r[:number],0.001)
end

def test_costpercapita_ch76
  r = spreadsheet.costpercapita_ch76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.698011924205998,r[:number],0.001)
end

def test_costpercapita_ci76
  r = spreadsheet.costpercapita_ci76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj76
  r = spreadsheet.costpercapita_cj76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck76
  r = spreadsheet.costpercapita_ck76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl76
  r = spreadsheet.costpercapita_cl76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm76
  r = spreadsheet.costpercapita_cm76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn76
  r = spreadsheet.costpercapita_cn76
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp76
  r = spreadsheet.costpercapita_cp76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.15388637803915747,r[:number],0.001)
end

def test_costpercapita_cq76
  r = spreadsheet.costpercapita_cq76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.47545284661139,r[:number],0.001)
end

def test_costpercapita_cr76
  r = spreadsheet.costpercapita_cr76
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a77
  r = spreadsheet.costpercapita_a77
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b77
  r = spreadsheet.costpercapita_b77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid distribution",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c77
  r = spreadsheet.costpercapita_c77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e77
  r = spreadsheet.costpercapita_e77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1294.8320950266846,r[:number],0.001)
end

def test_costpercapita_f77
  r = spreadsheet.costpercapita_f77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3694.1202387815483,r[:number],0.001)
end

def test_costpercapita_g77
  r = spreadsheet.costpercapita_g77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5067.583887541448,r[:number],0.001)
end

def test_costpercapita_h77
  r = spreadsheet.costpercapita_h77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6551.852722372591,r[:number],0.001)
end

def test_costpercapita_i77
  r = spreadsheet.costpercapita_i77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7891.234857012108,r[:number],0.001)
end

def test_costpercapita_j77
  r = spreadsheet.costpercapita_j77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9155.830149133611,r[:number],0.001)
end

def test_costpercapita_k77
  r = spreadsheet.costpercapita_k77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10321.884375164513,r[:number],0.001)
end

def test_costpercapita_l77
  r = spreadsheet.costpercapita_l77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11405.856201618792,r[:number],0.001)
end

def test_costpercapita_m77
  r = spreadsheet.costpercapita_m77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12453.829112173396,r[:number],0.001)
end

def test_costpercapita_o77
  r = spreadsheet.costpercapita_o77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1118.835872745169,r[:number],0.001)
end

def test_costpercapita_p77
  r = spreadsheet.costpercapita_p77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1804.6045152111603,r[:number],0.001)
end

def test_costpercapita_q77
  r = spreadsheet.costpercapita_q77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2671.5413281802103,r[:number],0.001)
end

def test_costpercapita_r77
  r = spreadsheet.costpercapita_r77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3703.0524544898904,r[:number],0.001)
end

def test_costpercapita_s77
  r = spreadsheet.costpercapita_s77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4822.93694075428,r[:number],0.001)
end

def test_costpercapita_t77
  r = spreadsheet.costpercapita_t77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5993.501396817511,r[:number],0.001)
end

def test_costpercapita_u77
  r = spreadsheet.costpercapita_u77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7174.254189601856,r[:number],0.001)
end

def test_costpercapita_v77
  r = spreadsheet.costpercapita_v77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8339.770991813835,r[:number],0.001)
end

def test_costpercapita_w77
  r = spreadsheet.costpercapita_w77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8954.073138548914,r[:number],0.001)
end

def test_costpercapita_y77
  r = spreadsheet.costpercapita_y77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z77
  r = spreadsheet.costpercapita_z77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa77
  r = spreadsheet.costpercapita_aa77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab77
  r = spreadsheet.costpercapita_ab77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac77
  r = spreadsheet.costpercapita_ac77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad77
  r = spreadsheet.costpercapita_ad77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae77
  r = spreadsheet.costpercapita_ae77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af77
  r = spreadsheet.costpercapita_af77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag77
  r = spreadsheet.costpercapita_ag77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai77
  r = spreadsheet.costpercapita_ai77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2413.6679677718535,r[:number],0.001)
end

def test_costpercapita_aj77
  r = spreadsheet.costpercapita_aj77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5498.724753992708,r[:number],0.001)
end

def test_costpercapita_ak77
  r = spreadsheet.costpercapita_ak77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7739.125215721659,r[:number],0.001)
end

def test_costpercapita_al77
  r = spreadsheet.costpercapita_al77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10254.905176862483,r[:number],0.001)
end

def test_costpercapita_am77
  r = spreadsheet.costpercapita_am77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12714.171797766388,r[:number],0.001)
end

def test_costpercapita_an77
  r = spreadsheet.costpercapita_an77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15149.331545951123,r[:number],0.001)
end

def test_costpercapita_ao77
  r = spreadsheet.costpercapita_ao77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17496.138564766366,r[:number],0.001)
end

def test_costpercapita_ap77
  r = spreadsheet.costpercapita_ap77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19745.627193432625,r[:number],0.001)
end

def test_costpercapita_aq77
  r = spreadsheet.costpercapita_aq77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21407.90225072231,r[:number],0.001)
end

def test_costpercapita_as77
  r = spreadsheet.costpercapita_as77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12491.066051887501,r[:number],0.001)
end

def test_costpercapita_at77
  r = spreadsheet.costpercapita_at77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237486.57422720574,r[:number],0.001)
end

def test_costpercapita_av77
  r = spreadsheet.costpercapita_av77
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw77
  r = spreadsheet.costpercapita_aw77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay77
  r = spreadsheet.costpercapita_ay77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.49681177281866,r[:number],0.001)
end

def test_costpercapita_az77
  r = spreadsheet.costpercapita_az77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2027.9727260870638,r[:number],0.001)
end

def test_costpercapita_ba77
  r = spreadsheet.costpercapita_ba77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2781.967355367405,r[:number],0.001)
end

def test_costpercapita_bb77
  r = spreadsheet.costpercapita_bb77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3596.791053745834,r[:number],0.001)
end

def test_costpercapita_bc77
  r = spreadsheet.costpercapita_bc77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4332.075847765727,r[:number],0.001)
end

def test_costpercapita_bd77
  r = spreadsheet.costpercapita_bd77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5026.304675251428,r[:number],0.001)
end

def test_costpercapita_be77
  r = spreadsheet.costpercapita_be77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5666.437105891855,r[:number],0.001)
end

def test_costpercapita_bf77
  r = spreadsheet.costpercapita_bf77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6261.508505251916,r[:number],0.001)
end

def test_costpercapita_bg77
  r = spreadsheet.costpercapita_bg77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6836.817467307737,r[:number],0.001)
end

def test_costpercapita_bi77
  r = spreadsheet.costpercapita_bi77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.49681177281866,r[:number],0.001)
end

def test_costpercapita_bj77
  r = spreadsheet.costpercapita_bj77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2440.4057759563243,r[:number],0.001)
end

def test_costpercapita_bk77
  r = spreadsheet.costpercapita_bk77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5142.478759878216,r[:number],0.001)
end

def test_costpercapita_bl77
  r = spreadsheet.costpercapita_bl77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8193.462330096561,r[:number],0.001)
end

def test_costpercapita_bm77
  r = spreadsheet.costpercapita_bm77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10452.779565547968,r[:number],0.001)
end

def test_costpercapita_bn77
  r = spreadsheet.costpercapita_bn77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12672.45141529677,r[:number],0.001)
end

def test_costpercapita_bo77
  r = spreadsheet.costpercapita_bo77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14725.368382574805,r[:number],0.001)
end

def test_costpercapita_bp77
  r = spreadsheet.costpercapita_bp77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16635.89763269627,r[:number],0.001)
end

def test_costpercapita_bq77
  r = spreadsheet.costpercapita_bq77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18431.242655489794,r[:number],0.001)
end

def test_costpercapita_bs77
  r = spreadsheet.costpercapita_bs77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1545.3326845179877,r[:number],0.001)
end

def test_costpercapita_bt77
  r = spreadsheet.costpercapita_bt77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4245.010291167484,r[:number],0.001)
end

def test_costpercapita_bu77
  r = spreadsheet.costpercapita_bu77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7814.020088058426,r[:number],0.001)
end

def test_costpercapita_bv77
  r = spreadsheet.costpercapita_bv77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11896.514784586452,r[:number],0.001)
end

def test_costpercapita_bw77
  r = spreadsheet.costpercapita_bw77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15275.716506302246,r[:number],0.001)
end

def test_costpercapita_bx77
  r = spreadsheet.costpercapita_bx77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18665.95281211428,r[:number],0.001)
end

def test_costpercapita_by77
  r = spreadsheet.costpercapita_by77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21899.62257217666,r[:number],0.001)
end

def test_costpercapita_bz77
  r = spreadsheet.costpercapita_bz77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24975.6686245101,r[:number],0.001)
end

def test_costpercapita_ca77
  r = spreadsheet.costpercapita_ca77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27385.315794038714,r[:number],0.001)
end

def test_costpercapita_cc77
  r = spreadsheet.costpercapita_cc77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14855.906017496927,r[:number],0.001)
end

def test_costpercapita_cd77
  r = spreadsheet.costpercapita_cd77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274186.2559886468,r[:number],0.001)
end

def test_costpercapita_cf77
  r = spreadsheet.costpercapita_cf77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-868.3352832538659,r[:number],0.001)
end

def test_costpercapita_cg77
  r = spreadsheet.costpercapita_cg77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1253.7144628252242,r[:number],0.001)
end

def test_costpercapita_ch77
  r = spreadsheet.costpercapita_ch77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.8948723367671,r[:number],0.001)
end

def test_costpercapita_ci77
  r = spreadsheet.costpercapita_ci77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1641.6096077239706,r[:number],0.001)
end

def test_costpercapita_cj77
  r = spreadsheet.costpercapita_cj77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2561.5447085358596,r[:number],0.001)
end

def test_costpercapita_ck77
  r = spreadsheet.costpercapita_ck77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3516.6212661631585,r[:number],0.001)
end

def test_costpercapita_cl77
  r = spreadsheet.costpercapita_cl77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4403.484007410292,r[:number],0.001)
end

def test_costpercapita_cm77
  r = spreadsheet.costpercapita_cm77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5230.041431077477,r[:number],0.001)
end

def test_costpercapita_cn77
  r = spreadsheet.costpercapita_cn77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5977.413543316399,r[:number],0.001)
end

def test_costpercapita_cp77
  r = spreadsheet.costpercapita_cp77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2364.839965609426,r[:number],0.001)
end

def test_costpercapita_cq77
  r = spreadsheet.costpercapita_cq77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36699.68176144115,r[:number],0.001)
end

def test_costpercapita_cr77
  r = spreadsheet.costpercapita_cr77
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a78
  r = spreadsheet.costpercapita_a78
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b78
  r = spreadsheet.costpercapita_b78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting, backup",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c78
  r = spreadsheet.costpercapita_c78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e78
  r = spreadsheet.costpercapita_e78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f78
  r = spreadsheet.costpercapita_f78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g78
  r = spreadsheet.costpercapita_g78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h78
  r = spreadsheet.costpercapita_h78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i78
  r = spreadsheet.costpercapita_i78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j78
  r = spreadsheet.costpercapita_j78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k78
  r = spreadsheet.costpercapita_k78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l78
  r = spreadsheet.costpercapita_l78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m78
  r = spreadsheet.costpercapita_m78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o78
  r = spreadsheet.costpercapita_o78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p78
  r = spreadsheet.costpercapita_p78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q78
  r = spreadsheet.costpercapita_q78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r78
  r = spreadsheet.costpercapita_r78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s78
  r = spreadsheet.costpercapita_s78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t78
  r = spreadsheet.costpercapita_t78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u78
  r = spreadsheet.costpercapita_u78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v78
  r = spreadsheet.costpercapita_v78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w78
  r = spreadsheet.costpercapita_w78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y78
  r = spreadsheet.costpercapita_y78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z78
  r = spreadsheet.costpercapita_z78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa78
  r = spreadsheet.costpercapita_aa78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab78
  r = spreadsheet.costpercapita_ab78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac78
  r = spreadsheet.costpercapita_ac78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad78
  r = spreadsheet.costpercapita_ad78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae78
  r = spreadsheet.costpercapita_ae78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af78
  r = spreadsheet.costpercapita_af78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag78
  r = spreadsheet.costpercapita_ag78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai78
  r = spreadsheet.costpercapita_ai78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj78
  r = spreadsheet.costpercapita_aj78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak78
  r = spreadsheet.costpercapita_ak78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al78
  r = spreadsheet.costpercapita_al78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am78
  r = spreadsheet.costpercapita_am78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an78
  r = spreadsheet.costpercapita_an78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao78
  r = spreadsheet.costpercapita_ao78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap78
  r = spreadsheet.costpercapita_ap78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq78
  r = spreadsheet.costpercapita_aq78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as78
  r = spreadsheet.costpercapita_as78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at78
  r = spreadsheet.costpercapita_at78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av78
  r = spreadsheet.costpercapita_av78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw78
  r = spreadsheet.costpercapita_aw78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay78
  r = spreadsheet.costpercapita_ay78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az78
  r = spreadsheet.costpercapita_az78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba78
  r = spreadsheet.costpercapita_ba78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb78
  r = spreadsheet.costpercapita_bb78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc78
  r = spreadsheet.costpercapita_bc78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd78
  r = spreadsheet.costpercapita_bd78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be78
  r = spreadsheet.costpercapita_be78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf78
  r = spreadsheet.costpercapita_bf78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg78
  r = spreadsheet.costpercapita_bg78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi78
  r = spreadsheet.costpercapita_bi78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj78
  r = spreadsheet.costpercapita_bj78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk78
  r = spreadsheet.costpercapita_bk78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl78
  r = spreadsheet.costpercapita_bl78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm78
  r = spreadsheet.costpercapita_bm78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn78
  r = spreadsheet.costpercapita_bn78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo78
  r = spreadsheet.costpercapita_bo78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp78
  r = spreadsheet.costpercapita_bp78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq78
  r = spreadsheet.costpercapita_bq78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs78
  r = spreadsheet.costpercapita_bs78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt78
  r = spreadsheet.costpercapita_bt78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu78
  r = spreadsheet.costpercapita_bu78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv78
  r = spreadsheet.costpercapita_bv78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw78
  r = spreadsheet.costpercapita_bw78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx78
  r = spreadsheet.costpercapita_bx78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by78
  r = spreadsheet.costpercapita_by78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz78
  r = spreadsheet.costpercapita_bz78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca78
  r = spreadsheet.costpercapita_ca78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc78
  r = spreadsheet.costpercapita_cc78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd78
  r = spreadsheet.costpercapita_cd78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf78
  r = spreadsheet.costpercapita_cf78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg78
  r = spreadsheet.costpercapita_cg78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch78
  r = spreadsheet.costpercapita_ch78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci78
  r = spreadsheet.costpercapita_ci78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj78
  r = spreadsheet.costpercapita_cj78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck78
  r = spreadsheet.costpercapita_ck78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl78
  r = spreadsheet.costpercapita_cl78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm78
  r = spreadsheet.costpercapita_cm78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn78
  r = spreadsheet.costpercapita_cn78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp78
  r = spreadsheet.costpercapita_cp78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq78
  r = spreadsheet.costpercapita_cq78
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr78
  r = spreadsheet.costpercapita_cr78
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a79
  r = spreadsheet.costpercapita_a79
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b79
  r = spreadsheet.costpercapita_b79
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c79
  r = spreadsheet.costpercapita_c79
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e79
  r = spreadsheet.costpercapita_e79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f79
  r = spreadsheet.costpercapita_f79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g79
  r = spreadsheet.costpercapita_g79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h79
  r = spreadsheet.costpercapita_h79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i79
  r = spreadsheet.costpercapita_i79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j79
  r = spreadsheet.costpercapita_j79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k79
  r = spreadsheet.costpercapita_k79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l79
  r = spreadsheet.costpercapita_l79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m79
  r = spreadsheet.costpercapita_m79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o79
  r = spreadsheet.costpercapita_o79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p79
  r = spreadsheet.costpercapita_p79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q79
  r = spreadsheet.costpercapita_q79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r79
  r = spreadsheet.costpercapita_r79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s79
  r = spreadsheet.costpercapita_s79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t79
  r = spreadsheet.costpercapita_t79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u79
  r = spreadsheet.costpercapita_u79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v79
  r = spreadsheet.costpercapita_v79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w79
  r = spreadsheet.costpercapita_w79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y79
  r = spreadsheet.costpercapita_y79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z79
  r = spreadsheet.costpercapita_z79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa79
  r = spreadsheet.costpercapita_aa79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab79
  r = spreadsheet.costpercapita_ab79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac79
  r = spreadsheet.costpercapita_ac79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad79
  r = spreadsheet.costpercapita_ad79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae79
  r = spreadsheet.costpercapita_ae79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af79
  r = spreadsheet.costpercapita_af79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag79
  r = spreadsheet.costpercapita_ag79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai79
  r = spreadsheet.costpercapita_ai79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj79
  r = spreadsheet.costpercapita_aj79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak79
  r = spreadsheet.costpercapita_ak79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al79
  r = spreadsheet.costpercapita_al79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am79
  r = spreadsheet.costpercapita_am79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an79
  r = spreadsheet.costpercapita_an79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao79
  r = spreadsheet.costpercapita_ao79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap79
  r = spreadsheet.costpercapita_ap79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq79
  r = spreadsheet.costpercapita_aq79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as79
  r = spreadsheet.costpercapita_as79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at79
  r = spreadsheet.costpercapita_at79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av79
  r = spreadsheet.costpercapita_av79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw79
  r = spreadsheet.costpercapita_aw79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay79
  r = spreadsheet.costpercapita_ay79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az79
  r = spreadsheet.costpercapita_az79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba79
  r = spreadsheet.costpercapita_ba79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb79
  r = spreadsheet.costpercapita_bb79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc79
  r = spreadsheet.costpercapita_bc79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd79
  r = spreadsheet.costpercapita_bd79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be79
  r = spreadsheet.costpercapita_be79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf79
  r = spreadsheet.costpercapita_bf79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg79
  r = spreadsheet.costpercapita_bg79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi79
  r = spreadsheet.costpercapita_bi79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj79
  r = spreadsheet.costpercapita_bj79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk79
  r = spreadsheet.costpercapita_bk79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl79
  r = spreadsheet.costpercapita_bl79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm79
  r = spreadsheet.costpercapita_bm79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn79
  r = spreadsheet.costpercapita_bn79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo79
  r = spreadsheet.costpercapita_bo79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp79
  r = spreadsheet.costpercapita_bp79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq79
  r = spreadsheet.costpercapita_bq79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs79
  r = spreadsheet.costpercapita_bs79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt79
  r = spreadsheet.costpercapita_bt79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu79
  r = spreadsheet.costpercapita_bu79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv79
  r = spreadsheet.costpercapita_bv79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw79
  r = spreadsheet.costpercapita_bw79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx79
  r = spreadsheet.costpercapita_bx79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by79
  r = spreadsheet.costpercapita_by79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz79
  r = spreadsheet.costpercapita_bz79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca79
  r = spreadsheet.costpercapita_ca79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc79
  r = spreadsheet.costpercapita_cc79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd79
  r = spreadsheet.costpercapita_cd79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf79
  r = spreadsheet.costpercapita_cf79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg79
  r = spreadsheet.costpercapita_cg79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch79
  r = spreadsheet.costpercapita_ch79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci79
  r = spreadsheet.costpercapita_ci79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj79
  r = spreadsheet.costpercapita_cj79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck79
  r = spreadsheet.costpercapita_ck79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl79
  r = spreadsheet.costpercapita_cl79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm79
  r = spreadsheet.costpercapita_cm79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn79
  r = spreadsheet.costpercapita_cn79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp79
  r = spreadsheet.costpercapita_cp79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq79
  r = spreadsheet.costpercapita_cq79
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr79
  r = spreadsheet.costpercapita_cr79
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a80
  r = spreadsheet.costpercapita_a80
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b80
  r = spreadsheet.costpercapita_b80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c80
  r = spreadsheet.costpercapita_c80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e80
  r = spreadsheet.costpercapita_e80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-43.82025742028985,r[:number],0.001)
end

def test_costpercapita_f80
  r = spreadsheet.costpercapita_f80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.38752676556183,r[:number],0.001)
end

def test_costpercapita_g80
  r = spreadsheet.costpercapita_g80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.78177595588085,r[:number],0.001)
end

def test_costpercapita_h80
  r = spreadsheet.costpercapita_h80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.86209271902035,r[:number],0.001)
end

def test_costpercapita_i80
  r = spreadsheet.costpercapita_i80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.6560871024364,r[:number],0.001)
end

def test_costpercapita_j80
  r = spreadsheet.costpercapita_j80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.03324254179003,r[:number],0.001)
end

def test_costpercapita_k80
  r = spreadsheet.costpercapita_k80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.14220319576626,r[:number],0.001)
end

def test_costpercapita_l80
  r = spreadsheet.costpercapita_l80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.32321642108926,r[:number],0.001)
end

def test_costpercapita_m80
  r = spreadsheet.costpercapita_m80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(268.75823948201133,r[:number],0.001)
end

def test_costpercapita_o80
  r = spreadsheet.costpercapita_o80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.66897230808851,r[:number],0.001)
end

def test_costpercapita_p80
  r = spreadsheet.costpercapita_p80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.60549599858066,r[:number],0.001)
end

def test_costpercapita_q80
  r = spreadsheet.costpercapita_q80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.25189649674907,r[:number],0.001)
end

def test_costpercapita_r80
  r = spreadsheet.costpercapita_r80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.5221565537255,r[:number],0.001)
end

def test_costpercapita_s80
  r = spreadsheet.costpercapita_s80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.60486456976156,r[:number],0.001)
end

def test_costpercapita_t80
  r = spreadsheet.costpercapita_t80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.81534739839887,r[:number],0.001)
end

def test_costpercapita_u80
  r = spreadsheet.costpercapita_u80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.23614587518625,r[:number],0.001)
end

def test_costpercapita_v80
  r = spreadsheet.costpercapita_v80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.79527652318599,r[:number],0.001)
end

def test_costpercapita_w80
  r = spreadsheet.costpercapita_w80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48957995625537,r[:number],0.001)
end

def test_costpercapita_y80
  r = spreadsheet.costpercapita_y80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z80
  r = spreadsheet.costpercapita_z80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa80
  r = spreadsheet.costpercapita_aa80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab80
  r = spreadsheet.costpercapita_ab80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac80
  r = spreadsheet.costpercapita_ac80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad80
  r = spreadsheet.costpercapita_ad80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae80
  r = spreadsheet.costpercapita_ae80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af80
  r = spreadsheet.costpercapita_af80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag80
  r = spreadsheet.costpercapita_ag80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai80
  r = spreadsheet.costpercapita_ai80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.84871488779867,r[:number],0.001)
end

def test_costpercapita_aj80
  r = spreadsheet.costpercapita_aj80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.99302276414247,r[:number],0.001)
end

def test_costpercapita_ak80
  r = spreadsheet.costpercapita_ak80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.0336724526299,r[:number],0.001)
end

def test_costpercapita_al80
  r = spreadsheet.costpercapita_al80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.38424927274582,r[:number],0.001)
end

def test_costpercapita_am80
  r = spreadsheet.costpercapita_am80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.26095167219796,r[:number],0.001)
end

def test_costpercapita_an80
  r = spreadsheet.costpercapita_an80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.8485899401889,r[:number],0.001)
end

def test_costpercapita_ao80
  r = spreadsheet.costpercapita_ao80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(305.37834907095254,r[:number],0.001)
end

def test_costpercapita_ap80
  r = spreadsheet.costpercapita_ap80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(333.11849294427526,r[:number],0.001)
end

def test_costpercapita_aq80
  r = spreadsheet.costpercapita_aq80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(363.24781943826673,r[:number],0.001)
end

def test_costpercapita_as80
  r = spreadsheet.costpercapita_as80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(252.79042916035536,r[:number],0.001)
end

def test_costpercapita_at80
  r = spreadsheet.costpercapita_at80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5275.938385003294,r[:number],0.001)
end

def test_costpercapita_av80
  r = spreadsheet.costpercapita_av80
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw80
  r = spreadsheet.costpercapita_aw80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay80
  r = spreadsheet.costpercapita_ay80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.433686153286663,r[:number],0.001)
end

def test_costpercapita_az80
  r = spreadsheet.costpercapita_az80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.6771940815966,r[:number],0.001)
end

def test_costpercapita_ba80
  r = spreadsheet.costpercapita_ba80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.4425994145504,r[:number],0.001)
end

def test_costpercapita_bb80
  r = spreadsheet.costpercapita_bb80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.46615362898156,r[:number],0.001)
end

def test_costpercapita_bc80
  r = spreadsheet.costpercapita_bc80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.78355142878151,r[:number],0.001)
end

def test_costpercapita_bd80
  r = spreadsheet.costpercapita_bd80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.0680083454811,r[:number],0.001)
end

def test_costpercapita_be80
  r = spreadsheet.costpercapita_be80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.55831416262922,r[:number],0.001)
end

def test_costpercapita_bf80
  r = spreadsheet.costpercapita_bf80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.93098676946136,r[:number],0.001)
end

def test_costpercapita_bg80
  r = spreadsheet.costpercapita_bg80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.54105019615335,r[:number],0.001)
end

def test_costpercapita_bi80
  r = spreadsheet.costpercapita_bi80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14.433686153286663,r[:number],0.001)
end

def test_costpercapita_bj80
  r = spreadsheet.costpercapita_bj80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.71945972876241,r[:number],0.001)
end

def test_costpercapita_bk80
  r = spreadsheet.costpercapita_bk80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.2396926365333,r[:number],0.001)
end

def test_costpercapita_bl80
  r = spreadsheet.costpercapita_bl80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.7559255937415,r[:number],0.001)
end

def test_costpercapita_bm80
  r = spreadsheet.costpercapita_bm80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246.16630215951858,r[:number],0.001)
end

def test_costpercapita_bn80
  r = spreadsheet.costpercapita_bn80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.84209141626627,r[:number],0.001)
end

def test_costpercapita_bo80
  r = spreadsheet.costpercapita_bo80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.92003236301923,r[:number],0.001)
end

def test_costpercapita_bp80
  r = spreadsheet.costpercapita_bp80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.8386550272069,r[:number],0.001)
end

def test_costpercapita_bq80
  r = spreadsheet.costpercapita_bq80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.0731659742686,r[:number],0.001)
end

def test_costpercapita_bs80
  r = spreadsheet.costpercapita_bs80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.23528615480186,r[:number],0.001)
end

def test_costpercapita_bt80
  r = spreadsheet.costpercapita_bt80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.32495572734305,r[:number],0.001)
end

def test_costpercapita_bu80
  r = spreadsheet.costpercapita_bu80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218.4915891332824,r[:number],0.001)
end

def test_costpercapita_bv80
  r = spreadsheet.costpercapita_bv80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.27808214746693,r[:number],0.001)
end

def test_costpercapita_bw80
  r = spreadsheet.costpercapita_bw80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.77116672928014,r[:number],0.001)
end

def test_costpercapita_bx80
  r = spreadsheet.costpercapita_bx80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(369.65743881466517,r[:number],0.001)
end

def test_costpercapita_by80
  r = spreadsheet.costpercapita_by80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(404.1561782382055,r[:number],0.001)
end

def test_costpercapita_bz80
  r = spreadsheet.costpercapita_bz80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.63393155039296,r[:number],0.001)
end

def test_costpercapita_ca80
  r = spreadsheet.costpercapita_ca80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.56274593052393,r[:number],0.001)
end

def test_costpercapita_cc80
  r = spreadsheet.costpercapita_cc80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(309.4568193806624,r[:number],0.001)
end

def test_costpercapita_cd80
  r = spreadsheet.costpercapita_cd80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6060.437625198525,r[:number],0.001)
end

def test_costpercapita_cf80
  r = spreadsheet.costpercapita_cf80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.386571267003184,r[:number],0.001)
end

def test_costpercapita_cg80
  r = spreadsheet.costpercapita_cg80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-73.6680670367994,r[:number],0.001)
end

def test_costpercapita_ch80
  r = spreadsheet.costpercapita_ch80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.5420833193475314,r[:number],0.001)
end

def test_costpercapita_ci80
  r = spreadsheet.costpercapita_ci80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.89383287472113,r[:number],0.001)
end

def test_costpercapita_cj80
  r = spreadsheet.costpercapita_cj80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.51021505708219,r[:number],0.001)
end

def test_costpercapita_ck80
  r = spreadsheet.costpercapita_ck80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.80884887447627,r[:number],0.001)
end

def test_costpercapita_cl80
  r = spreadsheet.costpercapita_cl80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.77782916725297,r[:number],0.001)
end

def test_costpercapita_cm80
  r = spreadsheet.costpercapita_cm80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.51543860611766,r[:number],0.001)
end

def test_costpercapita_cn80
  r = spreadsheet.costpercapita_cn80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.31492649225724,r[:number],0.001)
end

def test_costpercapita_cp80
  r = spreadsheet.costpercapita_cp80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.66639022030708,r[:number],0.001)
end

def test_costpercapita_cq80
  r = spreadsheet.costpercapita_cq80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(784.4992401952326,r[:number],0.001)
end

def test_costpercapita_cr80
  r = spreadsheet.costpercapita_cr80
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a81
  r = spreadsheet.costpercapita_a81
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b81
  r = spreadsheet.costpercapita_b81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c81
  r = spreadsheet.costpercapita_c81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e81
  r = spreadsheet.costpercapita_e81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.848341600878902,r[:number],0.001)
end

def test_costpercapita_f81
  r = spreadsheet.costpercapita_f81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.03660058092714,r[:number],0.001)
end

def test_costpercapita_g81
  r = spreadsheet.costpercapita_g81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.685261645876832,r[:number],0.001)
end

def test_costpercapita_h81
  r = spreadsheet.costpercapita_h81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.540189665199249,r[:number],0.001)
end

def test_costpercapita_i81
  r = spreadsheet.costpercapita_i81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.416150988459336,r[:number],0.001)
end

def test_costpercapita_j81
  r = spreadsheet.costpercapita_j81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.312125479097593,r[:number],0.001)
end

def test_costpercapita_k81
  r = spreadsheet.costpercapita_k81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.220163425530844,r[:number],0.001)
end

def test_costpercapita_l81
  r = spreadsheet.costpercapita_l81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.135979920487718,r[:number],0.001)
end

def test_costpercapita_m81
  r = spreadsheet.costpercapita_m81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.05879535830546,r[:number],0.001)
end

def test_costpercapita_o81
  r = spreadsheet.costpercapita_o81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p81
  r = spreadsheet.costpercapita_p81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q81
  r = spreadsheet.costpercapita_q81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r81
  r = spreadsheet.costpercapita_r81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s81
  r = spreadsheet.costpercapita_s81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t81
  r = spreadsheet.costpercapita_t81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u81
  r = spreadsheet.costpercapita_u81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v81
  r = spreadsheet.costpercapita_v81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w81
  r = spreadsheet.costpercapita_w81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y81
  r = spreadsheet.costpercapita_y81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z81
  r = spreadsheet.costpercapita_z81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa81
  r = spreadsheet.costpercapita_aa81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab81
  r = spreadsheet.costpercapita_ab81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac81
  r = spreadsheet.costpercapita_ac81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad81
  r = spreadsheet.costpercapita_ad81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae81
  r = spreadsheet.costpercapita_ae81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af81
  r = spreadsheet.costpercapita_af81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag81
  r = spreadsheet.costpercapita_ag81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai81
  r = spreadsheet.costpercapita_ai81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.848341600878902,r[:number],0.001)
end

def test_costpercapita_aj81
  r = spreadsheet.costpercapita_aj81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.03660058092714,r[:number],0.001)
end

def test_costpercapita_ak81
  r = spreadsheet.costpercapita_ak81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.685261645876832,r[:number],0.001)
end

def test_costpercapita_al81
  r = spreadsheet.costpercapita_al81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.540189665199249,r[:number],0.001)
end

def test_costpercapita_am81
  r = spreadsheet.costpercapita_am81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.416150988459336,r[:number],0.001)
end

def test_costpercapita_an81
  r = spreadsheet.costpercapita_an81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.312125479097593,r[:number],0.001)
end

def test_costpercapita_ao81
  r = spreadsheet.costpercapita_ao81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.220163425530844,r[:number],0.001)
end

def test_costpercapita_ap81
  r = spreadsheet.costpercapita_ap81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.135979920487718,r[:number],0.001)
end

def test_costpercapita_aq81
  r = spreadsheet.costpercapita_aq81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.05879535830546,r[:number],0.001)
end

def test_costpercapita_as81
  r = spreadsheet.costpercapita_as81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.139289851640341,r[:number],0.001)
end

def test_costpercapita_at81
  r = spreadsheet.costpercapita_at81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.52222273525388,r[:number],0.001)
end

def test_costpercapita_av81
  r = spreadsheet.costpercapita_av81
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw81
  r = spreadsheet.costpercapita_aw81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay81
  r = spreadsheet.costpercapita_ay81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.220188154605545,r[:number],0.001)
end

def test_costpercapita_az81
  r = spreadsheet.costpercapita_az81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.960850846778966,r[:number],0.001)
end

def test_costpercapita_ba81
  r = spreadsheet.costpercapita_ba81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.572082720175335,r[:number],0.001)
end

def test_costpercapita_bb81
  r = spreadsheet.costpercapita_bb81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4924421018097007,r[:number],0.001)
end

def test_costpercapita_bc81
  r = spreadsheet.costpercapita_bc81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.424348202004359,r[:number],0.001)
end

def test_costpercapita_bd81
  r = spreadsheet.costpercapita_bd81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.367240993205842,r[:number],0.001)
end

def test_costpercapita_be81
  r = spreadsheet.costpercapita_be81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3167562974153664,r[:number],0.001)
end

def test_costpercapita_bf81
  r = spreadsheet.costpercapita_bf81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2705418157042394,r[:number],0.001)
end

def test_costpercapita_bg81
  r = spreadsheet.costpercapita_bg81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.228169565516677,r[:number],0.001)
end

def test_costpercapita_bi81
  r = spreadsheet.costpercapita_bi81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.220188154605545,r[:number],0.001)
end

def test_costpercapita_bj81
  r = spreadsheet.costpercapita_bj81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.00890293548291,r[:number],0.001)
end

def test_costpercapita_bk81
  r = spreadsheet.costpercapita_bk81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.25331268554482,r[:number],0.001)
end

def test_costpercapita_bl81
  r = spreadsheet.costpercapita_bl81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.634749538579138,r[:number],0.001)
end

def test_costpercapita_bm81
  r = spreadsheet.costpercapita_bm81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.27304460601308,r[:number],0.001)
end

def test_costpercapita_bn81
  r = spreadsheet.costpercapita_bn81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.101722979617524,r[:number],0.001)
end

def test_costpercapita_bo81
  r = spreadsheet.costpercapita_bo81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.950268892246097,r[:number],0.001)
end

def test_costpercapita_bp81
  r = spreadsheet.costpercapita_bp81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.811625447112719,r[:number],0.001)
end

def test_costpercapita_bq81
  r = spreadsheet.costpercapita_bq81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.684508696550033,r[:number],0.001)
end

def test_costpercapita_bs81
  r = spreadsheet.costpercapita_bs81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.220188154605545,r[:number],0.001)
end

def test_costpercapita_bt81
  r = spreadsheet.costpercapita_bt81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.00890293548291,r[:number],0.001)
end

def test_costpercapita_bu81
  r = spreadsheet.costpercapita_bu81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.25331268554482,r[:number],0.001)
end

def test_costpercapita_bv81
  r = spreadsheet.costpercapita_bv81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.634749538579138,r[:number],0.001)
end

def test_costpercapita_bw81
  r = spreadsheet.costpercapita_bw81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.27304460601308,r[:number],0.001)
end

def test_costpercapita_bx81
  r = spreadsheet.costpercapita_bx81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.101722979617524,r[:number],0.001)
end

def test_costpercapita_by81
  r = spreadsheet.costpercapita_by81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.950268892246097,r[:number],0.001)
end

def test_costpercapita_bz81
  r = spreadsheet.costpercapita_bz81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.811625447112719,r[:number],0.001)
end

def test_costpercapita_ca81
  r = spreadsheet.costpercapita_ca81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.684508696550033,r[:number],0.001)
end

def test_costpercapita_cc81
  r = spreadsheet.costpercapita_cc81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.993147103972429,r[:number],0.001)
end

def test_costpercapita_cd81
  r = spreadsheet.costpercapita_cd81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.5537581789168,r[:number],0.001)
end

def test_costpercapita_cf81
  r = spreadsheet.costpercapita_cf81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-10.628153446273357,r[:number],0.001)
end

def test_costpercapita_cg81
  r = spreadsheet.costpercapita_cg81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9723023545557697,r[:number],0.001)
end

def test_costpercapita_ch81
  r = spreadsheet.costpercapita_ch81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.568051039667989,r[:number],0.001)
end

def test_costpercapita_ci81
  r = spreadsheet.costpercapita_ci81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.094559873379888,r[:number],0.001)
end

def test_costpercapita_cj81
  r = spreadsheet.costpercapita_cj81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.856893617553744,r[:number],0.001)
end

def test_costpercapita_ck81
  r = spreadsheet.costpercapita_ck81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7895975005199305,r[:number],0.001)
end

def test_costpercapita_cl81
  r = spreadsheet.costpercapita_cl81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.730105466715253,r[:number],0.001)
end

def test_costpercapita_cm81
  r = spreadsheet.costpercapita_cm81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.675645526625001,r[:number],0.001)
end

def test_costpercapita_cn81
  r = spreadsheet.costpercapita_cn81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6257133382445725,r[:number],0.001)
end

def test_costpercapita_cp81
  r = spreadsheet.costpercapita_cp81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8538572523320878,r[:number],0.001)
end

def test_costpercapita_cq81
  r = spreadsheet.costpercapita_cq81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.031535443662904,r[:number],0.001)
end

def test_costpercapita_cr81
  r = spreadsheet.costpercapita_cr81
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a82
  r = spreadsheet.costpercapita_a82
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b82
  r = spreadsheet.costpercapita_b82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c82
  r = spreadsheet.costpercapita_c82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e82
  r = spreadsheet.costpercapita_e82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2980.6762906479744,r[:number],0.001)
end

def test_costpercapita_f82
  r = spreadsheet.costpercapita_f82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35613.53230567658,r[:number],0.001)
end

def test_costpercapita_g82
  r = spreadsheet.costpercapita_g82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41854.30244315464,r[:number],0.001)
end

def test_costpercapita_h82
  r = spreadsheet.costpercapita_h82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47715.28801179431,r[:number],0.001)
end

def test_costpercapita_i82
  r = spreadsheet.costpercapita_i82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53353.252298456224,r[:number],0.001)
end

def test_costpercapita_j82
  r = spreadsheet.costpercapita_j82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58855.12704239201,r[:number],0.001)
end

def test_costpercapita_k82
  r = spreadsheet.costpercapita_k82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64195.48904902484,r[:number],0.001)
end

def test_costpercapita_l82
  r = spreadsheet.costpercapita_l82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69448.51586008056,r[:number],0.001)
end

def test_costpercapita_m82
  r = spreadsheet.costpercapita_m82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74584.73223541002,r[:number],0.001)
end

def test_costpercapita_o82
  r = spreadsheet.costpercapita_o82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.1520800085787,r[:number],0.001)
end

def test_costpercapita_p82
  r = spreadsheet.costpercapita_p82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572.5345191589569,r[:number],0.001)
end

def test_costpercapita_q82
  r = spreadsheet.costpercapita_q82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(953.694573827056,r[:number],0.001)
end

def test_costpercapita_r82
  r = spreadsheet.costpercapita_r82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1370.281740900022,r[:number],0.001)
end

def test_costpercapita_s82
  r = spreadsheet.costpercapita_s82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1823.7831003048486,r[:number],0.001)
end

def test_costpercapita_t82
  r = spreadsheet.costpercapita_t82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2315.876912995882,r[:number],0.001)
end

def test_costpercapita_u82
  r = spreadsheet.costpercapita_u82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2844.6408659070753,r[:number],0.001)
end

def test_costpercapita_v82
  r = spreadsheet.costpercapita_v82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3407.956205504215,r[:number],0.001)
end

def test_costpercapita_w82
  r = spreadsheet.costpercapita_w82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4005.3075954231044,r[:number],0.001)
end

def test_costpercapita_y82
  r = spreadsheet.costpercapita_y82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z82
  r = spreadsheet.costpercapita_z82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa82
  r = spreadsheet.costpercapita_aa82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab82
  r = spreadsheet.costpercapita_ab82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac82
  r = spreadsheet.costpercapita_ac82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad82
  r = spreadsheet.costpercapita_ad82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae82
  r = spreadsheet.costpercapita_ae82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af82
  r = spreadsheet.costpercapita_af82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag82
  r = spreadsheet.costpercapita_ag82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai82
  r = spreadsheet.costpercapita_ai82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3209.8283706565535,r[:number],0.001)
end

def test_costpercapita_aj82
  r = spreadsheet.costpercapita_aj82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36186.066824835536,r[:number],0.001)
end

def test_costpercapita_ak82
  r = spreadsheet.costpercapita_ak82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42807.997016981695,r[:number],0.001)
end

def test_costpercapita_al82
  r = spreadsheet.costpercapita_al82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49085.56975269433,r[:number],0.001)
end

def test_costpercapita_am82
  r = spreadsheet.costpercapita_am82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55177.03539876107,r[:number],0.001)
end

def test_costpercapita_an82
  r = spreadsheet.costpercapita_an82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61171.00395538789,r[:number],0.001)
end

def test_costpercapita_ao82
  r = spreadsheet.costpercapita_ao82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67040.12991493192,r[:number],0.001)
end

def test_costpercapita_ap82
  r = spreadsheet.costpercapita_ap82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72856.47206558476,r[:number],0.001)
end

def test_costpercapita_aq82
  r = spreadsheet.costpercapita_aq82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78590.03983083312,r[:number],0.001)
end

def test_costpercapita_as82
  r = spreadsheet.costpercapita_as82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51791.57145896298,r[:number],0.001)
end

def test_costpercapita_at82
  r = spreadsheet.costpercapita_at82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1057403.1275300893,r[:number],0.001)
end

def test_costpercapita_av82
  r = spreadsheet.costpercapita_av82
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw82
  r = spreadsheet.costpercapita_aw82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay82
  r = spreadsheet.costpercapita_ay82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(981.786704060648,r[:number],0.001)
end

def test_costpercapita_az82
  r = spreadsheet.costpercapita_az82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19550.87206889466,r[:number],0.001)
end

def test_costpercapita_ba82
  r = spreadsheet.costpercapita_ba82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22976.88714434292,r[:number],0.001)
end

def test_costpercapita_bb82
  r = spreadsheet.costpercapita_bb82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26194.41069877697,r[:number],0.001)
end

def test_costpercapita_bc82
  r = spreadsheet.costpercapita_bc82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29289.50156343558,r[:number],0.001)
end

def test_costpercapita_bd82
  r = spreadsheet.costpercapita_bd82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32309.882926747458,r[:number],0.001)
end

def test_costpercapita_be82
  r = spreadsheet.costpercapita_be82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35241.59813817629,r[:number],0.001)
end

def test_costpercapita_bf82
  r = spreadsheet.costpercapita_bf82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38125.36867449723,r[:number],0.001)
end

def test_costpercapita_bg82
  r = spreadsheet.costpercapita_bg82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40945.01342105954,r[:number],0.001)
end

def test_costpercapita_bi82
  r = spreadsheet.costpercapita_bi82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(981.786704060648,r[:number],0.001)
end

def test_costpercapita_bj82
  r = spreadsheet.costpercapita_bj82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20500.28428839915,r[:number],0.001)
end

def test_costpercapita_bk82
  r = spreadsheet.costpercapita_bk82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42806.03004149776,r[:number],0.001)
end

def test_costpercapita_bl82
  r = spreadsheet.costpercapita_bl82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66785.121784998,r[:number],0.001)
end

def test_costpercapita_bm82
  r = spreadsheet.costpercapita_bm82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76425.4245228032,r[:number],0.001)
end

def test_costpercapita_bn82
  r = spreadsheet.costpercapita_bn82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85788.05500615916,r[:number],0.001)
end

def test_costpercapita_bo82
  r = spreadsheet.costpercapita_bo82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94852.06958349007,r[:number],0.001)
end

def test_costpercapita_bp82
  r = spreadsheet.costpercapita_bp82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103654.02997218705,r[:number],0.001)
end

def test_costpercapita_bq82
  r = spreadsheet.costpercapita_bq82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112252.94769478463,r[:number],0.001)
end

def test_costpercapita_bs82
  r = spreadsheet.costpercapita_bs82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1210.9387840692268,r[:number],0.001)
end

def test_costpercapita_bt82
  r = spreadsheet.costpercapita_bt82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21072.81880755811,r[:number],0.001)
end

def test_costpercapita_bu82
  r = spreadsheet.costpercapita_bu82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43759.72461532481,r[:number],0.001)
end

def test_costpercapita_bv82
  r = spreadsheet.costpercapita_bv82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68155.40352589801,r[:number],0.001)
end

def test_costpercapita_bw82
  r = spreadsheet.costpercapita_bw82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78249.20762310804,r[:number],0.001)
end

def test_costpercapita_bx82
  r = spreadsheet.costpercapita_bx82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88103.93191915506,r[:number],0.001)
end

def test_costpercapita_by82
  r = spreadsheet.costpercapita_by82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97696.71044939714,r[:number],0.001)
end

def test_costpercapita_bz82
  r = spreadsheet.costpercapita_bz82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107061.98617769126,r[:number],0.001)
end

def test_costpercapita_ca82
  r = spreadsheet.costpercapita_ca82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116258.25529020773,r[:number],0.001)
end

def test_costpercapita_cc82
  r = spreadsheet.costpercapita_cc82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69063.2196880455,r[:number],0.001)
end

def test_costpercapita_cd82
  r = spreadsheet.costpercapita_cd82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1324128.5612052712,r[:number],0.001)
end

def test_costpercapita_cf82
  r = spreadsheet.costpercapita_cf82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1998.8895865873262,r[:number],0.001)
end

def test_costpercapita_cg82
  r = spreadsheet.costpercapita_cg82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15113.248017277427,r[:number],0.001)
end

def test_costpercapita_ch82
  r = spreadsheet.costpercapita_ch82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(951.7275983431205,r[:number],0.001)
end

def test_costpercapita_ci82
  r = spreadsheet.costpercapita_ci82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19069.833773203696,r[:number],0.001)
end

def test_costpercapita_cj82
  r = spreadsheet.costpercapita_cj82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23072.172224346963,r[:number],0.001)
end

def test_costpercapita_ck82
  r = spreadsheet.costpercapita_ck82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26932.92796376716,r[:number],0.001)
end

def test_costpercapita_cl82
  r = spreadsheet.costpercapita_cl82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30656.580534465218,r[:number],0.001)
end

def test_costpercapita_cm82
  r = spreadsheet.costpercapita_cm82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34205.514112106495,r[:number],0.001)
end

def test_costpercapita_cn82
  r = spreadsheet.costpercapita_cn82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37668.21545937461,r[:number],0.001)
end

def test_costpercapita_cp82
  r = spreadsheet.costpercapita_cp82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17271.648229082504,r[:number],0.001)
end

def test_costpercapita_cq82
  r = spreadsheet.costpercapita_cq82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266725.4336751819,r[:number],0.001)
end

def test_costpercapita_cr82
  r = spreadsheet.costpercapita_cr82
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a83
  r = spreadsheet.costpercapita_a83
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b83
  r = spreadsheet.costpercapita_b83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c83
  r = spreadsheet.costpercapita_c83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e83
  r = spreadsheet.costpercapita_e83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.77413813480579,r[:number],0.001)
end

def test_costpercapita_f83
  r = spreadsheet.costpercapita_f83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.26247852696957,r[:number],0.001)
end

def test_costpercapita_g83
  r = spreadsheet.costpercapita_g83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.87601644416925,r[:number],0.001)
end

def test_costpercapita_h83
  r = spreadsheet.costpercapita_h83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.09108073326739,r[:number],0.001)
end

def test_costpercapita_i83
  r = spreadsheet.costpercapita_i83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.22699588601007,r[:number],0.001)
end

def test_costpercapita_j83
  r = spreadsheet.costpercapita_j83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.242965928943576,r[:number],0.001)
end

def test_costpercapita_k83
  r = spreadsheet.costpercapita_k83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.65110812161755,r[:number],0.001)
end

def test_costpercapita_l83
  r = spreadsheet.costpercapita_l83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.172899394812006,r[:number],0.001)
end

def test_costpercapita_m83
  r = spreadsheet.costpercapita_m83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.258079358507125,r[:number],0.001)
end

def test_costpercapita_o83
  r = spreadsheet.costpercapita_o83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p83
  r = spreadsheet.costpercapita_p83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q83
  r = spreadsheet.costpercapita_q83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r83
  r = spreadsheet.costpercapita_r83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s83
  r = spreadsheet.costpercapita_s83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t83
  r = spreadsheet.costpercapita_t83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u83
  r = spreadsheet.costpercapita_u83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v83
  r = spreadsheet.costpercapita_v83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w83
  r = spreadsheet.costpercapita_w83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y83
  r = spreadsheet.costpercapita_y83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z83
  r = spreadsheet.costpercapita_z83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa83
  r = spreadsheet.costpercapita_aa83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab83
  r = spreadsheet.costpercapita_ab83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac83
  r = spreadsheet.costpercapita_ac83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad83
  r = spreadsheet.costpercapita_ad83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae83
  r = spreadsheet.costpercapita_ae83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af83
  r = spreadsheet.costpercapita_af83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag83
  r = spreadsheet.costpercapita_ag83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai83
  r = spreadsheet.costpercapita_ai83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.77413813480579,r[:number],0.001)
end

def test_costpercapita_aj83
  r = spreadsheet.costpercapita_aj83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.26247852696957,r[:number],0.001)
end

def test_costpercapita_ak83
  r = spreadsheet.costpercapita_ak83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.87601644416925,r[:number],0.001)
end

def test_costpercapita_al83
  r = spreadsheet.costpercapita_al83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.09108073326739,r[:number],0.001)
end

def test_costpercapita_am83
  r = spreadsheet.costpercapita_am83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.22699588601007,r[:number],0.001)
end

def test_costpercapita_an83
  r = spreadsheet.costpercapita_an83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.242965928943576,r[:number],0.001)
end

def test_costpercapita_ao83
  r = spreadsheet.costpercapita_ao83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.65110812161755,r[:number],0.001)
end

def test_costpercapita_ap83
  r = spreadsheet.costpercapita_ap83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.172899394812006,r[:number],0.001)
end

def test_costpercapita_aq83
  r = spreadsheet.costpercapita_aq83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.258079358507125,r[:number],0.001)
end

def test_costpercapita_as83
  r = spreadsheet.costpercapita_as83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.61730694767804,r[:number],0.001)
end

def test_costpercapita_at83
  r = spreadsheet.costpercapita_at83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1010.4099942684265,r[:number],0.001)
end

def test_costpercapita_av83
  r = spreadsheet.costpercapita_av83
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw83
  r = spreadsheet.costpercapita_aw83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay83
  r = spreadsheet.costpercapita_ay83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.418495204363062,r[:number],0.001)
end

def test_costpercapita_az83
  r = spreadsheet.costpercapita_az83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.396857338034994,r[:number],0.001)
end

def test_costpercapita_ba83
  r = spreadsheet.costpercapita_ba83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.733673164828872,r[:number],0.001)
end

def test_costpercapita_bb83
  r = spreadsheet.costpercapita_bb83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.851737679369467,r[:number],0.001)
end

def test_costpercapita_bc83
  r = spreadsheet.costpercapita_bc83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.926351445302277,r[:number],0.001)
end

def test_costpercapita_bd83
  r = spreadsheet.costpercapita_bd83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.03306481666406,r[:number],0.001)
end

def test_costpercapita_be83
  r = spreadsheet.costpercapita_be83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.806097034515517,r[:number],0.001)
end

def test_costpercapita_bf83
  r = spreadsheet.costpercapita_bf83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.641519543083774,r[:number],0.001)
end

def test_costpercapita_bg83
  r = spreadsheet.costpercapita_bg83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.786227300823604,r[:number],0.001)
end

def test_costpercapita_bi83
  r = spreadsheet.costpercapita_bi83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.418495204363062,r[:number],0.001)
end

def test_costpercapita_bj83
  r = spreadsheet.costpercapita_bj83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.33990166453833,r[:number],0.001)
end

def test_costpercapita_bk83
  r = spreadsheet.costpercapita_bk83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.78565921009486,r[:number],0.001)
end

def test_costpercapita_bl83
  r = spreadsheet.costpercapita_bl83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.59338761699628,r[:number],0.001)
end

def test_costpercapita_bm83
  r = spreadsheet.costpercapita_bm83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.32740583399676,r[:number],0.001)
end

def test_costpercapita_bn83
  r = spreadsheet.costpercapita_bn83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.90184835488076,r[:number],0.001)
end

def test_costpercapita_bo83
  r = spreadsheet.costpercapita_bo83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.03839138756214,r[:number],0.001)
end

def test_costpercapita_bp83
  r = spreadsheet.costpercapita_bp83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.821736634184,r[:number],0.001)
end

def test_costpercapita_bq83
  r = spreadsheet.costpercapita_bq83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.63611063363881,r[:number],0.001)
end

def test_costpercapita_bs83
  r = spreadsheet.costpercapita_bs83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.418495204363062,r[:number],0.001)
end

def test_costpercapita_bt83
  r = spreadsheet.costpercapita_bt83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.33990166453833,r[:number],0.001)
end

def test_costpercapita_bu83
  r = spreadsheet.costpercapita_bu83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.78565921009486,r[:number],0.001)
end

def test_costpercapita_bv83
  r = spreadsheet.costpercapita_bv83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.59338761699628,r[:number],0.001)
end

def test_costpercapita_bw83
  r = spreadsheet.costpercapita_bw83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.32740583399676,r[:number],0.001)
end

def test_costpercapita_bx83
  r = spreadsheet.costpercapita_bx83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.90184835488076,r[:number],0.001)
end

def test_costpercapita_by83
  r = spreadsheet.costpercapita_by83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.03839138756214,r[:number],0.001)
end

def test_costpercapita_bz83
  r = spreadsheet.costpercapita_bz83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.821736634184,r[:number],0.001)
end

def test_costpercapita_ca83
  r = spreadsheet.costpercapita_ca83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.63611063363881,r[:number],0.001)
end

def test_costpercapita_cc83
  r = spreadsheet.costpercapita_cc83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.54032628225055,r[:number],0.001)
end

def test_costpercapita_cd83
  r = spreadsheet.costpercapita_cd83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1359.4541770953197,r[:number],0.001)
end

def test_costpercapita_cf83
  r = spreadsheet.costpercapita_cf83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-29.355642930442727,r[:number],0.001)
end

def test_costpercapita_cg83
  r = spreadsheet.costpercapita_cg83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-6.922576862431237,r[:number],0.001)
end

def test_costpercapita_ch83
  r = spreadsheet.costpercapita_ch83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.909642765925607,r[:number],0.001)
end

def test_costpercapita_ci83
  r = spreadsheet.costpercapita_ci83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.50230688372888,r[:number],0.001)
end

def test_costpercapita_cj83
  r = spreadsheet.costpercapita_cj83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.100409947986694,r[:number],0.001)
end

def test_costpercapita_ck83
  r = spreadsheet.costpercapita_ck83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.658882425937186,r[:number],0.001)
end

def test_costpercapita_cl83
  r = spreadsheet.costpercapita_cl83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.387283265944603,r[:number],0.001)
end

def test_costpercapita_cm83
  r = spreadsheet.costpercapita_cm83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.648837239372003,r[:number],0.001)
end

def test_costpercapita_cn83
  r = spreadsheet.costpercapita_cn83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.378031275131686,r[:number],0.001)
end

def test_costpercapita_cp83
  r = spreadsheet.costpercapita_cp83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.923019334572523,r[:number],0.001)
end

def test_costpercapita_cq83
  r = spreadsheet.costpercapita_cq83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.0441828268932,r[:number],0.001)
end

def test_costpercapita_cr83
  r = spreadsheet.costpercapita_cr83
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a84
  r = spreadsheet.costpercapita_a84
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b84
  r = spreadsheet.costpercapita_b84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c84
  r = spreadsheet.costpercapita_c84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e84
  r = spreadsheet.costpercapita_e84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f84
  r = spreadsheet.costpercapita_f84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g84
  r = spreadsheet.costpercapita_g84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h84
  r = spreadsheet.costpercapita_h84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i84
  r = spreadsheet.costpercapita_i84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j84
  r = spreadsheet.costpercapita_j84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k84
  r = spreadsheet.costpercapita_k84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l84
  r = spreadsheet.costpercapita_l84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m84
  r = spreadsheet.costpercapita_m84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o84
  r = spreadsheet.costpercapita_o84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p84
  r = spreadsheet.costpercapita_p84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q84
  r = spreadsheet.costpercapita_q84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r84
  r = spreadsheet.costpercapita_r84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s84
  r = spreadsheet.costpercapita_s84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t84
  r = spreadsheet.costpercapita_t84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u84
  r = spreadsheet.costpercapita_u84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v84
  r = spreadsheet.costpercapita_v84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w84
  r = spreadsheet.costpercapita_w84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y84
  r = spreadsheet.costpercapita_y84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z84
  r = spreadsheet.costpercapita_z84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa84
  r = spreadsheet.costpercapita_aa84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab84
  r = spreadsheet.costpercapita_ab84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac84
  r = spreadsheet.costpercapita_ac84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad84
  r = spreadsheet.costpercapita_ad84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae84
  r = spreadsheet.costpercapita_ae84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af84
  r = spreadsheet.costpercapita_af84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag84
  r = spreadsheet.costpercapita_ag84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai84
  r = spreadsheet.costpercapita_ai84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj84
  r = spreadsheet.costpercapita_aj84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak84
  r = spreadsheet.costpercapita_ak84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al84
  r = spreadsheet.costpercapita_al84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am84
  r = spreadsheet.costpercapita_am84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an84
  r = spreadsheet.costpercapita_an84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao84
  r = spreadsheet.costpercapita_ao84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap84
  r = spreadsheet.costpercapita_ap84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq84
  r = spreadsheet.costpercapita_aq84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as84
  r = spreadsheet.costpercapita_as84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at84
  r = spreadsheet.costpercapita_at84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av84
  r = spreadsheet.costpercapita_av84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw84
  r = spreadsheet.costpercapita_aw84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay84
  r = spreadsheet.costpercapita_ay84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az84
  r = spreadsheet.costpercapita_az84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba84
  r = spreadsheet.costpercapita_ba84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb84
  r = spreadsheet.costpercapita_bb84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc84
  r = spreadsheet.costpercapita_bc84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd84
  r = spreadsheet.costpercapita_bd84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be84
  r = spreadsheet.costpercapita_be84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf84
  r = spreadsheet.costpercapita_bf84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg84
  r = spreadsheet.costpercapita_bg84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi84
  r = spreadsheet.costpercapita_bi84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj84
  r = spreadsheet.costpercapita_bj84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk84
  r = spreadsheet.costpercapita_bk84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl84
  r = spreadsheet.costpercapita_bl84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm84
  r = spreadsheet.costpercapita_bm84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn84
  r = spreadsheet.costpercapita_bn84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo84
  r = spreadsheet.costpercapita_bo84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp84
  r = spreadsheet.costpercapita_bp84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq84
  r = spreadsheet.costpercapita_bq84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs84
  r = spreadsheet.costpercapita_bs84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt84
  r = spreadsheet.costpercapita_bt84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu84
  r = spreadsheet.costpercapita_bu84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv84
  r = spreadsheet.costpercapita_bv84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw84
  r = spreadsheet.costpercapita_bw84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx84
  r = spreadsheet.costpercapita_bx84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by84
  r = spreadsheet.costpercapita_by84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz84
  r = spreadsheet.costpercapita_bz84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca84
  r = spreadsheet.costpercapita_ca84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc84
  r = spreadsheet.costpercapita_cc84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd84
  r = spreadsheet.costpercapita_cd84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf84
  r = spreadsheet.costpercapita_cf84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg84
  r = spreadsheet.costpercapita_cg84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch84
  r = spreadsheet.costpercapita_ch84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci84
  r = spreadsheet.costpercapita_ci84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj84
  r = spreadsheet.costpercapita_cj84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck84
  r = spreadsheet.costpercapita_ck84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl84
  r = spreadsheet.costpercapita_cl84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm84
  r = spreadsheet.costpercapita_cm84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn84
  r = spreadsheet.costpercapita_cn84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp84
  r = spreadsheet.costpercapita_cp84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq84
  r = spreadsheet.costpercapita_cq84
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr84
  r = spreadsheet.costpercapita_cr84
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a85
  r = spreadsheet.costpercapita_a85
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b85
  r = spreadsheet.costpercapita_b85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c85
  r = spreadsheet.costpercapita_c85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e85
  r = spreadsheet.costpercapita_e85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f85
  r = spreadsheet.costpercapita_f85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g85
  r = spreadsheet.costpercapita_g85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h85
  r = spreadsheet.costpercapita_h85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i85
  r = spreadsheet.costpercapita_i85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j85
  r = spreadsheet.costpercapita_j85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k85
  r = spreadsheet.costpercapita_k85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l85
  r = spreadsheet.costpercapita_l85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m85
  r = spreadsheet.costpercapita_m85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o85
  r = spreadsheet.costpercapita_o85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p85
  r = spreadsheet.costpercapita_p85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q85
  r = spreadsheet.costpercapita_q85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r85
  r = spreadsheet.costpercapita_r85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s85
  r = spreadsheet.costpercapita_s85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t85
  r = spreadsheet.costpercapita_t85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u85
  r = spreadsheet.costpercapita_u85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v85
  r = spreadsheet.costpercapita_v85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w85
  r = spreadsheet.costpercapita_w85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y85
  r = spreadsheet.costpercapita_y85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z85
  r = spreadsheet.costpercapita_z85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa85
  r = spreadsheet.costpercapita_aa85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab85
  r = spreadsheet.costpercapita_ab85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac85
  r = spreadsheet.costpercapita_ac85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad85
  r = spreadsheet.costpercapita_ad85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae85
  r = spreadsheet.costpercapita_ae85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af85
  r = spreadsheet.costpercapita_af85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag85
  r = spreadsheet.costpercapita_ag85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai85
  r = spreadsheet.costpercapita_ai85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj85
  r = spreadsheet.costpercapita_aj85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak85
  r = spreadsheet.costpercapita_ak85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al85
  r = spreadsheet.costpercapita_al85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am85
  r = spreadsheet.costpercapita_am85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an85
  r = spreadsheet.costpercapita_an85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao85
  r = spreadsheet.costpercapita_ao85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap85
  r = spreadsheet.costpercapita_ap85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq85
  r = spreadsheet.costpercapita_aq85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as85
  r = spreadsheet.costpercapita_as85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at85
  r = spreadsheet.costpercapita_at85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av85
  r = spreadsheet.costpercapita_av85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw85
  r = spreadsheet.costpercapita_aw85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay85
  r = spreadsheet.costpercapita_ay85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az85
  r = spreadsheet.costpercapita_az85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba85
  r = spreadsheet.costpercapita_ba85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb85
  r = spreadsheet.costpercapita_bb85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc85
  r = spreadsheet.costpercapita_bc85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd85
  r = spreadsheet.costpercapita_bd85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be85
  r = spreadsheet.costpercapita_be85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf85
  r = spreadsheet.costpercapita_bf85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg85
  r = spreadsheet.costpercapita_bg85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi85
  r = spreadsheet.costpercapita_bi85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj85
  r = spreadsheet.costpercapita_bj85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk85
  r = spreadsheet.costpercapita_bk85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl85
  r = spreadsheet.costpercapita_bl85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm85
  r = spreadsheet.costpercapita_bm85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn85
  r = spreadsheet.costpercapita_bn85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo85
  r = spreadsheet.costpercapita_bo85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp85
  r = spreadsheet.costpercapita_bp85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq85
  r = spreadsheet.costpercapita_bq85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs85
  r = spreadsheet.costpercapita_bs85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt85
  r = spreadsheet.costpercapita_bt85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu85
  r = spreadsheet.costpercapita_bu85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv85
  r = spreadsheet.costpercapita_bv85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw85
  r = spreadsheet.costpercapita_bw85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx85
  r = spreadsheet.costpercapita_bx85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by85
  r = spreadsheet.costpercapita_by85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz85
  r = spreadsheet.costpercapita_bz85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca85
  r = spreadsheet.costpercapita_ca85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc85
  r = spreadsheet.costpercapita_cc85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd85
  r = spreadsheet.costpercapita_cd85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf85
  r = spreadsheet.costpercapita_cf85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg85
  r = spreadsheet.costpercapita_cg85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch85
  r = spreadsheet.costpercapita_ch85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci85
  r = spreadsheet.costpercapita_ci85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj85
  r = spreadsheet.costpercapita_cj85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck85
  r = spreadsheet.costpercapita_ck85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl85
  r = spreadsheet.costpercapita_cl85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm85
  r = spreadsheet.costpercapita_cm85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn85
  r = spreadsheet.costpercapita_cn85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp85
  r = spreadsheet.costpercapita_cp85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq85
  r = spreadsheet.costpercapita_cq85
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr85
  r = spreadsheet.costpercapita_cr85
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a86
  r = spreadsheet.costpercapita_a86
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.ICE",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b86
  r = spreadsheet.costpercapita_b86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c86
  r = spreadsheet.costpercapita_c86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e86
  r = spreadsheet.costpercapita_e86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25163.07630151787,r[:number],0.001)
end

def test_costpercapita_f86
  r = spreadsheet.costpercapita_f86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54558.71180734722,r[:number],0.001)
end

def test_costpercapita_g86
  r = spreadsheet.costpercapita_g86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70579.61102753565,r[:number],0.001)
end

def test_costpercapita_h86
  r = spreadsheet.costpercapita_h86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83101.82222647233,r[:number],0.001)
end

def test_costpercapita_i86
  r = spreadsheet.costpercapita_i86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96884.57670809783,r[:number],0.001)
end

def test_costpercapita_j86
  r = spreadsheet.costpercapita_j86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109935.68819001062,r[:number],0.001)
end

def test_costpercapita_k86
  r = spreadsheet.costpercapita_k86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123366.07058277118,r[:number],0.001)
end

def test_costpercapita_l86
  r = spreadsheet.costpercapita_l86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139126.63849554458,r[:number],0.001)
end

def test_costpercapita_m86
  r = spreadsheet.costpercapita_m86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154764.80281427392,r[:number],0.001)
end

def test_costpercapita_o86
  r = spreadsheet.costpercapita_o86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27533.355005153106,r[:number],0.001)
end

def test_costpercapita_p86
  r = spreadsheet.costpercapita_p86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42091.13281075496,r[:number],0.001)
end

def test_costpercapita_q86
  r = spreadsheet.costpercapita_q86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58621.209657533545,r[:number],0.001)
end

def test_costpercapita_r86
  r = spreadsheet.costpercapita_r86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74820.72054661822,r[:number],0.001)
end

def test_costpercapita_s86
  r = spreadsheet.costpercapita_s86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91767.59653606373,r[:number],0.001)
end

def test_costpercapita_t86
  r = spreadsheet.costpercapita_t86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109044.72241633153,r[:number],0.001)
end

def test_costpercapita_u86
  r = spreadsheet.costpercapita_u86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126872.70960237825,r[:number],0.001)
end

def test_costpercapita_v86
  r = spreadsheet.costpercapita_v86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146413.9885393308,r[:number],0.001)
end

def test_costpercapita_w86
  r = spreadsheet.costpercapita_w86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166531.4606695184,r[:number],0.001)
end

def test_costpercapita_y86
  r = spreadsheet.costpercapita_y86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z86
  r = spreadsheet.costpercapita_z86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa86
  r = spreadsheet.costpercapita_aa86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab86
  r = spreadsheet.costpercapita_ab86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac86
  r = spreadsheet.costpercapita_ac86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad86
  r = spreadsheet.costpercapita_ad86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae86
  r = spreadsheet.costpercapita_ae86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af86
  r = spreadsheet.costpercapita_af86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag86
  r = spreadsheet.costpercapita_ag86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai86
  r = spreadsheet.costpercapita_ai86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52696.43130667097,r[:number],0.001)
end

def test_costpercapita_aj86
  r = spreadsheet.costpercapita_aj86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96649.84461810219,r[:number],0.001)
end

def test_costpercapita_ak86
  r = spreadsheet.costpercapita_ak86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129200.8206850692,r[:number],0.001)
end

def test_costpercapita_al86
  r = spreadsheet.costpercapita_al86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157922.54277309056,r[:number],0.001)
end

def test_costpercapita_am86
  r = spreadsheet.costpercapita_am86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188652.17324416153,r[:number],0.001)
end

def test_costpercapita_an86
  r = spreadsheet.costpercapita_an86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218980.41060634216,r[:number],0.001)
end

def test_costpercapita_ao86
  r = spreadsheet.costpercapita_ao86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(250238.78018514943,r[:number],0.001)
end

def test_costpercapita_ap86
  r = spreadsheet.costpercapita_ap86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285540.62703487533,r[:number],0.001)
end

def test_costpercapita_aq86
  r = spreadsheet.costpercapita_aq86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(321296.2634837923,r[:number],0.001)
end

def test_costpercapita_as86
  r = spreadsheet.costpercapita_as86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189019.76599302818,r[:number],0.001)
end

def test_costpercapita_at86
  r = spreadsheet.costpercapita_at86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3636644.8049212773,r[:number],0.001)
end

def test_costpercapita_av86
  r = spreadsheet.costpercapita_av86
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw86
  r = spreadsheet.costpercapita_aw86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay86
  r = spreadsheet.costpercapita_ay86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8288.31155654384,r[:number],0.001)
end

def test_costpercapita_az86
  r = spreadsheet.costpercapita_az86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29951.266435290316,r[:number],0.001)
end

def test_costpercapita_ba86
  r = spreadsheet.costpercapita_ba86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38746.3095215565,r[:number],0.001)
end

def test_costpercapita_bb86
  r = spreadsheet.costpercapita_bb86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45620.66691662647,r[:number],0.001)
end

def test_costpercapita_bc86
  r = spreadsheet.costpercapita_bc86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53187.02869490741,r[:number],0.001)
end

def test_costpercapita_bd86
  r = spreadsheet.costpercapita_bd86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60351.73813034547,r[:number],0.001)
end

def test_costpercapita_be86
  r = spreadsheet.costpercapita_be86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67724.65710236624,r[:number],0.001)
end

def test_costpercapita_bf86
  r = spreadsheet.costpercapita_bf86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76376.78529765463,r[:number],0.001)
end

def test_costpercapita_bg86
  r = spreadsheet.costpercapita_bg86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84961.71720959243,r[:number],0.001)
end

def test_costpercapita_bi86
  r = spreadsheet.costpercapita_bi86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8288.31155654384,r[:number],0.001)
end

def test_costpercapita_bj86
  r = spreadsheet.costpercapita_bj86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37966.27034428289,r[:number],0.001)
end

def test_costpercapita_bk86
  r = spreadsheet.costpercapita_bk86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75469.63439538858,r[:number],0.001)
end

def test_costpercapita_bl86
  r = spreadsheet.costpercapita_bl86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111240.93935444979,r[:number],0.001)
end

def test_costpercapita_bm86
  r = spreadsheet.costpercapita_bm86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134082.14258828544,r[:number],0.001)
end

def test_costpercapita_bn86
  r = spreadsheet.costpercapita_bn86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155614.945077195,r[:number],0.001)
end

def test_costpercapita_bo86
  r = spreadsheet.costpercapita_bo86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177615.91378389767,r[:number],0.001)
end

def test_costpercapita_bp86
  r = spreadsheet.costpercapita_bp86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200636.9123434903,r[:number],0.001)
end

def test_costpercapita_bq86
  r = spreadsheet.costpercapita_bq86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225048.221617716,r[:number],0.001)
end

def test_costpercapita_bs86
  r = spreadsheet.costpercapita_bs86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35821.66656169695,r[:number],0.001)
end

def test_costpercapita_bt86
  r = spreadsheet.costpercapita_bt86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80057.40315503786,r[:number],0.001)
end

def test_costpercapita_bu86
  r = spreadsheet.costpercapita_bu86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134090.84405292213,r[:number],0.001)
end

def test_costpercapita_bv86
  r = spreadsheet.costpercapita_bv86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186061.659901068,r[:number],0.001)
end

def test_costpercapita_bw86
  r = spreadsheet.costpercapita_bw86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225849.73912434914,r[:number],0.001)
end

def test_costpercapita_bx86
  r = spreadsheet.costpercapita_bx86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(264659.66749352653,r[:number],0.001)
end

def test_costpercapita_by86
  r = spreadsheet.costpercapita_by86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(304488.62338627595,r[:number],0.001)
end

def test_costpercapita_bz86
  r = spreadsheet.costpercapita_bz86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(347050.90088282106,r[:number],0.001)
end

def test_costpercapita_ca86
  r = spreadsheet.costpercapita_ca86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391579.6822872344,r[:number],0.001)
end

def test_costpercapita_cc86
  r = spreadsheet.costpercapita_cc86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218851.1318716591,r[:number],0.001)
end

def test_costpercapita_cd86
  r = spreadsheet.costpercapita_cd86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4125669.395490204,r[:number],0.001)
end

def test_costpercapita_cf86
  r = spreadsheet.costpercapita_cf86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-16874.764744974033,r[:number],0.001)
end

def test_costpercapita_cg86
  r = spreadsheet.costpercapita_cg86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-16592.441463064326,r[:number],0.001)
end

def test_costpercapita_ch86
  r = spreadsheet.costpercapita_ch86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4890.02336785293,r[:number],0.001)
end

def test_costpercapita_ci86
  r = spreadsheet.costpercapita_ci86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28139.117127977446,r[:number],0.001)
end

def test_costpercapita_cj86
  r = spreadsheet.costpercapita_cj86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37197.56588018761,r[:number],0.001)
end

def test_costpercapita_ck86
  r = spreadsheet.costpercapita_ck86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45679.25688718439,r[:number],0.001)
end

def test_costpercapita_cl86
  r = spreadsheet.costpercapita_cl86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54249.8432011265,r[:number],0.001)
end

def test_costpercapita_cm86
  r = spreadsheet.costpercapita_cm86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61510.273847945726,r[:number],0.001)
end

def test_costpercapita_cn86
  r = spreadsheet.costpercapita_cn86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70283.41880344208,r[:number],0.001)
end

def test_costpercapita_cp86
  r = spreadsheet.costpercapita_cp86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29831.365878630928,r[:number],0.001)
end

def test_costpercapita_cq86
  r = spreadsheet.costpercapita_cq86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489024.590568926,r[:number],0.001)
end

def test_costpercapita_cr86
  r = spreadsheet.costpercapita_cr86
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a87
  r = spreadsheet.costpercapita_a87
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.HEV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b87
  r = spreadsheet.costpercapita_b87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hybrid cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c87
  r = spreadsheet.costpercapita_c87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e87
  r = spreadsheet.costpercapita_e87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.96276709975272,r[:number],0.001)
end

def test_costpercapita_f87
  r = spreadsheet.costpercapita_f87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(847.8967457357554,r[:number],0.001)
end

def test_costpercapita_g87
  r = spreadsheet.costpercapita_g87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1661.7426774445767,r[:number],0.001)
end

def test_costpercapita_h87
  r = spreadsheet.costpercapita_h87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9580.86270705548,r[:number],0.001)
end

def test_costpercapita_i87
  r = spreadsheet.costpercapita_i87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16648.130552611576,r[:number],0.001)
end

def test_costpercapita_j87
  r = spreadsheet.costpercapita_j87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26146.333086846353,r[:number],0.001)
end

def test_costpercapita_k87
  r = spreadsheet.costpercapita_k87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36333.44409987636,r[:number],0.001)
end

def test_costpercapita_l87
  r = spreadsheet.costpercapita_l87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45127.20444302831,r[:number],0.001)
end

def test_costpercapita_m87
  r = spreadsheet.costpercapita_m87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55314.6334434446,r[:number],0.001)
end

def test_costpercapita_o87
  r = spreadsheet.costpercapita_o87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.65868137461477,r[:number],0.001)
end

def test_costpercapita_p87
  r = spreadsheet.costpercapita_p87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(408.2221864984275,r[:number],0.001)
end

def test_costpercapita_q87
  r = spreadsheet.costpercapita_q87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1014.176211332687,r[:number],0.001)
end

def test_costpercapita_r87
  r = spreadsheet.costpercapita_r87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4952.834080789015,r[:number],0.001)
end

def test_costpercapita_s87
  r = spreadsheet.costpercapita_s87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10236.196949772733,r[:number],0.001)
end

def test_costpercapita_t87
  r = spreadsheet.costpercapita_t87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17256.56147272972,r[:number],0.001)
end

def test_costpercapita_u87
  r = spreadsheet.costpercapita_u87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25356.46324324952,r[:number],0.001)
end

def test_costpercapita_v87
  r = spreadsheet.costpercapita_v87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33161.08924195722,r[:number],0.001)
end

def test_costpercapita_w87
  r = spreadsheet.costpercapita_w87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40806.611857889766,r[:number],0.001)
end

def test_costpercapita_y87
  r = spreadsheet.costpercapita_y87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z87
  r = spreadsheet.costpercapita_z87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa87
  r = spreadsheet.costpercapita_aa87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab87
  r = spreadsheet.costpercapita_ab87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac87
  r = spreadsheet.costpercapita_ac87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad87
  r = spreadsheet.costpercapita_ad87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae87
  r = spreadsheet.costpercapita_ae87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af87
  r = spreadsheet.costpercapita_af87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag87
  r = spreadsheet.costpercapita_ag87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai87
  r = spreadsheet.costpercapita_ai87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.6214484743675,r[:number],0.001)
end

def test_costpercapita_aj87
  r = spreadsheet.costpercapita_aj87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1256.118932234183,r[:number],0.001)
end

def test_costpercapita_ak87
  r = spreadsheet.costpercapita_ak87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2675.9188887772634,r[:number],0.001)
end

def test_costpercapita_al87
  r = spreadsheet.costpercapita_al87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14533.696787844494,r[:number],0.001)
end

def test_costpercapita_am87
  r = spreadsheet.costpercapita_am87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26884.32750238431,r[:number],0.001)
end

def test_costpercapita_an87
  r = spreadsheet.costpercapita_an87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43402.894559576074,r[:number],0.001)
end

def test_costpercapita_ao87
  r = spreadsheet.costpercapita_ao87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61689.90734312588,r[:number],0.001)
end

def test_costpercapita_ap87
  r = spreadsheet.costpercapita_ap87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78288.29368498553,r[:number],0.001)
end

def test_costpercapita_aq87
  r = spreadsheet.costpercapita_aq87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96121.24530133438,r[:number],0.001)
end

def test_costpercapita_as87
  r = spreadsheet.costpercapita_as87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36106.33604985961,r[:number],0.001)
end

def test_costpercapita_at87
  r = spreadsheet.costpercapita_at87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(575243.7476511952,r[:number],0.001)
end

def test_costpercapita_av87
  r = spreadsheet.costpercapita_av87
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw87
  r = spreadsheet.costpercapita_aw87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay87
  r = spreadsheet.costpercapita_ay87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.99721375952007,r[:number],0.001)
end

def test_costpercapita_az87
  r = spreadsheet.costpercapita_az87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(465.4725249163102,r[:number],0.001)
end

def test_costpercapita_ba87
  r = spreadsheet.costpercapita_ba87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(912.2520680983653,r[:number],0.001)
end

def test_costpercapita_bb87
  r = spreadsheet.costpercapita_bb87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5259.63612616513,r[:number],0.001)
end

def test_costpercapita_bc87
  r = spreadsheet.costpercapita_bc87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9139.376229986743,r[:number],0.001)
end

def test_costpercapita_bd87
  r = spreadsheet.costpercapita_bd87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14353.634142889028,r[:number],0.001)
end

def test_costpercapita_be87
  r = spreadsheet.costpercapita_be87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19946.084295204626,r[:number],0.001)
end

def test_costpercapita_bf87
  r = spreadsheet.costpercapita_bf87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24773.622378139447,r[:number],0.001)
end

def test_costpercapita_bg87
  r = spreadsheet.costpercapita_bg87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30366.24709698373,r[:number],0.001)
end

def test_costpercapita_bi87
  r = spreadsheet.costpercapita_bi87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.99721375952007,r[:number],0.001)
end

def test_costpercapita_bj87
  r = spreadsheet.costpercapita_bj87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(491.57950368252483,r[:number],0.001)
end

def test_costpercapita_bk87
  r = spreadsheet.costpercapita_bk87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1387.7381680325639,r[:number],0.001)
end

def test_costpercapita_bl87
  r = spreadsheet.costpercapita_bl87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6579.93471237773,r[:number],0.001)
end

def test_costpercapita_bm87
  r = spreadsheet.costpercapita_bm87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15115.172698548487,r[:number],0.001)
end

def test_costpercapita_bn87
  r = spreadsheet.costpercapita_bn87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28273.158493396997,r[:number],0.001)
end

def test_costpercapita_bo87
  r = spreadsheet.costpercapita_bo87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42727.38052560182,r[:number],0.001)
end

def test_costpercapita_bp87
  r = spreadsheet.costpercapita_bp87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58089.12772910299,r[:number],0.001)
end

def test_costpercapita_bq87
  r = spreadsheet.costpercapita_bq87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73860.94863129669,r[:number],0.001)
end

def test_costpercapita_bs87
  r = spreadsheet.costpercapita_bs87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.65589513413484,r[:number],0.001)
end

def test_costpercapita_bt87
  r = spreadsheet.costpercapita_bt87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(899.8016901809524,r[:number],0.001)
end

def test_costpercapita_bu87
  r = spreadsheet.costpercapita_bu87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2401.914379365251,r[:number],0.001)
end

def test_costpercapita_bv87
  r = spreadsheet.costpercapita_bv87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11532.768793166746,r[:number],0.001)
end

def test_costpercapita_bw87
  r = spreadsheet.costpercapita_bw87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25351.369648321222,r[:number],0.001)
end

def test_costpercapita_bx87
  r = spreadsheet.costpercapita_bx87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45529.71996612672,r[:number],0.001)
end

def test_costpercapita_by87
  r = spreadsheet.costpercapita_by87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68083.84376885134,r[:number],0.001)
end

def test_costpercapita_bz87
  r = spreadsheet.costpercapita_bz87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91250.21697106022,r[:number],0.001)
end

def test_costpercapita_ca87
  r = spreadsheet.costpercapita_ca87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114667.56048918648,r[:number],0.001)
end

def test_costpercapita_cc87
  r = spreadsheet.costpercapita_cc87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39974.09462237701,r[:number],0.001)
end

def test_costpercapita_cd87
  r = spreadsheet.costpercapita_cd87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(620300.6498577469,r[:number],0.001)
end

def test_costpercapita_cf87
  r = spreadsheet.costpercapita_cf87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-54.96555334023265,r[:number],0.001)
end

def test_costpercapita_cg87
  r = spreadsheet.costpercapita_cg87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-356.31724205323053,r[:number],0.001)
end

def test_costpercapita_ch87
  r = spreadsheet.costpercapita_ch87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-274.0045094120129,r[:number],0.001)
end

def test_costpercapita_ci87
  r = spreadsheet.costpercapita_ci87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3000.9279946777488,r[:number],0.001)
end

def test_costpercapita_cj87
  r = spreadsheet.costpercapita_cj87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1532.9578540630894,r[:number],0.001)
end

def test_costpercapita_ck87
  r = spreadsheet.costpercapita_ck87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2126.8254065506444,r[:number],0.001)
end

def test_costpercapita_cl87
  r = spreadsheet.costpercapita_cl87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6393.9364257254565,r[:number],0.001)
end

def test_costpercapita_cm87
  r = spreadsheet.costpercapita_cm87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12961.923286074676,r[:number],0.001)
end

def test_costpercapita_cn87
  r = spreadsheet.costpercapita_cn87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18546.31518785209,r[:number],0.001)
end

def test_costpercapita_cp87
  r = spreadsheet.costpercapita_cp87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3867.7585725173944,r[:number],0.001)
end

def test_costpercapita_cq87
  r = spreadsheet.costpercapita_cq87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45056.90220655173,r[:number],0.001)
end

def test_costpercapita_cr87
  r = spreadsheet.costpercapita_cr87
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a88
  r = spreadsheet.costpercapita_a88
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.EV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b88
  r = spreadsheet.costpercapita_b88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electric cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c88
  r = spreadsheet.costpercapita_c88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e88
  r = spreadsheet.costpercapita_e88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f88
  r = spreadsheet.costpercapita_f88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.61943652907686,r[:number],0.001)
end

def test_costpercapita_g88
  r = spreadsheet.costpercapita_g88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.48068964611673,r[:number],0.001)
end

def test_costpercapita_h88
  r = spreadsheet.costpercapita_h88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1587.4603018750342,r[:number],0.001)
end

def test_costpercapita_i88
  r = spreadsheet.costpercapita_i88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2855.9469945679007,r[:number],0.001)
end

def test_costpercapita_j88
  r = spreadsheet.costpercapita_j88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4633.887850085629,r[:number],0.001)
end

def test_costpercapita_k88
  r = spreadsheet.costpercapita_k88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6649.883766617527,r[:number],0.001)
end

def test_costpercapita_l88
  r = spreadsheet.costpercapita_l88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7531.091182714237,r[:number],0.001)
end

def test_costpercapita_m88
  r = spreadsheet.costpercapita_m88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9125.423524096876,r[:number],0.001)
end

def test_costpercapita_o88
  r = spreadsheet.costpercapita_o88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p88
  r = spreadsheet.costpercapita_p88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.42251046289125,r[:number],0.001)
end

def test_costpercapita_q88
  r = spreadsheet.costpercapita_q88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.21949619161796,r[:number],0.001)
end

def test_costpercapita_r88
  r = spreadsheet.costpercapita_r88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(482.9889476335037,r[:number],0.001)
end

def test_costpercapita_s88
  r = spreadsheet.costpercapita_s88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1028.2095525119344,r[:number],0.001)
end

def test_costpercapita_t88
  r = spreadsheet.costpercapita_t88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1774.9901435797722,r[:number],0.001)
end

def test_costpercapita_u88
  r = spreadsheet.costpercapita_u88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2668.8618228679793,r[:number],0.001)
end

def test_costpercapita_v88
  r = spreadsheet.costpercapita_v88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3319.7113284875068,r[:number],0.001)
end

def test_costpercapita_w88
  r = spreadsheet.costpercapita_w88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3995.3847696008893,r[:number],0.001)
end

def test_costpercapita_y88
  r = spreadsheet.costpercapita_y88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z88
  r = spreadsheet.costpercapita_z88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa88
  r = spreadsheet.costpercapita_aa88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab88
  r = spreadsheet.costpercapita_ab88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac88
  r = spreadsheet.costpercapita_ac88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad88
  r = spreadsheet.costpercapita_ad88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae88
  r = spreadsheet.costpercapita_ae88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af88
  r = spreadsheet.costpercapita_af88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag88
  r = spreadsheet.costpercapita_ag88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai88
  r = spreadsheet.costpercapita_ai88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj88
  r = spreadsheet.costpercapita_aj88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.0419469919681,r[:number],0.001)
end

def test_costpercapita_ak88
  r = spreadsheet.costpercapita_ak88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313.7001858377347,r[:number],0.001)
end

def test_costpercapita_al88
  r = spreadsheet.costpercapita_al88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2070.449249508538,r[:number],0.001)
end

def test_costpercapita_am88
  r = spreadsheet.costpercapita_am88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3884.156547079835,r[:number],0.001)
end

def test_costpercapita_an88
  r = spreadsheet.costpercapita_an88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6408.877993665401,r[:number],0.001)
end

def test_costpercapita_ao88
  r = spreadsheet.costpercapita_ao88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9318.745589485507,r[:number],0.001)
end

def test_costpercapita_ap88
  r = spreadsheet.costpercapita_ap88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10850.802511201744,r[:number],0.001)
end

def test_costpercapita_aq88
  r = spreadsheet.costpercapita_aq88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13120.808293697766,r[:number],0.001)
end

def test_costpercapita_as88
  r = spreadsheet.costpercapita_as88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5123.3980352742765,r[:number],0.001)
end

def test_costpercapita_at88
  r = spreadsheet.costpercapita_at88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81879.0934909862,r[:number],0.001)
end

def test_costpercapita_av88
  r = spreadsheet.costpercapita_av88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw88
  r = spreadsheet.costpercapita_aw88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay88
  r = spreadsheet.costpercapita_ay88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az88
  r = spreadsheet.costpercapita_az88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.178124468229,r[:number],0.001)
end

def test_costpercapita_ba88
  r = spreadsheet.costpercapita_ba88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.88078473210768,r[:number],0.001)
end

def test_costpercapita_bb88
  r = spreadsheet.costpercapita_bb88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(871.4730403605797,r[:number],0.001)
end

def test_costpercapita_bc88
  r = spreadsheet.costpercapita_bc88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1567.838142172751,r[:number],0.001)
end

def test_costpercapita_bd88
  r = spreadsheet.costpercapita_bd88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2543.8798870335286,r[:number],0.001)
end

def test_costpercapita_be88
  r = spreadsheet.costpercapita_be88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3650.6074623054365,r[:number],0.001)
end

def test_costpercapita_bf88
  r = spreadsheet.costpercapita_bf88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4134.366649975846,r[:number],0.001)
end

def test_costpercapita_bg88
  r = spreadsheet.costpercapita_bg88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5009.6122553297655,r[:number],0.001)
end

def test_costpercapita_bi88
  r = spreadsheet.costpercapita_bi88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj88
  r = spreadsheet.costpercapita_bj88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.178124468229,r[:number],0.001)
end

def test_costpercapita_bk88
  r = spreadsheet.costpercapita_bk88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.0887887078645,r[:number],0.001)
end

def test_costpercapita_bl88
  r = spreadsheet.costpercapita_bl88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1048.8927639819544,r[:number],0.001)
end

def test_costpercapita_bm88
  r = spreadsheet.costpercapita_bm88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2533.210325212122,r[:number],0.001)
end

def test_costpercapita_bn88
  r = spreadsheet.costpercapita_bn88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4902.4834527744515,r[:number],0.001)
end

def test_costpercapita_bo88
  r = spreadsheet.costpercapita_bo88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7638.493502090685,r[:number],0.001)
end

def test_costpercapita_bp88
  r = spreadsheet.costpercapita_bp88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10152.117273083884,r[:number],0.001)
end

def test_costpercapita_bq88
  r = spreadsheet.costpercapita_bq88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12577.842182503999,r[:number],0.001)
end

def test_costpercapita_bs88
  r = spreadsheet.costpercapita_bs88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt88
  r = spreadsheet.costpercapita_bt88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.60063493112025,r[:number],0.001)
end

def test_costpercapita_bu88
  r = spreadsheet.costpercapita_bu88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.30828489948243,r[:number],0.001)
end

def test_costpercapita_bv88
  r = spreadsheet.costpercapita_bv88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1531.8817116154582,r[:number],0.001)
end

def test_costpercapita_bw88
  r = spreadsheet.costpercapita_bw88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3561.4198777240563,r[:number],0.001)
end

def test_costpercapita_bx88
  r = spreadsheet.costpercapita_bx88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6677.473596354223,r[:number],0.001)
end

def test_costpercapita_by88
  r = spreadsheet.costpercapita_by88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10307.355324958664,r[:number],0.001)
end

def test_costpercapita_bz88
  r = spreadsheet.costpercapita_bz88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13471.82860157139,r[:number],0.001)
end

def test_costpercapita_ca88
  r = spreadsheet.costpercapita_ca88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16573.226952104887,r[:number],0.001)
end

def test_costpercapita_cc88
  r = spreadsheet.costpercapita_cc88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5831.788331573253,r[:number],0.001)
end

def test_costpercapita_cd88
  r = spreadsheet.costpercapita_cd88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90028.51325129777,r[:number],0.001)
end

def test_costpercapita_cf88
  r = spreadsheet.costpercapita_cf88
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg88
  r = spreadsheet.costpercapita_cg88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-49.44131206084786,r[:number],0.001)
end

def test_costpercapita_ch88
  r = spreadsheet.costpercapita_ch88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-44.39190093825225,r[:number],0.001)
end

def test_costpercapita_ci88
  r = spreadsheet.costpercapita_ci88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-538.5675378930797,r[:number],0.001)
end

def test_costpercapita_cj88
  r = spreadsheet.costpercapita_cj88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-322.736669355779,r[:number],0.001)
end

def test_costpercapita_ck88
  r = spreadsheet.costpercapita_ck88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(268.59560268882296,r[:number],0.001)
end

def test_costpercapita_cl88
  r = spreadsheet.costpercapita_cl88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(988.6097354731576,r[:number],0.001)
end

def test_costpercapita_cm88
  r = spreadsheet.costpercapita_cm88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2621.0260903696467,r[:number],0.001)
end

def test_costpercapita_cn88
  r = spreadsheet.costpercapita_cn88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3452.418658407122,r[:number],0.001)
end

def test_costpercapita_cp88
  r = spreadsheet.costpercapita_cp88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(708.3902962989768,r[:number],0.001)
end

def test_costpercapita_cq88
  r = spreadsheet.costpercapita_cq88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8149.41976031159,r[:number],0.001)
end

def test_costpercapita_cr88
  r = spreadsheet.costpercapita_cr88
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a89
  r = spreadsheet.costpercapita_a89
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.FCV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b89
  r = spreadsheet.costpercapita_b89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel cell cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c89
  r = spreadsheet.costpercapita_c89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e89
  r = spreadsheet.costpercapita_e89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f89
  r = spreadsheet.costpercapita_f89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g89
  r = spreadsheet.costpercapita_g89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h89
  r = spreadsheet.costpercapita_h89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i89
  r = spreadsheet.costpercapita_i89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j89
  r = spreadsheet.costpercapita_j89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k89
  r = spreadsheet.costpercapita_k89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l89
  r = spreadsheet.costpercapita_l89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m89
  r = spreadsheet.costpercapita_m89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o89
  r = spreadsheet.costpercapita_o89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p89
  r = spreadsheet.costpercapita_p89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q89
  r = spreadsheet.costpercapita_q89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r89
  r = spreadsheet.costpercapita_r89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s89
  r = spreadsheet.costpercapita_s89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t89
  r = spreadsheet.costpercapita_t89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u89
  r = spreadsheet.costpercapita_u89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v89
  r = spreadsheet.costpercapita_v89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w89
  r = spreadsheet.costpercapita_w89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y89
  r = spreadsheet.costpercapita_y89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z89
  r = spreadsheet.costpercapita_z89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa89
  r = spreadsheet.costpercapita_aa89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab89
  r = spreadsheet.costpercapita_ab89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac89
  r = spreadsheet.costpercapita_ac89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad89
  r = spreadsheet.costpercapita_ad89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae89
  r = spreadsheet.costpercapita_ae89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af89
  r = spreadsheet.costpercapita_af89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag89
  r = spreadsheet.costpercapita_ag89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai89
  r = spreadsheet.costpercapita_ai89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj89
  r = spreadsheet.costpercapita_aj89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak89
  r = spreadsheet.costpercapita_ak89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al89
  r = spreadsheet.costpercapita_al89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am89
  r = spreadsheet.costpercapita_am89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an89
  r = spreadsheet.costpercapita_an89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao89
  r = spreadsheet.costpercapita_ao89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap89
  r = spreadsheet.costpercapita_ap89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq89
  r = spreadsheet.costpercapita_aq89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as89
  r = spreadsheet.costpercapita_as89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at89
  r = spreadsheet.costpercapita_at89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av89
  r = spreadsheet.costpercapita_av89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw89
  r = spreadsheet.costpercapita_aw89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay89
  r = spreadsheet.costpercapita_ay89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az89
  r = spreadsheet.costpercapita_az89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba89
  r = spreadsheet.costpercapita_ba89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb89
  r = spreadsheet.costpercapita_bb89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc89
  r = spreadsheet.costpercapita_bc89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd89
  r = spreadsheet.costpercapita_bd89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be89
  r = spreadsheet.costpercapita_be89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf89
  r = spreadsheet.costpercapita_bf89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg89
  r = spreadsheet.costpercapita_bg89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi89
  r = spreadsheet.costpercapita_bi89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj89
  r = spreadsheet.costpercapita_bj89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk89
  r = spreadsheet.costpercapita_bk89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl89
  r = spreadsheet.costpercapita_bl89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm89
  r = spreadsheet.costpercapita_bm89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn89
  r = spreadsheet.costpercapita_bn89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo89
  r = spreadsheet.costpercapita_bo89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp89
  r = spreadsheet.costpercapita_bp89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq89
  r = spreadsheet.costpercapita_bq89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs89
  r = spreadsheet.costpercapita_bs89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt89
  r = spreadsheet.costpercapita_bt89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu89
  r = spreadsheet.costpercapita_bu89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv89
  r = spreadsheet.costpercapita_bv89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw89
  r = spreadsheet.costpercapita_bw89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx89
  r = spreadsheet.costpercapita_bx89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by89
  r = spreadsheet.costpercapita_by89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz89
  r = spreadsheet.costpercapita_bz89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca89
  r = spreadsheet.costpercapita_ca89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc89
  r = spreadsheet.costpercapita_cc89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd89
  r = spreadsheet.costpercapita_cd89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf89
  r = spreadsheet.costpercapita_cf89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg89
  r = spreadsheet.costpercapita_cg89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch89
  r = spreadsheet.costpercapita_ch89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci89
  r = spreadsheet.costpercapita_ci89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj89
  r = spreadsheet.costpercapita_cj89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck89
  r = spreadsheet.costpercapita_ck89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl89
  r = spreadsheet.costpercapita_cl89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm89
  r = spreadsheet.costpercapita_cm89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn89
  r = spreadsheet.costpercapita_cn89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp89
  r = spreadsheet.costpercapita_cp89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq89
  r = spreadsheet.costpercapita_cq89
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr89
  r = spreadsheet.costpercapita_cr89
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a90
  r = spreadsheet.costpercapita_a90
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Bike",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b90
  r = spreadsheet.costpercapita_b90
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bikes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c90
  r = spreadsheet.costpercapita_c90
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e90
  r = spreadsheet.costpercapita_e90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1960.5044441010261,r[:number],0.001)
end

def test_costpercapita_f90
  r = spreadsheet.costpercapita_f90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2738.878194871683,r[:number],0.001)
end

def test_costpercapita_g90
  r = spreadsheet.costpercapita_g90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3545.399760574622,r[:number],0.001)
end

def test_costpercapita_h90
  r = spreadsheet.costpercapita_h90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4352.095392437399,r[:number],0.001)
end

def test_costpercapita_i90
  r = spreadsheet.costpercapita_i90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5167.707510703018,r[:number],0.001)
end

def test_costpercapita_j90
  r = spreadsheet.costpercapita_j90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6031.867192656414,r[:number],0.001)
end

def test_costpercapita_k90
  r = spreadsheet.costpercapita_k90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7011.316872481114,r[:number],0.001)
end

def test_costpercapita_l90
  r = spreadsheet.costpercapita_l90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8245.743449674226,r[:number],0.001)
end

def test_costpercapita_m90
  r = spreadsheet.costpercapita_m90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10091.717547329612,r[:number],0.001)
end

def test_costpercapita_o90
  r = spreadsheet.costpercapita_o90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969.1043127250674,r[:number],0.001)
end

def test_costpercapita_p90
  r = spreadsheet.costpercapita_p90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1464.6407459206857,r[:number],0.001)
end

def test_costpercapita_q90
  r = spreadsheet.costpercapita_q90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2037.5860692957592,r[:number],0.001)
end

def test_costpercapita_r90
  r = spreadsheet.costpercapita_r90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2703.1648400232284,r[:number],0.001)
end

def test_costpercapita_s90
  r = spreadsheet.costpercapita_s90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3491.6942639885247,r[:number],0.001)
end

def test_costpercapita_t90
  r = spreadsheet.costpercapita_t90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4468.049772338083,r[:number],0.001)
end

def test_costpercapita_u90
  r = spreadsheet.costpercapita_u90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5746.981043017304,r[:number],0.001)
end

def test_costpercapita_v90
  r = spreadsheet.costpercapita_v90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7564.902247407541,r[:number],0.001)
end

def test_costpercapita_w90
  r = spreadsheet.costpercapita_w90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10512.205778468347,r[:number],0.001)
end

def test_costpercapita_y90
  r = spreadsheet.costpercapita_y90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z90
  r = spreadsheet.costpercapita_z90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa90
  r = spreadsheet.costpercapita_aa90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab90
  r = spreadsheet.costpercapita_ab90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac90
  r = spreadsheet.costpercapita_ac90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad90
  r = spreadsheet.costpercapita_ad90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae90
  r = spreadsheet.costpercapita_ae90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af90
  r = spreadsheet.costpercapita_af90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag90
  r = spreadsheet.costpercapita_ag90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai90
  r = spreadsheet.costpercapita_ai90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2929.6087568260937,r[:number],0.001)
end

def test_costpercapita_aj90
  r = spreadsheet.costpercapita_aj90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4203.518940792369,r[:number],0.001)
end

def test_costpercapita_ak90
  r = spreadsheet.costpercapita_ak90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5582.985829870381,r[:number],0.001)
end

def test_costpercapita_al90
  r = spreadsheet.costpercapita_al90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7055.260232460628,r[:number],0.001)
end

def test_costpercapita_am90
  r = spreadsheet.costpercapita_am90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8659.401774691543,r[:number],0.001)
end

def test_costpercapita_an90
  r = spreadsheet.costpercapita_an90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10499.916964994498,r[:number],0.001)
end

def test_costpercapita_ao90
  r = spreadsheet.costpercapita_ao90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12758.297915498417,r[:number],0.001)
end

def test_costpercapita_ap90
  r = spreadsheet.costpercapita_ap90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15810.645697081767,r[:number],0.001)
end

def test_costpercapita_aq90
  r = spreadsheet.costpercapita_aq90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20603.923325797958,r[:number],0.001)
end

def test_costpercapita_as90
  r = spreadsheet.costpercapita_as90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9789.284382001517,r[:number],0.001)
end

def test_costpercapita_at90
  r = spreadsheet.costpercapita_at90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179779.8572239667,r[:number],0.001)
end

def test_costpercapita_av90
  r = spreadsheet.costpercapita_av90
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw90
  r = spreadsheet.costpercapita_aw90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay90
  r = spreadsheet.costpercapita_ay90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7585489941829,r[:number],0.001)
end

def test_costpercapita_az90
  r = spreadsheet.costpercapita_az90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1503.5705175385335,r[:number],0.001)
end

def test_costpercapita_ba90
  r = spreadsheet.costpercapita_ba90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1946.3291806366458,r[:number],0.001)
end

def test_costpercapita_bb90
  r = spreadsheet.costpercapita_bb90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2389.18340137822,r[:number],0.001)
end

def test_costpercapita_bc90
  r = spreadsheet.costpercapita_bc90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2836.9325335110534,r[:number],0.001)
end

def test_costpercapita_bd90
  r = spreadsheet.costpercapita_bd90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3311.3329733201244,r[:number],0.001)
end

def test_costpercapita_be90
  r = spreadsheet.costpercapita_be90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3849.0245233694945,r[:number],0.001)
end

def test_costpercapita_bf90
  r = spreadsheet.costpercapita_bf90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4526.6915371888235,r[:number],0.001)
end

def test_costpercapita_bg90
  r = spreadsheet.costpercapita_bg90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5540.081703488086,r[:number],0.001)
end

def test_costpercapita_bi90
  r = spreadsheet.costpercapita_bi90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7585489941829,r[:number],0.001)
end

def test_costpercapita_bj90
  r = spreadsheet.costpercapita_bj90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2128.0351336601793,r[:number],0.001)
end

def test_costpercapita_bk90
  r = spreadsheet.costpercapita_bk90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4004.6963799340965,r[:number],0.001)
end

def test_costpercapita_bl90
  r = spreadsheet.costpercapita_bl90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5684.562249270633,r[:number],0.001)
end

def test_costpercapita_bm90
  r = spreadsheet.costpercapita_bm90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6995.379585743599,r[:number],0.001)
end

def test_costpercapita_bn90
  r = spreadsheet.costpercapita_bn90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8350.608802194965,r[:number],0.001)
end

def test_costpercapita_bo90
  r = spreadsheet.costpercapita_bo90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9800.768980743982,r[:number],0.001)
end

def test_costpercapita_bp90
  r = spreadsheet.costpercapita_bp90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11475.004688794588,r[:number],0.001)
end

def test_costpercapita_bq90
  r = spreadsheet.costpercapita_bq90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13684.145163698342,r[:number],0.001)
end

def test_costpercapita_bs90
  r = spreadsheet.costpercapita_bs90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1614.86286171925,r[:number],0.001)
end

def test_costpercapita_bt90
  r = spreadsheet.costpercapita_bt90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3592.6758795808655,r[:number],0.001)
end

def test_costpercapita_bu90
  r = spreadsheet.costpercapita_bu90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6042.282449229856,r[:number],0.001)
end

def test_costpercapita_bv90
  r = spreadsheet.costpercapita_bv90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8387.727089293863,r[:number],0.001)
end

def test_costpercapita_bw90
  r = spreadsheet.costpercapita_bw90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10487.073849732124,r[:number],0.001)
end

def test_costpercapita_bx90
  r = spreadsheet.costpercapita_bx90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12818.658574533049,r[:number],0.001)
end

def test_costpercapita_by90
  r = spreadsheet.costpercapita_by90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15547.750023761284,r[:number],0.001)
end

def test_costpercapita_bz90
  r = spreadsheet.costpercapita_bz90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19039.90693620213,r[:number],0.001)
end

def test_costpercapita_ca90
  r = spreadsheet.costpercapita_ca90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24196.350942166686,r[:number],0.001)
end

def test_costpercapita_cc90
  r = spreadsheet.costpercapita_cc90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11303.032067357677,r[:number],0.001)
end

def test_costpercapita_cd90
  r = spreadsheet.costpercapita_cd90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205689.89922786978,r[:number],0.001)
end

def test_costpercapita_cf90
  r = spreadsheet.costpercapita_cf90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1314.7458951068431,r[:number],0.001)
end

def test_costpercapita_cg90
  r = spreadsheet.costpercapita_cg90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-610.8430612115034,r[:number],0.001)
end

def test_costpercapita_ch90
  r = spreadsheet.costpercapita_ch90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(459.29661935947416,r[:number],0.001)
end

def test_costpercapita_ci90
  r = spreadsheet.costpercapita_ci90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1332.466856833235,r[:number],0.001)
end

def test_costpercapita_cj90
  r = spreadsheet.costpercapita_cj90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1827.6720750405805,r[:number],0.001)
end

def test_costpercapita_ck90
  r = spreadsheet.costpercapita_ck90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2318.7416095385515,r[:number],0.001)
end

def test_costpercapita_cl90
  r = spreadsheet.costpercapita_cl90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2789.452108262868,r[:number],0.001)
end

def test_costpercapita_cm90
  r = spreadsheet.costpercapita_cm90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3229.2612391203634,r[:number],0.001)
end

def test_costpercapita_cn90
  r = spreadsheet.costpercapita_cn90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3592.4276163687305,r[:number],0.001)
end

def test_costpercapita_cp90
  r = spreadsheet.costpercapita_cp90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1513.7476853561618,r[:number],0.001)
end

def test_costpercapita_cq90
  r = spreadsheet.costpercapita_cq90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25910.04200390307,r[:number],0.001)
end

def test_costpercapita_cr90
  r = spreadsheet.costpercapita_cr90
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a91
  r = spreadsheet.costpercapita_a91
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b91
  r = spreadsheet.costpercapita_b91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c91
  r = spreadsheet.costpercapita_c91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e91
  r = spreadsheet.costpercapita_e91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.501216483271584,r[:number],0.001)
end

def test_costpercapita_f91
  r = spreadsheet.costpercapita_f91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.15292809973744,r[:number],0.001)
end

def test_costpercapita_g91
  r = spreadsheet.costpercapita_g91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.99440193075776,r[:number],0.001)
end

def test_costpercapita_h91
  r = spreadsheet.costpercapita_h91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.98352872985473,r[:number],0.001)
end

def test_costpercapita_i91
  r = spreadsheet.costpercapita_i91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.5920424065155,r[:number],0.001)
end

def test_costpercapita_j91
  r = spreadsheet.costpercapita_j91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.1184860089451,r[:number],0.001)
end

def test_costpercapita_k91
  r = spreadsheet.costpercapita_k91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l91
  r = spreadsheet.costpercapita_l91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m91
  r = spreadsheet.costpercapita_m91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o91
  r = spreadsheet.costpercapita_o91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5793.314608237358,r[:number],0.001)
end

def test_costpercapita_p91
  r = spreadsheet.costpercapita_p91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7236.232790965874,r[:number],0.001)
end

def test_costpercapita_q91
  r = spreadsheet.costpercapita_q91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8079.501233181692,r[:number],0.001)
end

def test_costpercapita_r91
  r = spreadsheet.costpercapita_r91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8321.0047002276,r[:number],0.001)
end

def test_costpercapita_s91
  r = spreadsheet.costpercapita_s91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7971.074733478015,r[:number],0.001)
end

def test_costpercapita_t91
  r = spreadsheet.costpercapita_t91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7075.162853590919,r[:number],0.001)
end

def test_costpercapita_u91
  r = spreadsheet.costpercapita_u91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5668.609444366608,r[:number],0.001)
end

def test_costpercapita_v91
  r = spreadsheet.costpercapita_v91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3786.3720130727856,r[:number],0.001)
end

def test_costpercapita_w91
  r = spreadsheet.costpercapita_w91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1468.8658367689131,r[:number],0.001)
end

def test_costpercapita_y91
  r = spreadsheet.costpercapita_y91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z91
  r = spreadsheet.costpercapita_z91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa91
  r = spreadsheet.costpercapita_aa91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab91
  r = spreadsheet.costpercapita_ab91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac91
  r = spreadsheet.costpercapita_ac91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad91
  r = spreadsheet.costpercapita_ad91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae91
  r = spreadsheet.costpercapita_ae91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af91
  r = spreadsheet.costpercapita_af91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag91
  r = spreadsheet.costpercapita_ag91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai91
  r = spreadsheet.costpercapita_ai91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5849.81582472063,r[:number],0.001)
end

def test_costpercapita_aj91
  r = spreadsheet.costpercapita_aj91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7399.385719065612,r[:number],0.001)
end

def test_costpercapita_ak91
  r = spreadsheet.costpercapita_ak91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8221.495635112451,r[:number],0.001)
end

def test_costpercapita_al91
  r = spreadsheet.costpercapita_al91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8433.988228957454,r[:number],0.001)
end

def test_costpercapita_am91
  r = spreadsheet.costpercapita_am91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8047.6667758845315,r[:number],0.001)
end

def test_costpercapita_an91
  r = spreadsheet.costpercapita_an91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7111.281339599865,r[:number],0.001)
end

def test_costpercapita_ao91
  r = spreadsheet.costpercapita_ao91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5668.609444366608,r[:number],0.001)
end

def test_costpercapita_ap91
  r = spreadsheet.costpercapita_ap91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3786.3720130727856,r[:number],0.001)
end

def test_costpercapita_aq91
  r = spreadsheet.costpercapita_aq91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1468.8658367689131,r[:number],0.001)
end

def test_costpercapita_as91
  r = spreadsheet.costpercapita_as91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6220.831201949873,r[:number],0.001)
end

def test_costpercapita_at91
  r = spreadsheet.costpercapita_at91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144444.28289929917,r[:number],0.001)
end

def test_costpercapita_av91
  r = spreadsheet.costpercapita_av91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw91
  r = spreadsheet.costpercapita_aw91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay91
  r = spreadsheet.costpercapita_ay91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.61058957679339,r[:number],0.001)
end

def test_costpercapita_az91
  r = spreadsheet.costpercapita_az91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.56657254790488,r[:number],0.001)
end

def test_costpercapita_ba91
  r = spreadsheet.costpercapita_ba91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.95111034815716,r[:number],0.001)
end

def test_costpercapita_bb91
  r = spreadsheet.costpercapita_bb91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.024920671448946,r[:number],0.001)
end

def test_costpercapita_bc91
  r = spreadsheet.costpercapita_bc91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.04697275553474,r[:number],0.001)
end

def test_costpercapita_bd91
  r = spreadsheet.costpercapita_bd91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.828078080603415,r[:number],0.001)
end

def test_costpercapita_be91
  r = spreadsheet.costpercapita_be91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf91
  r = spreadsheet.costpercapita_bf91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg91
  r = spreadsheet.costpercapita_bg91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi91
  r = spreadsheet.costpercapita_bi91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.61058957679339,r[:number],0.001)
end

def test_costpercapita_bj91
  r = spreadsheet.costpercapita_bj91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.56347664460075,r[:number],0.001)
end

def test_costpercapita_bk91
  r = spreadsheet.costpercapita_bk91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.99315771174133,r[:number],0.001)
end

def test_costpercapita_bl91
  r = spreadsheet.costpercapita_bl91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.5142225563708,r[:number],0.001)
end

def test_costpercapita_bm91
  r = spreadsheet.costpercapita_bm91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.85114087955907,r[:number],0.001)
end

def test_costpercapita_bn91
  r = spreadsheet.costpercapita_bn91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.79387115545858,r[:number],0.001)
end

def test_costpercapita_bo91
  r = spreadsheet.costpercapita_bo91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.58615652953746,r[:number],0.001)
end

def test_costpercapita_bp91
  r = spreadsheet.costpercapita_bp91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.01812301167091,r[:number],0.001)
end

def test_costpercapita_bq91
  r = spreadsheet.costpercapita_bq91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs91
  r = spreadsheet.costpercapita_bs91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5811.925197814152,r[:number],0.001)
end

def test_costpercapita_bt91
  r = spreadsheet.costpercapita_bt91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7343.796267610474,r[:number],0.001)
end

def test_costpercapita_bu91
  r = spreadsheet.costpercapita_bu91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8261.494390893433,r[:number],0.001)
end

def test_costpercapita_bv91
  r = spreadsheet.costpercapita_bv91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8542.518922783971,r[:number],0.001)
end

def test_costpercapita_bw91
  r = spreadsheet.costpercapita_bw91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8146.925874357575,r[:number],0.001)
end

def test_costpercapita_bx91
  r = spreadsheet.costpercapita_bx91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7194.956724746377,r[:number],0.001)
end

def test_costpercapita_by91
  r = spreadsheet.costpercapita_by91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5728.195600896145,r[:number],0.001)
end

def test_costpercapita_bz91
  r = spreadsheet.costpercapita_bz91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3805.3901360844566,r[:number],0.001)
end

def test_costpercapita_ca91
  r = spreadsheet.costpercapita_ca91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1468.8658367689131,r[:number],0.001)
end

def test_costpercapita_cc91
  r = spreadsheet.costpercapita_cc91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6256.007661328388,r[:number],0.001)
end

def test_costpercapita_cd91
  r = spreadsheet.costpercapita_cd91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145199.8787754785,r[:number],0.001)
end

def test_costpercapita_cf91
  r = spreadsheet.costpercapita_cf91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-37.8906269064782,r[:number],0.001)
end

def test_costpercapita_cg91
  r = spreadsheet.costpercapita_cg91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-55.589451455136675,r[:number],0.001)
end

def test_costpercapita_ch91
  r = spreadsheet.costpercapita_ch91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.99875578098355,r[:number],0.001)
end

def test_costpercapita_ci91
  r = spreadsheet.costpercapita_ci91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.53069382651609,r[:number],0.001)
end

def test_costpercapita_cj91
  r = spreadsheet.costpercapita_cj91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.25909847304355,r[:number],0.001)
end

def test_costpercapita_ck91
  r = spreadsheet.costpercapita_ck91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.67538514651348,r[:number],0.001)
end

def test_costpercapita_cl91
  r = spreadsheet.costpercapita_cl91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.58615652953746,r[:number],0.001)
end

def test_costpercapita_cm91
  r = spreadsheet.costpercapita_cm91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.01812301167091,r[:number],0.001)
end

def test_costpercapita_cn91
  r = spreadsheet.costpercapita_cn91
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp91
  r = spreadsheet.costpercapita_cp91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.17645937851668,r[:number],0.001)
end

def test_costpercapita_cq91
  r = spreadsheet.costpercapita_cq91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(755.595876179327,r[:number],0.001)
end

def test_costpercapita_cr91
  r = spreadsheet.costpercapita_cr91
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a92
  r = spreadsheet.costpercapita_a92
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Air",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b92
  r = spreadsheet.costpercapita_b92
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c92
  r = spreadsheet.costpercapita_c92
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e92
  r = spreadsheet.costpercapita_e92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2457.276219024844,r[:number],0.001)
end

def test_costpercapita_f92
  r = spreadsheet.costpercapita_f92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8641.432143476595,r[:number],0.001)
end

def test_costpercapita_g92
  r = spreadsheet.costpercapita_g92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10161.524525163712,r[:number],0.001)
end

def test_costpercapita_h92
  r = spreadsheet.costpercapita_h92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11598.185621584524,r[:number],0.001)
end

def test_costpercapita_i92
  r = spreadsheet.costpercapita_i92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12880.804886829766,r[:number],0.001)
end

def test_costpercapita_j92
  r = spreadsheet.costpercapita_j92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14109.383483724208,r[:number],0.001)
end

def test_costpercapita_k92
  r = spreadsheet.costpercapita_k92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15296.153077198376,r[:number],0.001)
end

def test_costpercapita_l92
  r = spreadsheet.costpercapita_l92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16395.43440110144,r[:number],0.001)
end

def test_costpercapita_m92
  r = spreadsheet.costpercapita_m92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17333.234455482398,r[:number],0.001)
end

def test_costpercapita_o92
  r = spreadsheet.costpercapita_o92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1644.793999550656,r[:number],0.001)
end

def test_costpercapita_p92
  r = spreadsheet.costpercapita_p92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2515.4128971280898,r[:number],0.001)
end

def test_costpercapita_q92
  r = spreadsheet.costpercapita_q92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3499.3388261744167,r[:number],0.001)
end

def test_costpercapita_r92
  r = spreadsheet.costpercapita_r92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4597.51077875279,r[:number],0.001)
end

def test_costpercapita_s92
  r = spreadsheet.costpercapita_s92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5807.96614019896,r[:number],0.001)
end

def test_costpercapita_t92
  r = spreadsheet.costpercapita_t92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7145.770423413824,r[:number],0.001)
end

def test_costpercapita_u92
  r = spreadsheet.costpercapita_u92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8622.66349528015,r[:number],0.001)
end

def test_costpercapita_v92
  r = spreadsheet.costpercapita_v92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10247.47214379025,r[:number],0.001)
end

def test_costpercapita_w92
  r = spreadsheet.costpercapita_w92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12023.651063768335,r[:number],0.001)
end

def test_costpercapita_y92
  r = spreadsheet.costpercapita_y92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z92
  r = spreadsheet.costpercapita_z92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa92
  r = spreadsheet.costpercapita_aa92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab92
  r = spreadsheet.costpercapita_ab92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac92
  r = spreadsheet.costpercapita_ac92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad92
  r = spreadsheet.costpercapita_ad92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae92
  r = spreadsheet.costpercapita_ae92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af92
  r = spreadsheet.costpercapita_af92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag92
  r = spreadsheet.costpercapita_ag92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai92
  r = spreadsheet.costpercapita_ai92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4102.0702185755,r[:number],0.001)
end

def test_costpercapita_aj92
  r = spreadsheet.costpercapita_aj92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11156.845040604685,r[:number],0.001)
end

def test_costpercapita_ak92
  r = spreadsheet.costpercapita_ak92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13660.863351338128,r[:number],0.001)
end

def test_costpercapita_al92
  r = spreadsheet.costpercapita_al92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16195.696400337314,r[:number],0.001)
end

def test_costpercapita_am92
  r = spreadsheet.costpercapita_am92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18688.771027028724,r[:number],0.001)
end

def test_costpercapita_an92
  r = spreadsheet.costpercapita_an92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21255.153907138032,r[:number],0.001)
end

def test_costpercapita_ao92
  r = spreadsheet.costpercapita_ao92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23918.81657247853,r[:number],0.001)
end

def test_costpercapita_ap92
  r = spreadsheet.costpercapita_ap92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26642.90654489169,r[:number],0.001)
end

def test_costpercapita_aq92
  r = spreadsheet.costpercapita_aq92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29356.885519250733,r[:number],0.001)
end

def test_costpercapita_as92
  r = spreadsheet.costpercapita_as92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18330.889842404817,r[:number],0.001)
end

def test_costpercapita_at92
  r = spreadsheet.costpercapita_at92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(362223.0583731038,r[:number],0.001)
end

def test_costpercapita_av92
  r = spreadsheet.costpercapita_av92
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw92
  r = spreadsheet.costpercapita_aw92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay92
  r = spreadsheet.costpercapita_ay92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(809.3871607636232,r[:number],0.001)
end

def test_costpercapita_az92
  r = spreadsheet.costpercapita_az92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4743.9139953611375,r[:number],0.001)
end

def test_costpercapita_ba92
  r = spreadsheet.costpercapita_ba92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5578.403858152118,r[:number],0.001)
end

def test_costpercapita_bb92
  r = spreadsheet.costpercapita_bb92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6367.092187672416,r[:number],0.001)
end

def test_costpercapita_bc92
  r = spreadsheet.costpercapita_bc92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7071.215691981825,r[:number],0.001)
end

def test_costpercapita_bd92
  r = spreadsheet.costpercapita_bd92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7745.672321790399,r[:number],0.001)
end

def test_costpercapita_be92
  r = spreadsheet.costpercapita_be92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8397.17693240071,r[:number],0.001)
end

def test_costpercapita_bf92
  r = spreadsheet.costpercapita_bf92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9000.652834394525,r[:number],0.001)
end

def test_costpercapita_bg92
  r = spreadsheet.costpercapita_bg92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9515.479859471227,r[:number],0.001)
end

def test_costpercapita_bi92
  r = spreadsheet.costpercapita_bi92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(809.3871607636232,r[:number],0.001)
end

def test_costpercapita_bj92
  r = spreadsheet.costpercapita_bj92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5526.611558447674,r[:number],0.001)
end

def test_costpercapita_bk92
  r = spreadsheet.costpercapita_bk92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10924.084375936007,r[:number],0.001)
end

def test_costpercapita_bl92
  r = spreadsheet.costpercapita_bl92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16219.297086306915,r[:number],0.001)
end

def test_costpercapita_bm92
  r = spreadsheet.costpercapita_bm92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18522.351111723696,r[:number],0.001)
end

def test_costpercapita_bn92
  r = spreadsheet.costpercapita_bn92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20697.579087120586,r[:number],0.001)
end

def test_costpercapita_bo92
  r = spreadsheet.costpercapita_bo92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22735.05914417368,r[:number],0.001)
end

def test_costpercapita_bp92
  r = spreadsheet.costpercapita_bp92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24659.59367863317,r[:number],0.001)
end

def test_costpercapita_bq92
  r = spreadsheet.costpercapita_bq92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26424.255632346085,r[:number],0.001)
end

def test_costpercapita_bs92
  r = spreadsheet.costpercapita_bs92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2454.181160314279,r[:number],0.001)
end

def test_costpercapita_bt92
  r = spreadsheet.costpercapita_bt92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8042.024455575763,r[:number],0.001)
end

def test_costpercapita_bu92
  r = spreadsheet.costpercapita_bu92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14423.423202110425,r[:number],0.001)
end

def test_costpercapita_bv92
  r = spreadsheet.costpercapita_bv92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20816.807865059705,r[:number],0.001)
end

def test_costpercapita_bw92
  r = spreadsheet.costpercapita_bw92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24330.317251922657,r[:number],0.001)
end

def test_costpercapita_bx92
  r = spreadsheet.costpercapita_bx92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27843.349510534412,r[:number],0.001)
end

def test_costpercapita_by92
  r = spreadsheet.costpercapita_by92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31357.722639453827,r[:number],0.001)
end

def test_costpercapita_bz92
  r = spreadsheet.costpercapita_bz92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34907.06582242342,r[:number],0.001)
end

def test_costpercapita_ca92
  r = spreadsheet.costpercapita_ca92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38447.90669611442,r[:number],0.001)
end

def test_costpercapita_cc92
  r = spreadsheet.costpercapita_cc92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22513.64428927877,r[:number],0.001)
end

def test_costpercapita_cd92
  r = spreadsheet.costpercapita_cd92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430072.80713783245,r[:number],0.001)
end

def test_costpercapita_cf92
  r = spreadsheet.costpercapita_cf92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1647.8890582612207,r[:number],0.001)
end

def test_costpercapita_cg92
  r = spreadsheet.costpercapita_cg92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3114.820585028922,r[:number],0.001)
end

def test_costpercapita_ch92
  r = spreadsheet.costpercapita_ch92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(762.5598507722957,r[:number],0.001)
end

def test_costpercapita_ci92
  r = spreadsheet.costpercapita_ci92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4621.111464722392,r[:number],0.001)
end

def test_costpercapita_cj92
  r = spreadsheet.costpercapita_cj92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5641.546224893929,r[:number],0.001)
end

def test_costpercapita_ck92
  r = spreadsheet.costpercapita_ck92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6588.195603396378,r[:number],0.001)
end

def test_costpercapita_cl92
  r = spreadsheet.costpercapita_cl92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7438.9060669753035,r[:number],0.001)
end

def test_costpercapita_cm92
  r = spreadsheet.costpercapita_cm92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8264.15927753173,r[:number],0.001)
end

def test_costpercapita_cn92
  r = spreadsheet.costpercapita_cn92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9091.021176863687,r[:number],0.001)
end

def test_costpercapita_cp92
  r = spreadsheet.costpercapita_cp92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4182.7544468739525,r[:number],0.001)
end

def test_costpercapita_cq92
  r = spreadsheet.costpercapita_cq92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67849.74876472856,r[:number],0.001)
end

def test_costpercapita_cr92
  r = spreadsheet.costpercapita_cr92
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a93
  r = spreadsheet.costpercapita_a93
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b93
  r = spreadsheet.costpercapita_b93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c93
  r = spreadsheet.costpercapita_c93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e93
  r = spreadsheet.costpercapita_e93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.24147078333667,r[:number],0.001)
end

def test_costpercapita_f93
  r = spreadsheet.costpercapita_f93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.98887295633718,r[:number],0.001)
end

def test_costpercapita_g93
  r = spreadsheet.costpercapita_g93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.51977098254152,r[:number],0.001)
end

def test_costpercapita_h93
  r = spreadsheet.costpercapita_h93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.18853614187321,r[:number],0.001)
end

def test_costpercapita_i93
  r = spreadsheet.costpercapita_i93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.00527539404861,r[:number],0.001)
end

def test_costpercapita_j93
  r = spreadsheet.costpercapita_j93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.98544945912127,r[:number],0.001)
end

def test_costpercapita_k93
  r = spreadsheet.costpercapita_k93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.0191744121591,r[:number],0.001)
end

def test_costpercapita_l93
  r = spreadsheet.costpercapita_l93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.04846502480378,r[:number],0.001)
end

def test_costpercapita_m93
  r = spreadsheet.costpercapita_m93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.07208383394236,r[:number],0.001)
end

def test_costpercapita_o93
  r = spreadsheet.costpercapita_o93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.33805341280801,r[:number],0.001)
end

def test_costpercapita_p93
  r = spreadsheet.costpercapita_p93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.026886244722,r[:number],0.001)
end

def test_costpercapita_q93
  r = spreadsheet.costpercapita_q93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.10695824626555,r[:number],0.001)
end

def test_costpercapita_r93
  r = spreadsheet.costpercapita_r93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.20387391171141,r[:number],0.001)
end

def test_costpercapita_s93
  r = spreadsheet.costpercapita_s93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55166379487936,r[:number],0.001)
end

def test_costpercapita_t93
  r = spreadsheet.costpercapita_t93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18613584478634,r[:number],0.001)
end

def test_costpercapita_u93
  r = spreadsheet.costpercapita_u93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.94699136772934,r[:number],0.001)
end

def test_costpercapita_v93
  r = spreadsheet.costpercapita_v93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.74737348640706,r[:number],0.001)
end

def test_costpercapita_w93
  r = spreadsheet.costpercapita_w93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.58744013692298,r[:number],0.001)
end

def test_costpercapita_y93
  r = spreadsheet.costpercapita_y93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z93
  r = spreadsheet.costpercapita_z93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa93
  r = spreadsheet.costpercapita_aa93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab93
  r = spreadsheet.costpercapita_ab93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac93
  r = spreadsheet.costpercapita_ac93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad93
  r = spreadsheet.costpercapita_ad93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae93
  r = spreadsheet.costpercapita_ae93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af93
  r = spreadsheet.costpercapita_af93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag93
  r = spreadsheet.costpercapita_ag93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai93
  r = spreadsheet.costpercapita_ai93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.5795241961447,r[:number],0.001)
end

def test_costpercapita_aj93
  r = spreadsheet.costpercapita_aj93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.01575920105915,r[:number],0.001)
end

def test_costpercapita_ak93
  r = spreadsheet.costpercapita_ak93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.62672922880705,r[:number],0.001)
end

def test_costpercapita_al93
  r = spreadsheet.costpercapita_al93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.39241005358463,r[:number],0.001)
end

def test_costpercapita_am93
  r = spreadsheet.costpercapita_am93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.55693918892797,r[:number],0.001)
end

def test_costpercapita_an93
  r = spreadsheet.costpercapita_an93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.17158530390762,r[:number],0.001)
end

def test_costpercapita_ao93
  r = spreadsheet.costpercapita_ao93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.96616577988843,r[:number],0.001)
end

def test_costpercapita_ap93
  r = spreadsheet.costpercapita_ap93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.7958385112108,r[:number],0.001)
end

def test_costpercapita_aq93
  r = spreadsheet.costpercapita_aq93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.6595239708653,r[:number],0.001)
end

def test_costpercapita_as93
  r = spreadsheet.costpercapita_as93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.30716393715508,r[:number],0.001)
end

def test_costpercapita_at93
  r = spreadsheet.costpercapita_at93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4025.9371863516353,r[:number],0.001)
end

def test_costpercapita_av93
  r = spreadsheet.costpercapita_av93
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw93
  r = spreadsheet.costpercapita_aw93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay93
  r = spreadsheet.costpercapita_ay93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.12218869037523,r[:number],0.001)
end

def test_costpercapita_az93
  r = spreadsheet.costpercapita_az93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.71584893846753,r[:number],0.001)
end

def test_costpercapita_ba93
  r = spreadsheet.costpercapita_ba93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.90935143916551,r[:number],0.001)
end

def test_costpercapita_bb93
  r = spreadsheet.costpercapita_bb93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.72751241407015,r[:number],0.001)
end

def test_costpercapita_bc93
  r = spreadsheet.costpercapita_bc93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.626907188921,r[:number],0.001)
end

def test_costpercapita_bd93
  r = spreadsheet.costpercapita_bd93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.61602328349755,r[:number],0.001)
end

def test_costpercapita_be93
  r = spreadsheet.costpercapita_be93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.634537376306774,r[:number],0.001)
end

def test_costpercapita_bf93
  r = spreadsheet.costpercapita_bf93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.650617135419694,r[:number],0.001)
end

def test_costpercapita_bg93
  r = spreadsheet.costpercapita_bg93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.66358322684598,r[:number],0.001)
end

def test_costpercapita_bi93
  r = spreadsheet.costpercapita_bi93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.12218869037523,r[:number],0.001)
end

def test_costpercapita_bj93
  r = spreadsheet.costpercapita_bj93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.11930484726163,r[:number],0.001)
end

def test_costpercapita_bk93
  r = spreadsheet.costpercapita_bk93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.01284062524454,r[:number],0.001)
end

def test_costpercapita_bl93
  r = spreadsheet.costpercapita_bl93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.47093655674288,r[:number],0.001)
end

def test_costpercapita_bm93
  r = spreadsheet.costpercapita_bm93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.80135007262035,r[:number],0.001)
end

def test_costpercapita_bn93
  r = spreadsheet.costpercapita_bn93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.9676110464175,r[:number],0.001)
end

def test_costpercapita_bo93
  r = spreadsheet.costpercapita_bo93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.20826391138951,r[:number],0.001)
end

def test_costpercapita_bp93
  r = spreadsheet.costpercapita_bp93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.43148342773311,r[:number],0.001)
end

def test_costpercapita_bq93
  r = spreadsheet.costpercapita_bq93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.6363677190879,r[:number],0.001)
end

def test_costpercapita_bs93
  r = spreadsheet.costpercapita_bs93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.46024210318325,r[:number],0.001)
end

def test_costpercapita_bt93
  r = spreadsheet.costpercapita_bt93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.14619109198364,r[:number],0.001)
end

def test_costpercapita_bu93
  r = spreadsheet.costpercapita_bu93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(241.11979887151008,r[:number],0.001)
end

def test_costpercapita_bv93
  r = spreadsheet.costpercapita_bv93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.6748104684543,r[:number],0.001)
end

def test_costpercapita_bw93
  r = spreadsheet.costpercapita_bw93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.35301386749973,r[:number],0.001)
end

def test_costpercapita_bx93
  r = spreadsheet.costpercapita_bx93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.15374689120384,r[:number],0.001)
end

def test_costpercapita_by93
  r = spreadsheet.costpercapita_by93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236.15525527911882,r[:number],0.001)
end

def test_costpercapita_bz93
  r = spreadsheet.costpercapita_bz93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(238.17885691414017,r[:number],0.001)
end

def test_costpercapita_ca93
  r = spreadsheet.costpercapita_ca93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.2238078560109,r[:number],0.001)
end

def test_costpercapita_cc93
  r = spreadsheet.costpercapita_cc93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.6073025936783,r[:number],0.001)
end

def test_costpercapita_cd93
  r = spreadsheet.costpercapita_cd93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4737.9372427106855,r[:number],0.001)
end

def test_costpercapita_cf93
  r = spreadsheet.costpercapita_cf93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-106.11928209296144,r[:number],0.001)
end

def test_costpercapita_cg93
  r = spreadsheet.costpercapita_cg93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.13043189092446,r[:number],0.001)
end

def test_costpercapita_ch93
  r = spreadsheet.costpercapita_ch93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.49306964270302,r[:number],0.001)
end

def test_costpercapita_ci93
  r = spreadsheet.costpercapita_ci93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28240041486967,r[:number],0.001)
end

def test_costpercapita_cj93
  r = spreadsheet.costpercapita_cj93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.79607467857175,r[:number],0.001)
end

def test_costpercapita_ck93
  r = spreadsheet.costpercapita_ck93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.982161587296225,r[:number],0.001)
end

def test_costpercapita_cl93
  r = spreadsheet.costpercapita_cl93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.18908949923041,r[:number],0.001)
end

def test_costpercapita_cm93
  r = spreadsheet.costpercapita_cm93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.383018402929345,r[:number],0.001)
end

def test_costpercapita_cn93
  r = spreadsheet.costpercapita_cn93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.56428388514554,r[:number],0.001)
end

def test_costpercapita_cp93
  r = spreadsheet.costpercapita_cp93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.30013865652322,r[:number],0.001)
end

def test_costpercapita_cq93
  r = spreadsheet.costpercapita_cq93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(712.0000563590497,r[:number],0.001)
end

def test_costpercapita_cr93
  r = spreadsheet.costpercapita_cr93
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a94
  r = spreadsheet.costpercapita_a94
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b94
  r = spreadsheet.costpercapita_b94
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c94
  r = spreadsheet.costpercapita_c94
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e94
  r = spreadsheet.costpercapita_e94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f94
  r = spreadsheet.costpercapita_f94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g94
  r = spreadsheet.costpercapita_g94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h94
  r = spreadsheet.costpercapita_h94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i94
  r = spreadsheet.costpercapita_i94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j94
  r = spreadsheet.costpercapita_j94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k94
  r = spreadsheet.costpercapita_k94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l94
  r = spreadsheet.costpercapita_l94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m94
  r = spreadsheet.costpercapita_m94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o94
  r = spreadsheet.costpercapita_o94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p94
  r = spreadsheet.costpercapita_p94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q94
  r = spreadsheet.costpercapita_q94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r94
  r = spreadsheet.costpercapita_r94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s94
  r = spreadsheet.costpercapita_s94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t94
  r = spreadsheet.costpercapita_t94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u94
  r = spreadsheet.costpercapita_u94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v94
  r = spreadsheet.costpercapita_v94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w94
  r = spreadsheet.costpercapita_w94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y94
  r = spreadsheet.costpercapita_y94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z94
  r = spreadsheet.costpercapita_z94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa94
  r = spreadsheet.costpercapita_aa94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab94
  r = spreadsheet.costpercapita_ab94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac94
  r = spreadsheet.costpercapita_ac94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad94
  r = spreadsheet.costpercapita_ad94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae94
  r = spreadsheet.costpercapita_ae94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af94
  r = spreadsheet.costpercapita_af94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag94
  r = spreadsheet.costpercapita_ag94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai94
  r = spreadsheet.costpercapita_ai94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj94
  r = spreadsheet.costpercapita_aj94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak94
  r = spreadsheet.costpercapita_ak94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al94
  r = spreadsheet.costpercapita_al94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am94
  r = spreadsheet.costpercapita_am94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an94
  r = spreadsheet.costpercapita_an94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao94
  r = spreadsheet.costpercapita_ao94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap94
  r = spreadsheet.costpercapita_ap94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq94
  r = spreadsheet.costpercapita_aq94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as94
  r = spreadsheet.costpercapita_as94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at94
  r = spreadsheet.costpercapita_at94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av94
  r = spreadsheet.costpercapita_av94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw94
  r = spreadsheet.costpercapita_aw94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay94
  r = spreadsheet.costpercapita_ay94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az94
  r = spreadsheet.costpercapita_az94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba94
  r = spreadsheet.costpercapita_ba94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb94
  r = spreadsheet.costpercapita_bb94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc94
  r = spreadsheet.costpercapita_bc94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd94
  r = spreadsheet.costpercapita_bd94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be94
  r = spreadsheet.costpercapita_be94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf94
  r = spreadsheet.costpercapita_bf94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg94
  r = spreadsheet.costpercapita_bg94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi94
  r = spreadsheet.costpercapita_bi94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj94
  r = spreadsheet.costpercapita_bj94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk94
  r = spreadsheet.costpercapita_bk94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl94
  r = spreadsheet.costpercapita_bl94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm94
  r = spreadsheet.costpercapita_bm94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn94
  r = spreadsheet.costpercapita_bn94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo94
  r = spreadsheet.costpercapita_bo94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp94
  r = spreadsheet.costpercapita_bp94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq94
  r = spreadsheet.costpercapita_bq94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs94
  r = spreadsheet.costpercapita_bs94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt94
  r = spreadsheet.costpercapita_bt94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu94
  r = spreadsheet.costpercapita_bu94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv94
  r = spreadsheet.costpercapita_bv94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw94
  r = spreadsheet.costpercapita_bw94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx94
  r = spreadsheet.costpercapita_bx94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by94
  r = spreadsheet.costpercapita_by94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz94
  r = spreadsheet.costpercapita_bz94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca94
  r = spreadsheet.costpercapita_ca94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc94
  r = spreadsheet.costpercapita_cc94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd94
  r = spreadsheet.costpercapita_cd94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf94
  r = spreadsheet.costpercapita_cf94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg94
  r = spreadsheet.costpercapita_cg94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch94
  r = spreadsheet.costpercapita_ch94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci94
  r = spreadsheet.costpercapita_ci94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj94
  r = spreadsheet.costpercapita_cj94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck94
  r = spreadsheet.costpercapita_ck94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl94
  r = spreadsheet.costpercapita_cl94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm94
  r = spreadsheet.costpercapita_cm94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn94
  r = spreadsheet.costpercapita_cn94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp94
  r = spreadsheet.costpercapita_cp94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq94
  r = spreadsheet.costpercapita_cq94
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr94
  r = spreadsheet.costpercapita_cr94
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a95
  r = spreadsheet.costpercapita_a95
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.e",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b95
  r = spreadsheet.costpercapita_b95
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping (maritime bunkers)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c95
  r = spreadsheet.costpercapita_c95
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e95
  r = spreadsheet.costpercapita_e95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f95
  r = spreadsheet.costpercapita_f95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g95
  r = spreadsheet.costpercapita_g95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h95
  r = spreadsheet.costpercapita_h95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i95
  r = spreadsheet.costpercapita_i95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j95
  r = spreadsheet.costpercapita_j95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k95
  r = spreadsheet.costpercapita_k95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l95
  r = spreadsheet.costpercapita_l95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m95
  r = spreadsheet.costpercapita_m95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o95
  r = spreadsheet.costpercapita_o95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p95
  r = spreadsheet.costpercapita_p95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q95
  r = spreadsheet.costpercapita_q95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r95
  r = spreadsheet.costpercapita_r95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s95
  r = spreadsheet.costpercapita_s95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t95
  r = spreadsheet.costpercapita_t95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u95
  r = spreadsheet.costpercapita_u95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v95
  r = spreadsheet.costpercapita_v95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w95
  r = spreadsheet.costpercapita_w95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y95
  r = spreadsheet.costpercapita_y95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z95
  r = spreadsheet.costpercapita_z95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa95
  r = spreadsheet.costpercapita_aa95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab95
  r = spreadsheet.costpercapita_ab95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac95
  r = spreadsheet.costpercapita_ac95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad95
  r = spreadsheet.costpercapita_ad95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae95
  r = spreadsheet.costpercapita_ae95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af95
  r = spreadsheet.costpercapita_af95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag95
  r = spreadsheet.costpercapita_ag95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai95
  r = spreadsheet.costpercapita_ai95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj95
  r = spreadsheet.costpercapita_aj95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak95
  r = spreadsheet.costpercapita_ak95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al95
  r = spreadsheet.costpercapita_al95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am95
  r = spreadsheet.costpercapita_am95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an95
  r = spreadsheet.costpercapita_an95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao95
  r = spreadsheet.costpercapita_ao95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap95
  r = spreadsheet.costpercapita_ap95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq95
  r = spreadsheet.costpercapita_aq95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as95
  r = spreadsheet.costpercapita_as95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at95
  r = spreadsheet.costpercapita_at95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av95
  r = spreadsheet.costpercapita_av95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw95
  r = spreadsheet.costpercapita_aw95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay95
  r = spreadsheet.costpercapita_ay95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az95
  r = spreadsheet.costpercapita_az95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba95
  r = spreadsheet.costpercapita_ba95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb95
  r = spreadsheet.costpercapita_bb95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc95
  r = spreadsheet.costpercapita_bc95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd95
  r = spreadsheet.costpercapita_bd95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be95
  r = spreadsheet.costpercapita_be95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf95
  r = spreadsheet.costpercapita_bf95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg95
  r = spreadsheet.costpercapita_bg95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi95
  r = spreadsheet.costpercapita_bi95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj95
  r = spreadsheet.costpercapita_bj95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk95
  r = spreadsheet.costpercapita_bk95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl95
  r = spreadsheet.costpercapita_bl95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm95
  r = spreadsheet.costpercapita_bm95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn95
  r = spreadsheet.costpercapita_bn95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo95
  r = spreadsheet.costpercapita_bo95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp95
  r = spreadsheet.costpercapita_bp95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq95
  r = spreadsheet.costpercapita_bq95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs95
  r = spreadsheet.costpercapita_bs95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt95
  r = spreadsheet.costpercapita_bt95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu95
  r = spreadsheet.costpercapita_bu95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv95
  r = spreadsheet.costpercapita_bv95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw95
  r = spreadsheet.costpercapita_bw95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx95
  r = spreadsheet.costpercapita_bx95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by95
  r = spreadsheet.costpercapita_by95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz95
  r = spreadsheet.costpercapita_bz95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca95
  r = spreadsheet.costpercapita_ca95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc95
  r = spreadsheet.costpercapita_cc95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd95
  r = spreadsheet.costpercapita_cd95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf95
  r = spreadsheet.costpercapita_cf95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg95
  r = spreadsheet.costpercapita_cg95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch95
  r = spreadsheet.costpercapita_ch95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci95
  r = spreadsheet.costpercapita_ci95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj95
  r = spreadsheet.costpercapita_cj95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck95
  r = spreadsheet.costpercapita_ck95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl95
  r = spreadsheet.costpercapita_cl95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm95
  r = spreadsheet.costpercapita_cm95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn95
  r = spreadsheet.costpercapita_cn95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp95
  r = spreadsheet.costpercapita_cp95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq95
  r = spreadsheet.costpercapita_cq95
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr95
  r = spreadsheet.costpercapita_cr95
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a96
  r = spreadsheet.costpercapita_a96
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b96
  r = spreadsheet.costpercapita_b96
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c96
  r = spreadsheet.costpercapita_c96
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e96
  r = spreadsheet.costpercapita_e96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f96
  r = spreadsheet.costpercapita_f96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g96
  r = spreadsheet.costpercapita_g96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h96
  r = spreadsheet.costpercapita_h96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i96
  r = spreadsheet.costpercapita_i96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j96
  r = spreadsheet.costpercapita_j96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k96
  r = spreadsheet.costpercapita_k96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l96
  r = spreadsheet.costpercapita_l96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m96
  r = spreadsheet.costpercapita_m96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o96
  r = spreadsheet.costpercapita_o96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p96
  r = spreadsheet.costpercapita_p96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q96
  r = spreadsheet.costpercapita_q96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r96
  r = spreadsheet.costpercapita_r96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s96
  r = spreadsheet.costpercapita_s96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t96
  r = spreadsheet.costpercapita_t96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u96
  r = spreadsheet.costpercapita_u96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v96
  r = spreadsheet.costpercapita_v96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w96
  r = spreadsheet.costpercapita_w96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y96
  r = spreadsheet.costpercapita_y96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z96
  r = spreadsheet.costpercapita_z96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa96
  r = spreadsheet.costpercapita_aa96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab96
  r = spreadsheet.costpercapita_ab96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac96
  r = spreadsheet.costpercapita_ac96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad96
  r = spreadsheet.costpercapita_ad96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae96
  r = spreadsheet.costpercapita_ae96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af96
  r = spreadsheet.costpercapita_af96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag96
  r = spreadsheet.costpercapita_ag96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai96
  r = spreadsheet.costpercapita_ai96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj96
  r = spreadsheet.costpercapita_aj96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak96
  r = spreadsheet.costpercapita_ak96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al96
  r = spreadsheet.costpercapita_al96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am96
  r = spreadsheet.costpercapita_am96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an96
  r = spreadsheet.costpercapita_an96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao96
  r = spreadsheet.costpercapita_ao96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap96
  r = spreadsheet.costpercapita_ap96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq96
  r = spreadsheet.costpercapita_aq96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as96
  r = spreadsheet.costpercapita_as96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at96
  r = spreadsheet.costpercapita_at96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av96
  r = spreadsheet.costpercapita_av96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw96
  r = spreadsheet.costpercapita_aw96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay96
  r = spreadsheet.costpercapita_ay96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az96
  r = spreadsheet.costpercapita_az96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba96
  r = spreadsheet.costpercapita_ba96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb96
  r = spreadsheet.costpercapita_bb96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc96
  r = spreadsheet.costpercapita_bc96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd96
  r = spreadsheet.costpercapita_bd96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be96
  r = spreadsheet.costpercapita_be96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf96
  r = spreadsheet.costpercapita_bf96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg96
  r = spreadsheet.costpercapita_bg96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi96
  r = spreadsheet.costpercapita_bi96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj96
  r = spreadsheet.costpercapita_bj96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk96
  r = spreadsheet.costpercapita_bk96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl96
  r = spreadsheet.costpercapita_bl96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm96
  r = spreadsheet.costpercapita_bm96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn96
  r = spreadsheet.costpercapita_bn96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo96
  r = spreadsheet.costpercapita_bo96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp96
  r = spreadsheet.costpercapita_bp96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq96
  r = spreadsheet.costpercapita_bq96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs96
  r = spreadsheet.costpercapita_bs96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt96
  r = spreadsheet.costpercapita_bt96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu96
  r = spreadsheet.costpercapita_bu96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv96
  r = spreadsheet.costpercapita_bv96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw96
  r = spreadsheet.costpercapita_bw96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx96
  r = spreadsheet.costpercapita_bx96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by96
  r = spreadsheet.costpercapita_by96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz96
  r = spreadsheet.costpercapita_bz96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca96
  r = spreadsheet.costpercapita_ca96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc96
  r = spreadsheet.costpercapita_cc96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd96
  r = spreadsheet.costpercapita_cd96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf96
  r = spreadsheet.costpercapita_cf96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg96
  r = spreadsheet.costpercapita_cg96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch96
  r = spreadsheet.costpercapita_ch96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci96
  r = spreadsheet.costpercapita_ci96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj96
  r = spreadsheet.costpercapita_cj96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck96
  r = spreadsheet.costpercapita_ck96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl96
  r = spreadsheet.costpercapita_cl96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm96
  r = spreadsheet.costpercapita_cm96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn96
  r = spreadsheet.costpercapita_cn96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp96
  r = spreadsheet.costpercapita_cp96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq96
  r = spreadsheet.costpercapita_cq96
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr96
  r = spreadsheet.costpercapita_cr96
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a97
  r = spreadsheet.costpercapita_a97
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b97
  r = spreadsheet.costpercapita_b97
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c97
  r = spreadsheet.costpercapita_c97
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e97
  r = spreadsheet.costpercapita_e97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number],0.001)
end

def test_costpercapita_f97
  r = spreadsheet.costpercapita_f97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_g97
  r = spreadsheet.costpercapita_g97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number],0.001)
end

def test_costpercapita_h97
  r = spreadsheet.costpercapita_h97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_i97
  r = spreadsheet.costpercapita_i97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_j97
  r = spreadsheet.costpercapita_j97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number],0.001)
end

def test_costpercapita_k97
  r = spreadsheet.costpercapita_k97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_l97
  r = spreadsheet.costpercapita_l97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number],0.001)
end

def test_costpercapita_m97
  r = spreadsheet.costpercapita_m97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number],0.001)
end

def test_costpercapita_o97
  r = spreadsheet.costpercapita_o97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number],0.001)
end

def test_costpercapita_p97
  r = spreadsheet.costpercapita_p97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number],0.001)
end

def test_costpercapita_q97
  r = spreadsheet.costpercapita_q97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number],0.001)
end

def test_costpercapita_r97
  r = spreadsheet.costpercapita_r97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number],0.001)
end

def test_costpercapita_s97
  r = spreadsheet.costpercapita_s97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number],0.001)
end

def test_costpercapita_t97
  r = spreadsheet.costpercapita_t97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number],0.001)
end

def test_costpercapita_u97
  r = spreadsheet.costpercapita_u97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number],0.001)
end

def test_costpercapita_v97
  r = spreadsheet.costpercapita_v97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number],0.001)
end

def test_costpercapita_w97
  r = spreadsheet.costpercapita_w97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number],0.001)
end

def test_costpercapita_y97
  r = spreadsheet.costpercapita_y97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z97
  r = spreadsheet.costpercapita_z97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa97
  r = spreadsheet.costpercapita_aa97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab97
  r = spreadsheet.costpercapita_ab97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac97
  r = spreadsheet.costpercapita_ac97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad97
  r = spreadsheet.costpercapita_ad97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae97
  r = spreadsheet.costpercapita_ae97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af97
  r = spreadsheet.costpercapita_af97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag97
  r = spreadsheet.costpercapita_ag97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai97
  r = spreadsheet.costpercapita_ai97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number],0.001)
end

def test_costpercapita_aj97
  r = spreadsheet.costpercapita_aj97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number],0.001)
end

def test_costpercapita_ak97
  r = spreadsheet.costpercapita_ak97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number],0.001)
end

def test_costpercapita_al97
  r = spreadsheet.costpercapita_al97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number],0.001)
end

def test_costpercapita_am97
  r = spreadsheet.costpercapita_am97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number],0.001)
end

def test_costpercapita_an97
  r = spreadsheet.costpercapita_an97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number],0.001)
end

def test_costpercapita_ao97
  r = spreadsheet.costpercapita_ao97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number],0.001)
end

def test_costpercapita_ap97
  r = spreadsheet.costpercapita_ap97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number],0.001)
end

def test_costpercapita_aq97
  r = spreadsheet.costpercapita_aq97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number],0.001)
end

def test_costpercapita_as97
  r = spreadsheet.costpercapita_as97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number],0.001)
end

def test_costpercapita_at97
  r = spreadsheet.costpercapita_at97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number],0.001)
end

def test_costpercapita_av97
  r = spreadsheet.costpercapita_av97
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw97
  r = spreadsheet.costpercapita_aw97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay97
  r = spreadsheet.costpercapita_ay97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606622,r[:number],0.001)
end

def test_costpercapita_az97
  r = spreadsheet.costpercapita_az97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.276351288876631,r[:number],0.001)
end

def test_costpercapita_ba97
  r = spreadsheet.costpercapita_ba97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.08648224537465,r[:number],0.001)
end

def test_costpercapita_bb97
  r = spreadsheet.costpercapita_bb97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9177689518223235,r[:number],0.001)
end

def test_costpercapita_bc97
  r = spreadsheet.costpercapita_bc97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7861215830875212,r[:number],0.001)
end

def test_costpercapita_bd97
  r = spreadsheet.costpercapita_bd97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.684167852077093,r[:number],0.001)
end

def test_costpercapita_be97
  r = spreadsheet.costpercapita_be97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6029044736336295,r[:number],0.001)
end

def test_costpercapita_bf97
  r = spreadsheet.costpercapita_bf97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5365417900539673,r[:number],0.001)
end

def test_costpercapita_bg97
  r = spreadsheet.costpercapita_bg97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4817549919258617,r[:number],0.001)
end

def test_costpercapita_bi97
  r = spreadsheet.costpercapita_bi97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606622,r[:number],0.001)
end

def test_costpercapita_bj97
  r = spreadsheet.costpercapita_bj97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.726360079930724,r[:number],0.001)
end

def test_costpercapita_bk97
  r = spreadsheet.costpercapita_bk97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.690848188388101,r[:number],0.001)
end

def test_costpercapita_bl97
  r = spreadsheet.costpercapita_bl97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.073297976593124,r[:number],0.001)
end

def test_costpercapita_bm97
  r = spreadsheet.costpercapita_bm97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.618136295612384,r[:number],0.001)
end

def test_costpercapita_bn97
  r = spreadsheet.costpercapita_bn97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.249651097877796,r[:number],0.001)
end

def test_costpercapita_bo97
  r = spreadsheet.costpercapita_bo97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.958009111399691,r[:number],0.001)
end

def test_costpercapita_bp97
  r = spreadsheet.costpercapita_bp97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.722843102107811,r[:number],0.001)
end

def test_costpercapita_bq97
  r = spreadsheet.costpercapita_bq97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.531235823741631,r[:number],0.001)
end

def test_costpercapita_bs97
  r = spreadsheet.costpercapita_bs97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.661384269345847,r[:number],0.001)
end

def test_costpercapita_bt97
  r = spreadsheet.costpercapita_bt97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.87114145163831,r[:number],0.001)
end

def test_costpercapita_bu97
  r = spreadsheet.costpercapita_bu97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.915700762742697,r[:number],0.001)
end

def test_costpercapita_bv97
  r = spreadsheet.costpercapita_bv97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.560584553723462,r[:number],0.001)
end

def test_costpercapita_bw97
  r = spreadsheet.costpercapita_bw97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.52939014512137,r[:number],0.001)
end

def test_costpercapita_bx97
  r = spreadsheet.costpercapita_bx97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.711605489803889,r[:number],0.001)
end

def test_costpercapita_by97
  r = spreadsheet.costpercapita_by97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.05821658415058,r[:number],0.001)
end

def test_costpercapita_bz97
  r = spreadsheet.costpercapita_bz97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.523992306048214,r[:number],0.001)
end

def test_costpercapita_ca97
  r = spreadsheet.costpercapita_ca97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.082410954688166,r[:number],0.001)
end

def test_costpercapita_cc97
  r = spreadsheet.costpercapita_cc97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.990491835251394,r[:number],0.001)
end

def test_costpercapita_cd97
  r = spreadsheet.costpercapita_cd97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.1636695192746,r[:number],0.001)
end

def test_costpercapita_cf97
  r = spreadsheet.costpercapita_cf97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.0528440790564164,r[:number],0.001)
end

def test_costpercapita_cg97
  r = spreadsheet.costpercapita_cg97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.42020227697082074,r[:number],0.001)
end

def test_costpercapita_ch97
  r = spreadsheet.costpercapita_ch97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.89014801557623,r[:number],0.001)
end

def test_costpercapita_ci97
  r = spreadsheet.costpercapita_ci97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5799230376199187,r[:number],0.001)
end

def test_costpercapita_cj97
  r = spreadsheet.costpercapita_cj97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.364567939326274,r[:number],0.001)
end

def test_costpercapita_ck97
  r = spreadsheet.costpercapita_ck97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.181799904500287,r[:number],0.001)
end

def test_costpercapita_cl97
  r = spreadsheet.costpercapita_cl97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0381858905477235,r[:number],0.001)
end

def test_costpercapita_cm97
  r = spreadsheet.costpercapita_cm97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9239050042942099,r[:number],0.001)
end

def test_costpercapita_cn97
  r = spreadsheet.costpercapita_cn97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8320964151212418,r[:number],0.001)
end

def test_costpercapita_cp97
  r = spreadsheet.costpercapita_cp97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2597310945509608,r[:number],0.001)
end

def test_costpercapita_cq97
  r = spreadsheet.costpercapita_cq97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.151145613717038,r[:number],0.001)
end

def test_costpercapita_cr97
  r = spreadsheet.costpercapita_cr97
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a98
  r = spreadsheet.costpercapita_a98
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b98
  r = spreadsheet.costpercapita_b98
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c98
  r = spreadsheet.costpercapita_c98
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e98
  r = spreadsheet.costpercapita_e98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f98
  r = spreadsheet.costpercapita_f98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g98
  r = spreadsheet.costpercapita_g98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h98
  r = spreadsheet.costpercapita_h98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i98
  r = spreadsheet.costpercapita_i98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j98
  r = spreadsheet.costpercapita_j98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k98
  r = spreadsheet.costpercapita_k98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l98
  r = spreadsheet.costpercapita_l98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m98
  r = spreadsheet.costpercapita_m98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o98
  r = spreadsheet.costpercapita_o98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p98
  r = spreadsheet.costpercapita_p98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q98
  r = spreadsheet.costpercapita_q98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r98
  r = spreadsheet.costpercapita_r98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s98
  r = spreadsheet.costpercapita_s98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t98
  r = spreadsheet.costpercapita_t98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u98
  r = spreadsheet.costpercapita_u98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v98
  r = spreadsheet.costpercapita_v98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w98
  r = spreadsheet.costpercapita_w98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y98
  r = spreadsheet.costpercapita_y98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z98
  r = spreadsheet.costpercapita_z98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa98
  r = spreadsheet.costpercapita_aa98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab98
  r = spreadsheet.costpercapita_ab98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac98
  r = spreadsheet.costpercapita_ac98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad98
  r = spreadsheet.costpercapita_ad98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae98
  r = spreadsheet.costpercapita_ae98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af98
  r = spreadsheet.costpercapita_af98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag98
  r = spreadsheet.costpercapita_ag98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai98
  r = spreadsheet.costpercapita_ai98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj98
  r = spreadsheet.costpercapita_aj98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak98
  r = spreadsheet.costpercapita_ak98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al98
  r = spreadsheet.costpercapita_al98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am98
  r = spreadsheet.costpercapita_am98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an98
  r = spreadsheet.costpercapita_an98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao98
  r = spreadsheet.costpercapita_ao98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap98
  r = spreadsheet.costpercapita_ap98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq98
  r = spreadsheet.costpercapita_aq98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as98
  r = spreadsheet.costpercapita_as98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at98
  r = spreadsheet.costpercapita_at98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av98
  r = spreadsheet.costpercapita_av98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw98
  r = spreadsheet.costpercapita_aw98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay98
  r = spreadsheet.costpercapita_ay98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az98
  r = spreadsheet.costpercapita_az98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba98
  r = spreadsheet.costpercapita_ba98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb98
  r = spreadsheet.costpercapita_bb98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc98
  r = spreadsheet.costpercapita_bc98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd98
  r = spreadsheet.costpercapita_bd98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be98
  r = spreadsheet.costpercapita_be98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf98
  r = spreadsheet.costpercapita_bf98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg98
  r = spreadsheet.costpercapita_bg98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi98
  r = spreadsheet.costpercapita_bi98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj98
  r = spreadsheet.costpercapita_bj98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk98
  r = spreadsheet.costpercapita_bk98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl98
  r = spreadsheet.costpercapita_bl98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm98
  r = spreadsheet.costpercapita_bm98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn98
  r = spreadsheet.costpercapita_bn98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo98
  r = spreadsheet.costpercapita_bo98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp98
  r = spreadsheet.costpercapita_bp98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq98
  r = spreadsheet.costpercapita_bq98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs98
  r = spreadsheet.costpercapita_bs98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt98
  r = spreadsheet.costpercapita_bt98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu98
  r = spreadsheet.costpercapita_bu98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv98
  r = spreadsheet.costpercapita_bv98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw98
  r = spreadsheet.costpercapita_bw98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx98
  r = spreadsheet.costpercapita_bx98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by98
  r = spreadsheet.costpercapita_by98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz98
  r = spreadsheet.costpercapita_bz98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca98
  r = spreadsheet.costpercapita_ca98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc98
  r = spreadsheet.costpercapita_cc98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd98
  r = spreadsheet.costpercapita_cd98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf98
  r = spreadsheet.costpercapita_cf98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg98
  r = spreadsheet.costpercapita_cg98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch98
  r = spreadsheet.costpercapita_ch98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci98
  r = spreadsheet.costpercapita_ci98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj98
  r = spreadsheet.costpercapita_cj98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck98
  r = spreadsheet.costpercapita_ck98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl98
  r = spreadsheet.costpercapita_cl98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm98
  r = spreadsheet.costpercapita_cm98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn98
  r = spreadsheet.costpercapita_cn98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp98
  r = spreadsheet.costpercapita_cp98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq98
  r = spreadsheet.costpercapita_cq98
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr98
  r = spreadsheet.costpercapita_cr98
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a99
  r = spreadsheet.costpercapita_a99
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b99
  r = spreadsheet.costpercapita_b99
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c99
  r = spreadsheet.costpercapita_c99
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e99
  r = spreadsheet.costpercapita_e99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f99
  r = spreadsheet.costpercapita_f99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g99
  r = spreadsheet.costpercapita_g99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h99
  r = spreadsheet.costpercapita_h99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i99
  r = spreadsheet.costpercapita_i99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j99
  r = spreadsheet.costpercapita_j99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k99
  r = spreadsheet.costpercapita_k99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l99
  r = spreadsheet.costpercapita_l99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m99
  r = spreadsheet.costpercapita_m99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o99
  r = spreadsheet.costpercapita_o99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p99
  r = spreadsheet.costpercapita_p99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q99
  r = spreadsheet.costpercapita_q99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r99
  r = spreadsheet.costpercapita_r99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s99
  r = spreadsheet.costpercapita_s99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t99
  r = spreadsheet.costpercapita_t99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u99
  r = spreadsheet.costpercapita_u99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v99
  r = spreadsheet.costpercapita_v99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w99
  r = spreadsheet.costpercapita_w99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y99
  r = spreadsheet.costpercapita_y99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z99
  r = spreadsheet.costpercapita_z99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa99
  r = spreadsheet.costpercapita_aa99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab99
  r = spreadsheet.costpercapita_ab99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac99
  r = spreadsheet.costpercapita_ac99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad99
  r = spreadsheet.costpercapita_ad99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae99
  r = spreadsheet.costpercapita_ae99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af99
  r = spreadsheet.costpercapita_af99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag99
  r = spreadsheet.costpercapita_ag99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai99
  r = spreadsheet.costpercapita_ai99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj99
  r = spreadsheet.costpercapita_aj99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak99
  r = spreadsheet.costpercapita_ak99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al99
  r = spreadsheet.costpercapita_al99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am99
  r = spreadsheet.costpercapita_am99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an99
  r = spreadsheet.costpercapita_an99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao99
  r = spreadsheet.costpercapita_ao99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap99
  r = spreadsheet.costpercapita_ap99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq99
  r = spreadsheet.costpercapita_aq99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as99
  r = spreadsheet.costpercapita_as99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at99
  r = spreadsheet.costpercapita_at99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av99
  r = spreadsheet.costpercapita_av99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw99
  r = spreadsheet.costpercapita_aw99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay99
  r = spreadsheet.costpercapita_ay99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az99
  r = spreadsheet.costpercapita_az99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba99
  r = spreadsheet.costpercapita_ba99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb99
  r = spreadsheet.costpercapita_bb99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc99
  r = spreadsheet.costpercapita_bc99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd99
  r = spreadsheet.costpercapita_bd99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be99
  r = spreadsheet.costpercapita_be99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf99
  r = spreadsheet.costpercapita_bf99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg99
  r = spreadsheet.costpercapita_bg99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi99
  r = spreadsheet.costpercapita_bi99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj99
  r = spreadsheet.costpercapita_bj99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk99
  r = spreadsheet.costpercapita_bk99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl99
  r = spreadsheet.costpercapita_bl99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm99
  r = spreadsheet.costpercapita_bm99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn99
  r = spreadsheet.costpercapita_bn99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo99
  r = spreadsheet.costpercapita_bo99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp99
  r = spreadsheet.costpercapita_bp99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq99
  r = spreadsheet.costpercapita_bq99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs99
  r = spreadsheet.costpercapita_bs99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt99
  r = spreadsheet.costpercapita_bt99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu99
  r = spreadsheet.costpercapita_bu99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv99
  r = spreadsheet.costpercapita_bv99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw99
  r = spreadsheet.costpercapita_bw99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx99
  r = spreadsheet.costpercapita_bx99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by99
  r = spreadsheet.costpercapita_by99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz99
  r = spreadsheet.costpercapita_bz99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca99
  r = spreadsheet.costpercapita_ca99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc99
  r = spreadsheet.costpercapita_cc99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd99
  r = spreadsheet.costpercapita_cd99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf99
  r = spreadsheet.costpercapita_cf99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg99
  r = spreadsheet.costpercapita_cg99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch99
  r = spreadsheet.costpercapita_ch99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci99
  r = spreadsheet.costpercapita_ci99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj99
  r = spreadsheet.costpercapita_cj99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck99
  r = spreadsheet.costpercapita_ck99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl99
  r = spreadsheet.costpercapita_cl99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm99
  r = spreadsheet.costpercapita_cm99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn99
  r = spreadsheet.costpercapita_cn99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp99
  r = spreadsheet.costpercapita_cp99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq99
  r = spreadsheet.costpercapita_cq99
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr99
  r = spreadsheet.costpercapita_cr99
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a100
  r = spreadsheet.costpercapita_a100
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b100
  r = spreadsheet.costpercapita_b100
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c100
  r = spreadsheet.costpercapita_c100
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e100
  r = spreadsheet.costpercapita_e100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f100
  r = spreadsheet.costpercapita_f100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g100
  r = spreadsheet.costpercapita_g100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h100
  r = spreadsheet.costpercapita_h100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i100
  r = spreadsheet.costpercapita_i100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j100
  r = spreadsheet.costpercapita_j100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k100
  r = spreadsheet.costpercapita_k100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l100
  r = spreadsheet.costpercapita_l100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m100
  r = spreadsheet.costpercapita_m100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o100
  r = spreadsheet.costpercapita_o100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p100
  r = spreadsheet.costpercapita_p100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q100
  r = spreadsheet.costpercapita_q100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r100
  r = spreadsheet.costpercapita_r100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s100
  r = spreadsheet.costpercapita_s100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t100
  r = spreadsheet.costpercapita_t100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u100
  r = spreadsheet.costpercapita_u100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v100
  r = spreadsheet.costpercapita_v100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w100
  r = spreadsheet.costpercapita_w100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y100
  r = spreadsheet.costpercapita_y100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z100
  r = spreadsheet.costpercapita_z100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa100
  r = spreadsheet.costpercapita_aa100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab100
  r = spreadsheet.costpercapita_ab100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac100
  r = spreadsheet.costpercapita_ac100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad100
  r = spreadsheet.costpercapita_ad100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae100
  r = spreadsheet.costpercapita_ae100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af100
  r = spreadsheet.costpercapita_af100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag100
  r = spreadsheet.costpercapita_ag100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai100
  r = spreadsheet.costpercapita_ai100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj100
  r = spreadsheet.costpercapita_aj100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak100
  r = spreadsheet.costpercapita_ak100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al100
  r = spreadsheet.costpercapita_al100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am100
  r = spreadsheet.costpercapita_am100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an100
  r = spreadsheet.costpercapita_an100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao100
  r = spreadsheet.costpercapita_ao100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap100
  r = spreadsheet.costpercapita_ap100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq100
  r = spreadsheet.costpercapita_aq100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as100
  r = spreadsheet.costpercapita_as100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at100
  r = spreadsheet.costpercapita_at100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av100
  r = spreadsheet.costpercapita_av100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw100
  r = spreadsheet.costpercapita_aw100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay100
  r = spreadsheet.costpercapita_ay100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az100
  r = spreadsheet.costpercapita_az100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba100
  r = spreadsheet.costpercapita_ba100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb100
  r = spreadsheet.costpercapita_bb100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc100
  r = spreadsheet.costpercapita_bc100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd100
  r = spreadsheet.costpercapita_bd100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be100
  r = spreadsheet.costpercapita_be100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf100
  r = spreadsheet.costpercapita_bf100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg100
  r = spreadsheet.costpercapita_bg100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi100
  r = spreadsheet.costpercapita_bi100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj100
  r = spreadsheet.costpercapita_bj100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk100
  r = spreadsheet.costpercapita_bk100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl100
  r = spreadsheet.costpercapita_bl100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm100
  r = spreadsheet.costpercapita_bm100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn100
  r = spreadsheet.costpercapita_bn100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo100
  r = spreadsheet.costpercapita_bo100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp100
  r = spreadsheet.costpercapita_bp100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq100
  r = spreadsheet.costpercapita_bq100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs100
  r = spreadsheet.costpercapita_bs100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt100
  r = spreadsheet.costpercapita_bt100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu100
  r = spreadsheet.costpercapita_bu100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv100
  r = spreadsheet.costpercapita_bv100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw100
  r = spreadsheet.costpercapita_bw100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx100
  r = spreadsheet.costpercapita_bx100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by100
  r = spreadsheet.costpercapita_by100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz100
  r = spreadsheet.costpercapita_bz100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca100
  r = spreadsheet.costpercapita_ca100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc100
  r = spreadsheet.costpercapita_cc100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd100
  r = spreadsheet.costpercapita_cd100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf100
  r = spreadsheet.costpercapita_cf100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg100
  r = spreadsheet.costpercapita_cg100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch100
  r = spreadsheet.costpercapita_ch100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci100
  r = spreadsheet.costpercapita_ci100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj100
  r = spreadsheet.costpercapita_cj100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck100
  r = spreadsheet.costpercapita_ck100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl100
  r = spreadsheet.costpercapita_cl100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm100
  r = spreadsheet.costpercapita_cm100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn100
  r = spreadsheet.costpercapita_cn100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp100
  r = spreadsheet.costpercapita_cp100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq100
  r = spreadsheet.costpercapita_cq100
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr100
  r = spreadsheet.costpercapita_cr100
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a101
  r = spreadsheet.costpercapita_a101
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b101
  r = spreadsheet.costpercapita_b101
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel transfers",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c101
  r = spreadsheet.costpercapita_c101
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e101
  r = spreadsheet.costpercapita_e101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500.4312241564425,r[:number],0.001)
end

def test_costpercapita_f101
  r = spreadsheet.costpercapita_f101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_g101
  r = spreadsheet.costpercapita_g101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1906.4308746646147,r[:number],0.001)
end

def test_costpercapita_h101
  r = spreadsheet.costpercapita_h101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2293.781997881209,r[:number],0.001)
end

def test_costpercapita_i101
  r = spreadsheet.costpercapita_i101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2690.391312205348,r[:number],0.001)
end

def test_costpercapita_j101
  r = spreadsheet.costpercapita_j101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3123.251213771443,r[:number],0.001)
end

def test_costpercapita_k101
  r = spreadsheet.costpercapita_k101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3724.493428706379,r[:number],0.001)
end

def test_costpercapita_l101
  r = spreadsheet.costpercapita_l101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4290.639684618129,r[:number],0.001)
end

def test_costpercapita_m101
  r = spreadsheet.costpercapita_m101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4848.522385057311,r[:number],0.001)
end

def test_costpercapita_o101
  r = spreadsheet.costpercapita_o101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5434576982361696,r[:number],0.001)
end

def test_costpercapita_p101
  r = spreadsheet.costpercapita_p101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.667362589744029,r[:number],0.001)
end

def test_costpercapita_q101
  r = spreadsheet.costpercapita_q101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.707068196910889,r[:number],0.001)
end

def test_costpercapita_r101
  r = spreadsheet.costpercapita_r101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.72745928353701,r[:number],0.001)
end

def test_costpercapita_s101
  r = spreadsheet.costpercapita_s101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.724660714133714,r[:number],0.001)
end

def test_costpercapita_t101
  r = spreadsheet.costpercapita_t101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.7130270138550685,r[:number],0.001)
end

def test_costpercapita_u101
  r = spreadsheet.costpercapita_u101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.776148826809207,r[:number],0.001)
end

def test_costpercapita_v101
  r = spreadsheet.costpercapita_v101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.849818330027885,r[:number],0.001)
end

def test_costpercapita_w101
  r = spreadsheet.costpercapita_w101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.907869254871583,r[:number],0.001)
end

def test_costpercapita_y101
  r = spreadsheet.costpercapita_y101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z101
  r = spreadsheet.costpercapita_z101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa101
  r = spreadsheet.costpercapita_aa101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab101
  r = spreadsheet.costpercapita_ab101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac101
  r = spreadsheet.costpercapita_ac101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad101
  r = spreadsheet.costpercapita_ad101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae101
  r = spreadsheet.costpercapita_ae101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af101
  r = spreadsheet.costpercapita_af101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag101
  r = spreadsheet.costpercapita_ag101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai101
  r = spreadsheet.costpercapita_ai101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.9746818546787,r[:number],0.001)
end

def test_costpercapita_aj101
  r = spreadsheet.costpercapita_aj101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1605.4294150236183,r[:number],0.001)
end

def test_costpercapita_ak101
  r = spreadsheet.costpercapita_ak101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1910.1379428615257,r[:number],0.001)
end

def test_costpercapita_al101
  r = spreadsheet.costpercapita_al101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2298.5094571647464,r[:number],0.001)
end

def test_costpercapita_am101
  r = spreadsheet.costpercapita_am101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2696.115972919482,r[:number],0.001)
end

def test_costpercapita_an101
  r = spreadsheet.costpercapita_an101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3129.964240785298,r[:number],0.001)
end

def test_costpercapita_ao101
  r = spreadsheet.costpercapita_ao101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3732.269577533188,r[:number],0.001)
end

def test_costpercapita_ap101
  r = spreadsheet.costpercapita_ap101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4299.489502948157,r[:number],0.001)
end

def test_costpercapita_aq101
  r = spreadsheet.costpercapita_aq101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4858.430254312183,r[:number],0.001)
end

def test_costpercapita_as101
  r = spreadsheet.costpercapita_as101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2781.369005044764,r[:number],0.001)
end

def test_costpercapita_at101
  r = spreadsheet.costpercapita_at101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53983.51163171228,r[:number],0.001)
end

def test_costpercapita_av101
  r = spreadsheet.costpercapita_av101
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw101
  r = spreadsheet.costpercapita_aw101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay101
  r = spreadsheet.costpercapita_ay101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.83397533476568,r[:number],0.001)
end

def test_costpercapita_az101
  r = spreadsheet.costpercapita_az101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(879.8732901599609,r[:number],0.001)
end

def test_costpercapita_ba101
  r = spreadsheet.costpercapita_ba101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1046.5793120110652,r[:number],0.001)
end

def test_costpercapita_bb101
  r = spreadsheet.costpercapita_bb101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1259.224668016462,r[:number],0.001)
end

def test_costpercapita_bc101
  r = spreadsheet.costpercapita_bc101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1476.9525221121735,r[:number],0.001)
end

def test_costpercapita_bd101
  r = spreadsheet.costpercapita_bd101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1714.5809743149937,r[:number],0.001)
end

def test_costpercapita_be101
  r = spreadsheet.costpercapita_be101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2044.6467910309095,r[:number],0.001)
end

def test_costpercapita_bf101
  r = spreadsheet.costpercapita_bf101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2355.445869499463,r[:number],0.001)
end

def test_costpercapita_bg101
  r = spreadsheet.costpercapita_bg101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2661.708478108983,r[:number],0.001)
end

def test_costpercapita_bi101
  r = spreadsheet.costpercapita_bi101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.83397533476568,r[:number],0.001)
end

def test_costpercapita_bj101
  r = spreadsheet.costpercapita_bj101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1039.2718537431379,r[:number],0.001)
end

def test_costpercapita_bk101
  r = spreadsheet.costpercapita_bk101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2051.8273274508024,r[:number],0.001)
end

def test_costpercapita_bl101
  r = spreadsheet.costpercapita_bl101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3098.114095555237,r[:number],0.001)
end

def test_costpercapita_bm101
  r = spreadsheet.costpercapita_bm101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3688.241181854145,r[:number],0.001)
end

def test_costpercapita_bn101
  r = spreadsheet.costpercapita_bn101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4352.713764152225,r[:number],0.001)
end

def test_costpercapita_bo101
  r = spreadsheet.costpercapita_bo101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5134.067725727037,r[:number],0.001)
end

def test_costpercapita_bp101
  r = spreadsheet.costpercapita_bp101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6003.848435989611,r[:number],0.001)
end

def test_costpercapita_bq101
  r = spreadsheet.costpercapita_bq101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6939.662458992714,r[:number],0.001)
end

def test_costpercapita_bs101
  r = spreadsheet.costpercapita_bs101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.37743303300184,r[:number],0.001)
end

def test_costpercapita_bt101
  r = spreadsheet.costpercapita_bt101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1041.9392163328819,r[:number],0.001)
end

def test_costpercapita_bu101
  r = spreadsheet.costpercapita_bu101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2055.5343956477136,r[:number],0.001)
end

def test_costpercapita_bv101
  r = spreadsheet.costpercapita_bv101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3102.841554838774,r[:number],0.001)
end

def test_costpercapita_bw101
  r = spreadsheet.costpercapita_bw101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3693.9658425682787,r[:number],0.001)
end

def test_costpercapita_bx101
  r = spreadsheet.costpercapita_bx101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4359.42679116608,r[:number],0.001)
end

def test_costpercapita_by101
  r = spreadsheet.costpercapita_by101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5141.843874553847,r[:number],0.001)
end

def test_costpercapita_bz101
  r = spreadsheet.costpercapita_bz101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6012.698254319639,r[:number],0.001)
end

def test_costpercapita_ca101
  r = spreadsheet.costpercapita_ca101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6949.570328247585,r[:number],0.001)
end

def test_costpercapita_cc101
  r = spreadsheet.costpercapita_cc101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3613.799743411978,r[:number],0.001)
end

def test_costpercapita_cd101
  r = spreadsheet.costpercapita_cd101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67215.6538410323,r[:number],0.001)
end

def test_costpercapita_cf101
  r = spreadsheet.costpercapita_cf101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-335.5972488216768,r[:number],0.001)
end

def test_costpercapita_cg101
  r = spreadsheet.costpercapita_cg101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-563.4901986907363,r[:number],0.001)
end

def test_costpercapita_ch101
  r = spreadsheet.costpercapita_ch101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.3964527861877,r[:number],0.001)
end

def test_costpercapita_ci101
  r = spreadsheet.costpercapita_ci101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(804.3320976740274,r[:number],0.001)
end

def test_costpercapita_cj101
  r = spreadsheet.costpercapita_cj101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(997.849869648797,r[:number],0.001)
end

def test_costpercapita_ck101
  r = spreadsheet.costpercapita_ck101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1229.4625503807822,r[:number],0.001)
end

def test_costpercapita_cl101
  r = spreadsheet.costpercapita_cl101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1409.5742970206584,r[:number],0.001)
end

def test_costpercapita_cm101
  r = spreadsheet.costpercapita_cm101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1713.2087513714828,r[:number],0.001)
end

def test_costpercapita_cn101
  r = spreadsheet.costpercapita_cn101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2091.140073935403,r[:number],0.001)
end

def test_costpercapita_cp101
  r = spreadsheet.costpercapita_cp101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.4307383672138,r[:number],0.001)
end

def test_costpercapita_cq101
  r = spreadsheet.costpercapita_cq101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13232.14220932002,r[:number],0.001)
end

def test_costpercapita_cr101
  r = spreadsheet.costpercapita_cr101
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a102
  r = spreadsheet.costpercapita_a102
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b102
  r = spreadsheet.costpercapita_b102
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c102
  r = spreadsheet.costpercapita_c102
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e102
  r = spreadsheet.costpercapita_e102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f102
  r = spreadsheet.costpercapita_f102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g102
  r = spreadsheet.costpercapita_g102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h102
  r = spreadsheet.costpercapita_h102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i102
  r = spreadsheet.costpercapita_i102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j102
  r = spreadsheet.costpercapita_j102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k102
  r = spreadsheet.costpercapita_k102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l102
  r = spreadsheet.costpercapita_l102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m102
  r = spreadsheet.costpercapita_m102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o102
  r = spreadsheet.costpercapita_o102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p102
  r = spreadsheet.costpercapita_p102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q102
  r = spreadsheet.costpercapita_q102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r102
  r = spreadsheet.costpercapita_r102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s102
  r = spreadsheet.costpercapita_s102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t102
  r = spreadsheet.costpercapita_t102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u102
  r = spreadsheet.costpercapita_u102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v102
  r = spreadsheet.costpercapita_v102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w102
  r = spreadsheet.costpercapita_w102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y102
  r = spreadsheet.costpercapita_y102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4657.586953933174,r[:number],0.001)
end

def test_costpercapita_z102
  r = spreadsheet.costpercapita_z102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8486.97262537935,r[:number],0.001)
end

def test_costpercapita_aa102
  r = spreadsheet.costpercapita_aa102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11996.024868147779,r[:number],0.001)
end

def test_costpercapita_ab102
  r = spreadsheet.costpercapita_ab102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15001.781843917555,r[:number],0.001)
end

def test_costpercapita_ac102
  r = spreadsheet.costpercapita_ac102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17282.04295007872,r[:number],0.001)
end

def test_costpercapita_ad102
  r = spreadsheet.costpercapita_ad102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18485.31179114046,r[:number],0.001)
end

def test_costpercapita_ae102
  r = spreadsheet.costpercapita_ae102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19915.06142908515,r[:number],0.001)
end

def test_costpercapita_af102
  r = spreadsheet.costpercapita_af102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21258.986734212474,r[:number],0.001)
end

def test_costpercapita_ag102
  r = spreadsheet.costpercapita_ag102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22269.92225912411,r[:number],0.001)
end

def test_costpercapita_ai102
  r = spreadsheet.costpercapita_ai102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4657.586953933174,r[:number],0.001)
end

def test_costpercapita_aj102
  r = spreadsheet.costpercapita_aj102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8486.97262537935,r[:number],0.001)
end

def test_costpercapita_ak102
  r = spreadsheet.costpercapita_ak102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11996.024868147779,r[:number],0.001)
end

def test_costpercapita_al102
  r = spreadsheet.costpercapita_al102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15001.781843917555,r[:number],0.001)
end

def test_costpercapita_am102
  r = spreadsheet.costpercapita_am102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17282.04295007872,r[:number],0.001)
end

def test_costpercapita_an102
  r = spreadsheet.costpercapita_an102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18485.31179114046,r[:number],0.001)
end

def test_costpercapita_ao102
  r = spreadsheet.costpercapita_ao102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19915.06142908515,r[:number],0.001)
end

def test_costpercapita_ap102
  r = spreadsheet.costpercapita_ap102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21258.986734212474,r[:number],0.001)
end

def test_costpercapita_aq102
  r = spreadsheet.costpercapita_aq102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22269.92225912411,r[:number],0.001)
end

def test_costpercapita_as102
  r = spreadsheet.costpercapita_as102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15483.743495002085,r[:number],0.001)
end

def test_costpercapita_at102
  r = spreadsheet.costpercapita_at102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307879.9316723034,r[:number],0.001)
end

def test_costpercapita_av102
  r = spreadsheet.costpercapita_av102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw102
  r = spreadsheet.costpercapita_aw102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay102
  r = spreadsheet.costpercapita_ay102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az102
  r = spreadsheet.costpercapita_az102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba102
  r = spreadsheet.costpercapita_ba102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb102
  r = spreadsheet.costpercapita_bb102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc102
  r = spreadsheet.costpercapita_bc102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd102
  r = spreadsheet.costpercapita_bd102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be102
  r = spreadsheet.costpercapita_be102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf102
  r = spreadsheet.costpercapita_bf102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg102
  r = spreadsheet.costpercapita_bg102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi102
  r = spreadsheet.costpercapita_bi102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj102
  r = spreadsheet.costpercapita_bj102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk102
  r = spreadsheet.costpercapita_bk102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl102
  r = spreadsheet.costpercapita_bl102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm102
  r = spreadsheet.costpercapita_bm102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn102
  r = spreadsheet.costpercapita_bn102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo102
  r = spreadsheet.costpercapita_bo102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp102
  r = spreadsheet.costpercapita_bp102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq102
  r = spreadsheet.costpercapita_bq102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs102
  r = spreadsheet.costpercapita_bs102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4657.586953933174,r[:number],0.001)
end

def test_costpercapita_bt102
  r = spreadsheet.costpercapita_bt102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8486.97262537935,r[:number],0.001)
end

def test_costpercapita_bu102
  r = spreadsheet.costpercapita_bu102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11996.024868147779,r[:number],0.001)
end

def test_costpercapita_bv102
  r = spreadsheet.costpercapita_bv102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15001.781843917555,r[:number],0.001)
end

def test_costpercapita_bw102
  r = spreadsheet.costpercapita_bw102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17282.04295007872,r[:number],0.001)
end

def test_costpercapita_bx102
  r = spreadsheet.costpercapita_bx102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18485.31179114046,r[:number],0.001)
end

def test_costpercapita_by102
  r = spreadsheet.costpercapita_by102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19915.06142908515,r[:number],0.001)
end

def test_costpercapita_bz102
  r = spreadsheet.costpercapita_bz102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21258.986734212474,r[:number],0.001)
end

def test_costpercapita_ca102
  r = spreadsheet.costpercapita_ca102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22269.92225912411,r[:number],0.001)
end

def test_costpercapita_cc102
  r = spreadsheet.costpercapita_cc102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15483.743495002085,r[:number],0.001)
end

def test_costpercapita_cd102
  r = spreadsheet.costpercapita_cd102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307879.9316723034,r[:number],0.001)
end

def test_costpercapita_cf102
  r = spreadsheet.costpercapita_cf102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg102
  r = spreadsheet.costpercapita_cg102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch102
  r = spreadsheet.costpercapita_ch102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci102
  r = spreadsheet.costpercapita_ci102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj102
  r = spreadsheet.costpercapita_cj102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck102
  r = spreadsheet.costpercapita_ck102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl102
  r = spreadsheet.costpercapita_cl102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm102
  r = spreadsheet.costpercapita_cm102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn102
  r = spreadsheet.costpercapita_cn102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp102
  r = spreadsheet.costpercapita_cp102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq102
  r = spreadsheet.costpercapita_cq102
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr102
  r = spreadsheet.costpercapita_cr102
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a103
  r = spreadsheet.costpercapita_a103
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b103
  r = spreadsheet.costpercapita_b103
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c103
  r = spreadsheet.costpercapita_c103
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e103
  r = spreadsheet.costpercapita_e103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f103
  r = spreadsheet.costpercapita_f103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g103
  r = spreadsheet.costpercapita_g103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h103
  r = spreadsheet.costpercapita_h103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i103
  r = spreadsheet.costpercapita_i103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j103
  r = spreadsheet.costpercapita_j103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k103
  r = spreadsheet.costpercapita_k103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l103
  r = spreadsheet.costpercapita_l103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m103
  r = spreadsheet.costpercapita_m103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o103
  r = spreadsheet.costpercapita_o103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p103
  r = spreadsheet.costpercapita_p103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q103
  r = spreadsheet.costpercapita_q103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r103
  r = spreadsheet.costpercapita_r103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s103
  r = spreadsheet.costpercapita_s103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t103
  r = spreadsheet.costpercapita_t103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u103
  r = spreadsheet.costpercapita_u103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v103
  r = spreadsheet.costpercapita_v103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w103
  r = spreadsheet.costpercapita_w103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y103
  r = spreadsheet.costpercapita_y103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_z103
  r = spreadsheet.costpercapita_z103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34217.57875809706,r[:number],0.001)
end

def test_costpercapita_aa103
  r = spreadsheet.costpercapita_aa103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49641.78358749942,r[:number],0.001)
end

def test_costpercapita_ab103
  r = spreadsheet.costpercapita_ab103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66615.82406298582,r[:number],0.001)
end

def test_costpercapita_ac103
  r = spreadsheet.costpercapita_ac103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85496.59677683057,r[:number],0.001)
end

def test_costpercapita_ad103
  r = spreadsheet.costpercapita_ad103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96833.76163770944,r[:number],0.001)
end

def test_costpercapita_ae103
  r = spreadsheet.costpercapita_ae103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107648.6644292976,r[:number],0.001)
end

def test_costpercapita_af103
  r = spreadsheet.costpercapita_af103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118379.98627228064,r[:number],0.001)
end

def test_costpercapita_ag103
  r = spreadsheet.costpercapita_ag103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128926.66757154778,r[:number],0.001)
end

def test_costpercapita_ai103
  r = spreadsheet.costpercapita_ai103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_aj103
  r = spreadsheet.costpercapita_aj103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34217.57875809706,r[:number],0.001)
end

def test_costpercapita_ak103
  r = spreadsheet.costpercapita_ak103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49641.78358749942,r[:number],0.001)
end

def test_costpercapita_al103
  r = spreadsheet.costpercapita_al103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66615.82406298582,r[:number],0.001)
end

def test_costpercapita_am103
  r = spreadsheet.costpercapita_am103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85496.59677683057,r[:number],0.001)
end

def test_costpercapita_an103
  r = spreadsheet.costpercapita_an103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96833.76163770944,r[:number],0.001)
end

def test_costpercapita_ao103
  r = spreadsheet.costpercapita_ao103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107648.6644292976,r[:number],0.001)
end

def test_costpercapita_ap103
  r = spreadsheet.costpercapita_ap103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118379.98627228064,r[:number],0.001)
end

def test_costpercapita_aq103
  r = spreadsheet.costpercapita_aq103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128926.66757154778,r[:number],0.001)
end

def test_costpercapita_as103
  r = spreadsheet.costpercapita_as103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78736.3483086264,r[:number],0.001)
end

def test_costpercapita_at103
  r = spreadsheet.costpercapita_at103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1503970.0823399508,r[:number],0.001)
end

def test_costpercapita_av103
  r = spreadsheet.costpercapita_av103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw103
  r = spreadsheet.costpercapita_aw103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay103
  r = spreadsheet.costpercapita_ay103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az103
  r = spreadsheet.costpercapita_az103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba103
  r = spreadsheet.costpercapita_ba103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb103
  r = spreadsheet.costpercapita_bb103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc103
  r = spreadsheet.costpercapita_bc103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd103
  r = spreadsheet.costpercapita_bd103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be103
  r = spreadsheet.costpercapita_be103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf103
  r = spreadsheet.costpercapita_bf103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg103
  r = spreadsheet.costpercapita_bg103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi103
  r = spreadsheet.costpercapita_bi103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj103
  r = spreadsheet.costpercapita_bj103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk103
  r = spreadsheet.costpercapita_bk103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl103
  r = spreadsheet.costpercapita_bl103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm103
  r = spreadsheet.costpercapita_bm103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn103
  r = spreadsheet.costpercapita_bn103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo103
  r = spreadsheet.costpercapita_bo103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp103
  r = spreadsheet.costpercapita_bp103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq103
  r = spreadsheet.costpercapita_bq103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs103
  r = spreadsheet.costpercapita_bs103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_bt103
  r = spreadsheet.costpercapita_bt103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34217.57875809706,r[:number],0.001)
end

def test_costpercapita_bu103
  r = spreadsheet.costpercapita_bu103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49641.78358749942,r[:number],0.001)
end

def test_costpercapita_bv103
  r = spreadsheet.costpercapita_bv103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66615.82406298582,r[:number],0.001)
end

def test_costpercapita_bw103
  r = spreadsheet.costpercapita_bw103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85496.59677683057,r[:number],0.001)
end

def test_costpercapita_bx103
  r = spreadsheet.costpercapita_bx103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96833.76163770944,r[:number],0.001)
end

def test_costpercapita_by103
  r = spreadsheet.costpercapita_by103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107648.6644292976,r[:number],0.001)
end

def test_costpercapita_bz103
  r = spreadsheet.costpercapita_bz103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118379.98627228064,r[:number],0.001)
end

def test_costpercapita_ca103
  r = spreadsheet.costpercapita_ca103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128926.66757154778,r[:number],0.001)
end

def test_costpercapita_cc103
  r = spreadsheet.costpercapita_cc103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78736.3483086264,r[:number],0.001)
end

def test_costpercapita_cd103
  r = spreadsheet.costpercapita_cd103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1503970.0823399508,r[:number],0.001)
end

def test_costpercapita_cf103
  r = spreadsheet.costpercapita_cf103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg103
  r = spreadsheet.costpercapita_cg103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch103
  r = spreadsheet.costpercapita_ch103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci103
  r = spreadsheet.costpercapita_ci103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj103
  r = spreadsheet.costpercapita_cj103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck103
  r = spreadsheet.costpercapita_ck103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl103
  r = spreadsheet.costpercapita_cl103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm103
  r = spreadsheet.costpercapita_cm103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn103
  r = spreadsheet.costpercapita_cn103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp103
  r = spreadsheet.costpercapita_cp103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq103
  r = spreadsheet.costpercapita_cq103
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr103
  r = spreadsheet.costpercapita_cr103
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a104
  r = spreadsheet.costpercapita_a104
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b104
  r = spreadsheet.costpercapita_b104
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c104
  r = spreadsheet.costpercapita_c104
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e104
  r = spreadsheet.costpercapita_e104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f104
  r = spreadsheet.costpercapita_f104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g104
  r = spreadsheet.costpercapita_g104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h104
  r = spreadsheet.costpercapita_h104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i104
  r = spreadsheet.costpercapita_i104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j104
  r = spreadsheet.costpercapita_j104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k104
  r = spreadsheet.costpercapita_k104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l104
  r = spreadsheet.costpercapita_l104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m104
  r = spreadsheet.costpercapita_m104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o104
  r = spreadsheet.costpercapita_o104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p104
  r = spreadsheet.costpercapita_p104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q104
  r = spreadsheet.costpercapita_q104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r104
  r = spreadsheet.costpercapita_r104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s104
  r = spreadsheet.costpercapita_s104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t104
  r = spreadsheet.costpercapita_t104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u104
  r = spreadsheet.costpercapita_u104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v104
  r = spreadsheet.costpercapita_v104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w104
  r = spreadsheet.costpercapita_w104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y104
  r = spreadsheet.costpercapita_y104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_z104
  r = spreadsheet.costpercapita_z104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11209.013644420133,r[:number],0.001)
end

def test_costpercapita_aa104
  r = spreadsheet.costpercapita_aa104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17676.7573533424,r[:number],0.001)
end

def test_costpercapita_ab104
  r = spreadsheet.costpercapita_ab104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25176.66299022023,r[:number],0.001)
end

def test_costpercapita_ac104
  r = spreadsheet.costpercapita_ac104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33654.03138324004,r[:number],0.001)
end

def test_costpercapita_ad104
  r = spreadsheet.costpercapita_ad104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39495.85806878698,r[:number],0.001)
end

def test_costpercapita_ae104
  r = spreadsheet.costpercapita_ae104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45773.53841610936,r[:number],0.001)
end

def test_costpercapita_af104
  r = spreadsheet.costpercapita_af104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52109.964283650006,r[:number],0.001)
end

def test_costpercapita_ag104
  r = spreadsheet.costpercapita_ag104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58351.81542359111,r[:number],0.001)
end

def test_costpercapita_ai104
  r = spreadsheet.costpercapita_ai104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_aj104
  r = spreadsheet.costpercapita_aj104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11209.013644420133,r[:number],0.001)
end

def test_costpercapita_ak104
  r = spreadsheet.costpercapita_ak104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17676.7573533424,r[:number],0.001)
end

def test_costpercapita_al104
  r = spreadsheet.costpercapita_al104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25176.66299022023,r[:number],0.001)
end

def test_costpercapita_am104
  r = spreadsheet.costpercapita_am104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33654.03138324004,r[:number],0.001)
end

def test_costpercapita_an104
  r = spreadsheet.costpercapita_an104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39495.85806878698,r[:number],0.001)
end

def test_costpercapita_ao104
  r = spreadsheet.costpercapita_ao104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45773.53841610936,r[:number],0.001)
end

def test_costpercapita_ap104
  r = spreadsheet.costpercapita_ap104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52109.964283650006,r[:number],0.001)
end

def test_costpercapita_aq104
  r = spreadsheet.costpercapita_aq104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58351.81542359111,r[:number],0.001)
end

def test_costpercapita_as104
  r = spreadsheet.costpercapita_as104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32112.50839049517,r[:number],0.001)
end

def test_costpercapita_at104
  r = spreadsheet.costpercapita_at104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(597640.2606875174,r[:number],0.001)
end

def test_costpercapita_av104
  r = spreadsheet.costpercapita_av104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw104
  r = spreadsheet.costpercapita_aw104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay104
  r = spreadsheet.costpercapita_ay104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az104
  r = spreadsheet.costpercapita_az104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba104
  r = spreadsheet.costpercapita_ba104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb104
  r = spreadsheet.costpercapita_bb104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc104
  r = spreadsheet.costpercapita_bc104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd104
  r = spreadsheet.costpercapita_bd104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be104
  r = spreadsheet.costpercapita_be104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf104
  r = spreadsheet.costpercapita_bf104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg104
  r = spreadsheet.costpercapita_bg104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi104
  r = spreadsheet.costpercapita_bi104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj104
  r = spreadsheet.costpercapita_bj104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk104
  r = spreadsheet.costpercapita_bk104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl104
  r = spreadsheet.costpercapita_bl104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm104
  r = spreadsheet.costpercapita_bm104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn104
  r = spreadsheet.costpercapita_bn104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo104
  r = spreadsheet.costpercapita_bo104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp104
  r = spreadsheet.costpercapita_bp104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq104
  r = spreadsheet.costpercapita_bq104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs104
  r = spreadsheet.costpercapita_bs104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_bt104
  r = spreadsheet.costpercapita_bt104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11209.013644420133,r[:number],0.001)
end

def test_costpercapita_bu104
  r = spreadsheet.costpercapita_bu104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17676.7573533424,r[:number],0.001)
end

def test_costpercapita_bv104
  r = spreadsheet.costpercapita_bv104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25176.66299022023,r[:number],0.001)
end

def test_costpercapita_bw104
  r = spreadsheet.costpercapita_bw104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33654.03138324004,r[:number],0.001)
end

def test_costpercapita_bx104
  r = spreadsheet.costpercapita_bx104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39495.85806878698,r[:number],0.001)
end

def test_costpercapita_by104
  r = spreadsheet.costpercapita_by104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45773.53841610936,r[:number],0.001)
end

def test_costpercapita_bz104
  r = spreadsheet.costpercapita_bz104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52109.964283650006,r[:number],0.001)
end

def test_costpercapita_ca104
  r = spreadsheet.costpercapita_ca104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58351.81542359111,r[:number],0.001)
end

def test_costpercapita_cc104
  r = spreadsheet.costpercapita_cc104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32112.50839049517,r[:number],0.001)
end

def test_costpercapita_cd104
  r = spreadsheet.costpercapita_cd104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(597640.2606875174,r[:number],0.001)
end

def test_costpercapita_cf104
  r = spreadsheet.costpercapita_cf104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg104
  r = spreadsheet.costpercapita_cg104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch104
  r = spreadsheet.costpercapita_ch104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci104
  r = spreadsheet.costpercapita_ci104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj104
  r = spreadsheet.costpercapita_cj104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck104
  r = spreadsheet.costpercapita_ck104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl104
  r = spreadsheet.costpercapita_cl104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm104
  r = spreadsheet.costpercapita_cm104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn104
  r = spreadsheet.costpercapita_cn104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp104
  r = spreadsheet.costpercapita_cp104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq104
  r = spreadsheet.costpercapita_cq104
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr104
  r = spreadsheet.costpercapita_cr104
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a105
  r = spreadsheet.costpercapita_a105
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b105
  r = spreadsheet.costpercapita_b105
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c105
  r = spreadsheet.costpercapita_c105
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e105
  r = spreadsheet.costpercapita_e105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.29161854547795,r[:number],0.001)
end

def test_costpercapita_f105
  r = spreadsheet.costpercapita_f105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376.76313142064544,r[:number],0.001)
end

def test_costpercapita_g105
  r = spreadsheet.costpercapita_g105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(325.22502737653326,r[:number],0.001)
end

def test_costpercapita_h105
  r = spreadsheet.costpercapita_h105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(264.00928513005414,r[:number],0.001)
end

def test_costpercapita_i105
  r = spreadsheet.costpercapita_i105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.24543258046154,r[:number],0.001)
end

def test_costpercapita_j105
  r = spreadsheet.costpercapita_j105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.68410923770514,r[:number],0.001)
end

def test_costpercapita_k105
  r = spreadsheet.costpercapita_k105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.9248491598821,r[:number],0.001)
end

def test_costpercapita_l105
  r = spreadsheet.costpercapita_l105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.93964706093664,r[:number],0.001)
end

def test_costpercapita_m105
  r = spreadsheet.costpercapita_m105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.3101099532833,r[:number],0.001)
end

def test_costpercapita_o105
  r = spreadsheet.costpercapita_o105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.5905195270833,r[:number],0.001)
end

def test_costpercapita_p105
  r = spreadsheet.costpercapita_p105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.51892297186318,r[:number],0.001)
end

def test_costpercapita_q105
  r = spreadsheet.costpercapita_q105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.5639524709272,r[:number],0.001)
end

def test_costpercapita_r105
  r = spreadsheet.costpercapita_r105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.26251667836638,r[:number],0.001)
end

def test_costpercapita_s105
  r = spreadsheet.costpercapita_s105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.127351592380215,r[:number],0.001)
end

def test_costpercapita_t105
  r = spreadsheet.costpercapita_t105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.47523550310353,r[:number],0.001)
end

def test_costpercapita_u105
  r = spreadsheet.costpercapita_u105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.448603620543146,r[:number],0.001)
end

def test_costpercapita_v105
  r = spreadsheet.costpercapita_v105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.193825635962526,r[:number],0.001)
end

def test_costpercapita_w105
  r = spreadsheet.costpercapita_w105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.867565847128684,r[:number],0.001)
end

def test_costpercapita_y105
  r = spreadsheet.costpercapita_y105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z105
  r = spreadsheet.costpercapita_z105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa105
  r = spreadsheet.costpercapita_aa105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab105
  r = spreadsheet.costpercapita_ab105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac105
  r = spreadsheet.costpercapita_ac105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad105
  r = spreadsheet.costpercapita_ad105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae105
  r = spreadsheet.costpercapita_ae105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af105
  r = spreadsheet.costpercapita_af105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag105
  r = spreadsheet.costpercapita_ag105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai105
  r = spreadsheet.costpercapita_ai105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307.88213807256125,r[:number],0.001)
end

def test_costpercapita_aj105
  r = spreadsheet.costpercapita_aj105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.2820543925086,r[:number],0.001)
end

def test_costpercapita_ak105
  r = spreadsheet.costpercapita_ak105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(379.78897984746044,r[:number],0.001)
end

def test_costpercapita_al105
  r = spreadsheet.costpercapita_al105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(321.27180180842055,r[:number],0.001)
end

def test_costpercapita_am105
  r = spreadsheet.costpercapita_am105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(250.37278417284173,r[:number],0.001)
end

def test_costpercapita_an105
  r = spreadsheet.costpercapita_an105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.1593447408087,r[:number],0.001)
end

def test_costpercapita_ao105
  r = spreadsheet.costpercapita_ao105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.37345278042525,r[:number],0.001)
end

def test_costpercapita_ap105
  r = spreadsheet.costpercapita_ap105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.13347269689916,r[:number],0.001)
end

def test_costpercapita_aq105
  r = spreadsheet.costpercapita_aq105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.17767580041199,r[:number],0.001)
end

def test_costpercapita_as105
  r = spreadsheet.costpercapita_as105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.604633812482,r[:number],0.001)
end

def test_costpercapita_at105
  r = spreadsheet.costpercapita_at105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6331.029319333635,r[:number],0.001)
end

def test_costpercapita_av105
  r = spreadsheet.costpercapita_av105
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw105
  r = spreadsheet.costpercapita_aw105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay105
  r = spreadsheet.costpercapita_ay105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.68846820229115,r[:number],0.001)
end

def test_costpercapita_az105
  r = spreadsheet.costpercapita_az105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.83283307752887,r[:number],0.001)
end

def test_costpercapita_ba105
  r = spreadsheet.costpercapita_ba105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.53979912090523,r[:number],0.001)
end

def test_costpercapita_bb105
  r = spreadsheet.costpercapita_bb105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.9340018921766,r[:number],0.001)
end

def test_costpercapita_bc105
  r = spreadsheet.costpercapita_bc105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.63552185028223,r[:number],0.001)
end

def test_costpercapita_bd105
  r = spreadsheet.costpercapita_bd105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.2886660629576,r[:number],0.001)
end

def test_costpercapita_be105
  r = spreadsheet.costpercapita_be105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.18622895741194,r[:number],0.001)
end

def test_costpercapita_bf105
  r = spreadsheet.costpercapita_bf105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.92105139624432,r[:number],0.001)
end

def test_costpercapita_bg105
  r = spreadsheet.costpercapita_bg105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.812419997712375,r[:number],0.001)
end

def test_costpercapita_bi105
  r = spreadsheet.costpercapita_bi105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.68846820229115,r[:number],0.001)
end

def test_costpercapita_bj105
  r = spreadsheet.costpercapita_bj105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.56381782982936,r[:number],0.001)
end

def test_costpercapita_bk105
  r = spreadsheet.costpercapita_bk105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(462.49288051676245,r[:number],0.001)
end

def test_costpercapita_bl105
  r = spreadsheet.costpercapita_bl105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(511.81249764909546,r[:number],0.001)
end

def test_costpercapita_bm105
  r = spreadsheet.costpercapita_bm105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(415.89478814829687,r[:number],0.001)
end

def test_costpercapita_bn105
  r = spreadsheet.costpercapita_bn105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.06594709054315,r[:number],0.001)
end

def test_costpercapita_bo105
  r = spreadsheet.costpercapita_bo105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.2391669902548,r[:number],0.001)
end

def test_costpercapita_bp105
  r = spreadsheet.costpercapita_bp105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(264.4603412657246,r[:number],0.001)
end

def test_costpercapita_bq105
  r = spreadsheet.costpercapita_bq105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.94059682323675,r[:number],0.001)
end

def test_costpercapita_bs105
  r = spreadsheet.costpercapita_bs105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.27898772937445,r[:number],0.001)
end

def test_costpercapita_bt105
  r = spreadsheet.costpercapita_bt105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.0827408016925,r[:number],0.001)
end

def test_costpercapita_bu105
  r = spreadsheet.costpercapita_bu105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(517.0568329876896,r[:number],0.001)
end

def test_costpercapita_bv105
  r = spreadsheet.costpercapita_bv105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(569.0750143274619,r[:number],0.001)
end

def test_costpercapita_bw105
  r = spreadsheet.costpercapita_bw105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.0221397406771,r[:number],0.001)
end

def test_costpercapita_bx105
  r = spreadsheet.costpercapita_bx105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.5411825936467,r[:number],0.001)
end

def test_costpercapita_by105
  r = spreadsheet.costpercapita_by105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.6877706107979,r[:number],0.001)
end

def test_costpercapita_bz105
  r = spreadsheet.costpercapita_bz105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.65416690168706,r[:number],0.001)
end

def test_costpercapita_ca105
  r = spreadsheet.costpercapita_ca105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.80816267036542,r[:number],0.001)
end

def test_costpercapita_cc105
  r = spreadsheet.costpercapita_cc105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(365.68966648482143,r[:number],0.001)
end

def test_costpercapita_cd105
  r = spreadsheet.costpercapita_cd105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8484.106044493268,r[:number],0.001)
end

def test_costpercapita_cf105
  r = spreadsheet.costpercapita_cf105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-182.60315034318677,r[:number],0.001)
end

def test_costpercapita_cg105
  r = spreadsheet.costpercapita_cg105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-83.19931359081608,r[:number],0.001)
end

def test_costpercapita_ch105
  r = spreadsheet.costpercapita_ch105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.2678531402292,r[:number],0.001)
end

def test_costpercapita_ci105
  r = spreadsheet.costpercapita_ci105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.8032125190413,r[:number],0.001)
end

def test_costpercapita_cj105
  r = spreadsheet.costpercapita_cj105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.64935556783536,r[:number],0.001)
end

def test_costpercapita_ck105
  r = spreadsheet.costpercapita_ck105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.38183785283798,r[:number],0.001)
end

def test_costpercapita_cl105
  r = spreadsheet.costpercapita_cl105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.31431783037267,r[:number],0.001)
end

def test_costpercapita_cm105
  r = spreadsheet.costpercapita_cm105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.52069420478794,r[:number],0.001)
end

def test_costpercapita_cn105
  r = spreadsheet.costpercapita_cn105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.63048686995343,r[:number],0.001)
end

def test_costpercapita_cp105
  r = spreadsheet.costpercapita_cp105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.08503267233944,r[:number],0.001)
end

def test_costpercapita_cq105
  r = spreadsheet.costpercapita_cq105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2153.0767251596335,r[:number],0.001)
end

def test_costpercapita_cr105
  r = spreadsheet.costpercapita_cr105
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a106
  r = spreadsheet.costpercapita_a106
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b106
  r = spreadsheet.costpercapita_b106
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage of captured CO2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c106
  r = spreadsheet.costpercapita_c106
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e106
  r = spreadsheet.costpercapita_e106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f106
  r = spreadsheet.costpercapita_f106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9973400336412321,r[:number],0.001)
end

def test_costpercapita_g106
  r = spreadsheet.costpercapita_g106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.551105930143109,r[:number],0.001)
end

def test_costpercapita_h106
  r = spreadsheet.costpercapita_h106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.317466624915646,r[:number],0.001)
end

def test_costpercapita_i106
  r = spreadsheet.costpercapita_i106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.113064079488405,r[:number],0.001)
end

def test_costpercapita_j106
  r = spreadsheet.costpercapita_j106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9351933136393593,r[:number],0.001)
end

def test_costpercapita_k106
  r = spreadsheet.costpercapita_k106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8425442246299073,r[:number],0.001)
end

def test_costpercapita_l106
  r = spreadsheet.costpercapita_l106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.691574493903866,r[:number],0.001)
end

def test_costpercapita_m106
  r = spreadsheet.costpercapita_m106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5525935205169614,r[:number],0.001)
end

def test_costpercapita_o106
  r = spreadsheet.costpercapita_o106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p106
  r = spreadsheet.costpercapita_p106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.06106153817131767,r[:number],0.001)
end

def test_costpercapita_q106
  r = spreadsheet.costpercapita_q106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13913380986437504,r[:number],0.001)
end

def test_costpercapita_r106
  r = spreadsheet.costpercapita_r106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13199112253313547,r[:number],0.001)
end

def test_costpercapita_s106
  r = spreadsheet.costpercapita_s106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.12574224471578838,r[:number],0.001)
end

def test_costpercapita_t106
  r = spreadsheet.costpercapita_t106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.12030448130268898,r[:number],0.001)
end

def test_costpercapita_u106
  r = spreadsheet.costpercapita_u106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.11747206629582857,r[:number],0.001)
end

def test_costpercapita_v106
  r = spreadsheet.costpercapita_v106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.11285670595648963,r[:number],0.001)
end

def test_costpercapita_w106
  r = spreadsheet.costpercapita_w106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.10860785905580425,r[:number],0.001)
end

def test_costpercapita_y106
  r = spreadsheet.costpercapita_y106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z106
  r = spreadsheet.costpercapita_z106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa106
  r = spreadsheet.costpercapita_aa106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab106
  r = spreadsheet.costpercapita_ab106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac106
  r = spreadsheet.costpercapita_ac106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad106
  r = spreadsheet.costpercapita_ad106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae106
  r = spreadsheet.costpercapita_ae106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af106
  r = spreadsheet.costpercapita_af106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag106
  r = spreadsheet.costpercapita_ag106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai106
  r = spreadsheet.costpercapita_ai106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj106
  r = spreadsheet.costpercapita_aj106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.05840157181255,r[:number],0.001)
end

def test_costpercapita_ak106
  r = spreadsheet.costpercapita_ak106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.690239740007484,r[:number],0.001)
end

def test_costpercapita_al106
  r = spreadsheet.costpercapita_al106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.449457747448781,r[:number],0.001)
end

def test_costpercapita_am106
  r = spreadsheet.costpercapita_am106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.238806324204194,r[:number],0.001)
end

def test_costpercapita_an106
  r = spreadsheet.costpercapita_an106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.055497794942049,r[:number],0.001)
end

def test_costpercapita_ao106
  r = spreadsheet.costpercapita_ao106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.960016290925736,r[:number],0.001)
end

def test_costpercapita_ap106
  r = spreadsheet.costpercapita_ap106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8044311998603555,r[:number],0.001)
end

def test_costpercapita_aq106
  r = spreadsheet.costpercapita_aq106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.661201379572766,r[:number],0.001)
end

def test_costpercapita_as106
  r = spreadsheet.costpercapita_as106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.435339116530435,r[:number],0.001)
end

def test_costpercapita_at106
  r = spreadsheet.costpercapita_at106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.55495016927064,r[:number],0.001)
end

def test_costpercapita_av106
  r = spreadsheet.costpercapita_av106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw106
  r = spreadsheet.costpercapita_aw106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay106
  r = spreadsheet.costpercapita_ay106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az106
  r = spreadsheet.costpercapita_az106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0964859969696743,r[:number],0.001)
end

def test_costpercapita_ba106
  r = spreadsheet.costpercapita_ba106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.49843483787294,r[:number],0.001)
end

def test_costpercapita_bb106
  r = spreadsheet.costpercapita_bb106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3701731387086733,r[:number],0.001)
end

def test_costpercapita_bc106
  r = spreadsheet.costpercapita_bc106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.257961634893102,r[:number],0.001)
end

def test_costpercapita_bd106
  r = spreadsheet.costpercapita_bd106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.160315364984719,r[:number],0.001)
end

def test_costpercapita_be106
  r = spreadsheet.costpercapita_be106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.109453505201304,r[:number],0.001)
end

def test_costpercapita_bf106
  r = spreadsheet.costpercapita_bf106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0265751805699157,r[:number],0.001)
end

def test_costpercapita_bg106
  r = spreadsheet.costpercapita_bg106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9502783615019372,r[:number],0.001)
end

def test_costpercapita_bi106
  r = spreadsheet.costpercapita_bi106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj106
  r = spreadsheet.costpercapita_bj106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0964859969696743,r[:number],0.001)
end

def test_costpercapita_bk106
  r = spreadsheet.costpercapita_bk106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.559023911310555,r[:number],0.001)
end

def test_costpercapita_bl106
  r = spreadsheet.costpercapita_bl106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.818997303000389,r[:number],0.001)
end

def test_costpercapita_bm106
  r = spreadsheet.costpercapita_bm106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.918311765330573,r[:number],0.001)
end

def test_costpercapita_bn106
  r = spreadsheet.costpercapita_bn106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.6162030242339975,r[:number],0.001)
end

def test_costpercapita_bo106
  r = spreadsheet.costpercapita_bo106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.381451070534397,r[:number],0.001)
end

def test_costpercapita_bp106
  r = spreadsheet.costpercapita_bp106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.166018335319416,r[:number],0.001)
end

def test_costpercapita_bq106
  r = spreadsheet.costpercapita_bq106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.967827625244578,r[:number],0.001)
end

def test_costpercapita_bs106
  r = spreadsheet.costpercapita_bs106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt106
  r = spreadsheet.costpercapita_bt106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1575475351409918,r[:number],0.001)
end

def test_costpercapita_bu106
  r = spreadsheet.costpercapita_bu106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.69815772117493,r[:number],0.001)
end

def test_costpercapita_bv106
  r = spreadsheet.costpercapita_bv106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.950988425533524,r[:number],0.001)
end

def test_costpercapita_bw106
  r = spreadsheet.costpercapita_bw106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.044054010046361,r[:number],0.001)
end

def test_costpercapita_bx106
  r = spreadsheet.costpercapita_bx106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.736507505536687,r[:number],0.001)
end

def test_costpercapita_by106
  r = spreadsheet.costpercapita_by106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.498923136830226,r[:number],0.001)
end

def test_costpercapita_bz106
  r = spreadsheet.costpercapita_bz106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.278875041275906,r[:number],0.001)
end

def test_costpercapita_ca106
  r = spreadsheet.costpercapita_ca106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.076435484300382,r[:number],0.001)
end

def test_costpercapita_cc106
  r = spreadsheet.costpercapita_cc106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.826832095537667,r[:number],0.001)
end

def test_costpercapita_cd106
  r = spreadsheet.costpercapita_cd106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.97518739066041,r[:number],0.001)
end

def test_costpercapita_cf106
  r = spreadsheet.costpercapita_cf106
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg106
  r = spreadsheet.costpercapita_cg106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.900854036671558,r[:number],0.001)
end

def test_costpercapita_ch106
  r = spreadsheet.costpercapita_ch106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.9920820188325541,r[:number],0.001)
end

def test_costpercapita_ci106
  r = spreadsheet.costpercapita_ci106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5015306780847428,r[:number],0.001)
end

def test_costpercapita_cj106
  r = spreadsheet.costpercapita_cj106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.805247685842168,r[:number],0.001)
end

def test_costpercapita_ck106
  r = spreadsheet.costpercapita_ck106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.681009710594638,r[:number],0.001)
end

def test_costpercapita_cl106
  r = spreadsheet.costpercapita_cl106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5389068459044903,r[:number],0.001)
end

def test_costpercapita_cm106
  r = spreadsheet.costpercapita_cm106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4744438414155496,r[:number],0.001)
end

def test_costpercapita_cn106
  r = spreadsheet.costpercapita_cn106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4152341047276162,r[:number],0.001)
end

def test_costpercapita_cp106
  r = spreadsheet.costpercapita_cp106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3914929790072326,r[:number],0.001)
end

def test_costpercapita_cq106
  r = spreadsheet.costpercapita_cq106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.42023722138977,r[:number],0.001)
end

def test_costpercapita_cr106
  r = spreadsheet.costpercapita_cr106
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a107
  r = spreadsheet.costpercapita_a107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b107
  r = spreadsheet.costpercapita_b107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c107
  r = spreadsheet.costpercapita_c107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e107
  r = spreadsheet.costpercapita_e107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55135.94704880461,r[:number],0.001)
end

def test_costpercapita_f107
  r = spreadsheet.costpercapita_f107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130154.85305796428,r[:number],0.001)
end

def test_costpercapita_g107
  r = spreadsheet.costpercapita_g107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166314.3070824843,r[:number],0.001)
end

def test_costpercapita_h107
  r = spreadsheet.costpercapita_h107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202956.85169157133,r[:number],0.001)
end

def test_costpercapita_i107
  r = spreadsheet.costpercapita_i107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237477.4437928109,r[:number],0.001)
end

def test_costpercapita_j107
  r = spreadsheet.costpercapita_j107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272743.8905769213,r[:number],0.001)
end

def test_costpercapita_k107
  r = spreadsheet.costpercapita_k107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308308.9161119014,r[:number],0.001)
end

def test_costpercapita_l107
  r = spreadsheet.costpercapita_l107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343867.0603887073,r[:number],0.001)
end

def test_costpercapita_m107
  r = spreadsheet.costpercapita_m107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380871.60752219486,r[:number],0.001)
end

def test_costpercapita_o107
  r = spreadsheet.costpercapita_o107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42590.01837919331,r[:number],0.001)
end

def test_costpercapita_p107
  r = spreadsheet.costpercapita_p107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61899.50005586516,r[:number],0.001)
end

def test_costpercapita_q107
  r = spreadsheet.costpercapita_q107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83335.91302499527,r[:number],0.001)
end

def test_costpercapita_r107
  r = spreadsheet.costpercapita_r107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107765.69749939544,r[:number],0.001)
end

def test_costpercapita_s107
  r = spreadsheet.costpercapita_s107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134108.24799424337,r[:number],0.001)
end

def test_costpercapita_t107
  r = spreadsheet.costpercapita_t107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162473.6662254022,r[:number],0.001)
end

def test_costpercapita_u107
  r = spreadsheet.costpercapita_u107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192505.22100065395,r[:number],0.001)
end

def test_costpercapita_v107
  r = spreadsheet.costpercapita_v107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223847.87556247864,r[:number],0.001)
end

def test_costpercapita_w107
  r = spreadsheet.costpercapita_w107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(255902.86908196824,r[:number],0.001)
end

def test_costpercapita_y107
  r = spreadsheet.costpercapita_y107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31142.703760913428,r[:number],0.001)
end

def test_costpercapita_z107
  r = spreadsheet.costpercapita_z107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53971.631653448625,r[:number],0.001)
end

def test_costpercapita_aa107
  r = spreadsheet.costpercapita_aa107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79379.3194440219,r[:number],0.001)
end

def test_costpercapita_ab107
  r = spreadsheet.costpercapita_ab107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106861.25973496161,r[:number],0.001)
end

def test_costpercapita_ac107
  r = spreadsheet.costpercapita_ac107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136500.5028190662,r[:number],0.001)
end

def test_costpercapita_ad107
  r = spreadsheet.costpercapita_ad107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154882.3472292296,r[:number],0.001)
end

def test_costpercapita_ae107
  r = spreadsheet.costpercapita_ae107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173404.60906116612,r[:number],0.001)
end

def test_costpercapita_af107
  r = spreadsheet.costpercapita_af107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191815.09696498417,r[:number],0.001)
end

def test_costpercapita_ag107
  r = spreadsheet.costpercapita_ag107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209615.11712870462,r[:number],0.001)
end

def test_costpercapita_ai107
  r = spreadsheet.costpercapita_ai107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128868.66918891134,r[:number],0.001)
end

def test_costpercapita_aj107
  r = spreadsheet.costpercapita_aj107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246025.9847672781,r[:number],0.001)
end

def test_costpercapita_ak107
  r = spreadsheet.costpercapita_ak107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329029.5395515015,r[:number],0.001)
end

def test_costpercapita_al107
  r = spreadsheet.costpercapita_al107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(417583.80892592843,r[:number],0.001)
end

def test_costpercapita_am107
  r = spreadsheet.costpercapita_am107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(508086.1946061204,r[:number],0.001)
end

def test_costpercapita_an107
  r = spreadsheet.costpercapita_an107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(590099.904031553,r[:number],0.001)
end

def test_costpercapita_ao107
  r = spreadsheet.costpercapita_ao107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(674218.7461737215,r[:number],0.001)
end

def test_costpercapita_ap107
  r = spreadsheet.costpercapita_ap107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(759530.0329161701,r[:number],0.001)
end

def test_costpercapita_aq107
  r = spreadsheet.costpercapita_aq107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(846389.5937328677,r[:number],0.001)
end

def test_costpercapita_as107
  r = spreadsheet.costpercapita_as107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(499981.385988228,r[:number],0.001)
end

def test_costpercapita_at107
  r = spreadsheet.costpercapita_at107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9592453.804528736,r[:number],0.001)
end

def test_costpercapita_ay107
  r = spreadsheet.costpercapita_ay107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18160.891841274217,r[:number],0.001)
end

def test_costpercapita_az107
  r = spreadsheet.costpercapita_az107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71451.5162225692,r[:number],0.001)
end

def test_costpercapita_ba107
  r = spreadsheet.costpercapita_ba107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91302.08464264662,r[:number],0.001)
end

def test_costpercapita_bb107
  r = spreadsheet.costpercapita_bb107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111417.85680986961,r[:number],0.001)
end

def test_costpercapita_bc107
  r = spreadsheet.costpercapita_bc107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130368.73408093024,r[:number],0.001)
end

def test_costpercapita_bd107
  r = spreadsheet.costpercapita_bd107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149729.0655269273,r[:number],0.001)
end

def test_costpercapita_be107
  r = spreadsheet.costpercapita_be107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169253.30868240158,r[:number],0.001)
end

def test_costpercapita_bf107
  r = spreadsheet.costpercapita_bf107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188773.77421208235,r[:number],0.001)
end

def test_costpercapita_bg107
  r = spreadsheet.costpercapita_bg107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209088.27603584225,r[:number],0.001)
end

def test_costpercapita_bi107
  r = spreadsheet.costpercapita_bi107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18160.891841274217,r[:number],0.001)
end

def test_costpercapita_bj107
  r = spreadsheet.costpercapita_bj107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89013.5513977167,r[:number],0.001)
end

def test_costpercapita_bk107
  r = spreadsheet.costpercapita_bk107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177401.49700286382,r[:number],0.001)
end

def test_costpercapita_bl107
  r = spreadsheet.costpercapita_bl107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266865.279641766,r[:number],0.001)
end

def test_costpercapita_bm107
  r = spreadsheet.costpercapita_bm107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324800.54079139663,r[:number],0.001)
end

def test_costpercapita_bn107
  r = spreadsheet.costpercapita_bn107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382847.95455331967,r[:number],0.001)
end

def test_costpercapita_bo107
  r = spreadsheet.costpercapita_bo107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(440372.1999407039,r[:number],0.001)
end

def test_costpercapita_bp107
  r = spreadsheet.costpercapita_bp107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498263.6292560766,r[:number],0.001)
end

def test_costpercapita_bq107
  r = spreadsheet.costpercapita_bq107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557120.7066633902,r[:number],0.001)
end

def test_costpercapita_bs107
  r = spreadsheet.costpercapita_bs107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91893.61398138097,r[:number],0.001)
end

def test_costpercapita_bt107
  r = spreadsheet.costpercapita_bt107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204884.6831070305,r[:number],0.001)
end

def test_costpercapita_bu107
  r = spreadsheet.costpercapita_bu107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(340116.729471881,r[:number],0.001)
end

def test_costpercapita_bv107
  r = spreadsheet.costpercapita_bv107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481492.23687612306,r[:number],0.001)
end

def test_costpercapita_bw107
  r = spreadsheet.costpercapita_bw107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(595409.2916047063,r[:number],0.001)
end

def test_costpercapita_bx107
  r = spreadsheet.costpercapita_bx107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(700203.9680079513,r[:number],0.001)
end

def test_costpercapita_by107
  r = spreadsheet.costpercapita_by107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(806282.0300025239,r[:number],0.001)
end

def test_costpercapita_bz107
  r = spreadsheet.costpercapita_bz107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(913926.6017835393,r[:number],0.001)
end

def test_costpercapita_ca107
  r = spreadsheet.costpercapita_ca107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1022638.692874063,r[:number],0.001)
end

def test_costpercapita_cc107
  r = spreadsheet.costpercapita_cc107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572983.094189911,r[:number],0.001)
end

def test_costpercapita_cd107
  r = spreadsheet.costpercapita_cd107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10770821.090129176,r[:number],0.001)
end

def test_costpercapita_cf107
  r = spreadsheet.costpercapita_cf107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-36975.05520753039,r[:number],0.001)
end

def test_costpercapita_cg107
  r = spreadsheet.costpercapita_cg107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-41141.301660247584,r[:number],0.001)
end

def test_costpercapita_ch107
  r = spreadsheet.costpercapita_ch107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11087.18992037952,r[:number],0.001)
end

def test_costpercapita_ci107
  r = spreadsheet.costpercapita_ci107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63908.42795019467,r[:number],0.001)
end

def test_costpercapita_cj107
  r = spreadsheet.costpercapita_cj107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87323.09699858571,r[:number],0.001)
end

def test_costpercapita_ck107
  r = spreadsheet.costpercapita_ck107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110104.06397639839,r[:number],0.001)
end

def test_costpercapita_cl107
  r = spreadsheet.costpercapita_cl107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132063.2838288025,r[:number],0.001)
end

def test_costpercapita_cm107
  r = spreadsheet.costpercapita_cm107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154396.56886736923,r[:number],0.001)
end

def test_costpercapita_cn107
  r = spreadsheet.costpercapita_cn107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176249.09914119527,r[:number],0.001)
end

def test_costpercapita_cp107
  r = spreadsheet.costpercapita_cp107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73001.70820168304,r[:number],0.001)
end

def test_costpercapita_cq107
  r = spreadsheet.costpercapita_cq107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1178367.2856004399,r[:number],0.001)
end

def test_costpercapita_cr107
  r = spreadsheet.costpercapita_cr107
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf108
  r = spreadsheet.costpercapita_cf108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg108
  r = spreadsheet.costpercapita_cg108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch108
  r = spreadsheet.costpercapita_ch108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci108
  r = spreadsheet.costpercapita_ci108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj108
  r = spreadsheet.costpercapita_cj108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck108
  r = spreadsheet.costpercapita_ck108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl108
  r = spreadsheet.costpercapita_cl108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm108
  r = spreadsheet.costpercapita_cm108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn108
  r = spreadsheet.costpercapita_cn108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp108
  r = spreadsheet.costpercapita_cp108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq108
  r = spreadsheet.costpercapita_cq108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b110
  r = spreadsheet.costpercapita_b110
  assert_equal(:ExcelString,r[:type])
  assert_equal("£/Capita/yr",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e110
  r = spreadsheet.costpercapita_e110
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f110
  r = spreadsheet.costpercapita_f110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o110
  r = spreadsheet.costpercapita_o110
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p110
  r = spreadsheet.costpercapita_p110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y110
  r = spreadsheet.costpercapita_y110
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z110
  r = spreadsheet.costpercapita_z110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai110
  r = spreadsheet.costpercapita_ai110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as110
  r = spreadsheet.costpercapita_as110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av110
  r = spreadsheet.costpercapita_av110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay110
  r = spreadsheet.costpercapita_ay110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi110
  r = spreadsheet.costpercapita_bi110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br110
  r = spreadsheet.costpercapita_br110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc110
  r = spreadsheet.costpercapita_cc110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf110
  r = spreadsheet.costpercapita_cf110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp110
  r = spreadsheet.costpercapita_cp110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a111
  r = spreadsheet.costpercapita_a111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Code",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b111
  r = spreadsheet.costpercapita_b111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Description",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c111
  r = spreadsheet.costpercapita_c111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e111
  r = spreadsheet.costpercapita_e111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f111
  r = spreadsheet.costpercapita_f111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g111
  r = spreadsheet.costpercapita_g111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h111
  r = spreadsheet.costpercapita_h111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i111
  r = spreadsheet.costpercapita_i111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j111
  r = spreadsheet.costpercapita_j111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k111
  r = spreadsheet.costpercapita_k111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l111
  r = spreadsheet.costpercapita_l111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m111
  r = spreadsheet.costpercapita_m111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o111
  r = spreadsheet.costpercapita_o111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p111
  r = spreadsheet.costpercapita_p111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q111
  r = spreadsheet.costpercapita_q111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r111
  r = spreadsheet.costpercapita_r111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s111
  r = spreadsheet.costpercapita_s111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t111
  r = spreadsheet.costpercapita_t111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u111
  r = spreadsheet.costpercapita_u111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v111
  r = spreadsheet.costpercapita_v111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w111
  r = spreadsheet.costpercapita_w111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y111
  r = spreadsheet.costpercapita_y111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z111
  r = spreadsheet.costpercapita_z111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa111
  r = spreadsheet.costpercapita_aa111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab111
  r = spreadsheet.costpercapita_ab111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac111
  r = spreadsheet.costpercapita_ac111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad111
  r = spreadsheet.costpercapita_ad111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae111
  r = spreadsheet.costpercapita_ae111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af111
  r = spreadsheet.costpercapita_af111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag111
  r = spreadsheet.costpercapita_ag111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai111
  r = spreadsheet.costpercapita_ai111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj111
  r = spreadsheet.costpercapita_aj111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak111
  r = spreadsheet.costpercapita_ak111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al111
  r = spreadsheet.costpercapita_al111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am111
  r = spreadsheet.costpercapita_am111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an111
  r = spreadsheet.costpercapita_an111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao111
  r = spreadsheet.costpercapita_ao111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap111
  r = spreadsheet.costpercapita_ap111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq111
  r = spreadsheet.costpercapita_aq111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as111
  r = spreadsheet.costpercapita_as111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at111
  r = spreadsheet.costpercapita_at111
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av111
  r = spreadsheet.costpercapita_av111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw111
  r = spreadsheet.costpercapita_aw111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay111
  r = spreadsheet.costpercapita_ay111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_az111
  r = spreadsheet.costpercapita_az111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_ba111
  r = spreadsheet.costpercapita_ba111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bb111
  r = spreadsheet.costpercapita_bb111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bc111
  r = spreadsheet.costpercapita_bc111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bd111
  r = spreadsheet.costpercapita_bd111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_be111
  r = spreadsheet.costpercapita_be111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bf111
  r = spreadsheet.costpercapita_bf111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bg111
  r = spreadsheet.costpercapita_bg111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bi111
  r = spreadsheet.costpercapita_bi111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_bj111
  r = spreadsheet.costpercapita_bj111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_bk111
  r = spreadsheet.costpercapita_bk111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bl111
  r = spreadsheet.costpercapita_bl111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bm111
  r = spreadsheet.costpercapita_bm111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bn111
  r = spreadsheet.costpercapita_bn111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_bo111
  r = spreadsheet.costpercapita_bo111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bp111
  r = spreadsheet.costpercapita_bp111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bq111
  r = spreadsheet.costpercapita_bq111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bs111
  r = spreadsheet.costpercapita_bs111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt111
  r = spreadsheet.costpercapita_bt111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu111
  r = spreadsheet.costpercapita_bu111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv111
  r = spreadsheet.costpercapita_bv111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw111
  r = spreadsheet.costpercapita_bw111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx111
  r = spreadsheet.costpercapita_bx111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by111
  r = spreadsheet.costpercapita_by111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz111
  r = spreadsheet.costpercapita_bz111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca111
  r = spreadsheet.costpercapita_ca111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc111
  r = spreadsheet.costpercapita_cc111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd111
  r = spreadsheet.costpercapita_cd111
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf111
  r = spreadsheet.costpercapita_cf111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg111
  r = spreadsheet.costpercapita_cg111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch111
  r = spreadsheet.costpercapita_ch111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci111
  r = spreadsheet.costpercapita_ci111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj111
  r = spreadsheet.costpercapita_cj111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck111
  r = spreadsheet.costpercapita_ck111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl111
  r = spreadsheet.costpercapita_cl111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm111
  r = spreadsheet.costpercapita_cm111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn111
  r = spreadsheet.costpercapita_cn111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp111
  r = spreadsheet.costpercapita_cp111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq111
  r = spreadsheet.costpercapita_cq111
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a112
  r = spreadsheet.costpercapita_a112
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b112
  r = spreadsheet.costpercapita_b112
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional thermal plant",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c112
  r = spreadsheet.costpercapita_c112
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e112
  r = spreadsheet.costpercapita_e112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(700.3002904019578,r[:number],0.001)
end

def test_costpercapita_f112
  r = spreadsheet.costpercapita_f112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1317.1732445992016,r[:number],0.001)
end

def test_costpercapita_g112
  r = spreadsheet.costpercapita_g112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1455.780136037405,r[:number],0.001)
end

def test_costpercapita_h112
  r = spreadsheet.costpercapita_h112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1627.9629100852915,r[:number],0.001)
end

def test_costpercapita_i112
  r = spreadsheet.costpercapita_i112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1768.3527450482227,r[:number],0.001)
end

def test_costpercapita_j112
  r = spreadsheet.costpercapita_j112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1903.9514708947602,r[:number],0.001)
end

def test_costpercapita_k112
  r = spreadsheet.costpercapita_k112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2021.9368430897205,r[:number],0.001)
end

def test_costpercapita_l112
  r = spreadsheet.costpercapita_l112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2135.805591922637,r[:number],0.001)
end

def test_costpercapita_m112
  r = spreadsheet.costpercapita_m112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2224.4836189366815,r[:number],0.001)
end

def test_costpercapita_o112
  r = spreadsheet.costpercapita_o112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3076.089595195308,r[:number],0.001)
end

def test_costpercapita_p112
  r = spreadsheet.costpercapita_p112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3376.440243217374,r[:number],0.001)
end

def test_costpercapita_q112
  r = spreadsheet.costpercapita_q112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3751.418398216173,r[:number],0.001)
end

def test_costpercapita_r112
  r = spreadsheet.costpercapita_r112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4118.303053907359,r[:number],0.001)
end

def test_costpercapita_s112
  r = spreadsheet.costpercapita_s112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4431.211976185893,r[:number],0.001)
end

def test_costpercapita_t112
  r = spreadsheet.costpercapita_t112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4574.194885773929,r[:number],0.001)
end

def test_costpercapita_u112
  r = spreadsheet.costpercapita_u112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4636.686273398557,r[:number],0.001)
end

def test_costpercapita_v112
  r = spreadsheet.costpercapita_v112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4625.8837214974,r[:number],0.001)
end

def test_costpercapita_w112
  r = spreadsheet.costpercapita_w112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4493.279314625223,r[:number],0.001)
end

def test_costpercapita_y112
  r = spreadsheet.costpercapita_y112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z112
  r = spreadsheet.costpercapita_z112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa112
  r = spreadsheet.costpercapita_aa112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab112
  r = spreadsheet.costpercapita_ab112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac112
  r = spreadsheet.costpercapita_ac112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad112
  r = spreadsheet.costpercapita_ad112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae112
  r = spreadsheet.costpercapita_ae112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af112
  r = spreadsheet.costpercapita_af112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag112
  r = spreadsheet.costpercapita_ag112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai112
  r = spreadsheet.costpercapita_ai112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3776.3898855972657,r[:number],0.001)
end

def test_costpercapita_aj112
  r = spreadsheet.costpercapita_aj112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4693.613487816575,r[:number],0.001)
end

def test_costpercapita_ak112
  r = spreadsheet.costpercapita_ak112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5207.198534253577,r[:number],0.001)
end

def test_costpercapita_al112
  r = spreadsheet.costpercapita_al112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5746.2659639926505,r[:number],0.001)
end

def test_costpercapita_am112
  r = spreadsheet.costpercapita_am112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6199.564721234115,r[:number],0.001)
end

def test_costpercapita_an112
  r = spreadsheet.costpercapita_an112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6478.146356668689,r[:number],0.001)
end

def test_costpercapita_ao112
  r = spreadsheet.costpercapita_ao112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6658.623116488277,r[:number],0.001)
end

def test_costpercapita_ap112
  r = spreadsheet.costpercapita_ap112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6761.689313420036,r[:number],0.001)
end

def test_costpercapita_aq112
  r = spreadsheet.costpercapita_aq112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6717.762933561905,r[:number],0.001)
end

def test_costpercapita_as112
  r = spreadsheet.costpercapita_as112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5804.36159033701,r[:number],0.001)
end

def test_costpercapita_at112
  r = spreadsheet.costpercapita_at112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119583.70822108512,r[:number],0.001)
end

def test_costpercapita_av112
  r = spreadsheet.costpercapita_av112
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw112
  r = spreadsheet.costpercapita_aw112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay112
  r = spreadsheet.costpercapita_ay112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.21337240340694,r[:number],0.001)
end

def test_costpercapita_az112
  r = spreadsheet.costpercapita_az112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(865.8687064122579,r[:number],0.001)
end

def test_costpercapita_ba112
  r = spreadsheet.costpercapita_ba112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(956.984564012251,r[:number],0.001)
end

def test_costpercapita_bb112
  r = spreadsheet.costpercapita_bb112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1070.172162107354,r[:number],0.001)
end

def test_costpercapita_bc112
  r = spreadsheet.costpercapita_bc112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1162.4600713032112,r[:number],0.001)
end

def test_costpercapita_bd112
  r = spreadsheet.costpercapita_bd112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1251.5984544440093,r[:number],0.001)
end

def test_costpercapita_be112
  r = spreadsheet.costpercapita_be112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.1583669436784,r[:number],0.001)
end

def test_costpercapita_bf112
  r = spreadsheet.costpercapita_bf112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1404.0121393361937,r[:number],0.001)
end

def test_costpercapita_bg112
  r = spreadsheet.costpercapita_bg112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1462.3063150284781,r[:number],0.001)
end

def test_costpercapita_bi112
  r = spreadsheet.costpercapita_bi112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.21337240340694,r[:number],0.001)
end

def test_costpercapita_bj112
  r = spreadsheet.costpercapita_bj112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1132.973923732598,r[:number],0.001)
end

def test_costpercapita_bk112
  r = spreadsheet.costpercapita_bk112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2052.867016976918,r[:number],0.001)
end

def test_costpercapita_bl112
  r = spreadsheet.costpercapita_bl112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2809.114341099117,r[:number],0.001)
end

def test_costpercapita_bm112
  r = spreadsheet.costpercapita_bm112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3105.41253688667,r[:number],0.001)
end

def test_costpercapita_bn112
  r = spreadsheet.costpercapita_bn112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3403.090918962257,r[:number],0.001)
end

def test_costpercapita_bo112
  r = spreadsheet.costpercapita_bo112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3664.9351632424177,r[:number],0.001)
end

def test_costpercapita_bp112
  r = spreadsheet.costpercapita_bp112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3907.1285956445163,r[:number],0.001)
end

def test_costpercapita_bq112
  r = spreadsheet.costpercapita_bq112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4118.451961436025,r[:number],0.001)
end

def test_costpercapita_bs112
  r = spreadsheet.costpercapita_bs112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3352.3029675987154,r[:number],0.001)
end

def test_costpercapita_bt112
  r = spreadsheet.costpercapita_bt112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4509.414166949971,r[:number],0.001)
end

def test_costpercapita_bu112
  r = spreadsheet.costpercapita_bu112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5804.285415193091,r[:number],0.001)
end

def test_costpercapita_bv112
  r = spreadsheet.costpercapita_bv112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6927.417395006476,r[:number],0.001)
end

def test_costpercapita_bw112
  r = spreadsheet.costpercapita_bw112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7536.624513072563,r[:number],0.001)
end

def test_costpercapita_bx112
  r = spreadsheet.costpercapita_bx112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7977.285804736186,r[:number],0.001)
end

def test_costpercapita_by112
  r = spreadsheet.costpercapita_by112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8301.621436640975,r[:number],0.001)
end

def test_costpercapita_bz112
  r = spreadsheet.costpercapita_bz112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8533.012317141916,r[:number],0.001)
end

def test_costpercapita_ca112
  r = spreadsheet.costpercapita_ca112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8611.73127606125,r[:number],0.001)
end

def test_costpercapita_cc112
  r = spreadsheet.costpercapita_cc112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6839.29947693346,r[:number],0.001)
end

def test_costpercapita_cd112
  r = spreadsheet.costpercapita_cd112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138716.4897956699,r[:number],0.001)
end

def test_costpercapita_cf112
  r = spreadsheet.costpercapita_cf112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-424.0869179985508,r[:number],0.001)
end

def test_costpercapita_cg112
  r = spreadsheet.costpercapita_cg112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-184.1993208666036,r[:number],0.001)
end

def test_costpercapita_ch112
  r = spreadsheet.costpercapita_ch112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(597.086880939513,r[:number],0.001)
end

def test_costpercapita_ci112
  r = spreadsheet.costpercapita_ci112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1181.1514310138257,r[:number],0.001)
end

def test_costpercapita_cj112
  r = spreadsheet.costpercapita_cj112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1337.0597918384472,r[:number],0.001)
end

def test_costpercapita_ck112
  r = spreadsheet.costpercapita_ck112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1499.1394480674967,r[:number],0.001)
end

def test_costpercapita_cl112
  r = spreadsheet.costpercapita_cl112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1642.9983201526973,r[:number],0.001)
end

def test_costpercapita_cm112
  r = spreadsheet.costpercapita_cm112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1771.323003721879,r[:number],0.001)
end

def test_costpercapita_cn112
  r = spreadsheet.costpercapita_cn112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1893.9683424993439,r[:number],0.001)
end

def test_costpercapita_cp112
  r = spreadsheet.costpercapita_cp112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1034.9378865964497,r[:number],0.001)
end

def test_costpercapita_cq112
  r = spreadsheet.costpercapita_cq112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19132.78157458479,r[:number],0.001)
end

def test_costpercapita_cr112
  r = spreadsheet.costpercapita_cr112
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a113
  r = spreadsheet.costpercapita_a113
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b113
  r = spreadsheet.costpercapita_b113
  assert_equal(:ExcelString,r[:type])
  assert_equal("Combustion + CCS",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c113
  r = spreadsheet.costpercapita_c113
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e113
  r = spreadsheet.costpercapita_e113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f113
  r = spreadsheet.costpercapita_f113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.360730631077048,r[:number],0.001)
end

def test_costpercapita_g113
  r = spreadsheet.costpercapita_g113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.615742211572172,r[:number],0.001)
end

def test_costpercapita_h113
  r = spreadsheet.costpercapita_h113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i113
  r = spreadsheet.costpercapita_i113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j113
  r = spreadsheet.costpercapita_j113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k113
  r = spreadsheet.costpercapita_k113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l113
  r = spreadsheet.costpercapita_l113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m113
  r = spreadsheet.costpercapita_m113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o113
  r = spreadsheet.costpercapita_o113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p113
  r = spreadsheet.costpercapita_p113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9434554398382349,r[:number],0.001)
end

def test_costpercapita_q113
  r = spreadsheet.costpercapita_q113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9626011030763046,r[:number],0.001)
end

def test_costpercapita_r113
  r = spreadsheet.costpercapita_r113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8399052038698325,r[:number],0.001)
end

def test_costpercapita_s113
  r = spreadsheet.costpercapita_s113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.734998405824467,r[:number],0.001)
end

def test_costpercapita_t113
  r = spreadsheet.costpercapita_t113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6470179195035626,r[:number],0.001)
end

def test_costpercapita_u113
  r = spreadsheet.costpercapita_u113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.569240206656842,r[:number],0.001)
end

def test_costpercapita_v113
  r = spreadsheet.costpercapita_v113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4980412694025507,r[:number],0.001)
end

def test_costpercapita_w113
  r = spreadsheet.costpercapita_w113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.432761749418212,r[:number],0.001)
end

def test_costpercapita_y113
  r = spreadsheet.costpercapita_y113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z113
  r = spreadsheet.costpercapita_z113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa113
  r = spreadsheet.costpercapita_aa113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab113
  r = spreadsheet.costpercapita_ab113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac113
  r = spreadsheet.costpercapita_ac113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad113
  r = spreadsheet.costpercapita_ad113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae113
  r = spreadsheet.costpercapita_ae113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af113
  r = spreadsheet.costpercapita_af113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag113
  r = spreadsheet.costpercapita_ag113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai113
  r = spreadsheet.costpercapita_ai113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj113
  r = spreadsheet.costpercapita_aj113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.304186070915282,r[:number],0.001)
end

def test_costpercapita_ak113
  r = spreadsheet.costpercapita_ak113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.578343314648478,r[:number],0.001)
end

def test_costpercapita_al113
  r = spreadsheet.costpercapita_al113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8399052038698325,r[:number],0.001)
end

def test_costpercapita_am113
  r = spreadsheet.costpercapita_am113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.734998405824467,r[:number],0.001)
end

def test_costpercapita_an113
  r = spreadsheet.costpercapita_an113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6470179195035626,r[:number],0.001)
end

def test_costpercapita_ao113
  r = spreadsheet.costpercapita_ao113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.569240206656842,r[:number],0.001)
end

def test_costpercapita_ap113
  r = spreadsheet.costpercapita_ap113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4980412694025507,r[:number],0.001)
end

def test_costpercapita_aq113
  r = spreadsheet.costpercapita_aq113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.432761749418212,r[:number],0.001)
end

def test_costpercapita_as113
  r = spreadsheet.costpercapita_as113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.067166015582136,r[:number],0.001)
end

def test_costpercapita_at113
  r = spreadsheet.costpercapita_at113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.68890479974675,r[:number],0.001)
end

def test_costpercapita_av113
  r = spreadsheet.costpercapita_av113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw113
  r = spreadsheet.costpercapita_aw113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay113
  r = spreadsheet.costpercapita_ay113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az113
  r = spreadsheet.costpercapita_az113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.838715283591352,r[:number],0.001)
end

def test_costpercapita_ba113
  r = spreadsheet.costpercapita_ba113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.978458615090497,r[:number],0.001)
end

def test_costpercapita_bb113
  r = spreadsheet.costpercapita_bb113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc113
  r = spreadsheet.costpercapita_bc113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd113
  r = spreadsheet.costpercapita_bd113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be113
  r = spreadsheet.costpercapita_be113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf113
  r = spreadsheet.costpercapita_bf113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg113
  r = spreadsheet.costpercapita_bg113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi113
  r = spreadsheet.costpercapita_bi113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj113
  r = spreadsheet.costpercapita_bj113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.838715283591352,r[:number],0.001)
end

def test_costpercapita_bk113
  r = spreadsheet.costpercapita_bk113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.65876330975639,r[:number],0.001)
end

def test_costpercapita_bl113
  r = spreadsheet.costpercapita_bl113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.297767486377788,r[:number],0.001)
end

def test_costpercapita_bm113
  r = spreadsheet.costpercapita_bm113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.577631995872666,r[:number],0.001)
end

def test_costpercapita_bn113
  r = spreadsheet.costpercapita_bn113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo113
  r = spreadsheet.costpercapita_bo113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp113
  r = spreadsheet.costpercapita_bp113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq113
  r = spreadsheet.costpercapita_bq113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs113
  r = spreadsheet.costpercapita_bs113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt113
  r = spreadsheet.costpercapita_bt113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.782170723429586,r[:number],0.001)
end

def test_costpercapita_bu113
  r = spreadsheet.costpercapita_bu113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.621364412832694,r[:number],0.001)
end

def test_costpercapita_bv113
  r = spreadsheet.costpercapita_bv113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.137672690247621,r[:number],0.001)
end

def test_costpercapita_bw113
  r = spreadsheet.costpercapita_bw113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.312630401697133,r[:number],0.001)
end

def test_costpercapita_bx113
  r = spreadsheet.costpercapita_bx113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6470179195035626,r[:number],0.001)
end

def test_costpercapita_by113
  r = spreadsheet.costpercapita_by113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.569240206656842,r[:number],0.001)
end

def test_costpercapita_bz113
  r = spreadsheet.costpercapita_bz113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4980412694025507,r[:number],0.001)
end

def test_costpercapita_ca113
  r = spreadsheet.costpercapita_ca113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.432761749418212,r[:number],0.001)
end

def test_costpercapita_cc113
  r = spreadsheet.costpercapita_cc113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.888988819243134,r[:number],0.001)
end

def test_costpercapita_cd113
  r = spreadsheet.costpercapita_cd113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.0147692802754,r[:number],0.001)
end

def test_costpercapita_cf113
  r = spreadsheet.costpercapita_cf113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg113
  r = spreadsheet.costpercapita_cg113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.5220153474856963,r[:number],0.001)
end

def test_costpercapita_ch113
  r = spreadsheet.costpercapita_ch113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0430210981842167,r[:number],0.001)
end

def test_costpercapita_ci113
  r = spreadsheet.costpercapita_ci113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.297767486377788,r[:number],0.001)
end

def test_costpercapita_cj113
  r = spreadsheet.costpercapita_cj113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.577631995872666,r[:number],0.001)
end

def test_costpercapita_ck113
  r = spreadsheet.costpercapita_ck113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl113
  r = spreadsheet.costpercapita_cl113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm113
  r = spreadsheet.costpercapita_cm113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn113
  r = spreadsheet.costpercapita_cn113
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp113
  r = spreadsheet.costpercapita_cp113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8218228036609974,r[:number],0.001)
end

def test_costpercapita_cq113
  r = spreadsheet.costpercapita_cq113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.32586448052866,r[:number],0.001)
end

def test_costpercapita_cr113
  r = spreadsheet.costpercapita_cr113
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a114
  r = spreadsheet.costpercapita_a114
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b114
  r = spreadsheet.costpercapita_b114
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c114
  r = spreadsheet.costpercapita_c114
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e114
  r = spreadsheet.costpercapita_e114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28747.77574887296,r[:number],0.001)
end

def test_costpercapita_f114
  r = spreadsheet.costpercapita_f114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27799.815852740383,r[:number],0.001)
end

def test_costpercapita_g114
  r = spreadsheet.costpercapita_g114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29949.9500426684,r[:number],0.001)
end

def test_costpercapita_h114
  r = spreadsheet.costpercapita_h114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32718.14528266772,r[:number],0.001)
end

def test_costpercapita_i114
  r = spreadsheet.costpercapita_i114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33975.800950996345,r[:number],0.001)
end

def test_costpercapita_j114
  r = spreadsheet.costpercapita_j114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34535.40961923954,r[:number],0.001)
end

def test_costpercapita_k114
  r = spreadsheet.costpercapita_k114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34401.985434465205,r[:number],0.001)
end

def test_costpercapita_l114
  r = spreadsheet.costpercapita_l114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34414.18669197856,r[:number],0.001)
end

def test_costpercapita_m114
  r = spreadsheet.costpercapita_m114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33852.94626971599,r[:number],0.001)
end

def test_costpercapita_o114
  r = spreadsheet.costpercapita_o114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(993.79895591369,r[:number],0.001)
end

def test_costpercapita_p114
  r = spreadsheet.costpercapita_p114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1070.4005688605907,r[:number],0.001)
end

def test_costpercapita_q114
  r = spreadsheet.costpercapita_q114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1173.4614882513695,r[:number],0.001)
end

def test_costpercapita_r114
  r = spreadsheet.costpercapita_r114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1214.0039432439526,r[:number],0.001)
end

def test_costpercapita_s114
  r = spreadsheet.costpercapita_s114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1229.2421584747462,r[:number],0.001)
end

def test_costpercapita_t114
  r = spreadsheet.costpercapita_t114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1221.7038423692145,r[:number],0.001)
end

def test_costpercapita_u114
  r = spreadsheet.costpercapita_u114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1220.418182809985,r[:number],0.001)
end

def test_costpercapita_v114
  r = spreadsheet.costpercapita_v114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1198.941657290279,r[:number],0.001)
end

def test_costpercapita_w114
  r = spreadsheet.costpercapita_w114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1208.9485853149097,r[:number],0.001)
end

def test_costpercapita_y114
  r = spreadsheet.costpercapita_y114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.09370833709434,r[:number],0.001)
end

def test_costpercapita_z114
  r = spreadsheet.costpercapita_z114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.66083473726079,r[:number],0.001)
end

def test_costpercapita_aa114
  r = spreadsheet.costpercapita_aa114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.6656011131181,r[:number],0.001)
end

def test_costpercapita_ab114
  r = spreadsheet.costpercapita_ab114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.35470790426075,r[:number],0.001)
end

def test_costpercapita_ac114
  r = spreadsheet.costpercapita_ac114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.49300549305406,r[:number],0.001)
end

def test_costpercapita_ad114
  r = spreadsheet.costpercapita_ad114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.43519374096337,r[:number],0.001)
end

def test_costpercapita_ae114
  r = spreadsheet.costpercapita_ae114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.25478398208594,r[:number],0.001)
end

def test_costpercapita_af114
  r = spreadsheet.costpercapita_af114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.2410975339747,r[:number],0.001)
end

def test_costpercapita_ag114
  r = spreadsheet.costpercapita_ag114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.6453164495243,r[:number],0.001)
end

def test_costpercapita_ai114
  r = spreadsheet.costpercapita_ai114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29878.66841312374,r[:number],0.001)
end

def test_costpercapita_aj114
  r = spreadsheet.costpercapita_aj114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29017.877256338237,r[:number],0.001)
end

def test_costpercapita_ak114
  r = spreadsheet.costpercapita_ak114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31288.07713203289,r[:number],0.001)
end

def test_costpercapita_al114
  r = spreadsheet.costpercapita_al114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34102.50393381593,r[:number],0.001)
end

def test_costpercapita_am114
  r = spreadsheet.costpercapita_am114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35377.53611496415,r[:number],0.001)
end

def test_costpercapita_an114
  r = spreadsheet.costpercapita_an114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35928.54865534972,r[:number],0.001)
end

def test_costpercapita_ao114
  r = spreadsheet.costpercapita_ao114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35793.65840125727,r[:number],0.001)
end

def test_costpercapita_ap114
  r = spreadsheet.costpercapita_ap114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35781.36944680281,r[:number],0.001)
end

def test_costpercapita_aq114
  r = spreadsheet.costpercapita_aq114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35231.540171480425,r[:number],0.001)
end

def test_costpercapita_as114
  r = spreadsheet.costpercapita_as114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33599.97550279613,r[:number],0.001)
end

def test_costpercapita_at114
  r = spreadsheet.costpercapita_at114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(695079.8911767069,r[:number],0.001)
end

def test_costpercapita_av114
  r = spreadsheet.costpercapita_av114
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw114
  r = spreadsheet.costpercapita_aw114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay114
  r = spreadsheet.costpercapita_ay114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11338.735964446601,r[:number],0.001)
end

def test_costpercapita_az114
  r = spreadsheet.costpercapita_az114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18274.733934666114,r[:number],0.001)
end

def test_costpercapita_ba114
  r = spreadsheet.costpercapita_ba114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19688.165248488647,r[:number],0.001)
end

def test_costpercapita_bb114
  r = spreadsheet.costpercapita_bb114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21507.890665310428,r[:number],0.001)
end

def test_costpercapita_bc114
  r = spreadsheet.costpercapita_bc114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22334.634369005315,r[:number],0.001)
end

def test_costpercapita_bd114
  r = spreadsheet.costpercapita_bd114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22702.50369496954,r[:number],0.001)
end

def test_costpercapita_be114
  r = spreadsheet.costpercapita_be114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22614.794787467534,r[:number],0.001)
end

def test_costpercapita_bf114
  r = spreadsheet.costpercapita_bf114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22622.815514507816,r[:number],0.001)
end

def test_costpercapita_bg114
  r = spreadsheet.costpercapita_bg114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22253.873524224196,r[:number],0.001)
end

def test_costpercapita_bi114
  r = spreadsheet.costpercapita_bi114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11338.735964446601,r[:number],0.001)
end

def test_costpercapita_bj114
  r = spreadsheet.costpercapita_bj114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29239.574295465784,r[:number],0.001)
end

def test_costpercapita_bk114
  r = spreadsheet.costpercapita_bk114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47970.48996165691,r[:number],0.001)
end

def test_costpercapita_bl114
  r = spreadsheet.costpercapita_bl114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57715.57044746271,r[:number],0.001)
end

def test_costpercapita_bm114
  r = spreadsheet.costpercapita_bm114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61812.24846870817,r[:number],0.001)
end

def test_costpercapita_bn114
  r = spreadsheet.costpercapita_bn114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64938.529980157706,r[:number],0.001)
end

def test_costpercapita_bo114
  r = spreadsheet.costpercapita_bo114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66176.56557500343,r[:number],0.001)
end

def test_costpercapita_bp114
  r = spreadsheet.costpercapita_bp114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66561.62358086862,r[:number],0.001)
end

def test_costpercapita_bq114
  r = spreadsheet.costpercapita_bq114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66204.57193096666,r[:number],0.001)
end

def test_costpercapita_bs114
  r = spreadsheet.costpercapita_bs114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12469.628628697386,r[:number],0.001)
end

def test_costpercapita_bt114
  r = spreadsheet.costpercapita_bt114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30457.635699063634,r[:number],0.001)
end

def test_costpercapita_bu114
  r = spreadsheet.costpercapita_bu114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49308.6170510214,r[:number],0.001)
end

def test_costpercapita_bv114
  r = spreadsheet.costpercapita_bv114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59099.929098610926,r[:number],0.001)
end

def test_costpercapita_bw114
  r = spreadsheet.costpercapita_bw114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63213.98363267596,r[:number],0.001)
end

def test_costpercapita_bx114
  r = spreadsheet.costpercapita_bx114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66331.66901626789,r[:number],0.001)
end

def test_costpercapita_by114
  r = spreadsheet.costpercapita_by114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67568.23854179551,r[:number],0.001)
end

def test_costpercapita_bz114
  r = spreadsheet.costpercapita_bz114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67928.80633569288,r[:number],0.001)
end

def test_costpercapita_ca114
  r = spreadsheet.costpercapita_ca114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67583.16583273109,r[:number],0.001)
end

def test_costpercapita_cc114
  r = spreadsheet.costpercapita_cc114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53773.519315172955,r[:number],0.001)
end

def test_costpercapita_cd114
  r = spreadsheet.costpercapita_cd114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1105369.3595516502,r[:number],0.001)
end

def test_costpercapita_cf114
  r = spreadsheet.costpercapita_cf114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-17409.03978442636,r[:number],0.001)
end

def test_costpercapita_cg114
  r = spreadsheet.costpercapita_cg114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1439.7584427254026,r[:number],0.001)
end

def test_costpercapita_ch114
  r = spreadsheet.costpercapita_ch114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18020.53991898851,r[:number],0.001)
end

def test_costpercapita_ci114
  r = spreadsheet.costpercapita_ci114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24997.42516479499,r[:number],0.001)
end

def test_costpercapita_cj114
  r = spreadsheet.costpercapita_cj114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27836.447517711822,r[:number],0.001)
end

def test_costpercapita_ck114
  r = spreadsheet.costpercapita_ck114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30403.120360918172,r[:number],0.001)
end

def test_costpercapita_cl114
  r = spreadsheet.costpercapita_cl114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31774.580140538237,r[:number],0.001)
end

def test_costpercapita_cm114
  r = spreadsheet.costpercapita_cm114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32147.436888890064,r[:number],0.001)
end

def test_costpercapita_cn114
  r = spreadsheet.costpercapita_cn114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32351.625661250677,r[:number],0.001)
end

def test_costpercapita_cp114
  r = spreadsheet.costpercapita_cp114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20173.543812376836,r[:number],0.001)
end

def test_costpercapita_cq114
  r = spreadsheet.costpercapita_cq114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410289.46837494354,r[:number],0.001)
end

def test_costpercapita_cr114
  r = spreadsheet.costpercapita_cr114
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a115
  r = spreadsheet.costpercapita_a115
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b115
  r = spreadsheet.costpercapita_b115
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c115
  r = spreadsheet.costpercapita_c115
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e115
  r = spreadsheet.costpercapita_e115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3568.3449898262534,r[:number],0.001)
end

def test_costpercapita_f115
  r = spreadsheet.costpercapita_f115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3450.6785666751157,r[:number],0.001)
end

def test_costpercapita_g115
  r = spreadsheet.costpercapita_g115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8379.187613257709,r[:number],0.001)
end

def test_costpercapita_h115
  r = spreadsheet.costpercapita_h115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13737.429352287587,r[:number],0.001)
end

def test_costpercapita_i115
  r = spreadsheet.costpercapita_i115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16435.382880333596,r[:number],0.001)
end

def test_costpercapita_j115
  r = spreadsheet.costpercapita_j115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18365.29216206485,r[:number],0.001)
end

def test_costpercapita_k115
  r = spreadsheet.costpercapita_k115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19427.32307933989,r[:number],0.001)
end

def test_costpercapita_l115
  r = spreadsheet.costpercapita_l115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20080.278989766342,r[:number],0.001)
end

def test_costpercapita_m115
  r = spreadsheet.costpercapita_m115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20711.588591227097,r[:number],0.001)
end

def test_costpercapita_o115
  r = spreadsheet.costpercapita_o115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.03976008448277,r[:number],0.001)
end

def test_costpercapita_p115
  r = spreadsheet.costpercapita_p115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.6821063283509,r[:number],0.001)
end

def test_costpercapita_q115
  r = spreadsheet.costpercapita_q115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572.2435138033427,r[:number],0.001)
end

def test_costpercapita_r115
  r = spreadsheet.costpercapita_r115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(682.0645249089898,r[:number],0.001)
end

def test_costpercapita_s115
  r = spreadsheet.costpercapita_s115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(759.2169911514642,r[:number],0.001)
end

def test_costpercapita_t115
  r = spreadsheet.costpercapita_t115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(801.2916866679243,r[:number],0.001)
end

def test_costpercapita_u115
  r = spreadsheet.costpercapita_u115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827.0583370726755,r[:number],0.001)
end

def test_costpercapita_v115
  r = spreadsheet.costpercapita_v115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(851.9423963808131,r[:number],0.001)
end

def test_costpercapita_w115
  r = spreadsheet.costpercapita_w115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(866.7371266365056,r[:number],0.001)
end

def test_costpercapita_y115
  r = spreadsheet.costpercapita_y115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z115
  r = spreadsheet.costpercapita_z115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa115
  r = spreadsheet.costpercapita_aa115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab115
  r = spreadsheet.costpercapita_ab115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac115
  r = spreadsheet.costpercapita_ac115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad115
  r = spreadsheet.costpercapita_ad115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae115
  r = spreadsheet.costpercapita_ae115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af115
  r = spreadsheet.costpercapita_af115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag115
  r = spreadsheet.costpercapita_ag115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai115
  r = spreadsheet.costpercapita_ai115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3712.384749910736,r[:number],0.001)
end

def test_costpercapita_aj115
  r = spreadsheet.costpercapita_aj115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3800.3606730034667,r[:number],0.001)
end

def test_costpercapita_ak115
  r = spreadsheet.costpercapita_ak115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8951.43112706105,r[:number],0.001)
end

def test_costpercapita_al115
  r = spreadsheet.costpercapita_al115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14419.493877196577,r[:number],0.001)
end

def test_costpercapita_am115
  r = spreadsheet.costpercapita_am115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17194.59987148506,r[:number],0.001)
end

def test_costpercapita_an115
  r = spreadsheet.costpercapita_an115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19166.58384873277,r[:number],0.001)
end

def test_costpercapita_ao115
  r = spreadsheet.costpercapita_ao115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20254.381416412565,r[:number],0.001)
end

def test_costpercapita_ap115
  r = spreadsheet.costpercapita_ap115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20932.221386147154,r[:number],0.001)
end

def test_costpercapita_aq115
  r = spreadsheet.costpercapita_aq115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21578.325717863605,r[:number],0.001)
end

def test_costpercapita_as115
  r = spreadsheet.costpercapita_as115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14445.531407534776,r[:number],0.001)
end

def test_costpercapita_at115
  r = spreadsheet.costpercapita_at115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275082.3361145622,r[:number],0.001)
end

def test_costpercapita_av115
  r = spreadsheet.costpercapita_av115
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw115
  r = spreadsheet.costpercapita_aw115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay115
  r = spreadsheet.costpercapita_ay115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1407.4313791487682,r[:number],0.001)
end

def test_costpercapita_az115
  r = spreadsheet.costpercapita_az115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2268.3687199254077,r[:number],0.001)
end

def test_costpercapita_ba115
  r = spreadsheet.costpercapita_ba115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5508.217213814385,r[:number],0.001)
end

def test_costpercapita_bb115
  r = spreadsheet.costpercapita_bb115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9030.558608343483,r[:number],0.001)
end

def test_costpercapita_bc115
  r = spreadsheet.costpercapita_bc115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10804.109309337584,r[:number],0.001)
end

def test_costpercapita_bd115
  r = spreadsheet.costpercapita_bd115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12072.7716209336,r[:number],0.001)
end

def test_costpercapita_be115
  r = spreadsheet.costpercapita_be115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12770.917700260152,r[:number],0.001)
end

def test_costpercapita_bf115
  r = spreadsheet.costpercapita_bf115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13200.150598683642,r[:number],0.001)
end

def test_costpercapita_bg115
  r = spreadsheet.costpercapita_bg115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13615.153887130178,r[:number],0.001)
end

def test_costpercapita_bi115
  r = spreadsheet.costpercapita_bi115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1407.4313791487682,r[:number],0.001)
end

def test_costpercapita_bj115
  r = spreadsheet.costpercapita_bj115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3629.389951880653,r[:number],0.001)
end

def test_costpercapita_bk115
  r = spreadsheet.costpercapita_bk115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9018.787651418754,r[:number],0.001)
end

def test_costpercapita_bl115
  r = spreadsheet.costpercapita_bl115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16494.391639090158,r[:number],0.001)
end

def test_costpercapita_bm115
  r = spreadsheet.costpercapita_bm115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24779.78955452304,r[:number],0.001)
end

def test_costpercapita_bn115
  r = spreadsheet.costpercapita_bn115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31199.315463598257,r[:number],0.001)
end

def test_costpercapita_bo115
  r = spreadsheet.costpercapita_bo115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34910.84664825939,r[:number],0.001)
end

def test_costpercapita_bp115
  r = spreadsheet.costpercapita_bp115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37295.927232914546,r[:number],0.001)
end

def test_costpercapita_bq115
  r = spreadsheet.costpercapita_bq115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38851.55781164768,r[:number],0.001)
end

def test_costpercapita_bs115
  r = spreadsheet.costpercapita_bs115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1551.471139233251,r[:number],0.001)
end

def test_costpercapita_bt115
  r = spreadsheet.costpercapita_bt115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3979.072058209004,r[:number],0.001)
end

def test_costpercapita_bu115
  r = spreadsheet.costpercapita_bu115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9591.031165222095,r[:number],0.001)
end

def test_costpercapita_bv115
  r = spreadsheet.costpercapita_bv115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17176.456163999148,r[:number],0.001)
end

def test_costpercapita_bw115
  r = spreadsheet.costpercapita_bw115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25539.006545674503,r[:number],0.001)
end

def test_costpercapita_bx115
  r = spreadsheet.costpercapita_bx115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32000.60715026618,r[:number],0.001)
end

def test_costpercapita_by115
  r = spreadsheet.costpercapita_by115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35737.90498533207,r[:number],0.001)
end

def test_costpercapita_bz115
  r = spreadsheet.costpercapita_bz115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38147.86962929536,r[:number],0.001)
end

def test_costpercapita_ca115
  r = spreadsheet.costpercapita_ca115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39718.29493828419,r[:number],0.001)
end

def test_costpercapita_cc115
  r = spreadsheet.costpercapita_cc115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22604.634863946198,r[:number],0.001)
end

def test_costpercapita_cd115
  r = spreadsheet.costpercapita_cd115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410371.8848446698,r[:number],0.001)
end

def test_costpercapita_cf115
  r = spreadsheet.costpercapita_cf115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2160.913610677485,r[:number],0.001)
end

def test_costpercapita_cg115
  r = spreadsheet.costpercapita_cg115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.71138520553723,r[:number],0.001)
end

def test_costpercapita_ch115
  r = spreadsheet.costpercapita_ch115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(639.6000381610446,r[:number],0.001)
end

def test_costpercapita_ci115
  r = spreadsheet.costpercapita_ci115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2756.9622868025695,r[:number],0.001)
end

def test_costpercapita_cj115
  r = spreadsheet.costpercapita_cj115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8344.406674189442,r[:number],0.001)
end

def test_costpercapita_ck115
  r = spreadsheet.costpercapita_ck115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12834.023301533409,r[:number],0.001)
end

def test_costpercapita_cl115
  r = spreadsheet.costpercapita_cl115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15483.523568919496,r[:number],0.001)
end

def test_costpercapita_cm115
  r = spreadsheet.costpercapita_cm115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17215.648243148204,r[:number],0.001)
end

def test_costpercapita_cn115
  r = spreadsheet.costpercapita_cn115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18139.969220420586,r[:number],0.001)
end

def test_costpercapita_cp115
  r = spreadsheet.costpercapita_cp115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8159.103456411423,r[:number],0.001)
end

def test_costpercapita_cq115
  r = spreadsheet.costpercapita_cq115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135289.54873010755,r[:number],0.001)
end

def test_costpercapita_cr115
  r = spreadsheet.costpercapita_cr115
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a116
  r = spreadsheet.costpercapita_a116
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b116
  r = spreadsheet.costpercapita_b116
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c116
  r = spreadsheet.costpercapita_c116
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e116
  r = spreadsheet.costpercapita_e116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.72122891171529,r[:number],0.001)
end

def test_costpercapita_f116
  r = spreadsheet.costpercapita_f116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.68271244400191,r[:number],0.001)
end

def test_costpercapita_g116
  r = spreadsheet.costpercapita_g116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(642.7952320468238,r[:number],0.001)
end

def test_costpercapita_h116
  r = spreadsheet.costpercapita_h116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1858.1229846058504,r[:number],0.001)
end

def test_costpercapita_i116
  r = spreadsheet.costpercapita_i116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2895.29770826165,r[:number],0.001)
end

def test_costpercapita_j116
  r = spreadsheet.costpercapita_j116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3766.0917828078345,r[:number],0.001)
end

def test_costpercapita_k116
  r = spreadsheet.costpercapita_k116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4805.759096509038,r[:number],0.001)
end

def test_costpercapita_l116
  r = spreadsheet.costpercapita_l116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5862.244357069407,r[:number],0.001)
end

def test_costpercapita_m116
  r = spreadsheet.costpercapita_m116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6137.805318478916,r[:number],0.001)
end

def test_costpercapita_o116
  r = spreadsheet.costpercapita_o116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.1589135829421435,r[:number],0.001)
end

def test_costpercapita_p116
  r = spreadsheet.costpercapita_p116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.258653668563156,r[:number],0.001)
end

def test_costpercapita_q116
  r = spreadsheet.costpercapita_q116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.9644515020336,r[:number],0.001)
end

def test_costpercapita_r116
  r = spreadsheet.costpercapita_r116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.97019478847534,r[:number],0.001)
end

def test_costpercapita_s116
  r = spreadsheet.costpercapita_s116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.0276397296516,r[:number],0.001)
end

def test_costpercapita_t116
  r = spreadsheet.costpercapita_t116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.753772967711,r[:number],0.001)
end

def test_costpercapita_u116
  r = spreadsheet.costpercapita_u116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.3579814319242,r[:number],0.001)
end

def test_costpercapita_v116
  r = spreadsheet.costpercapita_v116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313.0188219333095,r[:number],0.001)
end

def test_costpercapita_w116
  r = spreadsheet.costpercapita_w116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.8701120562801,r[:number],0.001)
end

def test_costpercapita_y116
  r = spreadsheet.costpercapita_y116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z116
  r = spreadsheet.costpercapita_z116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa116
  r = spreadsheet.costpercapita_aa116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab116
  r = spreadsheet.costpercapita_ab116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac116
  r = spreadsheet.costpercapita_ac116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad116
  r = spreadsheet.costpercapita_ad116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae116
  r = spreadsheet.costpercapita_ae116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af116
  r = spreadsheet.costpercapita_af116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag116
  r = spreadsheet.costpercapita_ag116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai116
  r = spreadsheet.costpercapita_ai116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.88014249465743,r[:number],0.001)
end

def test_costpercapita_aj116
  r = spreadsheet.costpercapita_aj116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.94136611256508,r[:number],0.001)
end

def test_costpercapita_ak116
  r = spreadsheet.costpercapita_ak116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(738.7596835488574,r[:number],0.001)
end

def test_costpercapita_al116
  r = spreadsheet.costpercapita_al116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.093179394326,r[:number],0.001)
end

def test_costpercapita_am116
  r = spreadsheet.costpercapita_am116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3088.3253479913014,r[:number],0.001)
end

def test_costpercapita_an116
  r = spreadsheet.costpercapita_an116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4011.8455557755456,r[:number],0.001)
end

def test_costpercapita_ao116
  r = spreadsheet.costpercapita_ao116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5105.117077940962,r[:number],0.001)
end

def test_costpercapita_ap116
  r = spreadsheet.costpercapita_ap116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6175.263179002717,r[:number],0.001)
end

def test_costpercapita_aq116
  r = spreadsheet.costpercapita_aq116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6484.675430535196,r[:number],0.001)
end

def test_costpercapita_as116
  r = spreadsheet.costpercapita_as116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3090.8778847551257,r[:number],0.001)
end

def test_costpercapita_at116
  r = spreadsheet.costpercapita_at116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52669.64586411146,r[:number],0.001)
end

def test_costpercapita_av116
  r = spreadsheet.costpercapita_av116
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw116
  r = spreadsheet.costpercapita_aw116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay116
  r = spreadsheet.costpercapita_ay116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.105118552094673,r[:number],0.001)
end

def test_costpercapita_az116
  r = spreadsheet.costpercapita_az116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.52831347695394,r[:number],0.001)
end

def test_costpercapita_ba116
  r = spreadsheet.costpercapita_ba116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(422.5535846119539,r[:number],0.001)
end

def test_costpercapita_bb116
  r = spreadsheet.costpercapita_bb116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1221.4722335368388,r[:number],0.001)
end

def test_costpercapita_bc116
  r = spreadsheet.costpercapita_bc116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1903.2786245925613,r[:number],0.001)
end

def test_costpercapita_bd116
  r = spreadsheet.costpercapita_bd116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2475.711553951216,r[:number],0.001)
end

def test_costpercapita_be116
  r = spreadsheet.costpercapita_be116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3159.1564961444437,r[:number],0.001)
end

def test_costpercapita_bf116
  r = spreadsheet.costpercapita_bf116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3853.657033303,r[:number],0.001)
end

def test_costpercapita_bg116
  r = spreadsheet.costpercapita_bg116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4034.8022350991187,r[:number],0.001)
end

def test_costpercapita_bi116
  r = spreadsheet.costpercapita_bi116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.105118552094673,r[:number],0.001)
end

def test_costpercapita_bj116
  r = spreadsheet.costpercapita_bj116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.73963886773554,r[:number],0.001)
end

def test_costpercapita_bk116
  r = spreadsheet.costpercapita_bk116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(511.28983738046423,r[:number],0.001)
end

def test_costpercapita_bl116
  r = spreadsheet.costpercapita_bl116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1692.3625695049195,r[:number],0.001)
end

def test_costpercapita_bm116
  r = spreadsheet.costpercapita_bm116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3489.663127878196,r[:number],0.001)
end

def test_costpercapita_bn116
  r = spreadsheet.costpercapita_bn116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5494.271995554816,r[:number],0.001)
end

def test_costpercapita_bo116
  r = spreadsheet.costpercapita_bo116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7400.881713371198,r[:number],0.001)
end

def test_costpercapita_bp116
  r = spreadsheet.costpercapita_bp116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9324.37638540541,r[:number],0.001)
end

def test_costpercapita_bq116
  r = spreadsheet.costpercapita_bq116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10854.901914020662,r[:number],0.001)
end

def test_costpercapita_bs116
  r = spreadsheet.costpercapita_bs116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.264032135036814,r[:number],0.001)
end

def test_costpercapita_bt116
  r = spreadsheet.costpercapita_bt116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.99829253629869,r[:number],0.001)
end

def test_costpercapita_bu116
  r = spreadsheet.costpercapita_bu116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(607.2542888824978,r[:number],0.001)
end

def test_costpercapita_bv116
  r = spreadsheet.costpercapita_bv116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1841.3327642933948,r[:number],0.001)
end

def test_costpercapita_bw116
  r = spreadsheet.costpercapita_bw116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3682.6907676078476,r[:number],0.001)
end

def test_costpercapita_bx116
  r = spreadsheet.costpercapita_bx116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5740.025768522527,r[:number],0.001)
end

def test_costpercapita_by116
  r = spreadsheet.costpercapita_by116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7700.239694803123,r[:number],0.001)
end

def test_costpercapita_bz116
  r = spreadsheet.costpercapita_bz116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9637.395207338719,r[:number],0.001)
end

def test_costpercapita_ca116
  r = spreadsheet.costpercapita_ca116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11201.772026076942,r[:number],0.001)
end

def test_costpercapita_cc116
  r = spreadsheet.costpercapita_cc116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4507.5525380218205,r[:number],0.001)
end

def test_costpercapita_cd116
  r = spreadsheet.costpercapita_cd116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72979.27992082876,r[:number],0.001)
end

def test_costpercapita_cf116
  r = spreadsheet.costpercapita_cf116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-41.61611035962061,r[:number],0.001)
end

def test_costpercapita_cg116
  r = spreadsheet.costpercapita_cg116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.943073576266377,r[:number],0.001)
end

def test_costpercapita_ch116
  r = spreadsheet.costpercapita_ch116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-131.50539466635962,r[:number],0.001)
end

def test_costpercapita_ci116
  r = spreadsheet.costpercapita_ci116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-165.76041510093097,r[:number],0.001)
end

def test_costpercapita_cj116
  r = spreadsheet.costpercapita_cj116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(594.3654196165461,r[:number],0.001)
end

def test_costpercapita_ck116
  r = spreadsheet.costpercapita_ck116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.1802127469814,r[:number],0.001)
end

def test_costpercapita_cl116
  r = spreadsheet.costpercapita_cl116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.1226168621606,r[:number],0.001)
end

def test_costpercapita_cm116
  r = spreadsheet.costpercapita_cm116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3462.1320283360033,r[:number],0.001)
end

def test_costpercapita_cn116
  r = spreadsheet.costpercapita_cn116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4717.096595541746,r[:number],0.001)
end

def test_costpercapita_cp116
  r = spreadsheet.costpercapita_cp116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1416.6746532666957,r[:number],0.001)
end

def test_costpercapita_cq116
  r = spreadsheet.costpercapita_cq116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20309.634056717314,r[:number],0.001)
end

def test_costpercapita_cr116
  r = spreadsheet.costpercapita_cr116
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a117
  r = spreadsheet.costpercapita_a117
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b117
  r = spreadsheet.costpercapita_b117
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c117
  r = spreadsheet.costpercapita_c117
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e117
  r = spreadsheet.costpercapita_e117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f117
  r = spreadsheet.costpercapita_f117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3702.7289116669695,r[:number],0.001)
end

def test_costpercapita_g117
  r = spreadsheet.costpercapita_g117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3581.5084154915644,r[:number],0.001)
end

def test_costpercapita_h117
  r = spreadsheet.costpercapita_h117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2310.7398446189923,r[:number],0.001)
end

def test_costpercapita_i117
  r = spreadsheet.costpercapita_i117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2056.2841845335156,r[:number],0.001)
end

def test_costpercapita_j117
  r = spreadsheet.costpercapita_j117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1983.4316866522192,r[:number],0.001)
end

def test_costpercapita_k117
  r = spreadsheet.costpercapita_k117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1233.10225798391,r[:number],0.001)
end

def test_costpercapita_l117
  r = spreadsheet.costpercapita_l117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(825.4474047493784,r[:number],0.001)
end

def test_costpercapita_m117
  r = spreadsheet.costpercapita_m117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(639.6286354388974,r[:number],0.001)
end

def test_costpercapita_o117
  r = spreadsheet.costpercapita_o117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3042.5697316768687,r[:number],0.001)
end

def test_costpercapita_p117
  r = spreadsheet.costpercapita_p117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3308.3463038977125,r[:number],0.001)
end

def test_costpercapita_q117
  r = spreadsheet.costpercapita_q117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3554.1570671056816,r[:number],0.001)
end

def test_costpercapita_r117
  r = spreadsheet.costpercapita_r117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3672.581292494064,r[:number],0.001)
end

def test_costpercapita_s117
  r = spreadsheet.costpercapita_s117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3775.5599077213014,r[:number],0.001)
end

def test_costpercapita_t117
  r = spreadsheet.costpercapita_t117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3882.7348101105385,r[:number],0.001)
end

def test_costpercapita_u117
  r = spreadsheet.costpercapita_u117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3921.852493680921,r[:number],0.001)
end

def test_costpercapita_v117
  r = spreadsheet.costpercapita_v117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3925.235383420013,r[:number],0.001)
end

def test_costpercapita_w117
  r = spreadsheet.costpercapita_w117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3915.2266501493004,r[:number],0.001)
end

def test_costpercapita_y117
  r = spreadsheet.costpercapita_y117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z117
  r = spreadsheet.costpercapita_z117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa117
  r = spreadsheet.costpercapita_aa117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab117
  r = spreadsheet.costpercapita_ab117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac117
  r = spreadsheet.costpercapita_ac117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad117
  r = spreadsheet.costpercapita_ad117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae117
  r = spreadsheet.costpercapita_ae117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af117
  r = spreadsheet.costpercapita_af117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag117
  r = spreadsheet.costpercapita_ag117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai117
  r = spreadsheet.costpercapita_ai117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3042.5697316768687,r[:number],0.001)
end

def test_costpercapita_aj117
  r = spreadsheet.costpercapita_aj117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7011.075215564682,r[:number],0.001)
end

def test_costpercapita_ak117
  r = spreadsheet.costpercapita_ak117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7135.6654825972455,r[:number],0.001)
end

def test_costpercapita_al117
  r = spreadsheet.costpercapita_al117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5983.321137113057,r[:number],0.001)
end

def test_costpercapita_am117
  r = spreadsheet.costpercapita_am117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5831.844092254816,r[:number],0.001)
end

def test_costpercapita_an117
  r = spreadsheet.costpercapita_an117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5866.1664967627585,r[:number],0.001)
end

def test_costpercapita_ao117
  r = spreadsheet.costpercapita_ao117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5154.954751664831,r[:number],0.001)
end

def test_costpercapita_ap117
  r = spreadsheet.costpercapita_ap117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4750.682788169392,r[:number],0.001)
end

def test_costpercapita_aq117
  r = spreadsheet.costpercapita_aq117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4554.855285588198,r[:number],0.001)
end

def test_costpercapita_as117
  r = spreadsheet.costpercapita_as117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5481.23722015465,r[:number],0.001)
end

def test_costpercapita_at117
  r = spreadsheet.costpercapita_at117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125294.58851312735,r[:number],0.001)
end

def test_costpercapita_av117
  r = spreadsheet.costpercapita_av117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw117
  r = spreadsheet.costpercapita_aw117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay117
  r = spreadsheet.costpercapita_ay117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az117
  r = spreadsheet.costpercapita_az117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2434.0587740346286,r[:number],0.001)
end

def test_costpercapita_ba117
  r = spreadsheet.costpercapita_ba117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2354.37219169292,r[:number],0.001)
end

def test_costpercapita_bb117
  r = spreadsheet.costpercapita_bb117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1519.0084738809928,r[:number],0.001)
end

def test_costpercapita_bc117
  r = spreadsheet.costpercapita_bc117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1351.7372404719579,r[:number],0.001)
end

def test_costpercapita_bd117
  r = spreadsheet.costpercapita_bd117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1303.8462752112916,r[:number],0.001)
end

def test_costpercapita_be117
  r = spreadsheet.costpercapita_be117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(810.6030557274577,r[:number],0.001)
end

def test_costpercapita_bf117
  r = spreadsheet.costpercapita_bf117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(542.623439621401,r[:number],0.001)
end

def test_costpercapita_bg117
  r = spreadsheet.costpercapita_bg117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(420.47196253233966,r[:number],0.001)
end

def test_costpercapita_bi117
  r = spreadsheet.costpercapita_bi117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj117
  r = spreadsheet.costpercapita_bj117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2434.0587740346286,r[:number],0.001)
end

def test_costpercapita_bk117
  r = spreadsheet.costpercapita_bk117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4708.744383385836,r[:number],0.001)
end

def test_costpercapita_bl117
  r = spreadsheet.costpercapita_bl117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6081.953769439285,r[:number],0.001)
end

def test_costpercapita_bm117
  r = spreadsheet.costpercapita_bm117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5048.388636048386,r[:number],0.001)
end

def test_costpercapita_bn117
  r = spreadsheet.costpercapita_bn117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4066.4475833270717,r[:number],0.001)
end

def test_costpercapita_bo117
  r = spreadsheet.costpercapita_bo117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3378.390516188754,r[:number],0.001)
end

def test_costpercapita_bp117
  r = spreadsheet.costpercapita_bp117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2587.642242410381,r[:number],0.001)
end

def test_costpercapita_bq117
  r = spreadsheet.costpercapita_bq117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1732.5768115109252,r[:number],0.001)
end

def test_costpercapita_bs117
  r = spreadsheet.costpercapita_bs117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3042.5697316768687,r[:number],0.001)
end

def test_costpercapita_bt117
  r = spreadsheet.costpercapita_bt117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5742.405077932342,r[:number],0.001)
end

def test_costpercapita_bu117
  r = spreadsheet.costpercapita_bu117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8262.90145049152,r[:number],0.001)
end

def test_costpercapita_bv117
  r = spreadsheet.costpercapita_bv117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9754.53506193335,r[:number],0.001)
end

def test_costpercapita_bw117
  r = spreadsheet.costpercapita_bw117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8823.948543769688,r[:number],0.001)
end

def test_costpercapita_bx117
  r = spreadsheet.costpercapita_bx117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7949.182393437611,r[:number],0.001)
end

def test_costpercapita_by117
  r = spreadsheet.costpercapita_by117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7300.243009869676,r[:number],0.001)
end

def test_costpercapita_bz117
  r = spreadsheet.costpercapita_bz117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6512.877625830394,r[:number],0.001)
end

def test_costpercapita_ca117
  r = spreadsheet.costpercapita_ca117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5647.803461660225,r[:number],0.001)
end

def test_costpercapita_cc117
  r = spreadsheet.costpercapita_cc117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7004.051817400185,r[:number],0.001)
end

def test_costpercapita_cd117
  r = spreadsheet.costpercapita_cd117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155108.21433348994,r[:number],0.001)
end

def test_costpercapita_cf117
  r = spreadsheet.costpercapita_cf117
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg117
  r = spreadsheet.costpercapita_cg117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1268.6701376323408,r[:number],0.001)
end

def test_costpercapita_ch117
  r = spreadsheet.costpercapita_ch117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1127.235967894272,r[:number],0.001)
end

def test_costpercapita_ci117
  r = spreadsheet.costpercapita_ci117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3771.213924820292,r[:number],0.001)
end

def test_costpercapita_cj117
  r = spreadsheet.costpercapita_cj117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2992.10445151487,r[:number],0.001)
end

def test_costpercapita_ck117
  r = spreadsheet.costpercapita_ck117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2083.0158966748527,r[:number],0.001)
end

def test_costpercapita_cl117
  r = spreadsheet.costpercapita_cl117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2145.288258204844,r[:number],0.001)
end

def test_costpercapita_cm117
  r = spreadsheet.costpercapita_cm117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1762.1948376610026,r[:number],0.001)
end

def test_costpercapita_cn117
  r = spreadsheet.costpercapita_cn117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.948176072028,r[:number],0.001)
end

def test_costpercapita_cp117
  r = spreadsheet.costpercapita_cp117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1522.8145972455357,r[:number],0.001)
end

def test_costpercapita_cq117
  r = spreadsheet.costpercapita_cq117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29813.62582036262,r[:number],0.001)
end

def test_costpercapita_cr117
  r = spreadsheet.costpercapita_cr117
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a118
  r = spreadsheet.costpercapita_a118
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b118
  r = spreadsheet.costpercapita_b118
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave and Tidal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c118
  r = spreadsheet.costpercapita_c118
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e118
  r = spreadsheet.costpercapita_e118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f118
  r = spreadsheet.costpercapita_f118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.00173579089296,r[:number],0.001)
end

def test_costpercapita_g118
  r = spreadsheet.costpercapita_g118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.999060284633966,r[:number],0.001)
end

def test_costpercapita_h118
  r = spreadsheet.costpercapita_h118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.223459568031075,r[:number],0.001)
end

def test_costpercapita_i118
  r = spreadsheet.costpercapita_i118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.61604986163827,r[:number],0.001)
end

def test_costpercapita_j118
  r = spreadsheet.costpercapita_j118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.04719220906276,r[:number],0.001)
end

def test_costpercapita_k118
  r = spreadsheet.costpercapita_k118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.70776799630954,r[:number],0.001)
end

def test_costpercapita_l118
  r = spreadsheet.costpercapita_l118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.98794811503953,r[:number],0.001)
end

def test_costpercapita_m118
  r = spreadsheet.costpercapita_m118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.02716361028794,r[:number],0.001)
end

def test_costpercapita_o118
  r = spreadsheet.costpercapita_o118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p118
  r = spreadsheet.costpercapita_p118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5646267561513622,r[:number],0.001)
end

def test_costpercapita_q118
  r = spreadsheet.costpercapita_q118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.341042581079443,r[:number],0.001)
end

def test_costpercapita_r118
  r = spreadsheet.costpercapita_r118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.187656273886345,r[:number],0.001)
end

def test_costpercapita_s118
  r = spreadsheet.costpercapita_s118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.11176502228815,r[:number],0.001)
end

def test_costpercapita_t118
  r = spreadsheet.costpercapita_t118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.37006874152002,r[:number],0.001)
end

def test_costpercapita_u118
  r = spreadsheet.costpercapita_u118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.3716585390338,r[:number],0.001)
end

def test_costpercapita_v118
  r = spreadsheet.costpercapita_v118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.4407126643444,r[:number],0.001)
end

def test_costpercapita_w118
  r = spreadsheet.costpercapita_w118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(233.84303842296478,r[:number],0.001)
end

def test_costpercapita_y118
  r = spreadsheet.costpercapita_y118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z118
  r = spreadsheet.costpercapita_z118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa118
  r = spreadsheet.costpercapita_aa118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab118
  r = spreadsheet.costpercapita_ab118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac118
  r = spreadsheet.costpercapita_ac118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad118
  r = spreadsheet.costpercapita_ad118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae118
  r = spreadsheet.costpercapita_ae118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af118
  r = spreadsheet.costpercapita_af118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag118
  r = spreadsheet.costpercapita_ag118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai118
  r = spreadsheet.costpercapita_ai118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj118
  r = spreadsheet.costpercapita_aj118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5663625470443225,r[:number],0.001)
end

def test_costpercapita_ak118
  r = spreadsheet.costpercapita_ak118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.34010286571341,r[:number],0.001)
end

def test_costpercapita_al118
  r = spreadsheet.costpercapita_al118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.411115841917418,r[:number],0.001)
end

def test_costpercapita_am118
  r = spreadsheet.costpercapita_am118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.72781488392643,r[:number],0.001)
end

def test_costpercapita_an118
  r = spreadsheet.costpercapita_an118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(289.41726095058283,r[:number],0.001)
end

def test_costpercapita_ao118
  r = spreadsheet.costpercapita_ao118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(332.0794265353433,r[:number],0.001)
end

def test_costpercapita_ap118
  r = spreadsheet.costpercapita_ap118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(384.4286607793839,r[:number],0.001)
end

def test_costpercapita_aq118
  r = spreadsheet.costpercapita_aq118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(439.8702020332528,r[:number],0.001)
end

def test_costpercapita_as118
  r = spreadsheet.costpercapita_as118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.2045496041294,r[:number],0.001)
end

def test_costpercapita_at118
  r = spreadsheet.costpercapita_at118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.2693869061018,r[:number],0.001)
end

def test_costpercapita_av118
  r = spreadsheet.costpercapita_av118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw118
  r = spreadsheet.costpercapita_aw118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay118
  r = spreadsheet.costpercapita_ay118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az118
  r = spreadsheet.costpercapita_az118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.315878823796643,r[:number],0.001)
end

def test_costpercapita_ba118
  r = spreadsheet.costpercapita_ba118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.17465329578478,r[:number],0.001)
end

def test_costpercapita_bb118
  r = spreadsheet.costpercapita_bb118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.350059749069386,r[:number],0.001)
end

def test_costpercapita_bc118
  r = spreadsheet.costpercapita_bc118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.6797449963778,r[:number],0.001)
end

def test_costpercapita_bd118
  r = spreadsheet.costpercapita_bd118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.81953734607166,r[:number],0.001)
end

def test_costpercapita_be118
  r = spreadsheet.costpercapita_be118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.68009047005147,r[:number],0.001)
end

def test_costpercapita_bf118
  r = spreadsheet.costpercapita_bf118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.49374769988984,r[:number],0.001)
end

def test_costpercapita_bg118
  r = spreadsheet.costpercapita_bg118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.43584670618569,r[:number],0.001)
end

def test_costpercapita_bi118
  r = spreadsheet.costpercapita_bi118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj118
  r = spreadsheet.costpercapita_bj118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.315878823796643,r[:number],0.001)
end

def test_costpercapita_bk118
  r = spreadsheet.costpercapita_bk118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.447452680677664,r[:number],0.001)
end

def test_costpercapita_bl118
  r = spreadsheet.costpercapita_bl118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.412096042944935,r[:number],0.001)
end

def test_costpercapita_bm118
  r = spreadsheet.costpercapita_bm118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.30716658289577,r[:number],0.001)
end

def test_costpercapita_bn118
  r = spreadsheet.costpercapita_bn118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.16231469763997,r[:number],0.001)
end

def test_costpercapita_bo118
  r = spreadsheet.costpercapita_bo118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306.0532792261715,r[:number],0.001)
end

def test_costpercapita_bp118
  r = spreadsheet.costpercapita_bp118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.0408392622421,r[:number],0.001)
end

def test_costpercapita_bq118
  r = spreadsheet.costpercapita_bq118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(384.34918984403373,r[:number],0.001)
end

def test_costpercapita_bs118
  r = spreadsheet.costpercapita_bs118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt118
  r = spreadsheet.costpercapita_bt118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8805055799480053,r[:number],0.001)
end

def test_costpercapita_bu118
  r = spreadsheet.costpercapita_bu118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.788495261757106,r[:number],0.001)
end

def test_costpercapita_bv118
  r = spreadsheet.costpercapita_bv118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.599752316831278,r[:number],0.001)
end

def test_costpercapita_bw118
  r = spreadsheet.costpercapita_bw118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.41893160518393,r[:number],0.001)
end

def test_costpercapita_bx118
  r = spreadsheet.costpercapita_bx118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.53238343916,r[:number],0.001)
end

def test_costpercapita_by118
  r = spreadsheet.costpercapita_by118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(445.42493776520536,r[:number],0.001)
end

def test_costpercapita_bz118
  r = spreadsheet.costpercapita_bz118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(568.4815519265866,r[:number],0.001)
end

def test_costpercapita_ca118
  r = spreadsheet.costpercapita_ca118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(618.1922282669984,r[:number],0.001)
end

def test_costpercapita_cc118
  r = spreadsheet.costpercapita_cc118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.3687540179634,r[:number],0.001)
end

def test_costpercapita_cd118
  r = spreadsheet.costpercapita_cd118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3497.5293987841487,r[:number],0.001)
end

def test_costpercapita_cf118
  r = spreadsheet.costpercapita_cf118
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg118
  r = spreadsheet.costpercapita_cg118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.6858569670963172,r[:number],0.001)
end

def test_costpercapita_ch118
  r = spreadsheet.costpercapita_ch118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-4.551607603956302,r[:number],0.001)
end

def test_costpercapita_ci118
  r = spreadsheet.costpercapita_ci118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.188636474913859,r[:number],0.001)
end

def test_costpercapita_cj118
  r = spreadsheet.costpercapita_cj118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.308883278742494,r[:number],0.001)
end

def test_costpercapita_ck118
  r = spreadsheet.costpercapita_ck118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-9.884877511422804,r[:number],0.001)
end

def test_costpercapita_cl118
  r = spreadsheet.costpercapita_cl118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.34551122986201,r[:number],0.001)
end

def test_costpercapita_cm118
  r = spreadsheet.costpercapita_cm118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.05289114720262,r[:number],0.001)
end

def test_costpercapita_cn118
  r = spreadsheet.costpercapita_cn118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.32202623374576,r[:number],0.001)
end

def test_costpercapita_cp118
  r = spreadsheet.costpercapita_cp118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.164204413834035,r[:number],0.001)
end

def test_costpercapita_cq118
  r = spreadsheet.costpercapita_cq118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(684.2600118780466,r[:number],0.001)
end

def test_costpercapita_cr118
  r = spreadsheet.costpercapita_cr118
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a119
  r = spreadsheet.costpercapita_a119
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b119
  r = spreadsheet.costpercapita_b119
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c119
  r = spreadsheet.costpercapita_c119
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e119
  r = spreadsheet.costpercapita_e119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f119
  r = spreadsheet.costpercapita_f119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.86378527252852,r[:number],0.001)
end

def test_costpercapita_g119
  r = spreadsheet.costpercapita_g119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.82359669917842,r[:number],0.001)
end

def test_costpercapita_h119
  r = spreadsheet.costpercapita_h119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.38233541203006,r[:number],0.001)
end

def test_costpercapita_i119
  r = spreadsheet.costpercapita_i119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.72769116826254,r[:number],0.001)
end

def test_costpercapita_j119
  r = spreadsheet.costpercapita_j119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.81724456182798,r[:number],0.001)
end

def test_costpercapita_k119
  r = spreadsheet.costpercapita_k119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(444.5866733383325,r[:number],0.001)
end

def test_costpercapita_l119
  r = spreadsheet.costpercapita_l119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(547.3558872065064,r[:number],0.001)
end

def test_costpercapita_m119
  r = spreadsheet.costpercapita_m119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(616.120930315323,r[:number],0.001)
end

def test_costpercapita_o119
  r = spreadsheet.costpercapita_o119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.74960238999448,r[:number],0.001)
end

def test_costpercapita_p119
  r = spreadsheet.costpercapita_p119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.47233822595317,r[:number],0.001)
end

def test_costpercapita_q119
  r = spreadsheet.costpercapita_q119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.25716774545808,r[:number],0.001)
end

def test_costpercapita_r119
  r = spreadsheet.costpercapita_r119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.65339889136038,r[:number],0.001)
end

def test_costpercapita_s119
  r = spreadsheet.costpercapita_s119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.28121265794196,r[:number],0.001)
end

def test_costpercapita_t119
  r = spreadsheet.costpercapita_t119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.82074994119199,r[:number],0.001)
end

def test_costpercapita_u119
  r = spreadsheet.costpercapita_u119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.57206258077395,r[:number],0.001)
end

def test_costpercapita_v119
  r = spreadsheet.costpercapita_v119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.0497871196541,r[:number],0.001)
end

def test_costpercapita_w119
  r = spreadsheet.costpercapita_w119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.9024860647404,r[:number],0.001)
end

def test_costpercapita_y119
  r = spreadsheet.costpercapita_y119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z119
  r = spreadsheet.costpercapita_z119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa119
  r = spreadsheet.costpercapita_aa119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab119
  r = spreadsheet.costpercapita_ab119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac119
  r = spreadsheet.costpercapita_ac119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad119
  r = spreadsheet.costpercapita_ad119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae119
  r = spreadsheet.costpercapita_ae119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af119
  r = spreadsheet.costpercapita_af119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag119
  r = spreadsheet.costpercapita_ag119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai119
  r = spreadsheet.costpercapita_ai119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.74960238999448,r[:number],0.001)
end

def test_costpercapita_aj119
  r = spreadsheet.costpercapita_aj119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.3361234984817,r[:number],0.001)
end

def test_costpercapita_ak119
  r = spreadsheet.costpercapita_ak119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.0807644446365,r[:number],0.001)
end

def test_costpercapita_al119
  r = spreadsheet.costpercapita_al119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.03573430339043,r[:number],0.001)
end

def test_costpercapita_am119
  r = spreadsheet.costpercapita_am119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(220.00890382620452,r[:number],0.001)
end

def test_costpercapita_an119
  r = spreadsheet.costpercapita_an119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.63799450301997,r[:number],0.001)
end

def test_costpercapita_ao119
  r = spreadsheet.costpercapita_ao119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(586.1587359191064,r[:number],0.001)
end

def test_costpercapita_ap119
  r = spreadsheet.costpercapita_ap119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.4056743261605,r[:number],0.001)
end

def test_costpercapita_aq119
  r = spreadsheet.costpercapita_aq119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(800.0234163800634,r[:number],0.001)
end

def test_costpercapita_as119
  r = spreadsheet.costpercapita_as119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(347.4929943990064,r[:number],0.001)
end

def test_costpercapita_at119
  r = spreadsheet.costpercapita_at119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6130.241568902101,r[:number],0.001)
end

def test_costpercapita_av119
  r = spreadsheet.costpercapita_av119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw119
  r = spreadsheet.costpercapita_aw119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay119
  r = spreadsheet.costpercapita_ay119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az119
  r = spreadsheet.costpercapita_az119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.04576292918629,r[:number],0.001)
end

def test_costpercapita_ba119
  r = spreadsheet.costpercapita_ba119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.04723755824544,r[:number],0.001)
end

def test_costpercapita_bb119
  r = spreadsheet.costpercapita_bb119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.6455927314099,r[:number],0.001)
end

def test_costpercapita_bc119
  r = spreadsheet.costpercapita_bc119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.07578324173434,r[:number],0.001)
end

def test_costpercapita_bd119
  r = spreadsheet.costpercapita_bd119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.96729277602348,r[:number],0.001)
end

def test_costpercapita_be119
  r = spreadsheet.costpercapita_be119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.2574454879149,r[:number],0.001)
end

def test_costpercapita_bf119
  r = spreadsheet.costpercapita_bf119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(359.81472896288955,r[:number],0.001)
end

def test_costpercapita_bg119
  r = spreadsheet.costpercapita_bg119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(405.0187286395849,r[:number],0.001)
end

def test_costpercapita_bi119
  r = spreadsheet.costpercapita_bi119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj119
  r = spreadsheet.costpercapita_bj119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.04576292918629,r[:number],0.001)
end

def test_costpercapita_bk119
  r = spreadsheet.costpercapita_bk119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.09447511649093,r[:number],0.001)
end

def test_costpercapita_bl119
  r = spreadsheet.costpercapita_bl119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.08345254930683,r[:number],0.001)
end

def test_costpercapita_bm119
  r = spreadsheet.costpercapita_bm119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.55630816034628,r[:number],0.001)
end

def test_costpercapita_bn119
  r = spreadsheet.costpercapita_bn119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.5488890860479,r[:number],0.001)
end

def test_costpercapita_bo119
  r = spreadsheet.costpercapita_bo119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(451.048274762555,r[:number],0.001)
end

def test_costpercapita_bp119
  r = spreadsheet.costpercapita_bp119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(730.616170857829,r[:number],0.001)
end

def test_costpercapita_bq119
  r = spreadsheet.costpercapita_bq119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1039.2009717161018,r[:number],0.001)
end

def test_costpercapita_bs119
  r = spreadsheet.costpercapita_bs119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.74960238999448,r[:number],0.001)
end

def test_costpercapita_bt119
  r = spreadsheet.costpercapita_bt119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.51810115513946,r[:number],0.001)
end

def test_costpercapita_bu119
  r = spreadsheet.costpercapita_bu119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.35164286194902,r[:number],0.001)
end

def test_costpercapita_bv119
  r = spreadsheet.costpercapita_bv119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(268.73685144066724,r[:number],0.001)
end

def test_costpercapita_bw119
  r = spreadsheet.costpercapita_bw119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.8375208182882,r[:number],0.001)
end

def test_costpercapita_bx119
  r = spreadsheet.costpercapita_bx119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.3696390272399,r[:number],0.001)
end

def test_costpercapita_by119
  r = spreadsheet.costpercapita_by119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(592.620337343329,r[:number],0.001)
end

def test_costpercapita_bz119
  r = spreadsheet.costpercapita_bz119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(894.6659579774831,r[:number],0.001)
end

def test_costpercapita_ca119
  r = spreadsheet.costpercapita_ca119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1223.103457780842,r[:number],0.001)
end

def test_costpercapita_cc119
  r = spreadsheet.costpercapita_cc119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443.21701231054806,r[:number],0.001)
end

def test_costpercapita_cd119
  r = spreadsheet.costpercapita_cd119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7585.472230419296,r[:number],0.001)
end

def test_costpercapita_cf119
  r = spreadsheet.costpercapita_cf119
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg119
  r = spreadsheet.costpercapita_cg119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-31.81802234334223,r[:number],0.001)
end

def test_costpercapita_ch119
  r = spreadsheet.costpercapita_ch119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.270878417312503,r[:number],0.001)
end

def test_costpercapita_ci119
  r = spreadsheet.costpercapita_ci119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.70111713727678,r[:number],0.001)
end

def test_costpercapita_cj119
  r = spreadsheet.costpercapita_cj119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.82861699208374,r[:number],0.001)
end

def test_costpercapita_ck119
  r = spreadsheet.costpercapita_ck119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.73164452421992,r[:number],0.001)
end

def test_costpercapita_cl119
  r = spreadsheet.costpercapita_cl119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.46160142422256,r[:number],0.001)
end

def test_costpercapita_cm119
  r = spreadsheet.costpercapita_cm119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.26028365132262,r[:number],0.001)
end

def test_costpercapita_cn119
  r = spreadsheet.costpercapita_cn119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(423.0800414007788,r[:number],0.001)
end

def test_costpercapita_cp119
  r = spreadsheet.costpercapita_cp119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.72401791154162,r[:number],0.001)
end

def test_costpercapita_cq119
  r = spreadsheet.costpercapita_cq119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1455.2306615171933,r[:number],0.001)
end

def test_costpercapita_cr119
  r = spreadsheet.costpercapita_cr119
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a120
  r = spreadsheet.costpercapita_a120
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b120
  r = spreadsheet.costpercapita_b120
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar PV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c120
  r = spreadsheet.costpercapita_c120
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e120
  r = spreadsheet.costpercapita_e120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.55167077577084,r[:number],0.001)
end

def test_costpercapita_f120
  r = spreadsheet.costpercapita_f120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g120
  r = spreadsheet.costpercapita_g120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2312.4518929327382,r[:number],0.001)
end

def test_costpercapita_h120
  r = spreadsheet.costpercapita_h120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(720.3106391232301,r[:number],0.001)
end

def test_costpercapita_i120
  r = spreadsheet.costpercapita_i120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(728.424294480235,r[:number],0.001)
end

def test_costpercapita_j120
  r = spreadsheet.costpercapita_j120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(483.41585902431984,r[:number],0.001)
end

def test_costpercapita_k120
  r = spreadsheet.costpercapita_k120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(280.82851596683054,r[:number],0.001)
end

def test_costpercapita_l120
  r = spreadsheet.costpercapita_l120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.8930575709863,r[:number],0.001)
end

def test_costpercapita_m120
  r = spreadsheet.costpercapita_m120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.24121577647267,r[:number],0.001)
end

def test_costpercapita_o120
  r = spreadsheet.costpercapita_o120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.6427245344414,r[:number],0.001)
end

def test_costpercapita_p120
  r = spreadsheet.costpercapita_p120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.13765253211185,r[:number],0.001)
end

def test_costpercapita_q120
  r = spreadsheet.costpercapita_q120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.29117568909749,r[:number],0.001)
end

def test_costpercapita_r120
  r = spreadsheet.costpercapita_r120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(248.30227970752418,r[:number],0.001)
end

def test_costpercapita_s120
  r = spreadsheet.costpercapita_s120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.4222896598575,r[:number],0.001)
end

def test_costpercapita_t120
  r = spreadsheet.costpercapita_t120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(319.3160929252074,r[:number],0.001)
end

def test_costpercapita_u120
  r = spreadsheet.costpercapita_u120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(332.13106198392376,r[:number],0.001)
end

def test_costpercapita_v120
  r = spreadsheet.costpercapita_v120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(342.26991655214255,r[:number],0.001)
end

def test_costpercapita_w120
  r = spreadsheet.costpercapita_w120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351.76261158379833,r[:number],0.001)
end

def test_costpercapita_y120
  r = spreadsheet.costpercapita_y120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z120
  r = spreadsheet.costpercapita_z120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa120
  r = spreadsheet.costpercapita_aa120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab120
  r = spreadsheet.costpercapita_ab120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac120
  r = spreadsheet.costpercapita_ac120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad120
  r = spreadsheet.costpercapita_ad120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae120
  r = spreadsheet.costpercapita_ae120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af120
  r = spreadsheet.costpercapita_af120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag120
  r = spreadsheet.costpercapita_ag120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai120
  r = spreadsheet.costpercapita_ai120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(530.1943953102123,r[:number],0.001)
end

def test_costpercapita_aj120
  r = spreadsheet.costpercapita_aj120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.13765253211185,r[:number],0.001)
end

def test_costpercapita_ak120
  r = spreadsheet.costpercapita_ak120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2516.743068621836,r[:number],0.001)
end

def test_costpercapita_al120
  r = spreadsheet.costpercapita_al120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(968.6129188307543,r[:number],0.001)
end

def test_costpercapita_am120
  r = spreadsheet.costpercapita_am120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1020.8465841400924,r[:number],0.001)
end

def test_costpercapita_an120
  r = spreadsheet.costpercapita_an120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.7319519495272,r[:number],0.001)
end

def test_costpercapita_ao120
  r = spreadsheet.costpercapita_ao120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(612.9595779507542,r[:number],0.001)
end

def test_costpercapita_ap120
  r = spreadsheet.costpercapita_ap120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.1629741231288,r[:number],0.001)
end

def test_costpercapita_aq120
  r = spreadsheet.costpercapita_aq120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(579.003827360271,r[:number],0.001)
end

def test_costpercapita_as120
  r = spreadsheet.costpercapita_as120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(850.8214389798542,r[:number],0.001)
end

def test_costpercapita_at120
  r = spreadsheet.costpercapita_at120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19545.183437903725,r[:number],0.001)
end

def test_costpercapita_av120
  r = spreadsheet.costpercapita_av120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw120
  r = spreadsheet.costpercapita_aw120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay120
  r = spreadsheet.costpercapita_ay120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.1175147619314,r[:number],0.001)
end

def test_costpercapita_az120
  r = spreadsheet.costpercapita_az120
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba120
  r = spreadsheet.costpercapita_ba120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1520.133921171102,r[:number],0.001)
end

def test_costpercapita_bb120
  r = spreadsheet.costpercapita_bb120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(473.5098012884402,r[:number],0.001)
end

def test_costpercapita_bc120
  r = spreadsheet.costpercapita_bc120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(478.8434658591797,r[:number],0.001)
end

def test_costpercapita_bd120
  r = spreadsheet.costpercapita_bd120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.78254396590404,r[:number],0.001)
end

def test_costpercapita_be120
  r = spreadsheet.costpercapita_be120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.60792825917466,r[:number],0.001)
end

def test_costpercapita_bf120
  r = spreadsheet.costpercapita_bf120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.69823163958694,r[:number],0.001)
end

def test_costpercapita_bg120
  r = spreadsheet.costpercapita_bg120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.3813045130559,r[:number],0.001)
end

def test_costpercapita_bi120
  r = spreadsheet.costpercapita_bi120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.1175147619314,r[:number],0.001)
end

def test_costpercapita_bj120
  r = spreadsheet.costpercapita_bj120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.81540147756922,r[:number],0.001)
end

def test_costpercapita_bk120
  r = spreadsheet.costpercapita_bk120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1698.898808230136,r[:number],0.001)
end

def test_costpercapita_bl120
  r = spreadsheet.costpercapita_bl120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1946.575094172039,r[:number],0.001)
end

def test_costpercapita_bm120
  r = spreadsheet.costpercapita_bm120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2372.2378304448102,r[:number],0.001)
end

def test_costpercapita_bn120
  r = spreadsheet.costpercapita_bn120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1235.070831946704,r[:number],0.001)
end

def test_costpercapita_bo120
  r = spreadsheet.costpercapita_bo120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(953.2058438514994,r[:number],0.001)
end

def test_costpercapita_bp120
  r = spreadsheet.costpercapita_bp120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(643.4250930889852,r[:number],0.001)
end

def test_costpercapita_bq120
  r = spreadsheet.costpercapita_bq120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.68561499725956,r[:number],0.001)
end

def test_costpercapita_bs120
  r = spreadsheet.costpercapita_bs120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236.7602392963728,r[:number],0.001)
end

def test_costpercapita_bt120
  r = spreadsheet.costpercapita_bt120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.9530540096811,r[:number],0.001)
end

def test_costpercapita_bu120
  r = spreadsheet.costpercapita_bu120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1903.1899839192333,r[:number],0.001)
end

def test_costpercapita_bv120
  r = spreadsheet.costpercapita_bv120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2194.8773738795635,r[:number],0.001)
end

def test_costpercapita_bw120
  r = spreadsheet.costpercapita_bw120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2664.660120104668,r[:number],0.001)
end

def test_costpercapita_bx120
  r = spreadsheet.costpercapita_bx120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1554.3869248719113,r[:number],0.001)
end

def test_costpercapita_by120
  r = spreadsheet.costpercapita_by120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1285.336905835423,r[:number],0.001)
end

def test_costpercapita_bz120
  r = spreadsheet.costpercapita_bz120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(985.6950096411277,r[:number],0.001)
end

def test_costpercapita_ca120
  r = spreadsheet.costpercapita_ca120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(833.448226581058,r[:number],0.001)
end

def test_costpercapita_cc120
  r = spreadsheet.costpercapita_cc120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1320.8119820154488,r[:number],0.001)
end

def test_costpercapita_cd120
  r = spreadsheet.costpercapita_cd120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29390.77994340867,r[:number],0.001)
end

def test_costpercapita_cf120
  r = spreadsheet.costpercapita_cf120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-293.4341560138394,r[:number],0.001)
end

def test_costpercapita_cg120
  r = spreadsheet.costpercapita_cg120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.81540147756922,r[:number],0.001)
end

def test_costpercapita_ch120
  r = spreadsheet.costpercapita_ch120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-613.5530847026025,r[:number],0.001)
end

def test_costpercapita_ci120
  r = spreadsheet.costpercapita_ci120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1226.2644550488087,r[:number],0.001)
end

def test_costpercapita_cj120
  r = spreadsheet.costpercapita_cj120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1643.8135359645755,r[:number],0.001)
end

def test_costpercapita_ck120
  r = spreadsheet.costpercapita_ck120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(751.6549729223841,r[:number],0.001)
end

def test_costpercapita_cl120
  r = spreadsheet.costpercapita_cl120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(672.3773278846687,r[:number],0.001)
end

def test_costpercapita_cm120
  r = spreadsheet.costpercapita_cm120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.53203551799896,r[:number],0.001)
end

def test_costpercapita_cn120
  r = spreadsheet.costpercapita_cn120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(254.44439922078692,r[:number],0.001)
end

def test_costpercapita_cp120
  r = spreadsheet.costpercapita_cp120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(469.9905430355945,r[:number],0.001)
end

def test_costpercapita_cq120
  r = spreadsheet.costpercapita_cq120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9845.596505504942,r[:number],0.001)
end

def test_costpercapita_cr120
  r = spreadsheet.costpercapita_cr120
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a121
  r = spreadsheet.costpercapita_a121
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b121
  r = spreadsheet.costpercapita_b121
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar thermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c121
  r = spreadsheet.costpercapita_c121
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e121
  r = spreadsheet.costpercapita_e121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.21140840431406,r[:number],0.001)
end

def test_costpercapita_f121
  r = spreadsheet.costpercapita_f121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.1341165411872,r[:number],0.001)
end

def test_costpercapita_g121
  r = spreadsheet.costpercapita_g121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.8409476199871,r[:number],0.001)
end

def test_costpercapita_h121
  r = spreadsheet.costpercapita_h121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(249.2542468755444,r[:number],0.001)
end

def test_costpercapita_i121
  r = spreadsheet.costpercapita_i121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.130748297227,r[:number],0.001)
end

def test_costpercapita_j121
  r = spreadsheet.costpercapita_j121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.3808032320612,r[:number],0.001)
end

def test_costpercapita_k121
  r = spreadsheet.costpercapita_k121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376.2671625130998,r[:number],0.001)
end

def test_costpercapita_l121
  r = spreadsheet.costpercapita_l121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.31516759412165,r[:number],0.001)
end

def test_costpercapita_m121
  r = spreadsheet.costpercapita_m121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.02876167592305,r[:number],0.001)
end

def test_costpercapita_o121
  r = spreadsheet.costpercapita_o121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p121
  r = spreadsheet.costpercapita_p121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q121
  r = spreadsheet.costpercapita_q121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r121
  r = spreadsheet.costpercapita_r121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s121
  r = spreadsheet.costpercapita_s121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t121
  r = spreadsheet.costpercapita_t121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u121
  r = spreadsheet.costpercapita_u121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v121
  r = spreadsheet.costpercapita_v121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w121
  r = spreadsheet.costpercapita_w121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y121
  r = spreadsheet.costpercapita_y121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z121
  r = spreadsheet.costpercapita_z121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa121
  r = spreadsheet.costpercapita_aa121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab121
  r = spreadsheet.costpercapita_ab121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac121
  r = spreadsheet.costpercapita_ac121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad121
  r = spreadsheet.costpercapita_ad121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae121
  r = spreadsheet.costpercapita_ae121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af121
  r = spreadsheet.costpercapita_af121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag121
  r = spreadsheet.costpercapita_ag121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai121
  r = spreadsheet.costpercapita_ai121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.21140840431406,r[:number],0.001)
end

def test_costpercapita_aj121
  r = spreadsheet.costpercapita_aj121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.1341165411872,r[:number],0.001)
end

def test_costpercapita_ak121
  r = spreadsheet.costpercapita_ak121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.8409476199871,r[:number],0.001)
end

def test_costpercapita_al121
  r = spreadsheet.costpercapita_al121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(249.2542468755444,r[:number],0.001)
end

def test_costpercapita_am121
  r = spreadsheet.costpercapita_am121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.130748297227,r[:number],0.001)
end

def test_costpercapita_an121
  r = spreadsheet.costpercapita_an121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.3808032320612,r[:number],0.001)
end

def test_costpercapita_ao121
  r = spreadsheet.costpercapita_ao121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376.2671625130998,r[:number],0.001)
end

def test_costpercapita_ap121
  r = spreadsheet.costpercapita_ap121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.31516759412165,r[:number],0.001)
end

def test_costpercapita_aq121
  r = spreadsheet.costpercapita_aq121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.02876167592305,r[:number],0.001)
end

def test_costpercapita_as121
  r = spreadsheet.costpercapita_as121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(327.7292625281628,r[:number],0.001)
end

def test_costpercapita_at121
  r = spreadsheet.costpercapita_at121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6867.828258153341,r[:number],0.001)
end

def test_costpercapita_av121
  r = spreadsheet.costpercapita_av121
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw121
  r = spreadsheet.costpercapita_aw121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay121
  r = spreadsheet.costpercapita_ay121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1149458040337,r[:number],0.001)
end

def test_costpercapita_az121
  r = spreadsheet.costpercapita_az121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.64146048768626,r[:number],0.001)
end

def test_costpercapita_ba121
  r = spreadsheet.costpercapita_ba121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.98662490339444,r[:number],0.001)
end

def test_costpercapita_bb121
  r = spreadsheet.costpercapita_bb121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.8519862097266,r[:number],0.001)
end

def test_costpercapita_bc121
  r = spreadsheet.costpercapita_bc121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(325.4835476585364,r[:number],0.001)
end

def test_costpercapita_bd121
  r = spreadsheet.costpercapita_bd121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.1500062325058,r[:number],0.001)
end

def test_costpercapita_be121
  r = spreadsheet.costpercapita_be121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.34632487145953,r[:number],0.001)
end

def test_costpercapita_bf121
  r = spreadsheet.costpercapita_bf121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.78837116306926,r[:number],0.001)
end

def test_costpercapita_bg121
  r = spreadsheet.costpercapita_bg121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.17794614931458,r[:number],0.001)
end

def test_costpercapita_bi121
  r = spreadsheet.costpercapita_bi121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1149458040337,r[:number],0.001)
end

def test_costpercapita_bj121
  r = spreadsheet.costpercapita_bj121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.6307322894913,r[:number],0.001)
end

def test_costpercapita_bk121
  r = spreadsheet.costpercapita_bk121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.21871449253285,r[:number],0.001)
end

def test_costpercapita_bl121
  r = spreadsheet.costpercapita_bl121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(524.5180855923494,r[:number],0.001)
end

def test_costpercapita_bm121
  r = spreadsheet.costpercapita_bm121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(656.3928040801433,r[:number],0.001)
end

def test_costpercapita_bn121
  r = spreadsheet.costpercapita_bn121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(763.5878859264574,r[:number],0.001)
end

def test_costpercapita_bo121
  r = spreadsheet.costpercapita_bo121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(842.3471575770743,r[:number],0.001)
end

def test_costpercapita_bp121
  r = spreadsheet.costpercapita_bp121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(715.4983492558106,r[:number],0.001)
end

def test_costpercapita_bq121
  r = spreadsheet.costpercapita_bq121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(559.219673384154,r[:number],0.001)
end

def test_costpercapita_bs121
  r = spreadsheet.costpercapita_bs121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1149458040337,r[:number],0.001)
end

def test_costpercapita_bt121
  r = spreadsheet.costpercapita_bt121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.6307322894913,r[:number],0.001)
end

def test_costpercapita_bu121
  r = spreadsheet.costpercapita_bu121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.21871449253285,r[:number],0.001)
end

def test_costpercapita_bv121
  r = spreadsheet.costpercapita_bv121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(524.5180855923494,r[:number],0.001)
end

def test_costpercapita_bw121
  r = spreadsheet.costpercapita_bw121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(656.3928040801433,r[:number],0.001)
end

def test_costpercapita_bx121
  r = spreadsheet.costpercapita_bx121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(763.5878859264574,r[:number],0.001)
end

def test_costpercapita_by121
  r = spreadsheet.costpercapita_by121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(842.3471575770743,r[:number],0.001)
end

def test_costpercapita_bz121
  r = spreadsheet.costpercapita_bz121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(715.4983492558106,r[:number],0.001)
end

def test_costpercapita_ca121
  r = spreadsheet.costpercapita_ca121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(559.219673384154,r[:number],0.001)
end

def test_costpercapita_cc121
  r = spreadsheet.costpercapita_cc121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(554.836483155783,r[:number],0.001)
end

def test_costpercapita_cd121
  r = spreadsheet.costpercapita_cd121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11368.00743512693,r[:number],0.001)
end

def test_costpercapita_cf121
  r = spreadsheet.costpercapita_cf121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-192.09646260028038,r[:number],0.001)
end

def test_costpercapita_cg121
  r = spreadsheet.costpercapita_cg121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.496615748304052,r[:number],0.001)
end

def test_costpercapita_ch121
  r = spreadsheet.costpercapita_ch121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.37776687254575,r[:number],0.001)
end

def test_costpercapita_ci121
  r = spreadsheet.costpercapita_ci121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275.26383871680497,r[:number],0.001)
end

def test_costpercapita_cj121
  r = spreadsheet.costpercapita_cj121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.26205578291632,r[:number],0.001)
end

def test_costpercapita_ck121
  r = spreadsheet.costpercapita_ck121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.2070826943961,r[:number],0.001)
end

def test_costpercapita_cl121
  r = spreadsheet.costpercapita_cl121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(466.0799950639746,r[:number],0.001)
end

def test_costpercapita_cm121
  r = spreadsheet.costpercapita_cm121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.18318166168893,r[:number],0.001)
end

def test_costpercapita_cn121
  r = spreadsheet.costpercapita_cn121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.19091170823094,r[:number],0.001)
end

def test_costpercapita_cp121
  r = spreadsheet.costpercapita_cp121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.10722062762014,r[:number],0.001)
end

def test_costpercapita_cq121
  r = spreadsheet.costpercapita_cq121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4500.17917697359,r[:number],0.001)
end

def test_costpercapita_cr121
  r = spreadsheet.costpercapita_cr121
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a122
  r = spreadsheet.costpercapita_a122
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b122
  r = spreadsheet.costpercapita_b122
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c122
  r = spreadsheet.costpercapita_c122
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e122
  r = spreadsheet.costpercapita_e122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f122
  r = spreadsheet.costpercapita_f122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g122
  r = spreadsheet.costpercapita_g122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h122
  r = spreadsheet.costpercapita_h122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i122
  r = spreadsheet.costpercapita_i122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j122
  r = spreadsheet.costpercapita_j122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k122
  r = spreadsheet.costpercapita_k122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l122
  r = spreadsheet.costpercapita_l122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m122
  r = spreadsheet.costpercapita_m122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o122
  r = spreadsheet.costpercapita_o122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p122
  r = spreadsheet.costpercapita_p122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q122
  r = spreadsheet.costpercapita_q122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r122
  r = spreadsheet.costpercapita_r122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s122
  r = spreadsheet.costpercapita_s122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t122
  r = spreadsheet.costpercapita_t122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u122
  r = spreadsheet.costpercapita_u122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v122
  r = spreadsheet.costpercapita_v122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w122
  r = spreadsheet.costpercapita_w122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y122
  r = spreadsheet.costpercapita_y122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z122
  r = spreadsheet.costpercapita_z122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa122
  r = spreadsheet.costpercapita_aa122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab122
  r = spreadsheet.costpercapita_ab122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac122
  r = spreadsheet.costpercapita_ac122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad122
  r = spreadsheet.costpercapita_ad122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae122
  r = spreadsheet.costpercapita_ae122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af122
  r = spreadsheet.costpercapita_af122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag122
  r = spreadsheet.costpercapita_ag122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai122
  r = spreadsheet.costpercapita_ai122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj122
  r = spreadsheet.costpercapita_aj122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak122
  r = spreadsheet.costpercapita_ak122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al122
  r = spreadsheet.costpercapita_al122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am122
  r = spreadsheet.costpercapita_am122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an122
  r = spreadsheet.costpercapita_an122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao122
  r = spreadsheet.costpercapita_ao122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap122
  r = spreadsheet.costpercapita_ap122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq122
  r = spreadsheet.costpercapita_aq122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as122
  r = spreadsheet.costpercapita_as122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at122
  r = spreadsheet.costpercapita_at122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av122
  r = spreadsheet.costpercapita_av122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw122
  r = spreadsheet.costpercapita_aw122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay122
  r = spreadsheet.costpercapita_ay122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az122
  r = spreadsheet.costpercapita_az122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba122
  r = spreadsheet.costpercapita_ba122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb122
  r = spreadsheet.costpercapita_bb122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc122
  r = spreadsheet.costpercapita_bc122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd122
  r = spreadsheet.costpercapita_bd122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be122
  r = spreadsheet.costpercapita_be122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf122
  r = spreadsheet.costpercapita_bf122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg122
  r = spreadsheet.costpercapita_bg122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi122
  r = spreadsheet.costpercapita_bi122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj122
  r = spreadsheet.costpercapita_bj122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk122
  r = spreadsheet.costpercapita_bk122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl122
  r = spreadsheet.costpercapita_bl122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm122
  r = spreadsheet.costpercapita_bm122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn122
  r = spreadsheet.costpercapita_bn122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo122
  r = spreadsheet.costpercapita_bo122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp122
  r = spreadsheet.costpercapita_bp122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq122
  r = spreadsheet.costpercapita_bq122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs122
  r = spreadsheet.costpercapita_bs122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt122
  r = spreadsheet.costpercapita_bt122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu122
  r = spreadsheet.costpercapita_bu122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv122
  r = spreadsheet.costpercapita_bv122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw122
  r = spreadsheet.costpercapita_bw122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx122
  r = spreadsheet.costpercapita_bx122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by122
  r = spreadsheet.costpercapita_by122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz122
  r = spreadsheet.costpercapita_bz122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca122
  r = spreadsheet.costpercapita_ca122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc122
  r = spreadsheet.costpercapita_cc122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd122
  r = spreadsheet.costpercapita_cd122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf122
  r = spreadsheet.costpercapita_cf122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg122
  r = spreadsheet.costpercapita_cg122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch122
  r = spreadsheet.costpercapita_ch122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci122
  r = spreadsheet.costpercapita_ci122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj122
  r = spreadsheet.costpercapita_cj122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck122
  r = spreadsheet.costpercapita_ck122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl122
  r = spreadsheet.costpercapita_cl122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm122
  r = spreadsheet.costpercapita_cm122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn122
  r = spreadsheet.costpercapita_cn122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp122
  r = spreadsheet.costpercapita_cp122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq122
  r = spreadsheet.costpercapita_cq122
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr122
  r = spreadsheet.costpercapita_cr122
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a123
  r = spreadsheet.costpercapita_a123
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b123
  r = spreadsheet.costpercapita_b123
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomatter to fuel conversion",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c123
  r = spreadsheet.costpercapita_c123
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e123
  r = spreadsheet.costpercapita_e123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(238.5685788254564,r[:number],0.001)
end

def test_costpercapita_f123
  r = spreadsheet.costpercapita_f123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.07899286893252,r[:number],0.001)
end

def test_costpercapita_g123
  r = spreadsheet.costpercapita_g123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(399.80205216258474,r[:number],0.001)
end

def test_costpercapita_h123
  r = spreadsheet.costpercapita_h123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(250.1999623567142,r[:number],0.001)
end

def test_costpercapita_i123
  r = spreadsheet.costpercapita_i123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.03646010121858,r[:number],0.001)
end

def test_costpercapita_j123
  r = spreadsheet.costpercapita_j123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.89706970370426,r[:number],0.001)
end

def test_costpercapita_k123
  r = spreadsheet.costpercapita_k123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.2457542637264,r[:number],0.001)
end

def test_costpercapita_l123
  r = spreadsheet.costpercapita_l123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.75446106694267,r[:number],0.001)
end

def test_costpercapita_m123
  r = spreadsheet.costpercapita_m123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.96281341984988,r[:number],0.001)
end

def test_costpercapita_o123
  r = spreadsheet.costpercapita_o123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1711.6246728779583,r[:number],0.001)
end

def test_costpercapita_p123
  r = spreadsheet.costpercapita_p123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1667.1242090821036,r[:number],0.001)
end

def test_costpercapita_q123
  r = spreadsheet.costpercapita_q123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1624.0952150592834,r[:number],0.001)
end

def test_costpercapita_r123
  r = spreadsheet.costpercapita_r123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1716.8083979780492,r[:number],0.001)
end

def test_costpercapita_s123
  r = spreadsheet.costpercapita_s123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1683.8193573806764,r[:number],0.001)
end

def test_costpercapita_t123
  r = spreadsheet.costpercapita_t123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1657.7424844359532,r[:number],0.001)
end

def test_costpercapita_u123
  r = spreadsheet.costpercapita_u123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1635.685737104001,r[:number],0.001)
end

def test_costpercapita_v123
  r = spreadsheet.costpercapita_v123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1629.120527013534,r[:number],0.001)
end

def test_costpercapita_w123
  r = spreadsheet.costpercapita_w123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1611.5067810891926,r[:number],0.001)
end

def test_costpercapita_y123
  r = spreadsheet.costpercapita_y123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z123
  r = spreadsheet.costpercapita_z123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa123
  r = spreadsheet.costpercapita_aa123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab123
  r = spreadsheet.costpercapita_ab123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac123
  r = spreadsheet.costpercapita_ac123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad123
  r = spreadsheet.costpercapita_ad123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae123
  r = spreadsheet.costpercapita_ae123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af123
  r = spreadsheet.costpercapita_af123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag123
  r = spreadsheet.costpercapita_ag123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai123
  r = spreadsheet.costpercapita_ai123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1950.1932517034147,r[:number],0.001)
end

def test_costpercapita_aj123
  r = spreadsheet.costpercapita_aj123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1899.2032019510361,r[:number],0.001)
end

def test_costpercapita_ak123
  r = spreadsheet.costpercapita_ak123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2023.8972672218679,r[:number],0.001)
end

def test_costpercapita_al123
  r = spreadsheet.costpercapita_al123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1967.0083603347634,r[:number],0.001)
end

def test_costpercapita_am123
  r = spreadsheet.costpercapita_am123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1928.8558174818947,r[:number],0.001)
end

def test_costpercapita_an123
  r = spreadsheet.costpercapita_an123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898.6395541396575,r[:number],0.001)
end

def test_costpercapita_ao123
  r = spreadsheet.costpercapita_ao123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1886.9314913677274,r[:number],0.001)
end

def test_costpercapita_ap123
  r = spreadsheet.costpercapita_ap123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1864.8749880804767,r[:number],0.001)
end

def test_costpercapita_aq123
  r = spreadsheet.costpercapita_aq123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1831.4695945090425,r[:number],0.001)
end

def test_costpercapita_as123
  r = spreadsheet.costpercapita_as123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1916.7859474210984,r[:number],0.001)
end

def test_costpercapita_at123
  r = spreadsheet.costpercapita_at123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40508.495642003756,r[:number],0.001)
end

def test_costpercapita_av123
  r = spreadsheet.costpercapita_av123
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw123
  r = spreadsheet.costpercapita_aw123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay123
  r = spreadsheet.costpercapita_ay123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.0965363145066,r[:number],0.001)
end

def test_costpercapita_az123
  r = spreadsheet.costpercapita_az123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.56150864348044,r[:number],0.001)
end

def test_costpercapita_ba123
  r = spreadsheet.costpercapita_ba123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.8174290256861,r[:number],0.001)
end

def test_costpercapita_bb123
  r = spreadsheet.costpercapita_bb123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.47367014057787,r[:number],0.001)
end

def test_costpercapita_bc123
  r = spreadsheet.costpercapita_bc123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.0793444230955,r[:number],0.001)
end

def test_costpercapita_bd123
  r = spreadsheet.costpercapita_bd123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.35823797523287,r[:number],0.001)
end

def test_costpercapita_be123
  r = spreadsheet.costpercapita_be123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.1611411998436,r[:number],0.001)
end

def test_costpercapita_bf123
  r = spreadsheet.costpercapita_bf123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.9776470725895,r[:number],0.001)
end

def test_costpercapita_bg123
  r = spreadsheet.costpercapita_bg123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.59670927540014,r[:number],0.001)
end

def test_costpercapita_bi123
  r = spreadsheet.costpercapita_bi123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.0965363145066,r[:number],0.001)
end

def test_costpercapita_bj123
  r = spreadsheet.costpercapita_bj123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243.55520515673277,r[:number],0.001)
end

def test_costpercapita_bk123
  r = spreadsheet.costpercapita_bk123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498.3990872337951,r[:number],0.001)
end

def test_costpercapita_bl123
  r = spreadsheet.costpercapita_bl123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(562.1511005403416,r[:number],0.001)
end

def test_costpercapita_bm123
  r = spreadsheet.costpercapita_bm123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(568.7813688407251,r[:number],0.001)
end

def test_costpercapita_bn123
  r = spreadsheet.costpercapita_bn123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(471.8550251508655,r[:number],0.001)
end

def test_costpercapita_bo123
  r = spreadsheet.costpercapita_bo123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(474.0728577666408,r[:number],0.001)
end

def test_costpercapita_bp123
  r = spreadsheet.costpercapita_bp123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(468.73364517920686,r[:number],0.001)
end

def test_costpercapita_bq123
  r = spreadsheet.costpercapita_bq123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(455.52801349273926,r[:number],0.001)
end

def test_costpercapita_bs123
  r = spreadsheet.costpercapita_bs123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1805.7212091924648,r[:number],0.001)
end

def test_costpercapita_bt123
  r = spreadsheet.costpercapita_bt123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1910.6794142388364,r[:number],0.001)
end

def test_costpercapita_bu123
  r = spreadsheet.costpercapita_bu123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2122.4943022930784,r[:number],0.001)
end

def test_costpercapita_bv123
  r = spreadsheet.costpercapita_bv123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2278.959498518391,r[:number],0.001)
end

def test_costpercapita_bw123
  r = spreadsheet.costpercapita_bw123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2252.6007262214016,r[:number],0.001)
end

def test_costpercapita_bx123
  r = spreadsheet.costpercapita_bx123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2129.597509586819,r[:number],0.001)
end

def test_costpercapita_by123
  r = spreadsheet.costpercapita_by123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2109.758594870642,r[:number],0.001)
end

def test_costpercapita_bz123
  r = spreadsheet.costpercapita_bz123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2097.854172192741,r[:number],0.001)
end

def test_costpercapita_ca123
  r = spreadsheet.costpercapita_ca123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2067.0347945819317,r[:number],0.001)
end

def test_costpercapita_cc123
  r = spreadsheet.costpercapita_cc123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2086.0778024107003,r[:number],0.001)
end

def test_costpercapita_cd123
  r = spreadsheet.costpercapita_cd123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44062.184153179245,r[:number],0.001)
end

def test_costpercapita_cf123
  r = spreadsheet.costpercapita_cf123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-144.47204251094982,r[:number],0.001)
end

def test_costpercapita_cg123
  r = spreadsheet.costpercapita_cg123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.476212287800234,r[:number],0.001)
end

def test_costpercapita_ch123
  r = spreadsheet.costpercapita_ch123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.59703507121037,r[:number],0.001)
end

def test_costpercapita_ci123
  r = spreadsheet.costpercapita_ci123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9511381836275,r[:number],0.001)
end

def test_costpercapita_cj123
  r = spreadsheet.costpercapita_cj123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(323.7449087395065,r[:number],0.001)
end

def test_costpercapita_ck123
  r = spreadsheet.costpercapita_ck123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(230.95795544716125,r[:number],0.001)
end

def test_costpercapita_cl123
  r = spreadsheet.costpercapita_cl123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.8271035029144,r[:number],0.001)
end

def test_costpercapita_cm123
  r = spreadsheet.costpercapita_cm123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.97918411226416,r[:number],0.001)
end

def test_costpercapita_cn123
  r = spreadsheet.costpercapita_cn123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.56520007288935,r[:number],0.001)
end

def test_costpercapita_cp123
  r = spreadsheet.costpercapita_cp123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.29185498960268,r[:number],0.001)
end

def test_costpercapita_cq123
  r = spreadsheet.costpercapita_cq123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3553.688511175487,r[:number],0.001)
end

def test_costpercapita_cr123
  r = spreadsheet.costpercapita_cr123
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a124
  r = spreadsheet.costpercapita_a124
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b124
  r = spreadsheet.costpercapita_b124
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c124
  r = spreadsheet.costpercapita_c124
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e124
  r = spreadsheet.costpercapita_e124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f124
  r = spreadsheet.costpercapita_f124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g124
  r = spreadsheet.costpercapita_g124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h124
  r = spreadsheet.costpercapita_h124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i124
  r = spreadsheet.costpercapita_i124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j124
  r = spreadsheet.costpercapita_j124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k124
  r = spreadsheet.costpercapita_k124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l124
  r = spreadsheet.costpercapita_l124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m124
  r = spreadsheet.costpercapita_m124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o124
  r = spreadsheet.costpercapita_o124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p124
  r = spreadsheet.costpercapita_p124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q124
  r = spreadsheet.costpercapita_q124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r124
  r = spreadsheet.costpercapita_r124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s124
  r = spreadsheet.costpercapita_s124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t124
  r = spreadsheet.costpercapita_t124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u124
  r = spreadsheet.costpercapita_u124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v124
  r = spreadsheet.costpercapita_v124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w124
  r = spreadsheet.costpercapita_w124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y124
  r = spreadsheet.costpercapita_y124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z124
  r = spreadsheet.costpercapita_z124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa124
  r = spreadsheet.costpercapita_aa124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab124
  r = spreadsheet.costpercapita_ab124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac124
  r = spreadsheet.costpercapita_ac124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad124
  r = spreadsheet.costpercapita_ad124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae124
  r = spreadsheet.costpercapita_ae124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af124
  r = spreadsheet.costpercapita_af124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag124
  r = spreadsheet.costpercapita_ag124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai124
  r = spreadsheet.costpercapita_ai124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj124
  r = spreadsheet.costpercapita_aj124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak124
  r = spreadsheet.costpercapita_ak124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al124
  r = spreadsheet.costpercapita_al124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am124
  r = spreadsheet.costpercapita_am124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an124
  r = spreadsheet.costpercapita_an124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao124
  r = spreadsheet.costpercapita_ao124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap124
  r = spreadsheet.costpercapita_ap124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq124
  r = spreadsheet.costpercapita_aq124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as124
  r = spreadsheet.costpercapita_as124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at124
  r = spreadsheet.costpercapita_at124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av124
  r = spreadsheet.costpercapita_av124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw124
  r = spreadsheet.costpercapita_aw124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay124
  r = spreadsheet.costpercapita_ay124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az124
  r = spreadsheet.costpercapita_az124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba124
  r = spreadsheet.costpercapita_ba124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb124
  r = spreadsheet.costpercapita_bb124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc124
  r = spreadsheet.costpercapita_bc124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd124
  r = spreadsheet.costpercapita_bd124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be124
  r = spreadsheet.costpercapita_be124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf124
  r = spreadsheet.costpercapita_bf124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg124
  r = spreadsheet.costpercapita_bg124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi124
  r = spreadsheet.costpercapita_bi124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj124
  r = spreadsheet.costpercapita_bj124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk124
  r = spreadsheet.costpercapita_bk124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl124
  r = spreadsheet.costpercapita_bl124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm124
  r = spreadsheet.costpercapita_bm124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn124
  r = spreadsheet.costpercapita_bn124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo124
  r = spreadsheet.costpercapita_bo124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp124
  r = spreadsheet.costpercapita_bp124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq124
  r = spreadsheet.costpercapita_bq124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs124
  r = spreadsheet.costpercapita_bs124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt124
  r = spreadsheet.costpercapita_bt124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu124
  r = spreadsheet.costpercapita_bu124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv124
  r = spreadsheet.costpercapita_bv124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw124
  r = spreadsheet.costpercapita_bw124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx124
  r = spreadsheet.costpercapita_bx124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by124
  r = spreadsheet.costpercapita_by124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz124
  r = spreadsheet.costpercapita_bz124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca124
  r = spreadsheet.costpercapita_ca124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc124
  r = spreadsheet.costpercapita_cc124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd124
  r = spreadsheet.costpercapita_cd124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf124
  r = spreadsheet.costpercapita_cf124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg124
  r = spreadsheet.costpercapita_cg124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch124
  r = spreadsheet.costpercapita_ch124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci124
  r = spreadsheet.costpercapita_ci124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj124
  r = spreadsheet.costpercapita_cj124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck124
  r = spreadsheet.costpercapita_ck124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl124
  r = spreadsheet.costpercapita_cl124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm124
  r = spreadsheet.costpercapita_cm124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn124
  r = spreadsheet.costpercapita_cn124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp124
  r = spreadsheet.costpercapita_cp124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq124
  r = spreadsheet.costpercapita_cq124
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr124
  r = spreadsheet.costpercapita_cr124
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a125
  r = spreadsheet.costpercapita_a125
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b125
  r = spreadsheet.costpercapita_b125
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c125
  r = spreadsheet.costpercapita_c125
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e125
  r = spreadsheet.costpercapita_e125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f125
  r = spreadsheet.costpercapita_f125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g125
  r = spreadsheet.costpercapita_g125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h125
  r = spreadsheet.costpercapita_h125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i125
  r = spreadsheet.costpercapita_i125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j125
  r = spreadsheet.costpercapita_j125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k125
  r = spreadsheet.costpercapita_k125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l125
  r = spreadsheet.costpercapita_l125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m125
  r = spreadsheet.costpercapita_m125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o125
  r = spreadsheet.costpercapita_o125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p125
  r = spreadsheet.costpercapita_p125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q125
  r = spreadsheet.costpercapita_q125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r125
  r = spreadsheet.costpercapita_r125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s125
  r = spreadsheet.costpercapita_s125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t125
  r = spreadsheet.costpercapita_t125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u125
  r = spreadsheet.costpercapita_u125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v125
  r = spreadsheet.costpercapita_v125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w125
  r = spreadsheet.costpercapita_w125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y125
  r = spreadsheet.costpercapita_y125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z125
  r = spreadsheet.costpercapita_z125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa125
  r = spreadsheet.costpercapita_aa125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab125
  r = spreadsheet.costpercapita_ab125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac125
  r = spreadsheet.costpercapita_ac125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad125
  r = spreadsheet.costpercapita_ad125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae125
  r = spreadsheet.costpercapita_ae125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af125
  r = spreadsheet.costpercapita_af125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag125
  r = spreadsheet.costpercapita_ag125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai125
  r = spreadsheet.costpercapita_ai125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj125
  r = spreadsheet.costpercapita_aj125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak125
  r = spreadsheet.costpercapita_ak125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al125
  r = spreadsheet.costpercapita_al125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am125
  r = spreadsheet.costpercapita_am125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an125
  r = spreadsheet.costpercapita_an125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao125
  r = spreadsheet.costpercapita_ao125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap125
  r = spreadsheet.costpercapita_ap125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq125
  r = spreadsheet.costpercapita_aq125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as125
  r = spreadsheet.costpercapita_as125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at125
  r = spreadsheet.costpercapita_at125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av125
  r = spreadsheet.costpercapita_av125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw125
  r = spreadsheet.costpercapita_aw125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay125
  r = spreadsheet.costpercapita_ay125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az125
  r = spreadsheet.costpercapita_az125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba125
  r = spreadsheet.costpercapita_ba125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb125
  r = spreadsheet.costpercapita_bb125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc125
  r = spreadsheet.costpercapita_bc125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd125
  r = spreadsheet.costpercapita_bd125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be125
  r = spreadsheet.costpercapita_be125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf125
  r = spreadsheet.costpercapita_bf125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg125
  r = spreadsheet.costpercapita_bg125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi125
  r = spreadsheet.costpercapita_bi125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj125
  r = spreadsheet.costpercapita_bj125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk125
  r = spreadsheet.costpercapita_bk125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl125
  r = spreadsheet.costpercapita_bl125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm125
  r = spreadsheet.costpercapita_bm125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn125
  r = spreadsheet.costpercapita_bn125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo125
  r = spreadsheet.costpercapita_bo125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp125
  r = spreadsheet.costpercapita_bp125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq125
  r = spreadsheet.costpercapita_bq125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs125
  r = spreadsheet.costpercapita_bs125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt125
  r = spreadsheet.costpercapita_bt125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu125
  r = spreadsheet.costpercapita_bu125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv125
  r = spreadsheet.costpercapita_bv125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw125
  r = spreadsheet.costpercapita_bw125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx125
  r = spreadsheet.costpercapita_bx125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by125
  r = spreadsheet.costpercapita_by125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz125
  r = spreadsheet.costpercapita_bz125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca125
  r = spreadsheet.costpercapita_ca125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc125
  r = spreadsheet.costpercapita_cc125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd125
  r = spreadsheet.costpercapita_cd125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf125
  r = spreadsheet.costpercapita_cf125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg125
  r = spreadsheet.costpercapita_cg125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch125
  r = spreadsheet.costpercapita_ch125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci125
  r = spreadsheet.costpercapita_ci125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj125
  r = spreadsheet.costpercapita_cj125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck125
  r = spreadsheet.costpercapita_ck125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl125
  r = spreadsheet.costpercapita_cl125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm125
  r = spreadsheet.costpercapita_cm125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn125
  r = spreadsheet.costpercapita_cn125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp125
  r = spreadsheet.costpercapita_cp125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq125
  r = spreadsheet.costpercapita_cq125
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr125
  r = spreadsheet.costpercapita_cr125
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a126
  r = spreadsheet.costpercapita_a126
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Emissions",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b126
  r = spreadsheet.costpercapita_b126
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c126
  r = spreadsheet.costpercapita_c126
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e126
  r = spreadsheet.costpercapita_e126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f126
  r = spreadsheet.costpercapita_f126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g126
  r = spreadsheet.costpercapita_g126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h126
  r = spreadsheet.costpercapita_h126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i126
  r = spreadsheet.costpercapita_i126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j126
  r = spreadsheet.costpercapita_j126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k126
  r = spreadsheet.costpercapita_k126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l126
  r = spreadsheet.costpercapita_l126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m126
  r = spreadsheet.costpercapita_m126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o126
  r = spreadsheet.costpercapita_o126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p126
  r = spreadsheet.costpercapita_p126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q126
  r = spreadsheet.costpercapita_q126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r126
  r = spreadsheet.costpercapita_r126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s126
  r = spreadsheet.costpercapita_s126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t126
  r = spreadsheet.costpercapita_t126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u126
  r = spreadsheet.costpercapita_u126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v126
  r = spreadsheet.costpercapita_v126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w126
  r = spreadsheet.costpercapita_w126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y126
  r = spreadsheet.costpercapita_y126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z126
  r = spreadsheet.costpercapita_z126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa126
  r = spreadsheet.costpercapita_aa126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab126
  r = spreadsheet.costpercapita_ab126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac126
  r = spreadsheet.costpercapita_ac126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad126
  r = spreadsheet.costpercapita_ad126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae126
  r = spreadsheet.costpercapita_ae126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af126
  r = spreadsheet.costpercapita_af126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag126
  r = spreadsheet.costpercapita_ag126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai126
  r = spreadsheet.costpercapita_ai126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj126
  r = spreadsheet.costpercapita_aj126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak126
  r = spreadsheet.costpercapita_ak126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al126
  r = spreadsheet.costpercapita_al126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am126
  r = spreadsheet.costpercapita_am126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an126
  r = spreadsheet.costpercapita_an126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao126
  r = spreadsheet.costpercapita_ao126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap126
  r = spreadsheet.costpercapita_ap126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq126
  r = spreadsheet.costpercapita_aq126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as126
  r = spreadsheet.costpercapita_as126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at126
  r = spreadsheet.costpercapita_at126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av126
  r = spreadsheet.costpercapita_av126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw126
  r = spreadsheet.costpercapita_aw126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay126
  r = spreadsheet.costpercapita_ay126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az126
  r = spreadsheet.costpercapita_az126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba126
  r = spreadsheet.costpercapita_ba126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb126
  r = spreadsheet.costpercapita_bb126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc126
  r = spreadsheet.costpercapita_bc126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd126
  r = spreadsheet.costpercapita_bd126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be126
  r = spreadsheet.costpercapita_be126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf126
  r = spreadsheet.costpercapita_bf126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg126
  r = spreadsheet.costpercapita_bg126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi126
  r = spreadsheet.costpercapita_bi126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj126
  r = spreadsheet.costpercapita_bj126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk126
  r = spreadsheet.costpercapita_bk126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl126
  r = spreadsheet.costpercapita_bl126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm126
  r = spreadsheet.costpercapita_bm126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn126
  r = spreadsheet.costpercapita_bn126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo126
  r = spreadsheet.costpercapita_bo126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp126
  r = spreadsheet.costpercapita_bp126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq126
  r = spreadsheet.costpercapita_bq126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs126
  r = spreadsheet.costpercapita_bs126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt126
  r = spreadsheet.costpercapita_bt126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu126
  r = spreadsheet.costpercapita_bu126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv126
  r = spreadsheet.costpercapita_bv126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw126
  r = spreadsheet.costpercapita_bw126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx126
  r = spreadsheet.costpercapita_bx126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by126
  r = spreadsheet.costpercapita_by126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz126
  r = spreadsheet.costpercapita_bz126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca126
  r = spreadsheet.costpercapita_ca126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc126
  r = spreadsheet.costpercapita_cc126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd126
  r = spreadsheet.costpercapita_cd126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf126
  r = spreadsheet.costpercapita_cf126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg126
  r = spreadsheet.costpercapita_cg126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch126
  r = spreadsheet.costpercapita_ch126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci126
  r = spreadsheet.costpercapita_ci126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj126
  r = spreadsheet.costpercapita_cj126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck126
  r = spreadsheet.costpercapita_ck126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl126
  r = spreadsheet.costpercapita_cl126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm126
  r = spreadsheet.costpercapita_cm126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn126
  r = spreadsheet.costpercapita_cn126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp126
  r = spreadsheet.costpercapita_cp126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq126
  r = spreadsheet.costpercapita_cq126
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr126
  r = spreadsheet.costpercapita_cr126
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a127
  r = spreadsheet.costpercapita_a127
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b127
  r = spreadsheet.costpercapita_b127
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy from waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c127
  r = spreadsheet.costpercapita_c127
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e127
  r = spreadsheet.costpercapita_e127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f127
  r = spreadsheet.costpercapita_f127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g127
  r = spreadsheet.costpercapita_g127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h127
  r = spreadsheet.costpercapita_h127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i127
  r = spreadsheet.costpercapita_i127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j127
  r = spreadsheet.costpercapita_j127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k127
  r = spreadsheet.costpercapita_k127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l127
  r = spreadsheet.costpercapita_l127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m127
  r = spreadsheet.costpercapita_m127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o127
  r = spreadsheet.costpercapita_o127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p127
  r = spreadsheet.costpercapita_p127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q127
  r = spreadsheet.costpercapita_q127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r127
  r = spreadsheet.costpercapita_r127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s127
  r = spreadsheet.costpercapita_s127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t127
  r = spreadsheet.costpercapita_t127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u127
  r = spreadsheet.costpercapita_u127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v127
  r = spreadsheet.costpercapita_v127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w127
  r = spreadsheet.costpercapita_w127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y127
  r = spreadsheet.costpercapita_y127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z127
  r = spreadsheet.costpercapita_z127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa127
  r = spreadsheet.costpercapita_aa127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab127
  r = spreadsheet.costpercapita_ab127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac127
  r = spreadsheet.costpercapita_ac127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad127
  r = spreadsheet.costpercapita_ad127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae127
  r = spreadsheet.costpercapita_ae127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af127
  r = spreadsheet.costpercapita_af127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag127
  r = spreadsheet.costpercapita_ag127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai127
  r = spreadsheet.costpercapita_ai127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj127
  r = spreadsheet.costpercapita_aj127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak127
  r = spreadsheet.costpercapita_ak127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al127
  r = spreadsheet.costpercapita_al127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am127
  r = spreadsheet.costpercapita_am127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an127
  r = spreadsheet.costpercapita_an127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao127
  r = spreadsheet.costpercapita_ao127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap127
  r = spreadsheet.costpercapita_ap127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq127
  r = spreadsheet.costpercapita_aq127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as127
  r = spreadsheet.costpercapita_as127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at127
  r = spreadsheet.costpercapita_at127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av127
  r = spreadsheet.costpercapita_av127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw127
  r = spreadsheet.costpercapita_aw127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay127
  r = spreadsheet.costpercapita_ay127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az127
  r = spreadsheet.costpercapita_az127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba127
  r = spreadsheet.costpercapita_ba127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb127
  r = spreadsheet.costpercapita_bb127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc127
  r = spreadsheet.costpercapita_bc127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd127
  r = spreadsheet.costpercapita_bd127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be127
  r = spreadsheet.costpercapita_be127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf127
  r = spreadsheet.costpercapita_bf127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg127
  r = spreadsheet.costpercapita_bg127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi127
  r = spreadsheet.costpercapita_bi127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj127
  r = spreadsheet.costpercapita_bj127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk127
  r = spreadsheet.costpercapita_bk127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl127
  r = spreadsheet.costpercapita_bl127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm127
  r = spreadsheet.costpercapita_bm127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn127
  r = spreadsheet.costpercapita_bn127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo127
  r = spreadsheet.costpercapita_bo127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp127
  r = spreadsheet.costpercapita_bp127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq127
  r = spreadsheet.costpercapita_bq127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs127
  r = spreadsheet.costpercapita_bs127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt127
  r = spreadsheet.costpercapita_bt127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu127
  r = spreadsheet.costpercapita_bu127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv127
  r = spreadsheet.costpercapita_bv127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw127
  r = spreadsheet.costpercapita_bw127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx127
  r = spreadsheet.costpercapita_bx127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by127
  r = spreadsheet.costpercapita_by127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz127
  r = spreadsheet.costpercapita_bz127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca127
  r = spreadsheet.costpercapita_ca127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc127
  r = spreadsheet.costpercapita_cc127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd127
  r = spreadsheet.costpercapita_cd127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf127
  r = spreadsheet.costpercapita_cf127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg127
  r = spreadsheet.costpercapita_cg127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch127
  r = spreadsheet.costpercapita_ch127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci127
  r = spreadsheet.costpercapita_ci127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj127
  r = spreadsheet.costpercapita_cj127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck127
  r = spreadsheet.costpercapita_ck127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl127
  r = spreadsheet.costpercapita_cl127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm127
  r = spreadsheet.costpercapita_cm127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn127
  r = spreadsheet.costpercapita_cn127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp127
  r = spreadsheet.costpercapita_cp127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq127
  r = spreadsheet.costpercapita_cq127
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr127
  r = spreadsheet.costpercapita_cr127
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a128
  r = spreadsheet.costpercapita_a128
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b128
  r = spreadsheet.costpercapita_b128
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste arising",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c128
  r = spreadsheet.costpercapita_c128
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e128
  r = spreadsheet.costpercapita_e128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f128
  r = spreadsheet.costpercapita_f128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g128
  r = spreadsheet.costpercapita_g128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h128
  r = spreadsheet.costpercapita_h128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i128
  r = spreadsheet.costpercapita_i128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j128
  r = spreadsheet.costpercapita_j128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k128
  r = spreadsheet.costpercapita_k128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l128
  r = spreadsheet.costpercapita_l128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m128
  r = spreadsheet.costpercapita_m128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o128
  r = spreadsheet.costpercapita_o128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p128
  r = spreadsheet.costpercapita_p128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q128
  r = spreadsheet.costpercapita_q128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r128
  r = spreadsheet.costpercapita_r128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s128
  r = spreadsheet.costpercapita_s128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t128
  r = spreadsheet.costpercapita_t128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u128
  r = spreadsheet.costpercapita_u128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v128
  r = spreadsheet.costpercapita_v128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w128
  r = spreadsheet.costpercapita_w128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y128
  r = spreadsheet.costpercapita_y128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z128
  r = spreadsheet.costpercapita_z128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa128
  r = spreadsheet.costpercapita_aa128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab128
  r = spreadsheet.costpercapita_ab128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac128
  r = spreadsheet.costpercapita_ac128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad128
  r = spreadsheet.costpercapita_ad128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae128
  r = spreadsheet.costpercapita_ae128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af128
  r = spreadsheet.costpercapita_af128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag128
  r = spreadsheet.costpercapita_ag128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai128
  r = spreadsheet.costpercapita_ai128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj128
  r = spreadsheet.costpercapita_aj128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak128
  r = spreadsheet.costpercapita_ak128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al128
  r = spreadsheet.costpercapita_al128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am128
  r = spreadsheet.costpercapita_am128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an128
  r = spreadsheet.costpercapita_an128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao128
  r = spreadsheet.costpercapita_ao128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap128
  r = spreadsheet.costpercapita_ap128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq128
  r = spreadsheet.costpercapita_aq128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as128
  r = spreadsheet.costpercapita_as128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at128
  r = spreadsheet.costpercapita_at128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av128
  r = spreadsheet.costpercapita_av128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw128
  r = spreadsheet.costpercapita_aw128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay128
  r = spreadsheet.costpercapita_ay128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az128
  r = spreadsheet.costpercapita_az128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba128
  r = spreadsheet.costpercapita_ba128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb128
  r = spreadsheet.costpercapita_bb128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc128
  r = spreadsheet.costpercapita_bc128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd128
  r = spreadsheet.costpercapita_bd128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be128
  r = spreadsheet.costpercapita_be128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf128
  r = spreadsheet.costpercapita_bf128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg128
  r = spreadsheet.costpercapita_bg128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi128
  r = spreadsheet.costpercapita_bi128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj128
  r = spreadsheet.costpercapita_bj128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk128
  r = spreadsheet.costpercapita_bk128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl128
  r = spreadsheet.costpercapita_bl128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm128
  r = spreadsheet.costpercapita_bm128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn128
  r = spreadsheet.costpercapita_bn128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo128
  r = spreadsheet.costpercapita_bo128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp128
  r = spreadsheet.costpercapita_bp128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq128
  r = spreadsheet.costpercapita_bq128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs128
  r = spreadsheet.costpercapita_bs128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt128
  r = spreadsheet.costpercapita_bt128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu128
  r = spreadsheet.costpercapita_bu128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv128
  r = spreadsheet.costpercapita_bv128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw128
  r = spreadsheet.costpercapita_bw128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx128
  r = spreadsheet.costpercapita_bx128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by128
  r = spreadsheet.costpercapita_by128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz128
  r = spreadsheet.costpercapita_bz128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca128
  r = spreadsheet.costpercapita_ca128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc128
  r = spreadsheet.costpercapita_cc128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd128
  r = spreadsheet.costpercapita_cd128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf128
  r = spreadsheet.costpercapita_cf128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg128
  r = spreadsheet.costpercapita_cg128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch128
  r = spreadsheet.costpercapita_ch128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci128
  r = spreadsheet.costpercapita_ci128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj128
  r = spreadsheet.costpercapita_cj128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck128
  r = spreadsheet.costpercapita_ck128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl128
  r = spreadsheet.costpercapita_cl128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm128
  r = spreadsheet.costpercapita_cm128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn128
  r = spreadsheet.costpercapita_cn128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp128
  r = spreadsheet.costpercapita_cp128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq128
  r = spreadsheet.costpercapita_cq128
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr128
  r = spreadsheet.costpercapita_cr128
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a129
  r = spreadsheet.costpercapita_a129
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b129
  r = spreadsheet.costpercapita_b129
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c129
  r = spreadsheet.costpercapita_c129
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e129
  r = spreadsheet.costpercapita_e129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f129
  r = spreadsheet.costpercapita_f129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g129
  r = spreadsheet.costpercapita_g129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h129
  r = spreadsheet.costpercapita_h129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i129
  r = spreadsheet.costpercapita_i129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j129
  r = spreadsheet.costpercapita_j129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k129
  r = spreadsheet.costpercapita_k129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l129
  r = spreadsheet.costpercapita_l129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m129
  r = spreadsheet.costpercapita_m129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o129
  r = spreadsheet.costpercapita_o129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p129
  r = spreadsheet.costpercapita_p129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q129
  r = spreadsheet.costpercapita_q129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r129
  r = spreadsheet.costpercapita_r129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s129
  r = spreadsheet.costpercapita_s129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t129
  r = spreadsheet.costpercapita_t129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u129
  r = spreadsheet.costpercapita_u129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v129
  r = spreadsheet.costpercapita_v129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w129
  r = spreadsheet.costpercapita_w129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y129
  r = spreadsheet.costpercapita_y129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z129
  r = spreadsheet.costpercapita_z129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa129
  r = spreadsheet.costpercapita_aa129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab129
  r = spreadsheet.costpercapita_ab129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac129
  r = spreadsheet.costpercapita_ac129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad129
  r = spreadsheet.costpercapita_ad129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae129
  r = spreadsheet.costpercapita_ae129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af129
  r = spreadsheet.costpercapita_af129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag129
  r = spreadsheet.costpercapita_ag129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai129
  r = spreadsheet.costpercapita_ai129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj129
  r = spreadsheet.costpercapita_aj129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak129
  r = spreadsheet.costpercapita_ak129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al129
  r = spreadsheet.costpercapita_al129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am129
  r = spreadsheet.costpercapita_am129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an129
  r = spreadsheet.costpercapita_an129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao129
  r = spreadsheet.costpercapita_ao129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap129
  r = spreadsheet.costpercapita_ap129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq129
  r = spreadsheet.costpercapita_aq129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as129
  r = spreadsheet.costpercapita_as129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at129
  r = spreadsheet.costpercapita_at129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av129
  r = spreadsheet.costpercapita_av129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw129
  r = spreadsheet.costpercapita_aw129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay129
  r = spreadsheet.costpercapita_ay129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az129
  r = spreadsheet.costpercapita_az129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba129
  r = spreadsheet.costpercapita_ba129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb129
  r = spreadsheet.costpercapita_bb129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc129
  r = spreadsheet.costpercapita_bc129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd129
  r = spreadsheet.costpercapita_bd129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be129
  r = spreadsheet.costpercapita_be129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf129
  r = spreadsheet.costpercapita_bf129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg129
  r = spreadsheet.costpercapita_bg129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi129
  r = spreadsheet.costpercapita_bi129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj129
  r = spreadsheet.costpercapita_bj129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk129
  r = spreadsheet.costpercapita_bk129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl129
  r = spreadsheet.costpercapita_bl129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm129
  r = spreadsheet.costpercapita_bm129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn129
  r = spreadsheet.costpercapita_bn129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo129
  r = spreadsheet.costpercapita_bo129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp129
  r = spreadsheet.costpercapita_bp129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq129
  r = spreadsheet.costpercapita_bq129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs129
  r = spreadsheet.costpercapita_bs129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt129
  r = spreadsheet.costpercapita_bt129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu129
  r = spreadsheet.costpercapita_bu129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv129
  r = spreadsheet.costpercapita_bv129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw129
  r = spreadsheet.costpercapita_bw129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx129
  r = spreadsheet.costpercapita_bx129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by129
  r = spreadsheet.costpercapita_by129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz129
  r = spreadsheet.costpercapita_bz129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca129
  r = spreadsheet.costpercapita_ca129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc129
  r = spreadsheet.costpercapita_cc129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd129
  r = spreadsheet.costpercapita_cd129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf129
  r = spreadsheet.costpercapita_cf129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg129
  r = spreadsheet.costpercapita_cg129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch129
  r = spreadsheet.costpercapita_ch129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci129
  r = spreadsheet.costpercapita_ci129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj129
  r = spreadsheet.costpercapita_cj129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck129
  r = spreadsheet.costpercapita_ck129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl129
  r = spreadsheet.costpercapita_cl129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm129
  r = spreadsheet.costpercapita_cm129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn129
  r = spreadsheet.costpercapita_cn129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp129
  r = spreadsheet.costpercapita_cp129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq129
  r = spreadsheet.costpercapita_cq129
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr129
  r = spreadsheet.costpercapita_cr129
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a130
  r = spreadsheet.costpercapita_a130
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b130
  r = spreadsheet.costpercapita_b130
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c130
  r = spreadsheet.costpercapita_c130
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e130
  r = spreadsheet.costpercapita_e130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f130
  r = spreadsheet.costpercapita_f130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.75451370096574,r[:number],0.001)
end

def test_costpercapita_g130
  r = spreadsheet.costpercapita_g130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.559586144669275,r[:number],0.001)
end

def test_costpercapita_h130
  r = spreadsheet.costpercapita_h130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.57088463776004,r[:number],0.001)
end

def test_costpercapita_i130
  r = spreadsheet.costpercapita_i130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.9641919212558,r[:number],0.001)
end

def test_costpercapita_j130
  r = spreadsheet.costpercapita_j130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.1907316828181,r[:number],0.001)
end

def test_costpercapita_k130
  r = spreadsheet.costpercapita_k130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.222658866273,r[:number],0.001)
end

def test_costpercapita_l130
  r = spreadsheet.costpercapita_l130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.11407834667645,r[:number],0.001)
end

def test_costpercapita_m130
  r = spreadsheet.costpercapita_m130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.95247915017012,r[:number],0.001)
end

def test_costpercapita_o130
  r = spreadsheet.costpercapita_o130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.008020578744514431,r[:number],0.001)
end

def test_costpercapita_p130
  r = spreadsheet.costpercapita_p130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.05067285606382509,r[:number],0.001)
end

def test_costpercapita_q130
  r = spreadsheet.costpercapita_q130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09570587666232988,r[:number],0.001)
end

def test_costpercapita_r130
  r = spreadsheet.costpercapita_r130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.15153987192595678,r[:number],0.001)
end

def test_costpercapita_s130
  r = spreadsheet.costpercapita_s130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.24077122546968313,r[:number],0.001)
end

def test_costpercapita_t130
  r = spreadsheet.costpercapita_t130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.3726734038515604,r[:number],0.001)
end

def test_costpercapita_u130
  r = spreadsheet.costpercapita_u130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.5146512543359363,r[:number],0.001)
end

def test_costpercapita_v130
  r = spreadsheet.costpercapita_v130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6689452609460256,r[:number],0.001)
end

def test_costpercapita_w130
  r = spreadsheet.costpercapita_w130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.7237977234901585,r[:number],0.001)
end

def test_costpercapita_y130
  r = spreadsheet.costpercapita_y130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z130
  r = spreadsheet.costpercapita_z130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa130
  r = spreadsheet.costpercapita_aa130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab130
  r = spreadsheet.costpercapita_ab130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac130
  r = spreadsheet.costpercapita_ac130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad130
  r = spreadsheet.costpercapita_ad130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae130
  r = spreadsheet.costpercapita_ae130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af130
  r = spreadsheet.costpercapita_af130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag130
  r = spreadsheet.costpercapita_ag130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai130
  r = spreadsheet.costpercapita_ai130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.008020578744514431,r[:number],0.001)
end

def test_costpercapita_aj130
  r = spreadsheet.costpercapita_aj130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.805186557029565,r[:number],0.001)
end

def test_costpercapita_ak130
  r = spreadsheet.costpercapita_ak130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.655292021331604,r[:number],0.001)
end

def test_costpercapita_al130
  r = spreadsheet.costpercapita_al130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.72242450968599,r[:number],0.001)
end

def test_costpercapita_am130
  r = spreadsheet.costpercapita_am130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.20496314672549,r[:number],0.001)
end

def test_costpercapita_an130
  r = spreadsheet.costpercapita_an130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.56340508666963,r[:number],0.001)
end

def test_costpercapita_ao130
  r = spreadsheet.costpercapita_ao130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.73731012060895,r[:number],0.001)
end

def test_costpercapita_ap130
  r = spreadsheet.costpercapita_ap130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.78302360762245,r[:number],0.001)
end

def test_costpercapita_aq130
  r = spreadsheet.costpercapita_aq130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.67627687366027,r[:number],0.001)
end

def test_costpercapita_as130
  r = spreadsheet.costpercapita_as130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.68398916689762,r[:number],0.001)
end

def test_costpercapita_at130
  r = spreadsheet.costpercapita_at130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1674.716907186506,r[:number],0.001)
end

def test_costpercapita_av130
  r = spreadsheet.costpercapita_av130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw130
  r = spreadsheet.costpercapita_aw130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay130
  r = spreadsheet.costpercapita_ay130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az130
  r = spreadsheet.costpercapita_az130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.133380322933764,r[:number],0.001)
end

def test_costpercapita_ba130
  r = spreadsheet.costpercapita_ba130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.690503243831433,r[:number],0.001)
end

def test_costpercapita_bb130
  r = spreadsheet.costpercapita_bb130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.928988250435797,r[:number],0.001)
end

def test_costpercapita_bc130
  r = spreadsheet.costpercapita_bc130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.16755382922903,r[:number],0.001)
end

def test_costpercapita_bd130
  r = spreadsheet.costpercapita_bd130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.58333605035284,r[:number],0.001)
end

def test_costpercapita_be130
  r = spreadsheet.costpercapita_be130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.20590617838187,r[:number],0.001)
end

def test_costpercapita_bf130
  r = spreadsheet.costpercapita_bf130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.99506198989599,r[:number],0.001)
end

def test_costpercapita_bg130
  r = spreadsheet.costpercapita_bg130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.86884931496348,r[:number],0.001)
end

def test_costpercapita_bi130
  r = spreadsheet.costpercapita_bi130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj130
  r = spreadsheet.costpercapita_bj130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.133380322933764,r[:number],0.001)
end

def test_costpercapita_bk130
  r = spreadsheet.costpercapita_bk130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.968325030058665,r[:number],0.001)
end

def test_costpercapita_bl130
  r = spreadsheet.costpercapita_bl130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.3501203100376,r[:number],0.001)
end

def test_costpercapita_bm130
  r = spreadsheet.costpercapita_bm130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.49657473397676,r[:number],0.001)
end

def test_costpercapita_bn130
  r = spreadsheet.costpercapita_bn130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.72938998695517,r[:number],0.001)
end

def test_costpercapita_bo130
  r = spreadsheet.costpercapita_bo130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.59453250339132,r[:number],0.001)
end

def test_costpercapita_bp130
  r = spreadsheet.costpercapita_bp130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.48889887247606,r[:number],0.001)
end

def test_costpercapita_bq130
  r = spreadsheet.costpercapita_bq130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(309.75449700366187,r[:number],0.001)
end

def test_costpercapita_bs130
  r = spreadsheet.costpercapita_bs130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.008020578744514431,r[:number],0.001)
end

def test_costpercapita_bt130
  r = spreadsheet.costpercapita_bt130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.18405317899759,r[:number],0.001)
end

def test_costpercapita_bu130
  r = spreadsheet.costpercapita_bu130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.064030906720994,r[:number],0.001)
end

def test_costpercapita_bv130
  r = spreadsheet.costpercapita_bv130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.50166018196356,r[:number],0.001)
end

def test_costpercapita_bw130
  r = spreadsheet.costpercapita_bw130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.73734595944644,r[:number],0.001)
end

def test_costpercapita_bx130
  r = spreadsheet.costpercapita_bx130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.10206339080673,r[:number],0.001)
end

def test_costpercapita_by130
  r = spreadsheet.costpercapita_by130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.10918375772724,r[:number],0.001)
end

def test_costpercapita_bz130
  r = spreadsheet.costpercapita_bz130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271.1578441334221,r[:number],0.001)
end

def test_costpercapita_ca130
  r = spreadsheet.costpercapita_ca130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(310.47829472715205,r[:number],0.001)
end

def test_costpercapita_cc130
  r = spreadsheet.costpercapita_cc130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.03805520166458,r[:number],0.001)
end

def test_costpercapita_cd130
  r = spreadsheet.costpercapita_cd130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2409.201295024242,r[:number],0.001)
end

def test_costpercapita_cf130
  r = spreadsheet.costpercapita_cf130
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg130
  r = spreadsheet.costpercapita_cg130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-13.621133378031976,r[:number],0.001)
end

def test_costpercapita_ch130
  r = spreadsheet.costpercapita_ch130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.408738885389392,r[:number],0.001)
end

def test_costpercapita_ci130
  r = spreadsheet.costpercapita_ci130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.779235672277558,r[:number],0.001)
end

def test_costpercapita_cj130
  r = spreadsheet.costpercapita_cj130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.53238281272095,r[:number],0.001)
end

def test_costpercapita_ck130
  r = spreadsheet.costpercapita_ck130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.53865830413709,r[:number],0.001)
end

def test_costpercapita_cl130
  r = spreadsheet.costpercapita_cl130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.37187363711828,r[:number],0.001)
end

def test_costpercapita_cm130
  r = spreadsheet.costpercapita_cm130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.37482052579959,r[:number],0.001)
end

def test_costpercapita_cn130
  r = spreadsheet.costpercapita_cn130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.80201785349175,r[:number],0.001)
end

def test_costpercapita_cp130
  r = spreadsheet.costpercapita_cp130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.35406603476696,r[:number],0.001)
end

def test_costpercapita_cq130
  r = spreadsheet.costpercapita_cq130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(734.4843878377358,r[:number],0.001)
end

def test_costpercapita_cr130
  r = spreadsheet.costpercapita_cr130
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a131
  r = spreadsheet.costpercapita_a131
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b131
  r = spreadsheet.costpercapita_b131
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c131
  r = spreadsheet.costpercapita_c131
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e131
  r = spreadsheet.costpercapita_e131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.548327114143135,r[:number],0.001)
end

def test_costpercapita_f131
  r = spreadsheet.costpercapita_f131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g131
  r = spreadsheet.costpercapita_g131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h131
  r = spreadsheet.costpercapita_h131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i131
  r = spreadsheet.costpercapita_i131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j131
  r = spreadsheet.costpercapita_j131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k131
  r = spreadsheet.costpercapita_k131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l131
  r = spreadsheet.costpercapita_l131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m131
  r = spreadsheet.costpercapita_m131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o131
  r = spreadsheet.costpercapita_o131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p131
  r = spreadsheet.costpercapita_p131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q131
  r = spreadsheet.costpercapita_q131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r131
  r = spreadsheet.costpercapita_r131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s131
  r = spreadsheet.costpercapita_s131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t131
  r = spreadsheet.costpercapita_t131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u131
  r = spreadsheet.costpercapita_u131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v131
  r = spreadsheet.costpercapita_v131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w131
  r = spreadsheet.costpercapita_w131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y131
  r = spreadsheet.costpercapita_y131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z131
  r = spreadsheet.costpercapita_z131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa131
  r = spreadsheet.costpercapita_aa131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.6438415465236094e-11,r[:number],0.001)
end

def test_costpercapita_ab131
  r = spreadsheet.costpercapita_ab131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8230295337649294e-11,r[:number],0.001)
end

def test_costpercapita_ac131
  r = spreadsheet.costpercapita_ac131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad131
  r = spreadsheet.costpercapita_ad131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae131
  r = spreadsheet.costpercapita_ae131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af131
  r = spreadsheet.costpercapita_af131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag131
  r = spreadsheet.costpercapita_ag131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai131
  r = spreadsheet.costpercapita_ai131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.548327114143135,r[:number],0.001)
end

def test_costpercapita_aj131
  r = spreadsheet.costpercapita_aj131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak131
  r = spreadsheet.costpercapita_ak131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.6438415465236094e-11,r[:number],0.001)
end

def test_costpercapita_al131
  r = spreadsheet.costpercapita_al131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8230295337649294e-11,r[:number],0.001)
end

def test_costpercapita_am131
  r = spreadsheet.costpercapita_am131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an131
  r = spreadsheet.costpercapita_an131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao131
  r = spreadsheet.costpercapita_ao131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap131
  r = spreadsheet.costpercapita_ap131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq131
  r = spreadsheet.costpercapita_aq131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as131
  r = spreadsheet.costpercapita_as131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.172036346007607,r[:number],0.001)
end

def test_costpercapita_at131
  r = spreadsheet.costpercapita_at131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.548327113888675,r[:number],0.001)
end

def test_costpercapita_av131
  r = spreadsheet.costpercapita_av131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw131
  r = spreadsheet.costpercapita_aw131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay131
  r = spreadsheet.costpercapita_ay131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.90944509641487,r[:number],0.001)
end

def test_costpercapita_az131
  r = spreadsheet.costpercapita_az131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba131
  r = spreadsheet.costpercapita_ba131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb131
  r = spreadsheet.costpercapita_bb131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc131
  r = spreadsheet.costpercapita_bc131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd131
  r = spreadsheet.costpercapita_bd131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be131
  r = spreadsheet.costpercapita_be131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf131
  r = spreadsheet.costpercapita_bf131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg131
  r = spreadsheet.costpercapita_bg131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi131
  r = spreadsheet.costpercapita_bi131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.90944509641487,r[:number],0.001)
end

def test_costpercapita_bj131
  r = spreadsheet.costpercapita_bj131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.186979627108638,r[:number],0.001)
end

def test_costpercapita_bk131
  r = spreadsheet.costpercapita_bk131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.49335710055425,r[:number],0.001)
end

def test_costpercapita_bl131
  r = spreadsheet.costpercapita_bl131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm131
  r = spreadsheet.costpercapita_bm131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn131
  r = spreadsheet.costpercapita_bn131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo131
  r = spreadsheet.costpercapita_bo131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp131
  r = spreadsheet.costpercapita_bp131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq131
  r = spreadsheet.costpercapita_bq131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs131
  r = spreadsheet.costpercapita_bs131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.90944509641487,r[:number],0.001)
end

def test_costpercapita_bt131
  r = spreadsheet.costpercapita_bt131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.186979627108638,r[:number],0.001)
end

def test_costpercapita_bu131
  r = spreadsheet.costpercapita_bu131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.49335710049781,r[:number],0.001)
end

def test_costpercapita_bv131
  r = spreadsheet.costpercapita_bv131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8230295337649294e-11,r[:number],0.001)
end

def test_costpercapita_bw131
  r = spreadsheet.costpercapita_bw131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx131
  r = spreadsheet.costpercapita_bx131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by131
  r = spreadsheet.costpercapita_by131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz131
  r = spreadsheet.costpercapita_bz131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca131
  r = spreadsheet.costpercapita_ca131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc131
  r = spreadsheet.costpercapita_cc131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.065531313778121,r[:number],0.001)
end

def test_costpercapita_cd131
  r = spreadsheet.costpercapita_cd131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.74441878345715,r[:number],0.001)
end

def test_costpercapita_cf131
  r = spreadsheet.costpercapita_cf131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-33.638882017728264,r[:number],0.001)
end

def test_costpercapita_cg131
  r = spreadsheet.costpercapita_cg131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.186979627108638,r[:number],0.001)
end

def test_costpercapita_ch131
  r = spreadsheet.costpercapita_ch131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.49335710055425,r[:number],0.001)
end

def test_costpercapita_ci131
  r = spreadsheet.costpercapita_ci131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj131
  r = spreadsheet.costpercapita_cj131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck131
  r = spreadsheet.costpercapita_ck131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl131
  r = spreadsheet.costpercapita_cl131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm131
  r = spreadsheet.costpercapita_cm131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn131
  r = spreadsheet.costpercapita_cn131
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp131
  r = spreadsheet.costpercapita_cp131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.8934949677705136,r[:number],0.001)
end

def test_costpercapita_cq131
  r = spreadsheet.costpercapita_cq131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.1960916695685,r[:number],0.001)
end

def test_costpercapita_cr131
  r = spreadsheet.costpercapita_cr131
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a132
  r = spreadsheet.costpercapita_a132
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b132
  r = spreadsheet.costpercapita_b132
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid distribution",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c132
  r = spreadsheet.costpercapita_c132
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e132
  r = spreadsheet.costpercapita_e132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9346.463740345996,r[:number],0.001)
end

def test_costpercapita_f132
  r = spreadsheet.costpercapita_f132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26665.20315403403,r[:number],0.001)
end

def test_costpercapita_g132
  r = spreadsheet.costpercapita_g132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36579.25165586171,r[:number],0.001)
end

def test_costpercapita_h132
  r = spreadsheet.costpercapita_h132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47293.12328366455,r[:number],0.001)
end

def test_costpercapita_i132
  r = spreadsheet.costpercapita_i132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56961.16179148164,r[:number],0.001)
end

def test_costpercapita_j132
  r = spreadsheet.costpercapita_j132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66089.36774916781,r[:number],0.001)
end

def test_costpercapita_k132
  r = spreadsheet.costpercapita_k132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74506.27646245583,r[:number],0.001)
end

def test_costpercapita_l132
  r = spreadsheet.costpercapita_l132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82330.69123439792,r[:number],0.001)
end

def test_costpercapita_m132
  r = spreadsheet.costpercapita_m132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89895.25566478579,r[:number],0.001)
end

def test_costpercapita_o132
  r = spreadsheet.costpercapita_o132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1038.7213816454814,r[:number],0.001)
end

def test_costpercapita_p132
  r = spreadsheet.costpercapita_p132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1675.385408196284,r[:number],0.001)
end

def test_costpercapita_q132
  r = spreadsheet.costpercapita_q132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2480.2450181738104,r[:number],0.001)
end

def test_costpercapita_r132
  r = spreadsheet.costpercapita_r132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3437.8945612423286,r[:number],0.001)
end

def test_costpercapita_s132
  r = spreadsheet.costpercapita_s132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4477.589470203147,r[:number],0.001)
end

def test_costpercapita_t132
  r = spreadsheet.costpercapita_t132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.335398472134,r[:number],0.001)
end

def test_costpercapita_u132
  r = spreadsheet.costpercapita_u132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6660.54012534905,r[:number],0.001)
end

def test_costpercapita_v132
  r = spreadsheet.costpercapita_v132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7742.599838141612,r[:number],0.001)
end

def test_costpercapita_w132
  r = spreadsheet.costpercapita_w132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8806.993447533498,r[:number],0.001)
end

def test_costpercapita_y132
  r = spreadsheet.costpercapita_y132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z132
  r = spreadsheet.costpercapita_z132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa132
  r = spreadsheet.costpercapita_aa132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab132
  r = spreadsheet.costpercapita_ab132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac132
  r = spreadsheet.costpercapita_ac132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad132
  r = spreadsheet.costpercapita_ad132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae132
  r = spreadsheet.costpercapita_ae132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af132
  r = spreadsheet.costpercapita_af132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag132
  r = spreadsheet.costpercapita_ag132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai132
  r = spreadsheet.costpercapita_ai132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10385.185121991477,r[:number],0.001)
end

def test_costpercapita_aj132
  r = spreadsheet.costpercapita_aj132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28340.588562230314,r[:number],0.001)
end

def test_costpercapita_ak132
  r = spreadsheet.costpercapita_ak132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39059.49667403552,r[:number],0.001)
end

def test_costpercapita_al132
  r = spreadsheet.costpercapita_al132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50731.01784490688,r[:number],0.001)
end

def test_costpercapita_am132
  r = spreadsheet.costpercapita_am132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61438.75126168479,r[:number],0.001)
end

def test_costpercapita_an132
  r = spreadsheet.costpercapita_an132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71653.70314763994,r[:number],0.001)
end

def test_costpercapita_ao132
  r = spreadsheet.costpercapita_ao132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81166.81658780489,r[:number],0.001)
end

def test_costpercapita_ap132
  r = spreadsheet.costpercapita_ap132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90073.29107253953,r[:number],0.001)
end

def test_costpercapita_aq132
  r = spreadsheet.costpercapita_aq132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98702.24911231929,r[:number],0.001)
end

def test_costpercapita_as132
  r = spreadsheet.costpercapita_as132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59061.233265016956,r[:number],0.001)
end

def test_costpercapita_at132
  r = spreadsheet.costpercapita_at132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1139367.653000884,r[:number],0.001)
end

def test_costpercapita_av132
  r = spreadsheet.costpercapita_av132
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw132
  r = spreadsheet.costpercapita_aw132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay132
  r = spreadsheet.costpercapita_ay132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3686.444665452492,r[:number],0.001)
end

def test_costpercapita_az132
  r = spreadsheet.costpercapita_az132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17528.87485064962,r[:number],0.001)
end

def test_costpercapita_ba132
  r = spreadsheet.costpercapita_ba132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24046.06185454902,r[:number],0.001)
end

def test_costpercapita_bb132
  r = spreadsheet.costpercapita_bb132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31089.027694517506,r[:number],0.001)
end

def test_costpercapita_bc132
  r = spreadsheet.costpercapita_bc132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37444.49538309385,r[:number],0.001)
end

def test_costpercapita_bd132
  r = spreadsheet.costpercapita_bd132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43445.093950407914,r[:number],0.001)
end

def test_costpercapita_be132
  r = spreadsheet.costpercapita_be132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48978.10784166896,r[:number],0.001)
end

def test_costpercapita_bf132
  r = spreadsheet.costpercapita_bf132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54121.63465167183,r[:number],0.001)
end

def test_costpercapita_bg132
  r = spreadsheet.costpercapita_bg132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59094.34393252665,r[:number],0.001)
end

def test_costpercapita_bi132
  r = spreadsheet.costpercapita_bi132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3686.444665452492,r[:number],0.001)
end

def test_costpercapita_bj132
  r = spreadsheet.costpercapita_bj132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21093.758747968674,r[:number],0.001)
end

def test_costpercapita_bk132
  r = spreadsheet.costpercapita_bk132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44449.24995512941,r[:number],0.001)
end

def test_costpercapita_bl132
  r = spreadsheet.costpercapita_bl132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70820.56574542352,r[:number],0.001)
end

def test_costpercapita_bm132
  r = spreadsheet.costpercapita_bm132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90349.07742543866,r[:number],0.001)
end

def test_costpercapita_bn132
  r = spreadsheet.costpercapita_bn132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109534.91240401336,r[:number],0.001)
end

def test_costpercapita_bo132
  r = spreadsheet.costpercapita_bo132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127279.39394229563,r[:number],0.001)
end

def test_costpercapita_bp132
  r = spreadsheet.costpercapita_bp132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143793.14074622915,r[:number],0.001)
end

def test_costpercapita_bq132
  r = spreadsheet.costpercapita_bq132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159311.28742219848,r[:number],0.001)
end

def test_costpercapita_bs132
  r = spreadsheet.costpercapita_bs132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4725.166047097973,r[:number],0.001)
end

def test_costpercapita_bt132
  r = spreadsheet.costpercapita_bt132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22769.144156164955,r[:number],0.001)
end

def test_costpercapita_bu132
  r = spreadsheet.costpercapita_bu132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46929.49497330322,r[:number],0.001)
end

def test_costpercapita_bv132
  r = spreadsheet.costpercapita_bv132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74258.46030666585,r[:number],0.001)
end

def test_costpercapita_bw132
  r = spreadsheet.costpercapita_bw132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94826.66689564181,r[:number],0.001)
end

def test_costpercapita_bx132
  r = spreadsheet.costpercapita_bx132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115099.2478024855,r[:number],0.001)
end

def test_costpercapita_by132
  r = spreadsheet.costpercapita_by132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133939.9340676447,r[:number],0.001)
end

def test_costpercapita_bz132
  r = spreadsheet.costpercapita_bz132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151535.74058437077,r[:number],0.001)
end

def test_costpercapita_ca132
  r = spreadsheet.costpercapita_ca132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168118.280869732,r[:number],0.001)
end

def test_costpercapita_cc132
  r = spreadsheet.costpercapita_cc132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90244.68174478965,r[:number],0.001)
end

def test_costpercapita_cd132
  r = spreadsheet.costpercapita_cd132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1664650.5807652022,r[:number],0.001)
end

def test_costpercapita_cf132
  r = spreadsheet.costpercapita_cf132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5660.019074893504,r[:number],0.001)
end

def test_costpercapita_cg132
  r = spreadsheet.costpercapita_cg132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5571.444406065356,r[:number],0.001)
end

def test_costpercapita_ch132
  r = spreadsheet.costpercapita_ch132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7869.998299267694,r[:number],0.001)
end

def test_costpercapita_ci132
  r = spreadsheet.costpercapita_ci132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23527.442461758965,r[:number],0.001)
end

def test_costpercapita_cj132
  r = spreadsheet.costpercapita_cj132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33387.915633957025,r[:number],0.001)
end

def test_costpercapita_ck132
  r = spreadsheet.costpercapita_ck132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43445.544654845544,r[:number],0.001)
end

def test_costpercapita_cl132
  r = spreadsheet.costpercapita_cl132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52773.117479839806,r[:number],0.001)
end

def test_costpercapita_cm132
  r = spreadsheet.costpercapita_cm132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61462.44951183123,r[:number],0.001)
end

def test_costpercapita_cn132
  r = spreadsheet.costpercapita_cn132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69416.03175741271,r[:number],0.001)
end

def test_costpercapita_cp132
  r = spreadsheet.costpercapita_cp132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31183.44847977268,r[:number],0.001)
end

def test_costpercapita_cq132
  r = spreadsheet.costpercapita_cq132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(525282.9277643184,r[:number],0.001)
end

def test_costpercapita_cr132
  r = spreadsheet.costpercapita_cr132
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a133
  r = spreadsheet.costpercapita_a133
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b133
  r = spreadsheet.costpercapita_b133
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting, backup",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c133
  r = spreadsheet.costpercapita_c133
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e133
  r = spreadsheet.costpercapita_e133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f133
  r = spreadsheet.costpercapita_f133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g133
  r = spreadsheet.costpercapita_g133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h133
  r = spreadsheet.costpercapita_h133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i133
  r = spreadsheet.costpercapita_i133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j133
  r = spreadsheet.costpercapita_j133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k133
  r = spreadsheet.costpercapita_k133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l133
  r = spreadsheet.costpercapita_l133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m133
  r = spreadsheet.costpercapita_m133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o133
  r = spreadsheet.costpercapita_o133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p133
  r = spreadsheet.costpercapita_p133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q133
  r = spreadsheet.costpercapita_q133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r133
  r = spreadsheet.costpercapita_r133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s133
  r = spreadsheet.costpercapita_s133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t133
  r = spreadsheet.costpercapita_t133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u133
  r = spreadsheet.costpercapita_u133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v133
  r = spreadsheet.costpercapita_v133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w133
  r = spreadsheet.costpercapita_w133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y133
  r = spreadsheet.costpercapita_y133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z133
  r = spreadsheet.costpercapita_z133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa133
  r = spreadsheet.costpercapita_aa133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab133
  r = spreadsheet.costpercapita_ab133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac133
  r = spreadsheet.costpercapita_ac133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad133
  r = spreadsheet.costpercapita_ad133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae133
  r = spreadsheet.costpercapita_ae133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af133
  r = spreadsheet.costpercapita_af133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag133
  r = spreadsheet.costpercapita_ag133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai133
  r = spreadsheet.costpercapita_ai133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj133
  r = spreadsheet.costpercapita_aj133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak133
  r = spreadsheet.costpercapita_ak133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al133
  r = spreadsheet.costpercapita_al133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am133
  r = spreadsheet.costpercapita_am133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an133
  r = spreadsheet.costpercapita_an133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao133
  r = spreadsheet.costpercapita_ao133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap133
  r = spreadsheet.costpercapita_ap133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq133
  r = spreadsheet.costpercapita_aq133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as133
  r = spreadsheet.costpercapita_as133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at133
  r = spreadsheet.costpercapita_at133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av133
  r = spreadsheet.costpercapita_av133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw133
  r = spreadsheet.costpercapita_aw133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay133
  r = spreadsheet.costpercapita_ay133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az133
  r = spreadsheet.costpercapita_az133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba133
  r = spreadsheet.costpercapita_ba133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb133
  r = spreadsheet.costpercapita_bb133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc133
  r = spreadsheet.costpercapita_bc133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd133
  r = spreadsheet.costpercapita_bd133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be133
  r = spreadsheet.costpercapita_be133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf133
  r = spreadsheet.costpercapita_bf133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg133
  r = spreadsheet.costpercapita_bg133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi133
  r = spreadsheet.costpercapita_bi133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj133
  r = spreadsheet.costpercapita_bj133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk133
  r = spreadsheet.costpercapita_bk133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl133
  r = spreadsheet.costpercapita_bl133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm133
  r = spreadsheet.costpercapita_bm133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn133
  r = spreadsheet.costpercapita_bn133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo133
  r = spreadsheet.costpercapita_bo133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp133
  r = spreadsheet.costpercapita_bp133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq133
  r = spreadsheet.costpercapita_bq133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs133
  r = spreadsheet.costpercapita_bs133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt133
  r = spreadsheet.costpercapita_bt133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu133
  r = spreadsheet.costpercapita_bu133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv133
  r = spreadsheet.costpercapita_bv133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw133
  r = spreadsheet.costpercapita_bw133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx133
  r = spreadsheet.costpercapita_bx133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by133
  r = spreadsheet.costpercapita_by133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz133
  r = spreadsheet.costpercapita_bz133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca133
  r = spreadsheet.costpercapita_ca133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc133
  r = spreadsheet.costpercapita_cc133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd133
  r = spreadsheet.costpercapita_cd133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf133
  r = spreadsheet.costpercapita_cf133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg133
  r = spreadsheet.costpercapita_cg133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch133
  r = spreadsheet.costpercapita_ch133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci133
  r = spreadsheet.costpercapita_ci133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj133
  r = spreadsheet.costpercapita_cj133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck133
  r = spreadsheet.costpercapita_ck133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl133
  r = spreadsheet.costpercapita_cl133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm133
  r = spreadsheet.costpercapita_cm133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn133
  r = spreadsheet.costpercapita_cn133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp133
  r = spreadsheet.costpercapita_cp133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq133
  r = spreadsheet.costpercapita_cq133
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr133
  r = spreadsheet.costpercapita_cr133
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a134
  r = spreadsheet.costpercapita_a134
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b134
  r = spreadsheet.costpercapita_b134
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c134
  r = spreadsheet.costpercapita_c134
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e134
  r = spreadsheet.costpercapita_e134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f134
  r = spreadsheet.costpercapita_f134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g134
  r = spreadsheet.costpercapita_g134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h134
  r = spreadsheet.costpercapita_h134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i134
  r = spreadsheet.costpercapita_i134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j134
  r = spreadsheet.costpercapita_j134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k134
  r = spreadsheet.costpercapita_k134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l134
  r = spreadsheet.costpercapita_l134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m134
  r = spreadsheet.costpercapita_m134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o134
  r = spreadsheet.costpercapita_o134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p134
  r = spreadsheet.costpercapita_p134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q134
  r = spreadsheet.costpercapita_q134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r134
  r = spreadsheet.costpercapita_r134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s134
  r = spreadsheet.costpercapita_s134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t134
  r = spreadsheet.costpercapita_t134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u134
  r = spreadsheet.costpercapita_u134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v134
  r = spreadsheet.costpercapita_v134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w134
  r = spreadsheet.costpercapita_w134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y134
  r = spreadsheet.costpercapita_y134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z134
  r = spreadsheet.costpercapita_z134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa134
  r = spreadsheet.costpercapita_aa134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab134
  r = spreadsheet.costpercapita_ab134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac134
  r = spreadsheet.costpercapita_ac134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad134
  r = spreadsheet.costpercapita_ad134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae134
  r = spreadsheet.costpercapita_ae134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af134
  r = spreadsheet.costpercapita_af134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag134
  r = spreadsheet.costpercapita_ag134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai134
  r = spreadsheet.costpercapita_ai134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj134
  r = spreadsheet.costpercapita_aj134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak134
  r = spreadsheet.costpercapita_ak134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al134
  r = spreadsheet.costpercapita_al134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am134
  r = spreadsheet.costpercapita_am134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an134
  r = spreadsheet.costpercapita_an134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao134
  r = spreadsheet.costpercapita_ao134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap134
  r = spreadsheet.costpercapita_ap134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq134
  r = spreadsheet.costpercapita_aq134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as134
  r = spreadsheet.costpercapita_as134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at134
  r = spreadsheet.costpercapita_at134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av134
  r = spreadsheet.costpercapita_av134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw134
  r = spreadsheet.costpercapita_aw134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay134
  r = spreadsheet.costpercapita_ay134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az134
  r = spreadsheet.costpercapita_az134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba134
  r = spreadsheet.costpercapita_ba134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb134
  r = spreadsheet.costpercapita_bb134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc134
  r = spreadsheet.costpercapita_bc134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd134
  r = spreadsheet.costpercapita_bd134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be134
  r = spreadsheet.costpercapita_be134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf134
  r = spreadsheet.costpercapita_bf134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg134
  r = spreadsheet.costpercapita_bg134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi134
  r = spreadsheet.costpercapita_bi134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj134
  r = spreadsheet.costpercapita_bj134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk134
  r = spreadsheet.costpercapita_bk134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl134
  r = spreadsheet.costpercapita_bl134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm134
  r = spreadsheet.costpercapita_bm134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn134
  r = spreadsheet.costpercapita_bn134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo134
  r = spreadsheet.costpercapita_bo134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp134
  r = spreadsheet.costpercapita_bp134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq134
  r = spreadsheet.costpercapita_bq134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs134
  r = spreadsheet.costpercapita_bs134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt134
  r = spreadsheet.costpercapita_bt134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu134
  r = spreadsheet.costpercapita_bu134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv134
  r = spreadsheet.costpercapita_bv134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw134
  r = spreadsheet.costpercapita_bw134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx134
  r = spreadsheet.costpercapita_bx134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by134
  r = spreadsheet.costpercapita_by134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz134
  r = spreadsheet.costpercapita_bz134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca134
  r = spreadsheet.costpercapita_ca134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc134
  r = spreadsheet.costpercapita_cc134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd134
  r = spreadsheet.costpercapita_cd134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf134
  r = spreadsheet.costpercapita_cf134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg134
  r = spreadsheet.costpercapita_cg134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch134
  r = spreadsheet.costpercapita_ch134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci134
  r = spreadsheet.costpercapita_ci134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj134
  r = spreadsheet.costpercapita_cj134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck134
  r = spreadsheet.costpercapita_ck134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl134
  r = spreadsheet.costpercapita_cl134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm134
  r = spreadsheet.costpercapita_cm134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn134
  r = spreadsheet.costpercapita_cn134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp134
  r = spreadsheet.costpercapita_cp134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq134
  r = spreadsheet.costpercapita_cq134
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr134
  r = spreadsheet.costpercapita_cr134
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a135
  r = spreadsheet.costpercapita_a135
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b135
  r = spreadsheet.costpercapita_b135
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c135
  r = spreadsheet.costpercapita_c135
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e135
  r = spreadsheet.costpercapita_e135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-153.73767488083757,r[:number],0.001)
end

def test_costpercapita_f135
  r = spreadsheet.costpercapita_f135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.39866475659161,r[:number],0.001)
end

def test_costpercapita_g135
  r = spreadsheet.costpercapita_g135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.94805229719034,r[:number],0.001)
end

def test_costpercapita_h135
  r = spreadsheet.costpercapita_h135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.0546866132933,r[:number],0.001)
end

def test_costpercapita_i135
  r = spreadsheet.costpercapita_i135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.9772369957067,r[:number],0.001)
end

def test_costpercapita_j135
  r = spreadsheet.costpercapita_j135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283.9960615830404,r[:number],0.001)
end

def test_costpercapita_k135
  r = spreadsheet.costpercapita_k135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.9396563372026,r[:number],0.001)
end

def test_costpercapita_l135
  r = spreadsheet.costpercapita_l135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(356.0254518545133,r[:number],0.001)
end

def test_costpercapita_m135
  r = spreadsheet.costpercapita_m135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(400.0586588458665,r[:number],0.001)
end

def test_costpercapita_o135
  r = spreadsheet.costpercapita_o135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.63877969363926,r[:number],0.001)
end

def test_costpercapita_p135
  r = spreadsheet.costpercapita_p135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.58548405698482,r[:number],0.001)
end

def test_costpercapita_q135
  r = spreadsheet.costpercapita_q135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.94386662373046,r[:number],0.001)
end

def test_costpercapita_r135
  r = spreadsheet.costpercapita_r135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.64205510262626,r[:number],0.001)
end

def test_costpercapita_s135
  r = spreadsheet.costpercapita_s135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.96634852715452,r[:number],0.001)
end

def test_costpercapita_t135
  r = spreadsheet.costpercapita_t135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.48736949065585,r[:number],0.001)
end

def test_costpercapita_u135
  r = spreadsheet.costpercapita_u135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.98292998271718,r[:number],0.001)
end

def test_costpercapita_v135
  r = spreadsheet.costpercapita_v135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.33010988471592,r[:number],0.001)
end

def test_costpercapita_w135
  r = spreadsheet.costpercapita_w135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48957995625537,r[:number],0.001)
end

def test_costpercapita_y135
  r = spreadsheet.costpercapita_y135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z135
  r = spreadsheet.costpercapita_z135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa135
  r = spreadsheet.costpercapita_aa135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab135
  r = spreadsheet.costpercapita_ab135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac135
  r = spreadsheet.costpercapita_ac135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad135
  r = spreadsheet.costpercapita_ad135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae135
  r = spreadsheet.costpercapita_ae135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af135
  r = spreadsheet.costpercapita_af135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag135
  r = spreadsheet.costpercapita_ag135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai135
  r = spreadsheet.costpercapita_ai135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-29.098895187198313,r[:number],0.001)
end

def test_costpercapita_aj135
  r = spreadsheet.costpercapita_aj135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(302.98414881357644,r[:number],0.001)
end

def test_costpercapita_ak135
  r = spreadsheet.costpercapita_ak135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.8919189209208,r[:number],0.001)
end

def test_costpercapita_al135
  r = spreadsheet.costpercapita_al135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.6967417159196,r[:number],0.001)
end

def test_costpercapita_am135
  r = spreadsheet.costpercapita_am135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(356.9435855228612,r[:number],0.001)
end

def test_costpercapita_an135
  r = spreadsheet.costpercapita_an135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(389.48343107369624,r[:number],0.001)
end

def test_costpercapita_ao135
  r = spreadsheet.costpercapita_ao135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(416.9225863199198,r[:number],0.001)
end

def test_costpercapita_ap135
  r = spreadsheet.costpercapita_ap135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(454.3555617392292,r[:number],0.001)
end

def test_costpercapita_aq135
  r = spreadsheet.costpercapita_aq135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(494.54823880212183,r[:number],0.001)
end

def test_costpercapita_as135
  r = spreadsheet.costpercapita_as135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.08081308011634,r[:number],0.001)
end

def test_costpercapita_at135
  r = spreadsheet.costpercapita_at135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7110.7859340184505,r[:number],0.001)
end

def test_costpercapita_av135
  r = spreadsheet.costpercapita_av135
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw135
  r = spreadsheet.costpercapita_aw135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay135
  r = spreadsheet.costpercapita_ay135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-60.637418299399826,r[:number],0.001)
end

def test_costpercapita_az135
  r = spreadsheet.costpercapita_az135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.2458378893768,r[:number],0.001)
end

def test_costpercapita_ba135
  r = spreadsheet.costpercapita_ba135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.60698816406368,r[:number],0.001)
end

def test_costpercapita_bb135
  r = spreadsheet.costpercapita_bb135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.0276283163363,r[:number],0.001)
end

def test_costpercapita_bc135
  r = spreadsheet.costpercapita_bc135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.01251964960287,r[:number],0.001)
end

def test_costpercapita_bd135
  r = spreadsheet.costpercapita_bd135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.69017418730536,r[:number],0.001)
end

def test_costpercapita_be135
  r = spreadsheet.costpercapita_be135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207.0315305513153,r[:number],0.001)
end

def test_costpercapita_bf135
  r = spreadsheet.costpercapita_bf135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.0400541167308,r[:number],0.001)
end

def test_costpercapita_bg135
  r = spreadsheet.costpercapita_bg135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.98611427481404,r[:number],0.001)
end

def test_costpercapita_bi135
  r = spreadsheet.costpercapita_bi135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-60.637418299399826,r[:number],0.001)
end

def test_costpercapita_bj135
  r = spreadsheet.costpercapita_bj135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.60794265760422,r[:number],0.001)
end

def test_costpercapita_bk135
  r = spreadsheet.costpercapita_bk135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.230738876647,r[:number],0.001)
end

def test_costpercapita_bl135
  r = spreadsheet.costpercapita_bl135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(369.7017306829803,r[:number],0.001)
end

def test_costpercapita_bm135
  r = spreadsheet.costpercapita_bm135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(413.8969691594889,r[:number],0.001)
end

def test_costpercapita_bn135
  r = spreadsheet.costpercapita_bn135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(480.7560738673071,r[:number],0.001)
end

def test_costpercapita_bo135
  r = spreadsheet.costpercapita_bo135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(545.5183469581556,r[:number],0.001)
end

def test_costpercapita_bp135
  r = spreadsheet.costpercapita_bp135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(616.0058221128014,r[:number],0.001)
end

def test_costpercapita_bq135
  r = spreadsheet.costpercapita_bq135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(691.7737584519297,r[:number],0.001)
end

def test_costpercapita_bs135
  r = spreadsheet.costpercapita_bs135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.00136139423944,r[:number],0.001)
end

def test_costpercapita_bt135
  r = spreadsheet.costpercapita_bt135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.19342671458904,r[:number],0.001)
end

def test_costpercapita_bu135
  r = spreadsheet.costpercapita_bu135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.1746055003775,r[:number],0.001)
end

def test_costpercapita_bv135
  r = spreadsheet.costpercapita_bv135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(483.34378578560654,r[:number],0.001)
end

def test_costpercapita_bw135
  r = spreadsheet.costpercapita_bw135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(522.8633176866434,r[:number],0.001)
end

def test_costpercapita_bx135
  r = spreadsheet.costpercapita_bx135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(586.243443357963,r[:number],0.001)
end

def test_costpercapita_by135
  r = spreadsheet.costpercapita_by135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(647.5012769408728,r[:number],0.001)
end

def test_costpercapita_bz135
  r = spreadsheet.costpercapita_bz135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(714.3359319975174,r[:number],0.001)
end

def test_costpercapita_ca135
  r = spreadsheet.costpercapita_ca135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(786.2633384081851,r[:number],0.001)
end

def test_costpercapita_cc135
  r = spreadsheet.costpercapita_cc135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.88005419844376,r[:number],0.001)
end

def test_costpercapita_cd135
  r = spreadsheet.costpercapita_cd135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9170.893009988393,r[:number],0.001)
end

def test_costpercapita_cf135
  r = spreadsheet.costpercapita_cf135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.10025658143775,r[:number],0.001)
end

def test_costpercapita_cg135
  r = spreadsheet.costpercapita_cg135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-120.7907220989874,r[:number],0.001)
end

def test_costpercapita_ch135
  r = spreadsheet.costpercapita_ch135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.7173134205433365,r[:number],0.001)
end

def test_costpercapita_ci135
  r = spreadsheet.costpercapita_ci135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.647044069687,r[:number],0.001)
end

def test_costpercapita_cj135
  r = spreadsheet.costpercapita_cj135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.9197321637822,r[:number],0.001)
end

def test_costpercapita_ck135
  r = spreadsheet.costpercapita_ck135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.76001228426674,r[:number],0.001)
end

def test_costpercapita_cl135
  r = spreadsheet.costpercapita_cl135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(230.578690620953,r[:number],0.001)
end

def test_costpercapita_cm135
  r = spreadsheet.costpercapita_cm135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.98037025828813,r[:number],0.001)
end

def test_costpercapita_cn135
  r = spreadsheet.costpercapita_cn135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(291.71509960606323,r[:number],0.001)
end

def test_costpercapita_cp135
  r = spreadsheet.costpercapita_cp135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.79924111832747,r[:number],0.001)
end

def test_costpercapita_cq135
  r = spreadsheet.costpercapita_cq135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2060.1070759699414,r[:number],0.001)
end

def test_costpercapita_cr135
  r = spreadsheet.costpercapita_cr135
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a136
  r = spreadsheet.costpercapita_a136
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b136
  r = spreadsheet.costpercapita_b136
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c136
  r = spreadsheet.costpercapita_c136
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e136
  r = spreadsheet.costpercapita_e136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.514652560802965,r[:number],0.001)
end

def test_costpercapita_f136
  r = spreadsheet.costpercapita_f136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.98528260504752,r[:number],0.001)
end

def test_costpercapita_g136
  r = spreadsheet.costpercapita_g136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.072195706483582,r[:number],0.001)
end

def test_costpercapita_h136
  r = spreadsheet.costpercapita_h136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.760325529030908,r[:number],0.001)
end

def test_costpercapita_i136
  r = spreadsheet.costpercapita_i136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.493671941307134,r[:number],0.001)
end

def test_costpercapita_j136
  r = spreadsheet.costpercapita_j136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.270041892880663,r[:number],0.001)
end

def test_costpercapita_k136
  r = spreadsheet.costpercapita_k136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.072345398831168,r[:number],0.001)
end

def test_costpercapita_l136
  r = spreadsheet.costpercapita_l136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891370929924332,r[:number],0.001)
end

def test_costpercapita_m136
  r = spreadsheet.costpercapita_m136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.725442519820897,r[:number],0.001)
end

def test_costpercapita_o136
  r = spreadsheet.costpercapita_o136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p136
  r = spreadsheet.costpercapita_p136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q136
  r = spreadsheet.costpercapita_q136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r136
  r = spreadsheet.costpercapita_r136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s136
  r = spreadsheet.costpercapita_s136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t136
  r = spreadsheet.costpercapita_t136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u136
  r = spreadsheet.costpercapita_u136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v136
  r = spreadsheet.costpercapita_v136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w136
  r = spreadsheet.costpercapita_w136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y136
  r = spreadsheet.costpercapita_y136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z136
  r = spreadsheet.costpercapita_z136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa136
  r = spreadsheet.costpercapita_aa136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab136
  r = spreadsheet.costpercapita_ab136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac136
  r = spreadsheet.costpercapita_ac136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad136
  r = spreadsheet.costpercapita_ad136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae136
  r = spreadsheet.costpercapita_ae136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af136
  r = spreadsheet.costpercapita_af136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag136
  r = spreadsheet.costpercapita_ag136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai136
  r = spreadsheet.costpercapita_ai136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.514652560802965,r[:number],0.001)
end

def test_costpercapita_aj136
  r = spreadsheet.costpercapita_aj136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.98528260504752,r[:number],0.001)
end

def test_costpercapita_ak136
  r = spreadsheet.costpercapita_ak136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.072195706483582,r[:number],0.001)
end

def test_costpercapita_al136
  r = spreadsheet.costpercapita_al136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.760325529030908,r[:number],0.001)
end

def test_costpercapita_am136
  r = spreadsheet.costpercapita_am136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.493671941307134,r[:number],0.001)
end

def test_costpercapita_an136
  r = spreadsheet.costpercapita_an136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.270041892880663,r[:number],0.001)
end

def test_costpercapita_ao136
  r = spreadsheet.costpercapita_ao136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.072345398831168,r[:number],0.001)
end

def test_costpercapita_ap136
  r = spreadsheet.costpercapita_ap136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891370929924332,r[:number],0.001)
end

def test_costpercapita_aq136
  r = spreadsheet.costpercapita_aq136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.725442519820897,r[:number],0.001)
end

def test_costpercapita_as136
  r = spreadsheet.costpercapita_as136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.4205921204588,r[:number],0.001)
end

def test_costpercapita_at136
  r = spreadsheet.costpercapita_at136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.3400738964204,r[:number],0.001)
end

def test_costpercapita_av136
  r = spreadsheet.costpercapita_av136
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw136
  r = spreadsheet.costpercapita_aw136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay136
  r = spreadsheet.costpercapita_ay136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.007736521034653,r[:number],0.001)
end

def test_costpercapita_az136
  r = spreadsheet.costpercapita_az136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.137702931235491,r[:number],0.001)
end

def test_costpercapita_ba136
  r = spreadsheet.costpercapita_ba136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.621148055400854,r[:number],0.001)
end

def test_costpercapita_bb136
  r = spreadsheet.costpercapita_bb136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.416134304759664,r[:number],0.001)
end

def test_costpercapita_bc136
  r = spreadsheet.costpercapita_bc136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.240844533266602,r[:number],0.001)
end

def test_costpercapita_bd136
  r = spreadsheet.costpercapita_bd136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.09383709780593,r[:number],0.001)
end

def test_costpercapita_be136
  r = spreadsheet.costpercapita_be136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.963877574055534,r[:number],0.001)
end

def test_costpercapita_bf136
  r = spreadsheet.costpercapita_bf136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.844910589318696,r[:number],0.001)
end

def test_costpercapita_bg136
  r = spreadsheet.costpercapita_bg136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.735834415472617,r[:number],0.001)
end

def test_costpercapita_bi136
  r = spreadsheet.costpercapita_bi136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.007736521034653,r[:number],0.001)
end

def test_costpercapita_bj136
  r = spreadsheet.costpercapita_bj136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.68353337043865,r[:number],0.001)
end

def test_costpercapita_bk136
  r = spreadsheet.costpercapita_bk136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.431111895894766,r[:number],0.001)
end

def test_costpercapita_bl136
  r = spreadsheet.costpercapita_bl136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.146396029942593,r[:number],0.001)
end

def test_costpercapita_bm136
  r = spreadsheet.costpercapita_bm136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.722533599799803,r[:number],0.001)
end

def test_costpercapita_bn136
  r = spreadsheet.costpercapita_bn136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.28151129341779,r[:number],0.001)
end

def test_costpercapita_bo136
  r = spreadsheet.costpercapita_bo136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.8916327221666,r[:number],0.001)
end

def test_costpercapita_bp136
  r = spreadsheet.costpercapita_bp136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.534731767956085,r[:number],0.001)
end

def test_costpercapita_bq136
  r = spreadsheet.costpercapita_bq136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.207503246417854,r[:number],0.001)
end

def test_costpercapita_bs136
  r = spreadsheet.costpercapita_bs136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.007736521034653,r[:number],0.001)
end

def test_costpercapita_bt136
  r = spreadsheet.costpercapita_bt136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.68353337043865,r[:number],0.001)
end

def test_costpercapita_bu136
  r = spreadsheet.costpercapita_bu136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.431111895894766,r[:number],0.001)
end

def test_costpercapita_bv136
  r = spreadsheet.costpercapita_bv136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.146396029942593,r[:number],0.001)
end

def test_costpercapita_bw136
  r = spreadsheet.costpercapita_bw136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.722533599799803,r[:number],0.001)
end

def test_costpercapita_bx136
  r = spreadsheet.costpercapita_bx136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.28151129341779,r[:number],0.001)
end

def test_costpercapita_by136
  r = spreadsheet.costpercapita_by136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.8916327221666,r[:number],0.001)
end

def test_costpercapita_bz136
  r = spreadsheet.costpercapita_bz136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.534731767956085,r[:number],0.001)
end

def test_costpercapita_ca136
  r = spreadsheet.costpercapita_ca136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.207503246417854,r[:number],0.001)
end

def test_costpercapita_cc136
  r = spreadsheet.costpercapita_cc136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.87852116078542,r[:number],0.001)
end

def test_costpercapita_cd136
  r = spreadsheet.costpercapita_cd136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(483.6961652781164,r[:number],0.001)
end

def test_costpercapita_cf136
  r = spreadsheet.costpercapita_cf136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-21.506916039768306,r[:number],0.001)
end

def test_costpercapita_cg136
  r = spreadsheet.costpercapita_cg136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.698250765391129,r[:number],0.001)
end

def test_costpercapita_ch136
  r = spreadsheet.costpercapita_ch136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.358916189411183,r[:number],0.001)
end

def test_costpercapita_ci136
  r = spreadsheet.costpercapita_ci136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.386070500911684,r[:number],0.001)
end

def test_costpercapita_cj136
  r = spreadsheet.costpercapita_cj136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.228861658492669,r[:number],0.001)
end

def test_costpercapita_ck136
  r = spreadsheet.costpercapita_ck136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.011469400537127,r[:number],0.001)
end

def test_costpercapita_cl136
  r = spreadsheet.costpercapita_cl136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.819287323335434,r[:number],0.001)
end

def test_costpercapita_cm136
  r = spreadsheet.costpercapita_cm136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.643360838031754,r[:number],0.001)
end

def test_costpercapita_cn136
  r = spreadsheet.costpercapita_cn136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.482060726596957,r[:number],0.001)
end

def test_costpercapita_cp136
  r = spreadsheet.costpercapita_cp136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.457929040326625,r[:number],0.001)
end

def test_costpercapita_cq136
  r = spreadsheet.costpercapita_cq136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.35609138169593,r[:number],0.001)
end

def test_costpercapita_cr136
  r = spreadsheet.costpercapita_cr136
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a137
  r = spreadsheet.costpercapita_a137
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b137
  r = spreadsheet.costpercapita_b137
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c137
  r = spreadsheet.costpercapita_c137
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e137
  r = spreadsheet.costpercapita_e137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3795.0694023897026,r[:number],0.001)
end

def test_costpercapita_f137
  r = spreadsheet.costpercapita_f137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44474.26817868676,r[:number],0.001)
end

def test_costpercapita_g137
  r = spreadsheet.costpercapita_g137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52131.84245811628,r[:number],0.001)
end

def test_costpercapita_h137
  r = spreadsheet.costpercapita_h137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59292.76069585872,r[:number],0.001)
end

def test_costpercapita_i137
  r = spreadsheet.costpercapita_i137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66153.4767968288,r[:number],0.001)
end

def test_costpercapita_j137
  r = spreadsheet.costpercapita_j137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72822.54266297094,r[:number],0.001)
end

def test_costpercapita_k137
  r = spreadsheet.costpercapita_k137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79269.04906578864,r[:number],0.001)
end

def test_costpercapita_l137
  r = spreadsheet.costpercapita_l137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85658.53886905308,r[:number],0.001)
end

def test_costpercapita_m137
  r = spreadsheet.costpercapita_m137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91911.77959129284,r[:number],0.001)
end

def test_costpercapita_o137
  r = spreadsheet.costpercapita_o137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(428.33953782720755,r[:number],0.001)
end

def test_costpercapita_p137
  r = spreadsheet.costpercapita_p137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1079.648597311294,r[:number],0.001)
end

def test_costpercapita_q137
  r = spreadsheet.costpercapita_q137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1811.411187567846,r[:number],0.001)
end

def test_costpercapita_r137
  r = spreadsheet.costpercapita_r137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2618.3432326738143,r[:number],0.001)
end

def test_costpercapita_s137
  r = spreadsheet.costpercapita_s137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3502.674353617004,r[:number],0.001)
end

def test_costpercapita_t137
  r = spreadsheet.costpercapita_t137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4467.225852564444,r[:number],0.001)
end

def test_costpercapita_u137
  r = spreadsheet.costpercapita_u137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5508.003879818302,r[:number],0.001)
end

def test_costpercapita_v137
  r = spreadsheet.costpercapita_v137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6620.6494329201805,r[:number],0.001)
end

def test_costpercapita_w137
  r = spreadsheet.costpercapita_w137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7803.934893818809,r[:number],0.001)
end

def test_costpercapita_y137
  r = spreadsheet.costpercapita_y137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z137
  r = spreadsheet.costpercapita_z137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa137
  r = spreadsheet.costpercapita_aa137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab137
  r = spreadsheet.costpercapita_ab137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac137
  r = spreadsheet.costpercapita_ac137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad137
  r = spreadsheet.costpercapita_ad137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae137
  r = spreadsheet.costpercapita_ae137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af137
  r = spreadsheet.costpercapita_af137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag137
  r = spreadsheet.costpercapita_ag137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai137
  r = spreadsheet.costpercapita_ai137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4223.40894021691,r[:number],0.001)
end

def test_costpercapita_aj137
  r = spreadsheet.costpercapita_aj137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45553.916775998056,r[:number],0.001)
end

def test_costpercapita_ak137
  r = spreadsheet.costpercapita_ak137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53943.253645684126,r[:number],0.001)
end

def test_costpercapita_al137
  r = spreadsheet.costpercapita_al137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61911.10392853253,r[:number],0.001)
end

def test_costpercapita_am137
  r = spreadsheet.costpercapita_am137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69656.1511504458,r[:number],0.001)
end

def test_costpercapita_an137
  r = spreadsheet.costpercapita_an137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77289.7685155354,r[:number],0.001)
end

def test_costpercapita_ao137
  r = spreadsheet.costpercapita_ao137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84777.05294560693,r[:number],0.001)
end

def test_costpercapita_ap137
  r = spreadsheet.costpercapita_ap137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92279.18830197328,r[:number],0.001)
end

def test_costpercapita_aq137
  r = spreadsheet.costpercapita_aq137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99715.71448511165,r[:number],0.001)
end

def test_costpercapita_as137
  r = spreadsheet.costpercapita_as137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65483.284298789404,r[:number],0.001)
end

def test_costpercapita_at137
  r = spreadsheet.costpercapita_at137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1335532.640710009,r[:number],0.001)
end

def test_costpercapita_av137
  r = spreadsheet.costpercapita_av137
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw137
  r = spreadsheet.costpercapita_aw137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay137
  r = spreadsheet.costpercapita_ay137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1496.8563236456305,r[:number],0.001)
end

def test_costpercapita_az137
  r = spreadsheet.costpercapita_az137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29236.00005876911,r[:number],0.001)
end

def test_costpercapita_ba137
  r = spreadsheet.costpercapita_ba137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34269.851120330095,r[:number],0.001)
end

def test_costpercapita_bb137
  r = spreadsheet.costpercapita_bb137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38977.215953818406,r[:number],0.001)
end

def test_costpercapita_bc137
  r = spreadsheet.costpercapita_bc137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43487.237243551135,r[:number],0.001)
end

def test_costpercapita_bd137
  r = spreadsheet.costpercapita_bd137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47871.27363221294,r[:number],0.001)
end

def test_costpercapita_be137
  r = spreadsheet.costpercapita_be137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52109.00635474829,r[:number],0.001)
end

def test_costpercapita_bf137
  r = spreadsheet.costpercapita_bf137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56309.25813884093,r[:number],0.001)
end

def test_costpercapita_bg137
  r = spreadsheet.costpercapita_bg137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60419.94401653484,r[:number],0.001)
end

def test_costpercapita_bi137
  r = spreadsheet.costpercapita_bi137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1496.8563236456305,r[:number],0.001)
end

def test_costpercapita_bj137
  r = spreadsheet.costpercapita_bj137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30683.49744148366,r[:number],0.001)
end

def test_costpercapita_bk137
  r = spreadsheet.costpercapita_bk137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63948.82760632768,r[:number],0.001)
end

def test_costpercapita_bl137
  r = spreadsheet.costpercapita_bl137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99589.2088950603,r[:number],0.001)
end

def test_costpercapita_bm137
  r = spreadsheet.costpercapita_bm137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113701.05934937515,r[:number],0.001)
end

def test_costpercapita_bn137
  r = spreadsheet.costpercapita_bn137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127353.43934816116,r[:number],0.001)
end

def test_costpercapita_bo137
  r = spreadsheet.costpercapita_bo137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140516.64436286216,r[:number],0.001)
end

def test_costpercapita_bp137
  r = spreadsheet.costpercapita_bp137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153294.58295171705,r[:number],0.001)
end

def test_costpercapita_bq137
  r = spreadsheet.costpercapita_bq137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165794.86724458364,r[:number],0.001)
end

def test_costpercapita_bs137
  r = spreadsheet.costpercapita_bs137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1925.195861472838,r[:number],0.001)
end

def test_costpercapita_bt137
  r = spreadsheet.costpercapita_bt137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31763.146038794956,r[:number],0.001)
end

def test_costpercapita_bu137
  r = spreadsheet.costpercapita_bu137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65760.23879389552,r[:number],0.001)
end

def test_costpercapita_bv137
  r = spreadsheet.costpercapita_bv137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102207.55212773412,r[:number],0.001)
end

def test_costpercapita_bw137
  r = spreadsheet.costpercapita_bw137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117203.73370299215,r[:number],0.001)
end

def test_costpercapita_bx137
  r = spreadsheet.costpercapita_bx137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131820.6652007256,r[:number],0.001)
end

def test_costpercapita_by137
  r = spreadsheet.costpercapita_by137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146024.64824268047,r[:number],0.001)
end

def test_costpercapita_bz137
  r = spreadsheet.costpercapita_bz137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159915.23238463723,r[:number],0.001)
end

def test_costpercapita_ca137
  r = spreadsheet.costpercapita_ca137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173598.80213840245,r[:number],0.001)
end

def test_costpercapita_cc137
  r = spreadsheet.costpercapita_cc137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103357.69049903726,r[:number],0.001)
end

def test_costpercapita_cd137
  r = spreadsheet.costpercapita_cd137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1983150.5573483887,r[:number],0.001)
end

def test_costpercapita_cf137
  r = spreadsheet.costpercapita_cf137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2298.213078744072,r[:number],0.001)
end

def test_costpercapita_cg137
  r = spreadsheet.costpercapita_cg137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-13790.7707372031,r[:number],0.001)
end

def test_costpercapita_ch137
  r = spreadsheet.costpercapita_ch137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11816.985148211397,r[:number],0.001)
end

def test_costpercapita_ci137
  r = spreadsheet.costpercapita_ci137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40296.44819920158,r[:number],0.001)
end

def test_costpercapita_cj137
  r = spreadsheet.costpercapita_cj137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47547.582552546344,r[:number],0.001)
end

def test_costpercapita_ck137
  r = spreadsheet.costpercapita_ck137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54530.896685190215,r[:number],0.001)
end

def test_costpercapita_cl137
  r = spreadsheet.costpercapita_cl137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61247.595297073516,r[:number],0.001)
end

def test_costpercapita_cm137
  r = spreadsheet.costpercapita_cm137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67636.04408266395,r[:number],0.001)
end

def test_costpercapita_cn137
  r = spreadsheet.costpercapita_cn137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73883.0876532908,r[:number],0.001)
end

def test_costpercapita_cp137
  r = spreadsheet.costpercapita_cp137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37874.406200247846,r[:number],0.001)
end

def test_costpercapita_cq137
  r = spreadsheet.costpercapita_cq137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(647617.9166383801,r[:number],0.001)
end

def test_costpercapita_cr137
  r = spreadsheet.costpercapita_cr137
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a138
  r = spreadsheet.costpercapita_a138
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b138
  r = spreadsheet.costpercapita_b138
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c138
  r = spreadsheet.costpercapita_c138
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e138
  r = spreadsheet.costpercapita_e138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.88187846996484,r[:number],0.001)
end

def test_costpercapita_f138
  r = spreadsheet.costpercapita_f138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.54922733055961,r[:number],0.001)
end

def test_costpercapita_g138
  r = spreadsheet.costpercapita_g138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.338975525437284,r[:number],0.001)
end

def test_costpercapita_h138
  r = spreadsheet.costpercapita_h138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.615807045277386,r[:number],0.001)
end

def test_costpercapita_i138
  r = spreadsheet.costpercapita_i138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.7907575145572,r[:number],0.001)
end

def test_costpercapita_j138
  r = spreadsheet.costpercapita_j138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.38572134271137,r[:number],0.001)
end

def test_costpercapita_k138
  r = spreadsheet.costpercapita_k138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.19828699451516,r[:number],0.001)
end

def test_costpercapita_l138
  r = spreadsheet.costpercapita_l138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.1571421480342,r[:number],0.001)
end

def test_costpercapita_m138
  r = spreadsheet.costpercapita_m138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.26563322362614,r[:number],0.001)
end

def test_costpercapita_o138
  r = spreadsheet.costpercapita_o138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p138
  r = spreadsheet.costpercapita_p138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q138
  r = spreadsheet.costpercapita_q138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r138
  r = spreadsheet.costpercapita_r138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s138
  r = spreadsheet.costpercapita_s138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t138
  r = spreadsheet.costpercapita_t138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u138
  r = spreadsheet.costpercapita_u138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v138
  r = spreadsheet.costpercapita_v138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w138
  r = spreadsheet.costpercapita_w138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y138
  r = spreadsheet.costpercapita_y138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z138
  r = spreadsheet.costpercapita_z138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa138
  r = spreadsheet.costpercapita_aa138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab138
  r = spreadsheet.costpercapita_ab138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac138
  r = spreadsheet.costpercapita_ac138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad138
  r = spreadsheet.costpercapita_ad138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae138
  r = spreadsheet.costpercapita_ae138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af138
  r = spreadsheet.costpercapita_af138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag138
  r = spreadsheet.costpercapita_ag138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai138
  r = spreadsheet.costpercapita_ai138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.88187846996484,r[:number],0.001)
end

def test_costpercapita_aj138
  r = spreadsheet.costpercapita_aj138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.54922733055961,r[:number],0.001)
end

def test_costpercapita_ak138
  r = spreadsheet.costpercapita_ak138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.338975525437284,r[:number],0.001)
end

def test_costpercapita_al138
  r = spreadsheet.costpercapita_al138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.615807045277386,r[:number],0.001)
end

def test_costpercapita_am138
  r = spreadsheet.costpercapita_am138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.7907575145572,r[:number],0.001)
end

def test_costpercapita_an138
  r = spreadsheet.costpercapita_an138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.38572134271137,r[:number],0.001)
end

def test_costpercapita_ao138
  r = spreadsheet.costpercapita_ao138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.19828699451516,r[:number],0.001)
end

def test_costpercapita_ap138
  r = spreadsheet.costpercapita_ap138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.1571421480342,r[:number],0.001)
end

def test_costpercapita_aq138
  r = spreadsheet.costpercapita_aq138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.26563322362614,r[:number],0.001)
end

def test_costpercapita_as138
  r = spreadsheet.costpercapita_as138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.46482551052036,r[:number],0.001)
end

def test_costpercapita_at138
  r = spreadsheet.costpercapita_at138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1299.3760814576958,r[:number],0.001)
end

def test_costpercapita_av138
  r = spreadsheet.costpercapita_av138
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw138
  r = spreadsheet.costpercapita_aw138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay138
  r = spreadsheet.costpercapita_ay138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.04100486602222,r[:number],0.001)
end

def test_costpercapita_az138
  r = spreadsheet.costpercapita_az138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.14580913936701,r[:number],0.001)
end

def test_costpercapita_ba138
  r = spreadsheet.costpercapita_ba138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.66496502921978,r[:number],0.001)
end

def test_costpercapita_bb138
  r = spreadsheet.costpercapita_bb138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.84694545659403,r[:number],0.001)
end

def test_costpercapita_bc138
  r = spreadsheet.costpercapita_bc138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.96195245141621,r[:number],0.001)
end

def test_costpercapita_bd138
  r = spreadsheet.costpercapita_bd138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.66780092828392,r[:number],0.001)
end

def test_costpercapita_be138
  r = spreadsheet.costpercapita_be138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.85932518877873,r[:number],0.001)
end

def test_costpercapita_bf138
  r = spreadsheet.costpercapita_bf138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.14701561582094,r[:number],0.001)
end

def test_costpercapita_bg138
  r = spreadsheet.costpercapita_bg138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.5330720420279,r[:number],0.001)
end

def test_costpercapita_bi138
  r = spreadsheet.costpercapita_bi138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.04100486602222,r[:number],0.001)
end

def test_costpercapita_bj138
  r = spreadsheet.costpercapita_bj138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.46001034356954,r[:number],0.001)
end

def test_costpercapita_bk138
  r = spreadsheet.costpercapita_bk138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.1456264581213,r[:number],0.001)
end

def test_costpercapita_bl138
  r = spreadsheet.costpercapita_bl138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.9755844137717,r[:number],0.001)
end

def test_costpercapita_bm138
  r = spreadsheet.costpercapita_bm138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.10697388629858,r[:number],0.001)
end

def test_costpercapita_bn138
  r = spreadsheet.costpercapita_bn138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.53376337458403,r[:number],0.001)
end

def test_costpercapita_bo138
  r = spreadsheet.costpercapita_bo138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.82695452269245,r[:number],0.001)
end

def test_costpercapita_bp138
  r = spreadsheet.costpercapita_bp138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.11710351014403,r[:number],0.001)
end

def test_costpercapita_bq138
  r = spreadsheet.costpercapita_bq138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.07672386808727,r[:number],0.001)
end

def test_costpercapita_bs138
  r = spreadsheet.costpercapita_bs138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.04100486602222,r[:number],0.001)
end

def test_costpercapita_bt138
  r = spreadsheet.costpercapita_bt138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.46001034356954,r[:number],0.001)
end

def test_costpercapita_bu138
  r = spreadsheet.costpercapita_bu138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.1456264581213,r[:number],0.001)
end

def test_costpercapita_bv138
  r = spreadsheet.costpercapita_bv138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.9755844137717,r[:number],0.001)
end

def test_costpercapita_bw138
  r = spreadsheet.costpercapita_bw138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.10697388629858,r[:number],0.001)
end

def test_costpercapita_bx138
  r = spreadsheet.costpercapita_bx138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.53376337458403,r[:number],0.001)
end

def test_costpercapita_by138
  r = spreadsheet.costpercapita_by138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.82695452269245,r[:number],0.001)
end

def test_costpercapita_bz138
  r = spreadsheet.costpercapita_bz138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.11710351014403,r[:number],0.001)
end

def test_costpercapita_ca138
  r = spreadsheet.costpercapita_ca138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.07672386808727,r[:number],0.001)
end

def test_costpercapita_cc138
  r = spreadsheet.costpercapita_cc138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.92041613814345,r[:number],0.001)
end

def test_costpercapita_cd138
  r = spreadsheet.costpercapita_cd138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2093.3766274908244,r[:number],0.001)
end

def test_costpercapita_cf138
  r = spreadsheet.costpercapita_cf138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-33.84087360394262,r[:number],0.001)
end

def test_costpercapita_cg138
  r = spreadsheet.costpercapita_cg138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.910783013009936,r[:number],0.001)
end

def test_costpercapita_ch138
  r = spreadsheet.costpercapita_ch138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.806650932684015,r[:number],0.001)
end

def test_costpercapita_ci138
  r = spreadsheet.costpercapita_ci138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.359777368494306,r[:number],0.001)
end

def test_costpercapita_cj138
  r = spreadsheet.costpercapita_cj138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.31621637174137,r[:number],0.001)
end

def test_costpercapita_ck138
  r = spreadsheet.costpercapita_ck138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.14804203187265,r[:number],0.001)
end

def test_costpercapita_cl138
  r = spreadsheet.costpercapita_cl138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.628667528177296,r[:number],0.001)
end

def test_costpercapita_cm138
  r = spreadsheet.costpercapita_cm138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.95996136210984,r[:number],0.001)
end

def test_costpercapita_cn138
  r = spreadsheet.costpercapita_cn138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.811090644461125,r[:number],0.001)
end

def test_costpercapita_cp138
  r = spreadsheet.costpercapita_cp138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.455590627623096,r[:number],0.001)
end

def test_costpercapita_cq138
  r = spreadsheet.costpercapita_cq138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(794.0005460331288,r[:number],0.001)
end

def test_costpercapita_cr138
  r = spreadsheet.costpercapita_cr138
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a139
  r = spreadsheet.costpercapita_a139
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b139
  r = spreadsheet.costpercapita_b139
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c139
  r = spreadsheet.costpercapita_c139
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e139
  r = spreadsheet.costpercapita_e139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f139
  r = spreadsheet.costpercapita_f139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g139
  r = spreadsheet.costpercapita_g139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h139
  r = spreadsheet.costpercapita_h139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i139
  r = spreadsheet.costpercapita_i139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j139
  r = spreadsheet.costpercapita_j139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k139
  r = spreadsheet.costpercapita_k139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l139
  r = spreadsheet.costpercapita_l139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m139
  r = spreadsheet.costpercapita_m139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o139
  r = spreadsheet.costpercapita_o139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p139
  r = spreadsheet.costpercapita_p139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q139
  r = spreadsheet.costpercapita_q139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r139
  r = spreadsheet.costpercapita_r139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s139
  r = spreadsheet.costpercapita_s139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t139
  r = spreadsheet.costpercapita_t139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u139
  r = spreadsheet.costpercapita_u139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v139
  r = spreadsheet.costpercapita_v139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w139
  r = spreadsheet.costpercapita_w139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y139
  r = spreadsheet.costpercapita_y139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z139
  r = spreadsheet.costpercapita_z139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa139
  r = spreadsheet.costpercapita_aa139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab139
  r = spreadsheet.costpercapita_ab139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac139
  r = spreadsheet.costpercapita_ac139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad139
  r = spreadsheet.costpercapita_ad139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae139
  r = spreadsheet.costpercapita_ae139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af139
  r = spreadsheet.costpercapita_af139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag139
  r = spreadsheet.costpercapita_ag139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai139
  r = spreadsheet.costpercapita_ai139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj139
  r = spreadsheet.costpercapita_aj139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak139
  r = spreadsheet.costpercapita_ak139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al139
  r = spreadsheet.costpercapita_al139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am139
  r = spreadsheet.costpercapita_am139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an139
  r = spreadsheet.costpercapita_an139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao139
  r = spreadsheet.costpercapita_ao139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap139
  r = spreadsheet.costpercapita_ap139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq139
  r = spreadsheet.costpercapita_aq139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as139
  r = spreadsheet.costpercapita_as139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at139
  r = spreadsheet.costpercapita_at139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av139
  r = spreadsheet.costpercapita_av139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw139
  r = spreadsheet.costpercapita_aw139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay139
  r = spreadsheet.costpercapita_ay139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az139
  r = spreadsheet.costpercapita_az139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba139
  r = spreadsheet.costpercapita_ba139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb139
  r = spreadsheet.costpercapita_bb139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc139
  r = spreadsheet.costpercapita_bc139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd139
  r = spreadsheet.costpercapita_bd139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be139
  r = spreadsheet.costpercapita_be139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf139
  r = spreadsheet.costpercapita_bf139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg139
  r = spreadsheet.costpercapita_bg139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi139
  r = spreadsheet.costpercapita_bi139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj139
  r = spreadsheet.costpercapita_bj139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk139
  r = spreadsheet.costpercapita_bk139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl139
  r = spreadsheet.costpercapita_bl139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm139
  r = spreadsheet.costpercapita_bm139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn139
  r = spreadsheet.costpercapita_bn139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo139
  r = spreadsheet.costpercapita_bo139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp139
  r = spreadsheet.costpercapita_bp139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq139
  r = spreadsheet.costpercapita_bq139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs139
  r = spreadsheet.costpercapita_bs139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt139
  r = spreadsheet.costpercapita_bt139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu139
  r = spreadsheet.costpercapita_bu139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv139
  r = spreadsheet.costpercapita_bv139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw139
  r = spreadsheet.costpercapita_bw139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx139
  r = spreadsheet.costpercapita_bx139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by139
  r = spreadsheet.costpercapita_by139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz139
  r = spreadsheet.costpercapita_bz139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca139
  r = spreadsheet.costpercapita_ca139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc139
  r = spreadsheet.costpercapita_cc139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd139
  r = spreadsheet.costpercapita_cd139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf139
  r = spreadsheet.costpercapita_cf139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg139
  r = spreadsheet.costpercapita_cg139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch139
  r = spreadsheet.costpercapita_ch139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci139
  r = spreadsheet.costpercapita_ci139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj139
  r = spreadsheet.costpercapita_cj139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck139
  r = spreadsheet.costpercapita_ck139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl139
  r = spreadsheet.costpercapita_cl139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm139
  r = spreadsheet.costpercapita_cm139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn139
  r = spreadsheet.costpercapita_cn139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp139
  r = spreadsheet.costpercapita_cp139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq139
  r = spreadsheet.costpercapita_cq139
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr139
  r = spreadsheet.costpercapita_cr139
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a140
  r = spreadsheet.costpercapita_a140
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b140
  r = spreadsheet.costpercapita_b140
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c140
  r = spreadsheet.costpercapita_c140
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e140
  r = spreadsheet.costpercapita_e140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f140
  r = spreadsheet.costpercapita_f140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g140
  r = spreadsheet.costpercapita_g140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h140
  r = spreadsheet.costpercapita_h140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i140
  r = spreadsheet.costpercapita_i140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j140
  r = spreadsheet.costpercapita_j140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k140
  r = spreadsheet.costpercapita_k140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l140
  r = spreadsheet.costpercapita_l140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m140
  r = spreadsheet.costpercapita_m140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o140
  r = spreadsheet.costpercapita_o140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p140
  r = spreadsheet.costpercapita_p140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q140
  r = spreadsheet.costpercapita_q140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r140
  r = spreadsheet.costpercapita_r140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s140
  r = spreadsheet.costpercapita_s140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t140
  r = spreadsheet.costpercapita_t140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u140
  r = spreadsheet.costpercapita_u140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v140
  r = spreadsheet.costpercapita_v140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w140
  r = spreadsheet.costpercapita_w140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y140
  r = spreadsheet.costpercapita_y140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z140
  r = spreadsheet.costpercapita_z140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa140
  r = spreadsheet.costpercapita_aa140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab140
  r = spreadsheet.costpercapita_ab140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac140
  r = spreadsheet.costpercapita_ac140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad140
  r = spreadsheet.costpercapita_ad140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae140
  r = spreadsheet.costpercapita_ae140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af140
  r = spreadsheet.costpercapita_af140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag140
  r = spreadsheet.costpercapita_ag140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai140
  r = spreadsheet.costpercapita_ai140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj140
  r = spreadsheet.costpercapita_aj140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak140
  r = spreadsheet.costpercapita_ak140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al140
  r = spreadsheet.costpercapita_al140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am140
  r = spreadsheet.costpercapita_am140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an140
  r = spreadsheet.costpercapita_an140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao140
  r = spreadsheet.costpercapita_ao140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap140
  r = spreadsheet.costpercapita_ap140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq140
  r = spreadsheet.costpercapita_aq140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as140
  r = spreadsheet.costpercapita_as140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at140
  r = spreadsheet.costpercapita_at140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av140
  r = spreadsheet.costpercapita_av140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw140
  r = spreadsheet.costpercapita_aw140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay140
  r = spreadsheet.costpercapita_ay140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az140
  r = spreadsheet.costpercapita_az140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba140
  r = spreadsheet.costpercapita_ba140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb140
  r = spreadsheet.costpercapita_bb140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc140
  r = spreadsheet.costpercapita_bc140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd140
  r = spreadsheet.costpercapita_bd140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be140
  r = spreadsheet.costpercapita_be140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf140
  r = spreadsheet.costpercapita_bf140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg140
  r = spreadsheet.costpercapita_bg140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi140
  r = spreadsheet.costpercapita_bi140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj140
  r = spreadsheet.costpercapita_bj140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk140
  r = spreadsheet.costpercapita_bk140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl140
  r = spreadsheet.costpercapita_bl140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm140
  r = spreadsheet.costpercapita_bm140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn140
  r = spreadsheet.costpercapita_bn140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo140
  r = spreadsheet.costpercapita_bo140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp140
  r = spreadsheet.costpercapita_bp140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq140
  r = spreadsheet.costpercapita_bq140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs140
  r = spreadsheet.costpercapita_bs140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt140
  r = spreadsheet.costpercapita_bt140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu140
  r = spreadsheet.costpercapita_bu140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv140
  r = spreadsheet.costpercapita_bv140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw140
  r = spreadsheet.costpercapita_bw140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx140
  r = spreadsheet.costpercapita_bx140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by140
  r = spreadsheet.costpercapita_by140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz140
  r = spreadsheet.costpercapita_bz140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca140
  r = spreadsheet.costpercapita_ca140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc140
  r = spreadsheet.costpercapita_cc140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd140
  r = spreadsheet.costpercapita_cd140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf140
  r = spreadsheet.costpercapita_cf140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg140
  r = spreadsheet.costpercapita_cg140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch140
  r = spreadsheet.costpercapita_ch140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci140
  r = spreadsheet.costpercapita_ci140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj140
  r = spreadsheet.costpercapita_cj140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck140
  r = spreadsheet.costpercapita_ck140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl140
  r = spreadsheet.costpercapita_cl140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm140
  r = spreadsheet.costpercapita_cm140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn140
  r = spreadsheet.costpercapita_cn140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp140
  r = spreadsheet.costpercapita_cp140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq140
  r = spreadsheet.costpercapita_cq140
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr140
  r = spreadsheet.costpercapita_cr140
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a141
  r = spreadsheet.costpercapita_a141
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.ICE",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b141
  r = spreadsheet.costpercapita_b141
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c141
  r = spreadsheet.costpercapita_c141
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e141
  r = spreadsheet.costpercapita_e141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30580.15980869409,r[:number],0.001)
end

def test_costpercapita_f141
  r = spreadsheet.costpercapita_f141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67454.6734707251,r[:number],0.001)
end

def test_costpercapita_g141
  r = spreadsheet.costpercapita_g141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88893.22017557001,r[:number],0.001)
end

def test_costpercapita_h141
  r = spreadsheet.costpercapita_h141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106574.35151296797,r[:number],0.001)
end

def test_costpercapita_i141
  r = spreadsheet.costpercapita_i141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126525.11170387252,r[:number],0.001)
end

def test_costpercapita_j141
  r = spreadsheet.costpercapita_j141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146191.78896226862,r[:number],0.001)
end

def test_costpercapita_k141
  r = spreadsheet.costpercapita_k141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167048.46609937015,r[:number],0.001)
end

def test_costpercapita_l141
  r = spreadsheet.costpercapita_l141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191826.03479455106,r[:number],0.001)
end

def test_costpercapita_m141
  r = spreadsheet.costpercapita_m141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217256.03559804856,r[:number],0.001)
end

def test_costpercapita_o141
  r = spreadsheet.costpercapita_o141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27533.355005153106,r[:number],0.001)
end

def test_costpercapita_p141
  r = spreadsheet.costpercapita_p141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42093.41072929891,r[:number],0.001)
end

def test_costpercapita_q141
  r = spreadsheet.costpercapita_q141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58626.3916815991,r[:number],0.001)
end

def test_costpercapita_r141
  r = spreadsheet.costpercapita_r141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74828.84438461381,r[:number],0.001)
end

def test_costpercapita_s141
  r = spreadsheet.costpercapita_s141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91777.91223105467,r[:number],0.001)
end

def test_costpercapita_t141
  r = spreadsheet.costpercapita_t141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109055.60274168954,r[:number],0.001)
end

def test_costpercapita_u141
  r = spreadsheet.costpercapita_u141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126881.33601117837,r[:number],0.001)
end

def test_costpercapita_v141
  r = spreadsheet.costpercapita_v141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146415.82979293386,r[:number],0.001)
end

def test_costpercapita_w141
  r = spreadsheet.costpercapita_w141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166519.75723710362,r[:number],0.001)
end

def test_costpercapita_y141
  r = spreadsheet.costpercapita_y141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z141
  r = spreadsheet.costpercapita_z141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa141
  r = spreadsheet.costpercapita_aa141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab141
  r = spreadsheet.costpercapita_ab141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac141
  r = spreadsheet.costpercapita_ac141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad141
  r = spreadsheet.costpercapita_ad141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae141
  r = spreadsheet.costpercapita_ae141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af141
  r = spreadsheet.costpercapita_af141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag141
  r = spreadsheet.costpercapita_ag141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai141
  r = spreadsheet.costpercapita_ai141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58113.5148138472,r[:number],0.001)
end

def test_costpercapita_aj141
  r = spreadsheet.costpercapita_aj141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109548.08420002401,r[:number],0.001)
end

def test_costpercapita_ak141
  r = spreadsheet.costpercapita_ak141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147519.61185716913,r[:number],0.001)
end

def test_costpercapita_al141
  r = spreadsheet.costpercapita_al141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181403.1958975818,r[:number],0.001)
end

def test_costpercapita_am141
  r = spreadsheet.costpercapita_am141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218303.0239349272,r[:number],0.001)
end

def test_costpercapita_an141
  r = spreadsheet.costpercapita_an141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(255247.39170395816,r[:number],0.001)
end

def test_costpercapita_ao141
  r = spreadsheet.costpercapita_ao141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293929.80211054854,r[:number],0.001)
end

def test_costpercapita_ap141
  r = spreadsheet.costpercapita_ap141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(338241.8645874849,r[:number],0.001)
end

def test_costpercapita_aq141
  r = spreadsheet.costpercapita_aq141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383775.7928351522,r[:number],0.001)
end

def test_costpercapita_as141
  r = spreadsheet.costpercapita_as141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(220675.80910452147,r[:number],0.001)
end

def test_costpercapita_at141
  r = spreadsheet.costpercapita_at141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4224242.137174228,r[:number],0.001)
end

def test_costpercapita_av141
  r = spreadsheet.costpercapita_av141
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw141
  r = spreadsheet.costpercapita_aw141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay141
  r = spreadsheet.costpercapita_ay141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12061.467323605302,r[:number],0.001)
end

def test_costpercapita_az141
  r = spreadsheet.costpercapita_az141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44342.603449503295,r[:number],0.001)
end

def test_costpercapita_ba141
  r = spreadsheet.costpercapita_ba141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58435.636980814736,r[:number],0.001)
end

def test_costpercapita_bb141
  r = spreadsheet.costpercapita_bb141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70058.66256366167,r[:number],0.001)
end

def test_costpercapita_bc141
  r = spreadsheet.costpercapita_bc141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83173.67153402392,r[:number],0.001)
end

def test_costpercapita_bd141
  r = spreadsheet.costpercapita_bd141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96101.93322395554,r[:number],0.001)
end

def test_costpercapita_be141
  r = spreadsheet.costpercapita_be141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109812.46380663179,r[:number],0.001)
end

def test_costpercapita_bf141
  r = spreadsheet.costpercapita_bf141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126100.46649884054,r[:number],0.001)
end

def test_costpercapita_bg141
  r = spreadsheet.costpercapita_bg141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142817.35775826417,r[:number],0.001)
end

def test_costpercapita_bi141
  r = spreadsheet.costpercapita_bi141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12061.467323605302,r[:number],0.001)
end

def test_costpercapita_bj141
  r = spreadsheet.costpercapita_bj141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56006.343052843506,r[:number],0.001)
end

def test_costpercapita_bk141
  r = spreadsheet.costpercapita_bk141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112608.43594879584,r[:number],0.001)
end

def test_costpercapita_bl141
  r = spreadsheet.costpercapita_bl141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168247.78623443,r[:number],0.001)
end

def test_costpercapita_bm141
  r = spreadsheet.costpercapita_bm141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206397.54904819527,r[:number],0.001)
end

def test_costpercapita_bn141
  r = spreadsheet.costpercapita_bn141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243855.84560062128,r[:number],0.001)
end

def test_costpercapita_bo141
  r = spreadsheet.costpercapita_bo141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283347.337012348,r[:number],0.001)
end

def test_costpercapita_bp141
  r = spreadsheet.costpercapita_bp141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(325898.67496917787,r[:number],0.001)
end

def test_costpercapita_bq141
  r = spreadsheet.costpercapita_bq141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(372178.09169581137,r[:number],0.001)
end

def test_costpercapita_bs141
  r = spreadsheet.costpercapita_bs141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39594.82232875841,r[:number],0.001)
end

def test_costpercapita_bt141
  r = spreadsheet.costpercapita_bt141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98099.7537821424,r[:number],0.001)
end

def test_costpercapita_bu141
  r = spreadsheet.costpercapita_bu141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171234.82763039492,r[:number],0.001)
end

def test_costpercapita_bv141
  r = spreadsheet.costpercapita_bv141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243076.6306190438,r[:number],0.001)
end

def test_costpercapita_bw141
  r = spreadsheet.costpercapita_bw141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(298175.4612792499,r[:number],0.001)
end

def test_costpercapita_bx141
  r = spreadsheet.costpercapita_bx141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(352911.4483423108,r[:number],0.001)
end

def test_costpercapita_by141
  r = spreadsheet.costpercapita_by141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410228.6730235264,r[:number],0.001)
end

def test_costpercapita_bz141
  r = spreadsheet.costpercapita_bz141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472314.5047621117,r[:number],0.001)
end

def test_costpercapita_ca141
  r = spreadsheet.costpercapita_ca141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(538697.8489329149,r[:number],0.001)
end

def test_costpercapita_cc141
  r = spreadsheet.costpercapita_cc141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(291592.66341116145,r[:number],0.001)
end

def test_costpercapita_cd141
  r = spreadsheet.costpercapita_cd141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5451535.471107612,r[:number],0.001)
end

def test_costpercapita_cf141
  r = spreadsheet.costpercapita_cf141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-18518.692485088788,r[:number],0.001)
end

def test_costpercapita_cg141
  r = spreadsheet.costpercapita_cg141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11448.330417881602,r[:number],0.001)
end

def test_costpercapita_ch141
  r = spreadsheet.costpercapita_ch141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23715.21577322582,r[:number],0.001)
end

def test_costpercapita_ci141
  r = spreadsheet.costpercapita_ci141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61673.43472146203,r[:number],0.001)
end

def test_costpercapita_cj141
  r = spreadsheet.costpercapita_cj141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79872.43734432275,r[:number],0.001)
end

def test_costpercapita_ck141
  r = spreadsheet.costpercapita_ck141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97664.05663835267,r[:number],0.001)
end

def test_costpercapita_cl141
  r = spreadsheet.costpercapita_cl141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116298.87091297787,r[:number],0.001)
end

def test_costpercapita_cm141
  r = spreadsheet.costpercapita_cm141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134072.6401746268,r[:number],0.001)
end

def test_costpercapita_cn141
  r = spreadsheet.costpercapita_cn141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154922.0560977628,r[:number],0.001)
end

def test_costpercapita_cp141
  r = spreadsheet.costpercapita_cp141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70916.85430664005,r[:number],0.001)
end

def test_costpercapita_cq141
  r = spreadsheet.costpercapita_cq141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1227293.3339333858,r[:number],0.001)
end

def test_costpercapita_cr141
  r = spreadsheet.costpercapita_cr141
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a142
  r = spreadsheet.costpercapita_a142
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.HEV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b142
  r = spreadsheet.costpercapita_b142
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hybrid cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c142
  r = spreadsheet.costpercapita_c142
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e142
  r = spreadsheet.costpercapita_e142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.96276709975272,r[:number],0.001)
end

def test_costpercapita_f142
  r = spreadsheet.costpercapita_f142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1090.8586335309449,r[:number],0.001)
end

def test_costpercapita_g142
  r = spreadsheet.costpercapita_g142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2302.8340798541644,r[:number],0.001)
end

def test_costpercapita_h142
  r = spreadsheet.costpercapita_h142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15312.733464583252,r[:number],0.001)
end

def test_costpercapita_i142
  r = spreadsheet.costpercapita_i142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28801.538191117004,r[:number],0.001)
end

def test_costpercapita_j142
  r = spreadsheet.costpercapita_j142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49164.70703107298,r[:number],0.001)
end

def test_costpercapita_k142
  r = spreadsheet.costpercapita_k142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74685.48478012164,r[:number],0.001)
end

def test_costpercapita_l142
  r = spreadsheet.costpercapita_l142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102249.65572084724,r[:number],0.001)
end

def test_costpercapita_m142
  r = spreadsheet.costpercapita_m142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139235.66528780392,r[:number],0.001)
end

def test_costpercapita_o142
  r = spreadsheet.costpercapita_o142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.65868137461477,r[:number],0.001)
end

def test_costpercapita_p142
  r = spreadsheet.costpercapita_p142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(423.94935341461786,r[:number],0.001)
end

def test_costpercapita_q142
  r = spreadsheet.costpercapita_q142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1102.8318240377316,r[:number],0.001)
end

def test_costpercapita_r142
  r = spreadsheet.costpercapita_r142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5920.476337795098,r[:number],0.001)
end

def test_costpercapita_s142
  r = spreadsheet.costpercapita_s142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13249.280167159413,r[:number],0.001)
end

def test_costpercapita_t142
  r = spreadsheet.costpercapita_t142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24333.579489161548,r[:number],0.001)
end

def test_costpercapita_u142
  r = spreadsheet.costpercapita_u142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39281.899938008995,r[:number],0.001)
end

def test_costpercapita_v142
  r = spreadsheet.costpercapita_v142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57076.44346940716,r[:number],0.001)
end

def test_costpercapita_w142
  r = spreadsheet.costpercapita_w142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79322.21512348819,r[:number],0.001)
end

def test_costpercapita_y142
  r = spreadsheet.costpercapita_y142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z142
  r = spreadsheet.costpercapita_z142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa142
  r = spreadsheet.costpercapita_aa142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab142
  r = spreadsheet.costpercapita_ab142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac142
  r = spreadsheet.costpercapita_ac142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad142
  r = spreadsheet.costpercapita_ad142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae142
  r = spreadsheet.costpercapita_ae142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af142
  r = spreadsheet.costpercapita_af142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag142
  r = spreadsheet.costpercapita_ag142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai142
  r = spreadsheet.costpercapita_ai142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.6214484743675,r[:number],0.001)
end

def test_costpercapita_aj142
  r = spreadsheet.costpercapita_aj142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1514.8079869455628,r[:number],0.001)
end

def test_costpercapita_ak142
  r = spreadsheet.costpercapita_ak142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3405.6659038918965,r[:number],0.001)
end

def test_costpercapita_al142
  r = spreadsheet.costpercapita_al142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21233.20980237835,r[:number],0.001)
end

def test_costpercapita_am142
  r = spreadsheet.costpercapita_am142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42050.81835827642,r[:number],0.001)
end

def test_costpercapita_an142
  r = spreadsheet.costpercapita_an142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73498.28652023454,r[:number],0.001)
end

def test_costpercapita_ao142
  r = spreadsheet.costpercapita_ao142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113967.38471813062,r[:number],0.001)
end

def test_costpercapita_ap142
  r = spreadsheet.costpercapita_ap142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159326.0991902544,r[:number],0.001)
end

def test_costpercapita_aq142
  r = spreadsheet.costpercapita_aq142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218557.88041129208,r[:number],0.001)
end

def test_costpercapita_as142
  r = spreadsheet.costpercapita_as142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70406.53048220869,r[:number],0.001)
end

def test_costpercapita_at142
  r = spreadsheet.costpercapita_at142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080644.0598132145,r[:number],0.001)
end

def test_costpercapita_av142
  r = spreadsheet.costpercapita_av142
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw142
  r = spreadsheet.costpercapita_aw142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay142
  r = spreadsheet.costpercapita_ay142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.327863664233625,r[:number],0.001)
end

def test_costpercapita_az142
  r = spreadsheet.costpercapita_az142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(717.096523002556,r[:number],0.001)
end

def test_costpercapita_ba142
  r = spreadsheet.costpercapita_ba142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1513.8114701169177,r[:number],0.001)
end

def test_costpercapita_bb142
  r = spreadsheet.costpercapita_bb142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10066.114515292084,r[:number],0.001)
end

def test_costpercapita_bc142
  r = spreadsheet.costpercapita_bc142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18933.235030760236,r[:number],0.001)
end

def test_costpercapita_bd142
  r = spreadsheet.costpercapita_bd142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32319.348614681556,r[:number],0.001)
end

def test_costpercapita_be142
  r = spreadsheet.costpercapita_be142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49095.91381353474,r[:number],0.001)
end

def test_costpercapita_bf142
  r = spreadsheet.costpercapita_bf142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67215.74211526646,r[:number],0.001)
end

def test_costpercapita_bg142
  r = spreadsheet.costpercapita_bg142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91529.19396406783,r[:number],0.001)
end

def test_costpercapita_bi142
  r = spreadsheet.costpercapita_bi142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.327863664233625,r[:number],0.001)
end

def test_costpercapita_bj142
  r = spreadsheet.costpercapita_bj142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(748.3583731237231,r[:number],0.001)
end

def test_costpercapita_bk142
  r = spreadsheet.costpercapita_bk142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2237.6699742328824,r[:number],0.001)
end

def test_costpercapita_bl142
  r = spreadsheet.costpercapita_bl142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12205.196342585497,r[:number],0.001)
end

def test_costpercapita_bm142
  r = spreadsheet.costpercapita_bm142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30151.20337596865,r[:number],0.001)
end

def test_costpercapita_bn142
  r = spreadsheet.costpercapita_bn142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60367.068514161016,r[:number],0.001)
end

def test_costpercapita_bo142
  r = spreadsheet.costpercapita_bo142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98818.99079773432,r[:number],0.001)
end

def test_costpercapita_bp142
  r = spreadsheet.costpercapita_bp142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146331.43325827786,r[:number],0.001)
end

def test_costpercapita_bq142
  r = spreadsheet.costpercapita_bq142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204709.1875288778,r[:number],0.001)
end

def test_costpercapita_bs142
  r = spreadsheet.costpercapita_bs142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.9865450388484,r[:number],0.001)
end

def test_costpercapita_bt142
  r = spreadsheet.costpercapita_bt142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1172.307726538341,r[:number],0.001)
end

def test_costpercapita_bu142
  r = spreadsheet.costpercapita_bu142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3340.501798270614,r[:number],0.001)
end

def test_costpercapita_bv142
  r = spreadsheet.costpercapita_bv142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18125.672680380594,r[:number],0.001)
end

def test_costpercapita_bw142
  r = spreadsheet.costpercapita_bw142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43400.483543128066,r[:number],0.001)
end

def test_costpercapita_bx142
  r = spreadsheet.costpercapita_bx142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84700.64800332255,r[:number],0.001)
end

def test_costpercapita_by142
  r = spreadsheet.costpercapita_by142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138100.89073574333,r[:number],0.001)
end

def test_costpercapita_bz142
  r = spreadsheet.costpercapita_bz142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203407.87672768504,r[:number],0.001)
end

def test_costpercapita_ca142
  r = spreadsheet.costpercapita_ca142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284031.40265236597,r[:number],0.001)
end

def test_costpercapita_cc142
  r = spreadsheet.costpercapita_cc142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86259.41893471926,r[:number],0.001)
end

def test_costpercapita_cd142
  r = spreadsheet.costpercapita_cd142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1294255.8843919807,r[:number],0.001)
end

def test_costpercapita_cf142
  r = spreadsheet.costpercapita_cf142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-49.6349034355191,r[:number],0.001)
end

def test_costpercapita_cg142
  r = spreadsheet.costpercapita_cg142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-342.50026040722173,r[:number],0.001)
end

def test_costpercapita_ch142
  r = spreadsheet.costpercapita_ch142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-65.16410562128192,r[:number],0.001)
end

def test_costpercapita_ci142
  r = spreadsheet.costpercapita_ci142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3107.537121997756,r[:number],0.001)
end

def test_costpercapita_cj142
  r = spreadsheet.costpercapita_cj142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1349.6651848516433,r[:number],0.001)
end

def test_costpercapita_ck142
  r = spreadsheet.costpercapita_ck142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11202.361483088029,r[:number],0.001)
end

def test_costpercapita_cl142
  r = spreadsheet.costpercapita_cl142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24133.50601761269,r[:number],0.001)
end

def test_costpercapita_cm142
  r = spreadsheet.costpercapita_cm142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44081.77753743063,r[:number],0.001)
end

def test_costpercapita_cn142
  r = spreadsheet.costpercapita_cn142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65473.522241073915,r[:number],0.001)
end

def test_costpercapita_cp142
  r = spreadsheet.costpercapita_cp142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15852.88845251057,r[:number],0.001)
end

def test_costpercapita_cq142
  r = spreadsheet.costpercapita_cq142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213611.82457876636,r[:number],0.001)
end

def test_costpercapita_cr142
  r = spreadsheet.costpercapita_cr142
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a143
  r = spreadsheet.costpercapita_a143
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.EV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b143
  r = spreadsheet.costpercapita_b143
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electric cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c143
  r = spreadsheet.costpercapita_c143
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e143
  r = spreadsheet.costpercapita_e143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f143
  r = spreadsheet.costpercapita_f143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.49470777453797,r[:number],0.001)
end

def test_costpercapita_g143
  r = spreadsheet.costpercapita_g143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.07789403404416,r[:number],0.001)
end

def test_costpercapita_h143
  r = spreadsheet.costpercapita_h143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2948.4634099562863,r[:number],0.001)
end

def test_costpercapita_i143
  r = spreadsheet.costpercapita_i143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5631.885911027502,r[:number],0.001)
end

def test_costpercapita_j143
  r = spreadsheet.costpercapita_j143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9724.753162620937,r[:number],0.001)
end

def test_costpercapita_k143
  r = spreadsheet.costpercapita_k143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14902.99211421254,r[:number],0.001)
end

def test_costpercapita_l143
  r = spreadsheet.costpercapita_l143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18101.27360702968,r[:number],0.001)
end

def test_costpercapita_m143
  r = spreadsheet.costpercapita_m143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23640.779267560734,r[:number],0.001)
end

def test_costpercapita_o143
  r = spreadsheet.costpercapita_o143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p143
  r = spreadsheet.costpercapita_p143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.453639404235545,r[:number],0.001)
end

def test_costpercapita_q143
  r = spreadsheet.costpercapita_q143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.36291024214275,r[:number],0.001)
end

def test_costpercapita_r143
  r = spreadsheet.costpercapita_r143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.0261717617966,r[:number],0.001)
end

def test_costpercapita_s143
  r = spreadsheet.costpercapita_s143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5069429606385,r[:number],0.001)
end

def test_costpercapita_t143
  r = spreadsheet.costpercapita_t143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2476.0866469140237,r[:number],0.001)
end

def test_costpercapita_u143
  r = spreadsheet.costpercapita_u143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4041.851976625276,r[:number],0.001)
end

def test_costpercapita_v143
  r = spreadsheet.costpercapita_v143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5498.51222160756,r[:number],0.001)
end

def test_costpercapita_w143
  r = spreadsheet.costpercapita_w143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7301.527869576813,r[:number],0.001)
end

def test_costpercapita_y143
  r = spreadsheet.costpercapita_y143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z143
  r = spreadsheet.costpercapita_z143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa143
  r = spreadsheet.costpercapita_aa143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab143
  r = spreadsheet.costpercapita_ab143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac143
  r = spreadsheet.costpercapita_ac143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad143
  r = spreadsheet.costpercapita_ad143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae143
  r = spreadsheet.costpercapita_ae143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af143
  r = spreadsheet.costpercapita_af143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag143
  r = spreadsheet.costpercapita_ag143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai143
  r = spreadsheet.costpercapita_ai143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj143
  r = spreadsheet.costpercapita_aj143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207.9483471787735,r[:number],0.001)
end

def test_costpercapita_ak143
  r = spreadsheet.costpercapita_ak143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(479.4408042761869,r[:number],0.001)
end

def test_costpercapita_al143
  r = spreadsheet.costpercapita_al143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3530.489581718083,r[:number],0.001)
end

def test_costpercapita_am143
  r = spreadsheet.costpercapita_am143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6961.39285398814,r[:number],0.001)
end

def test_costpercapita_an143
  r = spreadsheet.costpercapita_an143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12200.839809534958,r[:number],0.001)
end

def test_costpercapita_ao143
  r = spreadsheet.costpercapita_ao143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18944.844090837818,r[:number],0.001)
end

def test_costpercapita_ap143
  r = spreadsheet.costpercapita_ap143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23599.785828637243,r[:number],0.001)
end

def test_costpercapita_aq143
  r = spreadsheet.costpercapita_aq143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30942.307137137548,r[:number],0.001)
end

def test_costpercapita_as143
  r = spreadsheet.costpercapita_as143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10763.005383700973,r[:number],0.001)
end

def test_costpercapita_at143
  r = spreadsheet.costpercapita_at143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167445.38777065667,r[:number],0.001)
end

def test_costpercapita_av143
  r = spreadsheet.costpercapita_av143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw143
  r = spreadsheet.costpercapita_aw143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay143
  r = spreadsheet.costpercapita_ay143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az143
  r = spreadsheet.costpercapita_az143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.39265362101038,r[:number],0.001)
end

def test_costpercapita_ba143
  r = spreadsheet.costpercapita_ba143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.1661189691449,r[:number],0.001)
end

def test_costpercapita_bb143
  r = spreadsheet.costpercapita_bb143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1938.2281026058674,r[:number],0.001)
end

def test_costpercapita_bc143
  r = spreadsheet.costpercapita_bc143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3702.2265586078242,r[:number],0.001)
end

def test_costpercapita_bd143
  r = spreadsheet.costpercapita_bd143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6392.750137935962,r[:number],0.001)
end

def test_costpercapita_be143
  r = spreadsheet.costpercapita_be143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9796.763300891236,r[:number],0.001)
end

def test_costpercapita_bf143
  r = spreadsheet.costpercapita_bf143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11899.2140379395,r[:number],0.001)
end

def test_costpercapita_bg143
  r = spreadsheet.costpercapita_bg143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15540.712694334474,r[:number],0.001)
end

def test_costpercapita_bi143
  r = spreadsheet.costpercapita_bi143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj143
  r = spreadsheet.costpercapita_bj143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.39265362101038,r[:number],0.001)
end

def test_costpercapita_bk143
  r = spreadsheet.costpercapita_bk143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(360.84650683630156,r[:number],0.001)
end

def test_costpercapita_bl143
  r = spreadsheet.costpercapita_bl143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2287.9015477384755,r[:number],0.001)
end

def test_costpercapita_bm143
  r = spreadsheet.costpercapita_bm143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5824.241687246866,r[:number],0.001)
end

def test_costpercapita_bn143
  r = spreadsheet.costpercapita_bn143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11848.63461381007,r[:number],0.001)
end

def test_costpercapita_bo143
  r = spreadsheet.costpercapita_bo143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19591.101945106442,r[:number],0.001)
end

def test_costpercapita_bp143
  r = spreadsheet.costpercapita_bp143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27632.16559789874,r[:number],0.001)
end

def test_costpercapita_bq143
  r = spreadsheet.costpercapita_bq143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36640.02731694802,r[:number],0.001)
end

def test_costpercapita_bs143
  r = spreadsheet.costpercapita_bs143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt143
  r = spreadsheet.costpercapita_bt143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.84629302524593,r[:number],0.001)
end

def test_costpercapita_bu143
  r = spreadsheet.costpercapita_bu143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(458.2094170784443,r[:number],0.001)
end

def test_costpercapita_bv143
  r = spreadsheet.costpercapita_bv143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2869.9277195002724,r[:number],0.001)
end

def test_costpercapita_bw143
  r = spreadsheet.costpercapita_bw143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7153.748630207505,r[:number],0.001)
end

def test_costpercapita_bx143
  r = spreadsheet.costpercapita_bx143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14324.721260724094,r[:number],0.001)
end

def test_costpercapita_by143
  r = spreadsheet.costpercapita_by143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23632.953921731718,r[:number],0.001)
end

def test_costpercapita_bz143
  r = spreadsheet.costpercapita_bz143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33130.6778195063,r[:number],0.001)
end

def test_costpercapita_ca143
  r = spreadsheet.costpercapita_ca143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43941.555186524834,r[:number],0.001)
end

def test_costpercapita_cc143
  r = spreadsheet.costpercapita_cc143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13962.293360922045,r[:number],0.001)
end

def test_costpercapita_cd143
  r = spreadsheet.costpercapita_cd143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210354.5867905936,r[:number],0.001)
end

def test_costpercapita_cf143
  r = spreadsheet.costpercapita_cf143
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg143
  r = spreadsheet.costpercapita_cg143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-59.1020541535276,r[:number],0.001)
end

def test_costpercapita_ch143
  r = spreadsheet.costpercapita_ch143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-21.23138719774261,r[:number],0.001)
end

def test_costpercapita_ci143
  r = spreadsheet.costpercapita_ci143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-660.5618622178107,r[:number],0.001)
end

def test_costpercapita_cj143
  r = spreadsheet.costpercapita_cj143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.35577621936474,r[:number],0.001)
end

def test_costpercapita_ck143
  r = spreadsheet.costpercapita_ck143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2123.8814511891355,r[:number],0.001)
end

def test_costpercapita_cl143
  r = spreadsheet.costpercapita_cl143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4688.109830893902,r[:number],0.001)
end

def test_costpercapita_cm143
  r = spreadsheet.costpercapita_cm143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9530.891990869057,r[:number],0.001)
end

def test_costpercapita_cn143
  r = spreadsheet.costpercapita_cn143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12999.248049387286,r[:number],0.001)
end

def test_costpercapita_cp143
  r = spreadsheet.costpercapita_cp143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3199.287977221074,r[:number],0.001)
end

def test_costpercapita_cq143
  r = spreadsheet.costpercapita_cq143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42909.199019936976,r[:number],0.001)
end

def test_costpercapita_cr143
  r = spreadsheet.costpercapita_cr143
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a144
  r = spreadsheet.costpercapita_a144
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.FCV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b144
  r = spreadsheet.costpercapita_b144
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel cell cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c144
  r = spreadsheet.costpercapita_c144
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e144
  r = spreadsheet.costpercapita_e144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f144
  r = spreadsheet.costpercapita_f144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g144
  r = spreadsheet.costpercapita_g144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h144
  r = spreadsheet.costpercapita_h144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i144
  r = spreadsheet.costpercapita_i144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j144
  r = spreadsheet.costpercapita_j144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k144
  r = spreadsheet.costpercapita_k144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l144
  r = spreadsheet.costpercapita_l144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m144
  r = spreadsheet.costpercapita_m144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o144
  r = spreadsheet.costpercapita_o144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p144
  r = spreadsheet.costpercapita_p144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q144
  r = spreadsheet.costpercapita_q144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r144
  r = spreadsheet.costpercapita_r144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s144
  r = spreadsheet.costpercapita_s144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t144
  r = spreadsheet.costpercapita_t144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u144
  r = spreadsheet.costpercapita_u144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v144
  r = spreadsheet.costpercapita_v144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w144
  r = spreadsheet.costpercapita_w144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y144
  r = spreadsheet.costpercapita_y144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z144
  r = spreadsheet.costpercapita_z144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa144
  r = spreadsheet.costpercapita_aa144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab144
  r = spreadsheet.costpercapita_ab144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac144
  r = spreadsheet.costpercapita_ac144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad144
  r = spreadsheet.costpercapita_ad144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae144
  r = spreadsheet.costpercapita_ae144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af144
  r = spreadsheet.costpercapita_af144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag144
  r = spreadsheet.costpercapita_ag144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai144
  r = spreadsheet.costpercapita_ai144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj144
  r = spreadsheet.costpercapita_aj144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak144
  r = spreadsheet.costpercapita_ak144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al144
  r = spreadsheet.costpercapita_al144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am144
  r = spreadsheet.costpercapita_am144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an144
  r = spreadsheet.costpercapita_an144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao144
  r = spreadsheet.costpercapita_ao144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap144
  r = spreadsheet.costpercapita_ap144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq144
  r = spreadsheet.costpercapita_aq144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as144
  r = spreadsheet.costpercapita_as144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at144
  r = spreadsheet.costpercapita_at144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av144
  r = spreadsheet.costpercapita_av144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw144
  r = spreadsheet.costpercapita_aw144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay144
  r = spreadsheet.costpercapita_ay144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az144
  r = spreadsheet.costpercapita_az144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba144
  r = spreadsheet.costpercapita_ba144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb144
  r = spreadsheet.costpercapita_bb144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc144
  r = spreadsheet.costpercapita_bc144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd144
  r = spreadsheet.costpercapita_bd144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be144
  r = spreadsheet.costpercapita_be144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf144
  r = spreadsheet.costpercapita_bf144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg144
  r = spreadsheet.costpercapita_bg144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi144
  r = spreadsheet.costpercapita_bi144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj144
  r = spreadsheet.costpercapita_bj144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk144
  r = spreadsheet.costpercapita_bk144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl144
  r = spreadsheet.costpercapita_bl144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm144
  r = spreadsheet.costpercapita_bm144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn144
  r = spreadsheet.costpercapita_bn144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo144
  r = spreadsheet.costpercapita_bo144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp144
  r = spreadsheet.costpercapita_bp144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq144
  r = spreadsheet.costpercapita_bq144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs144
  r = spreadsheet.costpercapita_bs144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt144
  r = spreadsheet.costpercapita_bt144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu144
  r = spreadsheet.costpercapita_bu144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv144
  r = spreadsheet.costpercapita_bv144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw144
  r = spreadsheet.costpercapita_bw144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx144
  r = spreadsheet.costpercapita_bx144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by144
  r = spreadsheet.costpercapita_by144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz144
  r = spreadsheet.costpercapita_bz144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca144
  r = spreadsheet.costpercapita_ca144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc144
  r = spreadsheet.costpercapita_cc144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd144
  r = spreadsheet.costpercapita_cd144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf144
  r = spreadsheet.costpercapita_cf144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg144
  r = spreadsheet.costpercapita_cg144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch144
  r = spreadsheet.costpercapita_ch144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci144
  r = spreadsheet.costpercapita_ci144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj144
  r = spreadsheet.costpercapita_cj144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck144
  r = spreadsheet.costpercapita_ck144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl144
  r = spreadsheet.costpercapita_cl144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm144
  r = spreadsheet.costpercapita_cm144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn144
  r = spreadsheet.costpercapita_cn144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp144
  r = spreadsheet.costpercapita_cp144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq144
  r = spreadsheet.costpercapita_cq144
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr144
  r = spreadsheet.costpercapita_cr144
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a145
  r = spreadsheet.costpercapita_a145
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Bike",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b145
  r = spreadsheet.costpercapita_b145
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bikes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c145
  r = spreadsheet.costpercapita_c145
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e145
  r = spreadsheet.costpercapita_e145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1960.5044441010261,r[:number],0.001)
end

def test_costpercapita_f145
  r = spreadsheet.costpercapita_f145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2929.281491841372,r[:number],0.001)
end

def test_costpercapita_g145
  r = spreadsheet.costpercapita_g145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4075.1721385915193,r[:number],0.001)
end

def test_costpercapita_h145
  r = spreadsheet.costpercapita_h145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5406.329680046457,r[:number],0.001)
end

def test_costpercapita_i145
  r = spreadsheet.costpercapita_i145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6983.388527977049,r[:number],0.001)
end

def test_costpercapita_j145
  r = spreadsheet.costpercapita_j145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8936.099544676166,r[:number],0.001)
end

def test_costpercapita_k145
  r = spreadsheet.costpercapita_k145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11493.962086034608,r[:number],0.001)
end

def test_costpercapita_l145
  r = spreadsheet.costpercapita_l145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15129.804494815082,r[:number],0.001)
end

def test_costpercapita_m145
  r = spreadsheet.costpercapita_m145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21024.411556936695,r[:number],0.001)
end

def test_costpercapita_o145
  r = spreadsheet.costpercapita_o145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969.1043127250674,r[:number],0.001)
end

def test_costpercapita_p145
  r = spreadsheet.costpercapita_p145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1464.6407459206857,r[:number],0.001)
end

def test_costpercapita_q145
  r = spreadsheet.costpercapita_q145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2037.5860692957592,r[:number],0.001)
end

def test_costpercapita_r145
  r = spreadsheet.costpercapita_r145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2703.1648400232284,r[:number],0.001)
end

def test_costpercapita_s145
  r = spreadsheet.costpercapita_s145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3491.6942639885247,r[:number],0.001)
end

def test_costpercapita_t145
  r = spreadsheet.costpercapita_t145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4468.049772338083,r[:number],0.001)
end

def test_costpercapita_u145
  r = spreadsheet.costpercapita_u145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5746.981043017304,r[:number],0.001)
end

def test_costpercapita_v145
  r = spreadsheet.costpercapita_v145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7564.902247407541,r[:number],0.001)
end

def test_costpercapita_w145
  r = spreadsheet.costpercapita_w145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10512.205778468347,r[:number],0.001)
end

def test_costpercapita_y145
  r = spreadsheet.costpercapita_y145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z145
  r = spreadsheet.costpercapita_z145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa145
  r = spreadsheet.costpercapita_aa145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab145
  r = spreadsheet.costpercapita_ab145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac145
  r = spreadsheet.costpercapita_ac145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad145
  r = spreadsheet.costpercapita_ad145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae145
  r = spreadsheet.costpercapita_ae145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af145
  r = spreadsheet.costpercapita_af145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag145
  r = spreadsheet.costpercapita_ag145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai145
  r = spreadsheet.costpercapita_ai145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2929.6087568260937,r[:number],0.001)
end

def test_costpercapita_aj145
  r = spreadsheet.costpercapita_aj145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4393.922237762058,r[:number],0.001)
end

def test_costpercapita_ak145
  r = spreadsheet.costpercapita_ak145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6112.758207887278,r[:number],0.001)
end

def test_costpercapita_al145
  r = spreadsheet.costpercapita_al145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8109.494520069687,r[:number],0.001)
end

def test_costpercapita_am145
  r = spreadsheet.costpercapita_am145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10475.082791965573,r[:number],0.001)
end

def test_costpercapita_an145
  r = spreadsheet.costpercapita_an145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13404.149317014248,r[:number],0.001)
end

def test_costpercapita_ao145
  r = spreadsheet.costpercapita_ao145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17240.94312905191,r[:number],0.001)
end

def test_costpercapita_ap145
  r = spreadsheet.costpercapita_ap145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22694.706742222625,r[:number],0.001)
end

def test_costpercapita_aq145
  r = spreadsheet.costpercapita_aq145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31536.617335405037,r[:number],0.001)
end

def test_costpercapita_as145
  r = spreadsheet.costpercapita_as145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12988.587004244946,r[:number],0.001)
end

def test_costpercapita_at145
  r = spreadsheet.costpercapita_at145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229367.8927889124,r[:number],0.001)
end

def test_costpercapita_av145
  r = spreadsheet.costpercapita_av145
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw145
  r = spreadsheet.costpercapita_aw145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay145
  r = spreadsheet.costpercapita_ay145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.2647716113202,r[:number],0.001)
end

def test_costpercapita_az145
  r = spreadsheet.costpercapita_az145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1925.6185064933068,r[:number],0.001)
end

def test_costpercapita_ba145
  r = spreadsheet.costpercapita_ba145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2678.8913626340845,r[:number],0.001)
end

def test_costpercapita_bb145
  r = spreadsheet.costpercapita_bb145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3553.952910670032,r[:number],0.001)
end

def test_costpercapita_bc145
  r = spreadsheet.costpercapita_bc145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4590.662326225447,r[:number],0.001)
end

def test_costpercapita_bd145
  r = spreadsheet.costpercapita_bd145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5874.313788900515,r[:number],0.001)
end

def test_costpercapita_be145
  r = spreadsheet.costpercapita_be145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7555.773034256148,r[:number],0.001)
end

def test_costpercapita_bf145
  r = spreadsheet.costpercapita_bf145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9945.862702504399,r[:number],0.001)
end

def test_costpercapita_bg145
  r = spreadsheet.costpercapita_bg145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13820.793971124926,r[:number],0.001)
end

def test_costpercapita_bi145
  r = spreadsheet.costpercapita_bi145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.2647716113202,r[:number],0.001)
end

def test_costpercapita_bj145
  r = spreadsheet.costpercapita_bj145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2673.384818711351,r[:number],0.001)
end

def test_costpercapita_bk145
  r = spreadsheet.costpercapita_bk145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5264.754506947159,r[:number],0.001)
end

def test_costpercapita_bl145
  r = spreadsheet.costpercapita_bl145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7954.801940595264,r[:number],0.001)
end

def test_costpercapita_bm145
  r = spreadsheet.costpercapita_bm145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10572.542700874343,r[:number],0.001)
end

def test_costpercapita_bn145
  r = spreadsheet.costpercapita_bn145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13732.269538513818,r[:number],0.001)
end

def test_costpercapita_bo145
  r = spreadsheet.costpercapita_bo145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17691.738936540685,r[:number],0.001)
end

def test_costpercapita_bp145
  r = spreadsheet.costpercapita_bp145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22985.26830508487,r[:number],0.001)
end

def test_costpercapita_bq145
  r = spreadsheet.costpercapita_bq145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30847.90955314462,r[:number],0.001)
end

def test_costpercapita_bs145
  r = spreadsheet.costpercapita_bs145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1742.3690843363875,r[:number],0.001)
end

def test_costpercapita_bt145
  r = spreadsheet.costpercapita_bt145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4138.025564632037,r[:number],0.001)
end

def test_costpercapita_bu145
  r = spreadsheet.costpercapita_bu145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7302.340576242918,r[:number],0.001)
end

def test_costpercapita_bv145
  r = spreadsheet.costpercapita_bv145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10657.966780618492,r[:number],0.001)
end

def test_costpercapita_bw145
  r = spreadsheet.costpercapita_bw145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14064.236964862868,r[:number],0.001)
end

def test_costpercapita_bx145
  r = spreadsheet.costpercapita_bx145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18200.3193108519,r[:number],0.001)
end

def test_costpercapita_by145
  r = spreadsheet.costpercapita_by145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23438.71997955799,r[:number],0.001)
end

def test_costpercapita_bz145
  r = spreadsheet.costpercapita_bz145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30550.17055249241,r[:number],0.001)
end

def test_costpercapita_ca145
  r = spreadsheet.costpercapita_ca145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41360.11533161297,r[:number],0.001)
end

def test_costpercapita_cc145
  r = spreadsheet.costpercapita_cc145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16828.251571689776,r[:number],0.001)
end

def test_costpercapita_cd145
  r = spreadsheet.costpercapita_cd145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(294225.0992207092,r[:number],0.001)
end

def test_costpercapita_cf145
  r = spreadsheet.costpercapita_cf145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1187.2396724897058,r[:number],0.001)
end

def test_costpercapita_cg145
  r = spreadsheet.costpercapita_cg145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-255.89667313002093,r[:number],0.001)
end

def test_costpercapita_ch145
  r = spreadsheet.costpercapita_ch145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1189.5823683556403,r[:number],0.001)
end

def test_costpercapita_ci145
  r = spreadsheet.costpercapita_ci145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2548.472260548807,r[:number],0.001)
end

def test_costpercapita_cj145
  r = spreadsheet.costpercapita_cj145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3589.1541728972934,r[:number],0.001)
end

def test_costpercapita_ck145
  r = spreadsheet.costpercapita_ck145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4796.169993837652,r[:number],0.001)
end

def test_costpercapita_cl145
  r = spreadsheet.costpercapita_cl145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6197.7768505060785,r[:number],0.001)
end

def test_costpercapita_cm145
  r = spreadsheet.costpercapita_cm145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7855.4638102697845,r[:number],0.001)
end

def test_costpercapita_cn145
  r = spreadsheet.costpercapita_cn145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9823.497996207927,r[:number],0.001)
end

def test_costpercapita_cp145
  r = spreadsheet.costpercapita_cp145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3839.6645674448278,r[:number],0.001)
end

def test_costpercapita_cq145
  r = spreadsheet.costpercapita_cq145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64857.20643179678,r[:number],0.001)
end

def test_costpercapita_cr145
  r = spreadsheet.costpercapita_cr145
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a146
  r = spreadsheet.costpercapita_a146
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b146
  r = spreadsheet.costpercapita_b146
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c146
  r = spreadsheet.costpercapita_c146
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e146
  r = spreadsheet.costpercapita_e146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.184889562682116,r[:number],0.001)
end

def test_costpercapita_f146
  r = spreadsheet.costpercapita_f146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.34458965915013,r[:number],0.001)
end

def test_costpercapita_g146
  r = spreadsheet.costpercapita_g146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.1969272348027,r[:number],0.001)
end

def test_costpercapita_h146
  r = spreadsheet.costpercapita_h146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.90322637259919,r[:number],0.001)
end

def test_costpercapita_i146
  r = spreadsheet.costpercapita_i146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.71249476605036,r[:number],0.001)
end

def test_costpercapita_j146
  r = spreadsheet.costpercapita_j146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.19852972413932,r[:number],0.001)
end

def test_costpercapita_k146
  r = spreadsheet.costpercapita_k146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l146
  r = spreadsheet.costpercapita_l146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m146
  r = spreadsheet.costpercapita_m146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o146
  r = spreadsheet.costpercapita_o146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5793.314608237358,r[:number],0.001)
end

def test_costpercapita_p146
  r = spreadsheet.costpercapita_p146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7510.848177454037,r[:number],0.001)
end

def test_costpercapita_q146
  r = spreadsheet.costpercapita_q146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8716.926482191982,r[:number],0.001)
end

def test_costpercapita_r146
  r = spreadsheet.costpercapita_r146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9346.161825457468,r[:number],0.001)
end

def test_costpercapita_s146
  r = spreadsheet.costpercapita_s146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9336.544343751704,r[:number],0.001)
end

def test_costpercapita_t146
  r = spreadsheet.costpercapita_t146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8657.943071315849,r[:number],0.001)
end

def test_costpercapita_u146
  r = spreadsheet.costpercapita_u146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7261.629392303103,r[:number],0.001)
end

def test_costpercapita_v146
  r = spreadsheet.costpercapita_v146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5088.782209925626,r[:number],0.001)
end

def test_costpercapita_w146
  r = spreadsheet.costpercapita_w146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2076.1354583306193,r[:number],0.001)
end

def test_costpercapita_y146
  r = spreadsheet.costpercapita_y146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z146
  r = spreadsheet.costpercapita_z146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa146
  r = spreadsheet.costpercapita_aa146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab146
  r = spreadsheet.costpercapita_ab146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac146
  r = spreadsheet.costpercapita_ac146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad146
  r = spreadsheet.costpercapita_ad146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae146
  r = spreadsheet.costpercapita_ae146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af146
  r = spreadsheet.costpercapita_af146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag146
  r = spreadsheet.costpercapita_ag146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai146
  r = spreadsheet.costpercapita_ai146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5833.4994978000395,r[:number],0.001)
end

def test_costpercapita_aj146
  r = spreadsheet.costpercapita_aj146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7680.192767113188,r[:number],0.001)
end

def test_costpercapita_ak146
  r = spreadsheet.costpercapita_ak146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8870.123409426784,r[:number],0.001)
end

def test_costpercapita_al146
  r = spreadsheet.costpercapita_al146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9473.065051830068,r[:number],0.001)
end

def test_costpercapita_am146
  r = spreadsheet.costpercapita_am146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9426.256838517755,r[:number],0.001)
end

def test_costpercapita_an146
  r = spreadsheet.costpercapita_an146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8702.141601039988,r[:number],0.001)
end

def test_costpercapita_ao146
  r = spreadsheet.costpercapita_ao146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7261.629392303103,r[:number],0.001)
end

def test_costpercapita_ap146
  r = spreadsheet.costpercapita_ap146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5088.782209925626,r[:number],0.001)
end

def test_costpercapita_aq146
  r = spreadsheet.costpercapita_aq146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2076.1354583306193,r[:number],0.001)
end

def test_costpercapita_as146
  r = spreadsheet.costpercapita_as146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7156.869580698574,r[:number],0.001)
end

def test_costpercapita_at146
  r = spreadsheet.costpercapita_at146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163484.40938688436,r[:number],0.001)
end

def test_costpercapita_av146
  r = spreadsheet.costpercapita_av146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw146
  r = spreadsheet.costpercapita_aw146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay146
  r = spreadsheet.costpercapita_ay146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.849777613823285,r[:number],0.001)
end

def test_costpercapita_az146
  r = spreadsheet.costpercapita_az146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.32186398965352,r[:number],0.001)
end

def test_costpercapita_ba146
  r = spreadsheet.costpercapita_ba146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.70689315549726,r[:number],0.001)
end

def test_costpercapita_bb146
  r = spreadsheet.costpercapita_bb146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.42223235199398,r[:number],0.001)
end

def test_costpercapita_bc146
  r = spreadsheet.costpercapita_bc146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.97420260440626,r[:number],0.001)
end

def test_costpercapita_bd146
  r = spreadsheet.costpercapita_bd146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.054738178506913,r[:number],0.001)
end

def test_costpercapita_be146
  r = spreadsheet.costpercapita_be146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf146
  r = spreadsheet.costpercapita_bf146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg146
  r = spreadsheet.costpercapita_bg146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi146
  r = spreadsheet.costpercapita_bi146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.849777613823285,r[:number],0.001)
end

def test_costpercapita_bj146
  r = spreadsheet.costpercapita_bj146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.64899408904732,r[:number],0.001)
end

def test_costpercapita_bk146
  r = spreadsheet.costpercapita_bk146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.20963342206875,r[:number],0.001)
end

def test_costpercapita_bl146
  r = spreadsheet.costpercapita_bl146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285.3542160119023,r[:number],0.001)
end

def test_costpercapita_bm146
  r = spreadsheet.costpercapita_bm146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.03984753695374,r[:number],0.001)
end

def test_costpercapita_bn146
  r = spreadsheet.costpercapita_bn146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.87150384682664,r[:number],0.001)
end

def test_costpercapita_bo146
  r = spreadsheet.costpercapita_bo146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.7920493668818,r[:number],0.001)
end

def test_costpercapita_bp146
  r = spreadsheet.costpercapita_bp146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.867884244982744,r[:number],0.001)
end

def test_costpercapita_bq146
  r = spreadsheet.costpercapita_bq146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs146
  r = spreadsheet.costpercapita_bs146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5809.164385851181,r[:number],0.001)
end

def test_costpercapita_bt146
  r = spreadsheet.costpercapita_bt146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7637.497171543085,r[:number],0.001)
end

def test_costpercapita_bu146
  r = spreadsheet.costpercapita_bu146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8940.13611561405,r[:number],0.001)
end

def test_costpercapita_bv146
  r = spreadsheet.costpercapita_bv146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9631.516041469371,r[:number],0.001)
end

def test_costpercapita_bw146
  r = spreadsheet.costpercapita_bw146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9571.584191288657,r[:number],0.001)
end

def test_costpercapita_bx146
  r = spreadsheet.costpercapita_bx146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8823.814575162676,r[:number],0.001)
end

def test_costpercapita_by146
  r = spreadsheet.costpercapita_by146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7346.421441669985,r[:number],0.001)
end

def test_costpercapita_bz146
  r = spreadsheet.costpercapita_bz146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5116.650094170609,r[:number],0.001)
end

def test_costpercapita_ca146
  r = spreadsheet.costpercapita_ca146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2076.1354583306193,r[:number],0.001)
end

def test_costpercapita_cc146
  r = spreadsheet.costpercapita_cc146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7216.991052788915,r[:number],0.001)
end

def test_costpercapita_cd146
  r = spreadsheet.costpercapita_cd146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164817.86923844228,r[:number],0.001)
end

def test_costpercapita_cf146
  r = spreadsheet.costpercapita_cf146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-24.335111948858835,r[:number],0.001)
end

def test_costpercapita_cg146
  r = spreadsheet.costpercapita_cg146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-42.6955955701028,r[:number],0.001)
end

def test_costpercapita_ch146
  r = spreadsheet.costpercapita_ch146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.01270618726605,r[:number],0.001)
end

def test_costpercapita_ci146
  r = spreadsheet.costpercapita_ci146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.4509896393031,r[:number],0.001)
end

def test_costpercapita_cj146
  r = spreadsheet.costpercapita_cj146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.3273527709034,r[:number],0.001)
end

def test_costpercapita_ck146
  r = spreadsheet.costpercapita_ck146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.67297412268734,r[:number],0.001)
end

def test_costpercapita_cl146
  r = spreadsheet.costpercapita_cl146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.7920493668818,r[:number],0.001)
end

def test_costpercapita_cm146
  r = spreadsheet.costpercapita_cm146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.867884244982744,r[:number],0.001)
end

def test_costpercapita_cn146
  r = spreadsheet.costpercapita_cn146
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp146
  r = spreadsheet.costpercapita_cp146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.12147209034031,r[:number],0.001)
end

def test_costpercapita_cq146
  r = spreadsheet.costpercapita_cq146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1333.4598515579155,r[:number],0.001)
end

def test_costpercapita_cr146
  r = spreadsheet.costpercapita_cr146
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a147
  r = spreadsheet.costpercapita_a147
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Air",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b147
  r = spreadsheet.costpercapita_b147
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c147
  r = spreadsheet.costpercapita_c147
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e147
  r = spreadsheet.costpercapita_e147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2457.276219024844,r[:number],0.001)
end

def test_costpercapita_f147
  r = spreadsheet.costpercapita_f147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9067.20540597621,r[:number],0.001)
end

def test_costpercapita_g147
  r = spreadsheet.costpercapita_g147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11214.758480401715,r[:number],0.001)
end

def test_costpercapita_h147
  r = spreadsheet.costpercapita_h147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13499.958345742984,r[:number],0.001)
end

def test_costpercapita_i147
  r = spreadsheet.costpercapita_i147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15859.739512038006,r[:number],0.001)
end

def test_costpercapita_j147
  r = spreadsheet.costpercapita_j147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18438.516260882825,r[:number],0.001)
end

def test_costpercapita_k147
  r = spreadsheet.costpercapita_k147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21296.27023691427,r[:number],0.001)
end

def test_costpercapita_l147
  r = spreadsheet.costpercapita_l147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24423.4988727644,r[:number],0.001)
end

def test_costpercapita_m147
  r = spreadsheet.costpercapita_m147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27762.49093370926,r[:number],0.001)
end

def test_costpercapita_o147
  r = spreadsheet.costpercapita_o147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1644.793999550656,r[:number],0.001)
end

def test_costpercapita_p147
  r = spreadsheet.costpercapita_p147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2515.4128971280898,r[:number],0.001)
end

def test_costpercapita_q147
  r = spreadsheet.costpercapita_q147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3499.3388261744167,r[:number],0.001)
end

def test_costpercapita_r147
  r = spreadsheet.costpercapita_r147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4597.51077875279,r[:number],0.001)
end

def test_costpercapita_s147
  r = spreadsheet.costpercapita_s147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5807.96614019896,r[:number],0.001)
end

def test_costpercapita_t147
  r = spreadsheet.costpercapita_t147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7145.770423413824,r[:number],0.001)
end

def test_costpercapita_u147
  r = spreadsheet.costpercapita_u147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8622.66349528015,r[:number],0.001)
end

def test_costpercapita_v147
  r = spreadsheet.costpercapita_v147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10247.47214379025,r[:number],0.001)
end

def test_costpercapita_w147
  r = spreadsheet.costpercapita_w147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12023.651063768335,r[:number],0.001)
end

def test_costpercapita_y147
  r = spreadsheet.costpercapita_y147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z147
  r = spreadsheet.costpercapita_z147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa147
  r = spreadsheet.costpercapita_aa147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab147
  r = spreadsheet.costpercapita_ab147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac147
  r = spreadsheet.costpercapita_ac147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad147
  r = spreadsheet.costpercapita_ad147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae147
  r = spreadsheet.costpercapita_ae147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af147
  r = spreadsheet.costpercapita_af147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag147
  r = spreadsheet.costpercapita_ag147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai147
  r = spreadsheet.costpercapita_ai147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4102.0702185755,r[:number],0.001)
end

def test_costpercapita_aj147
  r = spreadsheet.costpercapita_aj147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11582.6183031043,r[:number],0.001)
end

def test_costpercapita_ak147
  r = spreadsheet.costpercapita_ak147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14714.097306576134,r[:number],0.001)
end

def test_costpercapita_al147
  r = spreadsheet.costpercapita_al147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18097.469124495776,r[:number],0.001)
end

def test_costpercapita_am147
  r = spreadsheet.costpercapita_am147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21667.705652236964,r[:number],0.001)
end

def test_costpercapita_an147
  r = spreadsheet.costpercapita_an147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25584.286684296647,r[:number],0.001)
end

def test_costpercapita_ao147
  r = spreadsheet.costpercapita_ao147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29918.933732194426,r[:number],0.001)
end

def test_costpercapita_ap147
  r = spreadsheet.costpercapita_ap147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34670.97101655466,r[:number],0.001)
end

def test_costpercapita_aq147
  r = spreadsheet.costpercapita_aq147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39786.14199747759,r[:number],0.001)
end

def test_costpercapita_as147
  r = spreadsheet.costpercapita_as147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22236.032670612443,r[:number],0.001)
end

def test_costpercapita_at147
  r = spreadsheet.costpercapita_at147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426918.45788303297,r[:number],0.001)
end

def test_costpercapita_av147
  r = spreadsheet.costpercapita_av147
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw147
  r = spreadsheet.costpercapita_aw147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay147
  r = spreadsheet.costpercapita_ay147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969.2021561121537,r[:number],0.001)
end

def test_costpercapita_az147
  r = spreadsheet.costpercapita_az147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5960.498702686458,r[:number],0.001)
end

def test_costpercapita_ba147
  r = spreadsheet.costpercapita_ba147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7372.233271490504,r[:number],0.001)
end

def test_costpercapita_bb147
  r = spreadsheet.costpercapita_bb147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8874.45255768516,r[:number],0.001)
end

def test_costpercapita_bc147
  r = spreadsheet.costpercapita_bc147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10425.699270487634,r[:number],0.001)
end

def test_costpercapita_bd147
  r = spreadsheet.costpercapita_bd147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12120.906865087465,r[:number],0.001)
end

def test_costpercapita_be147
  r = spreadsheet.costpercapita_be147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13999.505408306264,r[:number],0.001)
end

def test_costpercapita_bf147
  r = spreadsheet.costpercapita_bf147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16055.248208034069,r[:number],0.001)
end

def test_costpercapita_bg147
  r = spreadsheet.costpercapita_bg147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18250.19769428093,r[:number],0.001)
end

def test_costpercapita_bi147
  r = spreadsheet.costpercapita_bi147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969.2021561121537,r[:number],0.001)
end

def test_costpercapita_bj147
  r = spreadsheet.costpercapita_bj147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6897.7413505825525,r[:number],0.001)
end

def test_costpercapita_bk147
  r = spreadsheet.costpercapita_bk147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14044.1553279917,r[:number],0.001)
end

def test_costpercapita_bl147
  r = spreadsheet.costpercapita_bl147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21605.26319815982,r[:number],0.001)
end

def test_costpercapita_bm147
  r = spreadsheet.costpercapita_bm147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26006.489566955974,r[:number],0.001)
end

def test_costpercapita_bn147
  r = spreadsheet.costpercapita_bn147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30729.689896558248,r[:number],0.001)
end

def test_costpercapita_bo147
  r = spreadsheet.costpercapita_bo147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35824.92674396158,r[:number],0.001)
end

def test_costpercapita_bp147
  r = spreadsheet.costpercapita_bp147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41401.273747051324,r[:number],0.001)
end

def test_costpercapita_bq147
  r = spreadsheet.costpercapita_bq147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47470.02786376919,r[:number],0.001)
end

def test_costpercapita_bs147
  r = spreadsheet.costpercapita_bs147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2613.9961556628095,r[:number],0.001)
end

def test_costpercapita_bt147
  r = spreadsheet.costpercapita_bt147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9413.154247710643,r[:number],0.001)
end

def test_costpercapita_bu147
  r = spreadsheet.costpercapita_bu147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17543.494154166117,r[:number],0.001)
end

def test_costpercapita_bv147
  r = spreadsheet.costpercapita_bv147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26202.77397691261,r[:number],0.001)
end

def test_costpercapita_bw147
  r = spreadsheet.costpercapita_bw147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31814.455707154935,r[:number],0.001)
end

def test_costpercapita_bx147
  r = spreadsheet.costpercapita_bx147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37875.46031997207,r[:number],0.001)
end

def test_costpercapita_by147
  r = spreadsheet.costpercapita_by147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44447.590239241734,r[:number],0.001)
end

def test_costpercapita_bz147
  r = spreadsheet.costpercapita_bz147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51648.74589084157,r[:number],0.001)
end

def test_costpercapita_ca147
  r = spreadsheet.costpercapita_ca147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59493.678927537534,r[:number],0.001)
end

def test_costpercapita_cc147
  r = spreadsheet.costpercapita_cc147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31228.149957688893,r[:number],0.001)
end

def test_costpercapita_cd147
  r = spreadsheet.costpercapita_cd147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(580110.9440114372,r[:number],0.001)
end

def test_costpercapita_cf147
  r = spreadsheet.costpercapita_cf147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1488.0740629126904,r[:number],0.001)
end

def test_costpercapita_cg147
  r = spreadsheet.costpercapita_cg147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2169.464055393659,r[:number],0.001)
end

def test_costpercapita_ch147
  r = spreadsheet.costpercapita_ch147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2829.396847589985,r[:number],0.001)
end

def test_costpercapita_ci147
  r = spreadsheet.costpercapita_ci147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8105.304852416835,r[:number],0.001)
end

def test_costpercapita_cj147
  r = spreadsheet.costpercapita_cj147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10146.750054917968,r[:number],0.001)
end

def test_costpercapita_ck147
  r = spreadsheet.costpercapita_ck147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12291.173635675426,r[:number],0.001)
end

def test_costpercapita_cl147
  r = spreadsheet.costpercapita_cl147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14528.656507047308,r[:number],0.001)
end

def test_costpercapita_cm147
  r = spreadsheet.costpercapita_cm147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16977.774874286926,r[:number],0.001)
end

def test_costpercapita_cn147
  r = spreadsheet.costpercapita_cn147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19707.53693005993,r[:number],0.001)
end

def test_costpercapita_cp147
  r = spreadsheet.costpercapita_cp147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8992.117287076448,r[:number],0.001)
end

def test_costpercapita_cq147
  r = spreadsheet.costpercapita_cq147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153192.48612840418,r[:number],0.001)
end

def test_costpercapita_cr147
  r = spreadsheet.costpercapita_cr147
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a148
  r = spreadsheet.costpercapita_a148
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b148
  r = spreadsheet.costpercapita_b148
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c148
  r = spreadsheet.costpercapita_c148
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e148
  r = spreadsheet.costpercapita_e148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.51502071878326,r[:number],0.001)
end

def test_costpercapita_f148
  r = spreadsheet.costpercapita_f148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.31856094861399,r[:number],0.001)
end

def test_costpercapita_g148
  r = spreadsheet.costpercapita_g148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.85228679586372,r[:number],0.001)
end

def test_costpercapita_h148
  r = spreadsheet.costpercapita_h148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.55780062066584,r[:number],0.001)
end

def test_costpercapita_i148
  r = spreadsheet.costpercapita_i148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.43975114033788,r[:number],0.001)
end

def test_costpercapita_j148
  r = spreadsheet.costpercapita_j148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.52220281932236,r[:number],0.001)
end

def test_costpercapita_k148
  r = spreadsheet.costpercapita_k148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.69394659378997,r[:number],0.001)
end

def test_costpercapita_l148
  r = spreadsheet.costpercapita_l148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.89473079052745,r[:number],0.001)
end

def test_costpercapita_m148
  r = spreadsheet.costpercapita_m148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.12444594939797,r[:number],0.001)
end

def test_costpercapita_o148
  r = spreadsheet.costpercapita_o148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.33805341280801,r[:number],0.001)
end

def test_costpercapita_p148
  r = spreadsheet.costpercapita_p148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.026886244722,r[:number],0.001)
end

def test_costpercapita_q148
  r = spreadsheet.costpercapita_q148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.10695824626555,r[:number],0.001)
end

def test_costpercapita_r148
  r = spreadsheet.costpercapita_r148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.20387391171141,r[:number],0.001)
end

def test_costpercapita_s148
  r = spreadsheet.costpercapita_s148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55166379487936,r[:number],0.001)
end

def test_costpercapita_t148
  r = spreadsheet.costpercapita_t148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18613584478634,r[:number],0.001)
end

def test_costpercapita_u148
  r = spreadsheet.costpercapita_u148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.94699136772934,r[:number],0.001)
end

def test_costpercapita_v148
  r = spreadsheet.costpercapita_v148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.74737348640706,r[:number],0.001)
end

def test_costpercapita_w148
  r = spreadsheet.costpercapita_w148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.58744013692298,r[:number],0.001)
end

def test_costpercapita_y148
  r = spreadsheet.costpercapita_y148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z148
  r = spreadsheet.costpercapita_z148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa148
  r = spreadsheet.costpercapita_aa148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab148
  r = spreadsheet.costpercapita_ab148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac148
  r = spreadsheet.costpercapita_ac148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad148
  r = spreadsheet.costpercapita_ad148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae148
  r = spreadsheet.costpercapita_ae148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af148
  r = spreadsheet.costpercapita_af148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag148
  r = spreadsheet.costpercapita_ag148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai148
  r = spreadsheet.costpercapita_ai148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.85307413159126,r[:number],0.001)
end

def test_costpercapita_aj148
  r = spreadsheet.costpercapita_aj148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.34544719333599,r[:number],0.001)
end

def test_costpercapita_ak148
  r = spreadsheet.costpercapita_ak148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.95924504212925,r[:number],0.001)
end

def test_costpercapita_al148
  r = spreadsheet.costpercapita_al148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.76167453237724,r[:number],0.001)
end

def test_costpercapita_am148
  r = spreadsheet.costpercapita_am148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.99141493521722,r[:number],0.001)
end

def test_costpercapita_an148
  r = spreadsheet.costpercapita_an148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.7083386641087,r[:number],0.001)
end

def test_costpercapita_ao148
  r = spreadsheet.costpercapita_ao148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.6409379615193,r[:number],0.001)
end

def test_costpercapita_ap148
  r = spreadsheet.costpercapita_ap148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.6421042769345,r[:number],0.001)
end

def test_costpercapita_aq148
  r = spreadsheet.costpercapita_aq148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.71188608632093,r[:number],0.001)
end

def test_costpercapita_as148
  r = spreadsheet.costpercapita_as148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(201.84601364705938,r[:number],0.001)
end

def test_costpercapita_at148
  r = spreadsheet.costpercapita_at148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4108.935582348113,r[:number],0.001)
end

def test_costpercapita_av148
  r = spreadsheet.costpercapita_av148
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw148
  r = spreadsheet.costpercapita_aw148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay148
  r = spreadsheet.costpercapita_ay148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.5217054018355,r[:number],0.001)
end

def test_costpercapita_az148
  r = spreadsheet.costpercapita_az148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.826816157053834,r[:number],0.001)
end

def test_costpercapita_ba148
  r = spreadsheet.costpercapita_ba148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.52030203741865,r[:number],0.001)
end

def test_costpercapita_bb148
  r = spreadsheet.costpercapita_bb148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.9840848733836,r[:number],0.001)
end

def test_costpercapita_bc148
  r = spreadsheet.costpercapita_bc148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.563851702628924,r[:number],0.001)
end

def test_costpercapita_bd148
  r = spreadsheet.costpercapita_bd148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27542175529976,r[:number],0.001)
end

def test_costpercapita_be148
  r = spreadsheet.costpercapita_be148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.045689653167365,r[:number],0.001)
end

def test_costpercapita_bf148
  r = spreadsheet.costpercapita_bf148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.83504782102609,r[:number],0.001)
end

def test_costpercapita_bg148
  r = spreadsheet.costpercapita_bg148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.6434243031879,r[:number],0.001)
end

def test_costpercapita_bi148
  r = spreadsheet.costpercapita_bi148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.5217054018355,r[:number],0.001)
end

def test_costpercapita_bj148
  r = spreadsheet.costpercapita_bj148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.2868639935704,r[:number],0.001)
end

def test_costpercapita_bk148
  r = spreadsheet.costpercapita_bk148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.16383993476867,r[:number],0.001)
end

def test_costpercapita_bl148
  r = spreadsheet.costpercapita_bl148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.58069065581583,r[:number],0.001)
end

def test_costpercapita_bm148
  r = spreadsheet.costpercapita_bm148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.77357560748962,r[:number],0.001)
end

def test_costpercapita_bn148
  r = spreadsheet.costpercapita_bn148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.04768789045895,r[:number],0.001)
end

def test_costpercapita_bo148
  r = spreadsheet.costpercapita_bo148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.48172775720093,r[:number],0.001)
end

def test_costpercapita_bp148
  r = spreadsheet.costpercapita_bp148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.96261458499754,r[:number],0.001)
end

def test_costpercapita_bq148
  r = spreadsheet.costpercapita_bq148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.49117723789638,r[:number],0.001)
end

def test_costpercapita_bs148
  r = spreadsheet.costpercapita_bs148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.8597588146435,r[:number],0.001)
end

def test_costpercapita_bt148
  r = spreadsheet.costpercapita_bt148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.3137502382924,r[:number],0.001)
end

def test_costpercapita_bu148
  r = spreadsheet.costpercapita_bu148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.2707981810342,r[:number],0.001)
end

def test_costpercapita_bv148
  r = spreadsheet.costpercapita_bv148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.78456456752724,r[:number],0.001)
end

def test_costpercapita_bw148
  r = spreadsheet.costpercapita_bw148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.325239402369,r[:number],0.001)
end

def test_costpercapita_bx148
  r = spreadsheet.costpercapita_bx148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.23382373524527,r[:number],0.001)
end

def test_costpercapita_by148
  r = spreadsheet.costpercapita_by148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.42871912493024,r[:number],0.001)
end

def test_costpercapita_bz148
  r = spreadsheet.costpercapita_bz148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.7099880714046,r[:number],0.001)
end

def test_costpercapita_ca148
  r = spreadsheet.costpercapita_ca148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.0786173748193,r[:number],0.001)
end

def test_costpercapita_cc148
  r = spreadsheet.costpercapita_cc148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(252.22280661225173,r[:number],0.001)
end

def test_costpercapita_cd148
  r = spreadsheet.costpercapita_cd148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5324.586527997232,r[:number],0.001)
end

def test_costpercapita_cf148
  r = spreadsheet.costpercapita_cf148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-95.99331531694776,r[:number],0.001)
end

def test_costpercapita_cg148
  r = spreadsheet.costpercapita_cg148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.96830304495642,r[:number],0.001)
end

def test_costpercapita_ch148
  r = spreadsheet.costpercapita_ch148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.31155313890496,r[:number],0.001)
end

def test_costpercapita_ci148
  r = spreadsheet.costpercapita_ci148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.02289003515,r[:number],0.001)
end

def test_costpercapita_cj148
  r = spreadsheet.costpercapita_cj148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.33382446715173,r[:number],0.001)
end

def test_costpercapita_ck148
  r = spreadsheet.costpercapita_ck148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.52548507113659,r[:number],0.001)
end

def test_costpercapita_cl148
  r = spreadsheet.costpercapita_cl148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.78778116341095,r[:number],0.001)
end

def test_costpercapita_cm148
  r = spreadsheet.costpercapita_cm148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.06788379447009,r[:number],0.001)
end

def test_costpercapita_cn148
  r = spreadsheet.costpercapita_cn148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.36673128849841,r[:number],0.001)
end

def test_costpercapita_cp148
  r = spreadsheet.costpercapita_cp148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.37679296519238,r[:number],0.001)
end

def test_costpercapita_cq148
  r = spreadsheet.costpercapita_cq148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1215.650945649119,r[:number],0.001)
end

def test_costpercapita_cr148
  r = spreadsheet.costpercapita_cr148
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a149
  r = spreadsheet.costpercapita_a149
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b149
  r = spreadsheet.costpercapita_b149
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c149
  r = spreadsheet.costpercapita_c149
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e149
  r = spreadsheet.costpercapita_e149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f149
  r = spreadsheet.costpercapita_f149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g149
  r = spreadsheet.costpercapita_g149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h149
  r = spreadsheet.costpercapita_h149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i149
  r = spreadsheet.costpercapita_i149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j149
  r = spreadsheet.costpercapita_j149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k149
  r = spreadsheet.costpercapita_k149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l149
  r = spreadsheet.costpercapita_l149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m149
  r = spreadsheet.costpercapita_m149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o149
  r = spreadsheet.costpercapita_o149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p149
  r = spreadsheet.costpercapita_p149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q149
  r = spreadsheet.costpercapita_q149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r149
  r = spreadsheet.costpercapita_r149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s149
  r = spreadsheet.costpercapita_s149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t149
  r = spreadsheet.costpercapita_t149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u149
  r = spreadsheet.costpercapita_u149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v149
  r = spreadsheet.costpercapita_v149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w149
  r = spreadsheet.costpercapita_w149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y149
  r = spreadsheet.costpercapita_y149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z149
  r = spreadsheet.costpercapita_z149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa149
  r = spreadsheet.costpercapita_aa149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab149
  r = spreadsheet.costpercapita_ab149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac149
  r = spreadsheet.costpercapita_ac149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad149
  r = spreadsheet.costpercapita_ad149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae149
  r = spreadsheet.costpercapita_ae149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af149
  r = spreadsheet.costpercapita_af149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag149
  r = spreadsheet.costpercapita_ag149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai149
  r = spreadsheet.costpercapita_ai149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj149
  r = spreadsheet.costpercapita_aj149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak149
  r = spreadsheet.costpercapita_ak149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al149
  r = spreadsheet.costpercapita_al149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am149
  r = spreadsheet.costpercapita_am149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an149
  r = spreadsheet.costpercapita_an149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao149
  r = spreadsheet.costpercapita_ao149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap149
  r = spreadsheet.costpercapita_ap149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq149
  r = spreadsheet.costpercapita_aq149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as149
  r = spreadsheet.costpercapita_as149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at149
  r = spreadsheet.costpercapita_at149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av149
  r = spreadsheet.costpercapita_av149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw149
  r = spreadsheet.costpercapita_aw149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay149
  r = spreadsheet.costpercapita_ay149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az149
  r = spreadsheet.costpercapita_az149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba149
  r = spreadsheet.costpercapita_ba149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb149
  r = spreadsheet.costpercapita_bb149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc149
  r = spreadsheet.costpercapita_bc149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd149
  r = spreadsheet.costpercapita_bd149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be149
  r = spreadsheet.costpercapita_be149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf149
  r = spreadsheet.costpercapita_bf149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg149
  r = spreadsheet.costpercapita_bg149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi149
  r = spreadsheet.costpercapita_bi149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj149
  r = spreadsheet.costpercapita_bj149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk149
  r = spreadsheet.costpercapita_bk149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl149
  r = spreadsheet.costpercapita_bl149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm149
  r = spreadsheet.costpercapita_bm149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn149
  r = spreadsheet.costpercapita_bn149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo149
  r = spreadsheet.costpercapita_bo149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp149
  r = spreadsheet.costpercapita_bp149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq149
  r = spreadsheet.costpercapita_bq149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs149
  r = spreadsheet.costpercapita_bs149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt149
  r = spreadsheet.costpercapita_bt149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu149
  r = spreadsheet.costpercapita_bu149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv149
  r = spreadsheet.costpercapita_bv149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw149
  r = spreadsheet.costpercapita_bw149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx149
  r = spreadsheet.costpercapita_bx149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by149
  r = spreadsheet.costpercapita_by149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz149
  r = spreadsheet.costpercapita_bz149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca149
  r = spreadsheet.costpercapita_ca149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc149
  r = spreadsheet.costpercapita_cc149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd149
  r = spreadsheet.costpercapita_cd149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf149
  r = spreadsheet.costpercapita_cf149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg149
  r = spreadsheet.costpercapita_cg149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch149
  r = spreadsheet.costpercapita_ch149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci149
  r = spreadsheet.costpercapita_ci149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj149
  r = spreadsheet.costpercapita_cj149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck149
  r = spreadsheet.costpercapita_ck149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl149
  r = spreadsheet.costpercapita_cl149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm149
  r = spreadsheet.costpercapita_cm149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn149
  r = spreadsheet.costpercapita_cn149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp149
  r = spreadsheet.costpercapita_cp149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq149
  r = spreadsheet.costpercapita_cq149
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr149
  r = spreadsheet.costpercapita_cr149
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a150
  r = spreadsheet.costpercapita_a150
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.e",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b150
  r = spreadsheet.costpercapita_b150
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping (maritime bunkers)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c150
  r = spreadsheet.costpercapita_c150
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e150
  r = spreadsheet.costpercapita_e150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f150
  r = spreadsheet.costpercapita_f150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g150
  r = spreadsheet.costpercapita_g150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h150
  r = spreadsheet.costpercapita_h150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i150
  r = spreadsheet.costpercapita_i150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j150
  r = spreadsheet.costpercapita_j150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k150
  r = spreadsheet.costpercapita_k150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l150
  r = spreadsheet.costpercapita_l150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m150
  r = spreadsheet.costpercapita_m150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o150
  r = spreadsheet.costpercapita_o150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p150
  r = spreadsheet.costpercapita_p150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q150
  r = spreadsheet.costpercapita_q150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r150
  r = spreadsheet.costpercapita_r150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s150
  r = spreadsheet.costpercapita_s150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t150
  r = spreadsheet.costpercapita_t150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u150
  r = spreadsheet.costpercapita_u150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v150
  r = spreadsheet.costpercapita_v150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w150
  r = spreadsheet.costpercapita_w150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y150
  r = spreadsheet.costpercapita_y150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z150
  r = spreadsheet.costpercapita_z150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa150
  r = spreadsheet.costpercapita_aa150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab150
  r = spreadsheet.costpercapita_ab150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac150
  r = spreadsheet.costpercapita_ac150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad150
  r = spreadsheet.costpercapita_ad150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae150
  r = spreadsheet.costpercapita_ae150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af150
  r = spreadsheet.costpercapita_af150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag150
  r = spreadsheet.costpercapita_ag150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai150
  r = spreadsheet.costpercapita_ai150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj150
  r = spreadsheet.costpercapita_aj150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak150
  r = spreadsheet.costpercapita_ak150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al150
  r = spreadsheet.costpercapita_al150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am150
  r = spreadsheet.costpercapita_am150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an150
  r = spreadsheet.costpercapita_an150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao150
  r = spreadsheet.costpercapita_ao150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap150
  r = spreadsheet.costpercapita_ap150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq150
  r = spreadsheet.costpercapita_aq150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as150
  r = spreadsheet.costpercapita_as150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at150
  r = spreadsheet.costpercapita_at150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av150
  r = spreadsheet.costpercapita_av150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw150
  r = spreadsheet.costpercapita_aw150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay150
  r = spreadsheet.costpercapita_ay150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az150
  r = spreadsheet.costpercapita_az150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba150
  r = spreadsheet.costpercapita_ba150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb150
  r = spreadsheet.costpercapita_bb150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc150
  r = spreadsheet.costpercapita_bc150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd150
  r = spreadsheet.costpercapita_bd150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be150
  r = spreadsheet.costpercapita_be150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf150
  r = spreadsheet.costpercapita_bf150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg150
  r = spreadsheet.costpercapita_bg150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi150
  r = spreadsheet.costpercapita_bi150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj150
  r = spreadsheet.costpercapita_bj150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk150
  r = spreadsheet.costpercapita_bk150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl150
  r = spreadsheet.costpercapita_bl150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm150
  r = spreadsheet.costpercapita_bm150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn150
  r = spreadsheet.costpercapita_bn150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo150
  r = spreadsheet.costpercapita_bo150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp150
  r = spreadsheet.costpercapita_bp150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq150
  r = spreadsheet.costpercapita_bq150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs150
  r = spreadsheet.costpercapita_bs150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt150
  r = spreadsheet.costpercapita_bt150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu150
  r = spreadsheet.costpercapita_bu150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv150
  r = spreadsheet.costpercapita_bv150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw150
  r = spreadsheet.costpercapita_bw150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx150
  r = spreadsheet.costpercapita_bx150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by150
  r = spreadsheet.costpercapita_by150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz150
  r = spreadsheet.costpercapita_bz150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca150
  r = spreadsheet.costpercapita_ca150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc150
  r = spreadsheet.costpercapita_cc150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd150
  r = spreadsheet.costpercapita_cd150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf150
  r = spreadsheet.costpercapita_cf150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg150
  r = spreadsheet.costpercapita_cg150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch150
  r = spreadsheet.costpercapita_ch150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci150
  r = spreadsheet.costpercapita_ci150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj150
  r = spreadsheet.costpercapita_cj150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck150
  r = spreadsheet.costpercapita_ck150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl150
  r = spreadsheet.costpercapita_cl150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm150
  r = spreadsheet.costpercapita_cm150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn150
  r = spreadsheet.costpercapita_cn150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp150
  r = spreadsheet.costpercapita_cp150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq150
  r = spreadsheet.costpercapita_cq150
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr150
  r = spreadsheet.costpercapita_cr150
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a151
  r = spreadsheet.costpercapita_a151
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b151
  r = spreadsheet.costpercapita_b151
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c151
  r = spreadsheet.costpercapita_c151
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e151
  r = spreadsheet.costpercapita_e151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f151
  r = spreadsheet.costpercapita_f151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g151
  r = spreadsheet.costpercapita_g151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h151
  r = spreadsheet.costpercapita_h151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i151
  r = spreadsheet.costpercapita_i151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j151
  r = spreadsheet.costpercapita_j151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k151
  r = spreadsheet.costpercapita_k151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l151
  r = spreadsheet.costpercapita_l151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m151
  r = spreadsheet.costpercapita_m151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o151
  r = spreadsheet.costpercapita_o151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p151
  r = spreadsheet.costpercapita_p151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q151
  r = spreadsheet.costpercapita_q151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r151
  r = spreadsheet.costpercapita_r151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s151
  r = spreadsheet.costpercapita_s151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t151
  r = spreadsheet.costpercapita_t151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u151
  r = spreadsheet.costpercapita_u151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v151
  r = spreadsheet.costpercapita_v151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w151
  r = spreadsheet.costpercapita_w151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y151
  r = spreadsheet.costpercapita_y151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z151
  r = spreadsheet.costpercapita_z151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa151
  r = spreadsheet.costpercapita_aa151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab151
  r = spreadsheet.costpercapita_ab151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac151
  r = spreadsheet.costpercapita_ac151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad151
  r = spreadsheet.costpercapita_ad151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae151
  r = spreadsheet.costpercapita_ae151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af151
  r = spreadsheet.costpercapita_af151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag151
  r = spreadsheet.costpercapita_ag151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai151
  r = spreadsheet.costpercapita_ai151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj151
  r = spreadsheet.costpercapita_aj151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak151
  r = spreadsheet.costpercapita_ak151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al151
  r = spreadsheet.costpercapita_al151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am151
  r = spreadsheet.costpercapita_am151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an151
  r = spreadsheet.costpercapita_an151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao151
  r = spreadsheet.costpercapita_ao151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap151
  r = spreadsheet.costpercapita_ap151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq151
  r = spreadsheet.costpercapita_aq151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as151
  r = spreadsheet.costpercapita_as151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at151
  r = spreadsheet.costpercapita_at151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av151
  r = spreadsheet.costpercapita_av151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw151
  r = spreadsheet.costpercapita_aw151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay151
  r = spreadsheet.costpercapita_ay151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az151
  r = spreadsheet.costpercapita_az151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba151
  r = spreadsheet.costpercapita_ba151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb151
  r = spreadsheet.costpercapita_bb151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc151
  r = spreadsheet.costpercapita_bc151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd151
  r = spreadsheet.costpercapita_bd151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be151
  r = spreadsheet.costpercapita_be151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf151
  r = spreadsheet.costpercapita_bf151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg151
  r = spreadsheet.costpercapita_bg151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi151
  r = spreadsheet.costpercapita_bi151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj151
  r = spreadsheet.costpercapita_bj151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk151
  r = spreadsheet.costpercapita_bk151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl151
  r = spreadsheet.costpercapita_bl151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm151
  r = spreadsheet.costpercapita_bm151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn151
  r = spreadsheet.costpercapita_bn151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo151
  r = spreadsheet.costpercapita_bo151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp151
  r = spreadsheet.costpercapita_bp151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq151
  r = spreadsheet.costpercapita_bq151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs151
  r = spreadsheet.costpercapita_bs151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt151
  r = spreadsheet.costpercapita_bt151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu151
  r = spreadsheet.costpercapita_bu151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv151
  r = spreadsheet.costpercapita_bv151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw151
  r = spreadsheet.costpercapita_bw151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx151
  r = spreadsheet.costpercapita_bx151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by151
  r = spreadsheet.costpercapita_by151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz151
  r = spreadsheet.costpercapita_bz151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca151
  r = spreadsheet.costpercapita_ca151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc151
  r = spreadsheet.costpercapita_cc151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd151
  r = spreadsheet.costpercapita_cd151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf151
  r = spreadsheet.costpercapita_cf151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg151
  r = spreadsheet.costpercapita_cg151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch151
  r = spreadsheet.costpercapita_ch151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci151
  r = spreadsheet.costpercapita_ci151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj151
  r = spreadsheet.costpercapita_cj151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck151
  r = spreadsheet.costpercapita_ck151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl151
  r = spreadsheet.costpercapita_cl151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm151
  r = spreadsheet.costpercapita_cm151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn151
  r = spreadsheet.costpercapita_cn151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp151
  r = spreadsheet.costpercapita_cp151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq151
  r = spreadsheet.costpercapita_cq151
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr151
  r = spreadsheet.costpercapita_cr151
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a152
  r = spreadsheet.costpercapita_a152
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b152
  r = spreadsheet.costpercapita_b152
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c152
  r = spreadsheet.costpercapita_c152
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e152
  r = spreadsheet.costpercapita_e152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.501503394061272,r[:number],0.001)
end

def test_costpercapita_f152
  r = spreadsheet.costpercapita_f152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.654657730685964,r[:number],0.001)
end

def test_costpercapita_g152
  r = spreadsheet.costpercapita_g152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.932778118698089,r[:number],0.001)
end

def test_costpercapita_h152
  r = spreadsheet.costpercapita_h152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.291332390419164,r[:number],0.001)
end

def test_costpercapita_i152
  r = spreadsheet.costpercapita_i152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.790810821928129,r[:number],0.001)
end

def test_costpercapita_j152
  r = spreadsheet.costpercapita_j152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.40318407443384,r[:number],0.001)
end

def test_costpercapita_k152
  r = spreadsheet.costpercapita_k152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.094221775906331,r[:number],0.001)
end

def test_costpercapita_l152
  r = spreadsheet.costpercapita_l152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.841911723728388,r[:number],0.001)
end

def test_costpercapita_m152
  r = spreadsheet.costpercapita_m152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6336130361418455,r[:number],0.001)
end

def test_costpercapita_o152
  r = spreadsheet.costpercapita_o152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.366948484265311,r[:number],0.001)
end

def test_costpercapita_p152
  r = spreadsheet.costpercapita_p152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.1653847697148,r[:number],0.001)
end

def test_costpercapita_q152
  r = spreadsheet.costpercapita_q152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.078668379868073,r[:number],0.001)
end

def test_costpercapita_r152
  r = spreadsheet.costpercapita_r152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.207378058178438,r[:number],0.001)
end

def test_costpercapita_s152
  r = spreadsheet.costpercapita_s152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.52690777830955,r[:number],0.001)
end

def test_costpercapita_t152
  r = spreadsheet.costpercapita_t152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.99614813048735,r[:number],0.001)
end

def test_costpercapita_u152
  r = spreadsheet.costpercapita_u152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568814724711372,r[:number],0.001)
end

def test_costpercapita_v152
  r = spreadsheet.costpercapita_v152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.215535728368746,r[:number],0.001)
end

def test_costpercapita_w152
  r = spreadsheet.costpercapita_w152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.920240132730445,r[:number],0.001)
end

def test_costpercapita_y152
  r = spreadsheet.costpercapita_y152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z152
  r = spreadsheet.costpercapita_z152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa152
  r = spreadsheet.costpercapita_aa152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab152
  r = spreadsheet.costpercapita_ab152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac152
  r = spreadsheet.costpercapita_ac152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad152
  r = spreadsheet.costpercapita_ad152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae152
  r = spreadsheet.costpercapita_ae152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af152
  r = spreadsheet.costpercapita_af152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag152
  r = spreadsheet.costpercapita_ag152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai152
  r = spreadsheet.costpercapita_ai152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.86845187832658,r[:number],0.001)
end

def test_costpercapita_aj152
  r = spreadsheet.costpercapita_aj152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.820042500400763,r[:number],0.001)
end

def test_costpercapita_ak152
  r = spreadsheet.costpercapita_ak152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.011446498566162,r[:number],0.001)
end

def test_costpercapita_al152
  r = spreadsheet.costpercapita_al152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.498710448597603,r[:number],0.001)
end

def test_costpercapita_am152
  r = spreadsheet.costpercapita_am152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.31771860023768,r[:number],0.001)
end

def test_costpercapita_an152
  r = spreadsheet.costpercapita_an152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.39933220492119,r[:number],0.001)
end

def test_costpercapita_ao152
  r = spreadsheet.costpercapita_ao152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663036500617702,r[:number],0.001)
end

def test_costpercapita_ap152
  r = spreadsheet.costpercapita_ap152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.057447452097135,r[:number],0.001)
end

def test_costpercapita_aq152
  r = spreadsheet.costpercapita_aq152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.553853168872289,r[:number],0.001)
end

def test_costpercapita_as152
  r = spreadsheet.costpercapita_as152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.132226583626345,r[:number],0.001)
end

def test_costpercapita_at152
  r = spreadsheet.costpercapita_at152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.41342302506314,r[:number],0.001)
end

def test_costpercapita_av152
  r = spreadsheet.costpercapita_av152
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw152
  r = spreadsheet.costpercapita_aw152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay152
  r = spreadsheet.costpercapita_ay152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976265,r[:number],0.001)
end

def test_costpercapita_az152
  r = spreadsheet.costpercapita_az152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.689302697603889,r[:number],0.001)
end

def test_costpercapita_ba152
  r = spreadsheet.costpercapita_ba152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.214761502373705,r[:number],0.001)
end

def test_costpercapita_bb152
  r = spreadsheet.costpercapita_bb152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793095039548198,r[:number],0.001)
end

def test_costpercapita_bc152
  r = spreadsheet.costpercapita_bc152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.464067734432658,r[:number],0.001)
end

def test_costpercapita_bd152
  r = spreadsheet.costpercapita_bd152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.209253971854448,r[:number],0.001)
end

def test_costpercapita_be152
  r = spreadsheet.costpercapita_be152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.006151770338372,r[:number],0.001)
end

def test_costpercapita_bf152
  r = spreadsheet.costpercapita_bf152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8402909928059508,r[:number],0.001)
end

def test_costpercapita_bg152
  r = spreadsheet.costpercapita_bg152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7033619169175234,r[:number],0.001)
end

def test_costpercapita_bi152
  r = spreadsheet.costpercapita_bi152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976265,r[:number],0.001)
end

def test_costpercapita_bj152
  r = spreadsheet.costpercapita_bj152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.313321084750326,r[:number],0.001)
end

def test_costpercapita_bk152
  r = spreadsheet.costpercapita_bk152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.223181680288242,r[:number],0.001)
end

def test_costpercapita_bl152
  r = spreadsheet.costpercapita_bl152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.179041446909173,r[:number],0.001)
end

def test_costpercapita_bm152
  r = spreadsheet.costpercapita_bm152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.041452274225913,r[:number],0.001)
end

def test_costpercapita_bn152
  r = spreadsheet.costpercapita_bn152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.120494318508507,r[:number],0.001)
end

def test_costpercapita_bo152
  r = spreadsheet.costpercapita_bo152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.391591205657562,r[:number],0.001)
end

def test_costpercapita_bp152
  r = spreadsheet.costpercapita_bp152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.803838947213613,r[:number],0.001)
end

def test_costpercapita_bq152
  r = spreadsheet.costpercapita_bq152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.324953367902518,r[:number],0.001)
end

def test_costpercapita_bs152
  r = spreadsheet.costpercapita_bs152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.114544096241573,r[:number],0.001)
end

def test_costpercapita_bt152
  r = spreadsheet.costpercapita_bt152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.478705854465122,r[:number],0.001)
end

def test_costpercapita_bu152
  r = spreadsheet.costpercapita_bu152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.301850060156315,r[:number],0.001)
end

def test_costpercapita_bv152
  r = spreadsheet.costpercapita_bv152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.38641950508761,r[:number],0.001)
end

def test_costpercapita_bw152
  r = spreadsheet.costpercapita_bw152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.56836005253546,r[:number],0.001)
end

def test_costpercapita_bx152
  r = spreadsheet.costpercapita_bx152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.116642448995858,r[:number],0.001)
end

def test_costpercapita_by152
  r = spreadsheet.costpercapita_by152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.960405930368935,r[:number],0.001)
end

def test_costpercapita_bz152
  r = spreadsheet.costpercapita_bz152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.01937467558236,r[:number],0.001)
end

def test_costpercapita_ca152
  r = spreadsheet.costpercapita_ca152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.24519350063296,r[:number],0.001)
end

def test_costpercapita_cc152
  r = spreadsheet.costpercapita_cc152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.687944013785128,r[:number],0.001)
end

def test_costpercapita_cd152
  r = spreadsheet.costpercapita_cd152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(493.62494620970085,r[:number],0.001)
end

def test_costpercapita_cf152
  r = spreadsheet.costpercapita_cf152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.753907782085006,r[:number],0.001)
end

def test_costpercapita_cg152
  r = spreadsheet.costpercapita_cg152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6586633540643624,r[:number],0.001)
end

def test_costpercapita_ch152
  r = spreadsheet.costpercapita_ch152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.2904035615901535,r[:number],0.001)
end

def test_costpercapita_ci152
  r = spreadsheet.costpercapita_ci152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.887709056490008,r[:number],0.001)
end

def test_costpercapita_cj152
  r = spreadsheet.costpercapita_cj152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.250641452297785,r[:number],0.001)
end

def test_costpercapita_ck152
  r = spreadsheet.costpercapita_ck152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.7173102440746675,r[:number],0.001)
end

def test_costpercapita_cl152
  r = spreadsheet.costpercapita_cl152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.297369429751232,r[:number],0.001)
end

def test_costpercapita_cm152
  r = spreadsheet.costpercapita_cm152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.961927223485224,r[:number],0.001)
end

def test_costpercapita_cn152
  r = spreadsheet.costpercapita_cn152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6913403317606726,r[:number],0.001)
end

def test_costpercapita_cp152
  r = spreadsheet.costpercapita_cp152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.555717430158789,r[:number],0.001)
end

def test_costpercapita_cq152
  r = spreadsheet.costpercapita_cq152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.21152318463781,r[:number],0.001)
end

def test_costpercapita_cr152
  r = spreadsheet.costpercapita_cr152
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a153
  r = spreadsheet.costpercapita_a153
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b153
  r = spreadsheet.costpercapita_b153
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c153
  r = spreadsheet.costpercapita_c153
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e153
  r = spreadsheet.costpercapita_e153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f153
  r = spreadsheet.costpercapita_f153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g153
  r = spreadsheet.costpercapita_g153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h153
  r = spreadsheet.costpercapita_h153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i153
  r = spreadsheet.costpercapita_i153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j153
  r = spreadsheet.costpercapita_j153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k153
  r = spreadsheet.costpercapita_k153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l153
  r = spreadsheet.costpercapita_l153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m153
  r = spreadsheet.costpercapita_m153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o153
  r = spreadsheet.costpercapita_o153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p153
  r = spreadsheet.costpercapita_p153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q153
  r = spreadsheet.costpercapita_q153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r153
  r = spreadsheet.costpercapita_r153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s153
  r = spreadsheet.costpercapita_s153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t153
  r = spreadsheet.costpercapita_t153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u153
  r = spreadsheet.costpercapita_u153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v153
  r = spreadsheet.costpercapita_v153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w153
  r = spreadsheet.costpercapita_w153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y153
  r = spreadsheet.costpercapita_y153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z153
  r = spreadsheet.costpercapita_z153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa153
  r = spreadsheet.costpercapita_aa153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab153
  r = spreadsheet.costpercapita_ab153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac153
  r = spreadsheet.costpercapita_ac153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad153
  r = spreadsheet.costpercapita_ad153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae153
  r = spreadsheet.costpercapita_ae153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af153
  r = spreadsheet.costpercapita_af153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag153
  r = spreadsheet.costpercapita_ag153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai153
  r = spreadsheet.costpercapita_ai153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj153
  r = spreadsheet.costpercapita_aj153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak153
  r = spreadsheet.costpercapita_ak153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al153
  r = spreadsheet.costpercapita_al153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am153
  r = spreadsheet.costpercapita_am153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an153
  r = spreadsheet.costpercapita_an153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao153
  r = spreadsheet.costpercapita_ao153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap153
  r = spreadsheet.costpercapita_ap153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq153
  r = spreadsheet.costpercapita_aq153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as153
  r = spreadsheet.costpercapita_as153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at153
  r = spreadsheet.costpercapita_at153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av153
  r = spreadsheet.costpercapita_av153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw153
  r = spreadsheet.costpercapita_aw153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay153
  r = spreadsheet.costpercapita_ay153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az153
  r = spreadsheet.costpercapita_az153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba153
  r = spreadsheet.costpercapita_ba153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb153
  r = spreadsheet.costpercapita_bb153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc153
  r = spreadsheet.costpercapita_bc153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd153
  r = spreadsheet.costpercapita_bd153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be153
  r = spreadsheet.costpercapita_be153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf153
  r = spreadsheet.costpercapita_bf153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg153
  r = spreadsheet.costpercapita_bg153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi153
  r = spreadsheet.costpercapita_bi153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj153
  r = spreadsheet.costpercapita_bj153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk153
  r = spreadsheet.costpercapita_bk153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl153
  r = spreadsheet.costpercapita_bl153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm153
  r = spreadsheet.costpercapita_bm153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn153
  r = spreadsheet.costpercapita_bn153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo153
  r = spreadsheet.costpercapita_bo153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp153
  r = spreadsheet.costpercapita_bp153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq153
  r = spreadsheet.costpercapita_bq153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs153
  r = spreadsheet.costpercapita_bs153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt153
  r = spreadsheet.costpercapita_bt153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu153
  r = spreadsheet.costpercapita_bu153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv153
  r = spreadsheet.costpercapita_bv153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw153
  r = spreadsheet.costpercapita_bw153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx153
  r = spreadsheet.costpercapita_bx153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by153
  r = spreadsheet.costpercapita_by153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz153
  r = spreadsheet.costpercapita_bz153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca153
  r = spreadsheet.costpercapita_ca153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc153
  r = spreadsheet.costpercapita_cc153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd153
  r = spreadsheet.costpercapita_cd153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf153
  r = spreadsheet.costpercapita_cf153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg153
  r = spreadsheet.costpercapita_cg153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch153
  r = spreadsheet.costpercapita_ch153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci153
  r = spreadsheet.costpercapita_ci153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj153
  r = spreadsheet.costpercapita_cj153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck153
  r = spreadsheet.costpercapita_ck153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl153
  r = spreadsheet.costpercapita_cl153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm153
  r = spreadsheet.costpercapita_cm153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn153
  r = spreadsheet.costpercapita_cn153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp153
  r = spreadsheet.costpercapita_cp153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq153
  r = spreadsheet.costpercapita_cq153
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr153
  r = spreadsheet.costpercapita_cr153
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a154
  r = spreadsheet.costpercapita_a154
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b154
  r = spreadsheet.costpercapita_b154
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c154
  r = spreadsheet.costpercapita_c154
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e154
  r = spreadsheet.costpercapita_e154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f154
  r = spreadsheet.costpercapita_f154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g154
  r = spreadsheet.costpercapita_g154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h154
  r = spreadsheet.costpercapita_h154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i154
  r = spreadsheet.costpercapita_i154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j154
  r = spreadsheet.costpercapita_j154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k154
  r = spreadsheet.costpercapita_k154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l154
  r = spreadsheet.costpercapita_l154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m154
  r = spreadsheet.costpercapita_m154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o154
  r = spreadsheet.costpercapita_o154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p154
  r = spreadsheet.costpercapita_p154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q154
  r = spreadsheet.costpercapita_q154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r154
  r = spreadsheet.costpercapita_r154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s154
  r = spreadsheet.costpercapita_s154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t154
  r = spreadsheet.costpercapita_t154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u154
  r = spreadsheet.costpercapita_u154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v154
  r = spreadsheet.costpercapita_v154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w154
  r = spreadsheet.costpercapita_w154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y154
  r = spreadsheet.costpercapita_y154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z154
  r = spreadsheet.costpercapita_z154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa154
  r = spreadsheet.costpercapita_aa154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab154
  r = spreadsheet.costpercapita_ab154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac154
  r = spreadsheet.costpercapita_ac154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad154
  r = spreadsheet.costpercapita_ad154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae154
  r = spreadsheet.costpercapita_ae154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af154
  r = spreadsheet.costpercapita_af154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag154
  r = spreadsheet.costpercapita_ag154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai154
  r = spreadsheet.costpercapita_ai154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj154
  r = spreadsheet.costpercapita_aj154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak154
  r = spreadsheet.costpercapita_ak154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al154
  r = spreadsheet.costpercapita_al154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am154
  r = spreadsheet.costpercapita_am154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an154
  r = spreadsheet.costpercapita_an154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao154
  r = spreadsheet.costpercapita_ao154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap154
  r = spreadsheet.costpercapita_ap154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq154
  r = spreadsheet.costpercapita_aq154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as154
  r = spreadsheet.costpercapita_as154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at154
  r = spreadsheet.costpercapita_at154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av154
  r = spreadsheet.costpercapita_av154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw154
  r = spreadsheet.costpercapita_aw154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay154
  r = spreadsheet.costpercapita_ay154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az154
  r = spreadsheet.costpercapita_az154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba154
  r = spreadsheet.costpercapita_ba154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb154
  r = spreadsheet.costpercapita_bb154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc154
  r = spreadsheet.costpercapita_bc154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd154
  r = spreadsheet.costpercapita_bd154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be154
  r = spreadsheet.costpercapita_be154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf154
  r = spreadsheet.costpercapita_bf154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg154
  r = spreadsheet.costpercapita_bg154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi154
  r = spreadsheet.costpercapita_bi154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj154
  r = spreadsheet.costpercapita_bj154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk154
  r = spreadsheet.costpercapita_bk154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl154
  r = spreadsheet.costpercapita_bl154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm154
  r = spreadsheet.costpercapita_bm154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn154
  r = spreadsheet.costpercapita_bn154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo154
  r = spreadsheet.costpercapita_bo154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp154
  r = spreadsheet.costpercapita_bp154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq154
  r = spreadsheet.costpercapita_bq154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs154
  r = spreadsheet.costpercapita_bs154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt154
  r = spreadsheet.costpercapita_bt154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu154
  r = spreadsheet.costpercapita_bu154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv154
  r = spreadsheet.costpercapita_bv154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw154
  r = spreadsheet.costpercapita_bw154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx154
  r = spreadsheet.costpercapita_bx154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by154
  r = spreadsheet.costpercapita_by154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz154
  r = spreadsheet.costpercapita_bz154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca154
  r = spreadsheet.costpercapita_ca154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc154
  r = spreadsheet.costpercapita_cc154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd154
  r = spreadsheet.costpercapita_cd154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf154
  r = spreadsheet.costpercapita_cf154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg154
  r = spreadsheet.costpercapita_cg154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch154
  r = spreadsheet.costpercapita_ch154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci154
  r = spreadsheet.costpercapita_ci154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj154
  r = spreadsheet.costpercapita_cj154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck154
  r = spreadsheet.costpercapita_ck154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl154
  r = spreadsheet.costpercapita_cl154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm154
  r = spreadsheet.costpercapita_cm154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn154
  r = spreadsheet.costpercapita_cn154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp154
  r = spreadsheet.costpercapita_cp154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq154
  r = spreadsheet.costpercapita_cq154
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr154
  r = spreadsheet.costpercapita_cr154
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a155
  r = spreadsheet.costpercapita_a155
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b155
  r = spreadsheet.costpercapita_b155
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c155
  r = spreadsheet.costpercapita_c155
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e155
  r = spreadsheet.costpercapita_e155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f155
  r = spreadsheet.costpercapita_f155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g155
  r = spreadsheet.costpercapita_g155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h155
  r = spreadsheet.costpercapita_h155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i155
  r = spreadsheet.costpercapita_i155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j155
  r = spreadsheet.costpercapita_j155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k155
  r = spreadsheet.costpercapita_k155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l155
  r = spreadsheet.costpercapita_l155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m155
  r = spreadsheet.costpercapita_m155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o155
  r = spreadsheet.costpercapita_o155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p155
  r = spreadsheet.costpercapita_p155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q155
  r = spreadsheet.costpercapita_q155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r155
  r = spreadsheet.costpercapita_r155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s155
  r = spreadsheet.costpercapita_s155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t155
  r = spreadsheet.costpercapita_t155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u155
  r = spreadsheet.costpercapita_u155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v155
  r = spreadsheet.costpercapita_v155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w155
  r = spreadsheet.costpercapita_w155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y155
  r = spreadsheet.costpercapita_y155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z155
  r = spreadsheet.costpercapita_z155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa155
  r = spreadsheet.costpercapita_aa155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab155
  r = spreadsheet.costpercapita_ab155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac155
  r = spreadsheet.costpercapita_ac155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad155
  r = spreadsheet.costpercapita_ad155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae155
  r = spreadsheet.costpercapita_ae155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af155
  r = spreadsheet.costpercapita_af155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag155
  r = spreadsheet.costpercapita_ag155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai155
  r = spreadsheet.costpercapita_ai155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj155
  r = spreadsheet.costpercapita_aj155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ak155
  r = spreadsheet.costpercapita_ak155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_al155
  r = spreadsheet.costpercapita_al155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_am155
  r = spreadsheet.costpercapita_am155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_an155
  r = spreadsheet.costpercapita_an155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ao155
  r = spreadsheet.costpercapita_ao155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ap155
  r = spreadsheet.costpercapita_ap155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aq155
  r = spreadsheet.costpercapita_aq155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_as155
  r = spreadsheet.costpercapita_as155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_at155
  r = spreadsheet.costpercapita_at155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_av155
  r = spreadsheet.costpercapita_av155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw155
  r = spreadsheet.costpercapita_aw155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay155
  r = spreadsheet.costpercapita_ay155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az155
  r = spreadsheet.costpercapita_az155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba155
  r = spreadsheet.costpercapita_ba155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb155
  r = spreadsheet.costpercapita_bb155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc155
  r = spreadsheet.costpercapita_bc155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd155
  r = spreadsheet.costpercapita_bd155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be155
  r = spreadsheet.costpercapita_be155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf155
  r = spreadsheet.costpercapita_bf155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg155
  r = spreadsheet.costpercapita_bg155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi155
  r = spreadsheet.costpercapita_bi155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj155
  r = spreadsheet.costpercapita_bj155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk155
  r = spreadsheet.costpercapita_bk155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl155
  r = spreadsheet.costpercapita_bl155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm155
  r = spreadsheet.costpercapita_bm155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn155
  r = spreadsheet.costpercapita_bn155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo155
  r = spreadsheet.costpercapita_bo155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp155
  r = spreadsheet.costpercapita_bp155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq155
  r = spreadsheet.costpercapita_bq155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs155
  r = spreadsheet.costpercapita_bs155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt155
  r = spreadsheet.costpercapita_bt155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bu155
  r = spreadsheet.costpercapita_bu155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bv155
  r = spreadsheet.costpercapita_bv155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bw155
  r = spreadsheet.costpercapita_bw155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bx155
  r = spreadsheet.costpercapita_bx155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_by155
  r = spreadsheet.costpercapita_by155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bz155
  r = spreadsheet.costpercapita_bz155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ca155
  r = spreadsheet.costpercapita_ca155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cc155
  r = spreadsheet.costpercapita_cc155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cd155
  r = spreadsheet.costpercapita_cd155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cf155
  r = spreadsheet.costpercapita_cf155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg155
  r = spreadsheet.costpercapita_cg155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch155
  r = spreadsheet.costpercapita_ch155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci155
  r = spreadsheet.costpercapita_ci155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj155
  r = spreadsheet.costpercapita_cj155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck155
  r = spreadsheet.costpercapita_ck155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl155
  r = spreadsheet.costpercapita_cl155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm155
  r = spreadsheet.costpercapita_cm155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn155
  r = spreadsheet.costpercapita_cn155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp155
  r = spreadsheet.costpercapita_cp155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq155
  r = spreadsheet.costpercapita_cq155
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr155
  r = spreadsheet.costpercapita_cr155
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a156
  r = spreadsheet.costpercapita_a156
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b156
  r = spreadsheet.costpercapita_b156
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel transfers",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c156
  r = spreadsheet.costpercapita_c156
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e156
  r = spreadsheet.costpercapita_e156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(883.1139249819576,r[:number],0.001)
end

def test_costpercapita_f156
  r = spreadsheet.costpercapita_f156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_g156
  r = spreadsheet.costpercapita_g156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2191.2998559363386,r[:number],0.001)
end

def test_costpercapita_h156
  r = spreadsheet.costpercapita_h156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2928.2323377206926,r[:number],0.001)
end

def test_costpercapita_i156
  r = spreadsheet.costpercapita_i156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3729.2552842450364,r[:number],0.001)
end

def test_costpercapita_j156
  r = spreadsheet.costpercapita_j156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4627.038835216952,r[:number],0.001)
end

def test_costpercapita_k156
  r = spreadsheet.costpercapita_k156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5829.641888409983,r[:number],0.001)
end

def test_costpercapita_l156
  r = spreadsheet.costpercapita_l156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7033.835548554308,r[:number],0.001)
end

def test_costpercapita_m156
  r = spreadsheet.costpercapita_m156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8268.797865989212,r[:number],0.001)
end

def test_costpercapita_o156
  r = spreadsheet.costpercapita_o156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5434576982361696,r[:number],0.001)
end

def test_costpercapita_p156
  r = spreadsheet.costpercapita_p156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.707110452489464,r[:number],0.001)
end

def test_costpercapita_q156
  r = spreadsheet.costpercapita_q156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.541885053372159,r[:number],0.001)
end

def test_costpercapita_r156
  r = spreadsheet.costpercapita_r156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.342575206241785,r[:number],0.001)
end

def test_costpercapita_s156
  r = spreadsheet.costpercapita_s156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.102342436706559,r[:number],0.001)
end

def test_costpercapita_t156
  r = spreadsheet.costpercapita_t156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.84651825974424,r[:number],0.001)
end

def test_costpercapita_u156
  r = spreadsheet.costpercapita_u156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.722615576722133,r[:number],0.001)
end

def test_costpercapita_v156
  r = spreadsheet.costpercapita_v156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.617326464755097,r[:number],0.001)
end

def test_costpercapita_w156
  r = spreadsheet.costpercapita_w156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.48447515565574,r[:number],0.001)
end

def test_costpercapita_y156
  r = spreadsheet.costpercapita_y156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z156
  r = spreadsheet.costpercapita_z156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa156
  r = spreadsheet.costpercapita_aa156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab156
  r = spreadsheet.costpercapita_ab156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac156
  r = spreadsheet.costpercapita_ac156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad156
  r = spreadsheet.costpercapita_ad156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae156
  r = spreadsheet.costpercapita_ae156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af156
  r = spreadsheet.costpercapita_af156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag156
  r = spreadsheet.costpercapita_ag156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai156
  r = spreadsheet.costpercapita_ai156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(884.6573826801937,r[:number],0.001)
end

def test_costpercapita_aj156
  r = spreadsheet.costpercapita_aj156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1607.4691628863636,r[:number],0.001)
end

def test_costpercapita_ak156
  r = spreadsheet.costpercapita_ak156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2197.841740989711,r[:number],0.001)
end

def test_costpercapita_al156
  r = spreadsheet.costpercapita_al156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2936.5749129269348,r[:number],0.001)
end

def test_costpercapita_am156
  r = spreadsheet.costpercapita_am156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3739.357626681743,r[:number],0.001)
end

def test_costpercapita_an156
  r = spreadsheet.costpercapita_an156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4638.885353476697,r[:number],0.001)
end

def test_costpercapita_ao156
  r = spreadsheet.costpercapita_ao156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5843.364503986705,r[:number],0.001)
end

def test_costpercapita_ap156
  r = spreadsheet.costpercapita_ap156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7049.452875019063,r[:number],0.001)
end

def test_costpercapita_aq156
  r = spreadsheet.costpercapita_aq156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8286.282341144868,r[:number],0.001)
end

def test_costpercapita_as156
  r = spreadsheet.costpercapita_as156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4131.542877754698,r[:number],0.001)
end

def test_costpercapita_at156
  r = spreadsheet.costpercapita_at156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75642.91681703414,r[:number],0.001)
end

def test_costpercapita_av156
  r = spreadsheet.costpercapita_av156
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw156
  r = spreadsheet.costpercapita_aw156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay156
  r = spreadsheet.costpercapita_ay156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.3189694176284,r[:number],0.001)
end

def test_costpercapita_az156
  r = spreadsheet.costpercapita_az156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1053.6059024261897,r[:number],0.001)
end

def test_costpercapita_ba156
  r = spreadsheet.costpercapita_ba156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1440.4923417635255,r[:number],0.001)
end

def test_costpercapita_bb156
  r = spreadsheet.costpercapita_bb156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1924.928825219394,r[:number],0.001)
end

def test_costpercapita_bc156
  r = spreadsheet.costpercapita_bc156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2451.4963859844293,r[:number],0.001)
end

def test_costpercapita_bd156
  r = spreadsheet.costpercapita_bd156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3041.6713573526017,r[:number],0.001)
end

def test_costpercapita_be156
  r = spreadsheet.costpercapita_be156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3832.2251848504666,r[:number],0.001)
end

def test_costpercapita_bf156
  r = spreadsheet.costpercapita_bf156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4623.824627865482,r[:number],0.001)
end

def test_costpercapita_bg156
  r = spreadsheet.costpercapita_bg156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5435.650428799227,r[:number],0.001)
end

def test_costpercapita_bi156
  r = spreadsheet.costpercapita_bi156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.3189694176284,r[:number],0.001)
end

def test_costpercapita_bj156
  r = spreadsheet.costpercapita_bj156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1390.4390297058194,r[:number],0.001)
end

def test_costpercapita_bk156
  r = spreadsheet.costpercapita_bk156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2785.4109693271544,r[:number],0.001)
end

def test_costpercapita_bl156
  r = spreadsheet.costpercapita_bl156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4308.376039346547,r[:number],0.001)
end

def test_costpercapita_bm156
  r = spreadsheet.costpercapita_bm156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5681.589634376017,r[:number],0.001)
end

def test_costpercapita_bn156
  r = spreadsheet.costpercapita_bn156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7263.656256051693,r[:number],0.001)
end

def test_costpercapita_bo156
  r = spreadsheet.costpercapita_bo156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9151.728336439302,r[:number],0.001)
end

def test_costpercapita_bp156
  r = spreadsheet.costpercapita_bp156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11297.027315827234,r[:number],0.001)
end

def test_costpercapita_bq156
  r = spreadsheet.costpercapita_bq156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13658.87733213499,r[:number],0.001)
end

def test_costpercapita_bs156
  r = spreadsheet.costpercapita_bs156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.8624271158646,r[:number],0.001)
end

def test_costpercapita_bt156
  r = spreadsheet.costpercapita_bt156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.146140158309,r[:number],0.001)
end

def test_costpercapita_bu156
  r = spreadsheet.costpercapita_bu156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2791.952854380527,r[:number],0.001)
end

def test_costpercapita_bv156
  r = spreadsheet.costpercapita_bv156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4316.718614552789,r[:number],0.001)
end

def test_costpercapita_bw156
  r = spreadsheet.costpercapita_bw156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5691.691976812723,r[:number],0.001)
end

def test_costpercapita_bx156
  r = spreadsheet.costpercapita_bx156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7275.502774311437,r[:number],0.001)
end

def test_costpercapita_by156
  r = spreadsheet.costpercapita_by156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9165.450952016025,r[:number],0.001)
end

def test_costpercapita_bz156
  r = spreadsheet.costpercapita_bz156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11312.644642291989,r[:number],0.001)
end

def test_costpercapita_ca156
  r = spreadsheet.costpercapita_ca156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13676.361807290648,r[:number],0.001)
end

def test_costpercapita_cc156
  r = spreadsheet.costpercapita_cc156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6219.4813543255905,r[:number],0.001)
end

def test_costpercapita_cd156
  r = spreadsheet.costpercapita_cd156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110537.01663235582,r[:number],0.001)
end

def test_costpercapita_cf156
  r = spreadsheet.costpercapita_cf156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-534.7949555643291,r[:number],0.001)
end

def test_costpercapita_cg156
  r = spreadsheet.costpercapita_cg156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-212.3230227280546,r[:number],0.001)
end

def test_costpercapita_ch156
  r = spreadsheet.costpercapita_ch156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(594.1111133908157,r[:number],0.001)
end

def test_costpercapita_ci156
  r = spreadsheet.costpercapita_ci156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1380.1437016258546,r[:number],0.001)
end

def test_costpercapita_cj156
  r = spreadsheet.costpercapita_cj156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.3343501309798,r[:number],0.001)
end

def test_costpercapita_ck156
  r = spreadsheet.costpercapita_ck156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2636.6174208347406,r[:number],0.001)
end

def test_costpercapita_cl156
  r = spreadsheet.costpercapita_cl156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3322.08644802932,r[:number],0.001)
end

def test_costpercapita_cm156
  r = spreadsheet.costpercapita_cm156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4263.191767272927,r[:number],0.001)
end

def test_costpercapita_cn156
  r = spreadsheet.costpercapita_cn156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5390.079466145779,r[:number],0.001)
end

def test_costpercapita_cp156
  r = spreadsheet.costpercapita_cp156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2087.938476570893,r[:number],0.001)
end

def test_costpercapita_cq156
  r = spreadsheet.costpercapita_cq156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34894.0998153217,r[:number],0.001)
end

def test_costpercapita_cr156
  r = spreadsheet.costpercapita_cr156
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a157
  r = spreadsheet.costpercapita_a157
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b157
  r = spreadsheet.costpercapita_b157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c157
  r = spreadsheet.costpercapita_c157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e157
  r = spreadsheet.costpercapita_e157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f157
  r = spreadsheet.costpercapita_f157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g157
  r = spreadsheet.costpercapita_g157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h157
  r = spreadsheet.costpercapita_h157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i157
  r = spreadsheet.costpercapita_i157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j157
  r = spreadsheet.costpercapita_j157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k157
  r = spreadsheet.costpercapita_k157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l157
  r = spreadsheet.costpercapita_l157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m157
  r = spreadsheet.costpercapita_m157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o157
  r = spreadsheet.costpercapita_o157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p157
  r = spreadsheet.costpercapita_p157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q157
  r = spreadsheet.costpercapita_q157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r157
  r = spreadsheet.costpercapita_r157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s157
  r = spreadsheet.costpercapita_s157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t157
  r = spreadsheet.costpercapita_t157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u157
  r = spreadsheet.costpercapita_u157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v157
  r = spreadsheet.costpercapita_v157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w157
  r = spreadsheet.costpercapita_w157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y157
  r = spreadsheet.costpercapita_y157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4657.586953933174,r[:number],0.001)
end

def test_costpercapita_z157
  r = spreadsheet.costpercapita_z157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9468.756091040203,r[:number],0.001)
end

def test_costpercapita_aa157
  r = spreadsheet.costpercapita_aa157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14655.242203451475,r[:number],0.001)
end

def test_costpercapita_ab157
  r = spreadsheet.costpercapita_ab157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19789.584560061456,r[:number],0.001)
end

def test_costpercapita_ac157
  r = spreadsheet.costpercapita_ac157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24351.96961147456,r[:number],0.001)
end

def test_costpercapita_ad157
  r = spreadsheet.costpercapita_ad157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26047.484796607012,r[:number],0.001)
end

def test_costpercapita_ae157
  r = spreadsheet.costpercapita_ae157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28062.132013710896,r[:number],0.001)
end

def test_costpercapita_af157
  r = spreadsheet.costpercapita_af157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29955.84494366303,r[:number],0.001)
end

def test_costpercapita_ag157
  r = spreadsheet.costpercapita_ag157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31380.34500149306,r[:number],0.001)
end

def test_costpercapita_ai157
  r = spreadsheet.costpercapita_ai157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4657.586953933174,r[:number],0.001)
end

def test_costpercapita_aj157
  r = spreadsheet.costpercapita_aj157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9468.756091040203,r[:number],0.001)
end

def test_costpercapita_ak157
  r = spreadsheet.costpercapita_ak157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14655.242203451475,r[:number],0.001)
end

def test_costpercapita_al157
  r = spreadsheet.costpercapita_al157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19789.584560061456,r[:number],0.001)
end

def test_costpercapita_am157
  r = spreadsheet.costpercapita_am157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24351.96961147456,r[:number],0.001)
end

def test_costpercapita_an157
  r = spreadsheet.costpercapita_an157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26047.484796607012,r[:number],0.001)
end

def test_costpercapita_ao157
  r = spreadsheet.costpercapita_ao157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28062.132013710896,r[:number],0.001)
end

def test_costpercapita_ap157
  r = spreadsheet.costpercapita_ap157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29955.84494366303,r[:number],0.001)
end

def test_costpercapita_aq157
  r = spreadsheet.costpercapita_aq157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31380.34500149306,r[:number],0.001)
end

def test_costpercapita_as157
  r = spreadsheet.costpercapita_as157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20929.882908381653,r[:number],0.001)
end

def test_costpercapita_at157
  r = spreadsheet.costpercapita_at157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(409446.18069902575,r[:number],0.001)
end

def test_costpercapita_av157
  r = spreadsheet.costpercapita_av157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw157
  r = spreadsheet.costpercapita_aw157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay157
  r = spreadsheet.costpercapita_ay157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az157
  r = spreadsheet.costpercapita_az157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba157
  r = spreadsheet.costpercapita_ba157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb157
  r = spreadsheet.costpercapita_bb157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc157
  r = spreadsheet.costpercapita_bc157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd157
  r = spreadsheet.costpercapita_bd157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be157
  r = spreadsheet.costpercapita_be157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf157
  r = spreadsheet.costpercapita_bf157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg157
  r = spreadsheet.costpercapita_bg157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi157
  r = spreadsheet.costpercapita_bi157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj157
  r = spreadsheet.costpercapita_bj157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk157
  r = spreadsheet.costpercapita_bk157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl157
  r = spreadsheet.costpercapita_bl157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm157
  r = spreadsheet.costpercapita_bm157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn157
  r = spreadsheet.costpercapita_bn157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo157
  r = spreadsheet.costpercapita_bo157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp157
  r = spreadsheet.costpercapita_bp157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq157
  r = spreadsheet.costpercapita_bq157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs157
  r = spreadsheet.costpercapita_bs157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4657.586953933174,r[:number],0.001)
end

def test_costpercapita_bt157
  r = spreadsheet.costpercapita_bt157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9468.756091040203,r[:number],0.001)
end

def test_costpercapita_bu157
  r = spreadsheet.costpercapita_bu157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14655.242203451475,r[:number],0.001)
end

def test_costpercapita_bv157
  r = spreadsheet.costpercapita_bv157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19789.584560061456,r[:number],0.001)
end

def test_costpercapita_bw157
  r = spreadsheet.costpercapita_bw157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24351.96961147456,r[:number],0.001)
end

def test_costpercapita_bx157
  r = spreadsheet.costpercapita_bx157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26047.484796607012,r[:number],0.001)
end

def test_costpercapita_by157
  r = spreadsheet.costpercapita_by157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28062.132013710896,r[:number],0.001)
end

def test_costpercapita_bz157
  r = spreadsheet.costpercapita_bz157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29955.84494366303,r[:number],0.001)
end

def test_costpercapita_ca157
  r = spreadsheet.costpercapita_ca157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31380.34500149306,r[:number],0.001)
end

def test_costpercapita_cc157
  r = spreadsheet.costpercapita_cc157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20929.882908381653,r[:number],0.001)
end

def test_costpercapita_cd157
  r = spreadsheet.costpercapita_cd157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(409446.18069902575,r[:number],0.001)
end

def test_costpercapita_cf157
  r = spreadsheet.costpercapita_cf157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg157
  r = spreadsheet.costpercapita_cg157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch157
  r = spreadsheet.costpercapita_ch157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci157
  r = spreadsheet.costpercapita_ci157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj157
  r = spreadsheet.costpercapita_cj157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck157
  r = spreadsheet.costpercapita_ck157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl157
  r = spreadsheet.costpercapita_cl157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm157
  r = spreadsheet.costpercapita_cm157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn157
  r = spreadsheet.costpercapita_cn157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp157
  r = spreadsheet.costpercapita_cp157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq157
  r = spreadsheet.costpercapita_cq157
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr157
  r = spreadsheet.costpercapita_cr157
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a158
  r = spreadsheet.costpercapita_a158
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b158
  r = spreadsheet.costpercapita_b158
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c158
  r = spreadsheet.costpercapita_c158
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e158
  r = spreadsheet.costpercapita_e158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f158
  r = spreadsheet.costpercapita_f158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g158
  r = spreadsheet.costpercapita_g158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h158
  r = spreadsheet.costpercapita_h158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i158
  r = spreadsheet.costpercapita_i158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j158
  r = spreadsheet.costpercapita_j158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k158
  r = spreadsheet.costpercapita_k158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l158
  r = spreadsheet.costpercapita_l158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m158
  r = spreadsheet.costpercapita_m158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o158
  r = spreadsheet.costpercapita_o158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p158
  r = spreadsheet.costpercapita_p158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q158
  r = spreadsheet.costpercapita_q158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r158
  r = spreadsheet.costpercapita_r158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s158
  r = spreadsheet.costpercapita_s158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t158
  r = spreadsheet.costpercapita_t158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u158
  r = spreadsheet.costpercapita_u158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v158
  r = spreadsheet.costpercapita_v158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w158
  r = spreadsheet.costpercapita_w158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y158
  r = spreadsheet.costpercapita_y158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_z158
  r = spreadsheet.costpercapita_z158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37857.74671108611,r[:number],0.001)
end

def test_costpercapita_aa158
  r = spreadsheet.costpercapita_aa158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59008.15784929177,r[:number],0.001)
end

def test_costpercapita_ab158
  r = spreadsheet.costpercapita_ab158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83552.05051967716,r[:number],0.001)
end

def test_costpercapita_ac158
  r = spreadsheet.costpercapita_ac158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111803.2419389323,r[:number],0.001)
end

def test_costpercapita_ad158
  r = spreadsheet.costpercapita_ad158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126628.7652185431,r[:number],0.001)
end

def test_costpercapita_ae158
  r = spreadsheet.costpercapita_ae158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140771.33040754302,r[:number],0.001)
end

def test_costpercapita_af158
  r = spreadsheet.costpercapita_af158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154804.59743298238,r[:number],0.001)
end

def test_costpercapita_ag158
  r = spreadsheet.costpercapita_ag158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168596.41143971632,r[:number],0.001)
end

def test_costpercapita_ai158
  r = spreadsheet.costpercapita_ai158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_aj158
  r = spreadsheet.costpercapita_aj158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37857.74671108611,r[:number],0.001)
end

def test_costpercapita_ak158
  r = spreadsheet.costpercapita_ak158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59008.15784929177,r[:number],0.001)
end

def test_costpercapita_al158
  r = spreadsheet.costpercapita_al158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83552.05051967716,r[:number],0.001)
end

def test_costpercapita_am158
  r = spreadsheet.costpercapita_am158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111803.2419389323,r[:number],0.001)
end

def test_costpercapita_an158
  r = spreadsheet.costpercapita_an158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126628.7652185431,r[:number],0.001)
end

def test_costpercapita_ao158
  r = spreadsheet.costpercapita_ao158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140771.33040754302,r[:number],0.001)
end

def test_costpercapita_ap158
  r = spreadsheet.costpercapita_ap158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154804.59743298238,r[:number],0.001)
end

def test_costpercapita_aq158
  r = spreadsheet.costpercapita_aq158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168596.41143971632,r[:number],0.001)
end

def test_costpercapita_as158
  r = spreadsheet.costpercapita_as158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100432.06368879572,r[:number],0.001)
end

def test_costpercapita_at158
  r = spreadsheet.costpercapita_at158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1899741.7986862087,r[:number],0.001)
end

def test_costpercapita_av158
  r = spreadsheet.costpercapita_av158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw158
  r = spreadsheet.costpercapita_aw158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay158
  r = spreadsheet.costpercapita_ay158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az158
  r = spreadsheet.costpercapita_az158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba158
  r = spreadsheet.costpercapita_ba158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb158
  r = spreadsheet.costpercapita_bb158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc158
  r = spreadsheet.costpercapita_bc158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd158
  r = spreadsheet.costpercapita_bd158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be158
  r = spreadsheet.costpercapita_be158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf158
  r = spreadsheet.costpercapita_bf158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg158
  r = spreadsheet.costpercapita_bg158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi158
  r = spreadsheet.costpercapita_bi158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj158
  r = spreadsheet.costpercapita_bj158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk158
  r = spreadsheet.costpercapita_bk158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl158
  r = spreadsheet.costpercapita_bl158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm158
  r = spreadsheet.costpercapita_bm158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn158
  r = spreadsheet.costpercapita_bn158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo158
  r = spreadsheet.costpercapita_bo158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp158
  r = spreadsheet.costpercapita_bp158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq158
  r = spreadsheet.costpercapita_bq158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs158
  r = spreadsheet.costpercapita_bs158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20866.27168138926,r[:number],0.001)
end

def test_costpercapita_bt158
  r = spreadsheet.costpercapita_bt158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37857.74671108611,r[:number],0.001)
end

def test_costpercapita_bu158
  r = spreadsheet.costpercapita_bu158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59008.15784929177,r[:number],0.001)
end

def test_costpercapita_bv158
  r = spreadsheet.costpercapita_bv158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83552.05051967716,r[:number],0.001)
end

def test_costpercapita_bw158
  r = spreadsheet.costpercapita_bw158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111803.2419389323,r[:number],0.001)
end

def test_costpercapita_bx158
  r = spreadsheet.costpercapita_bx158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126628.7652185431,r[:number],0.001)
end

def test_costpercapita_by158
  r = spreadsheet.costpercapita_by158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140771.33040754302,r[:number],0.001)
end

def test_costpercapita_bz158
  r = spreadsheet.costpercapita_bz158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154804.59743298238,r[:number],0.001)
end

def test_costpercapita_ca158
  r = spreadsheet.costpercapita_ca158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168596.41143971632,r[:number],0.001)
end

def test_costpercapita_cc158
  r = spreadsheet.costpercapita_cc158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100432.06368879572,r[:number],0.001)
end

def test_costpercapita_cd158
  r = spreadsheet.costpercapita_cd158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1899741.7986862087,r[:number],0.001)
end

def test_costpercapita_cf158
  r = spreadsheet.costpercapita_cf158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg158
  r = spreadsheet.costpercapita_cg158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch158
  r = spreadsheet.costpercapita_ch158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci158
  r = spreadsheet.costpercapita_ci158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj158
  r = spreadsheet.costpercapita_cj158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck158
  r = spreadsheet.costpercapita_ck158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl158
  r = spreadsheet.costpercapita_cl158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm158
  r = spreadsheet.costpercapita_cm158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn158
  r = spreadsheet.costpercapita_cn158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp158
  r = spreadsheet.costpercapita_cp158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq158
  r = spreadsheet.costpercapita_cq158
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr158
  r = spreadsheet.costpercapita_cr158
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a159
  r = spreadsheet.costpercapita_a159
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b159
  r = spreadsheet.costpercapita_b159
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c159
  r = spreadsheet.costpercapita_c159
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e159
  r = spreadsheet.costpercapita_e159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f159
  r = spreadsheet.costpercapita_f159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_g159
  r = spreadsheet.costpercapita_g159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_h159
  r = spreadsheet.costpercapita_h159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_i159
  r = spreadsheet.costpercapita_i159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_j159
  r = spreadsheet.costpercapita_j159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_k159
  r = spreadsheet.costpercapita_k159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_l159
  r = spreadsheet.costpercapita_l159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_m159
  r = spreadsheet.costpercapita_m159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_o159
  r = spreadsheet.costpercapita_o159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p159
  r = spreadsheet.costpercapita_p159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_q159
  r = spreadsheet.costpercapita_q159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_r159
  r = spreadsheet.costpercapita_r159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_s159
  r = spreadsheet.costpercapita_s159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_t159
  r = spreadsheet.costpercapita_t159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_u159
  r = spreadsheet.costpercapita_u159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_v159
  r = spreadsheet.costpercapita_v159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_w159
  r = spreadsheet.costpercapita_w159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_y159
  r = spreadsheet.costpercapita_y159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_z159
  r = spreadsheet.costpercapita_z159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12873.718641116191,r[:number],0.001)
end

def test_costpercapita_aa159
  r = spreadsheet.costpercapita_aa159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22328.53560422198,r[:number],0.001)
end

def test_costpercapita_ab159
  r = spreadsheet.costpercapita_ab159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34097.52782927464,r[:number],0.001)
end

def test_costpercapita_ac159
  r = spreadsheet.costpercapita_ac159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48077.18769034292,r[:number],0.001)
end

def test_costpercapita_ad159
  r = spreadsheet.costpercapita_ad159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56422.654383981404,r[:number],0.001)
end

def test_costpercapita_ae159
  r = spreadsheet.costpercapita_ae159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65390.769165870515,r[:number],0.001)
end

def test_costpercapita_af159
  r = spreadsheet.costpercapita_af159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74442.8061195,r[:number],0.001)
end

def test_costpercapita_ag159
  r = spreadsheet.costpercapita_ag159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83359.73631941588,r[:number],0.001)
end

def test_costpercapita_ai159
  r = spreadsheet.costpercapita_ai159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_aj159
  r = spreadsheet.costpercapita_aj159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12873.718641116191,r[:number],0.001)
end

def test_costpercapita_ak159
  r = spreadsheet.costpercapita_ak159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22328.53560422198,r[:number],0.001)
end

def test_costpercapita_al159
  r = spreadsheet.costpercapita_al159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34097.52782927464,r[:number],0.001)
end

def test_costpercapita_am159
  r = spreadsheet.costpercapita_am159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48077.18769034292,r[:number],0.001)
end

def test_costpercapita_an159
  r = spreadsheet.costpercapita_an159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56422.654383981404,r[:number],0.001)
end

def test_costpercapita_ao159
  r = spreadsheet.costpercapita_ao159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65390.769165870515,r[:number],0.001)
end

def test_costpercapita_ap159
  r = spreadsheet.costpercapita_ap159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74442.8061195,r[:number],0.001)
end

def test_costpercapita_aq159
  r = spreadsheet.costpercapita_aq159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83359.73631941588,r[:number],0.001)
end

def test_costpercapita_as159
  r = spreadsheet.costpercapita_as159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44728.65218942443,r[:number],0.001)
end

def test_costpercapita_at159
  r = spreadsheet.costpercapita_at159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(822228.7497031504,r[:number],0.001)
end

def test_costpercapita_av159
  r = spreadsheet.costpercapita_av159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw159
  r = spreadsheet.costpercapita_aw159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay159
  r = spreadsheet.costpercapita_ay159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az159
  r = spreadsheet.costpercapita_az159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ba159
  r = spreadsheet.costpercapita_ba159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bb159
  r = spreadsheet.costpercapita_bb159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bc159
  r = spreadsheet.costpercapita_bc159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bd159
  r = spreadsheet.costpercapita_bd159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_be159
  r = spreadsheet.costpercapita_be159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bf159
  r = spreadsheet.costpercapita_bf159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bg159
  r = spreadsheet.costpercapita_bg159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bi159
  r = spreadsheet.costpercapita_bi159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj159
  r = spreadsheet.costpercapita_bj159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bk159
  r = spreadsheet.costpercapita_bk159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bl159
  r = spreadsheet.costpercapita_bl159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bm159
  r = spreadsheet.costpercapita_bm159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bn159
  r = spreadsheet.costpercapita_bn159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bo159
  r = spreadsheet.costpercapita_bo159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bp159
  r = spreadsheet.costpercapita_bp159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bq159
  r = spreadsheet.costpercapita_bq159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bs159
  r = spreadsheet.costpercapita_bs159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5564.933951096272,r[:number],0.001)
end

def test_costpercapita_bt159
  r = spreadsheet.costpercapita_bt159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12873.718641116191,r[:number],0.001)
end

def test_costpercapita_bu159
  r = spreadsheet.costpercapita_bu159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22328.53560422198,r[:number],0.001)
end

def test_costpercapita_bv159
  r = spreadsheet.costpercapita_bv159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34097.52782927464,r[:number],0.001)
end

def test_costpercapita_bw159
  r = spreadsheet.costpercapita_bw159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48077.18769034292,r[:number],0.001)
end

def test_costpercapita_bx159
  r = spreadsheet.costpercapita_bx159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56422.654383981404,r[:number],0.001)
end

def test_costpercapita_by159
  r = spreadsheet.costpercapita_by159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65390.769165870515,r[:number],0.001)
end

def test_costpercapita_bz159
  r = spreadsheet.costpercapita_bz159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74442.8061195,r[:number],0.001)
end

def test_costpercapita_ca159
  r = spreadsheet.costpercapita_ca159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83359.73631941588,r[:number],0.001)
end

def test_costpercapita_cc159
  r = spreadsheet.costpercapita_cc159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44728.65218942443,r[:number],0.001)
end

def test_costpercapita_cd159
  r = spreadsheet.costpercapita_cd159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(822228.7497031504,r[:number],0.001)
end

def test_costpercapita_cf159
  r = spreadsheet.costpercapita_cf159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg159
  r = spreadsheet.costpercapita_cg159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch159
  r = spreadsheet.costpercapita_ch159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci159
  r = spreadsheet.costpercapita_ci159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj159
  r = spreadsheet.costpercapita_cj159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck159
  r = spreadsheet.costpercapita_ck159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl159
  r = spreadsheet.costpercapita_cl159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm159
  r = spreadsheet.costpercapita_cm159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn159
  r = spreadsheet.costpercapita_cn159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp159
  r = spreadsheet.costpercapita_cp159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq159
  r = spreadsheet.costpercapita_cq159
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr159
  r = spreadsheet.costpercapita_cr159
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a160
  r = spreadsheet.costpercapita_a160
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b160
  r = spreadsheet.costpercapita_b160
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c160
  r = spreadsheet.costpercapita_c160
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e160
  r = spreadsheet.costpercapita_e160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.39499043774504,r[:number],0.001)
end

def test_costpercapita_f160
  r = spreadsheet.costpercapita_f160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.1676021046599,r[:number],0.001)
end

def test_costpercapita_g160
  r = spreadsheet.costpercapita_g160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.81485537264183,r[:number],0.001)
end

def test_costpercapita_h160
  r = spreadsheet.costpercapita_h160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.1248668593394,r[:number],0.001)
end

def test_costpercapita_i160
  r = spreadsheet.costpercapita_i160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(287.7710112303133,r[:number],0.001)
end

def test_costpercapita_j160
  r = spreadsheet.costpercapita_j160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.6431247966002,r[:number],0.001)
end

def test_costpercapita_k160
  r = spreadsheet.costpercapita_k160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(248.7775543109364,r[:number],0.001)
end

def test_costpercapita_l160
  r = spreadsheet.costpercapita_l160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.280958608795,r[:number],0.001)
end

def test_costpercapita_m160
  r = spreadsheet.costpercapita_m160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.01497770856784,r[:number],0.001)
end

def test_costpercapita_o160
  r = spreadsheet.costpercapita_o160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72669559567897,r[:number],0.001)
end

def test_costpercapita_p160
  r = spreadsheet.costpercapita_p160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.39840440276025,r[:number],0.001)
end

def test_costpercapita_q160
  r = spreadsheet.costpercapita_q160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.83548514211435,r[:number],0.001)
end

def test_costpercapita_r160
  r = spreadsheet.costpercapita_r160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.83335804202426,r[:number],0.001)
end

def test_costpercapita_s160
  r = spreadsheet.costpercapita_s160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.15163198871142,r[:number],0.001)
end

def test_costpercapita_t160
  r = spreadsheet.costpercapita_t160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.25960815274595,r[:number],0.001)
end

def test_costpercapita_u160
  r = spreadsheet.costpercapita_u160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.36830166006392,r[:number],0.001)
end

def test_costpercapita_v160
  r = spreadsheet.costpercapita_v160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.69455649772226,r[:number],0.001)
end

def test_costpercapita_w160
  r = spreadsheet.costpercapita_w160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.470467921672125,r[:number],0.001)
end

def test_costpercapita_y160
  r = spreadsheet.costpercapita_y160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z160
  r = spreadsheet.costpercapita_z160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa160
  r = spreadsheet.costpercapita_aa160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab160
  r = spreadsheet.costpercapita_ab160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac160
  r = spreadsheet.costpercapita_ac160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad160
  r = spreadsheet.costpercapita_ad160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae160
  r = spreadsheet.costpercapita_ae160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af160
  r = spreadsheet.costpercapita_af160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag160
  r = spreadsheet.costpercapita_ag160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai160
  r = spreadsheet.costpercapita_ai160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(456.121686033424,r[:number],0.001)
end

def test_costpercapita_aj160
  r = spreadsheet.costpercapita_aj160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.5660065074201,r[:number],0.001)
end

def test_costpercapita_ak160
  r = spreadsheet.costpercapita_ak160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(562.6503405147562,r[:number],0.001)
end

def test_costpercapita_al160
  r = spreadsheet.costpercapita_al160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.9582249013637,r[:number],0.001)
end

def test_costpercapita_am160
  r = spreadsheet.costpercapita_am160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(370.9226432190247,r[:number],0.001)
end

def test_costpercapita_an160
  r = spreadsheet.costpercapita_an160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.9027329493461,r[:number],0.001)
end

def test_costpercapita_ao160
  r = spreadsheet.costpercapita_ao160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313.14585597100034,r[:number],0.001)
end

def test_costpercapita_ap160
  r = spreadsheet.costpercapita_ap160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.97551510651726,r[:number],0.001)
end

def test_costpercapita_aq160
  r = spreadsheet.costpercapita_aq160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.48544563023995,r[:number],0.001)
end

def test_costpercapita_as160
  r = spreadsheet.costpercapita_as160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(399.4142723147881,r[:number],0.001)
end

def test_costpercapita_at160
  r = spreadsheet.costpercapita_at160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9379.302695309087,r[:number],0.001)
end

def test_costpercapita_av160
  r = spreadsheet.costpercapita_av160
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw160
  r = spreadsheet.costpercapita_aw160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay160
  r = spreadsheet.costpercapita_ay160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.10758891088724,r[:number],0.001)
end

def test_costpercapita_az160
  r = spreadsheet.costpercapita_az160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.92201392433805,r[:number],0.001)
end

def test_costpercapita_ba160
  r = spreadsheet.costpercapita_ba160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(316.7300939814212,r[:number],0.001)
end

def test_costpercapita_bb160
  r = spreadsheet.costpercapita_bb160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.1133174028398,r[:number],0.001)
end

def test_costpercapita_bc160
  r = spreadsheet.costpercapita_bc160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.17170862573852,r[:number],0.001)
end

def test_costpercapita_bd160
  r = spreadsheet.costpercapita_bd160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.91236902804724,r[:number],0.001)
end

def test_costpercapita_be160
  r = spreadsheet.costpercapita_be160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.5386233503109,r[:number],0.001)
end

def test_costpercapita_bf160
  r = spreadsheet.costpercapita_bf160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.23215917897733,r[:number],0.001)
end

def test_costpercapita_bg160
  r = spreadsheet.costpercapita_bg160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.55939185172299,r[:number],0.001)
end

def test_costpercapita_bi160
  r = spreadsheet.costpercapita_bi160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.10758891088724,r[:number],0.001)
end

def test_costpercapita_bj160
  r = spreadsheet.costpercapita_bj160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.7830190725222,r[:number],0.001)
end

def test_costpercapita_bk160
  r = spreadsheet.costpercapita_bk160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(820.4636402251915,r[:number],0.001)
end

def test_costpercapita_bl160
  r = spreadsheet.costpercapita_bl160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(907.9567764691343,r[:number],0.001)
end

def test_costpercapita_bm160
  r = spreadsheet.costpercapita_bm160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(737.7984963867334,r[:number],0.001)
end

def test_costpercapita_bn160
  r = spreadsheet.costpercapita_bn160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(606.8259295870671,r[:number],0.001)
end

def test_costpercapita_bo160
  r = spreadsheet.costpercapita_bo160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(518.4330848451013,r[:number],0.001)
end

def test_costpercapita_bp160
  r = spreadsheet.costpercapita_bp160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(469.15337171813746,r[:number],0.001)
end

def test_costpercapita_bq160
  r = spreadsheet.costpercapita_bq160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(395.4972310475168,r[:number],0.001)
end

def test_costpercapita_bs160
  r = spreadsheet.costpercapita_bs160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.8342845065662,r[:number],0.001)
end

def test_costpercapita_bt160
  r = spreadsheet.costpercapita_bt160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(591.1814234752824,r[:number],0.001)
end

def test_costpercapita_bu160
  r = spreadsheet.costpercapita_bu160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.2991253673059,r[:number],0.001)
end

def test_costpercapita_bv160
  r = spreadsheet.costpercapita_bv160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(992.7901345111585,r[:number],0.001)
end

def test_costpercapita_bw160
  r = spreadsheet.costpercapita_bw160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(820.9501283754448,r[:number],0.001)
end

def test_costpercapita_bx160
  r = spreadsheet.costpercapita_bx160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(683.085537739813,r[:number],0.001)
end

def test_costpercapita_by160
  r = spreadsheet.costpercapita_by160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.8013865051653,r[:number],0.001)
end

def test_costpercapita_bz160
  r = spreadsheet.costpercapita_bz160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(516.8479282158597,r[:number],0.001)
end

def test_costpercapita_ca160
  r = spreadsheet.costpercapita_ca160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(421.9676989691889,r[:number],0.001)
end

def test_costpercapita_cc160
  r = spreadsheet.costpercapita_cc160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(635.8619608517539,r[:number],0.001)
end

def test_costpercapita_cd160
  r = spreadsheet.costpercapita_cd160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14758.176597658314,r[:number],0.001)
end

def test_costpercapita_cf160
  r = spreadsheet.costpercapita_cf160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-244.2874015268578,r[:number],0.001)
end

def test_costpercapita_cg160
  r = spreadsheet.costpercapita_cg160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-37.38458303213771,r[:number],0.001)
end

def test_costpercapita_ch160
  r = spreadsheet.costpercapita_ch160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(338.6487848525496,r[:number],0.001)
end

def test_costpercapita_ci160
  r = spreadsheet.costpercapita_ci160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(516.8319096097948,r[:number],0.001)
end

def test_costpercapita_cj160
  r = spreadsheet.costpercapita_cj160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(450.02748515642,r[:number],0.001)
end

def test_costpercapita_ck160
  r = spreadsheet.costpercapita_ck160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.1828047904669,r[:number],0.001)
end

def test_costpercapita_cl160
  r = spreadsheet.costpercapita_cl160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.655530534165,r[:number],0.001)
end

def test_costpercapita_cm160
  r = spreadsheet.costpercapita_cm160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(258.87241310934246,r[:number],0.001)
end

def test_costpercapita_cn160
  r = spreadsheet.costpercapita_cn160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.482253338949,r[:number],0.001)
end

def test_costpercapita_cp160
  r = spreadsheet.costpercapita_cp160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236.4476885369658,r[:number],0.001)
end

def test_costpercapita_cq160
  r = spreadsheet.costpercapita_cq160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5378.873902349228,r[:number],0.001)
end

def test_costpercapita_cr160
  r = spreadsheet.costpercapita_cr160
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a161
  r = spreadsheet.costpercapita_a161
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b161
  r = spreadsheet.costpercapita_b161
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage of captured CO2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c161
  r = spreadsheet.costpercapita_c161
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e161
  r = spreadsheet.costpercapita_e161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f161
  r = spreadsheet.costpercapita_f161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.510941756577549,r[:number],0.001)
end

def test_costpercapita_g161
  r = spreadsheet.costpercapita_g161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.721390312179908,r[:number],0.001)
end

def test_costpercapita_h161
  r = spreadsheet.costpercapita_h161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.427672328465383,r[:number],0.001)
end

def test_costpercapita_i161
  r = spreadsheet.costpercapita_i161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.170709128499708,r[:number],0.001)
end

def test_costpercapita_j161
  r = spreadsheet.costpercapita_j161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.947100165718051,r[:number],0.001)
end

def test_costpercapita_k161
  r = spreadsheet.costpercapita_k161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.830627025249025,r[:number],0.001)
end

def test_costpercapita_l161
  r = spreadsheet.costpercapita_l161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.640836506622003,r[:number],0.001)
end

def test_costpercapita_m161
  r = spreadsheet.costpercapita_m161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.466117568649894,r[:number],0.001)
end

def test_costpercapita_o161
  r = spreadsheet.costpercapita_o161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p161
  r = spreadsheet.costpercapita_p161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.07532825269732647,r[:number],0.001)
end

def test_costpercapita_q161
  r = spreadsheet.costpercapita_q161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.17164170936539722,r[:number],0.001)
end

def test_costpercapita_r161
  r = spreadsheet.costpercapita_r161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.16283016985396148,r[:number],0.001)
end

def test_costpercapita_s161
  r = spreadsheet.costpercapita_s161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.15512127385499125,r[:number],0.001)
end

def test_costpercapita_t161
  r = spreadsheet.costpercapita_t161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.14841300497154153,r[:number],0.001)
end

def test_costpercapita_u161
  r = spreadsheet.costpercapita_u161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.14491881075747076,r[:number],0.001)
end

def test_costpercapita_v161
  r = spreadsheet.costpercapita_v161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13922509519866005,r[:number],0.001)
end

def test_costpercapita_w161
  r = spreadsheet.costpercapita_w161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13398352705949682,r[:number],0.001)
end

def test_costpercapita_y161
  r = spreadsheet.costpercapita_y161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z161
  r = spreadsheet.costpercapita_z161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa161
  r = spreadsheet.costpercapita_aa161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab161
  r = spreadsheet.costpercapita_ab161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac161
  r = spreadsheet.costpercapita_ac161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad161
  r = spreadsheet.costpercapita_ad161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae161
  r = spreadsheet.costpercapita_ae161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af161
  r = spreadsheet.costpercapita_af161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag161
  r = spreadsheet.costpercapita_ag161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai161
  r = spreadsheet.costpercapita_ai161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj161
  r = spreadsheet.costpercapita_aj161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5862700092748754,r[:number],0.001)
end

def test_costpercapita_ak161
  r = spreadsheet.costpercapita_ak161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.893032021545305,r[:number],0.001)
end

def test_costpercapita_al161
  r = spreadsheet.costpercapita_al161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.590502498319345,r[:number],0.001)
end

def test_costpercapita_am161
  r = spreadsheet.costpercapita_am161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3258304023547,r[:number],0.001)
end

def test_costpercapita_an161
  r = spreadsheet.costpercapita_an161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.095513170689592,r[:number],0.001)
end

def test_costpercapita_ao161
  r = spreadsheet.costpercapita_ao161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.975545836006496,r[:number],0.001)
end

def test_costpercapita_ap161
  r = spreadsheet.costpercapita_ap161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7800616018206625,r[:number],0.001)
end

def test_costpercapita_aq161
  r = spreadsheet.costpercapita_aq161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.600101095709391,r[:number],0.001)
end

def test_costpercapita_as161
  r = spreadsheet.costpercapita_as161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.31631740396893,r[:number],0.001)
end

def test_costpercapita_at161
  r = spreadsheet.costpercapita_at161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.93069979682132,r[:number],0.001)
end

def test_costpercapita_av161
  r = spreadsheet.costpercapita_av161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aw161
  r = spreadsheet.costpercapita_aw161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number],0.001)
end

def test_costpercapita_ay161
  r = spreadsheet.costpercapita_ay161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az161
  r = spreadsheet.costpercapita_az161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073159,r[:number],0.001)
end

def test_costpercapita_ba161
  r = spreadsheet.costpercapita_ba161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7610639669455703,r[:number],0.001)
end

def test_costpercapita_bb161
  r = spreadsheet.costpercapita_bb161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.56798290365211,r[:number],0.001)
end

def test_costpercapita_bc161
  r = spreadsheet.costpercapita_bc161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.399063291549348,r[:number],0.001)
end

def test_costpercapita_bd161
  r = spreadsheet.costpercapita_bd161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2520697171354858,r[:number],0.001)
end

def test_costpercapita_be161
  r = spreadsheet.costpercapita_be161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.175503898718505,r[:number],0.001)
end

def test_costpercapita_bf161
  r = spreadsheet.costpercapita_bf161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.050741517211966,r[:number],0.001)
end

def test_costpercapita_bg161
  r = spreadsheet.costpercapita_bg161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.935886723867248,r[:number],0.001)
end

def test_costpercapita_bi161
  r = spreadsheet.costpercapita_bi161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj161
  r = spreadsheet.costpercapita_bj161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073159,r[:number],0.001)
end

def test_costpercapita_bk161
  r = spreadsheet.costpercapita_bk161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.357640866761145,r[:number],0.001)
end

def test_costpercapita_bl161
  r = spreadsheet.costpercapita_bl161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.7597325927062,r[:number],0.001)
end

def test_costpercapita_bm161
  r = spreadsheet.costpercapita_bm161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.414605455483047,r[:number],0.001)
end

def test_costpercapita_bn161
  r = spreadsheet.costpercapita_bn161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.95982061058192,r[:number],0.001)
end

def test_costpercapita_bo161
  r = spreadsheet.costpercapita_bo161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.606432521028493,r[:number],0.001)
end

def test_costpercapita_bp161
  r = spreadsheet.costpercapita_bp161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.282126965632294,r[:number],0.001)
end

def test_costpercapita_bq161
  r = spreadsheet.costpercapita_bq161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.983777003909685,r[:number],0.001)
end

def test_costpercapita_bs161
  r = spreadsheet.costpercapita_bs161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt161
  r = spreadsheet.costpercapita_bt161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7259432341046421,r[:number],0.001)
end

def test_costpercapita_bu161
  r = spreadsheet.costpercapita_bu161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.529282576126541,r[:number],0.001)
end

def test_costpercapita_bv161
  r = spreadsheet.costpercapita_bv161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.922562762560162,r[:number],0.001)
end

def test_costpercapita_bw161
  r = spreadsheet.costpercapita_bw161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.56972672933804,r[:number],0.001)
end

def test_costpercapita_bx161
  r = spreadsheet.costpercapita_bx161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.108233615553461,r[:number],0.001)
end

def test_costpercapita_by161
  r = spreadsheet.costpercapita_by161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.751351331785965,r[:number],0.001)
end

def test_costpercapita_bz161
  r = spreadsheet.costpercapita_bz161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.421352060830953,r[:number],0.001)
end

def test_costpercapita_ca161
  r = spreadsheet.costpercapita_ca161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.117760530969182,r[:number],0.001)
end

def test_costpercapita_cc161
  r = spreadsheet.costpercapita_cc161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.238468093474328,r[:number],0.001)
end

def test_costpercapita_cd161
  r = spreadsheet.costpercapita_cd161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.37433426563223,r[:number],0.001)
end

def test_costpercapita_cf161
  r = spreadsheet.costpercapita_cf161
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg161
  r = spreadsheet.costpercapita_cg161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.860326775170233,r[:number],0.001)
end

def test_costpercapita_ch161
  r = spreadsheet.costpercapita_ch161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.3637494454187634,r[:number],0.001)
end

def test_costpercapita_ci161
  r = spreadsheet.costpercapita_ci161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.332060264240816,r[:number],0.001)
end

def test_costpercapita_cj161
  r = spreadsheet.costpercapita_cj161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.2438963269833385,r[:number],0.001)
end

def test_costpercapita_ck161
  r = spreadsheet.costpercapita_ck161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.012720444863869,r[:number],0.001)
end

def test_costpercapita_cl161
  r = spreadsheet.costpercapita_cl161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.775805495779468,r[:number],0.001)
end

def test_costpercapita_cm161
  r = spreadsheet.costpercapita_cm161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.641290459010291,r[:number],0.001)
end

def test_costpercapita_cn161
  r = spreadsheet.costpercapita_cn161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.517659435259792,r[:number],0.001)
end

def test_costpercapita_cp161
  r = spreadsheet.costpercapita_cp161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.922150689505398,r[:number],0.001)
end

def test_costpercapita_cq161
  r = spreadsheet.costpercapita_cq161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.4436344688109,r[:number],0.001)
end

def test_costpercapita_cr161
  r = spreadsheet.costpercapita_cr161
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a162
  r = spreadsheet.costpercapita_a162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b162
  r = spreadsheet.costpercapita_b162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c162
  r = spreadsheet.costpercapita_c162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e162
  r = spreadsheet.costpercapita_e162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83834.82781003312,r[:number],0.001)
end

def test_costpercapita_f162
  r = spreadsheet.costpercapita_f162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191576.94978482602,r[:number],0.001)
end

def test_costpercapita_g162
  r = spreadsheet.costpercapita_g162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245901.64851728643,r[:number],0.001)
end

def test_costpercapita_h162
  r = spreadsheet.costpercapita_h162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307787.0303505388,r[:number],0.001)
end

def test_costpercapita_i162
  r = spreadsheet.costpercapita_i162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(370312.7220671294,r[:number],0.001)
end

def test_costpercapita_j162
  r = spreadsheet.costpercapita_j162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438943.1057973492,r[:number],0.001)
end

def test_costpercapita_k162
  r = spreadsheet.costpercapita_k162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(513334.7146160764,r[:number],0.001)
end

def test_costpercapita_l162
  r = spreadsheet.costpercapita_l162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(592474.4491799615,r[:number],0.001)
end

def test_costpercapita_m162
  r = spreadsheet.costpercapita_m162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(684946.2904527247,r[:number],0.001)
end

def test_costpercapita_o162
  r = spreadsheet.costpercapita_o162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46793.58343823254,r[:number],0.001)
end

def test_costpercapita_p162
  r = spreadsheet.costpercapita_p162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67031.12897717234,r[:number],0.001)
end

def test_costpercapita_q162
  r = spreadsheet.costpercapita_q162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89759.0603313708,r[:number],0.001)
end

def test_costpercapita_r162
  r = spreadsheet.costpercapita_r162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116266.68039008041,r[:number],0.001)
end

def test_costpercapita_s162
  r = spreadsheet.costpercapita_s162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145803.49099634876,r[:number],0.001)
end

def test_costpercapita_t162
  r = spreadsheet.costpercapita_t162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179405.46567400938,r[:number],0.001)
end

def test_costpercapita_u162
  r = spreadsheet.costpercapita_u162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217469.85811376598,r[:number],0.001)
end

def test_costpercapita_v162
  r = spreadsheet.costpercapita_v162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259787.0053936928,r[:number],0.001)
end

def test_costpercapita_w162
  r = spreadsheet.costpercapita_w162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307850.74032433436,r[:number],0.001)
end

def test_costpercapita_y162
  r = spreadsheet.costpercapita_y162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31225.886294755797,r[:number],0.001)
end

def test_costpercapita_z162
  r = spreadsheet.costpercapita_z162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60347.88227797976,r[:number],0.001)
end

def test_costpercapita_aa162
  r = spreadsheet.costpercapita_aa162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96156.60125807828,r[:number],0.001)
end

def test_costpercapita_ab162
  r = spreadsheet.costpercapita_ab162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137609.51761691752,r[:number],0.001)
end

def test_costpercapita_ac162
  r = spreadsheet.costpercapita_ac162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184404.89224624285,r[:number],0.001)
end

def test_costpercapita_ad162
  r = spreadsheet.costpercapita_ad162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209270.3395928725,r[:number],0.001)
end

def test_costpercapita_ae162
  r = spreadsheet.costpercapita_ae162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234395.48637110653,r[:number],0.001)
end

def test_costpercapita_af162
  r = spreadsheet.costpercapita_af162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259371.48959367938,r[:number],0.001)
end

def test_costpercapita_ag162
  r = spreadsheet.costpercapita_ag162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283506.1380770748,r[:number],0.001)
end

def test_costpercapita_ai162
  r = spreadsheet.costpercapita_ai162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161854.29754302147,r[:number],0.001)
end

def test_costpercapita_aj162
  r = spreadsheet.costpercapita_aj162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(318955.9610399781,r[:number],0.001)
end

def test_costpercapita_ak162
  r = spreadsheet.costpercapita_ak162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431817.3101067354,r[:number],0.001)
end

def test_costpercapita_al162
  r = spreadsheet.costpercapita_al162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561663.2283575366,r[:number],0.001)
end

def test_costpercapita_am162
  r = spreadsheet.costpercapita_am162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(700521.1053097211,r[:number],0.001)
end

def test_costpercapita_an162
  r = spreadsheet.costpercapita_an162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827618.9110642308,r[:number],0.001)
end

def test_costpercapita_ao162
  r = spreadsheet.costpercapita_ao162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(965200.0591009492,r[:number],0.001)
end

def test_costpercapita_ap162
  r = spreadsheet.costpercapita_ap162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1111632.944167334,r[:number],0.001)
end

def test_costpercapita_aq162
  r = spreadsheet.costpercapita_aq162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1276303.1688541337,r[:number],0.001)
end

def test_costpercapita_as162
  r = spreadsheet.costpercapita_as162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(706174.109504849,r[:number],0.001)
end

def test_costpercapita_at162
  r = spreadsheet.costpercapita_at162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13342156.511245651,r[:number],0.001)
end

def test_costpercapita_ay162
  r = spreadsheet.costpercapita_ay162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33066.2443406627,r[:number],0.001)
end

def test_costpercapita_az162
  r = spreadsheet.costpercapita_az162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125936.7257638676,r[:number],0.001)
end

def test_costpercapita_ba162
  r = spreadsheet.costpercapita_ba162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161648.09236699363,r[:number],0.001)
end

def test_costpercapita_bb162
  r = spreadsheet.costpercapita_bb162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202329.61678566795,r[:number],0.001)
end

def test_costpercapita_bc162
  r = spreadsheet.costpercapita_bc162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243432.0609980463,r[:number],0.001)
end

def test_costpercapita_bd162
  r = spreadsheet.costpercapita_bd162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(288547.5397892544,r[:number],0.001)
end

def test_costpercapita_be162
  r = spreadsheet.costpercapita_be162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(337450.26868988463,r[:number],0.001)
end

def test_costpercapita_bf162
  r = spreadsheet.costpercapita_bf162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(389474.26771477505,r[:number],0.001)
end

def test_costpercapita_bg162
  r = spreadsheet.costpercapita_bg162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(450262.37885407393,r[:number],0.001)
end

def test_costpercapita_bi162
  r = spreadsheet.costpercapita_bi162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33066.2443406627,r[:number],0.001)
end

def test_costpercapita_bj162
  r = spreadsheet.costpercapita_bj162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157912.60840752505,r[:number],0.001)
end

def test_costpercapita_bk162
  r = spreadsheet.costpercapita_bk162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314390.9340429608,r[:number],0.001)
end

def test_costpercapita_bl162
  r = spreadsheet.costpercapita_bl162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477014.5345949322,r[:number],0.001)
end

def test_costpercapita_bm162
  r = spreadsheet.costpercapita_bm162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(592597.3992512206,r[:number],0.001)
end

def test_costpercapita_bn162
  r = spreadsheet.costpercapita_bn162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(718411.5232350741,r[:number],0.001)
end

def test_costpercapita_bo162
  r = spreadsheet.costpercapita_bo162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(852472.7454589397,r[:number],0.001)
end

def test_costpercapita_bp162
  r = spreadsheet.costpercapita_bp162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(996953.795418876,r[:number],0.001)
end

def test_costpercapita_bq162
  r = spreadsheet.costpercapita_bq162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1157015.4294717116,r[:number],0.001)
end

def test_costpercapita_bs162
  r = spreadsheet.costpercapita_bs162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111085.71407365102,r[:number],0.001)
end

def test_costpercapita_bt162
  r = spreadsheet.costpercapita_bt162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285291.6196626771,r[:number],0.001)
end

def test_costpercapita_bu162
  r = spreadsheet.costpercapita_bu162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500306.59563240974,r[:number],0.001)
end

def test_costpercapita_bv162
  r = spreadsheet.costpercapita_bv162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(730890.73260193,r[:number],0.001)
end

def test_costpercapita_bw162
  r = spreadsheet.costpercapita_bw162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(922805.7824938121,r[:number],0.001)
end

def test_costpercapita_bx162
  r = spreadsheet.costpercapita_bx162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1107087.3285019563,r[:number],0.001)
end

def test_costpercapita_by162
  r = spreadsheet.costpercapita_by162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1304338.0899438122,r[:number],0.001)
end

def test_costpercapita_bz162
  r = spreadsheet.costpercapita_bz162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1516112.2904062488,r[:number],0.001)
end

def test_costpercapita_ca162
  r = spreadsheet.costpercapita_ca162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1748372.3078731208,r[:number],0.001)
end

def test_costpercapita_cc162
  r = spreadsheet.costpercapita_cc162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914032.273465513,r[:number],0.001)
end

def test_costpercapita_cd162
  r = spreadsheet.costpercapita_cd162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16898745.62889431,r[:number],0.001)
end

def test_costpercapita_cf162
  r = spreadsheet.costpercapita_cf162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-50768.58346937043,r[:number],0.001)
end

def test_costpercapita_cg162
  r = spreadsheet.costpercapita_cg162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-33664.341377300974,r[:number],0.001)
end

def test_costpercapita_ch162
  r = spreadsheet.costpercapita_ch162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68489.28552567438,r[:number],0.001)
end

def test_costpercapita_ci162
  r = spreadsheet.costpercapita_ci162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169227.5042443934,r[:number],0.001)
end

def test_costpercapita_cj162
  r = spreadsheet.costpercapita_cj162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222284.67718409115,r[:number],0.001)
end

def test_costpercapita_ck162
  r = spreadsheet.costpercapita_ck162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279468.41743772494,r[:number],0.001)
end

def test_costpercapita_cl162
  r = spreadsheet.costpercapita_cl162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339138.0308428633,r[:number],0.001)
end

def test_costpercapita_cm162
  r = spreadsheet.costpercapita_cm162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(404479.3462389145,r[:number],0.001)
end

def test_costpercapita_cn162
  r = spreadsheet.costpercapita_cn162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472069.1390189869,r[:number],0.001)
end

def test_costpercapita_cp162
  r = spreadsheet.costpercapita_cp162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207858.16396066413,r[:number],0.001)
end

def test_costpercapita_cq162
  r = spreadsheet.costpercapita_cq162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3556589.117648657,r[:number],0.001)
end

def test_costpercapita_cr162
  r = spreadsheet.costpercapita_cr162
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c164
  r = spreadsheet.costpercapita_c164
  assert_equal(:ExcelString,r[:type])
  assert_equal("£m",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e164
  r = spreadsheet.costpercapita_e164
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f164
  r = spreadsheet.costpercapita_f164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o164
  r = spreadsheet.costpercapita_o164
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p164
  r = spreadsheet.costpercapita_p164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y164
  r = spreadsheet.costpercapita_y164
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z164
  r = spreadsheet.costpercapita_z164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai164
  r = spreadsheet.costpercapita_ai164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as164
  r = spreadsheet.costpercapita_as164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av164
  r = spreadsheet.costpercapita_av164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay164
  r = spreadsheet.costpercapita_ay164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi164
  r = spreadsheet.costpercapita_bi164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs164
  r = spreadsheet.costpercapita_bs164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc164
  r = spreadsheet.costpercapita_cc164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf164
  r = spreadsheet.costpercapita_cf164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp164
  r = spreadsheet.costpercapita_cp164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c165
  r = spreadsheet.costpercapita_c165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e165
  r = spreadsheet.costpercapita_e165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f165
  r = spreadsheet.costpercapita_f165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g165
  r = spreadsheet.costpercapita_g165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h165
  r = spreadsheet.costpercapita_h165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i165
  r = spreadsheet.costpercapita_i165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j165
  r = spreadsheet.costpercapita_j165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k165
  r = spreadsheet.costpercapita_k165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l165
  r = spreadsheet.costpercapita_l165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m165
  r = spreadsheet.costpercapita_m165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o165
  r = spreadsheet.costpercapita_o165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p165
  r = spreadsheet.costpercapita_p165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q165
  r = spreadsheet.costpercapita_q165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r165
  r = spreadsheet.costpercapita_r165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s165
  r = spreadsheet.costpercapita_s165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t165
  r = spreadsheet.costpercapita_t165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u165
  r = spreadsheet.costpercapita_u165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v165
  r = spreadsheet.costpercapita_v165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w165
  r = spreadsheet.costpercapita_w165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y165
  r = spreadsheet.costpercapita_y165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z165
  r = spreadsheet.costpercapita_z165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa165
  r = spreadsheet.costpercapita_aa165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab165
  r = spreadsheet.costpercapita_ab165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac165
  r = spreadsheet.costpercapita_ac165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad165
  r = spreadsheet.costpercapita_ad165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae165
  r = spreadsheet.costpercapita_ae165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af165
  r = spreadsheet.costpercapita_af165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag165
  r = spreadsheet.costpercapita_ag165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai165
  r = spreadsheet.costpercapita_ai165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj165
  r = spreadsheet.costpercapita_aj165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak165
  r = spreadsheet.costpercapita_ak165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al165
  r = spreadsheet.costpercapita_al165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am165
  r = spreadsheet.costpercapita_am165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an165
  r = spreadsheet.costpercapita_an165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao165
  r = spreadsheet.costpercapita_ao165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap165
  r = spreadsheet.costpercapita_ap165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq165
  r = spreadsheet.costpercapita_aq165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as165
  r = spreadsheet.costpercapita_as165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at165
  r = spreadsheet.costpercapita_at165
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av165
  r = spreadsheet.costpercapita_av165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw165
  r = spreadsheet.costpercapita_aw165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay165
  r = spreadsheet.costpercapita_ay165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_az165
  r = spreadsheet.costpercapita_az165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_ba165
  r = spreadsheet.costpercapita_ba165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bb165
  r = spreadsheet.costpercapita_bb165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bc165
  r = spreadsheet.costpercapita_bc165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bd165
  r = spreadsheet.costpercapita_bd165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_be165
  r = spreadsheet.costpercapita_be165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bf165
  r = spreadsheet.costpercapita_bf165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bg165
  r = spreadsheet.costpercapita_bg165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bi165
  r = spreadsheet.costpercapita_bi165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_bj165
  r = spreadsheet.costpercapita_bj165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_bk165
  r = spreadsheet.costpercapita_bk165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bl165
  r = spreadsheet.costpercapita_bl165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bm165
  r = spreadsheet.costpercapita_bm165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bn165
  r = spreadsheet.costpercapita_bn165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_bo165
  r = spreadsheet.costpercapita_bo165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bp165
  r = spreadsheet.costpercapita_bp165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bq165
  r = spreadsheet.costpercapita_bq165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bs165
  r = spreadsheet.costpercapita_bs165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt165
  r = spreadsheet.costpercapita_bt165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu165
  r = spreadsheet.costpercapita_bu165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv165
  r = spreadsheet.costpercapita_bv165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw165
  r = spreadsheet.costpercapita_bw165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx165
  r = spreadsheet.costpercapita_bx165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by165
  r = spreadsheet.costpercapita_by165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz165
  r = spreadsheet.costpercapita_bz165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca165
  r = spreadsheet.costpercapita_ca165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc165
  r = spreadsheet.costpercapita_cc165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd165
  r = spreadsheet.costpercapita_cd165
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf165
  r = spreadsheet.costpercapita_cf165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg165
  r = spreadsheet.costpercapita_cg165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch165
  r = spreadsheet.costpercapita_ch165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci165
  r = spreadsheet.costpercapita_ci165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj165
  r = spreadsheet.costpercapita_cj165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck165
  r = spreadsheet.costpercapita_ck165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl165
  r = spreadsheet.costpercapita_cl165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm165
  r = spreadsheet.costpercapita_cm165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn165
  r = spreadsheet.costpercapita_cn165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp165
  r = spreadsheet.costpercapita_cp165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq165
  r = spreadsheet.costpercapita_cq165
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c166
  r = spreadsheet.costpercapita_c166
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e166
  r = spreadsheet.costpercapita_e166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(294.3713083273192,r[:number],0.001)
end

def test_costpercapita_f166
  r = spreadsheet.costpercapita_f166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_g166
  r = spreadsheet.costpercapita_g166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.039884749071,r[:number],0.001)
end

def test_costpercapita_h166
  r = spreadsheet.costpercapita_h166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.154891813795,r[:number],0.001)
end

def test_costpercapita_i166
  r = spreadsheet.costpercapita_i166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.0030195685927,r[:number],0.001)
end

def test_costpercapita_j166
  r = spreadsheet.costpercapita_j166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2313.519417608476,r[:number],0.001)
end

def test_costpercapita_k166
  r = spreadsheet.costpercapita_k166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2590.951950404437,r[:number],0.001)
end

def test_costpercapita_l166
  r = spreadsheet.costpercapita_l166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.5342194217233,r[:number],0.001)
end

def test_costpercapita_m166
  r = spreadsheet.costpercapita_m166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3006.835587632441,r[:number],0.001)
end

def test_costpercapita_o166
  r = spreadsheet.costpercapita_o166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9079162930800998,r[:number],0.001)
end

def test_costpercapita_p166
  r = spreadsheet.costpercapita_p166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5690368174964877,r[:number],0.001)
end

def test_costpercapita_q166
  r = spreadsheet.costpercapita_q166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1806283511240525,r[:number],0.001)
end

def test_costpercapita_r166
  r = spreadsheet.costpercapita_r166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7808584020805944,r[:number],0.001)
end

def test_costpercapita_s166
  r = spreadsheet.costpercapita_s166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3674474789021858,r[:number],0.001)
end

def test_costpercapita_t166
  r = spreadsheet.costpercapita_t166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.948839419914746,r[:number],0.001)
end

def test_costpercapita_u166
  r = spreadsheet.costpercapita_u166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.57420519224071,r[:number],0.001)
end

def test_costpercapita_v166
  r = spreadsheet.costpercapita_v166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.205775488251698,r[:number],0.001)
end

def test_costpercapita_w166
  r = spreadsheet.costpercapita_w166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.828158385218579,r[:number],0.001)
end

def test_costpercapita_y166
  r = spreadsheet.costpercapita_y166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26431.218328877214,r[:number],0.001)
end

def test_costpercapita_z166
  r = spreadsheet.costpercapita_z166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39034.11958097116,r[:number],0.001)
end

def test_costpercapita_aa166
  r = spreadsheet.costpercapita_aa166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50563.30633092158,r[:number],0.001)
end

def test_costpercapita_ab166
  r = spreadsheet.costpercapita_ab166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61071.13315077203,r[:number],0.001)
end

def test_costpercapita_ac166
  r = spreadsheet.costpercapita_ac166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70959.70533325491,r[:number],0.001)
end

def test_costpercapita_ad166
  r = spreadsheet.costpercapita_ad166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81255.83711684018,r[:number],0.001)
end

def test_costpercapita_ae166
  r = spreadsheet.costpercapita_ae166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91530.85553074023,r[:number],0.001)
end

def test_costpercapita_af166
  r = spreadsheet.costpercapita_af166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101795.41916359836,r[:number],0.001)
end

def test_costpercapita_ag166
  r = spreadsheet.costpercapita_ag166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111892.66138442032,r[:number],0.001)
end

def test_costpercapita_ai166
  r = spreadsheet.costpercapita_ai166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26726.49755349761,r[:number],0.001)
end

def test_costpercapita_aj166
  r = spreadsheet.costpercapita_aj166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40638.45067022253,r[:number],0.001)
end

def test_costpercapita_ak166
  r = spreadsheet.costpercapita_ak166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52318.52684402178,r[:number],0.001)
end

def test_costpercapita_al166
  r = spreadsheet.costpercapita_al166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63026.06890098791,r[:number],0.001)
end

def test_costpercapita_am166
  r = spreadsheet.costpercapita_am166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73094.07580030241,r[:number],0.001)
end

def test_costpercapita_an166
  r = spreadsheet.costpercapita_an166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83573.30537386858,r[:number],0.001)
end

def test_costpercapita_ao166
  r = spreadsheet.costpercapita_ao166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94126.3816863369,r[:number],0.001)
end

def test_costpercapita_ap166
  r = spreadsheet.costpercapita_ap166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104614.15915850834,r[:number],0.001)
end

def test_costpercapita_aq166
  r = spreadsheet.costpercapita_aq166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114905.325130438,r[:number],0.001)
end

def test_costpercapita_as166
  r = spreadsheet.costpercapita_as166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72558.08790202044,r[:number],0.001)
end

def test_costpercapita_at166
  r = spreadsheet.costpercapita_at166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1412587.5192020724,r[:number],0.001)
end

def test_costpercapita_ay166
  r = spreadsheet.costpercapita_ay166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.62278499639152,r[:number],0.001)
end

def test_costpercapita_az166
  r = spreadsheet.costpercapita_az166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_ba166
  r = spreadsheet.costpercapita_ba166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.039884749071,r[:number],0.001)
end

def test_costpercapita_bb166
  r = spreadsheet.costpercapita_bb166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.154891813795,r[:number],0.001)
end

def test_costpercapita_bc166
  r = spreadsheet.costpercapita_bc166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.0030195685927,r[:number],0.001)
end

def test_costpercapita_bd166
  r = spreadsheet.costpercapita_bd166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2313.519417608476,r[:number],0.001)
end

def test_costpercapita_be166
  r = spreadsheet.costpercapita_be166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2590.951950404437,r[:number],0.001)
end

def test_costpercapita_bf166
  r = spreadsheet.costpercapita_bf166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.534219421723,r[:number],0.001)
end

def test_costpercapita_bg166
  r = spreadsheet.costpercapita_bg166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3006.835587632441,r[:number],0.001)
end

def test_costpercapita_bi166
  r = spreadsheet.costpercapita_bi166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.62278499639152,r[:number],0.001)
end

def test_costpercapita_bj166
  r = spreadsheet.costpercapita_bj166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_bk166
  r = spreadsheet.costpercapita_bk166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1753.039884749071,r[:number],0.001)
end

def test_costpercapita_bl166
  r = spreadsheet.costpercapita_bl166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.154891813795,r[:number],0.001)
end

def test_costpercapita_bm166
  r = spreadsheet.costpercapita_bm166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.0030195685927,r[:number],0.001)
end

def test_costpercapita_bn166
  r = spreadsheet.costpercapita_bn166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2313.519417608476,r[:number],0.001)
end

def test_costpercapita_bo166
  r = spreadsheet.costpercapita_bo166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2590.951950404437,r[:number],0.001)
end

def test_costpercapita_bp166
  r = spreadsheet.costpercapita_bp166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2813.534219421723,r[:number],0.001)
end

def test_costpercapita_bq166
  r = spreadsheet.costpercapita_bq166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3006.835587632441,r[:number],0.001)
end

def test_costpercapita_bs166
  r = spreadsheet.costpercapita_bs166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26608.749030166684,r[:number],0.001)
end

def test_costpercapita_bt166
  r = spreadsheet.costpercapita_bt166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40638.45067022253,r[:number],0.001)
end

def test_costpercapita_bu166
  r = spreadsheet.costpercapita_bu166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52318.52684402178,r[:number],0.001)
end

def test_costpercapita_bv166
  r = spreadsheet.costpercapita_bv166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63026.06890098791,r[:number],0.001)
end

def test_costpercapita_bw166
  r = spreadsheet.costpercapita_bw166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73094.07580030241,r[:number],0.001)
end

def test_costpercapita_bx166
  r = spreadsheet.costpercapita_bx166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83573.30537386858,r[:number],0.001)
end

def test_costpercapita_by166
  r = spreadsheet.costpercapita_by166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94126.3816863369,r[:number],0.001)
end

def test_costpercapita_bz166
  r = spreadsheet.costpercapita_bz166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104614.15915850834,r[:number],0.001)
end

def test_costpercapita_ca166
  r = spreadsheet.costpercapita_ca166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114905.325130438,r[:number],0.001)
end

def test_costpercapita_cc166
  r = spreadsheet.costpercapita_cc166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72545.00473276146,r[:number],0.001)
end

def test_costpercapita_cd166
  r = spreadsheet.costpercapita_cd166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1412469.7706787414,r[:number],0.001)
end

def test_costpercapita_cf166
  r = spreadsheet.costpercapita_cf166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-117.74852333092767,r[:number],0.001)
end

def test_costpercapita_cg166
  r = spreadsheet.costpercapita_cg166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch166
  r = spreadsheet.costpercapita_ch166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci166
  r = spreadsheet.costpercapita_ci166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj166
  r = spreadsheet.costpercapita_cj166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck166
  r = spreadsheet.costpercapita_ck166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl166
  r = spreadsheet.costpercapita_cl166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm166
  r = spreadsheet.costpercapita_cm166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn166
  r = spreadsheet.costpercapita_cn166
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp166
  r = spreadsheet.costpercapita_cp166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-13.083169258991964,r[:number],0.001)
end

def test_costpercapita_cq166
  r = spreadsheet.costpercapita_cq166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-117.74852333092767,r[:number],0.001)
end

def test_costpercapita_cr166
  r = spreadsheet.costpercapita_cr166
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c167
  r = spreadsheet.costpercapita_c167
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e167
  r = spreadsheet.costpercapita_e167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.004051215610723,r[:number],0.001)
end

def test_costpercapita_f167
  r = spreadsheet.costpercapita_f167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.5178957862041,r[:number],0.001)
end

def test_costpercapita_g167
  r = spreadsheet.costpercapita_g167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.46107939732968,r[:number],0.001)
end

def test_costpercapita_h167
  r = spreadsheet.costpercapita_h167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.4971000223592,r[:number],0.001)
end

def test_costpercapita_i167
  r = spreadsheet.costpercapita_i167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.15329658200279,r[:number],0.001)
end

def test_costpercapita_j167
  r = spreadsheet.costpercapita_j167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880297110721123,r[:number],0.001)
end

def test_costpercapita_k167
  r = spreadsheet.costpercapita_k167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.863135476289767,r[:number],0.001)
end

def test_costpercapita_l167
  r = spreadsheet.costpercapita_l167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56786996327557,r[:number],0.001)
end

def test_costpercapita_m167
  r = spreadsheet.costpercapita_m167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.326060140095661,r[:number],0.001)
end

def test_costpercapita_o167
  r = spreadsheet.costpercapita_o167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.52095453822669,r[:number],0.001)
end

def test_costpercapita_p167
  r = spreadsheet.costpercapita_p167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.98312186355437,r[:number],0.001)
end

def test_costpercapita_q167
  r = spreadsheet.costpercapita_q167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.57706478784985,r[:number],0.001)
end

def test_costpercapita_r167
  r = spreadsheet.costpercapita_r167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.96620091371354,r[:number],0.001)
end

def test_costpercapita_s167
  r = spreadsheet.costpercapita_s167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.40307349388351,r[:number],0.001)
end

def test_costpercapita_t167
  r = spreadsheet.costpercapita_t167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.31325615303217,r[:number],0.001)
end

def test_costpercapita_u167
  r = spreadsheet.costpercapita_u167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.50323609005788,r[:number],0.001)
end

def test_costpercapita_v167
  r = spreadsheet.costpercapita_v167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.35859368918024,r[:number],0.001)
end

def test_costpercapita_w167
  r = spreadsheet.costpercapita_w167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.87321451659957,r[:number],0.001)
end

def test_costpercapita_y167
  r = spreadsheet.costpercapita_y167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z167
  r = spreadsheet.costpercapita_z167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa167
  r = spreadsheet.costpercapita_aa167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab167
  r = spreadsheet.costpercapita_ab167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac167
  r = spreadsheet.costpercapita_ac167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad167
  r = spreadsheet.costpercapita_ad167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae167
  r = spreadsheet.costpercapita_ae167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af167
  r = spreadsheet.costpercapita_af167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag167
  r = spreadsheet.costpercapita_ag167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai167
  r = spreadsheet.costpercapita_ai167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.5250057538374,r[:number],0.001)
end

def test_costpercapita_aj167
  r = spreadsheet.costpercapita_aj167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.5010176497585,r[:number],0.001)
end

def test_costpercapita_ak167
  r = spreadsheet.costpercapita_ak167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.03814418517953,r[:number],0.001)
end

def test_costpercapita_al167
  r = spreadsheet.costpercapita_al167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.46330093607273,r[:number],0.001)
end

def test_costpercapita_am167
  r = spreadsheet.costpercapita_am167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.5563700758863,r[:number],0.001)
end

def test_costpercapita_an167
  r = spreadsheet.costpercapita_an167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1935532637533,r[:number],0.001)
end

def test_costpercapita_ao167
  r = spreadsheet.costpercapita_ao167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.36637156634765,r[:number],0.001)
end

def test_costpercapita_ap167
  r = spreadsheet.costpercapita_ap167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.92646365245581,r[:number],0.001)
end

def test_costpercapita_aq167
  r = spreadsheet.costpercapita_aq167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.19927465669525,r[:number],0.001)
end

def test_costpercapita_as167
  r = spreadsheet.costpercapita_as167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.86327797110961,r[:number],0.001)
end

def test_costpercapita_at167
  r = spreadsheet.costpercapita_at167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2707.5723733375225,r[:number],0.001)
end

def test_costpercapita_ay167
  r = spreadsheet.costpercapita_ay167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.802430729366433,r[:number],0.001)
end

def test_costpercapita_az167
  r = spreadsheet.costpercapita_az167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.5178957862041,r[:number],0.001)
end

def test_costpercapita_ba167
  r = spreadsheet.costpercapita_ba167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.46107939732968,r[:number],0.001)
end

def test_costpercapita_bb167
  r = spreadsheet.costpercapita_bb167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.4971000223592,r[:number],0.001)
end

def test_costpercapita_bc167
  r = spreadsheet.costpercapita_bc167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.15329658200279,r[:number],0.001)
end

def test_costpercapita_bd167
  r = spreadsheet.costpercapita_bd167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880297110721123,r[:number],0.001)
end

def test_costpercapita_be167
  r = spreadsheet.costpercapita_be167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.863135476289767,r[:number],0.001)
end

def test_costpercapita_bf167
  r = spreadsheet.costpercapita_bf167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56786996327557,r[:number],0.001)
end

def test_costpercapita_bg167
  r = spreadsheet.costpercapita_bg167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.326060140095661,r[:number],0.001)
end

def test_costpercapita_bi167
  r = spreadsheet.costpercapita_bi167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.802430729366433,r[:number],0.001)
end

def test_costpercapita_bj167
  r = spreadsheet.costpercapita_bj167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.5178957862041,r[:number],0.001)
end

def test_costpercapita_bk167
  r = spreadsheet.costpercapita_bk167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.46107939732968,r[:number],0.001)
end

def test_costpercapita_bl167
  r = spreadsheet.costpercapita_bl167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.4971000223592,r[:number],0.001)
end

def test_costpercapita_bm167
  r = spreadsheet.costpercapita_bm167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.15329658200279,r[:number],0.001)
end

def test_costpercapita_bn167
  r = spreadsheet.costpercapita_bn167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880297110721123,r[:number],0.001)
end

def test_costpercapita_bo167
  r = spreadsheet.costpercapita_bo167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.863135476289767,r[:number],0.001)
end

def test_costpercapita_bp167
  r = spreadsheet.costpercapita_bp167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56786996327557,r[:number],0.001)
end

def test_costpercapita_bq167
  r = spreadsheet.costpercapita_bq167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.326060140095661,r[:number],0.001)
end

def test_costpercapita_bs167
  r = spreadsheet.costpercapita_bs167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.32338526759312,r[:number],0.001)
end

def test_costpercapita_bt167
  r = spreadsheet.costpercapita_bt167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.5010176497585,r[:number],0.001)
end

def test_costpercapita_bu167
  r = spreadsheet.costpercapita_bu167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.03814418517953,r[:number],0.001)
end

def test_costpercapita_bv167
  r = spreadsheet.costpercapita_bv167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.46330093607273,r[:number],0.001)
end

def test_costpercapita_bw167
  r = spreadsheet.costpercapita_bw167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.5563700758863,r[:number],0.001)
end

def test_costpercapita_bx167
  r = spreadsheet.costpercapita_bx167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.1935532637533,r[:number],0.001)
end

def test_costpercapita_by167
  r = spreadsheet.costpercapita_by167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.36637156634765,r[:number],0.001)
end

def test_costpercapita_bz167
  r = spreadsheet.costpercapita_bz167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.92646365245581,r[:number],0.001)
end

def test_costpercapita_ca167
  r = spreadsheet.costpercapita_ca167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.19927465669525,r[:number],0.001)
end

def test_costpercapita_cc167
  r = spreadsheet.costpercapita_cc167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.06309791708246,r[:number],0.001)
end

def test_costpercapita_cd167
  r = spreadsheet.costpercapita_cd167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2700.370752851278,r[:number],0.001)
end

def test_costpercapita_cf167
  r = spreadsheet.costpercapita_cf167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.201620486244289,r[:number],0.001)
end

def test_costpercapita_cg167
  r = spreadsheet.costpercapita_cg167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch167
  r = spreadsheet.costpercapita_ch167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci167
  r = spreadsheet.costpercapita_ci167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj167
  r = spreadsheet.costpercapita_cj167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck167
  r = spreadsheet.costpercapita_ck167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl167
  r = spreadsheet.costpercapita_cl167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm167
  r = spreadsheet.costpercapita_cm167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn167
  r = spreadsheet.costpercapita_cn167
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp167
  r = spreadsheet.costpercapita_cp167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.8001800540271433,r[:number],0.001)
end

def test_costpercapita_cq167
  r = spreadsheet.costpercapita_cq167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.201620486244289,r[:number],0.001)
end

def test_costpercapita_cr167
  r = spreadsheet.costpercapita_cr167
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c168
  r = spreadsheet.costpercapita_c168
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e168
  r = spreadsheet.costpercapita_e168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18877.918863314648,r[:number],0.001)
end

def test_costpercapita_f168
  r = spreadsheet.costpercapita_f168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19563.76470796059,r[:number],0.001)
end

def test_costpercapita_g168
  r = spreadsheet.costpercapita_g168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24042.980401126304,r[:number],0.001)
end

def test_costpercapita_h168
  r = spreadsheet.costpercapita_h168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27566.705277080207,r[:number],0.001)
end

def test_costpercapita_i168
  r = spreadsheet.costpercapita_i168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29505.069339240683,r[:number],0.001)
end

def test_costpercapita_j168
  r = spreadsheet.costpercapita_j168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30515.466746248723,r[:number],0.001)
end

def test_costpercapita_k168
  r = spreadsheet.costpercapita_k168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30745.88124006857,r[:number],0.001)
end

def test_costpercapita_l168
  r = spreadsheet.costpercapita_l168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30720.982467779708,r[:number],0.001)
end

def test_costpercapita_m168
  r = spreadsheet.costpercapita_m168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30207.814162100873,r[:number],0.001)
end

def test_costpercapita_o168
  r = spreadsheet.costpercapita_o168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1508.129155991696,r[:number],0.001)
end

def test_costpercapita_p168
  r = spreadsheet.costpercapita_p168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1850.5923278188263,r[:number],0.001)
end

def test_costpercapita_q168
  r = spreadsheet.costpercapita_q168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2276.5866183537523,r[:number],0.001)
end

def test_costpercapita_r168
  r = spreadsheet.costpercapita_r168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2717.6625504603453,r[:number],0.001)
end

def test_costpercapita_s168
  r = spreadsheet.costpercapita_s168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3168.7915058755207,r[:number],0.001)
end

def test_costpercapita_t168
  r = spreadsheet.costpercapita_t168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3589.095357228299,r[:number],0.001)
end

def test_costpercapita_u168
  r = spreadsheet.costpercapita_u168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3990.860131102997,r[:number],0.001)
end

def test_costpercapita_v168
  r = spreadsheet.costpercapita_v168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4360.9431938554,r[:number],0.001)
end

def test_costpercapita_w168
  r = spreadsheet.costpercapita_w168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4704.83258845042,r[:number],0.001)
end

def test_costpercapita_y168
  r = spreadsheet.costpercapita_y168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.203402215104363,r[:number],0.001)
end

def test_costpercapita_z168
  r = spreadsheet.costpercapita_z168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.298194589896381,r[:number],0.001)
end

def test_costpercapita_aa168
  r = spreadsheet.costpercapita_aa168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.05994966486603,r[:number],0.001)
end

def test_costpercapita_ab168
  r = spreadsheet.costpercapita_ab168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.64936162971858,r[:number],0.001)
end

def test_costpercapita_ac168
  r = spreadsheet.costpercapita_ac168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.870896965496588,r[:number],0.001)
end

def test_costpercapita_ad168
  r = spreadsheet.costpercapita_ad168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.76130385604575,r[:number],0.001)
end

def test_costpercapita_ae168
  r = spreadsheet.costpercapita_ae168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.742612754900797,r[:number],0.001)
end

def test_costpercapita_af168
  r = spreadsheet.costpercapita_af168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.430383978745123,r[:number],0.001)
end

def test_costpercapita_ag168
  r = spreadsheet.costpercapita_ag168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.575866118644406,r[:number],0.001)
end

def test_costpercapita_ai168
  r = spreadsheet.costpercapita_ai168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20400.251421521447,r[:number],0.001)
end

def test_costpercapita_aj168
  r = spreadsheet.costpercapita_aj168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21429.655230369306,r[:number],0.001)
end

def test_costpercapita_ak168
  r = spreadsheet.costpercapita_ak168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26336.626969144923,r[:number],0.001)
end

def test_costpercapita_al168
  r = spreadsheet.costpercapita_al168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30302.01718917027,r[:number],0.001)
end

def test_costpercapita_am168
  r = spreadsheet.costpercapita_am168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32691.731742081698,r[:number],0.001)
end

def test_costpercapita_an168
  r = spreadsheet.costpercapita_an168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34122.32340733307,r[:number],0.001)
end

def test_costpercapita_ao168
  r = spreadsheet.costpercapita_ao168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34754.48398392647,r[:number],0.001)
end

def test_costpercapita_ap168
  r = spreadsheet.costpercapita_ap168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35099.35604561385,r[:number],0.001)
end

def test_costpercapita_aq168
  r = spreadsheet.costpercapita_aq168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34930.22261666994,r[:number],0.001)
end

def test_costpercapita_as168
  r = spreadsheet.costpercapita_as168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30007.4076228701,r[:number],0.001)
end

def test_costpercapita_at168
  r = spreadsheet.costpercapita_at168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(610893.7676175451,r[:number],0.001)
end

def test_costpercapita_ay168
  r = spreadsheet.costpercapita_ay168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11326.751317988792,r[:number],0.001)
end

def test_costpercapita_az168
  r = spreadsheet.costpercapita_az168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19563.76470796059,r[:number],0.001)
end

def test_costpercapita_ba168
  r = spreadsheet.costpercapita_ba168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24042.980401126304,r[:number],0.001)
end

def test_costpercapita_bb168
  r = spreadsheet.costpercapita_bb168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27566.705277080207,r[:number],0.001)
end

def test_costpercapita_bc168
  r = spreadsheet.costpercapita_bc168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29505.069339240683,r[:number],0.001)
end

def test_costpercapita_bd168
  r = spreadsheet.costpercapita_bd168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30515.46674624872,r[:number],0.001)
end

def test_costpercapita_be168
  r = spreadsheet.costpercapita_be168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30745.88124006857,r[:number],0.001)
end

def test_costpercapita_bf168
  r = spreadsheet.costpercapita_bf168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30720.982467779708,r[:number],0.001)
end

def test_costpercapita_bg168
  r = spreadsheet.costpercapita_bg168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30207.814162100873,r[:number],0.001)
end

def test_costpercapita_bi168
  r = spreadsheet.costpercapita_bi168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11326.751317988792,r[:number],0.001)
end

def test_costpercapita_bj168
  r = spreadsheet.costpercapita_bj168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19563.76470796059,r[:number],0.001)
end

def test_costpercapita_bk168
  r = spreadsheet.costpercapita_bk168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24042.980401126304,r[:number],0.001)
end

def test_costpercapita_bl168
  r = spreadsheet.costpercapita_bl168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27566.705277080207,r[:number],0.001)
end

def test_costpercapita_bm168
  r = spreadsheet.costpercapita_bm168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29505.069339240683,r[:number],0.001)
end

def test_costpercapita_bn168
  r = spreadsheet.costpercapita_bn168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30515.46674624872,r[:number],0.001)
end

def test_costpercapita_bo168
  r = spreadsheet.costpercapita_bo168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30745.88124006857,r[:number],0.001)
end

def test_costpercapita_bp168
  r = spreadsheet.costpercapita_bp168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30720.982467779708,r[:number],0.001)
end

def test_costpercapita_bq168
  r = spreadsheet.costpercapita_bq168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30207.814162100873,r[:number],0.001)
end

def test_costpercapita_bs168
  r = spreadsheet.costpercapita_bs168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12849.083876195591,r[:number],0.001)
end

def test_costpercapita_bt168
  r = spreadsheet.costpercapita_bt168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21429.655230369306,r[:number],0.001)
end

def test_costpercapita_bu168
  r = spreadsheet.costpercapita_bu168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26336.626969144923,r[:number],0.001)
end

def test_costpercapita_bv168
  r = spreadsheet.costpercapita_bv168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30302.01718917027,r[:number],0.001)
end

def test_costpercapita_bw168
  r = spreadsheet.costpercapita_bw168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32691.731742081698,r[:number],0.001)
end

def test_costpercapita_bx168
  r = spreadsheet.costpercapita_bx168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34122.32340733307,r[:number],0.001)
end

def test_costpercapita_by168
  r = spreadsheet.costpercapita_by168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34754.48398392647,r[:number],0.001)
end

def test_costpercapita_bz168
  r = spreadsheet.costpercapita_bz168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35099.35604561385,r[:number],0.001)
end

def test_costpercapita_ca168
  r = spreadsheet.costpercapita_ca168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34930.22261666994,r[:number],0.001)
end

def test_costpercapita_cc168
  r = spreadsheet.costpercapita_cc168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29168.389006722784,r[:number],0.001)
end

def test_costpercapita_cd168
  r = spreadsheet.costpercapita_cd168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(603342.6000722192,r[:number],0.001)
end

def test_costpercapita_cf168
  r = spreadsheet.costpercapita_cf168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7551.16754532586,r[:number],0.001)
end

def test_costpercapita_cg168
  r = spreadsheet.costpercapita_cg168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch168
  r = spreadsheet.costpercapita_ch168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci168
  r = spreadsheet.costpercapita_ci168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj168
  r = spreadsheet.costpercapita_cj168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck168
  r = spreadsheet.costpercapita_ck168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl168
  r = spreadsheet.costpercapita_cl168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm168
  r = spreadsheet.costpercapita_cm168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn168
  r = spreadsheet.costpercapita_cn168
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp168
  r = spreadsheet.costpercapita_cp168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-839.0186161473177,r[:number],0.001)
end

def test_costpercapita_cq168
  r = spreadsheet.costpercapita_cq168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7551.16754532586,r[:number],0.001)
end

def test_costpercapita_cr168
  r = spreadsheet.costpercapita_cr168
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c169
  r = spreadsheet.costpercapita_c169
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e169
  r = spreadsheet.costpercapita_e169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2779.9529644787626,r[:number],0.001)
end

def test_costpercapita_f169
  r = spreadsheet.costpercapita_f169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31161.059498338473,r[:number],0.001)
end

def test_costpercapita_g169
  r = spreadsheet.costpercapita_g169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36627.910853493755,r[:number],0.001)
end

def test_costpercapita_h169
  r = spreadsheet.costpercapita_h169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41787.329287938854,r[:number],0.001)
end

def test_costpercapita_i169
  r = spreadsheet.costpercapita_i169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46924.42189536964,r[:number],0.001)
end

def test_costpercapita_j169
  r = spreadsheet.costpercapita_j169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51785.766670798526,r[:number],0.001)
end

def test_costpercapita_k169
  r = spreadsheet.costpercapita_k169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56508.18715859832,r[:number],0.001)
end

def test_costpercapita_l169
  r = spreadsheet.costpercapita_l169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61122.684295651656,r[:number],0.001)
end

def test_costpercapita_m169
  r = spreadsheet.costpercapita_m169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65552.0272112461,r[:number],0.001)
end

def test_costpercapita_o169
  r = spreadsheet.costpercapita_o169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.48435214393487,r[:number],0.001)
end

def test_costpercapita_p169
  r = spreadsheet.costpercapita_p169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.980920668106,r[:number],0.001)
end

def test_costpercapita_q169
  r = spreadsheet.costpercapita_q169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(604.5288950825172,r[:number],0.001)
end

def test_costpercapita_r169
  r = spreadsheet.costpercapita_r169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(815.6614650226193,r[:number],0.001)
end

def test_costpercapita_s169
  r = spreadsheet.costpercapita_s169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1038.9816604935413,r[:number],0.001)
end

def test_costpercapita_t169
  r = spreadsheet.costpercapita_t169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1276.9647695693466,r[:number],0.001)
end

def test_costpercapita_u169
  r = spreadsheet.costpercapita_u169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1528.1560551937623,r[:number],0.001)
end

def test_costpercapita_v169
  r = spreadsheet.costpercapita_v169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1791.7069176760695,r[:number],0.001)
end

def test_costpercapita_w169
  r = spreadsheet.costpercapita_w169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2067.617921363079,r[:number],0.001)
end

def test_costpercapita_y169
  r = spreadsheet.costpercapita_y169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z169
  r = spreadsheet.costpercapita_z169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa169
  r = spreadsheet.costpercapita_aa169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab169
  r = spreadsheet.costpercapita_ab169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac169
  r = spreadsheet.costpercapita_ac169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad169
  r = spreadsheet.costpercapita_ad169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae169
  r = spreadsheet.costpercapita_ae169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af169
  r = spreadsheet.costpercapita_af169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag169
  r = spreadsheet.costpercapita_ag169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai169
  r = spreadsheet.costpercapita_ai169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2994.4373166226974,r[:number],0.001)
end

def test_costpercapita_aj169
  r = spreadsheet.costpercapita_aj169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31565.04041900658,r[:number],0.001)
end

def test_costpercapita_ak169
  r = spreadsheet.costpercapita_ak169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37232.439748576275,r[:number],0.001)
end

def test_costpercapita_al169
  r = spreadsheet.costpercapita_al169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42602.99075296148,r[:number],0.001)
end

def test_costpercapita_am169
  r = spreadsheet.costpercapita_am169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47963.40355586317,r[:number],0.001)
end

def test_costpercapita_an169
  r = spreadsheet.costpercapita_an169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53062.731440367876,r[:number],0.001)
end

def test_costpercapita_ao169
  r = spreadsheet.costpercapita_ao169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58036.34321379208,r[:number],0.001)
end

def test_costpercapita_ap169
  r = spreadsheet.costpercapita_ap169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62914.391213327726,r[:number],0.001)
end

def test_costpercapita_aq169
  r = spreadsheet.costpercapita_aq169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67619.64513260918,r[:number],0.001)
end

def test_costpercapita_as169
  r = spreadsheet.costpercapita_as169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44887.93586590302,r[:number],0.001)
end

def test_costpercapita_at169
  r = spreadsheet.costpercapita_at169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(917483.9856515379,r[:number],0.001)
end

def test_costpercapita_ay169
  r = spreadsheet.costpercapita_ay169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1667.9717786872575,r[:number],0.001)
end

def test_costpercapita_az169
  r = spreadsheet.costpercapita_az169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31161.059498338473,r[:number],0.001)
end

def test_costpercapita_ba169
  r = spreadsheet.costpercapita_ba169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36627.910853493755,r[:number],0.001)
end

def test_costpercapita_bb169
  r = spreadsheet.costpercapita_bb169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41787.329287938854,r[:number],0.001)
end

def test_costpercapita_bc169
  r = spreadsheet.costpercapita_bc169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46924.42189536964,r[:number],0.001)
end

def test_costpercapita_bd169
  r = spreadsheet.costpercapita_bd169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51785.766670798526,r[:number],0.001)
end

def test_costpercapita_be169
  r = spreadsheet.costpercapita_be169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56508.18715859832,r[:number],0.001)
end

def test_costpercapita_bf169
  r = spreadsheet.costpercapita_bf169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61122.684295651656,r[:number],0.001)
end

def test_costpercapita_bg169
  r = spreadsheet.costpercapita_bg169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65552.0272112461,r[:number],0.001)
end

def test_costpercapita_bi169
  r = spreadsheet.costpercapita_bi169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1667.9717786872575,r[:number],0.001)
end

def test_costpercapita_bj169
  r = spreadsheet.costpercapita_bj169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31161.059498338473,r[:number],0.001)
end

def test_costpercapita_bk169
  r = spreadsheet.costpercapita_bk169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36627.910853493755,r[:number],0.001)
end

def test_costpercapita_bl169
  r = spreadsheet.costpercapita_bl169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41787.329287938854,r[:number],0.001)
end

def test_costpercapita_bm169
  r = spreadsheet.costpercapita_bm169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46924.42189536964,r[:number],0.001)
end

def test_costpercapita_bn169
  r = spreadsheet.costpercapita_bn169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51785.766670798526,r[:number],0.001)
end

def test_costpercapita_bo169
  r = spreadsheet.costpercapita_bo169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56508.18715859832,r[:number],0.001)
end

def test_costpercapita_bp169
  r = spreadsheet.costpercapita_bp169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61122.684295651656,r[:number],0.001)
end

def test_costpercapita_bq169
  r = spreadsheet.costpercapita_bq169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65552.0272112461,r[:number],0.001)
end

def test_costpercapita_bs169
  r = spreadsheet.costpercapita_bs169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1882.4561308311927,r[:number],0.001)
end

def test_costpercapita_bt169
  r = spreadsheet.costpercapita_bt169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31565.04041900658,r[:number],0.001)
end

def test_costpercapita_bu169
  r = spreadsheet.costpercapita_bu169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37232.439748576275,r[:number],0.001)
end

def test_costpercapita_bv169
  r = spreadsheet.costpercapita_bv169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42602.99075296148,r[:number],0.001)
end

def test_costpercapita_bw169
  r = spreadsheet.costpercapita_bw169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47963.40355586317,r[:number],0.001)
end

def test_costpercapita_bx169
  r = spreadsheet.costpercapita_bx169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53062.731440367876,r[:number],0.001)
end

def test_costpercapita_by169
  r = spreadsheet.costpercapita_by169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58036.34321379208,r[:number],0.001)
end

def test_costpercapita_bz169
  r = spreadsheet.costpercapita_bz169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62914.391213327726,r[:number],0.001)
end

def test_costpercapita_ca169
  r = spreadsheet.costpercapita_ca169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67619.64513260918,r[:number],0.001)
end

def test_costpercapita_cc169
  r = spreadsheet.costpercapita_cc169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44764.38240081506,r[:number],0.001)
end

def test_costpercapita_cd169
  r = spreadsheet.costpercapita_cd169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(916372.0044657463,r[:number],0.001)
end

def test_costpercapita_cf169
  r = spreadsheet.costpercapita_cf169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1111.9811857915054,r[:number],0.001)
end

def test_costpercapita_cg169
  r = spreadsheet.costpercapita_cg169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch169
  r = spreadsheet.costpercapita_ch169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci169
  r = spreadsheet.costpercapita_ci169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj169
  r = spreadsheet.costpercapita_cj169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck169
  r = spreadsheet.costpercapita_ck169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl169
  r = spreadsheet.costpercapita_cl169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm169
  r = spreadsheet.costpercapita_cm169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn169
  r = spreadsheet.costpercapita_cn169
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp169
  r = spreadsheet.costpercapita_cp169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-123.55346508794501,r[:number],0.001)
end

def test_costpercapita_cq169
  r = spreadsheet.costpercapita_cq169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1111.9811857915054,r[:number],0.001)
end

def test_costpercapita_cr169
  r = spreadsheet.costpercapita_cr169
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c170
  r = spreadsheet.costpercapita_c170
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e170
  r = spreadsheet.costpercapita_e170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27937.14845310151,r[:number],0.001)
end

def test_costpercapita_f170
  r = spreadsheet.costpercapita_f170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62551.2875401384,r[:number],0.001)
end

def test_costpercapita_g170
  r = spreadsheet.costpercapita_g170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80008.26922205128,r[:number],0.001)
end

def test_costpercapita_h170
  r = spreadsheet.costpercapita_h170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100389.90472355919,r[:number],0.001)
end

def test_costpercapita_i170
  r = spreadsheet.costpercapita_i170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121015.70167872391,r[:number],0.001)
end

def test_costpercapita_j170
  r = spreadsheet.costpercapita_j170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143159.9201024483,r[:number],0.001)
end

def test_costpercapita_k170
  r = spreadsheet.costpercapita_k170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166393.3973840339,r[:number],0.001)
end

def test_costpercapita_l170
  r = spreadsheet.costpercapita_l170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190041.5931152845,r[:number],0.001)
end

def test_costpercapita_m170
  r = spreadsheet.costpercapita_m170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215067.05961577393,r[:number],0.001)
end

def test_costpercapita_o170
  r = spreadsheet.costpercapita_o170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36067.56466045361,r[:number],0.001)
end

def test_costpercapita_p170
  r = spreadsheet.costpercapita_p170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49099.47143431118,r[:number],0.001)
end

def test_costpercapita_q170
  r = spreadsheet.costpercapita_q170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60188.50201585408,r[:number],0.001)
end

def test_costpercapita_r170
  r = spreadsheet.costpercapita_r170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69859.69023499922,r[:number],0.001)
end

def test_costpercapita_s170
  r = spreadsheet.costpercapita_s170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76364.21442618818,r[:number],0.001)
end

def test_costpercapita_t170
  r = spreadsheet.costpercapita_t170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79046.8139752113,r[:number],0.001)
end

def test_costpercapita_u170
  r = spreadsheet.costpercapita_u170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76672.08910932006,r[:number],0.001)
end

def test_costpercapita_v170
  r = spreadsheet.costpercapita_v170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67866.91724535616,r[:number],0.001)
end

def test_costpercapita_w170
  r = spreadsheet.costpercapita_w170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51788.40185525456,r[:number],0.001)
end

def test_costpercapita_y170
  r = spreadsheet.costpercapita_y170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z170
  r = spreadsheet.costpercapita_z170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa170
  r = spreadsheet.costpercapita_aa170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab170
  r = spreadsheet.costpercapita_ab170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac170
  r = spreadsheet.costpercapita_ac170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad170
  r = spreadsheet.costpercapita_ad170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae170
  r = spreadsheet.costpercapita_ae170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af170
  r = spreadsheet.costpercapita_af170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag170
  r = spreadsheet.costpercapita_ag170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai170
  r = spreadsheet.costpercapita_ai170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64004.713113555124,r[:number],0.001)
end

def test_costpercapita_aj170
  r = spreadsheet.costpercapita_aj170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111650.75897444959,r[:number],0.001)
end

def test_costpercapita_ak170
  r = spreadsheet.costpercapita_ak170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140196.77123790534,r[:number],0.001)
end

def test_costpercapita_al170
  r = spreadsheet.costpercapita_al170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170249.5949585584,r[:number],0.001)
end

def test_costpercapita_am170
  r = spreadsheet.costpercapita_am170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197379.91610491212,r[:number],0.001)
end

def test_costpercapita_an170
  r = spreadsheet.costpercapita_an170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222206.73407765952,r[:number],0.001)
end

def test_costpercapita_ao170
  r = spreadsheet.costpercapita_ao170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243065.48649335394,r[:number],0.001)
end

def test_costpercapita_ap170
  r = spreadsheet.costpercapita_ap170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257908.51036064065,r[:number],0.001)
end

def test_costpercapita_aq170
  r = spreadsheet.costpercapita_aq170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266855.4614710285,r[:number],0.001)
end

def test_costpercapita_as170
  r = spreadsheet.costpercapita_as170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185946.4385324515,r[:number],0.001)
end

def test_costpercapita_at170
  r = spreadsheet.costpercapita_at170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3688226.26693006,r[:number],0.001)
end

def test_costpercapita_ay170
  r = spreadsheet.costpercapita_ay170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16762.2890718609,r[:number],0.001)
end

def test_costpercapita_az170
  r = spreadsheet.costpercapita_az170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62551.2875401384,r[:number],0.001)
end

def test_costpercapita_ba170
  r = spreadsheet.costpercapita_ba170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80008.26922205128,r[:number],0.001)
end

def test_costpercapita_bb170
  r = spreadsheet.costpercapita_bb170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100389.90472355919,r[:number],0.001)
end

def test_costpercapita_bc170
  r = spreadsheet.costpercapita_bc170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121015.70167872391,r[:number],0.001)
end

def test_costpercapita_bd170
  r = spreadsheet.costpercapita_bd170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143159.9201024483,r[:number],0.001)
end

def test_costpercapita_be170
  r = spreadsheet.costpercapita_be170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166393.3973840339,r[:number],0.001)
end

def test_costpercapita_bf170
  r = spreadsheet.costpercapita_bf170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190041.5931152845,r[:number],0.001)
end

def test_costpercapita_bg170
  r = spreadsheet.costpercapita_bg170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215067.05961577393,r[:number],0.001)
end

def test_costpercapita_bi170
  r = spreadsheet.costpercapita_bi170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16762.2890718609,r[:number],0.001)
end

def test_costpercapita_bj170
  r = spreadsheet.costpercapita_bj170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62551.2875401384,r[:number],0.001)
end

def test_costpercapita_bk170
  r = spreadsheet.costpercapita_bk170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80008.26922205128,r[:number],0.001)
end

def test_costpercapita_bl170
  r = spreadsheet.costpercapita_bl170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100389.90472355919,r[:number],0.001)
end

def test_costpercapita_bm170
  r = spreadsheet.costpercapita_bm170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121015.70167872391,r[:number],0.001)
end

def test_costpercapita_bn170
  r = spreadsheet.costpercapita_bn170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143159.9201024483,r[:number],0.001)
end

def test_costpercapita_bo170
  r = spreadsheet.costpercapita_bo170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166393.3973840339,r[:number],0.001)
end

def test_costpercapita_bp170
  r = spreadsheet.costpercapita_bp170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190041.5931152845,r[:number],0.001)
end

def test_costpercapita_bq170
  r = spreadsheet.costpercapita_bq170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215067.05961577393,r[:number],0.001)
end

def test_costpercapita_bs170
  r = spreadsheet.costpercapita_bs170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52829.853732314514,r[:number],0.001)
end

def test_costpercapita_bt170
  r = spreadsheet.costpercapita_bt170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111650.75897444959,r[:number],0.001)
end

def test_costpercapita_bu170
  r = spreadsheet.costpercapita_bu170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140196.77123790534,r[:number],0.001)
end

def test_costpercapita_bv170
  r = spreadsheet.costpercapita_bv170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170249.5949585584,r[:number],0.001)
end

def test_costpercapita_bw170
  r = spreadsheet.costpercapita_bw170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197379.91610491212,r[:number],0.001)
end

def test_costpercapita_bx170
  r = spreadsheet.costpercapita_bx170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222206.73407765955,r[:number],0.001)
end

def test_costpercapita_by170
  r = spreadsheet.costpercapita_by170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243065.48649335394,r[:number],0.001)
end

def test_costpercapita_bz170
  r = spreadsheet.costpercapita_bz170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257908.51036064065,r[:number],0.001)
end

def test_costpercapita_ca170
  r = spreadsheet.costpercapita_ca170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266855.4614710285,r[:number],0.001)
end

def test_costpercapita_cc170
  r = spreadsheet.costpercapita_cc170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184704.7874900914,r[:number],0.001)
end

def test_costpercapita_cd170
  r = spreadsheet.costpercapita_cd170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3677051.407548819,r[:number],0.001)
end

def test_costpercapita_cf170
  r = spreadsheet.costpercapita_cf170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11174.859381240605,r[:number],0.001)
end

def test_costpercapita_cg170
  r = spreadsheet.costpercapita_cg170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch170
  r = spreadsheet.costpercapita_ch170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci170
  r = spreadsheet.costpercapita_ci170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj170
  r = spreadsheet.costpercapita_cj170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck170
  r = spreadsheet.costpercapita_ck170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl170
  r = spreadsheet.costpercapita_cl170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm170
  r = spreadsheet.costpercapita_cm170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn170
  r = spreadsheet.costpercapita_cn170
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp170
  r = spreadsheet.costpercapita_cp170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1241.6510423600673,r[:number],0.001)
end

def test_costpercapita_cq170
  r = spreadsheet.costpercapita_cq170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11174.859381240605,r[:number],0.001)
end

def test_costpercapita_cr170
  r = spreadsheet.costpercapita_cr170
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c171
  r = spreadsheet.costpercapita_c171
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e171
  r = spreadsheet.costpercapita_e171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number],0.001)
end

def test_costpercapita_f171
  r = spreadsheet.costpercapita_f171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_g171
  r = spreadsheet.costpercapita_g171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number],0.001)
end

def test_costpercapita_h171
  r = spreadsheet.costpercapita_h171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_i171
  r = spreadsheet.costpercapita_i171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_j171
  r = spreadsheet.costpercapita_j171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number],0.001)
end

def test_costpercapita_k171
  r = spreadsheet.costpercapita_k171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_l171
  r = spreadsheet.costpercapita_l171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number],0.001)
end

def test_costpercapita_m171
  r = spreadsheet.costpercapita_m171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number],0.001)
end

def test_costpercapita_o171
  r = spreadsheet.costpercapita_o171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number],0.001)
end

def test_costpercapita_p171
  r = spreadsheet.costpercapita_p171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number],0.001)
end

def test_costpercapita_q171
  r = spreadsheet.costpercapita_q171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number],0.001)
end

def test_costpercapita_r171
  r = spreadsheet.costpercapita_r171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number],0.001)
end

def test_costpercapita_s171
  r = spreadsheet.costpercapita_s171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number],0.001)
end

def test_costpercapita_t171
  r = spreadsheet.costpercapita_t171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number],0.001)
end

def test_costpercapita_u171
  r = spreadsheet.costpercapita_u171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number],0.001)
end

def test_costpercapita_v171
  r = spreadsheet.costpercapita_v171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number],0.001)
end

def test_costpercapita_w171
  r = spreadsheet.costpercapita_w171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number],0.001)
end

def test_costpercapita_y171
  r = spreadsheet.costpercapita_y171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z171
  r = spreadsheet.costpercapita_z171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa171
  r = spreadsheet.costpercapita_aa171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab171
  r = spreadsheet.costpercapita_ab171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac171
  r = spreadsheet.costpercapita_ac171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad171
  r = spreadsheet.costpercapita_ad171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae171
  r = spreadsheet.costpercapita_ae171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af171
  r = spreadsheet.costpercapita_af171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag171
  r = spreadsheet.costpercapita_ag171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai171
  r = spreadsheet.costpercapita_ai171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number],0.001)
end

def test_costpercapita_aj171
  r = spreadsheet.costpercapita_aj171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number],0.001)
end

def test_costpercapita_ak171
  r = spreadsheet.costpercapita_ak171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number],0.001)
end

def test_costpercapita_al171
  r = spreadsheet.costpercapita_al171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number],0.001)
end

def test_costpercapita_am171
  r = spreadsheet.costpercapita_am171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number],0.001)
end

def test_costpercapita_an171
  r = spreadsheet.costpercapita_an171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number],0.001)
end

def test_costpercapita_ao171
  r = spreadsheet.costpercapita_ao171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number],0.001)
end

def test_costpercapita_ap171
  r = spreadsheet.costpercapita_ap171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number],0.001)
end

def test_costpercapita_aq171
  r = spreadsheet.costpercapita_aq171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number],0.001)
end

def test_costpercapita_as171
  r = spreadsheet.costpercapita_as171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number],0.001)
end

def test_costpercapita_at171
  r = spreadsheet.costpercapita_at171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number],0.001)
end

def test_costpercapita_ay171
  r = spreadsheet.costpercapita_ay171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number],0.001)
end

def test_costpercapita_az171
  r = spreadsheet.costpercapita_az171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_ba171
  r = spreadsheet.costpercapita_ba171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number],0.001)
end

def test_costpercapita_bb171
  r = spreadsheet.costpercapita_bb171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_bc171
  r = spreadsheet.costpercapita_bc171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_bd171
  r = spreadsheet.costpercapita_bd171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number],0.001)
end

def test_costpercapita_be171
  r = spreadsheet.costpercapita_be171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_bf171
  r = spreadsheet.costpercapita_bf171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number],0.001)
end

def test_costpercapita_bg171
  r = spreadsheet.costpercapita_bg171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number],0.001)
end

def test_costpercapita_bi171
  r = spreadsheet.costpercapita_bi171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number],0.001)
end

def test_costpercapita_bj171
  r = spreadsheet.costpercapita_bj171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_bk171
  r = spreadsheet.costpercapita_bk171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number],0.001)
end

def test_costpercapita_bl171
  r = spreadsheet.costpercapita_bl171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_bm171
  r = spreadsheet.costpercapita_bm171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_bn171
  r = spreadsheet.costpercapita_bn171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number],0.001)
end

def test_costpercapita_bo171
  r = spreadsheet.costpercapita_bo171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_bp171
  r = spreadsheet.costpercapita_bp171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number],0.001)
end

def test_costpercapita_bq171
  r = spreadsheet.costpercapita_bq171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number],0.001)
end

def test_costpercapita_bs171
  r = spreadsheet.costpercapita_bs171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.893309368875432,r[:number],0.001)
end

def test_costpercapita_bt171
  r = spreadsheet.costpercapita_bt171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number],0.001)
end

def test_costpercapita_bu171
  r = spreadsheet.costpercapita_bu171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number],0.001)
end

def test_costpercapita_bv171
  r = spreadsheet.costpercapita_bv171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number],0.001)
end

def test_costpercapita_bw171
  r = spreadsheet.costpercapita_bw171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number],0.001)
end

def test_costpercapita_bx171
  r = spreadsheet.costpercapita_bx171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number],0.001)
end

def test_costpercapita_by171
  r = spreadsheet.costpercapita_by171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number],0.001)
end

def test_costpercapita_bz171
  r = spreadsheet.costpercapita_bz171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number],0.001)
end

def test_costpercapita_ca171
  r = spreadsheet.costpercapita_ca171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number],0.001)
end

def test_costpercapita_cc171
  r = spreadsheet.costpercapita_cc171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.528436409641897,r[:number],0.001)
end

def test_costpercapita_cd171
  r = spreadsheet.costpercapita_cd171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.19160492603066,r[:number],0.001)
end

def test_costpercapita_cf171
  r = spreadsheet.costpercapita_cf171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8209189795268315,r[:number],0.001)
end

def test_costpercapita_cg171
  r = spreadsheet.costpercapita_cg171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch171
  r = spreadsheet.costpercapita_ch171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci171
  r = spreadsheet.costpercapita_ci171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj171
  r = spreadsheet.costpercapita_cj171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck171
  r = spreadsheet.costpercapita_ck171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl171
  r = spreadsheet.costpercapita_cl171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm171
  r = spreadsheet.costpercapita_cm171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn171
  r = spreadsheet.costpercapita_cn171
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp171
  r = spreadsheet.costpercapita_cp171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.20232433105853684,r[:number],0.001)
end

def test_costpercapita_cq171
  r = spreadsheet.costpercapita_cq171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.8209189795268315,r[:number],0.001)
end

def test_costpercapita_cr171
  r = spreadsheet.costpercapita_cr171
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c172
  r = spreadsheet.costpercapita_c172
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e172
  r = spreadsheet.costpercapita_e172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f172
  r = spreadsheet.costpercapita_f172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number],0.001)
end

def test_costpercapita_g172
  r = spreadsheet.costpercapita_g172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063093,r[:number],0.001)
end

def test_costpercapita_h172
  r = spreadsheet.costpercapita_h172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number],0.001)
end

def test_costpercapita_i172
  r = spreadsheet.costpercapita_i172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number],0.001)
end

def test_costpercapita_j172
  r = spreadsheet.costpercapita_j172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number],0.001)
end

def test_costpercapita_k172
  r = spreadsheet.costpercapita_k172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number],0.001)
end

def test_costpercapita_l172
  r = spreadsheet.costpercapita_l172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number],0.001)
end

def test_costpercapita_m172
  r = spreadsheet.costpercapita_m172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number],0.001)
end

def test_costpercapita_o172
  r = spreadsheet.costpercapita_o172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p172
  r = spreadsheet.costpercapita_p172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.04679482364530887,r[:number],0.001)
end

def test_costpercapita_q172
  r = spreadsheet.costpercapita_q172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.10662591036335282,r[:number],0.001)
end

def test_costpercapita_r172
  r = spreadsheet.costpercapita_r172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.10115207521230941,r[:number],0.001)
end

def test_costpercapita_s172
  r = spreadsheet.costpercapita_s172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09636321557658548,r[:number],0.001)
end

def test_costpercapita_t172
  r = spreadsheet.costpercapita_t172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09219595763383641,r[:number],0.001)
end

def test_costpercapita_u172
  r = spreadsheet.costpercapita_u172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.09002532183418638,r[:number],0.001)
end

def test_costpercapita_v172
  r = spreadsheet.costpercapita_v172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08648831671431914,r[:number],0.001)
end

def test_costpercapita_w172
  r = spreadsheet.costpercapita_w172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.08323219105211166,r[:number],0.001)
end

def test_costpercapita_y172
  r = spreadsheet.costpercapita_y172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z172
  r = spreadsheet.costpercapita_z172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa172
  r = spreadsheet.costpercapita_aa172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab172
  r = spreadsheet.costpercapita_ab172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac172
  r = spreadsheet.costpercapita_ac172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad172
  r = spreadsheet.costpercapita_ad172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae172
  r = spreadsheet.costpercapita_ae172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af172
  r = spreadsheet.costpercapita_af172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag172
  r = spreadsheet.costpercapita_ag172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai172
  r = spreadsheet.costpercapita_ai172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj172
  r = spreadsheet.costpercapita_aj172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number],0.001)
end

def test_costpercapita_ak172
  r = spreadsheet.costpercapita_ak172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874474584696618,r[:number],0.001)
end

def test_costpercapita_al172
  r = spreadsheet.costpercapita_al172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number],0.001)
end

def test_costpercapita_am172
  r = spreadsheet.costpercapita_am172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number],0.001)
end

def test_costpercapita_an172
  r = spreadsheet.costpercapita_an172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number],0.001)
end

def test_costpercapita_ao172
  r = spreadsheet.costpercapita_ao172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number],0.001)
end

def test_costpercapita_ap172
  r = spreadsheet.costpercapita_ap172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.828800797900048,r[:number],0.001)
end

def test_costpercapita_aq172
  r = spreadsheet.costpercapita_aq172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number],0.001)
end

def test_costpercapita_as172
  r = spreadsheet.costpercapita_as172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number],0.001)
end

def test_costpercapita_at172
  r = spreadsheet.costpercapita_at172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number],0.001)
end

def test_costpercapita_ay172
  r = spreadsheet.costpercapita_ay172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az172
  r = spreadsheet.costpercapita_az172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number],0.001)
end

def test_costpercapita_ba172
  r = spreadsheet.costpercapita_ba172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063093,r[:number],0.001)
end

def test_costpercapita_bb172
  r = spreadsheet.costpercapita_bb172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number],0.001)
end

def test_costpercapita_bc172
  r = spreadsheet.costpercapita_bc172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number],0.001)
end

def test_costpercapita_bd172
  r = spreadsheet.costpercapita_bd172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number],0.001)
end

def test_costpercapita_be172
  r = spreadsheet.costpercapita_be172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number],0.001)
end

def test_costpercapita_bf172
  r = spreadsheet.costpercapita_bf172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number],0.001)
end

def test_costpercapita_bg172
  r = spreadsheet.costpercapita_bg172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number],0.001)
end

def test_costpercapita_bi172
  r = spreadsheet.costpercapita_bi172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj172
  r = spreadsheet.costpercapita_bj172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number],0.001)
end

def test_costpercapita_bk172
  r = spreadsheet.costpercapita_bk172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063093,r[:number],0.001)
end

def test_costpercapita_bl172
  r = spreadsheet.costpercapita_bl172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number],0.001)
end

def test_costpercapita_bm172
  r = spreadsheet.costpercapita_bm172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number],0.001)
end

def test_costpercapita_bn172
  r = spreadsheet.costpercapita_bn172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number],0.001)
end

def test_costpercapita_bo172
  r = spreadsheet.costpercapita_bo172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number],0.001)
end

def test_costpercapita_bp172
  r = spreadsheet.costpercapita_bp172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number],0.001)
end

def test_costpercapita_bq172
  r = spreadsheet.costpercapita_bq172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number],0.001)
end

def test_costpercapita_bs172
  r = spreadsheet.costpercapita_bs172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt172
  r = spreadsheet.costpercapita_bt172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number],0.001)
end

def test_costpercapita_bu172
  r = spreadsheet.costpercapita_bu172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874474584696618,r[:number],0.001)
end

def test_costpercapita_bv172
  r = spreadsheet.costpercapita_bv172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number],0.001)
end

def test_costpercapita_bw172
  r = spreadsheet.costpercapita_bw172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number],0.001)
end

def test_costpercapita_bx172
  r = spreadsheet.costpercapita_bx172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number],0.001)
end

def test_costpercapita_by172
  r = spreadsheet.costpercapita_by172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number],0.001)
end

def test_costpercapita_bz172
  r = spreadsheet.costpercapita_bz172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8288007979000485,r[:number],0.001)
end

def test_costpercapita_ca172
  r = spreadsheet.costpercapita_ca172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number],0.001)
end

def test_costpercapita_cc172
  r = spreadsheet.costpercapita_cc172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number],0.001)
end

def test_costpercapita_cd172
  r = spreadsheet.costpercapita_cd172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number],0.001)
end

def test_costpercapita_cf172
  r = spreadsheet.costpercapita_cf172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg172
  r = spreadsheet.costpercapita_cg172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch172
  r = spreadsheet.costpercapita_ch172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci172
  r = spreadsheet.costpercapita_ci172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj172
  r = spreadsheet.costpercapita_cj172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck172
  r = spreadsheet.costpercapita_ck172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl172
  r = spreadsheet.costpercapita_cl172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm172
  r = spreadsheet.costpercapita_cm172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn172
  r = spreadsheet.costpercapita_cn172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp172
  r = spreadsheet.costpercapita_cp172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cq172
  r = spreadsheet.costpercapita_cq172
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cr172
  r = spreadsheet.costpercapita_cr172
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c173
  r = spreadsheet.costpercapita_c173
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e173
  r = spreadsheet.costpercapita_e173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49911.94793788667,r[:number],0.001)
end

def test_costpercapita_f173
  r = spreadsheet.costpercapita_f173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114902.02199532514,r[:number],0.001)
end

def test_costpercapita_g173
  r = spreadsheet.costpercapita_g173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142460.84296253868,r[:number],0.001)
end

def test_costpercapita_h173
  r = spreadsheet.costpercapita_h173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171720.29191627473,r[:number],0.001)
end

def test_costpercapita_i173
  r = spreadsheet.costpercapita_i173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199599.65821687158,r[:number],0.001)
end

def test_costpercapita_j173
  r = spreadsheet.costpercapita_j173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227797.54437186965,r[:number],0.001)
end

def test_costpercapita_k173
  r = spreadsheet.costpercapita_k173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256262.05515322636,r[:number],0.001)
end

def test_costpercapita_l173
  r = spreadsheet.costpercapita_l173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284720.9032186799,r[:number],0.001)
end

def test_costpercapita_m173
  r = spreadsheet.costpercapita_m173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313854.40084577445,r[:number],0.001)
end

def test_costpercapita_o173
  r = spreadsheet.costpercapita_o173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37921.76897032013,r[:number],0.001)
end

def test_costpercapita_p173
  r = spreadsheet.costpercapita_p173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51481.788417674514,r[:number],0.001)
end

def test_costpercapita_q173
  r = spreadsheet.costpercapita_q173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63193.70670091404,r[:number],0.001)
end

def test_costpercapita_r173
  r = spreadsheet.costpercapita_r173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73518.34974845032,r[:number],0.001)
end

def test_costpercapita_s173
  r = spreadsheet.costpercapita_s173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80694.76573059511,r[:number],0.001)
end

def test_costpercapita_t173
  r = spreadsheet.costpercapita_t173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84033.69034793146,r[:number],0.001)
end

def test_costpercapita_u173
  r = spreadsheet.costpercapita_u173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82310.3729696937,r[:number],0.001)
end

def test_costpercapita_v173
  r = spreadsheet.costpercapita_v173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74138.01936358571,r[:number],0.001)
end

def test_costpercapita_w173
  r = spreadsheet.costpercapita_w173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58678.188145291875,r[:number],0.001)
end

def test_costpercapita_y173
  r = spreadsheet.costpercapita_y173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26445.42173109232,r[:number],0.001)
end

def test_costpercapita_z173
  r = spreadsheet.costpercapita_z173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39049.41777556105,r[:number],0.001)
end

def test_costpercapita_aa173
  r = spreadsheet.costpercapita_aa173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50580.366280586444,r[:number],0.001)
end

def test_costpercapita_ab173
  r = spreadsheet.costpercapita_ab173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61088.78251240175,r[:number],0.001)
end

def test_costpercapita_ac173
  r = spreadsheet.costpercapita_ac173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70977.57623022041,r[:number],0.001)
end

def test_costpercapita_ad173
  r = spreadsheet.costpercapita_ad173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81273.59842069623,r[:number],0.001)
end

def test_costpercapita_ae173
  r = spreadsheet.costpercapita_ae173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91548.59814349512,r[:number],0.001)
end

def test_costpercapita_af173
  r = spreadsheet.costpercapita_af173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101812.8495475771,r[:number],0.001)
end

def test_costpercapita_ag173
  r = spreadsheet.costpercapita_ag173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111910.23725053896,r[:number],0.001)
end

def test_costpercapita_ai173
  r = spreadsheet.costpercapita_ai173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114279.13863929911,r[:number],0.001)
end

def test_costpercapita_aj173
  r = spreadsheet.costpercapita_aj173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205433.22818856072,r[:number],0.001)
end

def test_costpercapita_ak173
  r = spreadsheet.costpercapita_ak173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256234.91594403912,r[:number],0.001)
end

def test_costpercapita_al173
  r = spreadsheet.costpercapita_al173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306327.4241771268,r[:number],0.001)
end

def test_costpercapita_am173
  r = spreadsheet.costpercapita_am173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351272.00017768715,r[:number],0.001)
end

def test_costpercapita_an173
  r = spreadsheet.costpercapita_an173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393104.8331404972,r[:number],0.001)
end

def test_costpercapita_ao173
  r = spreadsheet.costpercapita_ao173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430121.0262664152,r[:number],0.001)
end

def test_costpercapita_ap173
  r = spreadsheet.costpercapita_ap173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460671.7721298427,r[:number],0.001)
end

def test_costpercapita_aq173
  r = spreadsheet.costpercapita_aq173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484442.82624160533,r[:number],0.001)
end

def test_costpercapita_as173
  r = spreadsheet.costpercapita_as173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(333543.01832278597,r[:number],0.001)
end

def test_costpercapita_at173
  r = spreadsheet.costpercapita_at173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6632229.303499,r[:number],0.001)
end

def test_costpercapita_ay173
  r = spreadsheet.costpercapita_ay173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29947.168762732,r[:number],0.001)
end

def test_costpercapita_az173
  r = spreadsheet.costpercapita_az173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114902.02199532514,r[:number],0.001)
end

def test_costpercapita_ba173
  r = spreadsheet.costpercapita_ba173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142460.84296253868,r[:number],0.001)
end

def test_costpercapita_bb173
  r = spreadsheet.costpercapita_bb173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171720.29191627473,r[:number],0.001)
end

def test_costpercapita_bc173
  r = spreadsheet.costpercapita_bc173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199599.65821687158,r[:number],0.001)
end

def test_costpercapita_bd173
  r = spreadsheet.costpercapita_bd173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227797.54437186965,r[:number],0.001)
end

def test_costpercapita_be173
  r = spreadsheet.costpercapita_be173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256262.05515322636,r[:number],0.001)
end

def test_costpercapita_bf173
  r = spreadsheet.costpercapita_bf173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284720.9032186799,r[:number],0.001)
end

def test_costpercapita_bg173
  r = spreadsheet.costpercapita_bg173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313854.40084577445,r[:number],0.001)
end

def test_costpercapita_bi173
  r = spreadsheet.costpercapita_bi173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29947.168762732,r[:number],0.001)
end

def test_costpercapita_bj173
  r = spreadsheet.costpercapita_bj173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114902.02199532514,r[:number],0.001)
end

def test_costpercapita_bk173
  r = spreadsheet.costpercapita_bk173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142460.84296253868,r[:number],0.001)
end

def test_costpercapita_bl173
  r = spreadsheet.costpercapita_bl173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171720.29191627473,r[:number],0.001)
end

def test_costpercapita_bm173
  r = spreadsheet.costpercapita_bm173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199599.65821687158,r[:number],0.001)
end

def test_costpercapita_bn173
  r = spreadsheet.costpercapita_bn173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227797.54437186965,r[:number],0.001)
end

def test_costpercapita_bo173
  r = spreadsheet.costpercapita_bo173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256262.05515322636,r[:number],0.001)
end

def test_costpercapita_bp173
  r = spreadsheet.costpercapita_bp173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284720.9032186799,r[:number],0.001)
end

def test_costpercapita_bq173
  r = spreadsheet.costpercapita_bq173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313854.40084577445,r[:number],0.001)
end

def test_costpercapita_bs173
  r = spreadsheet.costpercapita_bs173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94314.35946414445,r[:number],0.001)
end

def test_costpercapita_bt173
  r = spreadsheet.costpercapita_bt173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205433.22818856072,r[:number],0.001)
end

def test_costpercapita_bu173
  r = spreadsheet.costpercapita_bu173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256234.91594403912,r[:number],0.001)
end

def test_costpercapita_bv173
  r = spreadsheet.costpercapita_bv173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(306327.4241771268,r[:number],0.001)
end

def test_costpercapita_bw173
  r = spreadsheet.costpercapita_bw173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351272.00017768715,r[:number],0.001)
end

def test_costpercapita_bx173
  r = spreadsheet.costpercapita_bx173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393104.83314049727,r[:number],0.001)
end

def test_costpercapita_by173
  r = spreadsheet.costpercapita_by173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430121.0262664152,r[:number],0.001)
end

def test_costpercapita_bz173
  r = spreadsheet.costpercapita_bz173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460671.7721298427,r[:number],0.001)
end

def test_costpercapita_ca173
  r = spreadsheet.costpercapita_ca173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484442.82624160533,r[:number],0.001)
end

def test_costpercapita_cc173
  r = spreadsheet.costpercapita_cc173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(331324.7095255466,r[:number],0.001)
end

def test_costpercapita_cd173
  r = spreadsheet.costpercapita_cd173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6612264.524323845,r[:number],0.001)
end

def test_costpercapita_cf173
  r = spreadsheet.costpercapita_cf173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-19964.779175154672,r[:number],0.001)
end

def test_costpercapita_cg173
  r = spreadsheet.costpercapita_cg173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ch173
  r = spreadsheet.costpercapita_ch173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ci173
  r = spreadsheet.costpercapita_ci173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cj173
  r = spreadsheet.costpercapita_cj173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ck173
  r = spreadsheet.costpercapita_ck173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cl173
  r = spreadsheet.costpercapita_cl173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cm173
  r = spreadsheet.costpercapita_cm173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cn173
  r = spreadsheet.costpercapita_cn173
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cp173
  r = spreadsheet.costpercapita_cp173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2218.308797239408,r[:number],0.001)
end

def test_costpercapita_cq173
  r = spreadsheet.costpercapita_cq173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-19964.779175154672,r[:number],0.001)
end

def test_costpercapita_cr173
  r = spreadsheet.costpercapita_cr173
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e174
  r = spreadsheet.costpercapita_e174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f174
  r = spreadsheet.costpercapita_f174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g174
  r = spreadsheet.costpercapita_g174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h174
  r = spreadsheet.costpercapita_h174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i174
  r = spreadsheet.costpercapita_i174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j174
  r = spreadsheet.costpercapita_j174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k174
  r = spreadsheet.costpercapita_k174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l174
  r = spreadsheet.costpercapita_l174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m174
  r = spreadsheet.costpercapita_m174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.820766091346741e-11,r[:number],0.001)
end

def test_costpercapita_o174
  r = spreadsheet.costpercapita_o174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p174
  r = spreadsheet.costpercapita_p174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q174
  r = spreadsheet.costpercapita_q174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r174
  r = spreadsheet.costpercapita_r174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s174
  r = spreadsheet.costpercapita_s174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t174
  r = spreadsheet.costpercapita_t174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.4551915228366852e-11,r[:number],0.001)
end

def test_costpercapita_u174
  r = spreadsheet.costpercapita_u174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v174
  r = spreadsheet.costpercapita_v174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w174
  r = spreadsheet.costpercapita_w174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y174
  r = spreadsheet.costpercapita_y174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z174
  r = spreadsheet.costpercapita_z174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa174
  r = spreadsheet.costpercapita_aa174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab174
  r = spreadsheet.costpercapita_ab174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-7.275957614183426e-12,r[:number],0.001)
end

def test_costpercapita_ac174
  r = spreadsheet.costpercapita_ac174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad174
  r = spreadsheet.costpercapita_ad174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae174
  r = spreadsheet.costpercapita_ae174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af174
  r = spreadsheet.costpercapita_af174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag174
  r = spreadsheet.costpercapita_ag174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai174
  r = spreadsheet.costpercapita_ai174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj174
  r = spreadsheet.costpercapita_aj174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak174
  r = spreadsheet.costpercapita_ak174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al174
  r = spreadsheet.costpercapita_al174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am174
  r = spreadsheet.costpercapita_am174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an174
  r = spreadsheet.costpercapita_an174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao174
  r = spreadsheet.costpercapita_ao174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap174
  r = spreadsheet.costpercapita_ap174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq174
  r = spreadsheet.costpercapita_aq174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as174
  r = spreadsheet.costpercapita_as174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at174
  r = spreadsheet.costpercapita_at174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay174
  r = spreadsheet.costpercapita_ay174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_az174
  r = spreadsheet.costpercapita_az174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ba174
  r = spreadsheet.costpercapita_ba174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bb174
  r = spreadsheet.costpercapita_bb174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bc174
  r = spreadsheet.costpercapita_bc174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bd174
  r = spreadsheet.costpercapita_bd174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_be174
  r = spreadsheet.costpercapita_be174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bf174
  r = spreadsheet.costpercapita_bf174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bg174
  r = spreadsheet.costpercapita_bg174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.820766091346741e-11,r[:number],0.001)
end

def test_costpercapita_bi174
  r = spreadsheet.costpercapita_bi174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bj174
  r = spreadsheet.costpercapita_bj174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bk174
  r = spreadsheet.costpercapita_bk174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bl174
  r = spreadsheet.costpercapita_bl174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bm174
  r = spreadsheet.costpercapita_bm174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bn174
  r = spreadsheet.costpercapita_bn174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bo174
  r = spreadsheet.costpercapita_bo174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bp174
  r = spreadsheet.costpercapita_bp174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bq174
  r = spreadsheet.costpercapita_bq174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.820766091346741e-11,r[:number],0.001)
end

def test_costpercapita_bs174
  r = spreadsheet.costpercapita_bs174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(1.4551915228366852e-11,r[:number],0.001)
end

def test_costpercapita_bt174
  r = spreadsheet.costpercapita_bt174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu174
  r = spreadsheet.costpercapita_bu174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv174
  r = spreadsheet.costpercapita_bv174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw174
  r = spreadsheet.costpercapita_bw174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx174
  r = spreadsheet.costpercapita_bx174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by174
  r = spreadsheet.costpercapita_by174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz174
  r = spreadsheet.costpercapita_bz174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca174
  r = spreadsheet.costpercapita_ca174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc174
  r = spreadsheet.costpercapita_cc174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd174
  r = spreadsheet.costpercapita_cd174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf174
  r = spreadsheet.costpercapita_cf174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg174
  r = spreadsheet.costpercapita_cg174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch174
  r = spreadsheet.costpercapita_ch174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci174
  r = spreadsheet.costpercapita_ci174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj174
  r = spreadsheet.costpercapita_cj174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck174
  r = spreadsheet.costpercapita_ck174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl174
  r = spreadsheet.costpercapita_cl174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm174
  r = spreadsheet.costpercapita_cm174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn174
  r = spreadsheet.costpercapita_cn174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp174
  r = spreadsheet.costpercapita_cp174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq174
  r = spreadsheet.costpercapita_cq174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c176
  r = spreadsheet.costpercapita_c176
  assert_equal(:ExcelString,r[:type])
  assert_equal("£m",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e176
  r = spreadsheet.costpercapita_e176
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f176
  r = spreadsheet.costpercapita_f176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o176
  r = spreadsheet.costpercapita_o176
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p176
  r = spreadsheet.costpercapita_p176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y176
  r = spreadsheet.costpercapita_y176
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z176
  r = spreadsheet.costpercapita_z176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai176
  r = spreadsheet.costpercapita_ai176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as176
  r = spreadsheet.costpercapita_as176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av176
  r = spreadsheet.costpercapita_av176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay176
  r = spreadsheet.costpercapita_ay176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi176
  r = spreadsheet.costpercapita_bi176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br176
  r = spreadsheet.costpercapita_br176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc176
  r = spreadsheet.costpercapita_cc176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf176
  r = spreadsheet.costpercapita_cf176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp176
  r = spreadsheet.costpercapita_cp176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c177
  r = spreadsheet.costpercapita_c177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e177
  r = spreadsheet.costpercapita_e177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f177
  r = spreadsheet.costpercapita_f177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g177
  r = spreadsheet.costpercapita_g177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h177
  r = spreadsheet.costpercapita_h177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i177
  r = spreadsheet.costpercapita_i177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j177
  r = spreadsheet.costpercapita_j177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k177
  r = spreadsheet.costpercapita_k177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l177
  r = spreadsheet.costpercapita_l177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m177
  r = spreadsheet.costpercapita_m177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o177
  r = spreadsheet.costpercapita_o177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p177
  r = spreadsheet.costpercapita_p177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q177
  r = spreadsheet.costpercapita_q177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r177
  r = spreadsheet.costpercapita_r177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s177
  r = spreadsheet.costpercapita_s177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t177
  r = spreadsheet.costpercapita_t177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u177
  r = spreadsheet.costpercapita_u177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v177
  r = spreadsheet.costpercapita_v177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w177
  r = spreadsheet.costpercapita_w177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y177
  r = spreadsheet.costpercapita_y177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z177
  r = spreadsheet.costpercapita_z177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa177
  r = spreadsheet.costpercapita_aa177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab177
  r = spreadsheet.costpercapita_ab177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac177
  r = spreadsheet.costpercapita_ac177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad177
  r = spreadsheet.costpercapita_ad177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae177
  r = spreadsheet.costpercapita_ae177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af177
  r = spreadsheet.costpercapita_af177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag177
  r = spreadsheet.costpercapita_ag177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai177
  r = spreadsheet.costpercapita_ai177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj177
  r = spreadsheet.costpercapita_aj177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak177
  r = spreadsheet.costpercapita_ak177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al177
  r = spreadsheet.costpercapita_al177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am177
  r = spreadsheet.costpercapita_am177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an177
  r = spreadsheet.costpercapita_an177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao177
  r = spreadsheet.costpercapita_ao177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap177
  r = spreadsheet.costpercapita_ap177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq177
  r = spreadsheet.costpercapita_aq177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as177
  r = spreadsheet.costpercapita_as177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at177
  r = spreadsheet.costpercapita_at177
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av177
  r = spreadsheet.costpercapita_av177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw177
  r = spreadsheet.costpercapita_aw177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay177
  r = spreadsheet.costpercapita_ay177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_az177
  r = spreadsheet.costpercapita_az177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_ba177
  r = spreadsheet.costpercapita_ba177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bb177
  r = spreadsheet.costpercapita_bb177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bc177
  r = spreadsheet.costpercapita_bc177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bd177
  r = spreadsheet.costpercapita_bd177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_be177
  r = spreadsheet.costpercapita_be177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bf177
  r = spreadsheet.costpercapita_bf177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bg177
  r = spreadsheet.costpercapita_bg177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bi177
  r = spreadsheet.costpercapita_bi177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_bj177
  r = spreadsheet.costpercapita_bj177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_bk177
  r = spreadsheet.costpercapita_bk177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bl177
  r = spreadsheet.costpercapita_bl177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bm177
  r = spreadsheet.costpercapita_bm177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bn177
  r = spreadsheet.costpercapita_bn177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_bo177
  r = spreadsheet.costpercapita_bo177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bp177
  r = spreadsheet.costpercapita_bp177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bq177
  r = spreadsheet.costpercapita_bq177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bs177
  r = spreadsheet.costpercapita_bs177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt177
  r = spreadsheet.costpercapita_bt177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu177
  r = spreadsheet.costpercapita_bu177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv177
  r = spreadsheet.costpercapita_bv177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw177
  r = spreadsheet.costpercapita_bw177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx177
  r = spreadsheet.costpercapita_bx177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by177
  r = spreadsheet.costpercapita_by177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz177
  r = spreadsheet.costpercapita_bz177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca177
  r = spreadsheet.costpercapita_ca177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc177
  r = spreadsheet.costpercapita_cc177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd177
  r = spreadsheet.costpercapita_cd177
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf177
  r = spreadsheet.costpercapita_cf177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg177
  r = spreadsheet.costpercapita_cg177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch177
  r = spreadsheet.costpercapita_ch177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci177
  r = spreadsheet.costpercapita_ci177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj177
  r = spreadsheet.costpercapita_cj177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck177
  r = spreadsheet.costpercapita_ck177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl177
  r = spreadsheet.costpercapita_cl177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm177
  r = spreadsheet.costpercapita_cm177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn177
  r = spreadsheet.costpercapita_cn177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp177
  r = spreadsheet.costpercapita_cp177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq177
  r = spreadsheet.costpercapita_cq177
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c178
  r = spreadsheet.costpercapita_c178
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e178
  r = spreadsheet.costpercapita_e178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500.4312241564425,r[:number],0.001)
end

def test_costpercapita_f178
  r = spreadsheet.costpercapita_f178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_g178
  r = spreadsheet.costpercapita_g178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1906.4308746646147,r[:number],0.001)
end

def test_costpercapita_h178
  r = spreadsheet.costpercapita_h178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2293.781997881209,r[:number],0.001)
end

def test_costpercapita_i178
  r = spreadsheet.costpercapita_i178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2690.391312205348,r[:number],0.001)
end

def test_costpercapita_j178
  r = spreadsheet.costpercapita_j178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3123.251213771443,r[:number],0.001)
end

def test_costpercapita_k178
  r = spreadsheet.costpercapita_k178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3724.493428706379,r[:number],0.001)
end

def test_costpercapita_l178
  r = spreadsheet.costpercapita_l178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4290.639684618129,r[:number],0.001)
end

def test_costpercapita_m178
  r = spreadsheet.costpercapita_m178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4848.522385057311,r[:number],0.001)
end

def test_costpercapita_o178
  r = spreadsheet.costpercapita_o178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5434576982361696,r[:number],0.001)
end

def test_costpercapita_p178
  r = spreadsheet.costpercapita_p178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.667362589744029,r[:number],0.001)
end

def test_costpercapita_q178
  r = spreadsheet.costpercapita_q178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.707068196910889,r[:number],0.001)
end

def test_costpercapita_r178
  r = spreadsheet.costpercapita_r178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.72745928353701,r[:number],0.001)
end

def test_costpercapita_s178
  r = spreadsheet.costpercapita_s178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.724660714133714,r[:number],0.001)
end

def test_costpercapita_t178
  r = spreadsheet.costpercapita_t178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.7130270138550685,r[:number],0.001)
end

def test_costpercapita_u178
  r = spreadsheet.costpercapita_u178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.776148826809207,r[:number],0.001)
end

def test_costpercapita_v178
  r = spreadsheet.costpercapita_v178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.849818330027885,r[:number],0.001)
end

def test_costpercapita_w178
  r = spreadsheet.costpercapita_w178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.907869254871583,r[:number],0.001)
end

def test_costpercapita_y178
  r = spreadsheet.costpercapita_y178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31088.792586418702,r[:number],0.001)
end

def test_costpercapita_z178
  r = spreadsheet.costpercapita_z178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53913.56502789654,r[:number],0.001)
end

def test_costpercapita_aa178
  r = spreadsheet.costpercapita_aa178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79314.5658089896,r[:number],0.001)
end

def test_costpercapita_ab178
  r = spreadsheet.costpercapita_ab178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106794.2688971236,r[:number],0.001)
end

def test_costpercapita_ac178
  r = spreadsheet.costpercapita_ac178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136432.67111014933,r[:number],0.001)
end

def test_costpercapita_ad178
  r = spreadsheet.costpercapita_ad178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154814.9314976369,r[:number],0.001)
end

def test_costpercapita_ae178
  r = spreadsheet.costpercapita_ae178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173337.2642744921,r[:number],0.001)
end

def test_costpercapita_af178
  r = spreadsheet.costpercapita_af178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191748.93729014313,r[:number],0.001)
end

def test_costpercapita_ag178
  r = spreadsheet.costpercapita_ag178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209548.405254263,r[:number],0.001)
end

def test_costpercapita_ai178
  r = spreadsheet.costpercapita_ai178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31590.767268273383,r[:number],0.001)
end

def test_costpercapita_aj178
  r = spreadsheet.costpercapita_aj178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55518.99444292016,r[:number],0.001)
end

def test_costpercapita_ak178
  r = spreadsheet.costpercapita_ak178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81224.70375185112,r[:number],0.001)
end

def test_costpercapita_al178
  r = spreadsheet.costpercapita_al178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109092.77835428836,r[:number],0.001)
end

def test_costpercapita_am178
  r = spreadsheet.costpercapita_am178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139128.7870830688,r[:number],0.001)
end

def test_costpercapita_an178
  r = spreadsheet.costpercapita_an178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157944.89573842217,r[:number],0.001)
end

def test_costpercapita_ao178
  r = spreadsheet.costpercapita_ao178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177069.5338520253,r[:number],0.001)
end

def test_costpercapita_ap178
  r = spreadsheet.costpercapita_ap178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196048.4267930913,r[:number],0.001)
end

def test_costpercapita_aq178
  r = spreadsheet.costpercapita_aq178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214406.8355085752,r[:number],0.001)
end

def test_costpercapita_as178
  r = spreadsheet.costpercapita_as178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129113.96919916842,r[:number],0.001)
end

def test_costpercapita_at178
  r = spreadsheet.costpercapita_at178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2463473.786331484,r[:number],0.001)
end

def test_costpercapita_ay178
  r = spreadsheet.costpercapita_ay178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.83397533476568,r[:number],0.001)
end

def test_costpercapita_az178
  r = spreadsheet.costpercapita_az178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(879.8732901599609,r[:number],0.001)
end

def test_costpercapita_ba178
  r = spreadsheet.costpercapita_ba178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1046.5793120110652,r[:number],0.001)
end

def test_costpercapita_bb178
  r = spreadsheet.costpercapita_bb178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1259.224668016462,r[:number],0.001)
end

def test_costpercapita_bc178
  r = spreadsheet.costpercapita_bc178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1476.9525221121735,r[:number],0.001)
end

def test_costpercapita_bd178
  r = spreadsheet.costpercapita_bd178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1714.5809743149937,r[:number],0.001)
end

def test_costpercapita_be178
  r = spreadsheet.costpercapita_be178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2044.6467910309095,r[:number],0.001)
end

def test_costpercapita_bf178
  r = spreadsheet.costpercapita_bf178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2355.445869499463,r[:number],0.001)
end

def test_costpercapita_bg178
  r = spreadsheet.costpercapita_bg178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2661.708478108983,r[:number],0.001)
end

def test_costpercapita_bi178
  r = spreadsheet.costpercapita_bi178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.83397533476568,r[:number],0.001)
end

def test_costpercapita_bj178
  r = spreadsheet.costpercapita_bj178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1039.2718537431379,r[:number],0.001)
end

def test_costpercapita_bk178
  r = spreadsheet.costpercapita_bk178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2051.8273274508024,r[:number],0.001)
end

def test_costpercapita_bl178
  r = spreadsheet.costpercapita_bl178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3098.114095555237,r[:number],0.001)
end

def test_costpercapita_bm178
  r = spreadsheet.costpercapita_bm178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3688.241181854145,r[:number],0.001)
end

def test_costpercapita_bn178
  r = spreadsheet.costpercapita_bn178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4352.713764152225,r[:number],0.001)
end

def test_costpercapita_bo178
  r = spreadsheet.costpercapita_bo178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5134.067725727037,r[:number],0.001)
end

def test_costpercapita_bp178
  r = spreadsheet.costpercapita_bp178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6003.848435989611,r[:number],0.001)
end

def test_costpercapita_bq178
  r = spreadsheet.costpercapita_bq178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6939.662458992714,r[:number],0.001)
end

def test_costpercapita_bs178
  r = spreadsheet.costpercapita_bs178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31255.170019451707,r[:number],0.001)
end

def test_costpercapita_bt178
  r = spreadsheet.costpercapita_bt178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54955.50424422942,r[:number],0.001)
end

def test_costpercapita_bu178
  r = spreadsheet.costpercapita_bu178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81370.1002046373,r[:number],0.001)
end

def test_costpercapita_bv178
  r = spreadsheet.costpercapita_bv178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109897.11045196238,r[:number],0.001)
end

def test_costpercapita_bw178
  r = spreadsheet.costpercapita_bw178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140126.6369527176,r[:number],0.001)
end

def test_costpercapita_bx178
  r = spreadsheet.costpercapita_bx178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159174.35828880296,r[:number],0.001)
end

def test_costpercapita_by178
  r = spreadsheet.costpercapita_by178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178479.10814904596,r[:number],0.001)
end

def test_costpercapita_bz178
  r = spreadsheet.costpercapita_bz178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197761.63554446277,r[:number],0.001)
end

def test_costpercapita_ca178
  r = spreadsheet.costpercapita_ca178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216497.97558251058,r[:number],0.001)
end

def test_costpercapita_cc178
  r = spreadsheet.costpercapita_cc178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129946.39993753564,r[:number],0.001)
end

def test_costpercapita_cd178
  r = spreadsheet.costpercapita_cd178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2476705.928540804,r[:number],0.001)
end

def test_costpercapita_cf178
  r = spreadsheet.costpercapita_cf178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-335.5972488216768,r[:number],0.001)
end

def test_costpercapita_cg178
  r = spreadsheet.costpercapita_cg178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-563.4901986907363,r[:number],0.001)
end

def test_costpercapita_ch178
  r = spreadsheet.costpercapita_ch178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.3964527861877,r[:number],0.001)
end

def test_costpercapita_ci178
  r = spreadsheet.costpercapita_ci178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(804.3320976740274,r[:number],0.001)
end

def test_costpercapita_cj178
  r = spreadsheet.costpercapita_cj178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(997.849869648797,r[:number],0.001)
end

def test_costpercapita_ck178
  r = spreadsheet.costpercapita_ck178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1229.4625503807822,r[:number],0.001)
end

def test_costpercapita_cl178
  r = spreadsheet.costpercapita_cl178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1409.5742970206584,r[:number],0.001)
end

def test_costpercapita_cm178
  r = spreadsheet.costpercapita_cm178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1713.2087513714828,r[:number],0.001)
end

def test_costpercapita_cn178
  r = spreadsheet.costpercapita_cn178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2091.140073935403,r[:number],0.001)
end

def test_costpercapita_cp178
  r = spreadsheet.costpercapita_cp178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.4307383672138,r[:number],0.001)
end

def test_costpercapita_cq178
  r = spreadsheet.costpercapita_cq178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13232.14220932002,r[:number],0.001)
end

def test_costpercapita_cr178
  r = spreadsheet.costpercapita_cr178
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c179
  r = spreadsheet.costpercapita_c179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e179
  r = spreadsheet.costpercapita_e179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.94640851678822,r[:number],0.001)
end

def test_costpercapita_f179
  r = spreadsheet.costpercapita_f179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.82674363505862,r[:number],0.001)
end

def test_costpercapita_g179
  r = spreadsheet.costpercapita_g179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.49579167088834,r[:number],0.001)
end

def test_costpercapita_h179
  r = spreadsheet.costpercapita_h179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.60613401916838,r[:number],0.001)
end

def test_costpercapita_i179
  r = spreadsheet.costpercapita_i179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.12853780707886,r[:number],0.001)
end

def test_costpercapita_j179
  r = spreadsheet.costpercapita_j179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.07852658579111,r[:number],0.001)
end

def test_costpercapita_k179
  r = spreadsheet.costpercapita_k179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.28947949022111,r[:number],0.001)
end

def test_costpercapita_l179
  r = spreadsheet.costpercapita_l179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.87927490558799,r[:number],0.001)
end

def test_costpercapita_m179
  r = spreadsheet.costpercapita_m179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.78101577128317,r[:number],0.001)
end

def test_costpercapita_o179
  r = spreadsheet.costpercapita_o179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(725.8735131040039,r[:number],0.001)
end

def test_costpercapita_p179
  r = spreadsheet.costpercapita_p179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.1852895348138,r[:number],0.001)
end

def test_costpercapita_q179
  r = spreadsheet.costpercapita_q179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(680.6096300760042,r[:number],0.001)
end

def test_costpercapita_r179
  r = spreadsheet.costpercapita_r179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(707.9468782423887,r[:number],0.001)
end

def test_costpercapita_s179
  r = spreadsheet.costpercapita_s179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(690.8282850791077,r[:number],0.001)
end

def test_costpercapita_t179
  r = spreadsheet.costpercapita_t179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(676.7256126157876,r[:number],0.001)
end

def test_costpercapita_u179
  r = spreadsheet.costpercapita_u179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(664.4174853066219,r[:number],0.001)
end

def test_costpercapita_v179
  r = spreadsheet.costpercapita_v179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(655.3269657240465,r[:number],0.001)
end

def test_costpercapita_w179
  r = spreadsheet.costpercapita_w179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.1565149482404,r[:number],0.001)
end

def test_costpercapita_y179
  r = spreadsheet.costpercapita_y179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z179
  r = spreadsheet.costpercapita_z179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa179
  r = spreadsheet.costpercapita_aa179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab179
  r = spreadsheet.costpercapita_ab179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac179
  r = spreadsheet.costpercapita_ac179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad179
  r = spreadsheet.costpercapita_ad179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae179
  r = spreadsheet.costpercapita_ae179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af179
  r = spreadsheet.costpercapita_af179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag179
  r = spreadsheet.costpercapita_ag179
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai179
  r = spreadsheet.costpercapita_ai179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(823.8199216207921,r[:number],0.001)
end

def test_costpercapita_aj179
  r = spreadsheet.costpercapita_aj179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(797.0120331698724,r[:number],0.001)
end

def test_costpercapita_ak179
  r = spreadsheet.costpercapita_ak179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.1054217468926,r[:number],0.001)
end

def test_costpercapita_al179
  r = spreadsheet.costpercapita_al179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(807.5530122615571,r[:number],0.001)
end

def test_costpercapita_am179
  r = spreadsheet.costpercapita_am179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(787.9568228861865,r[:number],0.001)
end

def test_costpercapita_an179
  r = spreadsheet.costpercapita_an179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.8041392015787,r[:number],0.001)
end

def test_costpercapita_ao179
  r = spreadsheet.costpercapita_ao179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(762.706964796843,r[:number],0.001)
end

def test_costpercapita_ap179
  r = spreadsheet.costpercapita_ap179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(747.2062406296346,r[:number],0.001)
end

def test_costpercapita_aq179
  r = spreadsheet.costpercapita_aq179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.9375307195236,r[:number],0.001)
end

def test_costpercapita_as179
  r = spreadsheet.costpercapita_as179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(785.0113430036532,r[:number],0.001)
end

def test_costpercapita_at179
  r = spreadsheet.costpercapita_at179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16639.35199430221,r[:number],0.001)
end

def test_costpercapita_ay179
  r = spreadsheet.costpercapita_ay179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.2619674917367,r[:number],0.001)
end

def test_costpercapita_az179
  r = spreadsheet.costpercapita_az179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.057333645149114,r[:number],0.001)
end

def test_costpercapita_ba179
  r = spreadsheet.costpercapita_ba179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.81403732195038,r[:number],0.001)
end

def test_costpercapita_bb179
  r = spreadsheet.costpercapita_bb179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.68109051276377,r[:number],0.001)
end

def test_costpercapita_bc179
  r = spreadsheet.costpercapita_bc179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.32095678142874,r[:number],0.001)
end

def test_costpercapita_bd179
  r = spreadsheet.costpercapita_bd179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.19555571805804,r[:number],0.001)
end

def test_costpercapita_be179
  r = spreadsheet.costpercapita_be179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.958282563430544,r[:number],0.001)
end

def test_costpercapita_bf179
  r = spreadsheet.costpercapita_bf179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.439252530298205,r[:number],0.001)
end

def test_costpercapita_bg179
  r = spreadsheet.costpercapita_bg179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.09147216539579,r[:number],0.001)
end

def test_costpercapita_bi179
  r = spreadsheet.costpercapita_bi179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.2619674917367,r[:number],0.001)
end

def test_costpercapita_bj179
  r = spreadsheet.costpercapita_bj179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.25546052467085,r[:number],0.001)
end

def test_costpercapita_bk179
  r = spreadsheet.costpercapita_bk179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.3438680544123,r[:number],0.001)
end

def test_costpercapita_bl179
  r = spreadsheet.costpercapita_bl179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.6629572568203,r[:number],0.001)
end

def test_costpercapita_bm179
  r = spreadsheet.costpercapita_bm179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.45066553745878,r[:number],0.001)
end

def test_costpercapita_bn179
  r = spreadsheet.costpercapita_bn179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.19483362859947,r[:number],0.001)
end

def test_costpercapita_bo179
  r = spreadsheet.costpercapita_bo179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.9952831241799,r[:number],0.001)
end

def test_costpercapita_bp179
  r = spreadsheet.costpercapita_bp179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.38460427135453,r[:number],0.001)
end

def test_costpercapita_bq179
  r = spreadsheet.costpercapita_bq179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.48449897420156,r[:number],0.001)
end

def test_costpercapita_bs179
  r = spreadsheet.costpercapita_bs179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(758.1354805957407,r[:number],0.001)
end

def test_costpercapita_bt179
  r = spreadsheet.costpercapita_bt179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(785.4407500594847,r[:number],0.001)
end

def test_costpercapita_bu179
  r = spreadsheet.costpercapita_bu179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.9534981304165,r[:number],0.001)
end

def test_costpercapita_bv179
  r = spreadsheet.costpercapita_bv179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(893.609835499209,r[:number],0.001)
end

def test_costpercapita_bw179
  r = spreadsheet.costpercapita_bw179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(877.2789506165664,r[:number],0.001)
end

def test_costpercapita_bx179
  r = spreadsheet.costpercapita_bx179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.920446244387,r[:number],0.001)
end

def test_costpercapita_by179
  r = spreadsheet.costpercapita_by179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(820.4127684308019,r[:number],0.001)
end

def test_costpercapita_bz179
  r = spreadsheet.costpercapita_bz179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(808.7115699954011,r[:number],0.001)
end

def test_costpercapita_ca179
  r = spreadsheet.costpercapita_ca179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(794.641013922442,r[:number],0.001)
end

def test_costpercapita_cc179
  r = spreadsheet.costpercapita_cc179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(824.1227014993833,r[:number],0.001)
end

def test_costpercapita_cd179
  r = spreadsheet.costpercapita_cd179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17454.419150894188,r[:number],0.001)
end

def test_costpercapita_cf179
  r = spreadsheet.costpercapita_cf179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-65.68444102505151,r[:number],0.001)
end

def test_costpercapita_cg179
  r = spreadsheet.costpercapita_cg179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-11.571283110387768,r[:number],0.001)
end

def test_costpercapita_ch179
  r = spreadsheet.costpercapita_ch179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.848076383523939,r[:number],0.001)
end

def test_costpercapita_ci179
  r = spreadsheet.costpercapita_ci179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.05682323765193,r[:number],0.001)
end

def test_costpercapita_cj179
  r = spreadsheet.costpercapita_cj179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.3221277303799,r[:number],0.001)
end

def test_costpercapita_ck179
  r = spreadsheet.costpercapita_ck179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.116307042808366,r[:number],0.001)
end

def test_costpercapita_cl179
  r = spreadsheet.costpercapita_cl179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.7058036339588,r[:number],0.001)
end

def test_costpercapita_cm179
  r = spreadsheet.costpercapita_cm179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.505329365766535,r[:number],0.001)
end

def test_costpercapita_cn179
  r = spreadsheet.costpercapita_cn179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.703483202918406,r[:number],0.001)
end

def test_costpercapita_cp179
  r = spreadsheet.costpercapita_cp179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.11135849572984,r[:number],0.001)
end

def test_costpercapita_cq179
  r = spreadsheet.costpercapita_cq179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(815.0671565919743,r[:number],0.001)
end

def test_costpercapita_cr179
  r = spreadsheet.costpercapita_cr179
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c180
  r = spreadsheet.costpercapita_c180
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e180
  r = spreadsheet.costpercapita_e180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21159.85924430207,r[:number],0.001)
end

def test_costpercapita_f180
  r = spreadsheet.costpercapita_f180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24930.777185776045,r[:number],0.001)
end

def test_costpercapita_g180
  r = spreadsheet.costpercapita_g180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35303.28731194795,r[:number],0.001)
end

def test_costpercapita_h180
  r = spreadsheet.costpercapita_h180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41803.07506134368,r[:number],0.001)
end

def test_costpercapita_i180
  r = spreadsheet.costpercapita_i180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46016.73706483061,r[:number],0.001)
end

def test_costpercapita_j180
  r = spreadsheet.costpercapita_j180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49002.532184305695,r[:number],0.001)
end

def test_costpercapita_k180
  r = spreadsheet.costpercapita_k180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50901.477036205084,r[:number],0.001)
end

def test_costpercapita_l180
  r = spreadsheet.costpercapita_l180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52928.96925121018,r[:number],0.001)
end

def test_costpercapita_m180
  r = spreadsheet.costpercapita_m180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54106.67526062517,r[:number],0.001)
end

def test_costpercapita_o180
  r = spreadsheet.costpercapita_o180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5431.463245194127,r[:number],0.001)
end

def test_costpercapita_p180
  r = spreadsheet.costpercapita_p180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6616.691794725655,r[:number],0.001)
end

def test_costpercapita_q180
  r = spreadsheet.costpercapita_q180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8095.583465587402,r[:number],0.001)
end

def test_costpercapita_r180
  r = spreadsheet.costpercapita_r180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9536.909702081666,r[:number],0.001)
end

def test_costpercapita_s180
  r = spreadsheet.costpercapita_s180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11017.85289608011,r[:number],0.001)
end

def test_costpercapita_t180
  r = spreadsheet.costpercapita_t180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12444.034613173288,r[:number],0.001)
end

def test_costpercapita_u180
  r = spreadsheet.costpercapita_u180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13792.248429051117,r[:number],0.001)
end

def test_costpercapita_v180
  r = spreadsheet.costpercapita_v180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15030.556577318872,r[:number],0.001)
end

def test_costpercapita_w180
  r = spreadsheet.costpercapita_w180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15662.712757397087,r[:number],0.001)
end

def test_costpercapita_y180
  r = spreadsheet.costpercapita_y180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.91117449472222,r[:number],0.001)
end

def test_costpercapita_z180
  r = spreadsheet.costpercapita_z180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.066625552084965,r[:number],0.001)
end

def test_costpercapita_aa180
  r = spreadsheet.costpercapita_aa180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.75363503229673,r[:number],0.001)
end

def test_costpercapita_ab180
  r = spreadsheet.costpercapita_ab180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.99083783801908,r[:number],0.001)
end

def test_costpercapita_ac180
  r = spreadsheet.costpercapita_ac180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.83170891686314,r[:number],0.001)
end

def test_costpercapita_ad180
  r = spreadsheet.costpercapita_ad180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.41573159273017,r[:number],0.001)
end

def test_costpercapita_ae180
  r = spreadsheet.costpercapita_ae180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.34478667403648,r[:number],0.001)
end

def test_costpercapita_af180
  r = spreadsheet.costpercapita_af180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.15967484106301,r[:number],0.001)
end

def test_costpercapita_ag180
  r = spreadsheet.costpercapita_ag180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.71187444163724,r[:number],0.001)
end

def test_costpercapita_ai180
  r = spreadsheet.costpercapita_ai180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26645.233663990923,r[:number],0.001)
end

def test_costpercapita_aj180
  r = spreadsheet.costpercapita_aj180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31605.535606053785,r[:number],0.001)
end

def test_costpercapita_ak180
  r = spreadsheet.costpercapita_ak180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43463.62441256765,r[:number],0.001)
end

def test_costpercapita_al180
  r = spreadsheet.costpercapita_al180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51406.97560126337,r[:number],0.001)
end

def test_costpercapita_am180
  r = spreadsheet.costpercapita_am180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57102.42166982758,r[:number],0.001)
end

def test_costpercapita_an180
  r = spreadsheet.costpercapita_an180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61513.98252907171,r[:number],0.001)
end

def test_costpercapita_ao180
  r = spreadsheet.costpercapita_ao180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64761.07025193024,r[:number],0.001)
end

def test_costpercapita_ap180
  r = spreadsheet.costpercapita_ap180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68025.68550337011,r[:number],0.001)
end

def test_costpercapita_aq180
  r = spreadsheet.costpercapita_aq180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69836.09989246391,r[:number],0.001)
end

def test_costpercapita_as180
  r = spreadsheet.costpercapita_as180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52706.73657005992,r[:number],0.001)
end

def test_costpercapita_at180
  r = spreadsheet.costpercapita_at180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1053284.3411464314,r[:number],0.001)
end

def test_costpercapita_ay180
  r = spreadsheet.costpercapita_ay180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6969.71641336281,r[:number],0.001)
end

def test_costpercapita_az180
  r = spreadsheet.costpercapita_az180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13686.326623083482,r[:number],0.001)
end

def test_costpercapita_ba180
  r = spreadsheet.costpercapita_ba180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19380.555905635658,r[:number],0.001)
end

def test_costpercapita_bb180
  r = spreadsheet.costpercapita_bb180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22948.76468854119,r[:number],0.001)
end

def test_costpercapita_bc180
  r = spreadsheet.costpercapita_bc180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25261.951879989865,r[:number],0.001)
end

def test_costpercapita_bd180
  r = spreadsheet.costpercapita_bd180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26901.073152874193,r[:number],0.001)
end

def test_costpercapita_be180
  r = spreadsheet.costpercapita_be180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27943.5428395852,r[:number],0.001)
end

def test_costpercapita_bf180
  r = spreadsheet.costpercapita_bf180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29056.58157373868,r[:number],0.001)
end

def test_costpercapita_bg180
  r = spreadsheet.costpercapita_bg180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29703.110520297883,r[:number],0.001)
end

def test_costpercapita_bi180
  r = spreadsheet.costpercapita_bi180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6969.71641336281,r[:number],0.001)
end

def test_costpercapita_bj180
  r = spreadsheet.costpercapita_bj180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20426.216155055517,r[:number],0.001)
end

def test_costpercapita_bk180
  r = spreadsheet.costpercapita_bk180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39138.05552313961,r[:number],0.001)
end

def test_costpercapita_bl180
  r = spreadsheet.costpercapita_bl180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54557.59026484172,r[:number],0.001)
end

def test_costpercapita_bm180
  r = spreadsheet.costpercapita_bm180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65851.13413461589,r[:number],0.001)
end

def test_costpercapita_bn180
  r = spreadsheet.costpercapita_bn180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73363.9575499088,r[:number],0.001)
end

def test_costpercapita_bo180
  r = spreadsheet.costpercapita_bo180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78411.74673820703,r[:number],0.001)
end

def test_costpercapita_bp180
  r = spreadsheet.costpercapita_bp180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82244.90276100163,r[:number],0.001)
end

def test_costpercapita_bq180
  r = spreadsheet.costpercapita_bq180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85092.50034120915,r[:number],0.001)
end

def test_costpercapita_bs180
  r = spreadsheet.costpercapita_bs180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12455.090833051658,r[:number],0.001)
end

def test_costpercapita_bt180
  r = spreadsheet.costpercapita_bt180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27100.974575333257,r[:number],0.001)
end

def test_costpercapita_bu180
  r = spreadsheet.costpercapita_bu180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47298.392623759304,r[:number],0.001)
end

def test_costpercapita_bv180
  r = spreadsheet.costpercapita_bv180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64161.4908047614,r[:number],0.001)
end

def test_costpercapita_bw180
  r = spreadsheet.costpercapita_bw180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76936.81873961286,r[:number],0.001)
end

def test_costpercapita_bx180
  r = spreadsheet.costpercapita_bx180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85875.40789467482,r[:number],0.001)
end

def test_costpercapita_by180
  r = spreadsheet.costpercapita_by180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92271.33995393215,r[:number],0.001)
end

def test_costpercapita_bz180
  r = spreadsheet.costpercapita_bz180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97341.61901316157,r[:number],0.001)
end

def test_costpercapita_ca180
  r = spreadsheet.costpercapita_ca180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100821.92497304786,r[:number],0.001)
end

def test_costpercapita_cc180
  r = spreadsheet.costpercapita_cc180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67140.33993459278,r[:number],0.001)
end

def test_costpercapita_cd180
  r = spreadsheet.costpercapita_cd180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1308298.4905222603,r[:number],0.001)
end

def test_costpercapita_cf180
  r = spreadsheet.costpercapita_cf180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14190.142830939258,r[:number],0.001)
end

def test_costpercapita_cg180
  r = spreadsheet.costpercapita_cg180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-4504.561030720531,r[:number],0.001)
end

def test_costpercapita_ch180
  r = spreadsheet.costpercapita_ch180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3834.7682111916524,r[:number],0.001)
end

def test_costpercapita_ci180
  r = spreadsheet.costpercapita_ci180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12754.515203498036,r[:number],0.001)
end

def test_costpercapita_cj180
  r = spreadsheet.costpercapita_cj180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19834.397069785282,r[:number],0.001)
end

def test_costpercapita_ck180
  r = spreadsheet.costpercapita_ck180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24361.425365603096,r[:number],0.001)
end

def test_costpercapita_cl180
  r = spreadsheet.costpercapita_cl180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27510.26970200194,r[:number],0.001)
end

def test_costpercapita_cm180
  r = spreadsheet.costpercapita_cm180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29315.933509791455,r[:number],0.001)
end

def test_costpercapita_cn180
  r = spreadsheet.costpercapita_cn180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30985.825080583963,r[:number],0.001)
end

def test_costpercapita_cp180
  r = spreadsheet.costpercapita_cp180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14433.60336453285,r[:number],0.001)
end

def test_costpercapita_cq180
  r = spreadsheet.costpercapita_cq180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(255014.1493758286,r[:number],0.001)
end

def test_costpercapita_cr180
  r = spreadsheet.costpercapita_cr180
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c181
  r = spreadsheet.costpercapita_c181
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e181
  r = spreadsheet.costpercapita_e181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3495.595455370403,r[:number],0.001)
end

def test_costpercapita_f181
  r = spreadsheet.costpercapita_f181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36384.663044712375,r[:number],0.001)
end

def test_costpercapita_g181
  r = spreadsheet.costpercapita_g181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42549.46844481997,r[:number],0.001)
end

def test_costpercapita_h181
  r = spreadsheet.costpercapita_h181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48344.97934246692,r[:number],0.001)
end

def test_costpercapita_i181
  r = spreadsheet.costpercapita_i181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54078.05627492146,r[:number],0.001)
end

def test_costpercapita_j181
  r = spreadsheet.costpercapita_j181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59548.76186895993,r[:number],0.001)
end

def test_costpercapita_k181
  r = spreadsheet.costpercapita_k181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64847.00622669753,r[:number],0.001)
end

def test_costpercapita_l181
  r = spreadsheet.costpercapita_l181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70048.92122829409,r[:number],0.001)
end

def test_costpercapita_m181
  r = spreadsheet.costpercapita_m181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75120.4932593506,r[:number],0.001)
end

def test_costpercapita_o181
  r = spreadsheet.costpercapita_o181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351.4115718437505,r[:number],0.001)
end

def test_costpercapita_p181
  r = spreadsheet.costpercapita_p181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(707.6589381294007,r[:number],0.001)
end

def test_costpercapita_q181
  r = spreadsheet.costpercapita_q181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1096.5104227947324,r[:number],0.001)
end

def test_costpercapita_r181
  r = spreadsheet.costpercapita_r181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1516.066414132114,r[:number],0.001)
end

def test_costpercapita_s181
  r = spreadsheet.costpercapita_s181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1968.5153164669903,r[:number],0.001)
end

def test_costpercapita_t181
  r = spreadsheet.costpercapita_t181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2457.1674958973845,r[:number],0.001)
end

def test_costpercapita_u181
  r = spreadsheet.costpercapita_u181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2979.3256154028045,r[:number],0.001)
end

def test_costpercapita_v181
  r = spreadsheet.costpercapita_v181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3532.945307663364,r[:number],0.001)
end

def test_costpercapita_w181
  r = spreadsheet.costpercapita_w181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4117.664741226488,r[:number],0.001)
end

def test_costpercapita_y181
  r = spreadsheet.costpercapita_y181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z181
  r = spreadsheet.costpercapita_z181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa181
  r = spreadsheet.costpercapita_aa181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab181
  r = spreadsheet.costpercapita_ab181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac181
  r = spreadsheet.costpercapita_ac181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad181
  r = spreadsheet.costpercapita_ad181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae181
  r = spreadsheet.costpercapita_ae181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af181
  r = spreadsheet.costpercapita_af181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag181
  r = spreadsheet.costpercapita_ag181
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai181
  r = spreadsheet.costpercapita_ai181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3847.0070272141543,r[:number],0.001)
end

def test_costpercapita_aj181
  r = spreadsheet.costpercapita_aj181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37092.321982841786,r[:number],0.001)
end

def test_costpercapita_ak181
  r = spreadsheet.costpercapita_ak181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43645.97886761471,r[:number],0.001)
end

def test_costpercapita_al181
  r = spreadsheet.costpercapita_al181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49861.04575659903,r[:number],0.001)
end

def test_costpercapita_am181
  r = spreadsheet.costpercapita_am181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56046.57159138845,r[:number],0.001)
end

def test_costpercapita_an181
  r = spreadsheet.costpercapita_an181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62005.929364857315,r[:number],0.001)
end

def test_costpercapita_ao181
  r = spreadsheet.costpercapita_ao181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67826.33184210032,r[:number],0.001)
end

def test_costpercapita_ap181
  r = spreadsheet.costpercapita_ap181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73581.86653595744,r[:number],0.001)
end

def test_costpercapita_aq181
  r = spreadsheet.costpercapita_aq181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79238.15800057708,r[:number],0.001)
end

def test_costpercapita_as181
  r = spreadsheet.costpercapita_as181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52571.69010768336,r[:number],0.001)
end

def test_costpercapita_at181
  r = spreadsheet.costpercapita_at181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1074465.9758362628,r[:number],0.001)
end

def test_costpercapita_ay181
  r = spreadsheet.costpercapita_ay181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1151.3927733868127,r[:number],0.001)
end

def test_costpercapita_az181
  r = spreadsheet.costpercapita_az181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19974.202119333884,r[:number],0.001)
end

def test_costpercapita_ba181
  r = spreadsheet.costpercapita_ba181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23358.514595631645,r[:number],0.001)
end

def test_costpercapita_bb181
  r = spreadsheet.costpercapita_bb181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26540.09431542035,r[:number],0.001)
end

def test_costpercapita_bc181
  r = spreadsheet.costpercapita_bc181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29687.39946632457,r[:number],0.001)
end

def test_costpercapita_bd181
  r = spreadsheet.costpercapita_bd181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32690.669804060326,r[:number],0.001)
end

def test_costpercapita_be181
  r = spreadsheet.costpercapita_be181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35599.263558220446,r[:number],0.001)
end

def test_costpercapita_bf181
  r = spreadsheet.costpercapita_bf181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38454.9750848546,r[:number],0.001)
end

def test_costpercapita_bg181
  r = spreadsheet.costpercapita_bg181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41239.13182382445,r[:number],0.001)
end

def test_costpercapita_bi181
  r = spreadsheet.costpercapita_bi181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1151.3927733868127,r[:number],0.001)
end

def test_costpercapita_bj181
  r = spreadsheet.costpercapita_bj181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21087.627636283112,r[:number],0.001)
end

def test_costpercapita_bk181
  r = spreadsheet.costpercapita_bk181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43755.772305783255,r[:number],0.001)
end

def test_costpercapita_bl181
  r = spreadsheet.costpercapita_bl181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67897.40870333252,r[:number],0.001)
end

def test_costpercapita_bm181
  r = spreadsheet.costpercapita_bm181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77519.26956086274,r[:number],0.001)
end

def test_costpercapita_bn181
  r = spreadsheet.costpercapita_bn181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86885.68615662401,r[:number],0.001)
end

def test_costpercapita_bo181
  r = spreadsheet.costpercapita_bo181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95962.64037651481,r[:number],0.001)
end

def test_costpercapita_bp181
  r = spreadsheet.costpercapita_bp181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104699.39927383205,r[:number],0.001)
end

def test_costpercapita_bq181
  r = spreadsheet.costpercapita_bq181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113214.51070548495,r[:number],0.001)
end

def test_costpercapita_bs181
  r = spreadsheet.costpercapita_bs181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1502.8043452305633,r[:number],0.001)
end

def test_costpercapita_bt181
  r = spreadsheet.costpercapita_bt181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21795.286574412516,r[:number],0.001)
end

def test_costpercapita_bu181
  r = spreadsheet.costpercapita_bu181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44852.28272857798,r[:number],0.001)
end

def test_costpercapita_bv181
  r = spreadsheet.costpercapita_bv181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69413.47511746464,r[:number],0.001)
end

def test_costpercapita_bw181
  r = spreadsheet.costpercapita_bw181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79487.78487732972,r[:number],0.001)
end

def test_costpercapita_bx181
  r = spreadsheet.costpercapita_bx181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89342.85365252141,r[:number],0.001)
end

def test_costpercapita_by181
  r = spreadsheet.costpercapita_by181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98941.9659919176,r[:number],0.001)
end

def test_costpercapita_bz181
  r = spreadsheet.costpercapita_bz181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108232.3445814954,r[:number],0.001)
end

def test_costpercapita_ca181
  r = spreadsheet.costpercapita_ca181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117332.17544671145,r[:number],0.001)
end

def test_costpercapita_cc181
  r = spreadsheet.costpercapita_cc181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70100.10814618459,r[:number],0.001)
end

def test_costpercapita_cd181
  r = spreadsheet.costpercapita_cd181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1346263.032075168,r[:number],0.001)
end

def test_costpercapita_cf181
  r = spreadsheet.costpercapita_cf181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2344.2026819835905,r[:number],0.001)
end

def test_costpercapita_cg181
  r = spreadsheet.costpercapita_cg181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-15297.035408429261,r[:number],0.001)
end

def test_costpercapita_ch181
  r = spreadsheet.costpercapita_ch181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1206.3038609632754,r[:number],0.001)
end

def test_costpercapita_ci181
  r = spreadsheet.costpercapita_ci181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19552.429360865608,r[:number],0.001)
end

def test_costpercapita_cj181
  r = spreadsheet.costpercapita_cj181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23441.21328594126,r[:number],0.001)
end

def test_costpercapita_ck181
  r = spreadsheet.costpercapita_ck181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27336.924287664075,r[:number],0.001)
end

def test_costpercapita_cl181
  r = spreadsheet.costpercapita_cl181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31115.63414981728,r[:number],0.001)
end

def test_costpercapita_cm181
  r = spreadsheet.costpercapita_cm181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34650.478045537944,r[:number],0.001)
end

def test_costpercapita_cn181
  r = spreadsheet.costpercapita_cn181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38094.01744613437,r[:number],0.001)
end

def test_costpercapita_cp181
  r = spreadsheet.costpercapita_cp181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17528.418038501222,r[:number],0.001)
end

def test_costpercapita_cq181
  r = spreadsheet.costpercapita_cq181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271797.056238905,r[:number],0.001)
end

def test_costpercapita_cr181
  r = spreadsheet.costpercapita_cr181
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c182
  r = spreadsheet.costpercapita_c182
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e182
  r = spreadsheet.costpercapita_e182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29877.562419010104,r[:number],0.001)
end

def test_costpercapita_f182
  r = spreadsheet.costpercapita_f182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67135.68012901641,r[:number],0.001)
end

def test_costpercapita_g182
  r = spreadsheet.costpercapita_g182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86392.27285327799,r[:number],0.001)
end

def test_costpercapita_h182
  r = spreadsheet.costpercapita_h182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110407.59831429648,r[:number],0.001)
end

def test_costpercapita_i182
  r = spreadsheet.costpercapita_i182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134587.76397061063,r[:number],0.001)
end

def test_costpercapita_j182
  r = spreadsheet.costpercapita_j182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160967.26373879128,r[:number],0.001)
end

def test_costpercapita_k182
  r = spreadsheet.costpercapita_k182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188730.8875733567,r[:number],0.001)
end

def test_costpercapita_l182
  r = spreadsheet.costpercapita_l182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216500.1604370876,r[:number],0.001)
end

def test_costpercapita_m182
  r = spreadsheet.costpercapita_m182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246703.88386846136,r[:number],0.001)
end

def test_costpercapita_o182
  r = spreadsheet.costpercapita_o182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36067.56466045361,r[:number],0.001)
end

def test_costpercapita_p182
  r = spreadsheet.costpercapita_p182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53859.09082797565,r[:number],0.001)
end

def test_costpercapita_q182
  r = spreadsheet.costpercapita_q182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73449.13845195598,r[:number],0.001)
end

def test_costpercapita_r182
  r = spreadsheet.costpercapita_r182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95990.42776795608,r[:number],0.001)
end

def test_costpercapita_s182
  r = spreadsheet.costpercapita_s182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120416.28983980879,r[:number],0.001)
end

def test_costpercapita_t182
  r = spreadsheet.costpercapita_t182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146880.44321782864,r[:number],0.001)
end

def test_costpercapita_u182
  r = spreadsheet.costpercapita_u182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175053.23564252752,r[:number],0.001)
end

def test_costpercapita_v182
  r = spreadsheet.costpercapita_v182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204612.28288753246,r[:number],0.001)
end

def test_costpercapita_w182
  r = spreadsheet.costpercapita_w182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235458.7674161516,r[:number],0.001)
end

def test_costpercapita_y182
  r = spreadsheet.costpercapita_y182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z182
  r = spreadsheet.costpercapita_z182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa182
  r = spreadsheet.costpercapita_aa182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab182
  r = spreadsheet.costpercapita_ab182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac182
  r = spreadsheet.costpercapita_ac182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad182
  r = spreadsheet.costpercapita_ad182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae182
  r = spreadsheet.costpercapita_ae182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af182
  r = spreadsheet.costpercapita_af182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag182
  r = spreadsheet.costpercapita_ag182
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai182
  r = spreadsheet.costpercapita_ai182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65945.12707946371,r[:number],0.001)
end

def test_costpercapita_aj182
  r = spreadsheet.costpercapita_aj182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120994.77095699208,r[:number],0.001)
end

def test_costpercapita_ak182
  r = spreadsheet.costpercapita_ak182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159841.41130523398,r[:number],0.001)
end

def test_costpercapita_al182
  r = spreadsheet.costpercapita_al182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206398.02608225256,r[:number],0.001)
end

def test_costpercapita_am182
  r = spreadsheet.costpercapita_am182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(255004.0538104194,r[:number],0.001)
end

def test_costpercapita_an182
  r = spreadsheet.costpercapita_an182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307847.70695662,r[:number],0.001)
end

def test_costpercapita_ao182
  r = spreadsheet.costpercapita_ao182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(363784.12321588426,r[:number],0.001)
end

def test_costpercapita_ap182
  r = spreadsheet.costpercapita_ap182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(421112.4433246201,r[:number],0.001)
end

def test_costpercapita_aq182
  r = spreadsheet.costpercapita_aq182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(482162.6512846129,r[:number],0.001)
end

def test_costpercapita_as182
  r = spreadsheet.costpercapita_as182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(264787.8126684554,r[:number],0.001)
end

def test_costpercapita_at182
  r = spreadsheet.costpercapita_at182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4984240.781746181,r[:number],0.001)
end

def test_costpercapita_ay182
  r = spreadsheet.costpercapita_ay182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9841.187258328335,r[:number],0.001)
end

def test_costpercapita_az182
  r = spreadsheet.costpercapita_az182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36855.6840190609,r[:number],0.001)
end

def test_costpercapita_ba182
  r = spreadsheet.costpercapita_ba182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47427.035874963054,r[:number],0.001)
end

def test_costpercapita_bb182
  r = spreadsheet.costpercapita_bb182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60610.80410528834,r[:number],0.001)
end

def test_costpercapita_bc182
  r = spreadsheet.costpercapita_bc182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73885.06517250424,r[:number],0.001)
end

def test_costpercapita_bd182
  r = spreadsheet.costpercapita_bd182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88366.70155674264,r[:number],0.001)
end

def test_costpercapita_be182
  r = spreadsheet.costpercapita_be182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103608.18485302279,r[:number],0.001)
end

def test_costpercapita_bf182
  r = spreadsheet.costpercapita_bf182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118852.76931448869,r[:number],0.001)
end

def test_costpercapita_bg182
  r = spreadsheet.costpercapita_bg182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135433.8017080921,r[:number],0.001)
end

def test_costpercapita_bi182
  r = spreadsheet.costpercapita_bi182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9841.187258328335,r[:number],0.001)
end

def test_costpercapita_bj182
  r = spreadsheet.costpercapita_bj182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46372.35744603336,r[:number],0.001)
end

def test_costpercapita_bk182
  r = spreadsheet.costpercapita_bk182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92281.2481063361,r[:number],0.001)
end

def test_costpercapita_bl182
  r = spreadsheet.costpercapita_bl182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141114.61132550015,r[:number],0.001)
end

def test_costpercapita_bm182
  r = spreadsheet.costpercapita_bm182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177542.90880046552,r[:number],0.001)
end

def test_costpercapita_bn182
  r = spreadsheet.costpercapita_bn182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218077.53639488388,r[:number],0.001)
end

def test_costpercapita_bo182
  r = spreadsheet.costpercapita_bo182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(260696.4103569488,r[:number],0.001)
end

def test_costpercapita_bp182
  r = spreadsheet.costpercapita_bp182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(305151.20531954436,r[:number],0.001)
end

def test_costpercapita_bq182
  r = spreadsheet.costpercapita_bq182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351715.0495952802,r[:number],0.001)
end

def test_costpercapita_bs182
  r = spreadsheet.costpercapita_bs182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45908.75191878195,r[:number],0.001)
end

def test_costpercapita_bt182
  r = spreadsheet.costpercapita_bt182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100231.44827400903,r[:number],0.001)
end

def test_costpercapita_bu182
  r = spreadsheet.costpercapita_bu182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165730.38655829208,r[:number],0.001)
end

def test_costpercapita_bv182
  r = spreadsheet.costpercapita_bv182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237105.03909345617,r[:number],0.001)
end

def test_costpercapita_bw182
  r = spreadsheet.costpercapita_bw182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297959.1986402743,r[:number],0.001)
end

def test_costpercapita_bx182
  r = spreadsheet.costpercapita_bx182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(364957.9796127126,r[:number],0.001)
end

def test_costpercapita_by182
  r = spreadsheet.costpercapita_by182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(435749.6459994764,r[:number],0.001)
end

def test_costpercapita_bz182
  r = spreadsheet.costpercapita_bz182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(509763.48820707685,r[:number],0.001)
end

def test_costpercapita_ca182
  r = spreadsheet.costpercapita_ca182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587173.8170114318,r[:number],0.001)
end

def test_costpercapita_cc182
  r = spreadsheet.costpercapita_cc182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(304953.30614616786,r[:number],0.001)
end

def test_costpercapita_cd182
  r = spreadsheet.costpercapita_cd182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5621699.0809831405,r[:number],0.001)
end

def test_costpercapita_cf182
  r = spreadsheet.costpercapita_cf182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-20036.37516068177,r[:number],0.001)
end

def test_costpercapita_cg182
  r = spreadsheet.costpercapita_cg182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-20763.322682983046,r[:number],0.001)
end

def test_costpercapita_ch182
  r = spreadsheet.costpercapita_ch182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5888.97525305812,r[:number],0.001)
end

def test_costpercapita_ci182
  r = spreadsheet.costpercapita_ci182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30707.013011203628,r[:number],0.001)
end

def test_costpercapita_cj182
  r = spreadsheet.costpercapita_cj182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42955.144829854864,r[:number],0.001)
end

def test_costpercapita_ck182
  r = spreadsheet.costpercapita_ck182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57110.27265609259,r[:number],0.001)
end

def test_costpercapita_cl182
  r = spreadsheet.costpercapita_cl182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71965.52278359205,r[:number],0.001)
end

def test_costpercapita_cm182
  r = spreadsheet.costpercapita_cm182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88651.04488245674,r[:number],0.001)
end

def test_costpercapita_cn182
  r = spreadsheet.costpercapita_cn182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105011.16572681887,r[:number],0.001)
end

def test_costpercapita_cp182
  r = spreadsheet.costpercapita_cp182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40165.49347771245,r[:number],0.001)
end

def test_costpercapita_cq182
  r = spreadsheet.costpercapita_cq182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(637458.2992369593,r[:number],0.001)
end

def test_costpercapita_cr182
  r = spreadsheet.costpercapita_cr182
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c183
  r = spreadsheet.costpercapita_c183
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e183
  r = spreadsheet.costpercapita_e183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number],0.001)
end

def test_costpercapita_f183
  r = spreadsheet.costpercapita_f183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number],0.001)
end

def test_costpercapita_g183
  r = spreadsheet.costpercapita_g183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number],0.001)
end

def test_costpercapita_h183
  r = spreadsheet.costpercapita_h183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number],0.001)
end

def test_costpercapita_i183
  r = spreadsheet.costpercapita_i183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number],0.001)
end

def test_costpercapita_j183
  r = spreadsheet.costpercapita_j183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number],0.001)
end

def test_costpercapita_k183
  r = spreadsheet.costpercapita_k183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number],0.001)
end

def test_costpercapita_l183
  r = spreadsheet.costpercapita_l183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number],0.001)
end

def test_costpercapita_m183
  r = spreadsheet.costpercapita_m183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number],0.001)
end

def test_costpercapita_o183
  r = spreadsheet.costpercapita_o183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number],0.001)
end

def test_costpercapita_p183
  r = spreadsheet.costpercapita_p183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number],0.001)
end

def test_costpercapita_q183
  r = spreadsheet.costpercapita_q183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number],0.001)
end

def test_costpercapita_r183
  r = spreadsheet.costpercapita_r183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number],0.001)
end

def test_costpercapita_s183
  r = spreadsheet.costpercapita_s183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number],0.001)
end

def test_costpercapita_t183
  r = spreadsheet.costpercapita_t183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number],0.001)
end

def test_costpercapita_u183
  r = spreadsheet.costpercapita_u183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number],0.001)
end

def test_costpercapita_v183
  r = spreadsheet.costpercapita_v183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number],0.001)
end

def test_costpercapita_w183
  r = spreadsheet.costpercapita_w183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number],0.001)
end

def test_costpercapita_y183
  r = spreadsheet.costpercapita_y183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z183
  r = spreadsheet.costpercapita_z183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa183
  r = spreadsheet.costpercapita_aa183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab183
  r = spreadsheet.costpercapita_ab183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac183
  r = spreadsheet.costpercapita_ac183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad183
  r = spreadsheet.costpercapita_ad183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae183
  r = spreadsheet.costpercapita_ae183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af183
  r = spreadsheet.costpercapita_af183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag183
  r = spreadsheet.costpercapita_ag183
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai183
  r = spreadsheet.costpercapita_ai183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number],0.001)
end

def test_costpercapita_aj183
  r = spreadsheet.costpercapita_aj183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number],0.001)
end

def test_costpercapita_ak183
  r = spreadsheet.costpercapita_ak183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number],0.001)
end

def test_costpercapita_al183
  r = spreadsheet.costpercapita_al183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number],0.001)
end

def test_costpercapita_am183
  r = spreadsheet.costpercapita_am183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number],0.001)
end

def test_costpercapita_an183
  r = spreadsheet.costpercapita_an183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number],0.001)
end

def test_costpercapita_ao183
  r = spreadsheet.costpercapita_ao183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number],0.001)
end

def test_costpercapita_ap183
  r = spreadsheet.costpercapita_ap183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number],0.001)
end

def test_costpercapita_aq183
  r = spreadsheet.costpercapita_aq183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number],0.001)
end

def test_costpercapita_as183
  r = spreadsheet.costpercapita_as183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number],0.001)
end

def test_costpercapita_at183
  r = spreadsheet.costpercapita_at183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number],0.001)
end

def test_costpercapita_ay183
  r = spreadsheet.costpercapita_ay183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606622,r[:number],0.001)
end

def test_costpercapita_az183
  r = spreadsheet.costpercapita_az183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.276351288876631,r[:number],0.001)
end

def test_costpercapita_ba183
  r = spreadsheet.costpercapita_ba183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.08648224537465,r[:number],0.001)
end

def test_costpercapita_bb183
  r = spreadsheet.costpercapita_bb183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9177689518223235,r[:number],0.001)
end

def test_costpercapita_bc183
  r = spreadsheet.costpercapita_bc183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7861215830875212,r[:number],0.001)
end

def test_costpercapita_bd183
  r = spreadsheet.costpercapita_bd183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.684167852077093,r[:number],0.001)
end

def test_costpercapita_be183
  r = spreadsheet.costpercapita_be183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6029044736336295,r[:number],0.001)
end

def test_costpercapita_bf183
  r = spreadsheet.costpercapita_bf183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5365417900539673,r[:number],0.001)
end

def test_costpercapita_bg183
  r = spreadsheet.costpercapita_bg183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4817549919258617,r[:number],0.001)
end

def test_costpercapita_bi183
  r = spreadsheet.costpercapita_bi183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606622,r[:number],0.001)
end

def test_costpercapita_bj183
  r = spreadsheet.costpercapita_bj183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.726360079930724,r[:number],0.001)
end

def test_costpercapita_bk183
  r = spreadsheet.costpercapita_bk183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.690848188388101,r[:number],0.001)
end

def test_costpercapita_bl183
  r = spreadsheet.costpercapita_bl183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.073297976593124,r[:number],0.001)
end

def test_costpercapita_bm183
  r = spreadsheet.costpercapita_bm183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.618136295612384,r[:number],0.001)
end

def test_costpercapita_bn183
  r = spreadsheet.costpercapita_bn183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.249651097877796,r[:number],0.001)
end

def test_costpercapita_bo183
  r = spreadsheet.costpercapita_bo183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.958009111399691,r[:number],0.001)
end

def test_costpercapita_bp183
  r = spreadsheet.costpercapita_bp183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.722843102107811,r[:number],0.001)
end

def test_costpercapita_bq183
  r = spreadsheet.costpercapita_bq183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.531235823741631,r[:number],0.001)
end

def test_costpercapita_bs183
  r = spreadsheet.costpercapita_bs183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.661384269345847,r[:number],0.001)
end

def test_costpercapita_bt183
  r = spreadsheet.costpercapita_bt183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.87114145163831,r[:number],0.001)
end

def test_costpercapita_bu183
  r = spreadsheet.costpercapita_bu183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.915700762742697,r[:number],0.001)
end

def test_costpercapita_bv183
  r = spreadsheet.costpercapita_bv183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.560584553723462,r[:number],0.001)
end

def test_costpercapita_bw183
  r = spreadsheet.costpercapita_bw183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.52939014512137,r[:number],0.001)
end

def test_costpercapita_bx183
  r = spreadsheet.costpercapita_bx183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.711605489803889,r[:number],0.001)
end

def test_costpercapita_by183
  r = spreadsheet.costpercapita_by183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.05821658415058,r[:number],0.001)
end

def test_costpercapita_bz183
  r = spreadsheet.costpercapita_bz183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.523992306048214,r[:number],0.001)
end

def test_costpercapita_ca183
  r = spreadsheet.costpercapita_ca183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.082410954688166,r[:number],0.001)
end

def test_costpercapita_cc183
  r = spreadsheet.costpercapita_cc183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.990491835251394,r[:number],0.001)
end

def test_costpercapita_cd183
  r = spreadsheet.costpercapita_cd183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.1636695192746,r[:number],0.001)
end

def test_costpercapita_cf183
  r = spreadsheet.costpercapita_cf183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-3.0528440790564164,r[:number],0.001)
end

def test_costpercapita_cg183
  r = spreadsheet.costpercapita_cg183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.42020227697082074,r[:number],0.001)
end

def test_costpercapita_ch183
  r = spreadsheet.costpercapita_ch183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.89014801557623,r[:number],0.001)
end

def test_costpercapita_ci183
  r = spreadsheet.costpercapita_ci183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5799230376199187,r[:number],0.001)
end

def test_costpercapita_cj183
  r = spreadsheet.costpercapita_cj183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.364567939326274,r[:number],0.001)
end

def test_costpercapita_ck183
  r = spreadsheet.costpercapita_ck183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.181799904500287,r[:number],0.001)
end

def test_costpercapita_cl183
  r = spreadsheet.costpercapita_cl183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0381858905477235,r[:number],0.001)
end

def test_costpercapita_cm183
  r = spreadsheet.costpercapita_cm183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9239050042942099,r[:number],0.001)
end

def test_costpercapita_cn183
  r = spreadsheet.costpercapita_cn183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8320964151212418,r[:number],0.001)
end

def test_costpercapita_cp183
  r = spreadsheet.costpercapita_cp183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2597310945509608,r[:number],0.001)
end

def test_costpercapita_cq183
  r = spreadsheet.costpercapita_cq183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.151145613717038,r[:number],0.001)
end

def test_costpercapita_cr183
  r = spreadsheet.costpercapita_cr183
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c184
  r = spreadsheet.costpercapita_c184
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e184
  r = spreadsheet.costpercapita_e184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f184
  r = spreadsheet.costpercapita_f184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9973400336412321,r[:number],0.001)
end

def test_costpercapita_g184
  r = spreadsheet.costpercapita_g184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.551105930143109,r[:number],0.001)
end

def test_costpercapita_h184
  r = spreadsheet.costpercapita_h184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.317466624915646,r[:number],0.001)
end

def test_costpercapita_i184
  r = spreadsheet.costpercapita_i184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.113064079488405,r[:number],0.001)
end

def test_costpercapita_j184
  r = spreadsheet.costpercapita_j184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9351933136393593,r[:number],0.001)
end

def test_costpercapita_k184
  r = spreadsheet.costpercapita_k184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8425442246299073,r[:number],0.001)
end

def test_costpercapita_l184
  r = spreadsheet.costpercapita_l184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.691574493903866,r[:number],0.001)
end

def test_costpercapita_m184
  r = spreadsheet.costpercapita_m184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5525935205169614,r[:number],0.001)
end

def test_costpercapita_o184
  r = spreadsheet.costpercapita_o184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p184
  r = spreadsheet.costpercapita_p184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.06106153817131767,r[:number],0.001)
end

def test_costpercapita_q184
  r = spreadsheet.costpercapita_q184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13913380986437504,r[:number],0.001)
end

def test_costpercapita_r184
  r = spreadsheet.costpercapita_r184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13199112253313547,r[:number],0.001)
end

def test_costpercapita_s184
  r = spreadsheet.costpercapita_s184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.12574224471578838,r[:number],0.001)
end

def test_costpercapita_t184
  r = spreadsheet.costpercapita_t184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.12030448130268898,r[:number],0.001)
end

def test_costpercapita_u184
  r = spreadsheet.costpercapita_u184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.11747206629582857,r[:number],0.001)
end

def test_costpercapita_v184
  r = spreadsheet.costpercapita_v184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.11285670595648963,r[:number],0.001)
end

def test_costpercapita_w184
  r = spreadsheet.costpercapita_w184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.10860785905580425,r[:number],0.001)
end

def test_costpercapita_y184
  r = spreadsheet.costpercapita_y184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z184
  r = spreadsheet.costpercapita_z184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa184
  r = spreadsheet.costpercapita_aa184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab184
  r = spreadsheet.costpercapita_ab184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac184
  r = spreadsheet.costpercapita_ac184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad184
  r = spreadsheet.costpercapita_ad184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae184
  r = spreadsheet.costpercapita_ae184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af184
  r = spreadsheet.costpercapita_af184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag184
  r = spreadsheet.costpercapita_ag184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai184
  r = spreadsheet.costpercapita_ai184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj184
  r = spreadsheet.costpercapita_aj184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.05840157181255,r[:number],0.001)
end

def test_costpercapita_ak184
  r = spreadsheet.costpercapita_ak184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.690239740007484,r[:number],0.001)
end

def test_costpercapita_al184
  r = spreadsheet.costpercapita_al184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.449457747448781,r[:number],0.001)
end

def test_costpercapita_am184
  r = spreadsheet.costpercapita_am184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.238806324204194,r[:number],0.001)
end

def test_costpercapita_an184
  r = spreadsheet.costpercapita_an184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.055497794942049,r[:number],0.001)
end

def test_costpercapita_ao184
  r = spreadsheet.costpercapita_ao184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.960016290925736,r[:number],0.001)
end

def test_costpercapita_ap184
  r = spreadsheet.costpercapita_ap184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8044311998603555,r[:number],0.001)
end

def test_costpercapita_aq184
  r = spreadsheet.costpercapita_aq184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.661201379572766,r[:number],0.001)
end

def test_costpercapita_as184
  r = spreadsheet.costpercapita_as184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.435339116530435,r[:number],0.001)
end

def test_costpercapita_at184
  r = spreadsheet.costpercapita_at184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.55495016927064,r[:number],0.001)
end

def test_costpercapita_ay184
  r = spreadsheet.costpercapita_ay184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az184
  r = spreadsheet.costpercapita_az184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0964859969696743,r[:number],0.001)
end

def test_costpercapita_ba184
  r = spreadsheet.costpercapita_ba184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.49843483787294,r[:number],0.001)
end

def test_costpercapita_bb184
  r = spreadsheet.costpercapita_bb184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3701731387086733,r[:number],0.001)
end

def test_costpercapita_bc184
  r = spreadsheet.costpercapita_bc184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.257961634893102,r[:number],0.001)
end

def test_costpercapita_bd184
  r = spreadsheet.costpercapita_bd184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.160315364984719,r[:number],0.001)
end

def test_costpercapita_be184
  r = spreadsheet.costpercapita_be184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.109453505201304,r[:number],0.001)
end

def test_costpercapita_bf184
  r = spreadsheet.costpercapita_bf184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0265751805699157,r[:number],0.001)
end

def test_costpercapita_bg184
  r = spreadsheet.costpercapita_bg184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9502783615019372,r[:number],0.001)
end

def test_costpercapita_bi184
  r = spreadsheet.costpercapita_bi184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj184
  r = spreadsheet.costpercapita_bj184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0964859969696743,r[:number],0.001)
end

def test_costpercapita_bk184
  r = spreadsheet.costpercapita_bk184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.559023911310555,r[:number],0.001)
end

def test_costpercapita_bl184
  r = spreadsheet.costpercapita_bl184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.818997303000389,r[:number],0.001)
end

def test_costpercapita_bm184
  r = spreadsheet.costpercapita_bm184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.918311765330573,r[:number],0.001)
end

def test_costpercapita_bn184
  r = spreadsheet.costpercapita_bn184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.6162030242339975,r[:number],0.001)
end

def test_costpercapita_bo184
  r = spreadsheet.costpercapita_bo184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.381451070534397,r[:number],0.001)
end

def test_costpercapita_bp184
  r = spreadsheet.costpercapita_bp184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.166018335319416,r[:number],0.001)
end

def test_costpercapita_bq184
  r = spreadsheet.costpercapita_bq184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.967827625244578,r[:number],0.001)
end

def test_costpercapita_bs184
  r = spreadsheet.costpercapita_bs184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt184
  r = spreadsheet.costpercapita_bt184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1575475351409918,r[:number],0.001)
end

def test_costpercapita_bu184
  r = spreadsheet.costpercapita_bu184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.69815772117493,r[:number],0.001)
end

def test_costpercapita_bv184
  r = spreadsheet.costpercapita_bv184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.950988425533524,r[:number],0.001)
end

def test_costpercapita_bw184
  r = spreadsheet.costpercapita_bw184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.044054010046361,r[:number],0.001)
end

def test_costpercapita_bx184
  r = spreadsheet.costpercapita_bx184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.736507505536687,r[:number],0.001)
end

def test_costpercapita_by184
  r = spreadsheet.costpercapita_by184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.498923136830226,r[:number],0.001)
end

def test_costpercapita_bz184
  r = spreadsheet.costpercapita_bz184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.278875041275906,r[:number],0.001)
end

def test_costpercapita_ca184
  r = spreadsheet.costpercapita_ca184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.076435484300382,r[:number],0.001)
end

def test_costpercapita_cc184
  r = spreadsheet.costpercapita_cc184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.826832095537667,r[:number],0.001)
end

def test_costpercapita_cd184
  r = spreadsheet.costpercapita_cd184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.97518739066041,r[:number],0.001)
end

def test_costpercapita_cf184
  r = spreadsheet.costpercapita_cf184
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg184
  r = spreadsheet.costpercapita_cg184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.900854036671558,r[:number],0.001)
end

def test_costpercapita_ch184
  r = spreadsheet.costpercapita_ch184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.9920820188325541,r[:number],0.001)
end

def test_costpercapita_ci184
  r = spreadsheet.costpercapita_ci184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5015306780847428,r[:number],0.001)
end

def test_costpercapita_cj184
  r = spreadsheet.costpercapita_cj184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.805247685842168,r[:number],0.001)
end

def test_costpercapita_ck184
  r = spreadsheet.costpercapita_ck184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.681009710594638,r[:number],0.001)
end

def test_costpercapita_cl184
  r = spreadsheet.costpercapita_cl184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5389068459044903,r[:number],0.001)
end

def test_costpercapita_cm184
  r = spreadsheet.costpercapita_cm184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4744438414155496,r[:number],0.001)
end

def test_costpercapita_cn184
  r = spreadsheet.costpercapita_cn184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4152341047276162,r[:number],0.001)
end

def test_costpercapita_cp184
  r = spreadsheet.costpercapita_cp184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3914929790072326,r[:number],0.001)
end

def test_costpercapita_cq184
  r = spreadsheet.costpercapita_cq184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.42023722138977,r[:number],0.001)
end

def test_costpercapita_cr184
  r = spreadsheet.costpercapita_cr184
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c185
  r = spreadsheet.costpercapita_c185
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e185
  r = spreadsheet.costpercapita_e185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55135.94704880463,r[:number],0.001)
end

def test_costpercapita_f185
  r = spreadsheet.costpercapita_f185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130154.85305796431,r[:number],0.001)
end

def test_costpercapita_g185
  r = spreadsheet.costpercapita_g185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166314.30708248436,r[:number],0.001)
end

def test_costpercapita_h185
  r = spreadsheet.costpercapita_h185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202956.85169157136,r[:number],0.001)
end

def test_costpercapita_i185
  r = spreadsheet.costpercapita_i185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237477.4437928109,r[:number],0.001)
end

def test_costpercapita_j185
  r = spreadsheet.costpercapita_j185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272743.89057692117,r[:number],0.001)
end

def test_costpercapita_k185
  r = spreadsheet.costpercapita_k185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308308.9161119014,r[:number],0.001)
end

def test_costpercapita_l185
  r = spreadsheet.costpercapita_l185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343867.06038870726,r[:number],0.001)
end

def test_costpercapita_m185
  r = spreadsheet.costpercapita_m185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380871.6075221948,r[:number],0.001)
end

def test_costpercapita_o185
  r = spreadsheet.costpercapita_o185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42590.018379193316,r[:number],0.001)
end

def test_costpercapita_p185
  r = spreadsheet.costpercapita_p185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61899.500055865145,r[:number],0.001)
end

def test_costpercapita_q185
  r = spreadsheet.costpercapita_q185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83335.91302499524,r[:number],0.001)
end

def test_costpercapita_r185
  r = spreadsheet.costpercapita_r185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107765.69749939545,r[:number],0.001)
end

def test_costpercapita_s185
  r = spreadsheet.costpercapita_s185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134108.24799424334,r[:number],0.001)
end

def test_costpercapita_t185
  r = spreadsheet.costpercapita_t185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162473.66622540218,r[:number],0.001)
end

def test_costpercapita_u185
  r = spreadsheet.costpercapita_u185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192505.2210006539,r[:number],0.001)
end

def test_costpercapita_v185
  r = spreadsheet.costpercapita_v185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223847.87556247867,r[:number],0.001)
end

def test_costpercapita_w185
  r = spreadsheet.costpercapita_w185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(255902.86908196827,r[:number],0.001)
end

def test_costpercapita_y185
  r = spreadsheet.costpercapita_y185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31142.703760913424,r[:number],0.001)
end

def test_costpercapita_z185
  r = spreadsheet.costpercapita_z185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53971.631653448625,r[:number],0.001)
end

def test_costpercapita_aa185
  r = spreadsheet.costpercapita_aa185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79379.3194440219,r[:number],0.001)
end

def test_costpercapita_ab185
  r = spreadsheet.costpercapita_ab185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106861.25973496163,r[:number],0.001)
end

def test_costpercapita_ac185
  r = spreadsheet.costpercapita_ac185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136500.5028190662,r[:number],0.001)
end

def test_costpercapita_ad185
  r = spreadsheet.costpercapita_ad185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154882.34722922964,r[:number],0.001)
end

def test_costpercapita_ae185
  r = spreadsheet.costpercapita_ae185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173404.60906116615,r[:number],0.001)
end

def test_costpercapita_af185
  r = spreadsheet.costpercapita_af185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191815.0969649842,r[:number],0.001)
end

def test_costpercapita_ag185
  r = spreadsheet.costpercapita_ag185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209615.11712870465,r[:number],0.001)
end

def test_costpercapita_ai185
  r = spreadsheet.costpercapita_ai185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128868.66918891136,r[:number],0.001)
end

def test_costpercapita_aj185
  r = spreadsheet.costpercapita_aj185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246025.9847672781,r[:number],0.001)
end

def test_costpercapita_ak185
  r = spreadsheet.costpercapita_ak185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329029.53955150157,r[:number],0.001)
end

def test_costpercapita_al185
  r = spreadsheet.costpercapita_al185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(417583.8089259284,r[:number],0.001)
end

def test_costpercapita_am185
  r = spreadsheet.costpercapita_am185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(508086.1946061204,r[:number],0.001)
end

def test_costpercapita_an185
  r = spreadsheet.costpercapita_an185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(590099.904031553,r[:number],0.001)
end

def test_costpercapita_ao185
  r = spreadsheet.costpercapita_ao185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(674218.7461737215,r[:number],0.001)
end

def test_costpercapita_ap185
  r = spreadsheet.costpercapita_ap185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(759530.0329161702,r[:number],0.001)
end

def test_costpercapita_aq185
  r = spreadsheet.costpercapita_aq185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(846389.5937328677,r[:number],0.001)
end

def test_costpercapita_as185
  r = spreadsheet.costpercapita_as185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(499981.385988228,r[:number],0.001)
end

def test_costpercapita_at185
  r = spreadsheet.costpercapita_at185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9592453.804528736,r[:number],0.001)
end

def test_costpercapita_ay185
  r = spreadsheet.costpercapita_ay185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18160.89184127422,r[:number],0.001)
end

def test_costpercapita_az185
  r = spreadsheet.costpercapita_az185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71451.51622256923,r[:number],0.001)
end

def test_costpercapita_ba185
  r = spreadsheet.costpercapita_ba185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91302.08464264662,r[:number],0.001)
end

def test_costpercapita_bb185
  r = spreadsheet.costpercapita_bb185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111417.85680986964,r[:number],0.001)
end

def test_costpercapita_bc185
  r = spreadsheet.costpercapita_bc185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130368.73408093027,r[:number],0.001)
end

def test_costpercapita_bd185
  r = spreadsheet.costpercapita_bd185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149729.06552692727,r[:number],0.001)
end

def test_costpercapita_be185
  r = spreadsheet.costpercapita_be185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169253.3086824016,r[:number],0.001)
end

def test_costpercapita_bf185
  r = spreadsheet.costpercapita_bf185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188773.77421208235,r[:number],0.001)
end

def test_costpercapita_bg185
  r = spreadsheet.costpercapita_bg185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209088.27603584225,r[:number],0.001)
end

def test_costpercapita_bi185
  r = spreadsheet.costpercapita_bi185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18160.89184127422,r[:number],0.001)
end

def test_costpercapita_bj185
  r = spreadsheet.costpercapita_bj185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89013.5513977167,r[:number],0.001)
end

def test_costpercapita_bk185
  r = spreadsheet.costpercapita_bk185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177401.49700286388,r[:number],0.001)
end

def test_costpercapita_bl185
  r = spreadsheet.costpercapita_bl185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266865.27964176604,r[:number],0.001)
end

def test_costpercapita_bm185
  r = spreadsheet.costpercapita_bm185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324800.54079139675,r[:number],0.001)
end

def test_costpercapita_bn185
  r = spreadsheet.costpercapita_bn185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382847.9545533196,r[:number],0.001)
end

def test_costpercapita_bo185
  r = spreadsheet.costpercapita_bo185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(440372.1999407038,r[:number],0.001)
end

def test_costpercapita_bp185
  r = spreadsheet.costpercapita_bp185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498263.62925607647,r[:number],0.001)
end

def test_costpercapita_bq185
  r = spreadsheet.costpercapita_bq185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557120.7066633902,r[:number],0.001)
end

def test_costpercapita_bs185
  r = spreadsheet.costpercapita_bs185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91893.61398138097,r[:number],0.001)
end

def test_costpercapita_bt185
  r = spreadsheet.costpercapita_bt185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204884.6831070305,r[:number],0.001)
end

def test_costpercapita_bu185
  r = spreadsheet.costpercapita_bu185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(340116.72947188106,r[:number],0.001)
end

def test_costpercapita_bv185
  r = spreadsheet.costpercapita_bv185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481492.2368761231,r[:number],0.001)
end

def test_costpercapita_bw185
  r = spreadsheet.costpercapita_bw185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(595409.2916047062,r[:number],0.001)
end

def test_costpercapita_bx185
  r = spreadsheet.costpercapita_bx185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(700203.9680079515,r[:number],0.001)
end

def test_costpercapita_by185
  r = spreadsheet.costpercapita_by185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(806282.0300025239,r[:number],0.001)
end

def test_costpercapita_bz185
  r = spreadsheet.costpercapita_bz185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(913926.6017835394,r[:number],0.001)
end

def test_costpercapita_ca185
  r = spreadsheet.costpercapita_ca185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1022638.6928740632,r[:number],0.001)
end

def test_costpercapita_cc185
  r = spreadsheet.costpercapita_cc185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572983.094189911,r[:number],0.001)
end

def test_costpercapita_cd185
  r = spreadsheet.costpercapita_cd185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10770821.090129178,r[:number],0.001)
end

def test_costpercapita_cf185
  r = spreadsheet.costpercapita_cf185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-36975.05520753041,r[:number],0.001)
end

def test_costpercapita_cg185
  r = spreadsheet.costpercapita_cg185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-41141.3016602476,r[:number],0.001)
end

def test_costpercapita_ch185
  r = spreadsheet.costpercapita_ch185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11087.189920379502,r[:number],0.001)
end

def test_costpercapita_ci185
  r = spreadsheet.costpercapita_ci185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63908.42795019466,r[:number],0.001)
end

def test_costpercapita_cj185
  r = spreadsheet.costpercapita_cj185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87323.09699858575,r[:number],0.001)
end

def test_costpercapita_ck185
  r = spreadsheet.costpercapita_ck185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110104.06397639844,r[:number],0.001)
end

def test_costpercapita_cl185
  r = spreadsheet.costpercapita_cl185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132063.28382880235,r[:number],0.001)
end

def test_costpercapita_cm185
  r = spreadsheet.costpercapita_cm185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154396.56886736906,r[:number],0.001)
end

def test_costpercapita_cn185
  r = spreadsheet.costpercapita_cn185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176249.0991411954,r[:number],0.001)
end

def test_costpercapita_cp185
  r = spreadsheet.costpercapita_cp185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73001.70820168302,r[:number],0.001)
end

def test_costpercapita_cq185
  r = spreadsheet.costpercapita_cq185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1178367.2856004399,r[:number],0.001)
end

def test_costpercapita_cr185
  r = spreadsheet.costpercapita_cr185
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e186
  r = spreadsheet.costpercapita_e186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f186
  r = spreadsheet.costpercapita_f186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g186
  r = spreadsheet.costpercapita_g186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h186
  r = spreadsheet.costpercapita_h186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i186
  r = spreadsheet.costpercapita_i186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j186
  r = spreadsheet.costpercapita_j186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k186
  r = spreadsheet.costpercapita_k186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l186
  r = spreadsheet.costpercapita_l186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m186
  r = spreadsheet.costpercapita_m186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o186
  r = spreadsheet.costpercapita_o186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p186
  r = spreadsheet.costpercapita_p186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.4551915228366852e-11,r[:number],0.001)
end

def test_costpercapita_q186
  r = spreadsheet.costpercapita_q186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.9103830456733704e-11,r[:number],0.001)
end

def test_costpercapita_r186
  r = spreadsheet.costpercapita_r186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s186
  r = spreadsheet.costpercapita_s186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t186
  r = spreadsheet.costpercapita_t186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u186
  r = spreadsheet.costpercapita_u186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v186
  r = spreadsheet.costpercapita_v186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w186
  r = spreadsheet.costpercapita_w186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y186
  r = spreadsheet.costpercapita_y186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z186
  r = spreadsheet.costpercapita_z186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa186
  r = spreadsheet.costpercapita_aa186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab186
  r = spreadsheet.costpercapita_ab186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac186
  r = spreadsheet.costpercapita_ac186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad186
  r = spreadsheet.costpercapita_ad186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae186
  r = spreadsheet.costpercapita_ae186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af186
  r = spreadsheet.costpercapita_af186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag186
  r = spreadsheet.costpercapita_ag186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai186
  r = spreadsheet.costpercapita_ai186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj186
  r = spreadsheet.costpercapita_aj186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak186
  r = spreadsheet.costpercapita_ak186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al186
  r = spreadsheet.costpercapita_al186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am186
  r = spreadsheet.costpercapita_am186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an186
  r = spreadsheet.costpercapita_an186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao186
  r = spreadsheet.costpercapita_ao186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap186
  r = spreadsheet.costpercapita_ap186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq186
  r = spreadsheet.costpercapita_aq186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as186
  r = spreadsheet.costpercapita_as186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at186
  r = spreadsheet.costpercapita_at186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay186
  r = spreadsheet.costpercapita_ay186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_az186
  r = spreadsheet.costpercapita_az186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ba186
  r = spreadsheet.costpercapita_ba186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bb186
  r = spreadsheet.costpercapita_bb186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bc186
  r = spreadsheet.costpercapita_bc186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bd186
  r = spreadsheet.costpercapita_bd186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_be186
  r = spreadsheet.costpercapita_be186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bf186
  r = spreadsheet.costpercapita_bf186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bg186
  r = spreadsheet.costpercapita_bg186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi186
  r = spreadsheet.costpercapita_bi186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bj186
  r = spreadsheet.costpercapita_bj186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bk186
  r = spreadsheet.costpercapita_bk186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bl186
  r = spreadsheet.costpercapita_bl186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bm186
  r = spreadsheet.costpercapita_bm186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bn186
  r = spreadsheet.costpercapita_bn186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bo186
  r = spreadsheet.costpercapita_bo186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bp186
  r = spreadsheet.costpercapita_bp186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-1.1641532182693481e-10,r[:number],0.001)
end

def test_costpercapita_bq186
  r = spreadsheet.costpercapita_bq186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs186
  r = spreadsheet.costpercapita_bs186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt186
  r = spreadsheet.costpercapita_bt186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu186
  r = spreadsheet.costpercapita_bu186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv186
  r = spreadsheet.costpercapita_bv186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw186
  r = spreadsheet.costpercapita_bw186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx186
  r = spreadsheet.costpercapita_bx186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.3283064365386963e-10,r[:number],0.001)
end

def test_costpercapita_by186
  r = spreadsheet.costpercapita_by186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz186
  r = spreadsheet.costpercapita_bz186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca186
  r = spreadsheet.costpercapita_ca186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc186
  r = spreadsheet.costpercapita_cc186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd186
  r = spreadsheet.costpercapita_cd186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf186
  r = spreadsheet.costpercapita_cf186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg186
  r = spreadsheet.costpercapita_cg186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch186
  r = spreadsheet.costpercapita_ch186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci186
  r = spreadsheet.costpercapita_ci186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj186
  r = spreadsheet.costpercapita_cj186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(4.3655745685100555e-11,r[:number],0.001)
end

def test_costpercapita_ck186
  r = spreadsheet.costpercapita_ck186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl186
  r = spreadsheet.costpercapita_cl186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm186
  r = spreadsheet.costpercapita_cm186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn186
  r = spreadsheet.costpercapita_cn186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp186
  r = spreadsheet.costpercapita_cp186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq186
  r = spreadsheet.costpercapita_cq186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c188
  r = spreadsheet.costpercapita_c188
  assert_equal(:ExcelString,r[:type])
  assert_equal("£m",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e188
  r = spreadsheet.costpercapita_e188
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f188
  r = spreadsheet.costpercapita_f188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o188
  r = spreadsheet.costpercapita_o188
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p188
  r = spreadsheet.costpercapita_p188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y188
  r = spreadsheet.costpercapita_y188
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z188
  r = spreadsheet.costpercapita_z188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai188
  r = spreadsheet.costpercapita_ai188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as188
  r = spreadsheet.costpercapita_as188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av188
  r = spreadsheet.costpercapita_av188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay188
  r = spreadsheet.costpercapita_ay188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi188
  r = spreadsheet.costpercapita_bi188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br188
  r = spreadsheet.costpercapita_br188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca188
  r = spreadsheet.costpercapita_ca188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(344206.22610573546,r[:number],0.001)
end

def test_costpercapita_cc188
  r = spreadsheet.costpercapita_cc188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf188
  r = spreadsheet.costpercapita_cf188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp188
  r = spreadsheet.costpercapita_cp188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c189
  r = spreadsheet.costpercapita_c189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e189
  r = spreadsheet.costpercapita_e189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f189
  r = spreadsheet.costpercapita_f189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g189
  r = spreadsheet.costpercapita_g189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h189
  r = spreadsheet.costpercapita_h189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i189
  r = spreadsheet.costpercapita_i189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j189
  r = spreadsheet.costpercapita_j189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k189
  r = spreadsheet.costpercapita_k189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l189
  r = spreadsheet.costpercapita_l189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m189
  r = spreadsheet.costpercapita_m189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o189
  r = spreadsheet.costpercapita_o189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p189
  r = spreadsheet.costpercapita_p189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q189
  r = spreadsheet.costpercapita_q189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r189
  r = spreadsheet.costpercapita_r189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s189
  r = spreadsheet.costpercapita_s189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t189
  r = spreadsheet.costpercapita_t189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u189
  r = spreadsheet.costpercapita_u189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v189
  r = spreadsheet.costpercapita_v189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w189
  r = spreadsheet.costpercapita_w189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y189
  r = spreadsheet.costpercapita_y189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z189
  r = spreadsheet.costpercapita_z189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa189
  r = spreadsheet.costpercapita_aa189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab189
  r = spreadsheet.costpercapita_ab189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac189
  r = spreadsheet.costpercapita_ac189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad189
  r = spreadsheet.costpercapita_ad189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae189
  r = spreadsheet.costpercapita_ae189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af189
  r = spreadsheet.costpercapita_af189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag189
  r = spreadsheet.costpercapita_ag189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai189
  r = spreadsheet.costpercapita_ai189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj189
  r = spreadsheet.costpercapita_aj189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak189
  r = spreadsheet.costpercapita_ak189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al189
  r = spreadsheet.costpercapita_al189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am189
  r = spreadsheet.costpercapita_am189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an189
  r = spreadsheet.costpercapita_an189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao189
  r = spreadsheet.costpercapita_ao189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap189
  r = spreadsheet.costpercapita_ap189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq189
  r = spreadsheet.costpercapita_aq189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as189
  r = spreadsheet.costpercapita_as189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at189
  r = spreadsheet.costpercapita_at189
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av189
  r = spreadsheet.costpercapita_av189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw189
  r = spreadsheet.costpercapita_aw189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay189
  r = spreadsheet.costpercapita_ay189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_az189
  r = spreadsheet.costpercapita_az189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_ba189
  r = spreadsheet.costpercapita_ba189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bb189
  r = spreadsheet.costpercapita_bb189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bc189
  r = spreadsheet.costpercapita_bc189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bd189
  r = spreadsheet.costpercapita_bd189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_be189
  r = spreadsheet.costpercapita_be189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bf189
  r = spreadsheet.costpercapita_bf189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bg189
  r = spreadsheet.costpercapita_bg189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bi189
  r = spreadsheet.costpercapita_bi189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_costpercapita_bj189
  r = spreadsheet.costpercapita_bj189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number],0.001)
end

def test_costpercapita_bk189
  r = spreadsheet.costpercapita_bk189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number],0.001)
end

def test_costpercapita_bl189
  r = spreadsheet.costpercapita_bl189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number],0.001)
end

def test_costpercapita_bm189
  r = spreadsheet.costpercapita_bm189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number],0.001)
end

def test_costpercapita_bn189
  r = spreadsheet.costpercapita_bn189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number],0.001)
end

def test_costpercapita_bo189
  r = spreadsheet.costpercapita_bo189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number],0.001)
end

def test_costpercapita_bp189
  r = spreadsheet.costpercapita_bp189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number],0.001)
end

def test_costpercapita_bq189
  r = spreadsheet.costpercapita_bq189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number],0.001)
end

def test_costpercapita_bs189
  r = spreadsheet.costpercapita_bs189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt189
  r = spreadsheet.costpercapita_bt189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu189
  r = spreadsheet.costpercapita_bu189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv189
  r = spreadsheet.costpercapita_bv189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw189
  r = spreadsheet.costpercapita_bw189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx189
  r = spreadsheet.costpercapita_bx189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by189
  r = spreadsheet.costpercapita_by189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz189
  r = spreadsheet.costpercapita_bz189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca189
  r = spreadsheet.costpercapita_ca189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc189
  r = spreadsheet.costpercapita_cc189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd189
  r = spreadsheet.costpercapita_cd189
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf189
  r = spreadsheet.costpercapita_cf189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg189
  r = spreadsheet.costpercapita_cg189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch189
  r = spreadsheet.costpercapita_ch189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci189
  r = spreadsheet.costpercapita_ci189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj189
  r = spreadsheet.costpercapita_cj189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck189
  r = spreadsheet.costpercapita_ck189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl189
  r = spreadsheet.costpercapita_cl189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm189
  r = spreadsheet.costpercapita_cm189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn189
  r = spreadsheet.costpercapita_cn189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp189
  r = spreadsheet.costpercapita_cp189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq189
  r = spreadsheet.costpercapita_cq189
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c190
  r = spreadsheet.costpercapita_c190
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e190
  r = spreadsheet.costpercapita_e190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(883.1139249819576,r[:number],0.001)
end

def test_costpercapita_f190
  r = spreadsheet.costpercapita_f190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.762052433874,r[:number],0.001)
end

def test_costpercapita_g190
  r = spreadsheet.costpercapita_g190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2191.2998559363386,r[:number],0.001)
end

def test_costpercapita_h190
  r = spreadsheet.costpercapita_h190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2928.2323377206926,r[:number],0.001)
end

def test_costpercapita_i190
  r = spreadsheet.costpercapita_i190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3729.2552842450364,r[:number],0.001)
end

def test_costpercapita_j190
  r = spreadsheet.costpercapita_j190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4627.038835216952,r[:number],0.001)
end

def test_costpercapita_k190
  r = spreadsheet.costpercapita_k190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5829.641888409983,r[:number],0.001)
end

def test_costpercapita_l190
  r = spreadsheet.costpercapita_l190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7033.835548554308,r[:number],0.001)
end

def test_costpercapita_m190
  r = spreadsheet.costpercapita_m190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8268.797865989212,r[:number],0.001)
end

def test_costpercapita_o190
  r = spreadsheet.costpercapita_o190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5434576982361696,r[:number],0.001)
end

def test_costpercapita_p190
  r = spreadsheet.costpercapita_p190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.707110452489464,r[:number],0.001)
end

def test_costpercapita_q190
  r = spreadsheet.costpercapita_q190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.541885053372159,r[:number],0.001)
end

def test_costpercapita_r190
  r = spreadsheet.costpercapita_r190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.342575206241785,r[:number],0.001)
end

def test_costpercapita_s190
  r = spreadsheet.costpercapita_s190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.102342436706559,r[:number],0.001)
end

def test_costpercapita_t190
  r = spreadsheet.costpercapita_t190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.84651825974424,r[:number],0.001)
end

def test_costpercapita_u190
  r = spreadsheet.costpercapita_u190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.722615576722133,r[:number],0.001)
end

def test_costpercapita_v190
  r = spreadsheet.costpercapita_v190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.617326464755097,r[:number],0.001)
end

def test_costpercapita_w190
  r = spreadsheet.costpercapita_w190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.48447515565574,r[:number],0.001)
end

def test_costpercapita_y190
  r = spreadsheet.costpercapita_y190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31088.792586418702,r[:number],0.001)
end

def test_costpercapita_z190
  r = spreadsheet.costpercapita_z190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60200.2214432425,r[:number],0.001)
end

def test_costpercapita_aa190
  r = spreadsheet.costpercapita_aa190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95991.93565696522,r[:number],0.001)
end

def test_costpercapita_ab190
  r = spreadsheet.costpercapita_ab190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137439.16290901325,r[:number],0.001)
end

def test_costpercapita_ac190
  r = spreadsheet.costpercapita_ac190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184232.3992407498,r[:number],0.001)
end

def test_costpercapita_ad190
  r = spreadsheet.costpercapita_ad190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209098.9043991315,r[:number],0.001)
end

def test_costpercapita_ae190
  r = spreadsheet.costpercapita_ae190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234224.2315871244,r[:number],0.001)
end

def test_costpercapita_af190
  r = spreadsheet.costpercapita_af190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259203.24849614542,r[:number],0.001)
end

def test_costpercapita_ag190
  r = spreadsheet.costpercapita_ag190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283336.49276062526,r[:number],0.001)
end

def test_costpercapita_ai190
  r = spreadsheet.costpercapita_ai190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31973.4499690989,r[:number],0.001)
end

def test_costpercapita_aj190
  r = spreadsheet.costpercapita_aj190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61807.69060612887,r[:number],0.001)
end

def test_costpercapita_ak190
  r = spreadsheet.costpercapita_ak190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98189.77739795494,r[:number],0.001)
end

def test_costpercapita_al190
  r = spreadsheet.costpercapita_al190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140375.7378219402,r[:number],0.001)
end

def test_costpercapita_am190
  r = spreadsheet.costpercapita_am190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187971.75686743154,r[:number],0.001)
end

def test_costpercapita_an190
  r = spreadsheet.costpercapita_an190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213737.78975260822,r[:number],0.001)
end

def test_costpercapita_ao190
  r = spreadsheet.costpercapita_ao190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240067.59609111113,r[:number],0.001)
end

def test_costpercapita_ap190
  r = spreadsheet.costpercapita_ap190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266252.70137116447,r[:number],0.001)
end

def test_costpercapita_aq190
  r = spreadsheet.costpercapita_aq190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(291622.7751017701,r[:number],0.001)
end

def test_costpercapita_as190
  r = spreadsheet.costpercapita_as190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170222.14166435652,r[:number],0.001)
end

def test_costpercapita_at190
  r = spreadsheet.costpercapita_at190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3207059.645905419,r[:number],0.001)
end

def test_costpercapita_ay190
  r = spreadsheet.costpercapita_ay190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.3189694176284,r[:number],0.001)
end

def test_costpercapita_az190
  r = spreadsheet.costpercapita_az190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1053.6059024261897,r[:number],0.001)
end

def test_costpercapita_ba190
  r = spreadsheet.costpercapita_ba190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1440.4923417635255,r[:number],0.001)
end

def test_costpercapita_bb190
  r = spreadsheet.costpercapita_bb190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1924.928825219394,r[:number],0.001)
end

def test_costpercapita_bc190
  r = spreadsheet.costpercapita_bc190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2451.4963859844293,r[:number],0.001)
end

def test_costpercapita_bd190
  r = spreadsheet.costpercapita_bd190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3041.6713573526017,r[:number],0.001)
end

def test_costpercapita_be190
  r = spreadsheet.costpercapita_be190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3832.2251848504666,r[:number],0.001)
end

def test_costpercapita_bf190
  r = spreadsheet.costpercapita_bf190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4623.824627865482,r[:number],0.001)
end

def test_costpercapita_bg190
  r = spreadsheet.costpercapita_bg190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5435.650428799227,r[:number],0.001)
end

def test_costpercapita_bi190
  r = spreadsheet.costpercapita_bi190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.3189694176284,r[:number],0.001)
end

def test_costpercapita_bj190
  r = spreadsheet.costpercapita_bj190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1390.4390297058194,r[:number],0.001)
end

def test_costpercapita_bk190
  r = spreadsheet.costpercapita_bk190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2785.4109693271544,r[:number],0.001)
end

def test_costpercapita_bl190
  r = spreadsheet.costpercapita_bl190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4308.376039346547,r[:number],0.001)
end

def test_costpercapita_bm190
  r = spreadsheet.costpercapita_bm190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5681.589634376017,r[:number],0.001)
end

def test_costpercapita_bn190
  r = spreadsheet.costpercapita_bn190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7263.656256051693,r[:number],0.001)
end

def test_costpercapita_bo190
  r = spreadsheet.costpercapita_bo190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9151.728336439302,r[:number],0.001)
end

def test_costpercapita_bp190
  r = spreadsheet.costpercapita_bp190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11297.027315827234,r[:number],0.001)
end

def test_costpercapita_bq190
  r = spreadsheet.costpercapita_bq190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13658.87733213499,r[:number],0.001)
end

def test_costpercapita_bs190
  r = spreadsheet.costpercapita_bs190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31438.655013534568,r[:number],0.001)
end

def test_costpercapita_bt190
  r = spreadsheet.costpercapita_bt190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61595.36758340081,r[:number],0.001)
end

def test_costpercapita_bu190
  r = spreadsheet.costpercapita_bu190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98783.88851134575,r[:number],0.001)
end

def test_costpercapita_bv190
  r = spreadsheet.costpercapita_bv190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141755.88152356603,r[:number],0.001)
end

def test_costpercapita_bw190
  r = spreadsheet.costpercapita_bw190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189924.0912175625,r[:number],0.001)
end

def test_costpercapita_bx190
  r = spreadsheet.costpercapita_bx190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216374.40717344295,r[:number],0.001)
end

def test_costpercapita_by190
  r = spreadsheet.costpercapita_by190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243389.68253914046,r[:number],0.001)
end

def test_costpercapita_bz190
  r = spreadsheet.costpercapita_bz190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270515.8931384374,r[:number],0.001)
end

def test_costpercapita_ca190
  r = spreadsheet.costpercapita_ca190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297012.8545679159,r[:number],0.001)
end

def test_costpercapita_cc190
  r = spreadsheet.costpercapita_cc190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172310.0801409274,r[:number],0.001)
end

def test_costpercapita_cd190
  r = spreadsheet.costpercapita_cd190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3241953.7457207404,r[:number],0.001)
end

def test_costpercapita_cf190
  r = spreadsheet.costpercapita_cf190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-534.7949555643291,r[:number],0.001)
end

def test_costpercapita_cg190
  r = spreadsheet.costpercapita_cg190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-212.3230227280546,r[:number],0.001)
end

def test_costpercapita_ch190
  r = spreadsheet.costpercapita_ch190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(594.1111133908157,r[:number],0.001)
end

def test_costpercapita_ci190
  r = spreadsheet.costpercapita_ci190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1380.1437016258546,r[:number],0.001)
end

def test_costpercapita_cj190
  r = spreadsheet.costpercapita_cj190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.3343501309798,r[:number],0.001)
end

def test_costpercapita_ck190
  r = spreadsheet.costpercapita_ck190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2636.6174208347406,r[:number],0.001)
end

def test_costpercapita_cl190
  r = spreadsheet.costpercapita_cl190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3322.08644802932,r[:number],0.001)
end

def test_costpercapita_cm190
  r = spreadsheet.costpercapita_cm190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4263.191767272927,r[:number],0.001)
end

def test_costpercapita_cn190
  r = spreadsheet.costpercapita_cn190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5390.079466145779,r[:number],0.001)
end

def test_costpercapita_cp190
  r = spreadsheet.costpercapita_cp190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2087.938476570893,r[:number],0.001)
end

def test_costpercapita_cq190
  r = spreadsheet.costpercapita_cq190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34894.0998153217,r[:number],0.001)
end

def test_costpercapita_cr190
  r = spreadsheet.costpercapita_cr190
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c191
  r = spreadsheet.costpercapita_c191
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e191
  r = spreadsheet.costpercapita_e191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(238.5685788254564,r[:number],0.001)
end

def test_costpercapita_f191
  r = spreadsheet.costpercapita_f191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.07899286893252,r[:number],0.001)
end

def test_costpercapita_g191
  r = spreadsheet.costpercapita_g191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(399.80205216258474,r[:number],0.001)
end

def test_costpercapita_h191
  r = spreadsheet.costpercapita_h191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(250.1999623567142,r[:number],0.001)
end

def test_costpercapita_i191
  r = spreadsheet.costpercapita_i191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.03646010121858,r[:number],0.001)
end

def test_costpercapita_j191
  r = spreadsheet.costpercapita_j191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.89706970370426,r[:number],0.001)
end

def test_costpercapita_k191
  r = spreadsheet.costpercapita_k191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.2457542637264,r[:number],0.001)
end

def test_costpercapita_l191
  r = spreadsheet.costpercapita_l191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.75446106694267,r[:number],0.001)
end

def test_costpercapita_m191
  r = spreadsheet.costpercapita_m191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.96281341984988,r[:number],0.001)
end

def test_costpercapita_o191
  r = spreadsheet.costpercapita_o191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1711.6246728779583,r[:number],0.001)
end

def test_costpercapita_p191
  r = spreadsheet.costpercapita_p191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1667.1242090821036,r[:number],0.001)
end

def test_costpercapita_q191
  r = spreadsheet.costpercapita_q191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1624.0952150592834,r[:number],0.001)
end

def test_costpercapita_r191
  r = spreadsheet.costpercapita_r191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1716.8083979780492,r[:number],0.001)
end

def test_costpercapita_s191
  r = spreadsheet.costpercapita_s191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1683.8193573806764,r[:number],0.001)
end

def test_costpercapita_t191
  r = spreadsheet.costpercapita_t191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1657.7424844359532,r[:number],0.001)
end

def test_costpercapita_u191
  r = spreadsheet.costpercapita_u191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1635.685737104001,r[:number],0.001)
end

def test_costpercapita_v191
  r = spreadsheet.costpercapita_v191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1629.120527013534,r[:number],0.001)
end

def test_costpercapita_w191
  r = spreadsheet.costpercapita_w191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1611.5067810891926,r[:number],0.001)
end

def test_costpercapita_y191
  r = spreadsheet.costpercapita_y191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z191
  r = spreadsheet.costpercapita_z191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa191
  r = spreadsheet.costpercapita_aa191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab191
  r = spreadsheet.costpercapita_ab191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac191
  r = spreadsheet.costpercapita_ac191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad191
  r = spreadsheet.costpercapita_ad191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae191
  r = spreadsheet.costpercapita_ae191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af191
  r = spreadsheet.costpercapita_af191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag191
  r = spreadsheet.costpercapita_ag191
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai191
  r = spreadsheet.costpercapita_ai191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1950.1932517034147,r[:number],0.001)
end

def test_costpercapita_aj191
  r = spreadsheet.costpercapita_aj191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1899.2032019510361,r[:number],0.001)
end

def test_costpercapita_ak191
  r = spreadsheet.costpercapita_ak191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2023.8972672218679,r[:number],0.001)
end

def test_costpercapita_al191
  r = spreadsheet.costpercapita_al191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1967.0083603347634,r[:number],0.001)
end

def test_costpercapita_am191
  r = spreadsheet.costpercapita_am191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1928.8558174818947,r[:number],0.001)
end

def test_costpercapita_an191
  r = spreadsheet.costpercapita_an191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898.6395541396575,r[:number],0.001)
end

def test_costpercapita_ao191
  r = spreadsheet.costpercapita_ao191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1886.9314913677274,r[:number],0.001)
end

def test_costpercapita_ap191
  r = spreadsheet.costpercapita_ap191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1864.8749880804767,r[:number],0.001)
end

def test_costpercapita_aq191
  r = spreadsheet.costpercapita_aq191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1831.4695945090425,r[:number],0.001)
end

def test_costpercapita_as191
  r = spreadsheet.costpercapita_as191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1916.7859474210984,r[:number],0.001)
end

def test_costpercapita_at191
  r = spreadsheet.costpercapita_at191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40508.495642003756,r[:number],0.001)
end

def test_costpercapita_ay191
  r = spreadsheet.costpercapita_ay191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.0965363145066,r[:number],0.001)
end

def test_costpercapita_az191
  r = spreadsheet.costpercapita_az191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.56150864348044,r[:number],0.001)
end

def test_costpercapita_ba191
  r = spreadsheet.costpercapita_ba191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.8174290256861,r[:number],0.001)
end

def test_costpercapita_bb191
  r = spreadsheet.costpercapita_bb191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.47367014057787,r[:number],0.001)
end

def test_costpercapita_bc191
  r = spreadsheet.costpercapita_bc191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.0793444230955,r[:number],0.001)
end

def test_costpercapita_bd191
  r = spreadsheet.costpercapita_bd191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.35823797523287,r[:number],0.001)
end

def test_costpercapita_be191
  r = spreadsheet.costpercapita_be191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.1611411998436,r[:number],0.001)
end

def test_costpercapita_bf191
  r = spreadsheet.costpercapita_bf191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.9776470725895,r[:number],0.001)
end

def test_costpercapita_bg191
  r = spreadsheet.costpercapita_bg191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.59670927540014,r[:number],0.001)
end

def test_costpercapita_bi191
  r = spreadsheet.costpercapita_bi191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.0965363145066,r[:number],0.001)
end

def test_costpercapita_bj191
  r = spreadsheet.costpercapita_bj191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243.55520515673277,r[:number],0.001)
end

def test_costpercapita_bk191
  r = spreadsheet.costpercapita_bk191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498.3990872337951,r[:number],0.001)
end

def test_costpercapita_bl191
  r = spreadsheet.costpercapita_bl191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(562.1511005403416,r[:number],0.001)
end

def test_costpercapita_bm191
  r = spreadsheet.costpercapita_bm191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(568.7813688407251,r[:number],0.001)
end

def test_costpercapita_bn191
  r = spreadsheet.costpercapita_bn191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(471.8550251508655,r[:number],0.001)
end

def test_costpercapita_bo191
  r = spreadsheet.costpercapita_bo191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(474.0728577666408,r[:number],0.001)
end

def test_costpercapita_bp191
  r = spreadsheet.costpercapita_bp191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(468.73364517920686,r[:number],0.001)
end

def test_costpercapita_bq191
  r = spreadsheet.costpercapita_bq191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(455.52801349273926,r[:number],0.001)
end

def test_costpercapita_bs191
  r = spreadsheet.costpercapita_bs191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1805.7212091924648,r[:number],0.001)
end

def test_costpercapita_bt191
  r = spreadsheet.costpercapita_bt191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1910.6794142388364,r[:number],0.001)
end

def test_costpercapita_bu191
  r = spreadsheet.costpercapita_bu191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2122.4943022930784,r[:number],0.001)
end

def test_costpercapita_bv191
  r = spreadsheet.costpercapita_bv191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2278.959498518391,r[:number],0.001)
end

def test_costpercapita_bw191
  r = spreadsheet.costpercapita_bw191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2252.6007262214016,r[:number],0.001)
end

def test_costpercapita_bx191
  r = spreadsheet.costpercapita_bx191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2129.597509586819,r[:number],0.001)
end

def test_costpercapita_by191
  r = spreadsheet.costpercapita_by191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2109.758594870642,r[:number],0.001)
end

def test_costpercapita_bz191
  r = spreadsheet.costpercapita_bz191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2097.854172192741,r[:number],0.001)
end

def test_costpercapita_ca191
  r = spreadsheet.costpercapita_ca191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2067.0347945819317,r[:number],0.001)
end

def test_costpercapita_cc191
  r = spreadsheet.costpercapita_cc191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2086.0778024107003,r[:number],0.001)
end

def test_costpercapita_cd191
  r = spreadsheet.costpercapita_cd191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44062.184153179245,r[:number],0.001)
end

def test_costpercapita_cf191
  r = spreadsheet.costpercapita_cf191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-144.47204251094982,r[:number],0.001)
end

def test_costpercapita_cg191
  r = spreadsheet.costpercapita_cg191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.476212287800234,r[:number],0.001)
end

def test_costpercapita_ch191
  r = spreadsheet.costpercapita_ch191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.59703507121037,r[:number],0.001)
end

def test_costpercapita_ci191
  r = spreadsheet.costpercapita_ci191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(311.9511381836275,r[:number],0.001)
end

def test_costpercapita_cj191
  r = spreadsheet.costpercapita_cj191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(323.7449087395065,r[:number],0.001)
end

def test_costpercapita_ck191
  r = spreadsheet.costpercapita_ck191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(230.95795544716125,r[:number],0.001)
end

def test_costpercapita_cl191
  r = spreadsheet.costpercapita_cl191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.8271035029144,r[:number],0.001)
end

def test_costpercapita_cm191
  r = spreadsheet.costpercapita_cm191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.97918411226416,r[:number],0.001)
end

def test_costpercapita_cn191
  r = spreadsheet.costpercapita_cn191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.56520007288935,r[:number],0.001)
end

def test_costpercapita_cp191
  r = spreadsheet.costpercapita_cp191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.29185498960268,r[:number],0.001)
end

def test_costpercapita_cq191
  r = spreadsheet.costpercapita_cq191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3553.688511175487,r[:number],0.001)
end

def test_costpercapita_cr191
  r = spreadsheet.costpercapita_cr191
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c192
  r = spreadsheet.costpercapita_c192
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e192
  r = spreadsheet.costpercapita_e192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42971.7059962488,r[:number],0.001)
end

def test_costpercapita_f192
  r = spreadsheet.costpercapita_f192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63177.26320755517,r[:number],0.001)
end

def test_costpercapita_g192
  r = spreadsheet.costpercapita_g192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83055.92297363642,r[:number],0.001)
end

def test_costpercapita_h192
  r = spreadsheet.costpercapita_h192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100430.01097667104,r[:number],0.001)
end

def test_costpercapita_i192
  r = spreadsheet.costpercapita_i192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115102.01248808636,r[:number],0.001)
end

def test_costpercapita_j192
  r = spreadsheet.costpercapita_j192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127593.01549830503,r[:number],0.001)
end

def test_costpercapita_k192
  r = spreadsheet.costpercapita_k192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137451.72879001134,r[:number],0.001)
end

def test_costpercapita_l192
  r = spreadsheet.costpercapita_l192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146785.00524112346,r[:number],0.001)
end

def test_costpercapita_m192
  r = spreadsheet.costpercapita_m192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154701.04988743563,r[:number],0.001)
end

def test_costpercapita_o192
  r = spreadsheet.costpercapita_o192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8392.778685601952,r[:number],0.001)
end

def test_costpercapita_p192
  r = spreadsheet.costpercapita_p192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9920.682029978992,r[:number],0.001)
end

def test_costpercapita_q192
  r = spreadsheet.costpercapita_q192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11914.437630047782,r[:number],0.001)
end

def test_costpercapita_r192
  r = spreadsheet.costpercapita_r192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13622.952350533735,r[:number],0.001)
end

def test_costpercapita_s192
  r = spreadsheet.costpercapita_s192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15297.639180437583,r[:number],0.001)
end

def test_costpercapita_t192
  r = spreadsheet.costpercapita_t192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16824.54099929273,r[:number],0.001)
end

def test_costpercapita_u192
  r = spreadsheet.costpercapita_u192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18183.072068307836,r[:number],0.001)
end

def test_costpercapita_v192
  r = spreadsheet.costpercapita_v192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19355.549221529916,r[:number],0.001)
end

def test_costpercapita_w192
  r = spreadsheet.costpercapita_w192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20411.719931860127,r[:number],0.001)
end

def test_costpercapita_y192
  r = spreadsheet.costpercapita_y192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.09370833709434,r[:number],0.001)
end

def test_costpercapita_z192
  r = spreadsheet.costpercapita_z192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.66083473726079,r[:number],0.001)
end

def test_costpercapita_aa192
  r = spreadsheet.costpercapita_aa192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.66560111306165,r[:number],0.001)
end

def test_costpercapita_ab192
  r = spreadsheet.costpercapita_ab192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.35470790424253,r[:number],0.001)
end

def test_costpercapita_ac192
  r = spreadsheet.costpercapita_ac192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.49300549305406,r[:number],0.001)
end

def test_costpercapita_ad192
  r = spreadsheet.costpercapita_ad192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.43519374096337,r[:number],0.001)
end

def test_costpercapita_ae192
  r = spreadsheet.costpercapita_ae192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.25478398208594,r[:number],0.001)
end

def test_costpercapita_af192
  r = spreadsheet.costpercapita_af192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.2410975339747,r[:number],0.001)
end

def test_costpercapita_ag192
  r = spreadsheet.costpercapita_ag192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.6453164495243,r[:number],0.001)
end

def test_costpercapita_ai192
  r = spreadsheet.costpercapita_ai192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51501.57839018784,r[:number],0.001)
end

def test_costpercapita_aj192
  r = spreadsheet.costpercapita_aj192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73245.60607227143,r[:number],0.001)
end

def test_costpercapita_ak192
  r = spreadsheet.costpercapita_ak192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95135.02620479724,r[:number],0.001)
end

def test_costpercapita_al192
  r = spreadsheet.costpercapita_al192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114223.31803510903,r[:number],0.001)
end

def test_costpercapita_am192
  r = spreadsheet.costpercapita_am192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130572.144674017,r[:number],0.001)
end

def test_costpercapita_an192
  r = spreadsheet.costpercapita_an192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144588.9916913387,r[:number],0.001)
end

def test_costpercapita_ao192
  r = spreadsheet.costpercapita_ao192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155806.05564230127,r[:number],0.001)
end

def test_costpercapita_ap192
  r = spreadsheet.costpercapita_ap192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166308.79556018737,r[:number],0.001)
end

def test_costpercapita_aq192
  r = spreadsheet.costpercapita_aq192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175282.4151357453,r[:number],0.001)
end

def test_costpercapita_as192
  r = spreadsheet.costpercapita_as192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122962.65904510612,r[:number],0.001)
end

def test_costpercapita_at192
  r = spreadsheet.costpercapita_at192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2437432.471423289,r[:number],0.001)
end

def test_costpercapita_ay192
  r = spreadsheet.costpercapita_ay192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16948.957459861707,r[:number],0.001)
end

def test_costpercapita_az192
  r = spreadsheet.costpercapita_az192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41530.767036524485,r[:number],0.001)
end

def test_costpercapita_ba192
  r = spreadsheet.costpercapita_ba192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54598.37943105323,r[:number],0.001)
end

def test_costpercapita_bb192
  r = spreadsheet.costpercapita_bb192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66019.56427971597,r[:number],0.001)
end

def test_costpercapita_bc192
  r = spreadsheet.costpercapita_bc192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75664.48154573099,r[:number],0.001)
end

def test_costpercapita_bd192
  r = spreadsheet.costpercapita_bd192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83875.67826005592,r[:number],0.001)
end

def test_costpercapita_be192
  r = spreadsheet.costpercapita_be192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90356.48961860774,r[:number],0.001)
end

def test_costpercapita_bf192
  r = spreadsheet.costpercapita_bf192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96491.89514741616,r[:number],0.001)
end

def test_costpercapita_bg192
  r = spreadsheet.costpercapita_bg192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101695.65658571475,r[:number],0.001)
end

def test_costpercapita_bi192
  r = spreadsheet.costpercapita_bi192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16948.957459861707,r[:number],0.001)
end

def test_costpercapita_bj192
  r = spreadsheet.costpercapita_bj192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57920.83145041426,r[:number],0.001)
end

def test_costpercapita_bk192
  r = spreadsheet.costpercapita_bk192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110622.98998741596,r[:number],0.001)
end

def test_costpercapita_bl192
  r = spreadsheet.costpercapita_bl192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157854.67704258038,r[:number],0.001)
end

def test_costpercapita_bm192
  r = spreadsheet.costpercapita_bm192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191342.755261401,r[:number],0.001)
end

def test_costpercapita_bn192
  r = spreadsheet.costpercapita_bn192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(220461.0797713308,r[:number],0.001)
end

def test_costpercapita_bo192
  r = spreadsheet.costpercapita_bo192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(244749.91548870446,r[:number],0.001)
end

def test_costpercapita_bp192
  r = spreadsheet.costpercapita_bp192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265495.40978555416,r[:number],0.001)
end

def test_costpercapita_bq192
  r = spreadsheet.costpercapita_bq192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283288.3381253415,r[:number],0.001)
end

def test_costpercapita_bs192
  r = spreadsheet.costpercapita_bs192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25478.82985380076,r[:number],0.001)
end

def test_costpercapita_bt192
  r = spreadsheet.costpercapita_bt192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67989.17431513051,r[:number],0.001)
end

def test_costpercapita_bu192
  r = spreadsheet.costpercapita_bu192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122702.09321857683,r[:number],0.001)
end

def test_costpercapita_bv192
  r = spreadsheet.costpercapita_bv192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171647.9841010184,r[:number],0.001)
end

def test_costpercapita_bw192
  r = spreadsheet.costpercapita_bw192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206812.88744733165,r[:number],0.001)
end

def test_costpercapita_bx192
  r = spreadsheet.costpercapita_bx192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(237457.0559643645,r[:number],0.001)
end

def test_costpercapita_by192
  r = spreadsheet.costpercapita_by192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(263104.2423409944,r[:number],0.001)
end

def test_costpercapita_bz192
  r = spreadsheet.costpercapita_bz192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285019.20010461804,r[:number],0.001)
end

def test_costpercapita_ca192
  r = spreadsheet.costpercapita_ca192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303869.7033736512,r[:number],0.001)
end

def test_costpercapita_cc192
  r = spreadsheet.costpercapita_cc192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187120.13007994293,r[:number],0.001)
end

def test_costpercapita_cd192
  r = spreadsheet.costpercapita_cd192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3590441.551267211,r[:number],0.001)
end

def test_costpercapita_cf192
  r = spreadsheet.costpercapita_cf192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-26022.748536387087,r[:number],0.001)
end

def test_costpercapita_cg192
  r = spreadsheet.costpercapita_cg192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5256.431757140906,r[:number],0.001)
end

def test_costpercapita_ch192
  r = spreadsheet.costpercapita_ch192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27567.067013779546,r[:number],0.001)
end

def test_costpercapita_ci192
  r = spreadsheet.costpercapita_ci192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57424.66606590936,r[:number],0.001)
end

def test_costpercapita_cj192
  r = spreadsheet.costpercapita_cj192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76240.74277331466,r[:number],0.001)
end

def test_costpercapita_ck192
  r = spreadsheet.costpercapita_ck192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92868.06427302577,r[:number],0.001)
end

def test_costpercapita_cl192
  r = spreadsheet.costpercapita_cl192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107298.18669869311,r[:number],0.001)
end

def test_costpercapita_cm192
  r = spreadsheet.costpercapita_cm192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118710.40454443073,r[:number],0.001)
end

def test_costpercapita_cn192
  r = spreadsheet.costpercapita_cn192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128587.2882379059,r[:number],0.001)
end

def test_costpercapita_cp192
  r = spreadsheet.costpercapita_cp192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64157.471034836795,r[:number],0.001)
end

def test_costpercapita_cq192
  r = spreadsheet.costpercapita_cq192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1153009.0798439223,r[:number],0.001)
end

def test_costpercapita_cr192
  r = spreadsheet.costpercapita_cr192
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c193
  r = spreadsheet.costpercapita_c193
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e193
  r = spreadsheet.costpercapita_e193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4453.3346573816925,r[:number],0.001)
end

def test_costpercapita_f193
  r = spreadsheet.costpercapita_f193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45592.5030720248,r[:number],0.001)
end

def test_costpercapita_g193
  r = spreadsheet.costpercapita_g193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53142.85748463803,r[:number],0.001)
end

def test_costpercapita_h193
  r = spreadsheet.costpercapita_h193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60219.570628781206,r[:number],0.001)
end

def test_costpercapita_i193
  r = spreadsheet.costpercapita_i193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67254.64022280791,r[:number],0.001)
end

def test_costpercapita_j193
  r = spreadsheet.costpercapita_j193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73891.21841581824,r[:number],0.001)
end

def test_costpercapita_k193
  r = spreadsheet.costpercapita_k193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80283.30407134323,r[:number],0.001)
end

def test_costpercapita_l193
  r = spreadsheet.costpercapita_l193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86597.20896018847,r[:number],0.001)
end

def test_costpercapita_m193
  r = spreadsheet.costpercapita_m193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92743.87306526664,r[:number],0.001)
end

def test_costpercapita_o193
  r = spreadsheet.costpercapita_o193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(605.7050131165257,r[:number],0.001)
end

def test_costpercapita_p193
  r = spreadsheet.costpercapita_p193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1271.632485771039,r[:number],0.001)
end

def test_costpercapita_q193
  r = spreadsheet.costpercapita_q193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.1905393336906,r[:number],0.001)
end

def test_costpercapita_r193
  r = spreadsheet.costpercapita_r193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2816.818645818465,r[:number],0.001)
end

def test_costpercapita_s193
  r = spreadsheet.costpercapita_s193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3694.7923341328697,r[:number],0.001)
end

def test_costpercapita_t193
  r = spreadsheet.costpercapita_t193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4648.972830207846,r[:number],0.001)
end

def test_costpercapita_u193
  r = spreadsheet.costpercapita_u193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5674.355111461083,r[:number],0.001)
end

def test_costpercapita_v193
  r = spreadsheet.costpercapita_v193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6766.674099302619,r[:number],0.001)
end

def test_costpercapita_w193
  r = spreadsheet.costpercapita_w193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7924.894941696736,r[:number],0.001)
end

def test_costpercapita_y193
  r = spreadsheet.costpercapita_y193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z193
  r = spreadsheet.costpercapita_z193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa193
  r = spreadsheet.costpercapita_aa193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab193
  r = spreadsheet.costpercapita_ab193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac193
  r = spreadsheet.costpercapita_ac193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad193
  r = spreadsheet.costpercapita_ad193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae193
  r = spreadsheet.costpercapita_ae193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af193
  r = spreadsheet.costpercapita_af193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag193
  r = spreadsheet.costpercapita_ag193
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai193
  r = spreadsheet.costpercapita_ai193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5059.039670498219,r[:number],0.001)
end

def test_costpercapita_aj193
  r = spreadsheet.costpercapita_aj193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46864.135557795846,r[:number],0.001)
end

def test_costpercapita_ak193
  r = spreadsheet.costpercapita_ak193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55153.048023971714,r[:number],0.001)
end

def test_costpercapita_al193
  r = spreadsheet.costpercapita_al193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63036.38927459967,r[:number],0.001)
end

def test_costpercapita_am193
  r = spreadsheet.costpercapita_am193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70949.43255694077,r[:number],0.001)
end

def test_costpercapita_an193
  r = spreadsheet.costpercapita_an193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78540.1912460261,r[:number],0.001)
end

def test_costpercapita_ao193
  r = spreadsheet.costpercapita_ao193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85957.6591828043,r[:number],0.001)
end

def test_costpercapita_ap193
  r = spreadsheet.costpercapita_ap193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93363.8830594911,r[:number],0.001)
end

def test_costpercapita_aq193
  r = spreadsheet.costpercapita_aq193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100668.76800696338,r[:number],0.001)
end

def test_costpercapita_as193
  r = spreadsheet.costpercapita_as193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66621.39406434345,r[:number],0.001)
end

def test_costpercapita_at193
  r = spreadsheet.costpercapita_at193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1360459.273752844,r[:number],0.001)
end

def test_costpercapita_ay193
  r = spreadsheet.costpercapita_ay193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1756.4901814482084,r[:number],0.001)
end

def test_costpercapita_az193
  r = spreadsheet.costpercapita_az193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29971.092883141115,r[:number],0.001)
end

def test_costpercapita_ba193
  r = spreadsheet.costpercapita_ba193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34934.46094046359,r[:number],0.001)
end

def test_costpercapita_bb193
  r = spreadsheet.costpercapita_bb193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39586.47196550866,r[:number],0.001)
end

def test_costpercapita_bc193
  r = spreadsheet.costpercapita_bc193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44211.107816469696,r[:number],0.001)
end

def test_costpercapita_bd193
  r = spreadsheet.costpercapita_bd193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48573.78781968689,r[:number],0.001)
end

def test_costpercapita_be193
  r = spreadsheet.costpercapita_be193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52775.74603628421,r[:number],0.001)
end

def test_costpercapita_bf193
  r = spreadsheet.costpercapita_bf193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56926.31064950485,r[:number],0.001)
end

def test_costpercapita_bg193
  r = spreadsheet.costpercapita_bg193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60966.9363752682,r[:number],0.001)
end

def test_costpercapita_bi193
  r = spreadsheet.costpercapita_bi193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1756.4901814482084,r[:number],0.001)
end

def test_costpercapita_bj193
  r = spreadsheet.costpercapita_bj193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31669.662679217286,r[:number],0.001)
end

def test_costpercapita_bk193
  r = spreadsheet.costpercapita_bk193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65567.31743827606,r[:number],0.001)
end

def test_costpercapita_bl193
  r = spreadsheet.costpercapita_bl193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101531.50746824848,r[:number],0.001)
end

def test_costpercapita_bm193
  r = spreadsheet.costpercapita_bm193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115643.97712648762,r[:number],0.001)
end

def test_costpercapita_bn193
  r = spreadsheet.costpercapita_bn193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129341.42451221,r[:number],0.001)
end

def test_costpercapita_bo193
  r = spreadsheet.costpercapita_bo193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142562.66153948737,r[:number],0.001)
end

def test_costpercapita_bp193
  r = spreadsheet.costpercapita_bp193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155238.8923300819,r[:number],0.001)
end

def test_costpercapita_bq193
  r = spreadsheet.costpercapita_bq193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167588.64213458175,r[:number],0.001)
end

def test_costpercapita_bs193
  r = spreadsheet.costpercapita_bs193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2362.1951945647343,r[:number],0.001)
end

def test_costpercapita_bt193
  r = spreadsheet.costpercapita_bt193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32941.295164988325,r[:number],0.001)
end

def test_costpercapita_bu193
  r = spreadsheet.costpercapita_bu193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67577.50797760976,r[:number],0.001)
end

def test_costpercapita_bv193
  r = spreadsheet.costpercapita_bv193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104348.32611406695,r[:number],0.001)
end

def test_costpercapita_bw193
  r = spreadsheet.costpercapita_bw193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119338.76946062049,r[:number],0.001)
end

def test_costpercapita_bx193
  r = spreadsheet.costpercapita_bx193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133990.39734241785,r[:number],0.001)
end

def test_costpercapita_by193
  r = spreadsheet.costpercapita_by193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148237.01665094844,r[:number],0.001)
end

def test_costpercapita_bz193
  r = spreadsheet.costpercapita_bz193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162005.56642938455,r[:number],0.001)
end

def test_costpercapita_ca193
  r = spreadsheet.costpercapita_ca193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175513.53707627847,r[:number],0.001)
end

def test_costpercapita_cc193
  r = spreadsheet.costpercapita_cc193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105146.06793454217,r[:number],0.001)
end

def test_costpercapita_cd193
  r = spreadsheet.costpercapita_cd193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2021024.7071839313,r[:number],0.001)
end

def test_costpercapita_cf193
  r = spreadsheet.costpercapita_cf193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2696.8444759334834,r[:number],0.001)
end

def test_costpercapita_cg193
  r = spreadsheet.costpercapita_cg193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-13922.840392807519,r[:number],0.001)
end

def test_costpercapita_ch193
  r = spreadsheet.costpercapita_ch193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12424.459953638045,r[:number],0.001)
end

def test_costpercapita_ci193
  r = spreadsheet.costpercapita_ci193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41311.93683946728,r[:number],0.001)
end

def test_costpercapita_cj193
  r = spreadsheet.costpercapita_cj193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48389.336903679694,r[:number],0.001)
end

def test_costpercapita_ck193
  r = spreadsheet.costpercapita_ck193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55450.20609639175,r[:number],0.001)
end

def test_costpercapita_cl193
  r = spreadsheet.costpercapita_cl193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62279.35746814413,r[:number],0.001)
end

def test_costpercapita_cm193
  r = spreadsheet.costpercapita_cm193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68641.68336989342,r[:number],0.001)
end

def test_costpercapita_cn193
  r = spreadsheet.costpercapita_cn193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74844.76906931511,r[:number],0.001)
end

def test_costpercapita_cp193
  r = spreadsheet.costpercapita_cp193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38524.673870198705,r[:number],0.001)
end

def test_costpercapita_cq193
  r = spreadsheet.costpercapita_cq193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(660565.4334310878,r[:number],0.001)
end

def test_costpercapita_cr193
  r = spreadsheet.costpercapita_cr193
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c194
  r = spreadsheet.costpercapita_c194
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e194
  r = spreadsheet.costpercapita_e194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35278.60314920118,r[:number],0.001)
end

def test_costpercapita_f194
  r = spreadsheet.costpercapita_f194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80961.17686045593,r[:number],0.001)
end

def test_costpercapita_g194
  r = spreadsheet.costpercapita_g194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107098.1119824821,r[:number],0.001)
end

def test_costpercapita_h194
  r = spreadsheet.costpercapita_h194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143946.29744029022,r[:number],0.001)
end

def test_costpercapita_i194
  r = spreadsheet.costpercapita_i194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183969.81609193847,r[:number],0.001)
end

def test_costpercapita_j194
  r = spreadsheet.costpercapita_j194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232579.585694065,r[:number],0.001)
end

def test_costpercapita_k194
  r = spreadsheet.costpercapita_k194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(289507.869263247,r[:number],0.001)
end

def test_costpercapita_l194
  r = spreadsheet.costpercapita_l194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351812.16222079797,r[:number],0.001)
end

def test_costpercapita_m194
  r = spreadsheet.costpercapita_m194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(429002.5070900085,r[:number],0.001)
end

def test_costpercapita_o194
  r = spreadsheet.costpercapita_o194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36067.56466045361,r[:number],0.001)
end

def test_costpercapita_p194
  r = spreadsheet.costpercapita_p194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54153.742428865284,r[:number],0.001)
end

def test_costpercapita_q194
  r = spreadsheet.costpercapita_q194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74191.5447517874,r[:number],0.001)
end

def test_costpercapita_r194
  r = spreadsheet.costpercapita_r194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98090.38821231591,r[:number],0.001)
end

def test_costpercapita_s194
  r = spreadsheet.costpercapita_s194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125106.45575290878,r[:number],0.001)
end

def test_costpercapita_t194
  r = spreadsheet.costpercapita_t194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156252.21828067765,r[:number],0.001)
end

def test_costpercapita_u194
  r = spreadsheet.costpercapita_u194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191953.3088477809,r[:number],0.001)
end

def test_costpercapita_v194
  r = spreadsheet.costpercapita_v194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232010.68945855837,r[:number],0.001)
end

def test_costpercapita_w194
  r = spreadsheet.costpercapita_w194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(277876.07997087284,r[:number],0.001)
end

def test_costpercapita_y194
  r = spreadsheet.costpercapita_y194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z194
  r = spreadsheet.costpercapita_z194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa194
  r = spreadsheet.costpercapita_aa194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab194
  r = spreadsheet.costpercapita_ab194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac194
  r = spreadsheet.costpercapita_ac194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad194
  r = spreadsheet.costpercapita_ad194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae194
  r = spreadsheet.costpercapita_ae194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af194
  r = spreadsheet.costpercapita_af194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag194
  r = spreadsheet.costpercapita_ag194
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai194
  r = spreadsheet.costpercapita_ai194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71346.16780965478,r[:number],0.001)
end

def test_costpercapita_aj194
  r = spreadsheet.costpercapita_aj194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135114.91928932123,r[:number],0.001)
end

def test_costpercapita_ak194
  r = spreadsheet.costpercapita_ak194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181289.6567342695,r[:number],0.001)
end

def test_costpercapita_al194
  r = spreadsheet.costpercapita_al194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242036.68565260616,r[:number],0.001)
end

def test_costpercapita_am194
  r = spreadsheet.costpercapita_am194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(309076.2718448472,r[:number],0.001)
end

def test_costpercapita_an194
  r = spreadsheet.costpercapita_an194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388831.8039747426,r[:number],0.001)
end

def test_costpercapita_ao194
  r = spreadsheet.costpercapita_ao194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481461.1781110279,r[:number],0.001)
end

def test_costpercapita_ap194
  r = spreadsheet.costpercapita_ap194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(583822.8516793563,r[:number],0.001)
end

def test_costpercapita_aq194
  r = spreadsheet.costpercapita_aq194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(706878.5870608813,r[:number],0.001)
end

def test_costpercapita_as194
  r = spreadsheet.costpercapita_as194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(344428.6802396341,r[:number],0.001)
end

def test_costpercapita_at194
  r = spreadsheet.costpercapita_at194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6296211.280399277,r[:number],0.001)
end

def test_costpercapita_ay194
  r = spreadsheet.costpercapita_ay194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13914.63359800867,r[:number],0.001)
end

def test_costpercapita_az194
  r = spreadsheet.costpercapita_az194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53221.35851545333,r[:number],0.001)
end

def test_costpercapita_ba194
  r = spreadsheet.costpercapita_ba194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70402.9663992183,r[:number],0.001)
end

def test_costpercapita_bb194
  r = spreadsheet.costpercapita_bb194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94625.81696714018,r[:number],0.001)
end

def test_costpercapita_bc194
  r = spreadsheet.costpercapita_bc194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120936.03277441209,r[:number],0.001)
end

def test_costpercapita_bd194
  r = spreadsheet.costpercapita_bd194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152890.5827904948,r[:number],0.001)
end

def test_costpercapita_be194
  r = spreadsheet.costpercapita_be194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190313.46505327334,r[:number],0.001)
end

def test_costpercapita_bf194
  r = spreadsheet.costpercapita_bf194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231270.36861040597,r[:number],0.001)
end

def test_costpercapita_bg194
  r = spreadsheet.costpercapita_bg194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282012.8995063756,r[:number],0.001)
end

def test_costpercapita_bi194
  r = spreadsheet.costpercapita_bi194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13914.63359800867,r[:number],0.001)
end

def test_costpercapita_bj194
  r = spreadsheet.costpercapita_bj194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66677.15610696477,r[:number],0.001)
end

def test_costpercapita_bk194
  r = spreadsheet.costpercapita_bk194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134897.23573816073,r[:number],0.001)
end

def test_costpercapita_bl194
  r = spreadsheet.costpercapita_bl194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212733.88417017678,r[:number],0.001)
end

def test_costpercapita_bm194
  r = spreadsheet.costpercapita_bm194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279335.83980238554,r[:number],0.001)
end

def test_costpercapita_bn194
  r = spreadsheet.costpercapita_bn194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(360850.4273554017,r[:number],0.001)
end

def test_costpercapita_bo194
  r = spreadsheet.costpercapita_bo194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(455512.36921281513,r[:number],0.001)
end

def test_costpercapita_bp194
  r = spreadsheet.costpercapita_bp194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(564432.6463763206,r[:number],0.001)
end

def test_costpercapita_bq194
  r = spreadsheet.costpercapita_bq194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(692003.7351357889,r[:number],0.001)
end

def test_costpercapita_bs194
  r = spreadsheet.costpercapita_bs194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49982.19825846228,r[:number],0.001)
end

def test_costpercapita_bt194
  r = spreadsheet.costpercapita_bt194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120830.89853583004,r[:number],0.001)
end

def test_costpercapita_bu194
  r = spreadsheet.costpercapita_bu194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209088.7804899481,r[:number],0.001)
end

def test_costpercapita_bv194
  r = spreadsheet.costpercapita_bv194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(310824.27238249267,r[:number],0.001)
end

def test_costpercapita_bw194
  r = spreadsheet.costpercapita_bw194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(404442.2955552943,r[:number],0.001)
end

def test_costpercapita_bx194
  r = spreadsheet.costpercapita_bx194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(517102.6456360793,r[:number],0.001)
end

def test_costpercapita_by194
  r = spreadsheet.costpercapita_by194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(647465.678060596,r[:number],0.001)
end

def test_costpercapita_bz194
  r = spreadsheet.costpercapita_bz194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(796443.335834879,r[:number],0.001)
end

def test_costpercapita_ca194
  r = spreadsheet.costpercapita_ca194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(969879.8151066616,r[:number],0.001)
end

def test_costpercapita_cc194
  r = spreadsheet.costpercapita_cc194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(447339.99109558255,r[:number],0.001)
end

def test_costpercapita_cd194
  r = spreadsheet.costpercapita_cd194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8000624.441288773,r[:number],0.001)
end

def test_costpercapita_cf194
  r = spreadsheet.costpercapita_cf194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-21363.96955119251,r[:number],0.001)
end

def test_costpercapita_cg194
  r = spreadsheet.costpercapita_cg194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-14284.020753491177,r[:number],0.001)
end

def test_costpercapita_ch194
  r = spreadsheet.costpercapita_ch194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27799.123755678593,r[:number],0.001)
end

def test_costpercapita_ci194
  r = spreadsheet.costpercapita_ci194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68787.58672988656,r[:number],0.001)
end

def test_costpercapita_cj194
  r = spreadsheet.costpercapita_cj194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95366.02371044709,r[:number],0.001)
end

def test_costpercapita_ck194
  r = spreadsheet.costpercapita_ck194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128270.84166133674,r[:number],0.001)
end

def test_costpercapita_cl194
  r = spreadsheet.costpercapita_cl194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166004.49994956815,r[:number],0.001)
end

def test_costpercapita_cm194
  r = spreadsheet.costpercapita_cm194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212620.48415552263,r[:number],0.001)
end

def test_costpercapita_cn194
  r = spreadsheet.costpercapita_cn194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(263001.2280457804,r[:number],0.001)
end

def test_costpercapita_cp194
  r = spreadsheet.costpercapita_cp194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102911.31085594848,r[:number],0.001)
end

def test_costpercapita_cq194
  r = spreadsheet.costpercapita_cq194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1704413.1608894973,r[:number],0.001)
end

def test_costpercapita_cr194
  r = spreadsheet.costpercapita_cr194
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c195
  r = spreadsheet.costpercapita_c195
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e195
  r = spreadsheet.costpercapita_e195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.501503394061272,r[:number],0.001)
end

def test_costpercapita_f195
  r = spreadsheet.costpercapita_f195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.654657730685964,r[:number],0.001)
end

def test_costpercapita_g195
  r = spreadsheet.costpercapita_g195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.932778118698089,r[:number],0.001)
end

def test_costpercapita_h195
  r = spreadsheet.costpercapita_h195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.291332390419164,r[:number],0.001)
end

def test_costpercapita_i195
  r = spreadsheet.costpercapita_i195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.790810821928129,r[:number],0.001)
end

def test_costpercapita_j195
  r = spreadsheet.costpercapita_j195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.40318407443384,r[:number],0.001)
end

def test_costpercapita_k195
  r = spreadsheet.costpercapita_k195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.094221775906331,r[:number],0.001)
end

def test_costpercapita_l195
  r = spreadsheet.costpercapita_l195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.841911723728388,r[:number],0.001)
end

def test_costpercapita_m195
  r = spreadsheet.costpercapita_m195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6336130361418455,r[:number],0.001)
end

def test_costpercapita_o195
  r = spreadsheet.costpercapita_o195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.366948484265311,r[:number],0.001)
end

def test_costpercapita_p195
  r = spreadsheet.costpercapita_p195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.1653847697148,r[:number],0.001)
end

def test_costpercapita_q195
  r = spreadsheet.costpercapita_q195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.078668379868073,r[:number],0.001)
end

def test_costpercapita_r195
  r = spreadsheet.costpercapita_r195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.207378058178438,r[:number],0.001)
end

def test_costpercapita_s195
  r = spreadsheet.costpercapita_s195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.52690777830955,r[:number],0.001)
end

def test_costpercapita_t195
  r = spreadsheet.costpercapita_t195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.99614813048735,r[:number],0.001)
end

def test_costpercapita_u195
  r = spreadsheet.costpercapita_u195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568814724711372,r[:number],0.001)
end

def test_costpercapita_v195
  r = spreadsheet.costpercapita_v195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.215535728368746,r[:number],0.001)
end

def test_costpercapita_w195
  r = spreadsheet.costpercapita_w195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.920240132730445,r[:number],0.001)
end

def test_costpercapita_y195
  r = spreadsheet.costpercapita_y195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z195
  r = spreadsheet.costpercapita_z195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa195
  r = spreadsheet.costpercapita_aa195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab195
  r = spreadsheet.costpercapita_ab195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac195
  r = spreadsheet.costpercapita_ac195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad195
  r = spreadsheet.costpercapita_ad195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae195
  r = spreadsheet.costpercapita_ae195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af195
  r = spreadsheet.costpercapita_af195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag195
  r = spreadsheet.costpercapita_ag195
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai195
  r = spreadsheet.costpercapita_ai195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.86845187832658,r[:number],0.001)
end

def test_costpercapita_aj195
  r = spreadsheet.costpercapita_aj195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.820042500400763,r[:number],0.001)
end

def test_costpercapita_ak195
  r = spreadsheet.costpercapita_ak195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.011446498566162,r[:number],0.001)
end

def test_costpercapita_al195
  r = spreadsheet.costpercapita_al195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.498710448597603,r[:number],0.001)
end

def test_costpercapita_am195
  r = spreadsheet.costpercapita_am195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.31771860023768,r[:number],0.001)
end

def test_costpercapita_an195
  r = spreadsheet.costpercapita_an195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.39933220492119,r[:number],0.001)
end

def test_costpercapita_ao195
  r = spreadsheet.costpercapita_ao195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663036500617702,r[:number],0.001)
end

def test_costpercapita_ap195
  r = spreadsheet.costpercapita_ap195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.057447452097135,r[:number],0.001)
end

def test_costpercapita_aq195
  r = spreadsheet.costpercapita_aq195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.553853168872289,r[:number],0.001)
end

def test_costpercapita_as195
  r = spreadsheet.costpercapita_as195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.132226583626345,r[:number],0.001)
end

def test_costpercapita_at195
  r = spreadsheet.costpercapita_at195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.41342302506314,r[:number],0.001)
end

def test_costpercapita_ay195
  r = spreadsheet.costpercapita_ay195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976265,r[:number],0.001)
end

def test_costpercapita_az195
  r = spreadsheet.costpercapita_az195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.689302697603889,r[:number],0.001)
end

def test_costpercapita_ba195
  r = spreadsheet.costpercapita_ba195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.214761502373705,r[:number],0.001)
end

def test_costpercapita_bb195
  r = spreadsheet.costpercapita_bb195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793095039548198,r[:number],0.001)
end

def test_costpercapita_bc195
  r = spreadsheet.costpercapita_bc195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.464067734432658,r[:number],0.001)
end

def test_costpercapita_bd195
  r = spreadsheet.costpercapita_bd195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.209253971854448,r[:number],0.001)
end

def test_costpercapita_be195
  r = spreadsheet.costpercapita_be195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.006151770338372,r[:number],0.001)
end

def test_costpercapita_bf195
  r = spreadsheet.costpercapita_bf195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8402909928059508,r[:number],0.001)
end

def test_costpercapita_bg195
  r = spreadsheet.costpercapita_bg195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7033619169175234,r[:number],0.001)
end

def test_costpercapita_bi195
  r = spreadsheet.costpercapita_bi195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976265,r[:number],0.001)
end

def test_costpercapita_bj195
  r = spreadsheet.costpercapita_bj195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.313321084750326,r[:number],0.001)
end

def test_costpercapita_bk195
  r = spreadsheet.costpercapita_bk195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.223181680288242,r[:number],0.001)
end

def test_costpercapita_bl195
  r = spreadsheet.costpercapita_bl195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.179041446909173,r[:number],0.001)
end

def test_costpercapita_bm195
  r = spreadsheet.costpercapita_bm195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.041452274225913,r[:number],0.001)
end

def test_costpercapita_bn195
  r = spreadsheet.costpercapita_bn195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.120494318508507,r[:number],0.001)
end

def test_costpercapita_bo195
  r = spreadsheet.costpercapita_bo195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.391591205657562,r[:number],0.001)
end

def test_costpercapita_bp195
  r = spreadsheet.costpercapita_bp195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.803838947213613,r[:number],0.001)
end

def test_costpercapita_bq195
  r = spreadsheet.costpercapita_bq195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.324953367902518,r[:number],0.001)
end

def test_costpercapita_bs195
  r = spreadsheet.costpercapita_bs195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.114544096241573,r[:number],0.001)
end

def test_costpercapita_bt195
  r = spreadsheet.costpercapita_bt195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.478705854465122,r[:number],0.001)
end

def test_costpercapita_bu195
  r = spreadsheet.costpercapita_bu195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.301850060156315,r[:number],0.001)
end

def test_costpercapita_bv195
  r = spreadsheet.costpercapita_bv195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.38641950508761,r[:number],0.001)
end

def test_costpercapita_bw195
  r = spreadsheet.costpercapita_bw195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.56836005253546,r[:number],0.001)
end

def test_costpercapita_bx195
  r = spreadsheet.costpercapita_bx195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.116642448995858,r[:number],0.001)
end

def test_costpercapita_by195
  r = spreadsheet.costpercapita_by195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.960405930368935,r[:number],0.001)
end

def test_costpercapita_bz195
  r = spreadsheet.costpercapita_bz195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.01937467558236,r[:number],0.001)
end

def test_costpercapita_ca195
  r = spreadsheet.costpercapita_ca195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.24519350063296,r[:number],0.001)
end

def test_costpercapita_cc195
  r = spreadsheet.costpercapita_cc195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.687944013785128,r[:number],0.001)
end

def test_costpercapita_cd195
  r = spreadsheet.costpercapita_cd195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(493.62494620970085,r[:number],0.001)
end

def test_costpercapita_cf195
  r = spreadsheet.costpercapita_cf195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.753907782085006,r[:number],0.001)
end

def test_costpercapita_cg195
  r = spreadsheet.costpercapita_cg195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.6586633540643624,r[:number],0.001)
end

def test_costpercapita_ch195
  r = spreadsheet.costpercapita_ch195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.2904035615901535,r[:number],0.001)
end

def test_costpercapita_ci195
  r = spreadsheet.costpercapita_ci195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.887709056490008,r[:number],0.001)
end

def test_costpercapita_cj195
  r = spreadsheet.costpercapita_cj195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.250641452297785,r[:number],0.001)
end

def test_costpercapita_ck195
  r = spreadsheet.costpercapita_ck195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.7173102440746675,r[:number],0.001)
end

def test_costpercapita_cl195
  r = spreadsheet.costpercapita_cl195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.297369429751232,r[:number],0.001)
end

def test_costpercapita_cm195
  r = spreadsheet.costpercapita_cm195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.961927223485224,r[:number],0.001)
end

def test_costpercapita_cn195
  r = spreadsheet.costpercapita_cn195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6913403317606726,r[:number],0.001)
end

def test_costpercapita_cp195
  r = spreadsheet.costpercapita_cp195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.555717430158789,r[:number],0.001)
end

def test_costpercapita_cq195
  r = spreadsheet.costpercapita_cq195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.21152318463781,r[:number],0.001)
end

def test_costpercapita_cr195
  r = spreadsheet.costpercapita_cr195
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c196
  r = spreadsheet.costpercapita_c196
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e196
  r = spreadsheet.costpercapita_e196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_f196
  r = spreadsheet.costpercapita_f196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.510941756577549,r[:number],0.001)
end

def test_costpercapita_g196
  r = spreadsheet.costpercapita_g196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.721390312179908,r[:number],0.001)
end

def test_costpercapita_h196
  r = spreadsheet.costpercapita_h196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.427672328465383,r[:number],0.001)
end

def test_costpercapita_i196
  r = spreadsheet.costpercapita_i196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.170709128499708,r[:number],0.001)
end

def test_costpercapita_j196
  r = spreadsheet.costpercapita_j196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.947100165718051,r[:number],0.001)
end

def test_costpercapita_k196
  r = spreadsheet.costpercapita_k196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.830627025249025,r[:number],0.001)
end

def test_costpercapita_l196
  r = spreadsheet.costpercapita_l196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.640836506622003,r[:number],0.001)
end

def test_costpercapita_m196
  r = spreadsheet.costpercapita_m196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.466117568649894,r[:number],0.001)
end

def test_costpercapita_o196
  r = spreadsheet.costpercapita_o196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_p196
  r = spreadsheet.costpercapita_p196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.07532825269732647,r[:number],0.001)
end

def test_costpercapita_q196
  r = spreadsheet.costpercapita_q196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.17164170936539722,r[:number],0.001)
end

def test_costpercapita_r196
  r = spreadsheet.costpercapita_r196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.16283016985396148,r[:number],0.001)
end

def test_costpercapita_s196
  r = spreadsheet.costpercapita_s196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.15512127385499125,r[:number],0.001)
end

def test_costpercapita_t196
  r = spreadsheet.costpercapita_t196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.14841300497154153,r[:number],0.001)
end

def test_costpercapita_u196
  r = spreadsheet.costpercapita_u196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.14491881075747076,r[:number],0.001)
end

def test_costpercapita_v196
  r = spreadsheet.costpercapita_v196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13922509519866005,r[:number],0.001)
end

def test_costpercapita_w196
  r = spreadsheet.costpercapita_w196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.13398352705949682,r[:number],0.001)
end

def test_costpercapita_y196
  r = spreadsheet.costpercapita_y196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_z196
  r = spreadsheet.costpercapita_z196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aa196
  r = spreadsheet.costpercapita_aa196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ab196
  r = spreadsheet.costpercapita_ab196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ac196
  r = spreadsheet.costpercapita_ac196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ad196
  r = spreadsheet.costpercapita_ad196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ae196
  r = spreadsheet.costpercapita_ae196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_af196
  r = spreadsheet.costpercapita_af196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ag196
  r = spreadsheet.costpercapita_ag196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_ai196
  r = spreadsheet.costpercapita_ai196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_aj196
  r = spreadsheet.costpercapita_aj196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5862700092748754,r[:number],0.001)
end

def test_costpercapita_ak196
  r = spreadsheet.costpercapita_ak196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.893032021545305,r[:number],0.001)
end

def test_costpercapita_al196
  r = spreadsheet.costpercapita_al196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.590502498319345,r[:number],0.001)
end

def test_costpercapita_am196
  r = spreadsheet.costpercapita_am196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3258304023547,r[:number],0.001)
end

def test_costpercapita_an196
  r = spreadsheet.costpercapita_an196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.095513170689592,r[:number],0.001)
end

def test_costpercapita_ao196
  r = spreadsheet.costpercapita_ao196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.975545836006496,r[:number],0.001)
end

def test_costpercapita_ap196
  r = spreadsheet.costpercapita_ap196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7800616018206625,r[:number],0.001)
end

def test_costpercapita_aq196
  r = spreadsheet.costpercapita_aq196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.600101095709391,r[:number],0.001)
end

def test_costpercapita_as196
  r = spreadsheet.costpercapita_as196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.31631740396893,r[:number],0.001)
end

def test_costpercapita_at196
  r = spreadsheet.costpercapita_at196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.93069979682132,r[:number],0.001)
end

def test_costpercapita_ay196
  r = spreadsheet.costpercapita_ay196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_az196
  r = spreadsheet.costpercapita_az196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073159,r[:number],0.001)
end

def test_costpercapita_ba196
  r = spreadsheet.costpercapita_ba196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7610639669455703,r[:number],0.001)
end

def test_costpercapita_bb196
  r = spreadsheet.costpercapita_bb196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.56798290365211,r[:number],0.001)
end

def test_costpercapita_bc196
  r = spreadsheet.costpercapita_bc196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.399063291549348,r[:number],0.001)
end

def test_costpercapita_bd196
  r = spreadsheet.costpercapita_bd196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2520697171354858,r[:number],0.001)
end

def test_costpercapita_be196
  r = spreadsheet.costpercapita_be196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.175503898718505,r[:number],0.001)
end

def test_costpercapita_bf196
  r = spreadsheet.costpercapita_bf196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.050741517211966,r[:number],0.001)
end

def test_costpercapita_bg196
  r = spreadsheet.costpercapita_bg196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.935886723867248,r[:number],0.001)
end

def test_costpercapita_bi196
  r = spreadsheet.costpercapita_bi196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bj196
  r = spreadsheet.costpercapita_bj196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073159,r[:number],0.001)
end

def test_costpercapita_bk196
  r = spreadsheet.costpercapita_bk196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.357640866761145,r[:number],0.001)
end

def test_costpercapita_bl196
  r = spreadsheet.costpercapita_bl196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.7597325927062,r[:number],0.001)
end

def test_costpercapita_bm196
  r = spreadsheet.costpercapita_bm196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.414605455483047,r[:number],0.001)
end

def test_costpercapita_bn196
  r = spreadsheet.costpercapita_bn196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.95982061058192,r[:number],0.001)
end

def test_costpercapita_bo196
  r = spreadsheet.costpercapita_bo196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.606432521028493,r[:number],0.001)
end

def test_costpercapita_bp196
  r = spreadsheet.costpercapita_bp196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.282126965632294,r[:number],0.001)
end

def test_costpercapita_bq196
  r = spreadsheet.costpercapita_bq196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.983777003909685,r[:number],0.001)
end

def test_costpercapita_bs196
  r = spreadsheet.costpercapita_bs196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_bt196
  r = spreadsheet.costpercapita_bt196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7259432341046421,r[:number],0.001)
end

def test_costpercapita_bu196
  r = spreadsheet.costpercapita_bu196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.529282576126541,r[:number],0.001)
end

def test_costpercapita_bv196
  r = spreadsheet.costpercapita_bv196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.922562762560162,r[:number],0.001)
end

def test_costpercapita_bw196
  r = spreadsheet.costpercapita_bw196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.56972672933804,r[:number],0.001)
end

def test_costpercapita_bx196
  r = spreadsheet.costpercapita_bx196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.108233615553461,r[:number],0.001)
end

def test_costpercapita_by196
  r = spreadsheet.costpercapita_by196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.751351331785965,r[:number],0.001)
end

def test_costpercapita_bz196
  r = spreadsheet.costpercapita_bz196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.421352060830953,r[:number],0.001)
end

def test_costpercapita_ca196
  r = spreadsheet.costpercapita_ca196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.117760530969182,r[:number],0.001)
end

def test_costpercapita_cc196
  r = spreadsheet.costpercapita_cc196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.238468093474328,r[:number],0.001)
end

def test_costpercapita_cd196
  r = spreadsheet.costpercapita_cd196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.37433426563223,r[:number],0.001)
end

def test_costpercapita_cf196
  r = spreadsheet.costpercapita_cf196
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_costpercapita_cg196
  r = spreadsheet.costpercapita_cg196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.860326775170233,r[:number],0.001)
end

def test_costpercapita_ch196
  r = spreadsheet.costpercapita_ch196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-0.3637494454187634,r[:number],0.001)
end

def test_costpercapita_ci196
  r = spreadsheet.costpercapita_ci196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.332060264240816,r[:number],0.001)
end

def test_costpercapita_cj196
  r = spreadsheet.costpercapita_cj196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.2438963269833385,r[:number],0.001)
end

def test_costpercapita_ck196
  r = spreadsheet.costpercapita_ck196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.012720444863869,r[:number],0.001)
end

def test_costpercapita_cl196
  r = spreadsheet.costpercapita_cl196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.775805495779468,r[:number],0.001)
end

def test_costpercapita_cm196
  r = spreadsheet.costpercapita_cm196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.641290459010291,r[:number],0.001)
end

def test_costpercapita_cn196
  r = spreadsheet.costpercapita_cn196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.517659435259792,r[:number],0.001)
end

def test_costpercapita_cp196
  r = spreadsheet.costpercapita_cp196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.922150689505398,r[:number],0.001)
end

def test_costpercapita_cq196
  r = spreadsheet.costpercapita_cq196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.4436344688109,r[:number],0.001)
end

def test_costpercapita_cr196
  r = spreadsheet.costpercapita_cr196
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c197
  r = spreadsheet.costpercapita_c197
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e197
  r = spreadsheet.costpercapita_e197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83834.82781003315,r[:number],0.001)
end

def test_costpercapita_f197
  r = spreadsheet.costpercapita_f197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191576.94978482596,r[:number],0.001)
end

def test_costpercapita_g197
  r = spreadsheet.costpercapita_g197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245901.64851728638,r[:number],0.001)
end

def test_costpercapita_h197
  r = spreadsheet.costpercapita_h197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307787.0303505387,r[:number],0.001)
end

def test_costpercapita_i197
  r = spreadsheet.costpercapita_i197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(370312.7220671294,r[:number],0.001)
end

def test_costpercapita_j197
  r = spreadsheet.costpercapita_j197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(438943.10579734907,r[:number],0.001)
end

def test_costpercapita_k197
  r = spreadsheet.costpercapita_k197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(513334.7146160764,r[:number],0.001)
end

def test_costpercapita_l197
  r = spreadsheet.costpercapita_l197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(592474.4491799615,r[:number],0.001)
end

def test_costpercapita_m197
  r = spreadsheet.costpercapita_m197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(684946.2904527247,r[:number],0.001)
end

def test_costpercapita_o197
  r = spreadsheet.costpercapita_o197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46793.58343823255,r[:number],0.001)
end

def test_costpercapita_p197
  r = spreadsheet.costpercapita_p197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67031.12897717232,r[:number],0.001)
end

def test_costpercapita_q197
  r = spreadsheet.costpercapita_q197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89759.06033137077,r[:number],0.001)
end

def test_costpercapita_r197
  r = spreadsheet.costpercapita_r197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116266.68039008044,r[:number],0.001)
end

def test_costpercapita_s197
  r = spreadsheet.costpercapita_s197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145803.4909963488,r[:number],0.001)
end

def test_costpercapita_t197
  r = spreadsheet.costpercapita_t197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179405.46567400938,r[:number],0.001)
end

def test_costpercapita_u197
  r = spreadsheet.costpercapita_u197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217469.858113766,r[:number],0.001)
end

def test_costpercapita_v197
  r = spreadsheet.costpercapita_v197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259787.00539369276,r[:number],0.001)
end

def test_costpercapita_w197
  r = spreadsheet.costpercapita_w197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307850.74032433436,r[:number],0.001)
end

def test_costpercapita_y197
  r = spreadsheet.costpercapita_y197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31225.886294755797,r[:number],0.001)
end

def test_costpercapita_z197
  r = spreadsheet.costpercapita_z197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60347.88227797976,r[:number],0.001)
end

def test_costpercapita_aa197
  r = spreadsheet.costpercapita_aa197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96156.60125807827,r[:number],0.001)
end

def test_costpercapita_ab197
  r = spreadsheet.costpercapita_ab197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137609.5176169175,r[:number],0.001)
end

def test_costpercapita_ac197
  r = spreadsheet.costpercapita_ac197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184404.89224624285,r[:number],0.001)
end

def test_costpercapita_ad197
  r = spreadsheet.costpercapita_ad197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209270.33959287248,r[:number],0.001)
end

def test_costpercapita_ae197
  r = spreadsheet.costpercapita_ae197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234395.4863711065,r[:number],0.001)
end

def test_costpercapita_af197
  r = spreadsheet.costpercapita_af197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259371.4895936794,r[:number],0.001)
end

def test_costpercapita_ag197
  r = spreadsheet.costpercapita_ag197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283506.1380770748,r[:number],0.001)
end

def test_costpercapita_ai197
  r = spreadsheet.costpercapita_ai197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161854.29754302144,r[:number],0.001)
end

def test_costpercapita_aj197
  r = spreadsheet.costpercapita_aj197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(318955.9610399781,r[:number],0.001)
end

def test_costpercapita_ak197
  r = spreadsheet.costpercapita_ak197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431817.3101067354,r[:number],0.001)
end

def test_costpercapita_al197
  r = spreadsheet.costpercapita_al197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561663.2283575367,r[:number],0.001)
end

def test_costpercapita_am197
  r = spreadsheet.costpercapita_am197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(700521.105309721,r[:number],0.001)
end

def test_costpercapita_an197
  r = spreadsheet.costpercapita_an197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827618.9110642308,r[:number],0.001)
end

def test_costpercapita_ao197
  r = spreadsheet.costpercapita_ao197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(965200.059100949,r[:number],0.001)
end

def test_costpercapita_ap197
  r = spreadsheet.costpercapita_ap197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1111632.9441673337,r[:number],0.001)
end

def test_costpercapita_aq197
  r = spreadsheet.costpercapita_aq197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1276303.1688541337,r[:number],0.001)
end

def test_costpercapita_as197
  r = spreadsheet.costpercapita_as197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(706174.1095048488,r[:number],0.001)
end

def test_costpercapita_at197
  r = spreadsheet.costpercapita_at197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13342156.511245657,r[:number],0.001)
end

def test_costpercapita_ay197
  r = spreadsheet.costpercapita_ay197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33066.2443406627,r[:number],0.001)
end

def test_costpercapita_az197
  r = spreadsheet.costpercapita_az197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125936.7257638676,r[:number],0.001)
end

def test_costpercapita_ba197
  r = spreadsheet.costpercapita_ba197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161648.09236699366,r[:number],0.001)
end

def test_costpercapita_bb197
  r = spreadsheet.costpercapita_bb197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202329.61678566798,r[:number],0.001)
end

def test_costpercapita_bc197
  r = spreadsheet.costpercapita_bc197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(243432.06099804628,r[:number],0.001)
end

def test_costpercapita_bd197
  r = spreadsheet.costpercapita_bd197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(288547.5397892545,r[:number],0.001)
end

def test_costpercapita_be197
  r = spreadsheet.costpercapita_be197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(337450.26868988463,r[:number],0.001)
end

def test_costpercapita_bf197
  r = spreadsheet.costpercapita_bf197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(389474.2677147751,r[:number],0.001)
end

def test_costpercapita_bg197
  r = spreadsheet.costpercapita_bg197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(450262.378854074,r[:number],0.001)
end

def test_costpercapita_bi197
  r = spreadsheet.costpercapita_bi197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33066.2443406627,r[:number],0.001)
end

def test_costpercapita_bj197
  r = spreadsheet.costpercapita_bj197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157912.608407525,r[:number],0.001)
end

def test_costpercapita_bk197
  r = spreadsheet.costpercapita_bk197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314390.93404296075,r[:number],0.001)
end

def test_costpercapita_bl197
  r = spreadsheet.costpercapita_bl197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477014.5345949322,r[:number],0.001)
end

def test_costpercapita_bm197
  r = spreadsheet.costpercapita_bm197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(592597.3992512205,r[:number],0.001)
end

def test_costpercapita_bn197
  r = spreadsheet.costpercapita_bn197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(718411.5232350742,r[:number],0.001)
end

def test_costpercapita_bo197
  r = spreadsheet.costpercapita_bo197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(852472.7454589395,r[:number],0.001)
end

def test_costpercapita_bp197
  r = spreadsheet.costpercapita_bp197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(996953.795418876,r[:number],0.001)
end

def test_costpercapita_bq197
  r = spreadsheet.costpercapita_bq197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1157015.4294717116,r[:number],0.001)
end

def test_costpercapita_bs197
  r = spreadsheet.costpercapita_bs197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111085.71407365105,r[:number],0.001)
end

def test_costpercapita_bt197
  r = spreadsheet.costpercapita_bt197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285291.61966267705,r[:number],0.001)
end

def test_costpercapita_bu197
  r = spreadsheet.costpercapita_bu197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500306.5956324098,r[:number],0.001)
end

def test_costpercapita_bv197
  r = spreadsheet.costpercapita_bv197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(730890.73260193,r[:number],0.001)
end

def test_costpercapita_bw197
  r = spreadsheet.costpercapita_bw197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(922805.7824938123,r[:number],0.001)
end

def test_costpercapita_bx197
  r = spreadsheet.costpercapita_bx197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1107087.328501956,r[:number],0.001)
end

def test_costpercapita_by197
  r = spreadsheet.costpercapita_by197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1304338.0899438122,r[:number],0.001)
end

def test_costpercapita_bz197
  r = spreadsheet.costpercapita_bz197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1516112.290406248,r[:number],0.001)
end

def test_costpercapita_ca197
  r = spreadsheet.costpercapita_ca197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1748372.3078731205,r[:number],0.001)
end

def test_costpercapita_cc197
  r = spreadsheet.costpercapita_cc197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914032.273465513,r[:number],0.001)
end

def test_costpercapita_cd197
  r = spreadsheet.costpercapita_cd197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16898745.62889431,r[:number],0.001)
end

def test_costpercapita_cf197
  r = spreadsheet.costpercapita_cf197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-50768.583469370446,r[:number],0.001)
end

def test_costpercapita_cg197
  r = spreadsheet.costpercapita_cg197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-33664.34137730096,r[:number],0.001)
end

def test_costpercapita_ch197
  r = spreadsheet.costpercapita_ch197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68489.2855256744,r[:number],0.001)
end

def test_costpercapita_ci197
  r = spreadsheet.costpercapita_ci197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169227.50424439344,r[:number],0.001)
end

def test_costpercapita_cj197
  r = spreadsheet.costpercapita_cj197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222284.6771840912,r[:number],0.001)
end

def test_costpercapita_ck197
  r = spreadsheet.costpercapita_ck197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279468.4174377252,r[:number],0.001)
end

def test_costpercapita_cl197
  r = spreadsheet.costpercapita_cl197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339138.03084286314,r[:number],0.001)
end

def test_costpercapita_cm197
  r = spreadsheet.costpercapita_cm197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(404479.34623891447,r[:number],0.001)
end

def test_costpercapita_cn197
  r = spreadsheet.costpercapita_cn197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472069.13901898713,r[:number],0.001)
end

def test_costpercapita_cp197
  r = spreadsheet.costpercapita_cp197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207858.16396066413,r[:number],0.001)
end

def test_costpercapita_cq197
  r = spreadsheet.costpercapita_cq197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3556589.117648658,r[:number],0.001)
end

def test_costpercapita_cr197
  r = spreadsheet.costpercapita_cr197
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e198
  r = spreadsheet.costpercapita_e198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(2.9103830456733704e-11,r[:number],0.001)
end

def test_costpercapita_f198
  r = spreadsheet.costpercapita_f198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g198
  r = spreadsheet.costpercapita_g198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h198
  r = spreadsheet.costpercapita_h198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i198
  r = spreadsheet.costpercapita_i198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j198
  r = spreadsheet.costpercapita_j198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k198
  r = spreadsheet.costpercapita_k198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l198
  r = spreadsheet.costpercapita_l198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m198
  r = spreadsheet.costpercapita_m198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o198
  r = spreadsheet.costpercapita_o198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p198
  r = spreadsheet.costpercapita_p198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q198
  r = spreadsheet.costpercapita_q198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r198
  r = spreadsheet.costpercapita_r198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s198
  r = spreadsheet.costpercapita_s198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t198
  r = spreadsheet.costpercapita_t198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u198
  r = spreadsheet.costpercapita_u198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v198
  r = spreadsheet.costpercapita_v198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w198
  r = spreadsheet.costpercapita_w198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y198
  r = spreadsheet.costpercapita_y198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z198
  r = spreadsheet.costpercapita_z198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa198
  r = spreadsheet.costpercapita_aa198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab198
  r = spreadsheet.costpercapita_ab198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.9103830456733704e-11,r[:number],0.001)
end

def test_costpercapita_ac198
  r = spreadsheet.costpercapita_ac198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad198
  r = spreadsheet.costpercapita_ad198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.9103830456733704e-11,r[:number],0.001)
end

def test_costpercapita_ae198
  r = spreadsheet.costpercapita_ae198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.9103830456733704e-11,r[:number],0.001)
end

def test_costpercapita_af198
  r = spreadsheet.costpercapita_af198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag198
  r = spreadsheet.costpercapita_ag198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai198
  r = spreadsheet.costpercapita_ai198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj198
  r = spreadsheet.costpercapita_aj198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak198
  r = spreadsheet.costpercapita_ak198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al198
  r = spreadsheet.costpercapita_al198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am198
  r = spreadsheet.costpercapita_am198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an198
  r = spreadsheet.costpercapita_an198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao198
  r = spreadsheet.costpercapita_ao198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap198
  r = spreadsheet.costpercapita_ap198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq198
  r = spreadsheet.costpercapita_aq198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as198
  r = spreadsheet.costpercapita_as198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at198
  r = spreadsheet.costpercapita_at198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay198
  r = spreadsheet.costpercapita_ay198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_az198
  r = spreadsheet.costpercapita_az198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ba198
  r = spreadsheet.costpercapita_ba198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bb198
  r = spreadsheet.costpercapita_bb198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bc198
  r = spreadsheet.costpercapita_bc198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bd198
  r = spreadsheet.costpercapita_bd198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_be198
  r = spreadsheet.costpercapita_be198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bf198
  r = spreadsheet.costpercapita_bf198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bg198
  r = spreadsheet.costpercapita_bg198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi198
  r = spreadsheet.costpercapita_bi198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bj198
  r = spreadsheet.costpercapita_bj198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bk198
  r = spreadsheet.costpercapita_bk198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bl198
  r = spreadsheet.costpercapita_bl198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bm198
  r = spreadsheet.costpercapita_bm198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bn198
  r = spreadsheet.costpercapita_bn198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bo198
  r = spreadsheet.costpercapita_bo198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-2.3283064365386963e-10,r[:number],0.001)
end

def test_costpercapita_bp198
  r = spreadsheet.costpercapita_bp198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bq198
  r = spreadsheet.costpercapita_bq198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs198
  r = spreadsheet.costpercapita_bs198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt198
  r = spreadsheet.costpercapita_bt198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu198
  r = spreadsheet.costpercapita_bu198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv198
  r = spreadsheet.costpercapita_bv198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw198
  r = spreadsheet.costpercapita_bw198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx198
  r = spreadsheet.costpercapita_bx198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by198
  r = spreadsheet.costpercapita_by198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz198
  r = spreadsheet.costpercapita_bz198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca198
  r = spreadsheet.costpercapita_ca198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc198
  r = spreadsheet.costpercapita_cc198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd198
  r = spreadsheet.costpercapita_cd198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf198
  r = spreadsheet.costpercapita_cf198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg198
  r = spreadsheet.costpercapita_cg198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch198
  r = spreadsheet.costpercapita_ch198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci198
  r = spreadsheet.costpercapita_ci198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj198
  r = spreadsheet.costpercapita_cj198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck198
  r = spreadsheet.costpercapita_ck198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl198
  r = spreadsheet.costpercapita_cl198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm198
  r = spreadsheet.costpercapita_cm198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(-5.820766091346741e-11,r[:number],0.001)
end

def test_costpercapita_cn198
  r = spreadsheet.costpercapita_cn198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp198
  r = spreadsheet.costpercapita_cp198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq198
  r = spreadsheet.costpercapita_cq198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end


  # start of CostAbsolute

  # start of AQ Outputs
def test_aq_outputs_b2
  r = spreadsheet.aq_outputs_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("YOUR CHOICE",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_d3
  r = spreadsheet.aq_outputs_d3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number],0.001)
end

def test_aq_outputs_e3
  r = spreadsheet.aq_outputs_e3
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 - All Level 1",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_f3
  r = spreadsheet.aq_outputs_f3
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 - YOUR CHOICE",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_c4
  r = spreadsheet.aq_outputs_c4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions in 2010",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_d4
  r = spreadsheet.aq_outputs_d4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.0,r[:number],0.001)
end

def test_aq_outputs_c5
  r = spreadsheet.aq_outputs_c5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low innovation",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_e5
  r = spreadsheet.aq_outputs_e5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0741164616497096,r[:number],0.001)
end

def test_aq_outputs_f5
  r = spreadsheet.aq_outputs_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.39121210310464,r[:number],0.001)
end

def test_aq_outputs_c6
  r = spreadsheet.aq_outputs_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("High innovation",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_e6
  r = spreadsheet.aq_outputs_e6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1930305099384375,r[:number],0.001)
end

def test_aq_outputs_f6
  r = spreadsheet.aq_outputs_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.15441521403025,r[:number],0.001)
end


  # start of AQImpactHInv

  # start of AQImpactLInv

  # start of Other AQ Sources

  # start of Conversions

  # start of Global assumptions

  # start of HIGH

  # start of MEDIUM

  # start of LOW

  # start of Constants

  # start of Structure of the model

  # start of A.a

  # start of I.a

  # start of I.b

  # start of II.a

  # start of III.a.1

  # start of III.a.2

  # start of III.b

  # start of III.c

  # start of III.d

  # start of IV.a

  # start of IV.b

  # start of IV.c

  # start of V.a

  # start of V.b

  # start of B.a

  # start of VI.a

  # start of VI.b

  # start of VI.c

  # start of VII.a

  # start of VII.b

  # start of VII.c

  # start of VIII.a

  # start of IX.a
def test_ix_a_f595
  r = spreadsheet.ix_a_f595
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_ix_a_f596
  r = spreadsheet.ix_a_f596
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_ix_a_f597
  r = spreadsheet.ix_a_f597
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_ix_a_f598
  r = spreadsheet.ix_a_f598
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_ix_a_f599
  r = spreadsheet.ix_a_f599
  pass if r[:type] == :ExcelEmpty
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.0,r[:number],0.001)
end

def test_ix_a_f600
  r = spreadsheet.ix_a_f600
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.07074588057382,r[:number],0.001)
end

def test_ix_a_f601
  r = spreadsheet.ix_a_f601
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.024111401833992668,r[:number],0.001)
end

def test_ix_a_f605
  r = spreadsheet.ix_a_f605
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_ix_a_f606
  r = spreadsheet.ix_a_f606
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.008000465298867951,r[:number],0.001)
end

def test_ix_a_f607
  r = spreadsheet.ix_a_f607
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.013022608695652194,r[:number],0.001)
end


  # start of IX.c
def test_ix_c_n317
  r = spreadsheet.ix_c_n317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.45,r[:number],0.001)
end

def test_ix_c_n318
  r = spreadsheet.ix_c_n318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4375,r[:number],0.001)
end

def test_ix_c_n319
  r = spreadsheet.ix_c_n319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.4375,r[:number],0.001)
end

def test_ix_c_n320
  r = spreadsheet.ix_c_n320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.85,r[:number],0.001)
end

def test_ix_c_n321
  r = spreadsheet.ix_c_n321
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.38,r[:number],0.001)
end

def test_ix_c_n322
  r = spreadsheet.ix_c_n322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.57,r[:number],0.001)
end

def test_ix_c_n323
  r = spreadsheet.ix_c_n323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.9,r[:number],0.001)
end

def test_ix_c_n324
  r = spreadsheet.ix_c_n324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_delta(0.2,r[:number],0.001)
end

def test_ix_c_n328
  r = spreadsheet.ix_c_n328
  assert_equal(:ExcelError,r[:type])
end

def test_ix_c_n329
  r = spreadsheet.ix_c_n329
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.01",r[:string].force_encoding('utf-8'))
end


  # start of X.a

  # start of XI.a

  # start of X.b

  # start of XII.a

  # start of XII.b

  # start of XII.c

  # start of XII.e

  # start of XIV.a

  # start of XV.a

  # start of XV.b

  # start of XVI.a

  # start of XVI.b

  # start of XVII.a

  # start of XVIII.a

  # start of NOTES

  # start of 2007 (Actual, frozen)

  # start of 2007 (Consistent)

  # start of WEB 2009 Demand

  # start of WEB 2009 World Extended

  # start of flows-transport

  # start of flows-buildings

  # start of flows-industry

  # start of stacked column (double)

  # start of 2009 Detailed

  # start of 2009

  # start of 2007

  # start of 2010

  # start of 2015

  # start of 2020

  # start of 2025

  # start of 2030

  # start of 2035

  # start of 2040

  # start of 2045

  # start of 2050

  # start of DUKES 09 (1.2)

  # start of DUKES 09 (1.9)

  # start of DUKES 09 (2.5)

  # start of DUKES 09 (5.1)

  # start of DUKES 09 (5.6)

  # start of DUKES 09 (7.2)

  # start of DUKES 09 (7.4)

  # start of DUKES 09 (A.1)

  # start of DECC Energy Cons. (1.14)

  # start of DECC Energy Cons. (4.1)

  # start of Sheet1
end
