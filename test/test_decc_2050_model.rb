# coding: utf-8
# Test for decc_2050_model
require 'rubygems'
gem 'minitest'
require 'test/unit'
require_relative '../lib/decc_2050_model'

class TestDecc2050Model < Test::Unit::TestCase
  def spreadsheet; @spreadsheet ||= init_spreadsheet; end
  def init_spreadsheet; Decc2050Model end

  # start of Control
def test_control_m1
  r = spreadsheet.control_m1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Version 2.1",r[:string].force_encoding('utf-8'))
end

def test_control_m4
  r = spreadsheet.control_m4
  assert_equal(:ExcelString,r[:type])
  assert_equal("All at level 1",r[:string].force_encoding('utf-8'))
end

def test_control_n4
  r = spreadsheet.control_n4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Maximium demand, no supply",r[:string].force_encoding('utf-8'))
end

def test_control_o4
  r = spreadsheet.control_o4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Maximum supply, no demand",r[:string].force_encoding('utf-8'))
end

def test_control_q4
  r = spreadsheet.control_q4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Renewables; Higher electric",r[:string].force_encoding('utf-8'))
end

def test_control_r4
  r = spreadsheet.control_r4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear; Central electric",r[:string].force_encoding('utf-8'))
end

def test_control_s4
  r = spreadsheet.control_s4
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS; Lower electric",r[:string].force_encoding('utf-8'))
end

def test_control_t4
  r = spreadsheet.control_t4
  assert_equal(:ExcelString,r[:type])
  assert_equal("MARKAL 3.26",r[:string].force_encoding('utf-8'))
end

def test_control_u4
  r = spreadsheet.control_u4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Atkins",r[:string].force_encoding('utf-8'))
end

def test_control_w4
  r = spreadsheet.control_w4
  assert_equal(:ExcelString,r[:type])
  assert_equal("National grid",r[:string].force_encoding('utf-8'))
end

def test_control_x4
  r = spreadsheet.control_x4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mark Brinkley",r[:string].force_encoding('utf-8'))
end

def test_control_z4
  r = spreadsheet.control_z4
  assert_equal(:ExcelString,r[:type])
  assert_equal("CPRE",r[:string].force_encoding('utf-8'))
end

def test_control_aa4
  r = spreadsheet.control_aa4
  assert_equal(:ExcelString,r[:type])
  assert_equal("FOTE",r[:string].force_encoding('utf-8'))
end

def test_control_d5
  r = spreadsheet.control_d5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f5
  r = spreadsheet.control_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h5
  r = spreadsheet.control_h5
  assert_equal(:ExcelString,r[:type])
  assert_equal("No new nuclear power installed; estimated closure of final plant in 2035",r[:string].force_encoding('utf-8'))
end

def test_control_i5
  r = spreadsheet.control_i5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13 3GW power stations delivering ~280 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_j5
  r = spreadsheet.control_j5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30 3GW power stations delivering ~630 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_k5
  r = spreadsheet.control_k5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~50 3GW power stations delivering ~1030 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_m5
  r = spreadsheet.control_m5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n5
  r = spreadsheet.control_n5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o5
  r = spreadsheet.control_o5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q5
  r = spreadsheet.control_q5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4,r[:number])
end

def test_control_r5
  r = spreadsheet.control_r5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7,r[:number])
end

def test_control_s5
  r = spreadsheet.control_s5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5,r[:number])
end

def test_control_t5
  r = spreadsheet.control_t5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8,r[:number])
end

def test_control_u5
  r = spreadsheet.control_u5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_control_w5
  r = spreadsheet.control_w5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_control_x5
  r = spreadsheet.control_x5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z5
  r = spreadsheet.control_z5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa5
  r = spreadsheet.control_aa5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo5
  r = spreadsheet.control_bo5
  assert_equal(:ExcelString,r[:type])
  assert_equal("No new nuclear power installed. Final nuclear power stattion estimated to close in 2035",r[:string].force_encoding('utf-8'))
end

def test_control_bp5
  r = spreadsheet.control_bp5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13 3GW nuclear power stations delivering ~280 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bq5
  r = spreadsheet.control_bq5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30 3GW nuclear power stations delivering ~630 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_br5
  r = spreadsheet.control_br5
  assert_equal(:ExcelString,r[:type])
  assert_equal("~50 3GW nuclear power stations delivering ~1030 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d6
  r = spreadsheet.control_d6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_control_d7
  r = spreadsheet.control_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f7
  r = spreadsheet.control_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h7
  r = spreadsheet.control_h7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Demonstration plants only; no roll-out of CCS",r[:string].force_encoding('utf-8'))
end

def test_control_i7
  r = spreadsheet.control_i7
  assert_equal(:ExcelString,r[:type])
  assert_equal("~240 TWh/yr from 25-40 CCS power stations; comparable to current gas & coal generation",r[:string].force_encoding('utf-8'))
end

def test_control_j7
  r = spreadsheet.control_j7
  assert_equal(:ExcelString,r[:type])
  assert_equal("~340 TWh/yr from 35-60 CCS power stations; comparable to total current demand",r[:string].force_encoding('utf-8'))
end

def test_control_k7
  r = spreadsheet.control_k7
  assert_equal(:ExcelString,r[:type])
  assert_equal("~510 TWh/yr  from 50-90 CCS power stations; build rate of gas plants in the 1990s",r[:string].force_encoding('utf-8'))
end

def test_control_m7
  r = spreadsheet.control_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n7
  r = spreadsheet.control_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o7
  r = spreadsheet.control_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q7
  r = spreadsheet.control_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3,r[:number])
end

def test_control_r7
  r = spreadsheet.control_r7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s7
  r = spreadsheet.control_s7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t7
  r = spreadsheet.control_t7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_control_u7
  r = spreadsheet.control_u7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5,r[:number])
end

def test_control_w7
  r = spreadsheet.control_w7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_control_x7
  r = spreadsheet.control_x7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z7
  r = spreadsheet.control_z7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_control_aa7
  r = spreadsheet.control_aa7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_control_bo7
  r = spreadsheet.control_bo7
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS demonstration plants only",r[:string].force_encoding('utf-8'))
end

def test_control_bp7
  r = spreadsheet.control_bp7
  assert_equal(:ExcelString,r[:type])
  assert_equal("~240 TWh/yr from 25-40 CCS power stations - comparable to current gas & coal generation",r[:string].force_encoding('utf-8'))
end

def test_control_bq7
  r = spreadsheet.control_bq7
  assert_equal(:ExcelString,r[:type])
  assert_equal("~340 TWh/yr from 35-60 CCS power stations - comparable to total current demand",r[:string].force_encoding('utf-8'))
end

def test_control_br7
  r = spreadsheet.control_br7
  assert_equal(:ExcelString,r[:type])
  assert_equal("~510 TWh/yr  from 50-90 CCS power stations - this requires a similar build rate to that of gas plants in the 1990s",r[:string].force_encoding('utf-8'))
end

def test_control_d8
  r = spreadsheet.control_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS power station fuel mix",r[:string].force_encoding('utf-8'))
end

def test_control_f8
  r = spreadsheet.control_f8
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h8
  r = spreadsheet.control_h8
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% coal/biomass, 0% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_i8
  r = spreadsheet.control_i8
  assert_equal(:ExcelString,r[:type])
  assert_equal("66% coal/biomass, 33% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_j8
  r = spreadsheet.control_j8
  assert_equal(:ExcelString,r[:type])
  assert_equal("33% coal/biomass, 66% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_k8
  r = spreadsheet.control_k8
  assert_equal(:ExcelString,r[:type])
  assert_equal("0% coal/biomas, 100% gas/biogas CCS after demonstration plants",r[:string].force_encoding('utf-8'))
end

def test_control_m8
  r = spreadsheet.control_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n8
  r = spreadsheet.control_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o8
  r = spreadsheet.control_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q8
  r = spreadsheet.control_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_r8
  r = spreadsheet.control_r8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s8
  r = spreadsheet.control_s8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t8
  r = spreadsheet.control_t8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u8
  r = spreadsheet.control_u8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w8
  r = spreadsheet.control_w8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x8
  r = spreadsheet.control_x8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z8
  r = spreadsheet.control_z8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa8
  r = spreadsheet.control_aa8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo8
  r = spreadsheet.control_bo8
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, all CCS electricity is from solid fuel (coal or biomass)",r[:string].force_encoding('utf-8'))
end

def test_control_bp8
  r = spreadsheet.control_bp8
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, two thirds of CCS electricity is from solid fuel (coal or biomass), one third from gas (natural gas or biogas)",r[:string].force_encoding('utf-8'))
end

def test_control_bq8
  r = spreadsheet.control_bq8
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, one third of CCS electricity is from solid fuel (coal or biomass), two thirds from gas (natural gas or biogas)",r[:string].force_encoding('utf-8'))
end

def test_control_br8
  r = spreadsheet.control_br8
  assert_equal(:ExcelString,r[:type])
  assert_equal("After demonstration plants, all CCS electricity is from gas (natural gas or biogas)",r[:string].force_encoding('utf-8'))
end

def test_control_d9
  r = spreadsheet.control_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_control_f9
  r = spreadsheet.control_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h9
  r = spreadsheet.control_h9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,400 turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_i9
  r = spreadsheet.control_i9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~10,000 turbines in 2050, delivering ~180 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_j9
  r = spreadsheet.control_j9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~17,000 turbines in 2050, delivering ~310 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_k9
  r = spreadsheet.control_k9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~40,000 turbines in 2050, delivering ~430 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_m9
  r = spreadsheet.control_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n9
  r = spreadsheet.control_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o9
  r = spreadsheet.control_o9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q9
  r = spreadsheet.control_q9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number])
end

def test_control_r9
  r = spreadsheet.control_r9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2,r[:number])
end

def test_control_s9
  r = spreadsheet.control_s9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3,r[:number])
end

def test_control_t9
  r = spreadsheet.control_t9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3,r[:number])
end

def test_control_u9
  r = spreadsheet.control_u9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4,r[:number])
end

def test_control_w9
  r = spreadsheet.control_w9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_control_x9
  r = spreadsheet.control_x9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z9
  r = spreadsheet.control_z9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_aa9
  r = spreadsheet.control_aa9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3,r[:number])
end

def test_control_bo9
  r = spreadsheet.control_bo9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~1,400 offshore wind turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_bp9
  r = spreadsheet.control_bp9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~10,000 offshore wind turbines in 2050, delivering ~180 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bq9
  r = spreadsheet.control_bq9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~17,000 offshore wind turbines in 2050, delivering ~310 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_br9
  r = spreadsheet.control_br9
  assert_equal(:ExcelString,r[:type])
  assert_equal("~40,000 offshore wind turbines in 2050, delivering ~430 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d10
  r = spreadsheet.control_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_control_f10
  r = spreadsheet.control_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h10
  r = spreadsheet.control_h10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,400 turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_i10
  r = spreadsheet.control_i10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~8,000 turbines in 2050, delivering ~50 TWh/yr. ",r[:string].force_encoding('utf-8'))
end

def test_control_j10
  r = spreadsheet.control_j10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,000 turbines in 2050, delivering ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_k10
  r = spreadsheet.control_k10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~20,000 turbines in 2050, delivering ~130 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_m10
  r = spreadsheet.control_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n10
  r = spreadsheet.control_n10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o10
  r = spreadsheet.control_o10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q10
  r = spreadsheet.control_q10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7,r[:number])
end

def test_control_r10
  r = spreadsheet.control_r10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4,r[:number])
end

def test_control_s10
  r = spreadsheet.control_s10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5,r[:number])
end

def test_control_t10
  r = spreadsheet.control_t10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3,r[:number])
end

def test_control_u10
  r = spreadsheet.control_u10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number])
end

def test_control_w10
  r = spreadsheet.control_w10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_control_x10
  r = spreadsheet.control_x10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z10
  r = spreadsheet.control_z10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3,r[:number])
end

def test_control_aa10
  r = spreadsheet.control_aa10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3,r[:number])
end

def test_control_bo10
  r = spreadsheet.control_bo10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~4,400 onshore wind turbines in 2025, reducing to zero as decommissioned sites are not replanted",r[:string].force_encoding('utf-8'))
end

def test_control_bp10
  r = spreadsheet.control_bp10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~8,000 onshore wind turbines in 2050, delivering ~50 TWh/yr. ",r[:string].force_encoding('utf-8'))
end

def test_control_bq10
  r = spreadsheet.control_bq10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~13,000 onshore wind turbines in 2050, delivering ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_br10
  r = spreadsheet.control_br10
  assert_equal(:ExcelString,r[:type])
  assert_equal("~20,000 onshore wind turbines in 2050, delivering ~130 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d11
  r = spreadsheet.control_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_control_f11
  r = spreadsheet.control_f11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h11
  r = spreadsheet.control_h11
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_i11
  r = spreadsheet.control_i11
  assert_equal(:ExcelString,r[:type])
  assert_equal("~300km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_j11
  r = spreadsheet.control_j11
  assert_equal(:ExcelString,r[:type])
  assert_equal("~600km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_k11
  r = spreadsheet.control_k11
  assert_equal(:ExcelString,r[:type])
  assert_equal("~900km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_m11
  r = spreadsheet.control_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n11
  r = spreadsheet.control_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o11
  r = spreadsheet.control_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q11
  r = spreadsheet.control_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_control_r11
  r = spreadsheet.control_r11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s11
  r = spreadsheet.control_s11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t11
  r = spreadsheet.control_t11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u11
  r = spreadsheet.control_u11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w11
  r = spreadsheet.control_w11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x11
  r = spreadsheet.control_x11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z11
  r = spreadsheet.control_z11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_aa11
  r = spreadsheet.control_aa11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo11
  r = spreadsheet.control_bo11
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bp11
  r = spreadsheet.control_bp11
  assert_equal(:ExcelString,r[:type])
  assert_equal("~300km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_bq11
  r = spreadsheet.control_bq11
  assert_equal(:ExcelString,r[:type])
  assert_equal("~600km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_br11
  r = spreadsheet.control_br11
  assert_equal(:ExcelString,r[:type])
  assert_equal("~900km of wave farms",r[:string].force_encoding('utf-8'))
end

def test_control_d12
  r = spreadsheet.control_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal Stream",r[:string].force_encoding('utf-8'))
end

def test_control_f12
  r = spreadsheet.control_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h12
  r = spreadsheet.control_h12
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_i12
  r = spreadsheet.control_i12
  assert_equal(:ExcelString,r[:type])
  assert_equal("1,000 tidal stream turbines",r[:string].force_encoding('utf-8'))
end

def test_control_j12
  r = spreadsheet.control_j12
  assert_equal(:ExcelString,r[:type])
  assert_equal("4,700 tidal stream turbines",r[:string].force_encoding('utf-8'))
end

def test_control_k12
  r = spreadsheet.control_k12
  assert_equal(:ExcelString,r[:type])
  assert_equal("10,600 tidal stream turbines",r[:string].force_encoding('utf-8'))
end

def test_control_m12
  r = spreadsheet.control_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n12
  r = spreadsheet.control_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o12
  r = spreadsheet.control_o12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q12
  r = spreadsheet.control_q12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r12
  r = spreadsheet.control_r12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s12
  r = spreadsheet.control_s12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t12
  r = spreadsheet.control_t12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_u12
  r = spreadsheet.control_u12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w12
  r = spreadsheet.control_w12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x12
  r = spreadsheet.control_x12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z12
  r = spreadsheet.control_z12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_aa12
  r = spreadsheet.control_aa12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo12
  r = spreadsheet.control_bo12
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bp12
  r = spreadsheet.control_bp12
  assert_equal(:ExcelString,r[:type])
  assert_equal("1,000 tidal stream turbines",r[:string].force_encoding('utf-8'))
end

def test_control_bq12
  r = spreadsheet.control_bq12
  assert_equal(:ExcelString,r[:type])
  assert_equal("4,700 tidal stream turbines",r[:string].force_encoding('utf-8'))
end

def test_control_br12
  r = spreadsheet.control_br12
  assert_equal(:ExcelString,r[:type])
  assert_equal("10,600 tidal stream turbines",r[:string].force_encoding('utf-8'))
end

def test_control_d13
  r = spreadsheet.control_d13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal Range",r[:string].force_encoding('utf-8'))
end

def test_control_f13
  r = spreadsheet.control_f13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h13
  r = spreadsheet.control_h13
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in  2050",r[:string].force_encoding('utf-8'))
end

def test_control_i13
  r = spreadsheet.control_i13
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 small tidal range schemes",r[:string].force_encoding('utf-8'))
end

def test_control_j13
  r = spreadsheet.control_j13
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 tidal range schemes",r[:string].force_encoding('utf-8'))
end

def test_control_k13
  r = spreadsheet.control_k13
  assert_equal(:ExcelString,r[:type])
  assert_equal("8 tidal range schemes",r[:string].force_encoding('utf-8'))
end

def test_control_m13
  r = spreadsheet.control_m13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n13
  r = spreadsheet.control_n13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o13
  r = spreadsheet.control_o13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q13
  r = spreadsheet.control_q13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r13
  r = spreadsheet.control_r13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s13
  r = spreadsheet.control_s13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t13
  r = spreadsheet.control_t13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_u13
  r = spreadsheet.control_u13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9,r[:number])
end

def test_control_w13
  r = spreadsheet.control_w13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x13
  r = spreadsheet.control_x13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z13
  r = spreadsheet.control_z13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_aa13
  r = spreadsheet.control_aa13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo13
  r = spreadsheet.control_bo13
  assert_equal(:ExcelString,r[:type])
  assert_equal("None in  2050",r[:string].force_encoding('utf-8'))
end

def test_control_bp13
  r = spreadsheet.control_bp13
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 small tidal range schemes",r[:string].force_encoding('utf-8'))
end

def test_control_bq13
  r = spreadsheet.control_bq13
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 tidal range schemes",r[:string].force_encoding('utf-8'))
end

def test_control_br13
  r = spreadsheet.control_br13
  assert_equal(:ExcelString,r[:type])
  assert_equal("8 tidal range schemes",r[:string].force_encoding('utf-8'))
end

def test_control_d14
  r = spreadsheet.control_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f14
  r = spreadsheet.control_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h14
  r = spreadsheet.control_h14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Only plants built and under construction (0.6GW)",r[:string].force_encoding('utf-8'))
end

def test_control_i14
  r = spreadsheet.control_i14
  assert_equal(:ExcelString,r[:type])
  assert_equal("8GW power stations by 2050 delivering 62TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_j14
  r = spreadsheet.control_j14
  assert_equal(:ExcelString,r[:type])
  assert_equal("12GW power stations by 2050 delivering 100TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_k14
  r = spreadsheet.control_k14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 20GW installed capacity by 2050 delivering 180TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_m14
  r = spreadsheet.control_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n14
  r = spreadsheet.control_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o14
  r = spreadsheet.control_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q14
  r = spreadsheet.control_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r14
  r = spreadsheet.control_r14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s14
  r = spreadsheet.control_s14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t14
  r = spreadsheet.control_t14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u14
  r = spreadsheet.control_u14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w14
  r = spreadsheet.control_w14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x14
  r = spreadsheet.control_x14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z14
  r = spreadsheet.control_z14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa14
  r = spreadsheet.control_aa14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo14
  r = spreadsheet.control_bo14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Only existing biomass plants and those already under construction (0.6GW)",r[:string].force_encoding('utf-8'))
end

def test_control_bp14
  r = spreadsheet.control_bp14
  assert_equal(:ExcelString,r[:type])
  assert_equal("8GW of biomass power stations by 2050 delivering 62TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bq14
  r = spreadsheet.control_bq14
  assert_equal(:ExcelString,r[:type])
  assert_equal("12GW of biomass power stations by 2050 delivering 100TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_br14
  r = spreadsheet.control_br14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 20GW of biomass power stations by 2050 delivering 180TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d15
  r = spreadsheet.control_d15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar panels for electricity",r[:string].force_encoding('utf-8'))
end

def test_control_f15
  r = spreadsheet.control_f15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h15
  r = spreadsheet.control_h15
  assert_equal(:ExcelString,r[:type])
  assert_equal("No significant solar PV capacity is installed",r[:string].force_encoding('utf-8'))
end

def test_control_i15
  r = spreadsheet.control_i15
  assert_equal(:ExcelString,r[:type])
  assert_equal("4m2 of photovoltaic panels per person in 2050, supplying ~60 TWh/yr of electricity",r[:string].force_encoding('utf-8'))
end

def test_control_j15
  r = spreadsheet.control_j15
  assert_equal(:ExcelString,r[:type])
  assert_equal(" 5.4m2 of photovoltaic panels per person in 2050, supplying ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_k15
  r = spreadsheet.control_k15
  assert_equal(:ExcelString,r[:type])
  assert_equal("9.5m2 of photovoltaic panels per person – all suitable roof and facade space used",r[:string].force_encoding('utf-8'))
end

def test_control_m15
  r = spreadsheet.control_m15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n15
  r = spreadsheet.control_n15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o15
  r = spreadsheet.control_o15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q15
  r = spreadsheet.control_q15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2,r[:number])
end

def test_control_r15
  r = spreadsheet.control_r15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s15
  r = spreadsheet.control_s15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t15
  r = spreadsheet.control_t15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u15
  r = spreadsheet.control_u15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7,r[:number])
end

def test_control_w15
  r = spreadsheet.control_w15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2,r[:number])
end

def test_control_x15
  r = spreadsheet.control_x15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z15
  r = spreadsheet.control_z15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa15
  r = spreadsheet.control_aa15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2,r[:number])
end

def test_control_bo15
  r = spreadsheet.control_bo15
  assert_equal(:ExcelString,r[:type])
  assert_equal("No significant solar PV capacity is installed",r[:string].force_encoding('utf-8'))
end

def test_control_bp15
  r = spreadsheet.control_bp15
  assert_equal(:ExcelString,r[:type])
  assert_equal("4m2 of photovoltaic panels per person in 2050, supplying ~60 TWh/yr of electricity",r[:string].force_encoding('utf-8'))
end

def test_control_bq15
  r = spreadsheet.control_bq15
  assert_equal(:ExcelString,r[:type])
  assert_equal(" 5.4m2 of photovoltaic panels per person in 2050, supplying ~80 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_br15
  r = spreadsheet.control_br15
  assert_equal(:ExcelString,r[:type])
  assert_equal("9.5m2 of photovoltaic panels per person – all suitable roof and facade space used",r[:string].force_encoding('utf-8'))
end

def test_control_d16
  r = spreadsheet.control_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar panels for hot water",r[:string].force_encoding('utf-8'))
end

def test_control_f16
  r = spreadsheet.control_f16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h16
  r = spreadsheet.control_h16
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today, a negligible proportion of buildings have solar thermal in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_i16
  r = spreadsheet.control_i16
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30% of suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_j16
  r = spreadsheet.control_j16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_k16
  r = spreadsheet.control_k16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~60% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_m16
  r = spreadsheet.control_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n16
  r = spreadsheet.control_n16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o16
  r = spreadsheet.control_o16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q16
  r = spreadsheet.control_q16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8,r[:number])
end

def test_control_r16
  r = spreadsheet.control_r16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s16
  r = spreadsheet.control_s16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t16
  r = spreadsheet.control_t16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u16
  r = spreadsheet.control_u16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_control_w16
  r = spreadsheet.control_w16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number])
end

def test_control_x16
  r = spreadsheet.control_x16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z16
  r = spreadsheet.control_z16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa16
  r = spreadsheet.control_aa16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_bo16
  r = spreadsheet.control_bo16
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today, a negligible proportion of buildings have solar thermal in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bp16
  r = spreadsheet.control_bp16
  assert_equal(:ExcelString,r[:type])
  assert_equal("~30% of suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_bq16
  r = spreadsheet.control_bq16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~30% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_br16
  r = spreadsheet.control_br16
  assert_equal(:ExcelString,r[:type])
  assert_equal("All suitable buildings get ~60% of their hot water from solar thermal",r[:string].force_encoding('utf-8'))
end

def test_control_d17
  r = spreadsheet.control_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal electricity",r[:string].force_encoding('utf-8'))
end

def test_control_f17
  r = spreadsheet.control_f17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h17
  r = spreadsheet.control_h17
  assert_equal(:ExcelString,r[:type])
  assert_equal("No deployment of geothermal electricity generation",r[:string].force_encoding('utf-8'))
end

def test_control_i17
  r = spreadsheet.control_i17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows slowly to 7 TWh/yr in 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_j17
  r = spreadsheet.control_j17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows quickly reaching 21 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_k17
  r = spreadsheet.control_k17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows rapidly reaching 35 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_m17
  r = spreadsheet.control_m17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n17
  r = spreadsheet.control_n17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o17
  r = spreadsheet.control_o17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q17
  r = spreadsheet.control_q17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r17
  r = spreadsheet.control_r17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s17
  r = spreadsheet.control_s17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t17
  r = spreadsheet.control_t17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u17
  r = spreadsheet.control_u17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6,r[:number])
end

def test_control_w17
  r = spreadsheet.control_w17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x17
  r = spreadsheet.control_x17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z17
  r = spreadsheet.control_z17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa17
  r = spreadsheet.control_aa17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo17
  r = spreadsheet.control_bo17
  assert_equal(:ExcelString,r[:type])
  assert_equal("No deployment of geothermal electricity generation",r[:string].force_encoding('utf-8'))
end

def test_control_bp17
  r = spreadsheet.control_bp17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows slowly to 7 TWh/yr in 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_bq17
  r = spreadsheet.control_bq17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows quickly reaching 21 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_br17
  r = spreadsheet.control_br17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of geothermal electricity grows rapidly reaching 35 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_d18
  r = spreadsheet.control_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_control_f18
  r = spreadsheet.control_f18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h18
  r = spreadsheet.control_h18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of electricity is maintained at current levels of 5 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_i18
  r = spreadsheet.control_i18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows slowly, reaching 7 TWh/yr by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_j18
  r = spreadsheet.control_j18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows more quickly, reaching 8 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_k18
  r = spreadsheet.control_k18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply grows rapidly reaching 13 TWh/yr by 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_m18
  r = spreadsheet.control_m18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n18
  r = spreadsheet.control_n18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o18
  r = spreadsheet.control_o18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q18
  r = spreadsheet.control_q18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r18
  r = spreadsheet.control_r18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s18
  r = spreadsheet.control_s18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t18
  r = spreadsheet.control_t18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5,r[:number])
end

def test_control_u18
  r = spreadsheet.control_u18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number])
end

def test_control_w18
  r = spreadsheet.control_w18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number])
end

def test_control_x18
  r = spreadsheet.control_x18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z18
  r = spreadsheet.control_z18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa18
  r = spreadsheet.control_aa18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4,r[:number])
end

def test_control_bo18
  r = spreadsheet.control_bo18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity is maintained at current levels of 5 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bp18
  r = spreadsheet.control_bp18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity grows slowly, reaching 7 TWh/yr by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bq18
  r = spreadsheet.control_bq18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity grows more quickly, reaching 8 TWh/yr by 2030 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_br18
  r = spreadsheet.control_br18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of hydroelectricity grows rapidly reaching 13 TWh/yr by 2035 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_d19
  r = spreadsheet.control_d19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Small-scale wind",r[:string].force_encoding('utf-8'))
end

def test_control_f19
  r = spreadsheet.control_f19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h19
  r = spreadsheet.control_h19
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today, no discernable supply of electricity from micro-wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_i19
  r = spreadsheet.control_i19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply increases to 1.3 TWh/yr by 2020 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_j19
  r = spreadsheet.control_j19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Installed in all ~450,000 suitable domestic properties; supplies 3.5 TWh/year from 2020",r[:string].force_encoding('utf-8'))
end

def test_control_k19
  r = spreadsheet.control_k19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Installed in all suitable domestic and non-domestic sties; 8.9 TWh/year from 2020",r[:string].force_encoding('utf-8'))
end

def test_control_m19
  r = spreadsheet.control_m19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n19
  r = spreadsheet.control_n19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o19
  r = spreadsheet.control_o19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q19
  r = spreadsheet.control_q19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r19
  r = spreadsheet.control_r19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s19
  r = spreadsheet.control_s19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t19
  r = spreadsheet.control_t19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u19
  r = spreadsheet.control_u19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w19
  r = spreadsheet.control_w19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x19
  r = spreadsheet.control_x19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z19
  r = spreadsheet.control_z19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa19
  r = spreadsheet.control_aa19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo19
  r = spreadsheet.control_bo19
  assert_equal(:ExcelString,r[:type])
  assert_equal("As today, no discernable supply of electricity from micro-wind turbines",r[:string].force_encoding('utf-8'))
end

def test_control_bp19
  r = spreadsheet.control_bp19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply of electricity from micro wind turbines increases to 1.3 TWh/yr by 2020 and is sustained",r[:string].force_encoding('utf-8'))
end

def test_control_bq19
  r = spreadsheet.control_bq19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind turbines installed in all ~450,000 suitable domestic properties, supplying 3.5 TWh/year from 2020",r[:string].force_encoding('utf-8'))
end

def test_control_br19
  r = spreadsheet.control_br19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind turbines installed in all suitable domestic and non-domestic sties, supplying 8.9 TWh/year from 2020",r[:string].force_encoding('utf-8'))
end

def test_control_d20
  r = spreadsheet.control_d20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_control_f20
  r = spreadsheet.control_f20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h20
  r = spreadsheet.control_h20
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electricity imports, other than for balancing",r[:string].force_encoding('utf-8'))
end

def test_control_i20
  r = spreadsheet.control_i20
  assert_equal(:ExcelString,r[:type])
  assert_equal("30 TWh/yr of electricity imported from Southern Europe",r[:string].force_encoding('utf-8'))
end

def test_control_j20
  r = spreadsheet.control_j20
  assert_equal(:ExcelString,r[:type])
  assert_equal("70 TWh/yr imported from UK 10% share of international desert solar project ",r[:string].force_encoding('utf-8'))
end

def test_control_k20
  r = spreadsheet.control_k20
  assert_equal(:ExcelString,r[:type])
  assert_equal("140 TWh/yr imported from UK 20% share of international desert solar project",r[:string].force_encoding('utf-8'))
end

def test_control_m20
  r = spreadsheet.control_m20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n20
  r = spreadsheet.control_n20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o20
  r = spreadsheet.control_o20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q20
  r = spreadsheet.control_q20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r20
  r = spreadsheet.control_r20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s20
  r = spreadsheet.control_s20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5,r[:number])
end

def test_control_t20
  r = spreadsheet.control_t20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8,r[:number])
end

def test_control_u20
  r = spreadsheet.control_u20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9,r[:number])
end

def test_control_w20
  r = spreadsheet.control_w20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x20
  r = spreadsheet.control_x20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z20
  r = spreadsheet.control_z20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa20
  r = spreadsheet.control_aa20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo20
  r = spreadsheet.control_bo20
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electricity imports, other than for balancing",r[:string].force_encoding('utf-8'))
end

def test_control_bp20
  r = spreadsheet.control_bp20
  assert_equal(:ExcelString,r[:type])
  assert_equal("30 TWh/yr of electricity imported from Southern Europe",r[:string].force_encoding('utf-8'))
end

def test_control_bq20
  r = spreadsheet.control_bq20
  assert_equal(:ExcelString,r[:type])
  assert_equal("70 TWh/yr of electricity imported from a 10% share of an internationally coordinated desert solar project ",r[:string].force_encoding('utf-8'))
end

def test_control_br20
  r = spreadsheet.control_br20
  assert_equal(:ExcelString,r[:type])
  assert_equal("140 TWh/yr of electricity imported from a 20% share of an internationally coordinated desert solar project",r[:string].force_encoding('utf-8'))
end

def test_control_d21
  r = spreadsheet.control_d21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_control_d22
  r = spreadsheet.control_d22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land dedicated to bioenergy",r[:string].force_encoding('utf-8'))
end

def test_control_f22
  r = spreadsheet.control_f22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h22
  r = spreadsheet.control_h22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy crops and food production similar to today",r[:string].force_encoding('utf-8'))
end

def test_control_i22
  r = spreadsheet.control_i22
  assert_equal(:ExcelString,r[:type])
  assert_equal("5% of land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_j22
  r = spreadsheet.control_j22
  assert_equal(:ExcelString,r[:type])
  assert_equal("10% of land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_k22
  r = spreadsheet.control_k22
  assert_equal(:ExcelString,r[:type])
  assert_equal("17% of land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_m22
  r = spreadsheet.control_m22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n22
  r = spreadsheet.control_n22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o22
  r = spreadsheet.control_o22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q22
  r = spreadsheet.control_q22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r22
  r = spreadsheet.control_r22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_s22
  r = spreadsheet.control_s22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t22
  r = spreadsheet.control_t22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u22
  r = spreadsheet.control_u22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w22
  r = spreadsheet.control_w22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x22
  r = spreadsheet.control_x22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z22
  r = spreadsheet.control_z22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa22
  r = spreadsheet.control_aa22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_bo22
  r = spreadsheet.control_bo22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy crops and food production similar to today",r[:string].force_encoding('utf-8'))
end

def test_control_bp22
  r = spreadsheet.control_bp22
  assert_equal(:ExcelString,r[:type])
  assert_equal("5% of UK land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_bq22
  r = spreadsheet.control_bq22
  assert_equal(:ExcelString,r[:type])
  assert_equal("10% of UK land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_br22
  r = spreadsheet.control_br22
  assert_equal(:ExcelString,r[:type])
  assert_equal("17% of UK land used for energy crops",r[:string].force_encoding('utf-8'))
end

def test_control_d23
  r = spreadsheet.control_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock and their management",r[:string].force_encoding('utf-8'))
end

def test_control_f23
  r = spreadsheet.control_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h23
  r = spreadsheet.control_h23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers increase by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_i23
  r = spreadsheet.control_i23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers same as today",r[:string].force_encoding('utf-8'))
end

def test_control_j23
  r = spreadsheet.control_j23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_k23
  r = spreadsheet.control_k23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 20%",r[:string].force_encoding('utf-8'))
end

def test_control_m23
  r = spreadsheet.control_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n23
  r = spreadsheet.control_n23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o23
  r = spreadsheet.control_o23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q23
  r = spreadsheet.control_q23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r23
  r = spreadsheet.control_r23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s23
  r = spreadsheet.control_s23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t23
  r = spreadsheet.control_t23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u23
  r = spreadsheet.control_u23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w23
  r = spreadsheet.control_w23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x23
  r = spreadsheet.control_x23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z23
  r = spreadsheet.control_z23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa23
  r = spreadsheet.control_aa23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo23
  r = spreadsheet.control_bo23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers increase by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_bp23
  r = spreadsheet.control_bp23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers same as today",r[:string].force_encoding('utf-8'))
end

def test_control_bq23
  r = spreadsheet.control_bq23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 10%",r[:string].force_encoding('utf-8'))
end

def test_control_br23
  r = spreadsheet.control_br23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Livestock numbers decrease by 20%",r[:string].force_encoding('utf-8'))
end

def test_control_d24
  r = spreadsheet.control_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Volume of waste and recycling",r[:string].force_encoding('utf-8'))
end

def test_control_f24
  r = spreadsheet.control_f24
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h24
  r = spreadsheet.control_h24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Quantity of waste increases 50%; Small increase in rates of recycling and EFW.",r[:string].force_encoding('utf-8'))
end

def test_control_i24
  r = spreadsheet.control_i24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Quantity of waste increases 20%; Increase in rates of recycling and EFW.",r[:string].force_encoding('utf-8'))
end

def test_control_j24
  r = spreadsheet.control_j24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Quantity of waste increases 33%; Significant increase in rates of recycling and EFW through innovation.",r[:string].force_encoding('utf-8'))
end

def test_control_k24
  r = spreadsheet.control_k24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Quantity of waste decreases 20%; Significant increase in rate of recycling.",r[:string].force_encoding('utf-8'))
end

def test_control_m24
  r = spreadsheet.control_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n24
  r = spreadsheet.control_n24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o24
  r = spreadsheet.control_o24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_q24
  r = spreadsheet.control_q24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r24
  r = spreadsheet.control_r24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s24
  r = spreadsheet.control_s24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t24
  r = spreadsheet.control_t24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u24
  r = spreadsheet.control_u24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w24
  r = spreadsheet.control_w24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x24
  r = spreadsheet.control_x24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z24
  r = spreadsheet.control_z24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa24
  r = spreadsheet.control_aa24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo24
  r = spreadsheet.control_bo24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Overall quantity of waste increases 50% to 2050; 21% increase in recycling rate and 44% increase in rate of energy from waste. 24% of waste is sent to landfill",r[:string].force_encoding('utf-8'))
end

def test_control_bp24
  r = spreadsheet.control_bp24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Overall quantity of waste increases almost 20% by 2050; recycling and energy from waste rates increase by 36% and 89% respectively. 11% of waste is sent to landfill.",r[:string].force_encoding('utf-8'))
end

def test_control_bq24
  r = spreadsheet.control_bq24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Overall quantity of waste increases 33%; waste is handled through high-tech and industry-led approaches; by 2050, recycling and energy from waste rates increase by 36% and 89% respectively. Only 2% is sent to landfill.",r[:string].force_encoding('utf-8'))
end

def test_control_br24
  r = spreadsheet.control_br24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Quantity of waste decreases 20% by 2050; recycling and energy from waste increase by 70% and 7% respectively; by 2050, 3% of waste sent to landfill.",r[:string].force_encoding('utf-8'))
end

def test_control_d25
  r = spreadsheet.control_d25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_control_f25
  r = spreadsheet.control_f25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h25
  r = spreadsheet.control_h25
  assert_equal(:ExcelString,r[:type])
  assert_equal("No development of macro-algae cultivation",r[:string].force_encoding('utf-8'))
end

def test_control_i25
  r = spreadsheet.control_i25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area same as half of natural reserve used, delivering ~4 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_j25
  r = spreadsheet.control_j25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area same as all of natural reserve used, delivering ~9 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_k25
  r = spreadsheet.control_k25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area same as four times natural reserve used, delivering ~46 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_m25
  r = spreadsheet.control_m25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n25
  r = spreadsheet.control_n25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o25
  r = spreadsheet.control_o25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q25
  r = spreadsheet.control_q25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r25
  r = spreadsheet.control_r25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s25
  r = spreadsheet.control_s25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t25
  r = spreadsheet.control_t25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u25
  r = spreadsheet.control_u25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w25
  r = spreadsheet.control_w25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x25
  r = spreadsheet.control_x25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z25
  r = spreadsheet.control_z25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa25
  r = spreadsheet.control_aa25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo25
  r = spreadsheet.control_bo25
  assert_equal(:ExcelString,r[:type])
  assert_equal("No development of macro-algae cultivation",r[:string].force_encoding('utf-8'))
end

def test_control_bp25
  r = spreadsheet.control_bp25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Macro algae covering the same area as half of natural reserve used, delivering ~4 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_bq25
  r = spreadsheet.control_bq25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Macro algae covering the same area as all of natural reserve used, delivering ~9 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_br25
  r = spreadsheet.control_br25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Macro algae covering the same area as four times natural reserve used, delivering ~46 TWh/yr",r[:string].force_encoding('utf-8'))
end

def test_control_d26
  r = spreadsheet.control_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Type of fuels from biomass",r[:string].force_encoding('utf-8'))
end

def test_control_f26
  r = spreadsheet.control_f26
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h26
  r = spreadsheet.control_h26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to a mixture of solid, liquid and gas biofuels",r[:string].force_encoding('utf-8'))
end

def test_control_i26
  r = spreadsheet.control_i26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to solid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_j26
  r = spreadsheet.control_j26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to liquid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_k26
  r = spreadsheet.control_k26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to biogas fuel",r[:string].force_encoding('utf-8'))
end

def test_control_m26
  r = spreadsheet.control_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n26
  r = spreadsheet.control_n26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o26
  r = spreadsheet.control_o26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_q26
  r = spreadsheet.control_q26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r26
  r = spreadsheet.control_r26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s26
  r = spreadsheet.control_s26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t26
  r = spreadsheet.control_t26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u26
  r = spreadsheet.control_u26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w26
  r = spreadsheet.control_w26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x26
  r = spreadsheet.control_x26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z26
  r = spreadsheet.control_z26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa26
  r = spreadsheet.control_aa26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo26
  r = spreadsheet.control_bo26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass converted to a mixture of solid, liquid and gas biofuels",r[:string].force_encoding('utf-8'))
end

def test_control_bp26
  r = spreadsheet.control_bp26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to solid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_bq26
  r = spreadsheet.control_bq26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to liquid biofuel",r[:string].force_encoding('utf-8'))
end

def test_control_br26
  r = spreadsheet.control_br26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass mainly converted to biogas fuel",r[:string].force_encoding('utf-8'))
end

def test_control_d27
  r = spreadsheet.control_d27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_control_f27
  r = spreadsheet.control_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h27
  r = spreadsheet.control_h27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Imported biofuel declines from ~ 4 TWh/yr currently to zero",r[:string].force_encoding('utf-8'))
end

def test_control_i27
  r = spreadsheet.control_i27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Up to 70 TWh/yr of imported bioenergy in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_j27
  r = spreadsheet.control_j27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Up to 140 TWh/yr of imported bioenergy in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_k27
  r = spreadsheet.control_k27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Up to 280 TWh/yr of imported bioenergy in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_m27
  r = spreadsheet.control_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n27
  r = spreadsheet.control_n27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o27
  r = spreadsheet.control_o27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_q27
  r = spreadsheet.control_q27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r27
  r = spreadsheet.control_r27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7,r[:number])
end

def test_control_s27
  r = spreadsheet.control_s27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t27
  r = spreadsheet.control_t27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5,r[:number])
end

def test_control_u27
  r = spreadsheet.control_u27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w27
  r = spreadsheet.control_w27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x27
  r = spreadsheet.control_x27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z27
  r = spreadsheet.control_z27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa27
  r = spreadsheet.control_aa27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_bo27
  r = spreadsheet.control_bo27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Imported biofuel declines from ~ 4 TWh/yr currently to zero",r[:string].force_encoding('utf-8'))
end

def test_control_bp27
  r = spreadsheet.control_bp27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Up to 70 TWh/yr of imported bioenergy in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bq27
  r = spreadsheet.control_bq27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Up to 140 TWh/yr of imported bioenergy in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_br27
  r = spreadsheet.control_br27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Up to 280 TWh/yr of imported bioenergy in 2050",r[:string].force_encoding('utf-8'))
end

def test_control_d29
  r = spreadsheet.control_d29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic passenger transport",r[:string].force_encoding('utf-8'))
end

def test_control_d30
  r = spreadsheet.control_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic transport behaviour",r[:string].force_encoding('utf-8'))
end

def test_control_f30
  r = spreadsheet.control_f30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h30
  r = spreadsheet.control_h30
  assert_equal(:ExcelString,r[:type])
  assert_equal("In 2050, individuals travel 9% further than today. No noticeable modal shift.",r[:string].force_encoding('utf-8'))
end

def test_control_i30
  r = spreadsheet.control_i30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Individuals travel 7% further than today, cars and vans are 80% of 2050 passenger mileage",r[:string].force_encoding('utf-8'))
end

def test_control_j30
  r = spreadsheet.control_j30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Individuals travel 7% further than today; cars and vans 74% of 2050 passenger mileage",r[:string].force_encoding('utf-8'))
end

def test_control_k30
  r = spreadsheet.control_k30
  assert_equal(:ExcelString,r[:type])
  assert_equal("In 2050, individuals travel the same distance as today. Signficant shift to public transport.",r[:string].force_encoding('utf-8'))
end

def test_control_m30
  r = spreadsheet.control_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n30
  r = spreadsheet.control_n30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o30
  r = spreadsheet.control_o30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q30
  r = spreadsheet.control_q30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r30
  r = spreadsheet.control_r30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s30
  r = spreadsheet.control_s30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t30
  r = spreadsheet.control_t30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_u30
  r = spreadsheet.control_u30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w30
  r = spreadsheet.control_w30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x30
  r = spreadsheet.control_x30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z30
  r = spreadsheet.control_z30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa30
  r = spreadsheet.control_aa30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo30
  r = spreadsheet.control_bo30
  assert_equal(:ExcelString,r[:type])
  assert_equal("In 2050, individuals travel 9% further than today. No noticeable modal shift.",r[:string].force_encoding('utf-8'))
end

def test_control_bp30
  r = spreadsheet.control_bp30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Individuals travel 7% further than today, cars and vans are 80% of 2050 passenger mileage",r[:string].force_encoding('utf-8'))
end

def test_control_bq30
  r = spreadsheet.control_bq30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Individuals travel 7% further than today; cars and vans 74% of 2050 passenger mileage",r[:string].force_encoding('utf-8'))
end

def test_control_br30
  r = spreadsheet.control_br30
  assert_equal(:ExcelString,r[:type])
  assert_equal("In 2050, individuals travel the same distance as today. Signficant shift to public transport.",r[:string].force_encoding('utf-8'))
end

def test_control_d31
  r = spreadsheet.control_d31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Shift to zero emission transport",r[:string].force_encoding('utf-8'))
end

def test_control_f31
  r = spreadsheet.control_f31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h31
  r = spreadsheet.control_h31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% plug in hybrid electric cars; 2.5% zero emission cars.",r[:string].force_encoding('utf-8'))
end

def test_control_i31
  r = spreadsheet.control_i31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 54% plug-in hybrid vehicles; 11%  zero emission vehicles, all buses hybrids.",r[:string].force_encoding('utf-8'))
end

def test_control_j31
  r = spreadsheet.control_j31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 32% plug-in hybrid vehicles; 48% zero emission vehicles; 22% buses electric.",r[:string].force_encoding('utf-8'))
end

def test_control_k31
  r = spreadsheet.control_k31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050 100%  zero emission vehiclesl; all passenger trains electrified; 50% bus electrified ",r[:string].force_encoding('utf-8'))
end

def test_control_m31
  r = spreadsheet.control_m31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n31
  r = spreadsheet.control_n31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o31
  r = spreadsheet.control_o31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q31
  r = spreadsheet.control_q31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r31
  r = spreadsheet.control_r31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s31
  r = spreadsheet.control_s31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t31
  r = spreadsheet.control_t31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u31
  r = spreadsheet.control_u31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w31
  r = spreadsheet.control_w31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x31
  r = spreadsheet.control_x31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z31
  r = spreadsheet.control_z31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa31
  r = spreadsheet.control_aa31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo31
  r = spreadsheet.control_bo31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% plug in hybrid electric cars; 2.5% zero emission cars.",r[:string].force_encoding('utf-8'))
end

def test_control_bp31
  r = spreadsheet.control_bp31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 35% conventional petrol or diesel engine cars; 54% plug-in hybrid vehicles; 11%  zero emission vehicles; all buses hybrids; 73% of passenger railway is electrifi",r[:string].force_encoding('utf-8'))
end

def test_control_bq31
  r = spreadsheet.control_bq31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% conventional combustion engine cars, with 32% in plug-in hybrid vehicles and 48% in zero emission vehicles: 22% of bus travel fully electric or fuel cell electric ",r[:string].force_encoding('utf-8'))
end

def test_control_br31
  r = spreadsheet.control_br31
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050 100%  electric motor or hydrogen fuel cell; all passenger trains electrified; 50% bus  electrified ",r[:string].force_encoding('utf-8'))
end

def test_control_d32
  r = spreadsheet.control_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Choice of car and van techology",r[:string].force_encoding('utf-8'))
end

def test_control_f32
  r = spreadsheet.control_f32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h32
  r = spreadsheet.control_h32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% battery powered.",r[:string].force_encoding('utf-8'))
end

def test_control_i32
  r = spreadsheet.control_i32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 80% battery;  20% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_j32
  r = spreadsheet.control_j32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% battery; 80% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_k32
  r = spreadsheet.control_k32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% hydrogen fuel cells",r[:string].force_encoding('utf-8'))
end

def test_control_m32
  r = spreadsheet.control_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n32
  r = spreadsheet.control_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_o32
  r = spreadsheet.control_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_q32
  r = spreadsheet.control_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r32
  r = spreadsheet.control_r32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s32
  r = spreadsheet.control_s32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t32
  r = spreadsheet.control_t32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u32
  r = spreadsheet.control_u32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w32
  r = spreadsheet.control_w32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x32
  r = spreadsheet.control_x32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z32
  r = spreadsheet.control_z32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa32
  r = spreadsheet.control_aa32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_bo32
  r = spreadsheet.control_bo32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_bp32
  r = spreadsheet.control_bp32
  assert_equal(:ExcelString,r[:type])
  assert_equal("by 2050, 80% electric,  20% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_bq32
  r = spreadsheet.control_bq32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 20% electric, 80% hydrogen fuel cell",r[:string].force_encoding('utf-8'))
end

def test_control_br32
  r = spreadsheet.control_br32
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 100% hydrogen fuel cells",r[:string].force_encoding('utf-8'))
end

def test_control_d33
  r = spreadsheet.control_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_control_f33
  r = spreadsheet.control_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h33
  r = spreadsheet.control_h33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road haulage makes up 73% of distance, using conventional engines. Rail all diesel",r[:string].force_encoding('utf-8'))
end

def test_control_i33
  r = spreadsheet.control_i33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some shift from road to rail and water, and more efficient engines",r[:string].force_encoding('utf-8'))
end

def test_control_j33
  r = spreadsheet.control_j33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Greater modal shift to rail and water; more efficient HGVs; more efficient logistics",r[:string].force_encoding('utf-8'))
end

def test_control_k33
  r = spreadsheet.control_k33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road modal share falls to half; greater hybridisation. Rail freight is all electric ",r[:string].force_encoding('utf-8'))
end

def test_control_m33
  r = spreadsheet.control_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n33
  r = spreadsheet.control_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o33
  r = spreadsheet.control_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q33
  r = spreadsheet.control_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_r33
  r = spreadsheet.control_r33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s33
  r = spreadsheet.control_s33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t33
  r = spreadsheet.control_t33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_u33
  r = spreadsheet.control_u33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w33
  r = spreadsheet.control_w33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x33
  r = spreadsheet.control_x33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z33
  r = spreadsheet.control_z33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa33
  r = spreadsheet.control_aa33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo33
  r = spreadsheet.control_bo33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road haulage makes up 73% of distance, using conventional engines. Rail all diesel",r[:string].force_encoding('utf-8'))
end

def test_control_bp33
  r = spreadsheet.control_bp33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some shift from road to rail and water, and more efficient engines",r[:string].force_encoding('utf-8'))
end

def test_control_bq33
  r = spreadsheet.control_bq33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Greater modal shift to rail and water; more efficient HGVs; more efficient logistics",r[:string].force_encoding('utf-8'))
end

def test_control_br33
  r = spreadsheet.control_br33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road modal share falls to half; greater hybridisation. Rail freight is all electric ",r[:string].force_encoding('utf-8'))
end

def test_control_d34
  r = spreadsheet.control_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_control_f34
  r = spreadsheet.control_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h34
  r = spreadsheet.control_h34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 130% passengers increase; 50% more fuel use",r[:string].force_encoding('utf-8'))
end

def test_control_i34
  r = spreadsheet.control_i34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 130% passengers increase; 45% more fuel use",r[:string].force_encoding('utf-8'))
end

def test_control_j34
  r = spreadsheet.control_j34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 130% passengers increase; 31% more fuel use",r[:string].force_encoding('utf-8'))
end

def test_control_k34
  r = spreadsheet.control_k34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, 85% passengers increase; 5% more fuel use",r[:string].force_encoding('utf-8'))
end

def test_control_m34
  r = spreadsheet.control_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n34
  r = spreadsheet.control_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o34
  r = spreadsheet.control_o34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q34
  r = spreadsheet.control_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r34
  r = spreadsheet.control_r34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s34
  r = spreadsheet.control_s34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t34
  r = spreadsheet.control_t34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u34
  r = spreadsheet.control_u34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w34
  r = spreadsheet.control_w34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x34
  r = spreadsheet.control_x34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z34
  r = spreadsheet.control_z34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa34
  r = spreadsheet.control_aa34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo34
  r = spreadsheet.control_bo34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, international aviation has 130% more passengers but uses only 50% more fuel",r[:string].force_encoding('utf-8'))
end

def test_control_bp34
  r = spreadsheet.control_bp34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, international aviation has 130% more passengers but uses only 45% more fuel",r[:string].force_encoding('utf-8'))
end

def test_control_bq34
  r = spreadsheet.control_bq34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, international aviation has 130% more passengers but uses only 31% more fuel",r[:string].force_encoding('utf-8'))
end

def test_control_br34
  r = spreadsheet.control_br34
  assert_equal(:ExcelString,r[:type])
  assert_equal("By 2050, international aviation has 85% more passengers but uses only 5% more fuel",r[:string].force_encoding('utf-8'))
end

def test_control_d35
  r = spreadsheet.control_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_control_f35
  r = spreadsheet.control_f35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h35
  r = spreadsheet.control_h35
  assert_equal(:ExcelString,r[:type])
  assert_equal("no improvements from energy efficiency; between 2007 and 2050 emissions increase by 139%",r[:string].force_encoding('utf-8'))
end

def test_control_i35
  r = spreadsheet.control_i35
  assert_equal(:ExcelString,r[:type])
  assert_equal("1/3 of technical feasible reductions realised; between 2007 and 2050 emissions increase by 78%",r[:string].force_encoding('utf-8'))
end

def test_control_j35
  r = spreadsheet.control_j35
  assert_equal(:ExcelString,r[:type])
  assert_equal("2/3 of technical feasible reductions realised; between 2007 and 2050 emissions increase by 16%",r[:string].force_encoding('utf-8'))
end

def test_control_k35
  r = spreadsheet.control_k35
  assert_equal(:ExcelString,r[:type])
  assert_equal("maximum technical feasible reductions realised; between 2007 and 2050 emissions decrease by 46%",r[:string].force_encoding('utf-8'))
end

def test_control_m35
  r = spreadsheet.control_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n35
  r = spreadsheet.control_n35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o35
  r = spreadsheet.control_o35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q35
  r = spreadsheet.control_q35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r35
  r = spreadsheet.control_r35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s35
  r = spreadsheet.control_s35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t35
  r = spreadsheet.control_t35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u35
  r = spreadsheet.control_u35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w35
  r = spreadsheet.control_w35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x35
  r = spreadsheet.control_x35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z35
  r = spreadsheet.control_z35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa35
  r = spreadsheet.control_aa35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo35
  r = spreadsheet.control_bo35
  assert_equal(:ExcelString,r[:type])
  assert_equal("no improvements from energy efficiency; between 2007 and 2050 emissions increase by 139%",r[:string].force_encoding('utf-8'))
end

def test_control_bp35
  r = spreadsheet.control_bp35
  assert_equal(:ExcelString,r[:type])
  assert_equal("1/3 of technical feasible reductions realised; between 2007 and 2050 emissions increase by 78%",r[:string].force_encoding('utf-8'))
end

def test_control_bq35
  r = spreadsheet.control_bq35
  assert_equal(:ExcelString,r[:type])
  assert_equal("2/3 of technical feasible reductions realised; between 2007 and 2050 emissions increase by 16%",r[:string].force_encoding('utf-8'))
end

def test_control_br35
  r = spreadsheet.control_br35
  assert_equal(:ExcelString,r[:type])
  assert_equal("maximum technical feasible reductions realised; between 2007 and 2050 emissions decrease by 46%",r[:string].force_encoding('utf-8'))
end

def test_control_d36
  r = spreadsheet.control_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_control_d37
  r = spreadsheet.control_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average temperature of homes",r[:string].force_encoding('utf-8'))
end

def test_control_f37
  r = spreadsheet.control_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h37
  r = spreadsheet.control_h37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature increases to 20°C (a 2.5°C increase on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_i37
  r = spreadsheet.control_i37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature increases to 18°C (a 0.5°C increase on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_j37
  r = spreadsheet.control_j37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature decreases to 17°C (a 0.5°C decrease on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_k37
  r = spreadsheet.control_k37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature decreases to 16°C (a 1.5°C decrease on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_m37
  r = spreadsheet.control_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n37
  r = spreadsheet.control_n37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o37
  r = spreadsheet.control_o37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q37
  r = spreadsheet.control_q37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r37
  r = spreadsheet.control_r37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s37
  r = spreadsheet.control_s37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t37
  r = spreadsheet.control_t37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_u37
  r = spreadsheet.control_u37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w37
  r = spreadsheet.control_w37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x37
  r = spreadsheet.control_x37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z37
  r = spreadsheet.control_z37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa37
  r = spreadsheet.control_aa37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo37
  r = spreadsheet.control_bo37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature increases to 20°C (a 2.5°C increase on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bp37
  r = spreadsheet.control_bp37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature increases to 18°C (a 0.5°C increase on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bq37
  r = spreadsheet.control_bq37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature decreases to 17°C (a 0.5°C decrease on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_br37
  r = spreadsheet.control_br37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Average room temperature decreases to 16°C (a 1.5°C decrease on 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_d38
  r = spreadsheet.control_d38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home insulation",r[:string].force_encoding('utf-8'))
end

def test_control_f38
  r = spreadsheet.control_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h38
  r = spreadsheet.control_h38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 7m homes insulated, average thermal leakiness falls by 25%",r[:string].force_encoding('utf-8'))
end

def test_control_i38
  r = spreadsheet.control_i38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 8m homes insulated, average thermal leakiness falls by 33%",r[:string].force_encoding('utf-8'))
end

def test_control_j38
  r = spreadsheet.control_j38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 18m homes insulated, average thermal leakiness falls by 42%",r[:string].force_encoding('utf-8'))
end

def test_control_k38
  r = spreadsheet.control_k38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 24m homes insulated, average thermal leakiness decreases by 50% ",r[:string].force_encoding('utf-8'))
end

def test_control_m38
  r = spreadsheet.control_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n38
  r = spreadsheet.control_n38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o38
  r = spreadsheet.control_o38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q38
  r = spreadsheet.control_q38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r38
  r = spreadsheet.control_r38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s38
  r = spreadsheet.control_s38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t38
  r = spreadsheet.control_t38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u38
  r = spreadsheet.control_u38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w38
  r = spreadsheet.control_w38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x38
  r = spreadsheet.control_x38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z38
  r = spreadsheet.control_z38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa38
  r = spreadsheet.control_aa38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo38
  r = spreadsheet.control_bo38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 7m homes insulated, average thermal leakiness falls by 25%",r[:string].force_encoding('utf-8'))
end

def test_control_bp38
  r = spreadsheet.control_bp38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 8m homes insulated, average thermal leakiness falls by 33%",r[:string].force_encoding('utf-8'))
end

def test_control_bq38
  r = spreadsheet.control_bq38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 18m homes insulated, average thermal leakiness falls by 42%",r[:string].force_encoding('utf-8'))
end

def test_control_br38
  r = spreadsheet.control_br38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over 24m homes insulated, average thermal leakiness decreases by 50% ",r[:string].force_encoding('utf-8'))
end

def test_control_d39
  r = spreadsheet.control_d39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home heating electrification",r[:string].force_encoding('utf-8'))
end

def test_control_f39
  r = spreadsheet.control_f39
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h39
  r = spreadsheet.control_h39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_i39
  r = spreadsheet.control_i39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_j39
  r = spreadsheet.control_j39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_k39
  r = spreadsheet.control_k39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_m39
  r = spreadsheet.control_m39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n39
  r = spreadsheet.control_n39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o39
  r = spreadsheet.control_o39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q39
  r = spreadsheet.control_q39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r39
  r = spreadsheet.control_r39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s39
  r = spreadsheet.control_s39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t39
  r = spreadsheet.control_t39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u39
  r = spreadsheet.control_u39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w39
  r = spreadsheet.control_w39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_x39
  r = spreadsheet.control_x39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z39
  r = spreadsheet.control_z39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa39
  r = spreadsheet.control_aa39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo39
  r = spreadsheet.control_bo39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_bp39
  r = spreadsheet.control_bp39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_bq39
  r = spreadsheet.control_bq39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_br39
  r = spreadsheet.control_br39
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of new domestic heating systems supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_d40
  r = spreadsheet.control_d40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home heating that isn't electric",r[:string].force_encoding('utf-8'))
end

def test_control_f40
  r = spreadsheet.control_f40
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h40
  r = spreadsheet.control_h40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas or gas CHP (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_i40
  r = spreadsheet.control_i40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal or coal CHP (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_j40
  r = spreadsheet.control_j40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is waste heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k40
  r = spreadsheet.control_k40
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas; coal/biomass; and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m40
  r = spreadsheet.control_m40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n40
  r = spreadsheet.control_n40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o40
  r = spreadsheet.control_o40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q40
  r = spreadsheet.control_q40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r40
  r = spreadsheet.control_r40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s40
  r = spreadsheet.control_s40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t40
  r = spreadsheet.control_t40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u40
  r = spreadsheet.control_u40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w40
  r = spreadsheet.control_w40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x40
  r = spreadsheet.control_x40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z40
  r = spreadsheet.control_z40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa40
  r = spreadsheet.control_aa40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo40
  r = spreadsheet.control_bo40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bp40
  r = spreadsheet.control_bp40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bq40
  r = spreadsheet.control_bq40
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is waste heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_br40
  r = spreadsheet.control_br40
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas; coal/biomass; and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_d41
  r = spreadsheet.control_d41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_control_d42
  r = spreadsheet.control_d42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Home lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_control_f42
  r = spreadsheet.control_f42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h42
  r = spreadsheet.control_h42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances increases by 20% (relative to 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_i42
  r = spreadsheet.control_i42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances is stable",r[:string].force_encoding('utf-8'))
end

def test_control_j42
  r = spreadsheet.control_j42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances decreases by 40%",r[:string].force_encoding('utf-8'))
end

def test_control_k42
  r = spreadsheet.control_k42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances decreases by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_m42
  r = spreadsheet.control_m42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n42
  r = spreadsheet.control_n42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o42
  r = spreadsheet.control_o42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q42
  r = spreadsheet.control_q42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r42
  r = spreadsheet.control_r42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s42
  r = spreadsheet.control_s42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t42
  r = spreadsheet.control_t42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_u42
  r = spreadsheet.control_u42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w42
  r = spreadsheet.control_w42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x42
  r = spreadsheet.control_x42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z42
  r = spreadsheet.control_z42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa42
  r = spreadsheet.control_aa42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo42
  r = spreadsheet.control_bo42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances increases by 20% (relative to 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bp42
  r = spreadsheet.control_bp42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances is stable",r[:string].force_encoding('utf-8'))
end

def test_control_bq42
  r = spreadsheet.control_bq42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances decreases by 40%",r[:string].force_encoding('utf-8'))
end

def test_control_br42
  r = spreadsheet.control_br42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for domestic lights and appliances decreases by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_d43
  r = spreadsheet.control_d43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electrification of home cooking",r[:string].force_encoding('utf-8'))
end

def test_control_f43
  r = spreadsheet.control_f43
  assert_equal(:ExcelString,r[:type])
  assert_equal("B",r[:string].force_encoding('utf-8'))
end

def test_control_h43
  r = spreadsheet.control_h43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking remains at 63% electricity and 37% gas",r[:string].force_encoding('utf-8'))
end

def test_control_i43
  r = spreadsheet.control_i43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_j43
  r = spreadsheet.control_j43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_k43
  r = spreadsheet.control_k43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_m43
  r = spreadsheet.control_m43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n43
  r = spreadsheet.control_n43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_o43
  r = spreadsheet.control_o43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q43
  r = spreadsheet.control_q43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r43
  r = spreadsheet.control_r43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s43
  r = spreadsheet.control_s43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t43
  r = spreadsheet.control_t43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u43
  r = spreadsheet.control_u43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w43
  r = spreadsheet.control_w43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x43
  r = spreadsheet.control_x43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z43
  r = spreadsheet.control_z43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa43
  r = spreadsheet.control_aa43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_bo43
  r = spreadsheet.control_bo43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking remains at 63% electricity and 37% gas",r[:string].force_encoding('utf-8'))
end

def test_control_bp43
  r = spreadsheet.control_bp43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_bq43
  r = spreadsheet.control_bq43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_br43
  r = spreadsheet.control_br43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for domestic cooking is entirely electric",r[:string].force_encoding('utf-8'))
end

def test_control_d44
  r = spreadsheet.control_d44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_control_d45
  r = spreadsheet.control_d45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Growth in industry",r[:string].force_encoding('utf-8'))
end

def test_control_f45
  r = spreadsheet.control_f45
  assert_equal(:ExcelString,r[:type])
  assert_equal("C",r[:string].force_encoding('utf-8'))
end

def test_control_h45
  r = spreadsheet.control_h45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output more than doubles by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_i45
  r = spreadsheet.control_i45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry grows in line with current trends",r[:string].force_encoding('utf-8'))
end

def test_control_j45
  r = spreadsheet.control_j45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output falls 30-40% by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_k45
  r = spreadsheet.control_k45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as C",r[:string].force_encoding('utf-8'))
end

def test_control_m45
  r = spreadsheet.control_m45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n45
  r = spreadsheet.control_n45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o45
  r = spreadsheet.control_o45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_q45
  r = spreadsheet.control_q45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r45
  r = spreadsheet.control_r45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s45
  r = spreadsheet.control_s45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t45
  r = spreadsheet.control_t45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u45
  r = spreadsheet.control_u45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w45
  r = spreadsheet.control_w45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x45
  r = spreadsheet.control_x45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z45
  r = spreadsheet.control_z45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa45
  r = spreadsheet.control_aa45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_bo45
  r = spreadsheet.control_bo45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output more than doubles by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bp45
  r = spreadsheet.control_bp45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry grows in line with current trends",r[:string].force_encoding('utf-8'))
end

def test_control_bq45
  r = spreadsheet.control_bq45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output falls 30-40% by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_br45
  r = spreadsheet.control_br45
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK industry output falls 30-40% by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_d46
  r = spreadsheet.control_d46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy intensity of industry",r[:string].force_encoding('utf-8'))
end

def test_control_f46
  r = spreadsheet.control_f46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_h46
  r = spreadsheet.control_h46
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electrification of processes, little improvement in energy intensity",r[:string].force_encoding('utf-8'))
end

def test_control_i46
  r = spreadsheet.control_i46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some processes electrified; moderate improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_j46
  r = spreadsheet.control_j46
  assert_equal(:ExcelString,r[:type])
  assert_equal("High electrification; CCS captures 48% of emissions; process emissions reduced",r[:string].force_encoding('utf-8'))
end

def test_control_k46
  r = spreadsheet.control_k46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as 3",r[:string].force_encoding('utf-8'))
end

def test_control_m46
  r = spreadsheet.control_m46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n46
  r = spreadsheet.control_n46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_o46
  r = spreadsheet.control_o46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q46
  r = spreadsheet.control_q46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_r46
  r = spreadsheet.control_r46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s46
  r = spreadsheet.control_s46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t46
  r = spreadsheet.control_t46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u46
  r = spreadsheet.control_u46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w46
  r = spreadsheet.control_w46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x46
  r = spreadsheet.control_x46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z46
  r = spreadsheet.control_z46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa46
  r = spreadsheet.control_aa46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo46
  r = spreadsheet.control_bo46
  assert_equal(:ExcelString,r[:type])
  assert_equal("No electrification of industrial processes and little improvement in industrial energy intensity",r[:string].force_encoding('utf-8'))
end

def test_control_bp46
  r = spreadsheet.control_bp46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Some industrial processes electrified and moderate improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_bq46
  r = spreadsheet.control_bq46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Many industrial processes electrified, CCS captures 48% of emissions and  substantial improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_br46
  r = spreadsheet.control_br46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Many industrial processes electrified, CCS captures 48% of emissions and  substantial improvements in process emissions and energy demand",r[:string].force_encoding('utf-8'))
end

def test_control_d47
  r = spreadsheet.control_d47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_control_d48
  r = spreadsheet.control_d48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial demand for heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_control_f48
  r = spreadsheet.control_f48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h48
  r = spreadsheet.control_h48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Space heating demand increases by 50%, hot water demand by 60%, cooling demand by 250%",r[:string].force_encoding('utf-8'))
end

def test_control_i48
  r = spreadsheet.control_i48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Space heating demand increases by 30%, hot water demand by 50%, cooling demand by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_j48
  r = spreadsheet.control_j48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Space heating demand stable, hot water demand increases by 25%, cooling demand stable",r[:string].force_encoding('utf-8'))
end

def test_control_k48
  r = spreadsheet.control_k48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Space heating demand drops by 25%, hot water demand by 10%, cooling demand by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_m48
  r = spreadsheet.control_m48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n48
  r = spreadsheet.control_n48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o48
  r = spreadsheet.control_o48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q48
  r = spreadsheet.control_q48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r48
  r = spreadsheet.control_r48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s48
  r = spreadsheet.control_s48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t48
  r = spreadsheet.control_t48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_u48
  r = spreadsheet.control_u48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w48
  r = spreadsheet.control_w48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x48
  r = spreadsheet.control_x48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z48
  r = spreadsheet.control_z48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa48
  r = spreadsheet.control_aa48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo48
  r = spreadsheet.control_bo48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand increases by 50%, hot water demand by 60%, cooling demand by 250%",r[:string].force_encoding('utf-8'))
end

def test_control_bp48
  r = spreadsheet.control_bp48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand increases by 30%, hot water demand by 50%, cooling demand by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_bq48
  r = spreadsheet.control_bq48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand stable, hot water demand increases by 25%, cooling demand stable",r[:string].force_encoding('utf-8'))
end

def test_control_br48
  r = spreadsheet.control_br48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial space heating demand drops by 25%, hot water demand by 10%, cooling demand by 60%",r[:string].force_encoding('utf-8'))
end

def test_control_d49
  r = spreadsheet.control_d49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating electrification",r[:string].force_encoding('utf-8'))
end

def test_control_f49
  r = spreadsheet.control_f49
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h49
  r = spreadsheet.control_h49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_i49
  r = spreadsheet.control_i49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_j49
  r = spreadsheet.control_j49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_k49
  r = spreadsheet.control_k49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_m49
  r = spreadsheet.control_m49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n49
  r = spreadsheet.control_n49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o49
  r = spreadsheet.control_o49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q49
  r = spreadsheet.control_q49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r49
  r = spreadsheet.control_r49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s49
  r = spreadsheet.control_s49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_t49
  r = spreadsheet.control_t49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_u49
  r = spreadsheet.control_u49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w49
  r = spreadsheet.control_w49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_x49
  r = spreadsheet.control_x49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_z49
  r = spreadsheet.control_z49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa49
  r = spreadsheet.control_aa49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo49
  r = spreadsheet.control_bo49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 0-10%, as today",r[:string].force_encoding('utf-8'))
end

def test_control_bp49
  r = spreadsheet.control_bp49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 20%",r[:string].force_encoding('utf-8'))
end

def test_control_bq49
  r = spreadsheet.control_bq49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 30-60%",r[:string].force_encoding('utf-8'))
end

def test_control_br49
  r = spreadsheet.control_br49
  assert_equal(:ExcelString,r[:type])
  assert_equal("The proportion of non-domestic heat supplied using electricity is 80-100%",r[:string].force_encoding('utf-8'))
end

def test_control_d50
  r = spreadsheet.control_d50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating that isn't electric",r[:string].force_encoding('utf-8'))
end

def test_control_f50
  r = spreadsheet.control_f50
  assert_equal(:ExcelString,r[:type])
  assert_equal("D",r[:string].force_encoding('utf-8'))
end

def test_control_h50
  r = spreadsheet.control_h50
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas or gas CHP (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_i50
  r = spreadsheet.control_i50
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is coal or coal CHP (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_j50
  r = spreadsheet.control_j50
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_k50
  r = spreadsheet.control_k50
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas, coal/biomass, and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_m50
  r = spreadsheet.control_m50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n50
  r = spreadsheet.control_n50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o50
  r = spreadsheet.control_o50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q50
  r = spreadsheet.control_q50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r50
  r = spreadsheet.control_r50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_s50
  r = spreadsheet.control_s50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t50
  r = spreadsheet.control_t50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u50
  r = spreadsheet.control_u50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w50
  r = spreadsheet.control_w50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_x50
  r = spreadsheet.control_x50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z50
  r = spreadsheet.control_z50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa50
  r = spreadsheet.control_aa50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_bo50
  r = spreadsheet.control_bo50
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is gas (biogas if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bp50
  r = spreadsheet.control_bp50
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heating fuel is coal (biomass if available)",r[:string].force_encoding('utf-8'))
end

def test_control_bq50
  r = spreadsheet.control_bq50
  assert_equal(:ExcelString,r[:type])
  assert_equal("The dominant non-electric heat source is heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_br50
  r = spreadsheet.control_br50
  assert_equal(:ExcelString,r[:type])
  assert_equal("A mixture of gas/biogas, coal/biomass, and heat from power stations",r[:string].force_encoding('utf-8'))
end

def test_control_d51
  r = spreadsheet.control_d51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_control_d52
  r = spreadsheet.control_d52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_control_f52
  r = spreadsheet.control_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h52
  r = spreadsheet.control_h52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for lights & appliances increases by 33%. Energy for cooking is stable",r[:string].force_encoding('utf-8'))
end

def test_control_i52
  r = spreadsheet.control_i52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for lights & appliances increases by 15%; decreases by 5% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_j52
  r = spreadsheet.control_j52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for lights & appliances decreases by 5%; decreases by 20% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_k52
  r = spreadsheet.control_k52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for lights & appliances decreases by 30%; decreases by 25% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_m52
  r = spreadsheet.control_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n52
  r = spreadsheet.control_n52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_o52
  r = spreadsheet.control_o52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q52
  r = spreadsheet.control_q52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r52
  r = spreadsheet.control_r52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s52
  r = spreadsheet.control_s52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_t52
  r = spreadsheet.control_t52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_u52
  r = spreadsheet.control_u52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_w52
  r = spreadsheet.control_w52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_x52
  r = spreadsheet.control_x52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z52
  r = spreadsheet.control_z52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_aa52
  r = spreadsheet.control_aa52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo52
  r = spreadsheet.control_bo52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances increases by 33%. Energy for cooking is stable",r[:string].force_encoding('utf-8'))
end

def test_control_bp52
  r = spreadsheet.control_bp52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances increases by 15%; decreases by 5% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_bq52
  r = spreadsheet.control_bq52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances decreases by 5%; decreases by 20% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_br52
  r = spreadsheet.control_br52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy demand for commercial lights & appliances decreases by 30%; decreases by 25% for cooking",r[:string].force_encoding('utf-8'))
end

def test_control_d53
  r = spreadsheet.control_d53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electrification of commercial cooking",r[:string].force_encoding('utf-8'))
end

def test_control_f53
  r = spreadsheet.control_f53
  assert_equal(:ExcelString,r[:type])
  assert_equal("B",r[:string].force_encoding('utf-8'))
end

def test_control_h53
  r = spreadsheet.control_h53
  assert_equal(:ExcelString,r[:type])
  assert_equal("60% electricity and 40% gas (no change from 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_i53
  r = spreadsheet.control_i53
  assert_equal(:ExcelString,r[:type])
  assert_equal("100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_j53
  r = spreadsheet.control_j53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_k53
  r = spreadsheet.control_k53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Same as B",r[:string].force_encoding('utf-8'))
end

def test_control_m53
  r = spreadsheet.control_m53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n53
  r = spreadsheet.control_n53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_o53
  r = spreadsheet.control_o53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q53
  r = spreadsheet.control_q53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_r53
  r = spreadsheet.control_r53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s53
  r = spreadsheet.control_s53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t53
  r = spreadsheet.control_t53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u53
  r = spreadsheet.control_u53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w53
  r = spreadsheet.control_w53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x53
  r = spreadsheet.control_x53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_z53
  r = spreadsheet.control_z53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa53
  r = spreadsheet.control_aa53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_bo53
  r = spreadsheet.control_bo53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 60% electricity and 40% gas (no change from 2007)",r[:string].force_encoding('utf-8'))
end

def test_control_bp53
  r = spreadsheet.control_bp53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_bq53
  r = spreadsheet.control_bq53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_br53
  r = spreadsheet.control_br53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy used for commercial cooking is 100% electric",r[:string].force_encoding('utf-8'))
end

def test_control_d55
  r = spreadsheet.control_d55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_control_f55
  r = spreadsheet.control_f55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h55
  r = spreadsheet.control_h55
  assert_equal(:ExcelString,r[:type])
  assert_equal("No geosequestration",r[:string].force_encoding('utf-8'))
end

def test_control_i55
  r = spreadsheet.control_i55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestration rate of 1 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_j55
  r = spreadsheet.control_j55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestration rate of ~30 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_k55
  r = spreadsheet.control_k55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestration rate of ~110 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_m55
  r = spreadsheet.control_m55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n55
  r = spreadsheet.control_n55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o55
  r = spreadsheet.control_o55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q55
  r = spreadsheet.control_q55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r55
  r = spreadsheet.control_r55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s55
  r = spreadsheet.control_s55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t55
  r = spreadsheet.control_t55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u55
  r = spreadsheet.control_u55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_w55
  r = spreadsheet.control_w55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x55
  r = spreadsheet.control_x55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z55
  r = spreadsheet.control_z55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_aa55
  r = spreadsheet.control_aa55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo55
  r = spreadsheet.control_bo55
  assert_equal(:ExcelString,r[:type])
  assert_equal("No geosequestration",r[:string].force_encoding('utf-8'))
end

def test_control_bp55
  r = spreadsheet.control_bp55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestred at a rate of 1 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_bq55
  r = spreadsheet.control_bq55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide  sequestred at a rate of ~30 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_br55
  r = spreadsheet.control_br55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon dioxide sequestred at a rate of ~110 million tonnes per annum by 2050",r[:string].force_encoding('utf-8'))
end

def test_control_d56
  r = spreadsheet.control_d56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting & interconnection",r[:string].force_encoding('utf-8'))
end

def test_control_f56
  r = spreadsheet.control_f56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_h56
  r = spreadsheet.control_h56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Today’s 3.5 GW storage & 4 GW interconnection with Europe for balancing",r[:string].force_encoding('utf-8'))
end

def test_control_i56
  r = spreadsheet.control_i56
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 GW storage & 10 GW interconnection with Europe for balancing",r[:string].force_encoding('utf-8'))
end

def test_control_j56
  r = spreadsheet.control_j56
  assert_equal(:ExcelString,r[:type])
  assert_equal("7 GW storage with 2 more pumped storage, 15 GW interconnection & some demand shifting",r[:string].force_encoding('utf-8'))
end

def test_control_k56
  r = spreadsheet.control_k56
  assert_equal(:ExcelString,r[:type])
  assert_equal("20 GW storage with large lagoons, 30 GW interconnection & substantial demand shifting",r[:string].force_encoding('utf-8'))
end

def test_control_m56
  r = spreadsheet.control_m56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n56
  r = spreadsheet.control_n56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o56
  r = spreadsheet.control_o56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q56
  r = spreadsheet.control_q56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_r56
  r = spreadsheet.control_r56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_s56
  r = spreadsheet.control_s56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_t56
  r = spreadsheet.control_t56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_u56
  r = spreadsheet.control_u56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_w56
  r = spreadsheet.control_w56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_control_x56
  r = spreadsheet.control_x56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_z56
  r = spreadsheet.control_z56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_control_aa56
  r = spreadsheet.control_aa56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_control_bo56
  r = spreadsheet.control_bo56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Today’s 3.5 GW of pumped storage and 4 GW interconnection with Europe available for balancing electricity supply and demand",r[:string].force_encoding('utf-8'))
end

def test_control_bp56
  r = spreadsheet.control_bp56
  assert_equal(:ExcelString,r[:type])
  assert_equal("4 GW of pumped storage and 10 GW interconnection with Europe available for balancing electricity supply and demand",r[:string].force_encoding('utf-8'))
end

def test_control_bq56
  r = spreadsheet.control_bq56
  assert_equal(:ExcelString,r[:type])
  assert_equal("7 GW of pumped storage (includign 2 more sites), 15 GW of interconnection with Europe and some demand shifting available for balancing electricity supply and demand",r[:string].force_encoding('utf-8'))
end

def test_control_br56
  r = spreadsheet.control_br56
  assert_equal(:ExcelString,r[:type])
  assert_equal("20 GW of pumped storage with large lagoons, 30 GW of interconnection with Europe and substantial demand shifting available for balancing electricity supply and demand",r[:string].force_encoding('utf-8'))
end

def test_control_m57
  r = spreadsheet.control_m57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_n57
  r = spreadsheet.control_n57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_o57
  r = spreadsheet.control_o57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_q57
  r = spreadsheet.control_q57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_r57
  r = spreadsheet.control_r57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_s57
  r = spreadsheet.control_s57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_t57
  r = spreadsheet.control_t57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_u57
  r = spreadsheet.control_u57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_w57
  r = spreadsheet.control_w57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_x57
  r = spreadsheet.control_x57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_z57
  r = spreadsheet.control_z57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_control_aa57
  r = spreadsheet.control_aa57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end


  # start of Preferences

  # start of Intermediate output
def test_intermediate_output_b2
  r = spreadsheet.intermediate_output_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy source / use charts",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d4
  r = spreadsheet.intermediate_output_d4
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh / year",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f4
  r = spreadsheet.intermediate_output_f4
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007 (Consistent)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h4
  r = spreadsheet.intermediate_output_h4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_intermediate_output_i4
  r = spreadsheet.intermediate_output_i4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_intermediate_output_j4
  r = spreadsheet.intermediate_output_j4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_intermediate_output_k4
  r = spreadsheet.intermediate_output_k4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_l4
  r = spreadsheet.intermediate_output_l4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_intermediate_output_m4
  r = spreadsheet.intermediate_output_m4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_n4
  r = spreadsheet.intermediate_output_n4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_intermediate_output_o4
  r = spreadsheet.intermediate_output_o4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_intermediate_output_p4
  r = spreadsheet.intermediate_output_p4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_intermediate_output_q4
  r = spreadsheet.intermediate_output_q4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_c6
  r = spreadsheet.intermediate_output_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c7
  r = spreadsheet.intermediate_output_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d7
  r = spreadsheet.intermediate_output_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f7
  r = spreadsheet.intermediate_output_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(502.50552967076953,r[:number])
end

def test_intermediate_output_h7
  r = spreadsheet.intermediate_output_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.85404977847907,r[:number])
end

def test_intermediate_output_i7
  r = spreadsheet.intermediate_output_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.2870297257891,r[:number])
end

def test_intermediate_output_j7
  r = spreadsheet.intermediate_output_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(445.09762990248004,r[:number])
end

def test_intermediate_output_k7
  r = spreadsheet.intermediate_output_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.4061681424823,r[:number])
end

def test_intermediate_output_l7
  r = spreadsheet.intermediate_output_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.3974289791397,r[:number])
end

def test_intermediate_output_m7
  r = spreadsheet.intermediate_output_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(356.1184633730033,r[:number])
end

def test_intermediate_output_n7
  r = spreadsheet.intermediate_output_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.8661658524155,r[:number])
end

def test_intermediate_output_o7
  r = spreadsheet.intermediate_output_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.17528729424066,r[:number])
end

def test_intermediate_output_p7
  r = spreadsheet.intermediate_output_p7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.59857626834895,r[:number])
end

def test_intermediate_output_q7
  r = spreadsheet.intermediate_output_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.8605908951955,r[:number])
end

def test_intermediate_output_c8
  r = spreadsheet.intermediate_output_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d8
  r = spreadsheet.intermediate_output_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f8
  r = spreadsheet.intermediate_output_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.24699816643595,r[:number])
end

def test_intermediate_output_h8
  r = spreadsheet.intermediate_output_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.852446803025652,r[:number])
end

def test_intermediate_output_i8
  r = spreadsheet.intermediate_output_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.72448740333324,r[:number])
end

def test_intermediate_output_j8
  r = spreadsheet.intermediate_output_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.183448840130435,r[:number])
end

def test_intermediate_output_k8
  r = spreadsheet.intermediate_output_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.963945338992865,r[:number])
end

def test_intermediate_output_l8
  r = spreadsheet.intermediate_output_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.668321544879074,r[:number])
end

def test_intermediate_output_m8
  r = spreadsheet.intermediate_output_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.278078430943093,r[:number])
end

def test_intermediate_output_n8
  r = spreadsheet.intermediate_output_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.860444512419436,r[:number])
end

def test_intermediate_output_o8
  r = spreadsheet.intermediate_output_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.374887113066478,r[:number])
end

def test_intermediate_output_p8
  r = spreadsheet.intermediate_output_p8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.894486251116774,r[:number])
end

def test_intermediate_output_q8
  r = spreadsheet.intermediate_output_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.422595081474668,r[:number])
end

def test_intermediate_output_c9
  r = spreadsheet.intermediate_output_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d9
  r = spreadsheet.intermediate_output_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f9
  r = spreadsheet.intermediate_output_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.73469387755102,r[:number])
end

def test_intermediate_output_h9
  r = spreadsheet.intermediate_output_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.019834608709552,r[:number])
end

def test_intermediate_output_i9
  r = spreadsheet.intermediate_output_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.551097329516901,r[:number])
end

def test_intermediate_output_j9
  r = spreadsheet.intermediate_output_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.163716423089292,r[:number])
end

def test_intermediate_output_k9
  r = spreadsheet.intermediate_output_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.078742052970153,r[:number])
end

def test_intermediate_output_l9
  r = spreadsheet.intermediate_output_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.927979753386868,r[:number])
end

def test_intermediate_output_m9
  r = spreadsheet.intermediate_output_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.657847240047854,r[:number])
end

def test_intermediate_output_n9
  r = spreadsheet.intermediate_output_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.331077116581312,r[:number])
end

def test_intermediate_output_o9
  r = spreadsheet.intermediate_output_o9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.860251279239513,r[:number])
end

def test_intermediate_output_p9
  r = spreadsheet.intermediate_output_p9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.344409418627478,r[:number])
end

def test_intermediate_output_q9
  r = spreadsheet.intermediate_output_q9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.785449092646568,r[:number])
end

def test_intermediate_output_c10
  r = spreadsheet.intermediate_output_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d10
  r = spreadsheet.intermediate_output_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f10
  r = spreadsheet.intermediate_output_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.81937240536579,r[:number])
end

def test_intermediate_output_h10
  r = spreadsheet.intermediate_output_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.817339999999998,r[:number])
end

def test_intermediate_output_i10
  r = spreadsheet.intermediate_output_i10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.572895707388618,r[:number])
end

def test_intermediate_output_j10
  r = spreadsheet.intermediate_output_j10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.383064556311584,r[:number])
end

def test_intermediate_output_k10
  r = spreadsheet.intermediate_output_k10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.58984378892685,r[:number])
end

def test_intermediate_output_l10
  r = spreadsheet.intermediate_output_l10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.99670495670838,r[:number])
end

def test_intermediate_output_m10
  r = spreadsheet.intermediate_output_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.688791719453825,r[:number])
end

def test_intermediate_output_n10
  r = spreadsheet.intermediate_output_n10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.384829464713203,r[:number])
end

def test_intermediate_output_o10
  r = spreadsheet.intermediate_output_o10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.084767495533725,r[:number])
end

def test_intermediate_output_p10
  r = spreadsheet.intermediate_output_p10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.788555765479813,r[:number])
end

def test_intermediate_output_q10
  r = spreadsheet.intermediate_output_q10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number])
end

def test_intermediate_output_c11
  r = spreadsheet.intermediate_output_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d11
  r = spreadsheet.intermediate_output_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f11
  r = spreadsheet.intermediate_output_f11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.99167541479133,r[:number])
end

def test_intermediate_output_h11
  r = spreadsheet.intermediate_output_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.8,r[:number])
end

def test_intermediate_output_i11
  r = spreadsheet.intermediate_output_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.0236041697801,r[:number])
end

def test_intermediate_output_j11
  r = spreadsheet.intermediate_output_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.92775040162394,r[:number])
end

def test_intermediate_output_k11
  r = spreadsheet.intermediate_output_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.72464692710642,r[:number])
end

def test_intermediate_output_l11
  r = spreadsheet.intermediate_output_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.5797951758127,r[:number])
end

def test_intermediate_output_m11
  r = spreadsheet.intermediate_output_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.72784123896676,r[:number])
end

def test_intermediate_output_n11
  r = spreadsheet.intermediate_output_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.58889075870331,r[:number])
end

def test_intermediate_output_o11
  r = spreadsheet.intermediate_output_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.9306323392334,r[:number])
end

def test_intermediate_output_p11
  r = spreadsheet.intermediate_output_p11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.4187558423291,r[:number])
end

def test_intermediate_output_q11
  r = spreadsheet.intermediate_output_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.58168305622323,r[:number])
end

def test_intermediate_output_c12
  r = spreadsheet.intermediate_output_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("T.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d12
  r = spreadsheet.intermediate_output_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f12
  r = spreadsheet.intermediate_output_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.222291428230907,r[:number])
end

def test_intermediate_output_h12
  r = spreadsheet.intermediate_output_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.1581570872572,r[:number])
end

def test_intermediate_output_i12
  r = spreadsheet.intermediate_output_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.28499215184298,r[:number])
end

def test_intermediate_output_j12
  r = spreadsheet.intermediate_output_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.90268134716652,r[:number])
end

def test_intermediate_output_k12
  r = spreadsheet.intermediate_output_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.07127280693672,r[:number])
end

def test_intermediate_output_l12
  r = spreadsheet.intermediate_output_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.70040745020478,r[:number])
end

def test_intermediate_output_m12
  r = spreadsheet.intermediate_output_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.17220349292045,r[:number])
end

def test_intermediate_output_n12
  r = spreadsheet.intermediate_output_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.57973547988082,r[:number])
end

def test_intermediate_output_o12
  r = spreadsheet.intermediate_output_o12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.02635832578606,r[:number])
end

def test_intermediate_output_p12
  r = spreadsheet.intermediate_output_p12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.62684281373198,r[:number])
end

def test_intermediate_output_q12
  r = spreadsheet.intermediate_output_q12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.50863651300597,r[:number])
end

def test_intermediate_output_d13
  r = spreadsheet.intermediate_output_d13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f13
  r = spreadsheet.intermediate_output_f13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(728.5205609631445,r[:number])
end

def test_intermediate_output_h13
  r = spreadsheet.intermediate_output_h13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(741.5018282774715,r[:number])
end

def test_intermediate_output_i13
  r = spreadsheet.intermediate_output_i13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(706.444106487651,r[:number])
end

def test_intermediate_output_j13
  r = spreadsheet.intermediate_output_j13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.6582914708018,r[:number])
end

def test_intermediate_output_k13
  r = spreadsheet.intermediate_output_k13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(706.8346190574152,r[:number])
end

def test_intermediate_output_l13
  r = spreadsheet.intermediate_output_l13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(692.2706378601315,r[:number])
end

def test_intermediate_output_m13
  r = spreadsheet.intermediate_output_m13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(672.6432254953352,r[:number])
end

def test_intermediate_output_n13
  r = spreadsheet.intermediate_output_n13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(688.6111431847137,r[:number])
end

def test_intermediate_output_o13
  r = spreadsheet.intermediate_output_o13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(695.4521838470998,r[:number])
end

def test_intermediate_output_p13
  r = spreadsheet.intermediate_output_p13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(704.6716263596342,r[:number])
end

def test_intermediate_output_q13
  r = spreadsheet.intermediate_output_q13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(705.6550995088315,r[:number])
end

def test_intermediate_output_c14
  r = spreadsheet.intermediate_output_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d14
  r = spreadsheet.intermediate_output_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f14
  r = spreadsheet.intermediate_output_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443.27401323896316,r[:number])
end

def test_intermediate_output_h14
  r = spreadsheet.intermediate_output_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.94967152772296,r[:number])
end

def test_intermediate_output_i14
  r = spreadsheet.intermediate_output_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(487.7606604183712,r[:number])
end

def test_intermediate_output_j14
  r = spreadsheet.intermediate_output_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(502.23474865528715,r[:number])
end

def test_intermediate_output_k14
  r = spreadsheet.intermediate_output_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(519.1330102384848,r[:number])
end

def test_intermediate_output_l14
  r = spreadsheet.intermediate_output_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.3781274633884,r[:number])
end

def test_intermediate_output_m14
  r = spreadsheet.intermediate_output_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(591.1091456382231,r[:number])
end

def test_intermediate_output_n14
  r = spreadsheet.intermediate_output_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(636.5814837378313,r[:number])
end

def test_intermediate_output_o14
  r = spreadsheet.intermediate_output_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(688.468540997063,r[:number])
end

def test_intermediate_output_p14
  r = spreadsheet.intermediate_output_p14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(747.149547454009,r[:number])
end

def test_intermediate_output_q14
  r = spreadsheet.intermediate_output_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(813.1263857252411,r[:number])
end

def test_intermediate_output_c15
  r = spreadsheet.intermediate_output_c15
  assert_equal(:ExcelString,r[:type])
  assert_equal("H.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d15
  r = spreadsheet.intermediate_output_d15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f15
  r = spreadsheet.intermediate_output_f15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(544.7437698912538,r[:number])
end

def test_intermediate_output_h15
  r = spreadsheet.intermediate_output_h15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498.4248385343926,r[:number])
end

def test_intermediate_output_i15
  r = spreadsheet.intermediate_output_i15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.979130446357,r[:number])
end

def test_intermediate_output_j15
  r = spreadsheet.intermediate_output_j15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557.2327171072865,r[:number])
end

def test_intermediate_output_k15
  r = spreadsheet.intermediate_output_k15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(592.1540031837183,r[:number])
end

def test_intermediate_output_l15
  r = spreadsheet.intermediate_output_l15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(626.0737077944508,r[:number])
end

def test_intermediate_output_m15
  r = spreadsheet.intermediate_output_m15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(658.8484009719804,r[:number])
end

def test_intermediate_output_n15
  r = spreadsheet.intermediate_output_n15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(679.2981555455384,r[:number])
end

def test_intermediate_output_o15
  r = spreadsheet.intermediate_output_o15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(701.2540469917918,r[:number])
end

def test_intermediate_output_p15
  r = spreadsheet.intermediate_output_p15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(725.2019420085337,r[:number])
end

def test_intermediate_output_q15
  r = spreadsheet.intermediate_output_q15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(751.5019494407732,r[:number])
end

def test_intermediate_output_c16
  r = spreadsheet.intermediate_output_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("L.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d16
  r = spreadsheet.intermediate_output_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f16
  r = spreadsheet.intermediate_output_f16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.9950104721941,r[:number])
end

def test_intermediate_output_h16
  r = spreadsheet.intermediate_output_h16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.36080205964583,r[:number])
end

def test_intermediate_output_i16
  r = spreadsheet.intermediate_output_i16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.42796936210306,r[:number])
end

def test_intermediate_output_j16
  r = spreadsheet.intermediate_output_j16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.64752039357137,r[:number])
end

def test_intermediate_output_k16
  r = spreadsheet.intermediate_output_k16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.83085939782245,r[:number])
end

def test_intermediate_output_l16
  r = spreadsheet.intermediate_output_l16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.81046011329818,r[:number])
end

def test_intermediate_output_m16
  r = spreadsheet.intermediate_output_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.5794282147545,r[:number])
end

def test_intermediate_output_n16
  r = spreadsheet.intermediate_output_n16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.1640768915426,r[:number])
end

def test_intermediate_output_o16
  r = spreadsheet.intermediate_output_o16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.8565997740406,r[:number])
end

def test_intermediate_output_p16
  r = spreadsheet.intermediate_output_p16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(207.7413021010397,r[:number])
end

def test_intermediate_output_q16
  r = spreadsheet.intermediate_output_q16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.82687278526893,r[:number])
end

def test_intermediate_output_c17
  r = spreadsheet.intermediate_output_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("F.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d17
  r = spreadsheet.intermediate_output_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Food consumption [UNUSED]",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f17
  r = spreadsheet.intermediate_output_f17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.09063200000001,r[:number])
end

def test_intermediate_output_h17
  r = spreadsheet.intermediate_output_h17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i17
  r = spreadsheet.intermediate_output_i17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j17
  r = spreadsheet.intermediate_output_j17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k17
  r = spreadsheet.intermediate_output_k17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l17
  r = spreadsheet.intermediate_output_l17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m17
  r = spreadsheet.intermediate_output_m17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n17
  r = spreadsheet.intermediate_output_n17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o17
  r = spreadsheet.intermediate_output_o17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p17
  r = spreadsheet.intermediate_output_p17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q17
  r = spreadsheet.intermediate_output_q17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d18
  r = spreadsheet.intermediate_output_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f18
  r = spreadsheet.intermediate_output_f18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1959.6239865655555,r[:number])
end

def test_intermediate_output_h18
  r = spreadsheet.intermediate_output_h18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1901.2371403992329,r[:number])
end

def test_intermediate_output_i18
  r = spreadsheet.intermediate_output_i18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1901.6118667144822,r[:number])
end

def test_intermediate_output_j18
  r = spreadsheet.intermediate_output_j18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1943.773277626947,r[:number])
end

def test_intermediate_output_k18
  r = spreadsheet.intermediate_output_k18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2003.9524918774407,r[:number])
end

def test_intermediate_output_l18
  r = spreadsheet.intermediate_output_l18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2060.532933231269,r[:number])
end

def test_intermediate_output_m18
  r = spreadsheet.intermediate_output_m18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.1802003202934,r[:number])
end

def test_intermediate_output_n18
  r = spreadsheet.intermediate_output_n18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2202.6548593596262,r[:number])
end

def test_intermediate_output_o18
  r = spreadsheet.intermediate_output_o18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2288.0313716099954,r[:number])
end

def test_intermediate_output_p18
  r = spreadsheet.intermediate_output_p18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2384.7644179232166,r[:number])
end

def test_intermediate_output_q18
  r = spreadsheet.intermediate_output_q18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2483.1103074601147,r[:number])
end

def test_intermediate_output_d20
  r = spreadsheet.intermediate_output_d20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy for charting uses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h20
  r = spreadsheet.intermediate_output_h20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(677.6552077902825,r[:number])
end

def test_intermediate_output_i20
  r = spreadsheet.intermediate_output_i20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(678.1095519101066,r[:number])
end

def test_intermediate_output_j20
  r = spreadsheet.intermediate_output_j20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(644.3756325635375,r[:number])
end

def test_intermediate_output_k20
  r = spreadsheet.intermediate_output_k20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(602.1350706150085,r[:number])
end

def test_intermediate_output_l20
  r = spreadsheet.intermediate_output_l20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(551.7635324795356,r[:number])
end

def test_intermediate_output_m20
  r = spreadsheet.intermediate_output_m20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(555.0105844645409,r[:number])
end

def test_intermediate_output_n20
  r = spreadsheet.intermediate_output_n20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587.3465026400995,r[:number])
end

def test_intermediate_output_o20
  r = spreadsheet.intermediate_output_o20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(637.3126016677243,r[:number])
end

def test_intermediate_output_p20
  r = spreadsheet.intermediate_output_p20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(687.0598602772516,r[:number])
end

def test_intermediate_output_q20
  r = spreadsheet.intermediate_output_q20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(723.9757293653779,r[:number])
end

def test_intermediate_output_c22
  r = spreadsheet.intermediate_output_c22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Source",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c23
  r = spreadsheet.intermediate_output_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("N.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d23
  r = spreadsheet.intermediate_output_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear fission",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f23
  r = spreadsheet.intermediate_output_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.24447683045062,r[:number])
end

def test_intermediate_output_h23
  r = spreadsheet.intermediate_output_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.91620313701554,r[:number])
end

def test_intermediate_output_i23
  r = spreadsheet.intermediate_output_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.70999999999998,r[:number])
end

def test_intermediate_output_j23
  r = spreadsheet.intermediate_output_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.9964,r[:number])
end

def test_intermediate_output_k23
  r = spreadsheet.intermediate_output_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.14080000000003,r[:number])
end

def test_intermediate_output_l23
  r = spreadsheet.intermediate_output_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_intermediate_output_m23
  r = spreadsheet.intermediate_output_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_intermediate_output_n23
  r = spreadsheet.intermediate_output_n23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o23
  r = spreadsheet.intermediate_output_o23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p23
  r = spreadsheet.intermediate_output_p23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q23
  r = spreadsheet.intermediate_output_q23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c24
  r = spreadsheet.intermediate_output_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d24
  r = spreadsheet.intermediate_output_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f24
  r = spreadsheet.intermediate_output_f24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5360591477000001,r[:number])
end

def test_intermediate_output_h24
  r = spreadsheet.intermediate_output_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_intermediate_output_i24
  r = spreadsheet.intermediate_output_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_intermediate_output_j24
  r = spreadsheet.intermediate_output_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_intermediate_output_k24
  r = spreadsheet.intermediate_output_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l24
  r = spreadsheet.intermediate_output_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m24
  r = spreadsheet.intermediate_output_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n24
  r = spreadsheet.intermediate_output_n24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o24
  r = spreadsheet.intermediate_output_o24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p24
  r = spreadsheet.intermediate_output_p24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q24
  r = spreadsheet.intermediate_output_q24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c25
  r = spreadsheet.intermediate_output_c25
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d25
  r = spreadsheet.intermediate_output_d25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f25
  r = spreadsheet.intermediate_output_f25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.978861884782586,r[:number])
end

def test_intermediate_output_h25
  r = spreadsheet.intermediate_output_h25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.962752417600001,r[:number])
end

def test_intermediate_output_i25
  r = spreadsheet.intermediate_output_i25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.440670099999998,r[:number])
end

def test_intermediate_output_j25
  r = spreadsheet.intermediate_output_j25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.3428701,r[:number])
end

def test_intermediate_output_k25
  r = spreadsheet.intermediate_output_k25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.35726511600001,r[:number])
end

def test_intermediate_output_l25
  r = spreadsheet.intermediate_output_l25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.69377964,r[:number])
end

def test_intermediate_output_m25
  r = spreadsheet.intermediate_output_m25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.16934531999999,r[:number])
end

def test_intermediate_output_n25
  r = spreadsheet.intermediate_output_n25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.302885319999994,r[:number])
end

def test_intermediate_output_o25
  r = spreadsheet.intermediate_output_o25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.209185319999996,r[:number])
end

def test_intermediate_output_p25
  r = spreadsheet.intermediate_output_p25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_q25
  r = spreadsheet.intermediate_output_q25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_c26
  r = spreadsheet.intermediate_output_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d26
  r = spreadsheet.intermediate_output_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f26
  r = spreadsheet.intermediate_output_f26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h26
  r = spreadsheet.intermediate_output_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i26
  r = spreadsheet.intermediate_output_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0050034246575342495,r[:number])
end

def test_intermediate_output_j26
  r = spreadsheet.intermediate_output_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.020013698630136998,r[:number])
end

def test_intermediate_output_k26
  r = spreadsheet.intermediate_output_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050034246575342486,r[:number])
end

def test_intermediate_output_l26
  r = spreadsheet.intermediate_output_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_intermediate_output_m26
  r = spreadsheet.intermediate_output_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_intermediate_output_n26
  r = spreadsheet.intermediate_output_n26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o26
  r = spreadsheet.intermediate_output_o26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p26
  r = spreadsheet.intermediate_output_p26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q26
  r = spreadsheet.intermediate_output_q26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c27
  r = spreadsheet.intermediate_output_c27
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d27
  r = spreadsheet.intermediate_output_d27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f27
  r = spreadsheet.intermediate_output_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h27
  r = spreadsheet.intermediate_output_h27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i27
  r = spreadsheet.intermediate_output_i27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j27
  r = spreadsheet.intermediate_output_j27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030020547945205484,r[:number])
end

def test_intermediate_output_k27
  r = spreadsheet.intermediate_output_k27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1584417808219177,r[:number])
end

def test_intermediate_output_l27
  r = spreadsheet.intermediate_output_l27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_intermediate_output_m27
  r = spreadsheet.intermediate_output_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_intermediate_output_n27
  r = spreadsheet.intermediate_output_n27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o27
  r = spreadsheet.intermediate_output_o27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p27
  r = spreadsheet.intermediate_output_p27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q27
  r = spreadsheet.intermediate_output_q27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c28
  r = spreadsheet.intermediate_output_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d28
  r = spreadsheet.intermediate_output_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f28
  r = spreadsheet.intermediate_output_f28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h28
  r = spreadsheet.intermediate_output_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i28
  r = spreadsheet.intermediate_output_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j28
  r = spreadsheet.intermediate_output_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k28
  r = spreadsheet.intermediate_output_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l28
  r = spreadsheet.intermediate_output_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m28
  r = spreadsheet.intermediate_output_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n28
  r = spreadsheet.intermediate_output_n28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o28
  r = spreadsheet.intermediate_output_o28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p28
  r = spreadsheet.intermediate_output_p28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q28
  r = spreadsheet.intermediate_output_q28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c29
  r = spreadsheet.intermediate_output_c29
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d29
  r = spreadsheet.intermediate_output_d29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f29
  r = spreadsheet.intermediate_output_f29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.088394340000001,r[:number])
end

def test_intermediate_output_h29
  r = spreadsheet.intermediate_output_h29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.114400994,r[:number])
end

def test_intermediate_output_i29
  r = spreadsheet.intermediate_output_i29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_j29
  r = spreadsheet.intermediate_output_j29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_k29
  r = spreadsheet.intermediate_output_k29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_l29
  r = spreadsheet.intermediate_output_l29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_m29
  r = spreadsheet.intermediate_output_m29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_n29
  r = spreadsheet.intermediate_output_n29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_o29
  r = spreadsheet.intermediate_output_o29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_p29
  r = spreadsheet.intermediate_output_p29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_q29
  r = spreadsheet.intermediate_output_q29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_c30
  r = spreadsheet.intermediate_output_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d30
  r = spreadsheet.intermediate_output_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f30
  r = spreadsheet.intermediate_output_f30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number])
end

def test_intermediate_output_h30
  r = spreadsheet.intermediate_output_h30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_i30
  r = spreadsheet.intermediate_output_i30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1368683772161603e-13,r[:number])
end

def test_intermediate_output_j30
  r = spreadsheet.intermediate_output_j30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k30
  r = spreadsheet.intermediate_output_k30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_l30
  r = spreadsheet.intermediate_output_l30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m30
  r = spreadsheet.intermediate_output_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n30
  r = spreadsheet.intermediate_output_n30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_o30
  r = spreadsheet.intermediate_output_o30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p30
  r = spreadsheet.intermediate_output_p30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q30
  r = spreadsheet.intermediate_output_q30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_intermediate_output_d31
  r = spreadsheet.intermediate_output_d31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Primary electricity, solar, marine, and net imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f31
  r = spreadsheet.intermediate_output_f31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.06231645293323,r[:number])
end

def test_intermediate_output_h31
  r = spreadsheet.intermediate_output_h31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.0103625886156,r[:number])
end

def test_intermediate_output_i31
  r = spreadsheet.intermediate_output_i31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.5134614906574,r[:number])
end

def test_intermediate_output_j31
  r = spreadsheet.intermediate_output_j31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.7056186854246,r[:number])
end

def test_intermediate_output_k31
  r = spreadsheet.intermediate_output_k31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.03626914339733,r[:number])
end

def test_intermediate_output_l31
  r = spreadsheet.intermediate_output_l31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.25829770849317,r[:number])
end

def test_intermediate_output_m31
  r = spreadsheet.intermediate_output_m31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.73386338849316,r[:number])
end

def test_intermediate_output_n31
  r = spreadsheet.intermediate_output_n31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.632613320000054,r[:number])
end

def test_intermediate_output_o31
  r = spreadsheet.intermediate_output_o31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.53891332,r[:number])
end

def test_intermediate_output_p31
  r = spreadsheet.intermediate_output_p31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4175633199999975,r[:number])
end

def test_intermediate_output_q31
  r = spreadsheet.intermediate_output_q31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.417563320000111,r[:number])
end

def test_intermediate_output_c32
  r = spreadsheet.intermediate_output_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.07",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d32
  r = spreadsheet.intermediate_output_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Environmental heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f32
  r = spreadsheet.intermediate_output_f32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h32
  r = spreadsheet.intermediate_output_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i32
  r = spreadsheet.intermediate_output_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j32
  r = spreadsheet.intermediate_output_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k32
  r = spreadsheet.intermediate_output_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l32
  r = spreadsheet.intermediate_output_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m32
  r = spreadsheet.intermediate_output_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n32
  r = spreadsheet.intermediate_output_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o32
  r = spreadsheet.intermediate_output_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p32
  r = spreadsheet.intermediate_output_p32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q32
  r = spreadsheet.intermediate_output_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c33
  r = spreadsheet.intermediate_output_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("W.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d33
  r = spreadsheet.intermediate_output_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f33
  r = spreadsheet.intermediate_output_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.240524277899516,r[:number])
end

def test_intermediate_output_h33
  r = spreadsheet.intermediate_output_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.917935479270405,r[:number])
end

def test_intermediate_output_i33
  r = spreadsheet.intermediate_output_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.11750073265528,r[:number])
end

def test_intermediate_output_j33
  r = spreadsheet.intermediate_output_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.840563165328334,r[:number])
end

def test_intermediate_output_k33
  r = spreadsheet.intermediate_output_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.3989743162897,r[:number])
end

def test_intermediate_output_l33
  r = spreadsheet.intermediate_output_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.83930476932433,r[:number])
end

def test_intermediate_output_m33
  r = spreadsheet.intermediate_output_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.80337543889678,r[:number])
end

def test_intermediate_output_n33
  r = spreadsheet.intermediate_output_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.23415591862761,r[:number])
end

def test_intermediate_output_o33
  r = spreadsheet.intermediate_output_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.9090127808891,r[:number])
end

def test_intermediate_output_p33
  r = spreadsheet.intermediate_output_p33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.83582735854061,r[:number])
end

def test_intermediate_output_q33
  r = spreadsheet.intermediate_output_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.01899457064886,r[:number])
end

def test_intermediate_output_c34
  r = spreadsheet.intermediate_output_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("A.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d34
  r = spreadsheet.intermediate_output_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f34
  r = spreadsheet.intermediate_output_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.005772267812624,r[:number])
end

def test_intermediate_output_h34
  r = spreadsheet.intermediate_output_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.881522222222221,r[:number])
end

def test_intermediate_output_i34
  r = spreadsheet.intermediate_output_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0279139524977032,r[:number])
end

def test_intermediate_output_j34
  r = spreadsheet.intermediate_output_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.692845238477029,r[:number])
end

def test_intermediate_output_k34
  r = spreadsheet.intermediate_output_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.402563081931533,r[:number])
end

def test_intermediate_output_l34
  r = spreadsheet.intermediate_output_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.158190817458818,r[:number])
end

def test_intermediate_output_m34
  r = spreadsheet.intermediate_output_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.96089275380401,r[:number])
end

def test_intermediate_output_n34
  r = spreadsheet.intermediate_output_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.811876531949348,r[:number])
end

def test_intermediate_output_o34
  r = spreadsheet.intermediate_output_o34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.712395650409537,r[:number])
end

def test_intermediate_output_p34
  r = spreadsheet.intermediate_output_p34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663752170256295,r[:number])
end

def test_intermediate_output_q34
  r = spreadsheet.intermediate_output_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.667299613344547,r[:number])
end

def test_intermediate_output_c35
  r = spreadsheet.intermediate_output_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d35
  r = spreadsheet.intermediate_output_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f35
  r = spreadsheet.intermediate_output_f35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.262503111111116,r[:number])
end

def test_intermediate_output_h35
  r = spreadsheet.intermediate_output_h35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.00072,r[:number])
end

def test_intermediate_output_i35
  r = spreadsheet.intermediate_output_i35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7216,r[:number])
end

def test_intermediate_output_j35
  r = spreadsheet.intermediate_output_j35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2564,r[:number])
end

def test_intermediate_output_k35
  r = spreadsheet.intermediate_output_k35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7912,r[:number])
end

def test_intermediate_output_l35
  r = spreadsheet.intermediate_output_l35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.326,r[:number])
end

def test_intermediate_output_m35
  r = spreadsheet.intermediate_output_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8608,r[:number])
end

def test_intermediate_output_n35
  r = spreadsheet.intermediate_output_n35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3956,r[:number])
end

def test_intermediate_output_o35
  r = spreadsheet.intermediate_output_o35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9304000000000001,r[:number])
end

def test_intermediate_output_p35
  r = spreadsheet.intermediate_output_p35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4652,r[:number])
end

def test_intermediate_output_q35
  r = spreadsheet.intermediate_output_q35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d36
  r = spreadsheet.intermediate_output_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture, waste, and biomatter imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f36
  r = spreadsheet.intermediate_output_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.50879965682326,r[:number])
end

def test_intermediate_output_h36
  r = spreadsheet.intermediate_output_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.80017770149263,r[:number])
end

def test_intermediate_output_i36
  r = spreadsheet.intermediate_output_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.86701468515299,r[:number])
end

def test_intermediate_output_j36
  r = spreadsheet.intermediate_output_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.78980840380536,r[:number])
end

def test_intermediate_output_k36
  r = spreadsheet.intermediate_output_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.59273739822123,r[:number])
end

def test_intermediate_output_l36
  r = spreadsheet.intermediate_output_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.32349558678314,r[:number])
end

def test_intermediate_output_m36
  r = spreadsheet.intermediate_output_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.6250681927008,r[:number])
end

def test_intermediate_output_n36
  r = spreadsheet.intermediate_output_n36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.44163245057696,r[:number])
end

def test_intermediate_output_o36
  r = spreadsheet.intermediate_output_o36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.55180843129864,r[:number])
end

def test_intermediate_output_p36
  r = spreadsheet.intermediate_output_p36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.96477952879691,r[:number])
end

def test_intermediate_output_q36
  r = spreadsheet.intermediate_output_q36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.6862941839934,r[:number])
end

def test_intermediate_output_c37
  r = spreadsheet.intermediate_output_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d37
  r = spreadsheet.intermediate_output_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f37
  r = spreadsheet.intermediate_output_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.602732356217,r[:number])
end

def test_intermediate_output_h37
  r = spreadsheet.intermediate_output_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.59158236078616,r[:number])
end

def test_intermediate_output_i37
  r = spreadsheet.intermediate_output_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.7879707863396,r[:number])
end

def test_intermediate_output_j37
  r = spreadsheet.intermediate_output_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.36321857088853,r[:number])
end

def test_intermediate_output_k37
  r = spreadsheet.intermediate_output_k37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.2161187019778,r[:number])
end

def test_intermediate_output_l37
  r = spreadsheet.intermediate_output_l37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.82581145406314,r[:number])
end

def test_intermediate_output_m37
  r = spreadsheet.intermediate_output_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.20638476620721,r[:number])
end

def test_intermediate_output_n37
  r = spreadsheet.intermediate_output_n37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.108428227236942,r[:number])
end

def test_intermediate_output_o37
  r = spreadsheet.intermediate_output_o37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.865993134684118,r[:number])
end

def test_intermediate_output_p37
  r = spreadsheet.intermediate_output_p37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.79703902923795,r[:number])
end

def test_intermediate_output_q37
  r = spreadsheet.intermediate_output_q37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3768044831494,r[:number])
end

def test_intermediate_output_c38
  r = spreadsheet.intermediate_output_c38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Q.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d38
  r = spreadsheet.intermediate_output_d38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f38
  r = spreadsheet.intermediate_output_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.79944495555736,r[:number])
end

def test_intermediate_output_h38
  r = spreadsheet.intermediate_output_h38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.3957013942179,r[:number])
end

def test_intermediate_output_i38
  r = spreadsheet.intermediate_output_i38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_intermediate_output_j38
  r = spreadsheet.intermediate_output_j38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_intermediate_output_k38
  r = spreadsheet.intermediate_output_k38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_intermediate_output_l38
  r = spreadsheet.intermediate_output_l38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_intermediate_output_m38
  r = spreadsheet.intermediate_output_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_n38
  r = spreadsheet.intermediate_output_n38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_o38
  r = spreadsheet.intermediate_output_o38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_p38
  r = spreadsheet.intermediate_output_p38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_q38
  r = spreadsheet.intermediate_output_q38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_d39
  r = spreadsheet.intermediate_output_d39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f39
  r = spreadsheet.intermediate_output_f39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.4021773117744,r[:number])
end

def test_intermediate_output_h39
  r = spreadsheet.intermediate_output_h39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.98728375500406,r[:number])
end

def test_intermediate_output_i39
  r = spreadsheet.intermediate_output_i39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477.7179707863396,r[:number])
end

def test_intermediate_output_j39
  r = spreadsheet.intermediate_output_j39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.29321857088854,r[:number])
end

def test_intermediate_output_k39
  r = spreadsheet.intermediate_output_k39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.1461187019778,r[:number])
end

def test_intermediate_output_l39
  r = spreadsheet.intermediate_output_l39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.75581145406315,r[:number])
end

def test_intermediate_output_m39
  r = spreadsheet.intermediate_output_m39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17138476620721,r[:number])
end

def test_intermediate_output_n39
  r = spreadsheet.intermediate_output_n39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.07342822723695,r[:number])
end

def test_intermediate_output_o39
  r = spreadsheet.intermediate_output_o39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.83099313468412,r[:number])
end

def test_intermediate_output_p39
  r = spreadsheet.intermediate_output_p39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.76203902923795,r[:number])
end

def test_intermediate_output_q39
  r = spreadsheet.intermediate_output_q39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_intermediate_output_c40
  r = spreadsheet.intermediate_output_c40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Q.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d40
  r = spreadsheet.intermediate_output_d40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f40
  r = spreadsheet.intermediate_output_f40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(887.460075730032,r[:number])
end

def test_intermediate_output_h40
  r = spreadsheet.intermediate_output_h40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number])
end

def test_intermediate_output_i40
  r = spreadsheet.intermediate_output_i40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.547952837212,r[:number])
end

def test_intermediate_output_j40
  r = spreadsheet.intermediate_output_j40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.8288435333163,r[:number])
end

def test_intermediate_output_k40
  r = spreadsheet.intermediate_output_k40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.7889500727494,r[:number])
end

def test_intermediate_output_l40
  r = spreadsheet.intermediate_output_l40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.27472421443264,r[:number])
end

def test_intermediate_output_m40
  r = spreadsheet.intermediate_output_m40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.43958011019754,r[:number])
end

def test_intermediate_output_n40
  r = spreadsheet.intermediate_output_n40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.47441995977493,r[:number])
end

def test_intermediate_output_o40
  r = spreadsheet.intermediate_output_o40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88427462124332,r[:number])
end

def test_intermediate_output_p40
  r = spreadsheet.intermediate_output_p40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19102265793308,r[:number])
end

def test_intermediate_output_q40
  r = spreadsheet.intermediate_output_q40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_intermediate_output_c41
  r = spreadsheet.intermediate_output_c41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d41
  r = spreadsheet.intermediate_output_d41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil and petroleum products oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f41
  r = spreadsheet.intermediate_output_f41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.74397690520158,r[:number])
end

def test_intermediate_output_h41
  r = spreadsheet.intermediate_output_h41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-74.88229852333984,r[:number])
end

def test_intermediate_output_i41
  r = spreadsheet.intermediate_output_i41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.64315527619635,r[:number])
end

def test_intermediate_output_j41
  r = spreadsheet.intermediate_output_j41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.35818004652242,r[:number])
end

def test_intermediate_output_k41
  r = spreadsheet.intermediate_output_k41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(357.8050142717038,r[:number])
end

def test_intermediate_output_l41
  r = spreadsheet.intermediate_output_l41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.52363182891844,r[:number])
end

def test_intermediate_output_m41
  r = spreadsheet.intermediate_output_m41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(528.050159297357,r[:number])
end

def test_intermediate_output_n41
  r = spreadsheet.intermediate_output_n41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.947899051517,r[:number])
end

def test_intermediate_output_o41
  r = spreadsheet.intermediate_output_o41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(678.4226005986385,r[:number])
end

def test_intermediate_output_p41
  r = spreadsheet.intermediate_output_p41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(733.6856489742773,r[:number])
end

def test_intermediate_output_q41
  r = spreadsheet.intermediate_output_q41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(772.3784493415866,r[:number])
end

def test_intermediate_output_c42
  r = spreadsheet.intermediate_output_c42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d42
  r = spreadsheet.intermediate_output_d42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum products oversupply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f42
  r = spreadsheet.intermediate_output_f42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-60.58105389631571,r[:number])
end

def test_intermediate_output_h42
  r = spreadsheet.intermediate_output_h42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i42
  r = spreadsheet.intermediate_output_i42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j42
  r = spreadsheet.intermediate_output_j42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k42
  r = spreadsheet.intermediate_output_k42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l42
  r = spreadsheet.intermediate_output_l42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m42
  r = spreadsheet.intermediate_output_m42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n42
  r = spreadsheet.intermediate_output_n42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o42
  r = spreadsheet.intermediate_output_o42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p42
  r = spreadsheet.intermediate_output_p42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q42
  r = spreadsheet.intermediate_output_q42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d43
  r = spreadsheet.intermediate_output_d43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil and petroleum products",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f43
  r = spreadsheet.intermediate_output_f43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.622998738918,r[:number])
end

def test_intermediate_output_h43
  r = spreadsheet.intermediate_output_h43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.0089098264583,r[:number])
end

def test_intermediate_output_i43
  r = spreadsheet.intermediate_output_i43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.1911081134084,r[:number])
end

def test_intermediate_output_j43
  r = spreadsheet.intermediate_output_j43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(855.1870235798388,r[:number])
end

def test_intermediate_output_k43
  r = spreadsheet.intermediate_output_k43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(859.5939643444532,r[:number])
end

def test_intermediate_output_l43
  r = spreadsheet.intermediate_output_l43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.7983560433511,r[:number])
end

def test_intermediate_output_m43
  r = spreadsheet.intermediate_output_m43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(828.4897394075546,r[:number])
end

def test_intermediate_output_n43
  r = spreadsheet.intermediate_output_n43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(847.4223190112918,r[:number])
end

def test_intermediate_output_o43
  r = spreadsheet.intermediate_output_o43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(858.3068752198818,r[:number])
end

def test_intermediate_output_p43
  r = spreadsheet.intermediate_output_p43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(872.8766716322104,r[:number])
end

def test_intermediate_output_q43
  r = spreadsheet.intermediate_output_q43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_intermediate_output_c44
  r = spreadsheet.intermediate_output_c44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d44
  r = spreadsheet.intermediate_output_d44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f44
  r = spreadsheet.intermediate_output_f44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.86865308275657,r[:number])
end

def test_intermediate_output_h44
  r = spreadsheet.intermediate_output_h44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.08561431794476,r[:number])
end

def test_intermediate_output_i44
  r = spreadsheet.intermediate_output_i44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.65896766491574,r[:number])
end

def test_intermediate_output_j44
  r = spreadsheet.intermediate_output_j44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(584.2856578271776,r[:number])
end

def test_intermediate_output_k44
  r = spreadsheet.intermediate_output_k44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(819.5978269658395,r[:number])
end

def test_intermediate_output_l44
  r = spreadsheet.intermediate_output_l44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.7090523281695,r[:number])
end

def test_intermediate_output_m44
  r = spreadsheet.intermediate_output_m44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1345.7822461215947,r[:number])
end

def test_intermediate_output_n44
  r = spreadsheet.intermediate_output_n44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1550.9349336341452,r[:number])
end

def test_intermediate_output_o44
  r = spreadsheet.intermediate_output_o44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1723.772025018814,r[:number])
end

def test_intermediate_output_p44
  r = spreadsheet.intermediate_output_p44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1892.5295522591648,r[:number])
end

def test_intermediate_output_q44
  r = spreadsheet.intermediate_output_q44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.3260236076515,r[:number])
end

def test_intermediate_output_c45
  r = spreadsheet.intermediate_output_c45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Q.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d45
  r = spreadsheet.intermediate_output_d45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f45
  r = spreadsheet.intermediate_output_f45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(834.0611502141918,r[:number])
end

def test_intermediate_output_h45
  r = spreadsheet.intermediate_output_h45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.0,r[:number])
end

def test_intermediate_output_i45
  r = spreadsheet.intermediate_output_i45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7728958841146,r[:number])
end

def test_intermediate_output_j45
  r = spreadsheet.intermediate_output_j45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.88758312334966,r[:number])
end

def test_intermediate_output_k45
  r = spreadsheet.intermediate_output_k45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.12064593855996,r[:number])
end

def test_intermediate_output_l45
  r = spreadsheet.intermediate_output_l45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.45145258994444,r[:number])
end

def test_intermediate_output_m45
  r = spreadsheet.intermediate_output_m45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.38848290828395,r[:number])
end

def test_intermediate_output_n45
  r = spreadsheet.intermediate_output_n45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.49643535647462,r[:number])
end

def test_intermediate_output_o45
  r = spreadsheet.intermediate_output_o45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.343358153041,r[:number])
end

def test_intermediate_output_p45
  r = spreadsheet.intermediate_output_p45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.27367243105833,r[:number])
end

def test_intermediate_output_q45
  r = spreadsheet.intermediate_output_q45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_intermediate_output_d46
  r = spreadsheet.intermediate_output_d46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f46
  r = spreadsheet.intermediate_output_f46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1048.9298032969484,r[:number])
end

def test_intermediate_output_h46
  r = spreadsheet.intermediate_output_h46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(978.0856143179448,r[:number])
end

def test_intermediate_output_i46
  r = spreadsheet.intermediate_output_i46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1001.4318635490304,r[:number])
end

def test_intermediate_output_j46
  r = spreadsheet.intermediate_output_j46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080.1732409505273,r[:number])
end

def test_intermediate_output_k46
  r = spreadsheet.intermediate_output_k46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1202.7184729043995,r[:number])
end

def test_intermediate_output_l46
  r = spreadsheet.intermediate_output_l46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1389.160504918114,r[:number])
end

def test_intermediate_output_m46
  r = spreadsheet.intermediate_output_m46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1575.1707290298787,r[:number])
end

def test_intermediate_output_n46
  r = spreadsheet.intermediate_output_n46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.4313689906198,r[:number])
end

def test_intermediate_output_o46
  r = spreadsheet.intermediate_output_o46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1861.115383171855,r[:number])
end

def test_intermediate_output_p46
  r = spreadsheet.intermediate_output_p46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1998.803224690223,r[:number])
end

def test_intermediate_output_q46
  r = spreadsheet.intermediate_output_q46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_intermediate_output_d47
  r = spreadsheet.intermediate_output_d47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Primary Supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f47
  r = spreadsheet.intermediate_output_f47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2710.526095457397,r[:number])
end

def test_intermediate_output_h47
  r = spreadsheet.intermediate_output_h47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2578.8923481895154,r[:number])
end

def test_intermediate_output_i47
  r = spreadsheet.intermediate_output_i47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2579.7214186245888,r[:number])
end

def test_intermediate_output_j47
  r = spreadsheet.intermediate_output_j47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2588.1489101904845,r[:number])
end

def test_intermediate_output_k47
  r = spreadsheet.intermediate_output_k47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2606.0875624924493,r[:number])
end

def test_intermediate_output_l47
  r = spreadsheet.intermediate_output_l47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2612.2964657108046,r[:number])
end

def test_intermediate_output_m47
  r = spreadsheet.intermediate_output_m47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2671.1907847848342,r[:number])
end

def test_intermediate_output_n47
  r = spreadsheet.intermediate_output_n47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2790.0013619997258,r[:number])
end

def test_intermediate_output_o47
  r = spreadsheet.intermediate_output_o47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.3439732777197,r[:number])
end

def test_intermediate_output_p47
  r = spreadsheet.intermediate_output_p47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3071.824278200468,r[:number])
end

def test_intermediate_output_q47
  r = spreadsheet.intermediate_output_q47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3207.0860368254926,r[:number])
end

def test_intermediate_output_d49
  r = spreadsheet.intermediate_output_d49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy for charting supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h49
  r = spreadsheet.intermediate_output_h49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i49
  r = spreadsheet.intermediate_output_i49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j49
  r = spreadsheet.intermediate_output_j49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k49
  r = spreadsheet.intermediate_output_k49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l49
  r = spreadsheet.intermediate_output_l49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m49
  r = spreadsheet.intermediate_output_m49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n49
  r = spreadsheet.intermediate_output_n49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o49
  r = spreadsheet.intermediate_output_o49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p49
  r = spreadsheet.intermediate_output_p49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q49
  r = spreadsheet.intermediate_output_q49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c51
  r = spreadsheet.intermediate_output_c51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conversion losses, distribution, and own use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c52
  r = spreadsheet.intermediate_output_c52
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d52
  r = spreadsheet.intermediate_output_d52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conversion losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f52
  r = spreadsheet.intermediate_output_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561.4193024884444,r[:number])
end

def test_intermediate_output_h52
  r = spreadsheet.intermediate_output_h52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(556.1887122447632,r[:number])
end

def test_intermediate_output_i52
  r = spreadsheet.intermediate_output_i52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(560.8881073341678,r[:number])
end

def test_intermediate_output_j52
  r = spreadsheet.intermediate_output_j52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.3973301231902,r[:number])
end

def test_intermediate_output_k52
  r = spreadsheet.intermediate_output_k52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.5311776027561,r[:number])
end

def test_intermediate_output_l52
  r = spreadsheet.intermediate_output_l52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(440.2046781681558,r[:number])
end

def test_intermediate_output_m52
  r = spreadsheet.intermediate_output_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.91042038654575,r[:number])
end

def test_intermediate_output_n52
  r = spreadsheet.intermediate_output_n52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.104863879208,r[:number])
end

def test_intermediate_output_o52
  r = spreadsheet.intermediate_output_o52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(518.8164147321908,r[:number])
end

def test_intermediate_output_p52
  r = spreadsheet.intermediate_output_p52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(564.8907139368554,r[:number])
end

def test_intermediate_output_q52
  r = spreadsheet.intermediate_output_q52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(598.2337162439092,r[:number])
end

def test_intermediate_output_c53
  r = spreadsheet.intermediate_output_c53
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d53
  r = spreadsheet.intermediate_output_d53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distribution losses and own use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f53
  r = spreadsheet.intermediate_output_f53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.94703532055274,r[:number])
end

def test_intermediate_output_h53
  r = spreadsheet.intermediate_output_h53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.466495545519,r[:number])
end

def test_intermediate_output_i53
  r = spreadsheet.intermediate_output_i53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.2214445759387,r[:number])
end

def test_intermediate_output_j53
  r = spreadsheet.intermediate_output_j53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.97830244034738,r[:number])
end

def test_intermediate_output_k53
  r = spreadsheet.intermediate_output_k53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.60389301225256,r[:number])
end

def test_intermediate_output_l53
  r = spreadsheet.intermediate_output_l53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.55885431137969,r[:number])
end

def test_intermediate_output_m53
  r = spreadsheet.intermediate_output_m53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.10016407799569,r[:number])
end

def test_intermediate_output_n53
  r = spreadsheet.intermediate_output_n53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.24163876089172,r[:number])
end

def test_intermediate_output_o53
  r = spreadsheet.intermediate_output_o53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.49618693553369,r[:number])
end

def test_intermediate_output_p53
  r = spreadsheet.intermediate_output_p53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.1691463403966,r[:number])
end

def test_intermediate_output_q53
  r = spreadsheet.intermediate_output_q53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.74201312146774,r[:number])
end

def test_intermediate_output_d54
  r = spreadsheet.intermediate_output_d54
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply net of losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f54
  r = spreadsheet.intermediate_output_f54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1962.1597576483998,r[:number])
end

def test_intermediate_output_h54
  r = spreadsheet.intermediate_output_h54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1901.237140399233,r[:number])
end

def test_intermediate_output_i54
  r = spreadsheet.intermediate_output_i54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1901.6118667144824,r[:number])
end

def test_intermediate_output_j54
  r = spreadsheet.intermediate_output_j54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1943.7732776269468,r[:number])
end

def test_intermediate_output_k54
  r = spreadsheet.intermediate_output_k54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2003.9524918774405,r[:number])
end

def test_intermediate_output_l54
  r = spreadsheet.intermediate_output_l54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2060.532933231269,r[:number])
end

def test_intermediate_output_m54
  r = spreadsheet.intermediate_output_m54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.180200320293,r[:number])
end

def test_intermediate_output_n54
  r = spreadsheet.intermediate_output_n54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2202.6548593596262,r[:number])
end

def test_intermediate_output_o54
  r = spreadsheet.intermediate_output_o54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2288.0313716099954,r[:number])
end

def test_intermediate_output_p54
  r = spreadsheet.intermediate_output_p54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2384.764417923216,r[:number])
end

def test_intermediate_output_q54
  r = spreadsheet.intermediate_output_q54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2483.1103074601156,r[:number])
end

def test_intermediate_output_c56
  r = spreadsheet.intermediate_output_c56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply / demand not accounted for",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c58
  r = spreadsheet.intermediate_output_c58
  assert_equal(:ExcelString,r[:type])
  assert_equal("C.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d58
  r = spreadsheet.intermediate_output_d58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal and fossil waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f58
  r = spreadsheet.intermediate_output_f58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4668835385115244,r[:number])
end

def test_intermediate_output_h58
  r = spreadsheet.intermediate_output_h58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i58
  r = spreadsheet.intermediate_output_i58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j58
  r = spreadsheet.intermediate_output_j58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k58
  r = spreadsheet.intermediate_output_k58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l58
  r = spreadsheet.intermediate_output_l58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m58
  r = spreadsheet.intermediate_output_m58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n58
  r = spreadsheet.intermediate_output_n58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o58
  r = spreadsheet.intermediate_output_o58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p58
  r = spreadsheet.intermediate_output_p58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q58
  r = spreadsheet.intermediate_output_q58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c59
  r = spreadsheet.intermediate_output_c59
  assert_equal(:ExcelString,r[:type])
  assert_equal("C.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d59
  r = spreadsheet.intermediate_output_d59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil and petroleum products",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f59
  r = spreadsheet.intermediate_output_f59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.99412042466514,r[:number])
end

def test_intermediate_output_h59
  r = spreadsheet.intermediate_output_h59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i59
  r = spreadsheet.intermediate_output_i59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j59
  r = spreadsheet.intermediate_output_j59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k59
  r = spreadsheet.intermediate_output_k59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l59
  r = spreadsheet.intermediate_output_l59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m59
  r = spreadsheet.intermediate_output_m59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n59
  r = spreadsheet.intermediate_output_n59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o59
  r = spreadsheet.intermediate_output_o59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p59
  r = spreadsheet.intermediate_output_p59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q59
  r = spreadsheet.intermediate_output_q59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c60
  r = spreadsheet.intermediate_output_c60
  assert_equal(:ExcelString,r[:type])
  assert_equal("C.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d60
  r = spreadsheet.intermediate_output_d60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f60
  r = spreadsheet.intermediate_output_f60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.228142999999932,r[:number])
end

def test_intermediate_output_h60
  r = spreadsheet.intermediate_output_h60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i60
  r = spreadsheet.intermediate_output_i60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j60
  r = spreadsheet.intermediate_output_j60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k60
  r = spreadsheet.intermediate_output_k60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l60
  r = spreadsheet.intermediate_output_l60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m60
  r = spreadsheet.intermediate_output_m60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n60
  r = spreadsheet.intermediate_output_n60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o60
  r = spreadsheet.intermediate_output_o60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p60
  r = spreadsheet.intermediate_output_p60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q60
  r = spreadsheet.intermediate_output_q60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c61
  r = spreadsheet.intermediate_output_c61
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d61
  r = spreadsheet.intermediate_output_d61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f61
  r = spreadsheet.intermediate_output_f61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h61
  r = spreadsheet.intermediate_output_h61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i61
  r = spreadsheet.intermediate_output_i61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j61
  r = spreadsheet.intermediate_output_j61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k61
  r = spreadsheet.intermediate_output_k61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l61
  r = spreadsheet.intermediate_output_l61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m61
  r = spreadsheet.intermediate_output_m61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n61
  r = spreadsheet.intermediate_output_n61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o61
  r = spreadsheet.intermediate_output_o61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p61
  r = spreadsheet.intermediate_output_p61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q61
  r = spreadsheet.intermediate_output_q61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c62
  r = spreadsheet.intermediate_output_c62
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d62
  r = spreadsheet.intermediate_output_d62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f62
  r = spreadsheet.intermediate_output_f62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-40.98525046434433,r[:number])
end

def test_intermediate_output_h62
  r = spreadsheet.intermediate_output_h62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i62
  r = spreadsheet.intermediate_output_i62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j62
  r = spreadsheet.intermediate_output_j62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k62
  r = spreadsheet.intermediate_output_k62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l62
  r = spreadsheet.intermediate_output_l62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m62
  r = spreadsheet.intermediate_output_m62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n62
  r = spreadsheet.intermediate_output_n62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o62
  r = spreadsheet.intermediate_output_o62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p62
  r = spreadsheet.intermediate_output_p62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q62
  r = spreadsheet.intermediate_output_q62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c63
  r = spreadsheet.intermediate_output_c63
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d63
  r = spreadsheet.intermediate_output_d63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f63
  r = spreadsheet.intermediate_output_f63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.047768550745332,r[:number])
end

def test_intermediate_output_h63
  r = spreadsheet.intermediate_output_h63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i63
  r = spreadsheet.intermediate_output_i63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j63
  r = spreadsheet.intermediate_output_j63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k63
  r = spreadsheet.intermediate_output_k63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l63
  r = spreadsheet.intermediate_output_l63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m63
  r = spreadsheet.intermediate_output_m63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n63
  r = spreadsheet.intermediate_output_n63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o63
  r = spreadsheet.intermediate_output_o63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p63
  r = spreadsheet.intermediate_output_p63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q63
  r = spreadsheet.intermediate_output_q63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c64
  r = spreadsheet.intermediate_output_c64
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d64
  r = spreadsheet.intermediate_output_d64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Blast furnace gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f64
  r = spreadsheet.intermediate_output_f64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.11045622230000071,r[:number])
end

def test_intermediate_output_h64
  r = spreadsheet.intermediate_output_h64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i64
  r = spreadsheet.intermediate_output_i64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j64
  r = spreadsheet.intermediate_output_j64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k64
  r = spreadsheet.intermediate_output_k64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l64
  r = spreadsheet.intermediate_output_l64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m64
  r = spreadsheet.intermediate_output_m64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n64
  r = spreadsheet.intermediate_output_n64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o64
  r = spreadsheet.intermediate_output_o64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p64
  r = spreadsheet.intermediate_output_p64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q64
  r = spreadsheet.intermediate_output_q64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c65
  r = spreadsheet.intermediate_output_c65
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.08",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d65
  r = spreadsheet.intermediate_output_d65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Edible biomass",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f65
  r = spreadsheet.intermediate_output_f65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h65
  r = spreadsheet.intermediate_output_h65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i65
  r = spreadsheet.intermediate_output_i65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j65
  r = spreadsheet.intermediate_output_j65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k65
  r = spreadsheet.intermediate_output_k65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l65
  r = spreadsheet.intermediate_output_l65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m65
  r = spreadsheet.intermediate_output_m65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n65
  r = spreadsheet.intermediate_output_n65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o65
  r = spreadsheet.intermediate_output_o65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p65
  r = spreadsheet.intermediate_output_p65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q65
  r = spreadsheet.intermediate_output_q65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c66
  r = spreadsheet.intermediate_output_c66
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.07",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d66
  r = spreadsheet.intermediate_output_d66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heat transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f66
  r = spreadsheet.intermediate_output_f66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0029616599999983118,r[:number])
end

def test_intermediate_output_h66
  r = spreadsheet.intermediate_output_h66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i66
  r = spreadsheet.intermediate_output_i66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j66
  r = spreadsheet.intermediate_output_j66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k66
  r = spreadsheet.intermediate_output_k66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l66
  r = spreadsheet.intermediate_output_l66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m66
  r = spreadsheet.intermediate_output_m66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n66
  r = spreadsheet.intermediate_output_n66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o66
  r = spreadsheet.intermediate_output_o66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p66
  r = spreadsheet.intermediate_output_p66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q66
  r = spreadsheet.intermediate_output_q66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c67
  r = spreadsheet.intermediate_output_c67
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.09",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d67
  r = spreadsheet.intermediate_output_d67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dry biomass and waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f67
  r = spreadsheet.intermediate_output_f67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.3409880345172063,r[:number])
end

def test_intermediate_output_h67
  r = spreadsheet.intermediate_output_h67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i67
  r = spreadsheet.intermediate_output_i67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j67
  r = spreadsheet.intermediate_output_j67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k67
  r = spreadsheet.intermediate_output_k67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l67
  r = spreadsheet.intermediate_output_l67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m67
  r = spreadsheet.intermediate_output_m67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n67
  r = spreadsheet.intermediate_output_n67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o67
  r = spreadsheet.intermediate_output_o67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p67
  r = spreadsheet.intermediate_output_p67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q67
  r = spreadsheet.intermediate_output_q67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c68
  r = spreadsheet.intermediate_output_c68
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.10",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d68
  r = spreadsheet.intermediate_output_d68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wet biomass and waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f68
  r = spreadsheet.intermediate_output_f68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h68
  r = spreadsheet.intermediate_output_h68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i68
  r = spreadsheet.intermediate_output_i68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j68
  r = spreadsheet.intermediate_output_j68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k68
  r = spreadsheet.intermediate_output_k68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l68
  r = spreadsheet.intermediate_output_l68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m68
  r = spreadsheet.intermediate_output_m68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n68
  r = spreadsheet.intermediate_output_n68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o68
  r = spreadsheet.intermediate_output_o68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p68
  r = spreadsheet.intermediate_output_p68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q68
  r = spreadsheet.intermediate_output_q68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c69
  r = spreadsheet.intermediate_output_c69
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.11",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d69
  r = spreadsheet.intermediate_output_d69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic solar thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f69
  r = spreadsheet.intermediate_output_f69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h69
  r = spreadsheet.intermediate_output_h69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i69
  r = spreadsheet.intermediate_output_i69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j69
  r = spreadsheet.intermediate_output_j69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k69
  r = spreadsheet.intermediate_output_k69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l69
  r = spreadsheet.intermediate_output_l69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m69
  r = spreadsheet.intermediate_output_m69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n69
  r = spreadsheet.intermediate_output_n69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o69
  r = spreadsheet.intermediate_output_o69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p69
  r = spreadsheet.intermediate_output_p69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q69
  r = spreadsheet.intermediate_output_q69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c70
  r = spreadsheet.intermediate_output_c70
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.12",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d70
  r = spreadsheet.intermediate_output_d70
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f70
  r = spreadsheet.intermediate_output_f70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h70
  r = spreadsheet.intermediate_output_h70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i70
  r = spreadsheet.intermediate_output_i70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j70
  r = spreadsheet.intermediate_output_j70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k70
  r = spreadsheet.intermediate_output_k70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l70
  r = spreadsheet.intermediate_output_l70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m70
  r = spreadsheet.intermediate_output_m70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n70
  r = spreadsheet.intermediate_output_n70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o70
  r = spreadsheet.intermediate_output_o70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p70
  r = spreadsheet.intermediate_output_p70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q70
  r = spreadsheet.intermediate_output_q70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c71
  r = spreadsheet.intermediate_output_c71
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.13",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d71
  r = spreadsheet.intermediate_output_d71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy crops (second generation)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f71
  r = spreadsheet.intermediate_output_f71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h71
  r = spreadsheet.intermediate_output_h71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i71
  r = spreadsheet.intermediate_output_i71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j71
  r = spreadsheet.intermediate_output_j71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k71
  r = spreadsheet.intermediate_output_k71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l71
  r = spreadsheet.intermediate_output_l71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m71
  r = spreadsheet.intermediate_output_m71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n71
  r = spreadsheet.intermediate_output_n71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o71
  r = spreadsheet.intermediate_output_o71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p71
  r = spreadsheet.intermediate_output_p71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q71
  r = spreadsheet.intermediate_output_q71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d72
  r = spreadsheet.intermediate_output_d72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total unnaccounted supply / demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f72
  r = spreadsheet.intermediate_output_f72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.15310354723947603,r[:number])
end

def test_intermediate_output_h72
  r = spreadsheet.intermediate_output_h72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i72
  r = spreadsheet.intermediate_output_i72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j72
  r = spreadsheet.intermediate_output_j72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k72
  r = spreadsheet.intermediate_output_k72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l72
  r = spreadsheet.intermediate_output_l72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m72
  r = spreadsheet.intermediate_output_m72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n72
  r = spreadsheet.intermediate_output_n72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o72
  r = spreadsheet.intermediate_output_o72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p72
  r = spreadsheet.intermediate_output_p72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q72
  r = spreadsheet.intermediate_output_q72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d74
  r = spreadsheet.intermediate_output_d74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Supply, Demand, and Unaccounted supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f74
  r = spreadsheet.intermediate_output_f74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.688874630083825,r[:number])
end

def test_intermediate_output_h74
  r = spreadsheet.intermediate_output_h74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_i74
  r = spreadsheet.intermediate_output_i74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_j74
  r = spreadsheet.intermediate_output_j74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_k74
  r = spreadsheet.intermediate_output_k74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_l74
  r = spreadsheet.intermediate_output_l74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m74
  r = spreadsheet.intermediate_output_m74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.547473508864641e-13,r[:number])
end

def test_intermediate_output_n74
  r = spreadsheet.intermediate_output_n74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o74
  r = spreadsheet.intermediate_output_o74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p74
  r = spreadsheet.intermediate_output_p74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.547473508864641e-13,r[:number])
end

def test_intermediate_output_q74
  r = spreadsheet.intermediate_output_q74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-9.094947017729282e-13,r[:number])
end

def test_intermediate_output_b78
  r = spreadsheet.intermediate_output_b78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid (net of distribution losses)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c80
  r = spreadsheet.intermediate_output_c80
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d80
  r = spreadsheet.intermediate_output_d80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity (delivered to end user)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f80
  r = spreadsheet.intermediate_output_f80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-352.03495223253594,r[:number])
end

def test_intermediate_output_h80
  r = spreadsheet.intermediate_output_h80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-354.55512401053005,r[:number])
end

def test_intermediate_output_i80
  r = spreadsheet.intermediate_output_i80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-359.3035386016395,r[:number])
end

def test_intermediate_output_j80
  r = spreadsheet.intermediate_output_j80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-369.03248902008096,r[:number])
end

def test_intermediate_output_k80
  r = spreadsheet.intermediate_output_k80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-386.250791304654,r[:number])
end

def test_intermediate_output_l80
  r = spreadsheet.intermediate_output_l80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-408.9802633841156,r[:number])
end

def test_intermediate_output_m80
  r = spreadsheet.intermediate_output_m80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-431.840140503318,r[:number])
end

def test_intermediate_output_n80
  r = spreadsheet.intermediate_output_n80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-456.51521049820974,r[:number])
end

def test_intermediate_output_o80
  r = spreadsheet.intermediate_output_o80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-482.7119907502589,r[:number])
end

def test_intermediate_output_p80
  r = spreadsheet.intermediate_output_p80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-510.56223518581226,r[:number])
end

def test_intermediate_output_q80
  r = spreadsheet.intermediate_output_q80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-540.8941778422982,r[:number])
end

def test_intermediate_output_r80
  r = spreadsheet.intermediate_output_r80
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c81
  r = spreadsheet.intermediate_output_c81
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d81
  r = spreadsheet.intermediate_output_d81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity (supplied to grid)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f81
  r = spreadsheet.intermediate_output_f81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.72382686261983,r[:number])
end

def test_intermediate_output_h81
  r = spreadsheet.intermediate_output_h81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.55512401053005,r[:number])
end

def test_intermediate_output_i81
  r = spreadsheet.intermediate_output_i81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(359.3035386016395,r[:number])
end

def test_intermediate_output_j81
  r = spreadsheet.intermediate_output_j81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(369.03248902008096,r[:number])
end

def test_intermediate_output_k81
  r = spreadsheet.intermediate_output_k81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.250791304654,r[:number])
end

def test_intermediate_output_l81
  r = spreadsheet.intermediate_output_l81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(408.9802633841156,r[:number])
end

def test_intermediate_output_m81
  r = spreadsheet.intermediate_output_m81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431.840140503318,r[:number])
end

def test_intermediate_output_n81
  r = spreadsheet.intermediate_output_n81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(456.51521049820974,r[:number])
end

def test_intermediate_output_o81
  r = spreadsheet.intermediate_output_o81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(482.7119907502589,r[:number])
end

def test_intermediate_output_p81
  r = spreadsheet.intermediate_output_p81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(510.56223518581226,r[:number])
end

def test_intermediate_output_q81
  r = spreadsheet.intermediate_output_q81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(540.8941778422982,r[:number])
end

def test_intermediate_output_d82
  r = spreadsheet.intermediate_output_d82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f82
  r = spreadsheet.intermediate_output_f82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6888746300838875,r[:number])
end

def test_intermediate_output_h82
  r = spreadsheet.intermediate_output_h82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i82
  r = spreadsheet.intermediate_output_i82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j82
  r = spreadsheet.intermediate_output_j82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k82
  r = spreadsheet.intermediate_output_k82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l82
  r = spreadsheet.intermediate_output_l82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m82
  r = spreadsheet.intermediate_output_m82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n82
  r = spreadsheet.intermediate_output_n82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o82
  r = spreadsheet.intermediate_output_o82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p82
  r = spreadsheet.intermediate_output_p82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q82
  r = spreadsheet.intermediate_output_q82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c84
  r = spreadsheet.intermediate_output_c84
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d84
  r = spreadsheet.intermediate_output_d84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h84
  r = spreadsheet.intermediate_output_h84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-26.584481639635896,r[:number])
end

def test_intermediate_output_i84
  r = spreadsheet.intermediate_output_i84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-26.940516941246642,r[:number])
end

def test_intermediate_output_j84
  r = spreadsheet.intermediate_output_j84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-27.669991954458737,r[:number])
end

def test_intermediate_output_k84
  r = spreadsheet.intermediate_output_k84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-28.96101727027485,r[:number])
end

def test_intermediate_output_l84
  r = spreadsheet.intermediate_output_l84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-30.665269140449823,r[:number])
end

def test_intermediate_output_m84
  r = spreadsheet.intermediate_output_m84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-32.37929875786335,r[:number])
end

def test_intermediate_output_n84
  r = spreadsheet.intermediate_output_n84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-34.229431221938114,r[:number])
end

def test_intermediate_output_o84
  r = spreadsheet.intermediate_output_o84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-36.19366125689169,r[:number])
end

def test_intermediate_output_p84
  r = spreadsheet.intermediate_output_p84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-38.2818677492462,r[:number])
end

def test_intermediate_output_q84
  r = spreadsheet.intermediate_output_q84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-40.55615154332804,r[:number])
end

def test_intermediate_output_d85
  r = spreadsheet.intermediate_output_d85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Demand (for charting)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h85
  r = spreadsheet.intermediate_output_h85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.13960565016595,r[:number])
end

def test_intermediate_output_i85
  r = spreadsheet.intermediate_output_i85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.24405554288614,r[:number])
end

def test_intermediate_output_j85
  r = spreadsheet.intermediate_output_j85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(396.7024809745397,r[:number])
end

def test_intermediate_output_k85
  r = spreadsheet.intermediate_output_k85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(415.21180857492885,r[:number])
end

def test_intermediate_output_l85
  r = spreadsheet.intermediate_output_l85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(439.6455325245654,r[:number])
end

def test_intermediate_output_m85
  r = spreadsheet.intermediate_output_m85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464.2194392611814,r[:number])
end

def test_intermediate_output_n85
  r = spreadsheet.intermediate_output_n85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.74464172014785,r[:number])
end

def test_intermediate_output_o85
  r = spreadsheet.intermediate_output_o85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(518.9056520071506,r[:number])
end

def test_intermediate_output_p85
  r = spreadsheet.intermediate_output_p85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(548.8441029350585,r[:number])
end

def test_intermediate_output_q85
  r = spreadsheet.intermediate_output_q85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(581.4503293856262,r[:number])
end

def test_intermediate_output_d86
  r = spreadsheet.intermediate_output_d86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy for charting",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h86
  r = spreadsheet.intermediate_output_h86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.3986332411074,r[:number])
end

def test_intermediate_output_i86
  r = spreadsheet.intermediate_output_i86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.53578983301105,r[:number])
end

def test_intermediate_output_j86
  r = spreadsheet.intermediate_output_j86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(398.05780658703287,r[:number])
end

def test_intermediate_output_k86
  r = spreadsheet.intermediate_output_k86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(416.63591542237106,r[:number])
end

def test_intermediate_output_l86
  r = spreadsheet.intermediate_output_l86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.1794721712877,r[:number])
end

def test_intermediate_output_m86
  r = spreadsheet.intermediate_output_m86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(465.8763425872702,r[:number])
end

def test_intermediate_output_n86
  r = spreadsheet.intermediate_output_n86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(492.53880094784535,r[:number])
end

def test_intermediate_output_o86
  r = spreadsheet.intermediate_output_o86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.8527268021878,r[:number])
end

def test_intermediate_output_p86
  r = spreadsheet.intermediate_output_p86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(550.9613340699603,r[:number])
end

def test_intermediate_output_q86
  r = spreadsheet.intermediate_output_q86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(583.7567645739484,r[:number])
end

def test_intermediate_output_c89
  r = spreadsheet.intermediate_output_c89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Z.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d89
  r = spreadsheet.intermediate_output_d89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Unallocated",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f89
  r = spreadsheet.intermediate_output_f89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h89
  r = spreadsheet.intermediate_output_h89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i89
  r = spreadsheet.intermediate_output_i89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j89
  r = spreadsheet.intermediate_output_j89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k89
  r = spreadsheet.intermediate_output_k89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0231815394945443e-12,r[:number])
end

def test_intermediate_output_l89
  r = spreadsheet.intermediate_output_l89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m89
  r = spreadsheet.intermediate_output_m89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n89
  r = spreadsheet.intermediate_output_n89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o89
  r = spreadsheet.intermediate_output_o89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p89
  r = spreadsheet.intermediate_output_p89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q89
  r = spreadsheet.intermediate_output_q89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.0231815394945443e-12,r[:number])
end

def test_intermediate_output_d91
  r = spreadsheet.intermediate_output_d91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Net balance (should be zero!)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f91
  r = spreadsheet.intermediate_output_f91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.261657858885883e-14,r[:number])
end

def test_intermediate_output_h91
  r = spreadsheet.intermediate_output_h91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_i91
  r = spreadsheet.intermediate_output_i91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_j91
  r = spreadsheet.intermediate_output_j91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2737367544323206e-13,r[:number])
end

def test_intermediate_output_k91
  r = spreadsheet.intermediate_output_k91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2505552149377763e-12,r[:number])
end

def test_intermediate_output_l91
  r = spreadsheet.intermediate_output_l91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m91
  r = spreadsheet.intermediate_output_m91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.547473508864641e-13,r[:number])
end

def test_intermediate_output_n91
  r = spreadsheet.intermediate_output_n91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o91
  r = spreadsheet.intermediate_output_o91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p91
  r = spreadsheet.intermediate_output_p91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.547473508864641e-13,r[:number])
end

def test_intermediate_output_q91
  r = spreadsheet.intermediate_output_q91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.9326762412674725e-12,r[:number])
end

def test_intermediate_output_b93
  r = spreadsheet.intermediate_output_b93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c95
  r = spreadsheet.intermediate_output_c95
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d95
  r = spreadsheet.intermediate_output_d95
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h95
  r = spreadsheet.intermediate_output_h95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_intermediate_output_i95
  r = spreadsheet.intermediate_output_i95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_intermediate_output_j95
  r = spreadsheet.intermediate_output_j95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_intermediate_output_k95
  r = spreadsheet.intermediate_output_k95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_l95
  r = spreadsheet.intermediate_output_l95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_intermediate_output_m95
  r = spreadsheet.intermediate_output_m95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_n95
  r = spreadsheet.intermediate_output_n95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_intermediate_output_o95
  r = spreadsheet.intermediate_output_o95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_intermediate_output_p95
  r = spreadsheet.intermediate_output_p95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_intermediate_output_q95
  r = spreadsheet.intermediate_output_q95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_c96
  r = spreadsheet.intermediate_output_c96
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d96
  r = spreadsheet.intermediate_output_d96
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass/Coal power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f96
  r = spreadsheet.intermediate_output_f96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.53401618322465,r[:number])
end

def test_intermediate_output_h96
  r = spreadsheet.intermediate_output_h96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.8345777895074,r[:number])
end

def test_intermediate_output_i96
  r = spreadsheet.intermediate_output_i96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(315.1363283423535,r[:number])
end

def test_intermediate_output_j96
  r = spreadsheet.intermediate_output_j96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.0881604766082,r[:number])
end

def test_intermediate_output_k96
  r = spreadsheet.intermediate_output_k96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.6597217689738,r[:number])
end

def test_intermediate_output_l96
  r = spreadsheet.intermediate_output_l96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(358.34267123779455,r[:number])
end

def test_intermediate_output_m96
  r = spreadsheet.intermediate_output_m96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.512563383777,r[:number])
end

def test_intermediate_output_n96
  r = spreadsheet.intermediate_output_n96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443.95605106784535,r[:number])
end

def test_intermediate_output_o96
  r = spreadsheet.intermediate_output_o96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.3416961771879,r[:number])
end

def test_intermediate_output_p96
  r = spreadsheet.intermediate_output_p96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(534.5403588249603,r[:number])
end

def test_intermediate_output_q96
  r = spreadsheet.intermediate_output_q96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(567.3003966039485,r[:number])
end

def test_intermediate_output_c97
  r = spreadsheet.intermediate_output_c97
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d97
  r = spreadsheet.intermediate_output_d97
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f97
  r = spreadsheet.intermediate_output_f97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h97
  r = spreadsheet.intermediate_output_h97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i97
  r = spreadsheet.intermediate_output_i97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j97
  r = spreadsheet.intermediate_output_j97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k97
  r = spreadsheet.intermediate_output_k97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l97
  r = spreadsheet.intermediate_output_l97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m97
  r = spreadsheet.intermediate_output_m97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n97
  r = spreadsheet.intermediate_output_n97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o97
  r = spreadsheet.intermediate_output_o97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p97
  r = spreadsheet.intermediate_output_p97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q97
  r = spreadsheet.intermediate_output_q97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c98
  r = spreadsheet.intermediate_output_c98
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d98
  r = spreadsheet.intermediate_output_d98
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f98
  r = spreadsheet.intermediate_output_f98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h98
  r = spreadsheet.intermediate_output_h98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i98
  r = spreadsheet.intermediate_output_i98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j98
  r = spreadsheet.intermediate_output_j98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k98
  r = spreadsheet.intermediate_output_k98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l98
  r = spreadsheet.intermediate_output_l98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m98
  r = spreadsheet.intermediate_output_m98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n98
  r = spreadsheet.intermediate_output_n98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o98
  r = spreadsheet.intermediate_output_o98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p98
  r = spreadsheet.intermediate_output_p98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q98
  r = spreadsheet.intermediate_output_q98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d99
  r = spreadsheet.intermediate_output_d99
  assert_equal(:ExcelString,r[:type])
  assert_equal("Unabated thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f99
  r = spreadsheet.intermediate_output_f99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.53401618322465,r[:number])
end

def test_intermediate_output_g99
  r = spreadsheet.intermediate_output_g99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h99
  r = spreadsheet.intermediate_output_h99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.8345777895074,r[:number])
end

def test_intermediate_output_i99
  r = spreadsheet.intermediate_output_i99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(315.1363283423535,r[:number])
end

def test_intermediate_output_j99
  r = spreadsheet.intermediate_output_j99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.0881604766082,r[:number])
end

def test_intermediate_output_k99
  r = spreadsheet.intermediate_output_k99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.6597217689738,r[:number])
end

def test_intermediate_output_l99
  r = spreadsheet.intermediate_output_l99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(358.34267123779455,r[:number])
end

def test_intermediate_output_m99
  r = spreadsheet.intermediate_output_m99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.512563383777,r[:number])
end

def test_intermediate_output_n99
  r = spreadsheet.intermediate_output_n99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(443.95605106784535,r[:number])
end

def test_intermediate_output_o99
  r = spreadsheet.intermediate_output_o99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.3416961771879,r[:number])
end

def test_intermediate_output_p99
  r = spreadsheet.intermediate_output_p99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(534.5403588249603,r[:number])
end

def test_intermediate_output_q99
  r = spreadsheet.intermediate_output_q99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(567.3003966039485,r[:number])
end

def test_intermediate_output_c100
  r = spreadsheet.intermediate_output_c100
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d100
  r = spreadsheet.intermediate_output_d100
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f100
  r = spreadsheet.intermediate_output_f100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h100
  r = spreadsheet.intermediate_output_h100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i100
  r = spreadsheet.intermediate_output_i100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j100
  r = spreadsheet.intermediate_output_j100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.079787425,r[:number])
end

def test_intermediate_output_k100
  r = spreadsheet.intermediate_output_k100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.834644510000002,r[:number])
end

def test_intermediate_output_l100
  r = spreadsheet.intermediate_output_l100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.876743225,r[:number])
end

def test_intermediate_output_m100
  r = spreadsheet.intermediate_output_m100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.928155815,r[:number])
end

def test_intermediate_output_n100
  r = spreadsheet.intermediate_output_n100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.95013656,r[:number])
end

def test_intermediate_output_o100
  r = spreadsheet.intermediate_output_o100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.972117305000001,r[:number])
end

def test_intermediate_output_p100
  r = spreadsheet.intermediate_output_p100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.003411924999998,r[:number])
end

def test_intermediate_output_q100
  r = spreadsheet.intermediate_output_q100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.03880465,r[:number])
end

def test_intermediate_output_c101
  r = spreadsheet.intermediate_output_c101
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d101
  r = spreadsheet.intermediate_output_d101
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f101
  r = spreadsheet.intermediate_output_f101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.248895000000005,r[:number])
end

def test_intermediate_output_h101
  r = spreadsheet.intermediate_output_h101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.469896,r[:number])
end

def test_intermediate_output_i101
  r = spreadsheet.intermediate_output_i101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.596,r[:number])
end

def test_intermediate_output_j101
  r = spreadsheet.intermediate_output_j101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.18064,r[:number])
end

def test_intermediate_output_k101
  r = spreadsheet.intermediate_output_k101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.246080000000006,r[:number])
end

def test_intermediate_output_l101
  r = spreadsheet.intermediate_output_l101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.415360000000005,r[:number])
end

def test_intermediate_output_m101
  r = spreadsheet.intermediate_output_m101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.415360000000005,r[:number])
end

def test_intermediate_output_n101
  r = spreadsheet.intermediate_output_n101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o101
  r = spreadsheet.intermediate_output_o101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p101
  r = spreadsheet.intermediate_output_p101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q101
  r = spreadsheet.intermediate_output_q101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c102
  r = spreadsheet.intermediate_output_c102
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d102
  r = spreadsheet.intermediate_output_d102
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f102
  r = spreadsheet.intermediate_output_f102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.4912823,r[:number])
end

def test_intermediate_output_h102
  r = spreadsheet.intermediate_output_h102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.9858220412000005,r[:number])
end

def test_intermediate_output_i102
  r = spreadsheet.intermediate_output_i102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.317757319999997,r[:number])
end

def test_intermediate_output_j102
  r = spreadsheet.intermediate_output_j102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.549707319999996,r[:number])
end

def test_intermediate_output_k102
  r = spreadsheet.intermediate_output_k102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.78165732,r[:number])
end

def test_intermediate_output_l102
  r = spreadsheet.intermediate_output_l102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.963039319999996,r[:number])
end

def test_intermediate_output_m102
  r = spreadsheet.intermediate_output_m102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.783685319999993,r[:number])
end

def test_intermediate_output_n102
  r = spreadsheet.intermediate_output_n102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.551735319999997,r[:number])
end

def test_intermediate_output_o102
  r = spreadsheet.intermediate_output_o102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.319785319999996,r[:number])
end

def test_intermediate_output_p102
  r = spreadsheet.intermediate_output_p102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_q102
  r = spreadsheet.intermediate_output_q102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_c103
  r = spreadsheet.intermediate_output_c103
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d103
  r = spreadsheet.intermediate_output_d103
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f103
  r = spreadsheet.intermediate_output_f103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7825523999999999,r[:number])
end

def test_intermediate_output_h103
  r = spreadsheet.intermediate_output_h103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9769303763999999,r[:number])
end

def test_intermediate_output_i103
  r = spreadsheet.intermediate_output_i103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.122912780000003,r[:number])
end

def test_intermediate_output_j103
  r = spreadsheet.intermediate_output_j103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.793162780000001,r[:number])
end

def test_intermediate_output_k103
  r = spreadsheet.intermediate_output_k103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.575607796000003,r[:number])
end

def test_intermediate_output_l103
  r = spreadsheet.intermediate_output_l103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.73074032000001,r[:number])
end

def test_intermediate_output_m103
  r = spreadsheet.intermediate_output_m103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.385659999999998,r[:number])
end

def test_intermediate_output_n103
  r = spreadsheet.intermediate_output_n103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.75115,r[:number])
end

def test_intermediate_output_o103
  r = spreadsheet.intermediate_output_o103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.8894,r[:number])
end

def test_intermediate_output_p103
  r = spreadsheet.intermediate_output_p103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q103
  r = spreadsheet.intermediate_output_q103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c104
  r = spreadsheet.intermediate_output_c104
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d104
  r = spreadsheet.intermediate_output_d104
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f104
  r = spreadsheet.intermediate_output_f104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1137551000000006,r[:number])
end

def test_intermediate_output_h104
  r = spreadsheet.intermediate_output_h104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.114400994,r[:number])
end

def test_intermediate_output_i104
  r = spreadsheet.intermediate_output_i104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_j104
  r = spreadsheet.intermediate_output_j104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_k104
  r = spreadsheet.intermediate_output_k104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_l104
  r = spreadsheet.intermediate_output_l104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_m104
  r = spreadsheet.intermediate_output_m104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_n104
  r = spreadsheet.intermediate_output_n104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_o104
  r = spreadsheet.intermediate_output_o104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_p104
  r = spreadsheet.intermediate_output_p104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_q104
  r = spreadsheet.intermediate_output_q104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_c105
  r = spreadsheet.intermediate_output_c105
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d105
  r = spreadsheet.intermediate_output_d105
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal and Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f105
  r = spreadsheet.intermediate_output_f105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h105
  r = spreadsheet.intermediate_output_h105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i105
  r = spreadsheet.intermediate_output_i105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0050034246575342495,r[:number])
end

def test_intermediate_output_j105
  r = spreadsheet.intermediate_output_j105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.023015753424657545,r[:number])
end

def test_intermediate_output_k105
  r = spreadsheet.intermediate_output_k105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.20847602739726018,r[:number])
end

def test_intermediate_output_l105
  r = spreadsheet.intermediate_output_l105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5211900684931499,r[:number])
end

def test_intermediate_output_m105
  r = spreadsheet.intermediate_output_m105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5211900684931499,r[:number])
end

def test_intermediate_output_n105
  r = spreadsheet.intermediate_output_n105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o105
  r = spreadsheet.intermediate_output_o105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p105
  r = spreadsheet.intermediate_output_p105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q105
  r = spreadsheet.intermediate_output_q105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c106
  r = spreadsheet.intermediate_output_c106
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d106
  r = spreadsheet.intermediate_output_d106
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal electricity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f106
  r = spreadsheet.intermediate_output_f106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h106
  r = spreadsheet.intermediate_output_h106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i106
  r = spreadsheet.intermediate_output_i106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j106
  r = spreadsheet.intermediate_output_j106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k106
  r = spreadsheet.intermediate_output_k106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l106
  r = spreadsheet.intermediate_output_l106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m106
  r = spreadsheet.intermediate_output_m106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n106
  r = spreadsheet.intermediate_output_n106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o106
  r = spreadsheet.intermediate_output_o106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p106
  r = spreadsheet.intermediate_output_p106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q106
  r = spreadsheet.intermediate_output_q106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c107
  r = spreadsheet.intermediate_output_c107
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.e",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d107
  r = spreadsheet.intermediate_output_d107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal [UNUSED - See III.c]",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f107
  r = spreadsheet.intermediate_output_f107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h107
  r = spreadsheet.intermediate_output_h107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i107
  r = spreadsheet.intermediate_output_i107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j107
  r = spreadsheet.intermediate_output_j107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k107
  r = spreadsheet.intermediate_output_k107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l107
  r = spreadsheet.intermediate_output_l107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m107
  r = spreadsheet.intermediate_output_m107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n107
  r = spreadsheet.intermediate_output_n107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o107
  r = spreadsheet.intermediate_output_o107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p107
  r = spreadsheet.intermediate_output_p107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q107
  r = spreadsheet.intermediate_output_q107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c108
  r = spreadsheet.intermediate_output_c108
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d108
  r = spreadsheet.intermediate_output_d108
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f108
  r = spreadsheet.intermediate_output_f108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h108
  r = spreadsheet.intermediate_output_h108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_intermediate_output_i108
  r = spreadsheet.intermediate_output_i108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_intermediate_output_j108
  r = spreadsheet.intermediate_output_j108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_intermediate_output_k108
  r = spreadsheet.intermediate_output_k108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l108
  r = spreadsheet.intermediate_output_l108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m108
  r = spreadsheet.intermediate_output_m108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n108
  r = spreadsheet.intermediate_output_n108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o108
  r = spreadsheet.intermediate_output_o108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p108
  r = spreadsheet.intermediate_output_p108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q108
  r = spreadsheet.intermediate_output_q108
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d109
  r = spreadsheet.intermediate_output_d109
  assert_equal(:ExcelString,r[:type])
  assert_equal("Non-thermal renewable generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f109
  r = spreadsheet.intermediate_output_f109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.3875898,r[:number])
end

def test_intermediate_output_h109
  r = spreadsheet.intermediate_output_h109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.094159451600001,r[:number])
end

def test_intermediate_output_i109
  r = spreadsheet.intermediate_output_i109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.803461490657536,r[:number])
end

def test_intermediate_output_j109
  r = spreadsheet.intermediate_output_j109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.70921868542466,r[:number])
end

def test_intermediate_output_k109
  r = spreadsheet.intermediate_output_k109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.89546914339727,r[:number])
end

def test_intermediate_output_l109
  r = spreadsheet.intermediate_output_l109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.54469770849315,r[:number])
end

def test_intermediate_output_m109
  r = spreadsheet.intermediate_output_m109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.02026338849314,r[:number])
end

def test_intermediate_output_n109
  r = spreadsheet.intermediate_output_n109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.63261332,r[:number])
end

def test_intermediate_output_o109
  r = spreadsheet.intermediate_output_o109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.53891332,r[:number])
end

def test_intermediate_output_p109
  r = spreadsheet.intermediate_output_p109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4175633199999975,r[:number])
end

def test_intermediate_output_q109
  r = spreadsheet.intermediate_output_q109
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4175633199999975,r[:number])
end

def test_intermediate_output_c110
  r = spreadsheet.intermediate_output_c110
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d110
  r = spreadsheet.intermediate_output_d110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f110
  r = spreadsheet.intermediate_output_f110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number])
end

def test_intermediate_output_h110
  r = spreadsheet.intermediate_output_h110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i110
  r = spreadsheet.intermediate_output_i110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j110
  r = spreadsheet.intermediate_output_j110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k110
  r = spreadsheet.intermediate_output_k110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l110
  r = spreadsheet.intermediate_output_l110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m110
  r = spreadsheet.intermediate_output_m110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n110
  r = spreadsheet.intermediate_output_n110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o110
  r = spreadsheet.intermediate_output_o110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p110
  r = spreadsheet.intermediate_output_p110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q110
  r = spreadsheet.intermediate_output_q110
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d111
  r = spreadsheet.intermediate_output_d111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total generation supplied to grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f111
  r = spreadsheet.intermediate_output_f111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.38502523322467,r[:number])
end

def test_intermediate_output_h111
  r = spreadsheet.intermediate_output_h111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.3986332411074,r[:number])
end

def test_intermediate_output_i111
  r = spreadsheet.intermediate_output_i111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.53578983301105,r[:number])
end

def test_intermediate_output_j111
  r = spreadsheet.intermediate_output_j111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(398.05780658703287,r[:number])
end

def test_intermediate_output_k111
  r = spreadsheet.intermediate_output_k111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(416.63591542237106,r[:number])
end

def test_intermediate_output_l111
  r = spreadsheet.intermediate_output_l111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.1794721712877,r[:number])
end

def test_intermediate_output_m111
  r = spreadsheet.intermediate_output_m111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(465.8763425872702,r[:number])
end

def test_intermediate_output_n111
  r = spreadsheet.intermediate_output_n111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(492.53880094784535,r[:number])
end

def test_intermediate_output_o111
  r = spreadsheet.intermediate_output_o111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.8527268021878,r[:number])
end

def test_intermediate_output_p111
  r = spreadsheet.intermediate_output_p111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(550.9613340699603,r[:number])
end

def test_intermediate_output_q111
  r = spreadsheet.intermediate_output_q111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(583.7567645739484,r[:number])
end

def test_intermediate_output_s111
  r = spreadsheet.intermediate_output_s111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(624.3129161172765,r[:number])
end

def test_intermediate_output_d113
  r = spreadsheet.intermediate_output_d113
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f113
  r = spreadsheet.intermediate_output_f113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_g113
  r = spreadsheet.intermediate_output_g113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h113
  r = spreadsheet.intermediate_output_h113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_i113
  r = spreadsheet.intermediate_output_i113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1368683772161603e-13,r[:number])
end

def test_intermediate_output_j113
  r = spreadsheet.intermediate_output_j113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k113
  r = spreadsheet.intermediate_output_k113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_l113
  r = spreadsheet.intermediate_output_l113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m113
  r = spreadsheet.intermediate_output_m113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n113
  r = spreadsheet.intermediate_output_n113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_o113
  r = spreadsheet.intermediate_output_o113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p113
  r = spreadsheet.intermediate_output_p113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q113
  r = spreadsheet.intermediate_output_q113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_intermediate_output_r113
  r = spreadsheet.intermediate_output_r113
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d114
  r = spreadsheet.intermediate_output_d114
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity used in UK, before losses and district heating heat demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f114
  r = spreadsheet.intermediate_output_f114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.38502523322467,r[:number])
end

def test_intermediate_output_g114
  r = spreadsheet.intermediate_output_g114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h114
  r = spreadsheet.intermediate_output_h114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.3986332411074,r[:number])
end

def test_intermediate_output_i114
  r = spreadsheet.intermediate_output_i114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.53578983301094,r[:number])
end

def test_intermediate_output_j114
  r = spreadsheet.intermediate_output_j114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(398.05780658703287,r[:number])
end

def test_intermediate_output_k114
  r = spreadsheet.intermediate_output_k114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(416.63591542237106,r[:number])
end

def test_intermediate_output_l114
  r = spreadsheet.intermediate_output_l114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.1794721712877,r[:number])
end

def test_intermediate_output_m114
  r = spreadsheet.intermediate_output_m114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(465.8763425872702,r[:number])
end

def test_intermediate_output_n114
  r = spreadsheet.intermediate_output_n114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(492.53880094784535,r[:number])
end

def test_intermediate_output_o114
  r = spreadsheet.intermediate_output_o114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.8527268021878,r[:number])
end

def test_intermediate_output_p114
  r = spreadsheet.intermediate_output_p114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(550.9613340699603,r[:number])
end

def test_intermediate_output_q114
  r = spreadsheet.intermediate_output_q114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(583.7567645739484,r[:number])
end

def test_intermediate_output_d116
  r = spreadsheet.intermediate_output_d116
  assert_equal(:ExcelString,r[:type])
  assert_equal("GW installed capacity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h116
  r = spreadsheet.intermediate_output_h116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_intermediate_output_i116
  r = spreadsheet.intermediate_output_i116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_intermediate_output_j116
  r = spreadsheet.intermediate_output_j116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_intermediate_output_k116
  r = spreadsheet.intermediate_output_k116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_l116
  r = spreadsheet.intermediate_output_l116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_intermediate_output_m116
  r = spreadsheet.intermediate_output_m116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_n116
  r = spreadsheet.intermediate_output_n116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_intermediate_output_o116
  r = spreadsheet.intermediate_output_o116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_intermediate_output_p116
  r = spreadsheet.intermediate_output_p116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_intermediate_output_q116
  r = spreadsheet.intermediate_output_q116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_c117
  r = spreadsheet.intermediate_output_c117
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d117
  r = spreadsheet.intermediate_output_d117
  assert_equal(:ExcelString,r[:type])
  assert_equal("Unabated thermal generation ",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h117
  r = spreadsheet.intermediate_output_h117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.581667698868486,r[:number])
end

def test_intermediate_output_i117
  r = spreadsheet.intermediate_output_i117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.62017218491017,r[:number])
end

def test_intermediate_output_j117
  r = spreadsheet.intermediate_output_j117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.274959368437834,r[:number])
end

def test_intermediate_output_k117
  r = spreadsheet.intermediate_output_k117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.90304337684134,r[:number])
end

def test_intermediate_output_l117
  r = spreadsheet.intermediate_output_l117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.371283601869976,r[:number])
end

def test_intermediate_output_m117
  r = spreadsheet.intermediate_output_m117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.96671610830432,r[:number])
end

def test_intermediate_output_n117
  r = spreadsheet.intermediate_output_n117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.17889427786666,r[:number])
end

def test_intermediate_output_o117
  r = spreadsheet.intermediate_output_o117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.57527071757568,r[:number])
end

def test_intermediate_output_p117
  r = spreadsheet.intermediate_output_p117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.9411751287377,r[:number])
end

def test_intermediate_output_q117
  r = spreadsheet.intermediate_output_q117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.27999032038532,r[:number])
end

def test_intermediate_output_c118
  r = spreadsheet.intermediate_output_c118
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a.Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d118
  r = spreadsheet.intermediate_output_d118
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil / Biofuel",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h118
  r = spreadsheet.intermediate_output_h118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1,r[:number])
end

def test_intermediate_output_i118
  r = spreadsheet.intermediate_output_i118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0568,r[:number])
end

def test_intermediate_output_j118
  r = spreadsheet.intermediate_output_j118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k118
  r = spreadsheet.intermediate_output_k118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l118
  r = spreadsheet.intermediate_output_l118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m118
  r = spreadsheet.intermediate_output_m118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n118
  r = spreadsheet.intermediate_output_n118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o118
  r = spreadsheet.intermediate_output_o118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p118
  r = spreadsheet.intermediate_output_p118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q118
  r = spreadsheet.intermediate_output_q118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c119
  r = spreadsheet.intermediate_output_c119
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a.Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d119
  r = spreadsheet.intermediate_output_d119
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal / Biomass",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h119
  r = spreadsheet.intermediate_output_h119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.137999999999998,r[:number])
end

def test_intermediate_output_i119
  r = spreadsheet.intermediate_output_i119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.137999999999998,r[:number])
end

def test_intermediate_output_j119
  r = spreadsheet.intermediate_output_j119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.422,r[:number])
end

def test_intermediate_output_k119
  r = spreadsheet.intermediate_output_k119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.055000000000003,r[:number])
end

def test_intermediate_output_l119
  r = spreadsheet.intermediate_output_l119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.612,r[:number])
end

def test_intermediate_output_m119
  r = spreadsheet.intermediate_output_m119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7999999999999998,r[:number])
end

def test_intermediate_output_n119
  r = spreadsheet.intermediate_output_n119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6,r[:number])
end

def test_intermediate_output_o119
  r = spreadsheet.intermediate_output_o119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6,r[:number])
end

def test_intermediate_output_p119
  r = spreadsheet.intermediate_output_p119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6,r[:number])
end

def test_intermediate_output_q119
  r = spreadsheet.intermediate_output_q119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6,r[:number])
end

def test_intermediate_output_c120
  r = spreadsheet.intermediate_output_c120
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a.Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d120
  r = spreadsheet.intermediate_output_d120
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas / Biogas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h120
  r = spreadsheet.intermediate_output_h120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.343667698868483,r[:number])
end

def test_intermediate_output_i120
  r = spreadsheet.intermediate_output_i120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.425372184910167,r[:number])
end

def test_intermediate_output_j120
  r = spreadsheet.intermediate_output_j120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.85295936843783,r[:number])
end

def test_intermediate_output_k120
  r = spreadsheet.intermediate_output_k120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.84804337684133,r[:number])
end

def test_intermediate_output_l120
  r = spreadsheet.intermediate_output_l120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.759283601869974,r[:number])
end

def test_intermediate_output_m120
  r = spreadsheet.intermediate_output_m120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.16671610830432,r[:number])
end

def test_intermediate_output_n120
  r = spreadsheet.intermediate_output_n120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.57889427786667,r[:number])
end

def test_intermediate_output_o120
  r = spreadsheet.intermediate_output_o120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.97527071757568,r[:number])
end

def test_intermediate_output_p120
  r = spreadsheet.intermediate_output_p120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.3411751287377,r[:number])
end

def test_intermediate_output_q120
  r = spreadsheet.intermediate_output_q120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.67999032038533,r[:number])
end

def test_intermediate_output_c121
  r = spreadsheet.intermediate_output_c121
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d121
  r = spreadsheet.intermediate_output_d121
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h121
  r = spreadsheet.intermediate_output_h121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i121
  r = spreadsheet.intermediate_output_i121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j121
  r = spreadsheet.intermediate_output_j121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8500000000000001,r[:number])
end

def test_intermediate_output_k121
  r = spreadsheet.intermediate_output_k121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7000000000000002,r[:number])
end

def test_intermediate_output_l121
  r = spreadsheet.intermediate_output_l121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_intermediate_output_m121
  r = spreadsheet.intermediate_output_m121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_intermediate_output_n121
  r = spreadsheet.intermediate_output_n121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_intermediate_output_o121
  r = spreadsheet.intermediate_output_o121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_intermediate_output_p121
  r = spreadsheet.intermediate_output_p121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_intermediate_output_q121
  r = spreadsheet.intermediate_output_q121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7,r[:number])
end

def test_intermediate_output_c122
  r = spreadsheet.intermediate_output_c122
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d122
  r = spreadsheet.intermediate_output_d122
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h122
  r = spreadsheet.intermediate_output_h122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.0,r[:number])
end

def test_intermediate_output_i122
  r = spreadsheet.intermediate_output_i122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.0,r[:number])
end

def test_intermediate_output_j122
  r = spreadsheet.intermediate_output_j122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2,r[:number])
end

def test_intermediate_output_k122
  r = spreadsheet.intermediate_output_k122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6000000000000005,r[:number])
end

def test_intermediate_output_l122
  r = spreadsheet.intermediate_output_l122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2000000000000006,r[:number])
end

def test_intermediate_output_m122
  r = spreadsheet.intermediate_output_m122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2000000000000006,r[:number])
end

def test_intermediate_output_n122
  r = spreadsheet.intermediate_output_n122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o122
  r = spreadsheet.intermediate_output_o122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p122
  r = spreadsheet.intermediate_output_p122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q122
  r = spreadsheet.intermediate_output_q122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c123
  r = spreadsheet.intermediate_output_c123
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d123
  r = spreadsheet.intermediate_output_d123
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h123
  r = spreadsheet.intermediate_output_h123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0834,r[:number])
end

def test_intermediate_output_i123
  r = spreadsheet.intermediate_output_i123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.923399999999999,r[:number])
end

def test_intermediate_output_j123
  r = spreadsheet.intermediate_output_j123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.673399999999999,r[:number])
end

def test_intermediate_output_k123
  r = spreadsheet.intermediate_output_k123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.423399999999999,r[:number])
end

def test_intermediate_output_l123
  r = spreadsheet.intermediate_output_l123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.013399999999999,r[:number])
end

def test_intermediate_output_m123
  r = spreadsheet.intermediate_output_m123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.283399999999999,r[:number])
end

def test_intermediate_output_n123
  r = spreadsheet.intermediate_output_n123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.5333999999999985,r[:number])
end

def test_intermediate_output_o123
  r = spreadsheet.intermediate_output_o123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7833999999999985,r[:number])
end

def test_intermediate_output_p123
  r = spreadsheet.intermediate_output_p123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03339999999999854,r[:number])
end

def test_intermediate_output_q123
  r = spreadsheet.intermediate_output_q123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03339999999999854,r[:number])
end

def test_intermediate_output_c124
  r = spreadsheet.intermediate_output_c124
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d124
  r = spreadsheet.intermediate_output_d124
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h124
  r = spreadsheet.intermediate_output_h124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3938,r[:number])
end

def test_intermediate_output_i124
  r = spreadsheet.intermediate_output_i124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.343800000000001,r[:number])
end

def test_intermediate_output_j124
  r = spreadsheet.intermediate_output_j124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8438000000000008,r[:number])
end

def test_intermediate_output_k124
  r = spreadsheet.intermediate_output_k124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.343800000000001,r[:number])
end

def test_intermediate_output_l124
  r = spreadsheet.intermediate_output_l124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.193800000000001,r[:number])
end

def test_intermediate_output_m124
  r = spreadsheet.intermediate_output_m124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.0,r[:number])
end

def test_intermediate_output_n124
  r = spreadsheet.intermediate_output_n124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.5,r[:number])
end

def test_intermediate_output_o124
  r = spreadsheet.intermediate_output_o124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_intermediate_output_p124
  r = spreadsheet.intermediate_output_p124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q124
  r = spreadsheet.intermediate_output_q124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c125
  r = spreadsheet.intermediate_output_c125
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d125
  r = spreadsheet.intermediate_output_d125
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h125
  r = spreadsheet.intermediate_output_h125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.293,r[:number])
end

def test_intermediate_output_i125
  r = spreadsheet.intermediate_output_i125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_j125
  r = spreadsheet.intermediate_output_j125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_k125
  r = spreadsheet.intermediate_output_k125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_l125
  r = spreadsheet.intermediate_output_l125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_m125
  r = spreadsheet.intermediate_output_m125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_n125
  r = spreadsheet.intermediate_output_n125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_o125
  r = spreadsheet.intermediate_output_o125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_p125
  r = spreadsheet.intermediate_output_p125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_q125
  r = spreadsheet.intermediate_output_q125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6,r[:number])
end

def test_intermediate_output_c126
  r = spreadsheet.intermediate_output_c126
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d126
  r = spreadsheet.intermediate_output_d126
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h126
  r = spreadsheet.intermediate_output_h126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i126
  r = spreadsheet.intermediate_output_i126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j126
  r = spreadsheet.intermediate_output_j126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0015220700152207,r[:number])
end

def test_intermediate_output_k126
  r = spreadsheet.intermediate_output_k126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0803314730255369,r[:number])
end

def test_intermediate_output_l126
  r = spreadsheet.intermediate_output_l126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.200828682563842,r[:number])
end

def test_intermediate_output_m126
  r = spreadsheet.intermediate_output_m126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.200828682563842,r[:number])
end

def test_intermediate_output_n126
  r = spreadsheet.intermediate_output_n126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o126
  r = spreadsheet.intermediate_output_o126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p126
  r = spreadsheet.intermediate_output_p126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q126
  r = spreadsheet.intermediate_output_q126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c127
  r = spreadsheet.intermediate_output_c127
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalStream",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d127
  r = spreadsheet.intermediate_output_d127
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal Stream",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h127
  r = spreadsheet.intermediate_output_h127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i127
  r = spreadsheet.intermediate_output_i127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.00158548959918823,r[:number])
end

def test_intermediate_output_j127
  r = spreadsheet.intermediate_output_j127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.00634195839675292,r[:number])
end

def test_intermediate_output_k127
  r = spreadsheet.intermediate_output_k127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0158548959918823,r[:number])
end

def test_intermediate_output_l127
  r = spreadsheet.intermediate_output_l127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0396372399797057,r[:number])
end

def test_intermediate_output_m127
  r = spreadsheet.intermediate_output_m127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0396372399797057,r[:number])
end

def test_intermediate_output_n127
  r = spreadsheet.intermediate_output_n127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o127
  r = spreadsheet.intermediate_output_o127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p127
  r = spreadsheet.intermediate_output_p127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q127
  r = spreadsheet.intermediate_output_q127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c128
  r = spreadsheet.intermediate_output_c128
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalRange",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d128
  r = spreadsheet.intermediate_output_d128
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal Range",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h128
  r = spreadsheet.intermediate_output_h128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i128
  r = spreadsheet.intermediate_output_i128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j128
  r = spreadsheet.intermediate_output_j128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k128
  r = spreadsheet.intermediate_output_k128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l128
  r = spreadsheet.intermediate_output_l128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m128
  r = spreadsheet.intermediate_output_m128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n128
  r = spreadsheet.intermediate_output_n128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o128
  r = spreadsheet.intermediate_output_o128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p128
  r = spreadsheet.intermediate_output_p128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q128
  r = spreadsheet.intermediate_output_q128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c129
  r = spreadsheet.intermediate_output_c129
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d129
  r = spreadsheet.intermediate_output_d129
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal electricity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h129
  r = spreadsheet.intermediate_output_h129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i129
  r = spreadsheet.intermediate_output_i129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j129
  r = spreadsheet.intermediate_output_j129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k129
  r = spreadsheet.intermediate_output_k129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l129
  r = spreadsheet.intermediate_output_l129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m129
  r = spreadsheet.intermediate_output_m129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n129
  r = spreadsheet.intermediate_output_n129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o129
  r = spreadsheet.intermediate_output_o129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p129
  r = spreadsheet.intermediate_output_p129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q129
  r = spreadsheet.intermediate_output_q129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c130
  r = spreadsheet.intermediate_output_c130
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d130
  r = spreadsheet.intermediate_output_d130
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h130
  r = spreadsheet.intermediate_output_h130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02,r[:number])
end

def test_intermediate_output_i130
  r = spreadsheet.intermediate_output_i130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.033,r[:number])
end

def test_intermediate_output_j130
  r = spreadsheet.intermediate_output_j130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.016,r[:number])
end

def test_intermediate_output_k130
  r = spreadsheet.intermediate_output_k130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l130
  r = spreadsheet.intermediate_output_l130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m130
  r = spreadsheet.intermediate_output_m130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n130
  r = spreadsheet.intermediate_output_n130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o130
  r = spreadsheet.intermediate_output_o130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p130
  r = spreadsheet.intermediate_output_p130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q130
  r = spreadsheet.intermediate_output_q130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c131
  r = spreadsheet.intermediate_output_c131
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d131
  r = spreadsheet.intermediate_output_d131
  assert_equal(:ExcelString,r[:type])
  assert_equal("Standby / peaking gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h131
  r = spreadsheet.intermediate_output_h131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i131
  r = spreadsheet.intermediate_output_i131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j131
  r = spreadsheet.intermediate_output_j131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k131
  r = spreadsheet.intermediate_output_k131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l131
  r = spreadsheet.intermediate_output_l131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m131
  r = spreadsheet.intermediate_output_m131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n131
  r = spreadsheet.intermediate_output_n131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o131
  r = spreadsheet.intermediate_output_o131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p131
  r = spreadsheet.intermediate_output_p131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q131
  r = spreadsheet.intermediate_output_q131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d132
  r = spreadsheet.intermediate_output_d132
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h132
  r = spreadsheet.intermediate_output_h132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.37186769886848,r[:number])
end

def test_intermediate_output_i132
  r = spreadsheet.intermediate_output_i132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.52195767450935,r[:number])
end

def test_intermediate_output_j132
  r = spreadsheet.intermediate_output_j132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.4660233968498,r[:number])
end

def test_intermediate_output_k132
  r = spreadsheet.intermediate_output_k132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.66642974585875,r[:number])
end

def test_intermediate_output_l132
  r = spreadsheet.intermediate_output_l132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31894952441353,r[:number])
end

def test_intermediate_output_m132
  r = spreadsheet.intermediate_output_m132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.99058203084786,r[:number])
end

def test_intermediate_output_n132
  r = spreadsheet.intermediate_output_n132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.51229427786666,r[:number])
end

def test_intermediate_output_o132
  r = spreadsheet.intermediate_output_o132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.65867071757567,r[:number])
end

def test_intermediate_output_p132
  r = spreadsheet.intermediate_output_p132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.2745751287377,r[:number])
end

def test_intermediate_output_q132
  r = spreadsheet.intermediate_output_q132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.61339032038532,r[:number])
end

def test_intermediate_output_b135
  r = spreadsheet.intermediate_output_b135
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c137
  r = spreadsheet.intermediate_output_c137
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions as % of base year, adjusted so that 2007 matches actuals",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d138
  r = spreadsheet.intermediate_output_d138
  assert_equal(:ExcelString,r[:type])
  assert_equal("IPCC Sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f138
  r = spreadsheet.intermediate_output_f138
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007 Actuals, GHG Inv.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h138
  r = spreadsheet.intermediate_output_h138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_intermediate_output_i138
  r = spreadsheet.intermediate_output_i138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_intermediate_output_j138
  r = spreadsheet.intermediate_output_j138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_intermediate_output_k138
  r = spreadsheet.intermediate_output_k138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_l138
  r = spreadsheet.intermediate_output_l138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_intermediate_output_m138
  r = spreadsheet.intermediate_output_m138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_n138
  r = spreadsheet.intermediate_output_n138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_intermediate_output_o138
  r = spreadsheet.intermediate_output_o138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_intermediate_output_p138
  r = spreadsheet.intermediate_output_p138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_intermediate_output_q138
  r = spreadsheet.intermediate_output_q138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_c139
  r = spreadsheet.intermediate_output_c139
  assert_equal(:ExcelString,r[:type])
  assert_equal("1A",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d139
  r = spreadsheet.intermediate_output_d139
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c140
  r = spreadsheet.intermediate_output_c140
  assert_equal(:ExcelString,r[:type])
  assert_equal("1B",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d140
  r = spreadsheet.intermediate_output_d140
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fugitive Emissions from Fuels",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c141
  r = spreadsheet.intermediate_output_c141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_intermediate_output_d141
  r = spreadsheet.intermediate_output_d141
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f141
  r = spreadsheet.intermediate_output_f141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6828579138027161,r[:number])
end

def test_intermediate_output_h141
  r = spreadsheet.intermediate_output_h141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6779485785229007,r[:number])
end

def test_intermediate_output_i141
  r = spreadsheet.intermediate_output_i141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6809875499065916,r[:number])
end

def test_intermediate_output_j141
  r = spreadsheet.intermediate_output_j141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6671549183110579,r[:number])
end

def test_intermediate_output_k141
  r = spreadsheet.intermediate_output_k141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6580556060834025,r[:number])
end

def test_intermediate_output_l141
  r = spreadsheet.intermediate_output_l141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6413613212493052,r[:number])
end

def test_intermediate_output_m141
  r = spreadsheet.intermediate_output_m141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6317649548070052,r[:number])
end

def test_intermediate_output_n141
  r = spreadsheet.intermediate_output_n141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.662137776290071,r[:number])
end

def test_intermediate_output_o141
  r = spreadsheet.intermediate_output_o141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6951766969085688,r[:number])
end

def test_intermediate_output_p141
  r = spreadsheet.intermediate_output_p141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.731406187172497,r[:number])
end

def test_intermediate_output_q141
  r = spreadsheet.intermediate_output_q141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7634611398728242,r[:number])
end

def test_intermediate_output_c142
  r = spreadsheet.intermediate_output_c142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_intermediate_output_d142
  r = spreadsheet.intermediate_output_d142
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial Processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f142
  r = spreadsheet.intermediate_output_f142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.034882184192791134,r[:number])
end

def test_intermediate_output_h142
  r = spreadsheet.intermediate_output_h142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03584692871261605,r[:number])
end

def test_intermediate_output_i142
  r = spreadsheet.intermediate_output_i142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03627115308487954,r[:number])
end

def test_intermediate_output_j142
  r = spreadsheet.intermediate_output_j142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0370779226962392,r[:number])
end

def test_intermediate_output_k142
  r = spreadsheet.intermediate_output_k142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03801363712197839,r[:number])
end

def test_intermediate_output_l142
  r = spreadsheet.intermediate_output_l142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03954057767685593,r[:number])
end

def test_intermediate_output_m142
  r = spreadsheet.intermediate_output_m142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04118137601571177,r[:number])
end

def test_intermediate_output_n142
  r = spreadsheet.intermediate_output_n142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04294390934664999,r[:number])
end

def test_intermediate_output_o142
  r = spreadsheet.intermediate_output_o142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.044836611162529495,r[:number])
end

def test_intermediate_output_p142
  r = spreadsheet.intermediate_output_p142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04686851053764395,r[:number])
end

def test_intermediate_output_q142
  r = spreadsheet.intermediate_output_q142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04904927420404952,r[:number])
end

def test_intermediate_output_c143
  r = spreadsheet.intermediate_output_c143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_intermediate_output_d143
  r = spreadsheet.intermediate_output_d143
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solvent and Other Product Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f143
  r = spreadsheet.intermediate_output_f143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h143
  r = spreadsheet.intermediate_output_h143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i143
  r = spreadsheet.intermediate_output_i143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j143
  r = spreadsheet.intermediate_output_j143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k143
  r = spreadsheet.intermediate_output_k143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l143
  r = spreadsheet.intermediate_output_l143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m143
  r = spreadsheet.intermediate_output_m143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n143
  r = spreadsheet.intermediate_output_n143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o143
  r = spreadsheet.intermediate_output_o143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p143
  r = spreadsheet.intermediate_output_p143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q143
  r = spreadsheet.intermediate_output_q143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c144
  r = spreadsheet.intermediate_output_c144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_intermediate_output_d144
  r = spreadsheet.intermediate_output_d144
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f144
  r = spreadsheet.intermediate_output_f144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05435207327207761,r[:number])
end

def test_intermediate_output_h144
  r = spreadsheet.intermediate_output_h144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05565938787504274,r[:number])
end

def test_intermediate_output_i144
  r = spreadsheet.intermediate_output_i144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.054682327336968754,r[:number])
end

def test_intermediate_output_j144
  r = spreadsheet.intermediate_output_j144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05325290596355168,r[:number])
end

def test_intermediate_output_k144
  r = spreadsheet.intermediate_output_k144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05058057158725406,r[:number])
end

def test_intermediate_output_l144
  r = spreadsheet.intermediate_output_l144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05083024525845908,r[:number])
end

def test_intermediate_output_m144
  r = spreadsheet.intermediate_output_m144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05108436622367439,r[:number])
end

def test_intermediate_output_n144
  r = spreadsheet.intermediate_output_n144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.051343052770141534,r[:number])
end

def test_intermediate_output_o144
  r = spreadsheet.intermediate_output_o144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0516064268636292,r[:number])
end

def test_intermediate_output_p144
  r = spreadsheet.intermediate_output_p144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05187461426768722,r[:number])
end

def test_intermediate_output_q144
  r = spreadsheet.intermediate_output_q144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05214774466680443,r[:number])
end

def test_intermediate_output_c145
  r = spreadsheet.intermediate_output_c145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_intermediate_output_d145
  r = spreadsheet.intermediate_output_d145
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land Use, Land-Use Change and Forestry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f145
  r = spreadsheet.intermediate_output_f145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.002225951062639978,r[:number])
end

def test_intermediate_output_h145
  r = spreadsheet.intermediate_output_h145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.0023452934189081196,r[:number])
end

def test_intermediate_output_i145
  r = spreadsheet.intermediate_output_i145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.003276784334091545,r[:number])
end

def test_intermediate_output_j145
  r = spreadsheet.intermediate_output_j145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.007626007831551075,r[:number])
end

def test_intermediate_output_k145
  r = spreadsheet.intermediate_output_k145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.011845393692382784,r[:number])
end

def test_intermediate_output_l145
  r = spreadsheet.intermediate_output_l145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.015745133531545268,r[:number])
end

def test_intermediate_output_m145
  r = spreadsheet.intermediate_output_m145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.017938309791806113,r[:number])
end

def test_intermediate_output_n145
  r = spreadsheet.intermediate_output_n145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018327413544227823,r[:number])
end

def test_intermediate_output_o145
  r = spreadsheet.intermediate_output_o145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.017059702668806166,r[:number])
end

def test_intermediate_output_p145
  r = spreadsheet.intermediate_output_p145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.015461572282503212,r[:number])
end

def test_intermediate_output_q145
  r = spreadsheet.intermediate_output_q145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014852731915065124,r[:number])
end

def test_intermediate_output_c146
  r = spreadsheet.intermediate_output_c146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number])
end

def test_intermediate_output_d146
  r = spreadsheet.intermediate_output_d146
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f146
  r = spreadsheet.intermediate_output_f146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028590076266100505,r[:number])
end

def test_intermediate_output_h146
  r = spreadsheet.intermediate_output_h146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.029686341516115485,r[:number])
end

def test_intermediate_output_i146
  r = spreadsheet.intermediate_output_i146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.019551877649334193,r[:number])
end

def test_intermediate_output_j146
  r = spreadsheet.intermediate_output_j146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.017226894360055308,r[:number])
end

def test_intermediate_output_k146
  r = spreadsheet.intermediate_output_k146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01490433257100603,r[:number])
end

def test_intermediate_output_l146
  r = spreadsheet.intermediate_output_l146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01466151658735884,r[:number])
end

def test_intermediate_output_m146
  r = spreadsheet.intermediate_output_m146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014268086811950333,r[:number])
end

def test_intermediate_output_n146
  r = spreadsheet.intermediate_output_n146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014309515922282698,r[:number])
end

def test_intermediate_output_o146
  r = spreadsheet.intermediate_output_o146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014268537993622281,r[:number])
end

def test_intermediate_output_p146
  r = spreadsheet.intermediate_output_p146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014147560270136122,r[:number])
end

def test_intermediate_output_q146
  r = spreadsheet.intermediate_output_q146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013946653513734855,r[:number])
end

def test_intermediate_output_c147
  r = spreadsheet.intermediate_output_c147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.0,r[:number])
end

def test_intermediate_output_d147
  r = spreadsheet.intermediate_output_d147
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f147
  r = spreadsheet.intermediate_output_f147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h147
  r = spreadsheet.intermediate_output_h147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i147
  r = spreadsheet.intermediate_output_i147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j147
  r = spreadsheet.intermediate_output_j147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k147
  r = spreadsheet.intermediate_output_k147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l147
  r = spreadsheet.intermediate_output_l147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m147
  r = spreadsheet.intermediate_output_m147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n147
  r = spreadsheet.intermediate_output_n147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o147
  r = spreadsheet.intermediate_output_o147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p147
  r = spreadsheet.intermediate_output_p147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q147
  r = spreadsheet.intermediate_output_q147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c148
  r = spreadsheet.intermediate_output_c148
  assert_equal(:ExcelString,r[:type])
  assert_equal("X1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d148
  r = spreadsheet.intermediate_output_d148
  assert_equal(:ExcelString,r[:type])
  assert_equal("International Aviation and Shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f148
  r = spreadsheet.intermediate_output_f148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05318296088087667,r[:number])
end

def test_intermediate_output_h148
  r = spreadsheet.intermediate_output_h148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06777675385989282,r[:number])
end

def test_intermediate_output_i148
  r = spreadsheet.intermediate_output_i148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05970426598949458,r[:number])
end

def test_intermediate_output_j148
  r = spreadsheet.intermediate_output_j148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06707994481126026,r[:number])
end

def test_intermediate_output_k148
  r = spreadsheet.intermediate_output_k148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07525589572802055,r[:number])
end

def test_intermediate_output_l148
  r = spreadsheet.intermediate_output_l148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08098182581294325,r[:number])
end

def test_intermediate_output_m148
  r = spreadsheet.intermediate_output_m148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08642466007206785,r[:number])
end

def test_intermediate_output_n148
  r = spreadsheet.intermediate_output_n148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09338991060394562,r[:number])
end

def test_intermediate_output_o148
  r = spreadsheet.intermediate_output_o148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0982329539989364,r[:number])
end

def test_intermediate_output_p148
  r = spreadsheet.intermediate_output_p148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1025193439371858,r[:number])
end

def test_intermediate_output_q148
  r = spreadsheet.intermediate_output_q148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10417144024706688,r[:number])
end

def test_intermediate_output_c149
  r = spreadsheet.intermediate_output_c149
  assert_equal(:ExcelString,r[:type])
  assert_equal("X2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d149
  r = spreadsheet.intermediate_output_d149
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy credit",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h149
  r = spreadsheet.intermediate_output_h149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.012933439715737304,r[:number])
end

def test_intermediate_output_i149
  r = spreadsheet.intermediate_output_i149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.012502685806553013,r[:number])
end

def test_intermediate_output_j149
  r = spreadsheet.intermediate_output_j149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.013516989540121756,r[:number])
end

def test_intermediate_output_k149
  r = spreadsheet.intermediate_output_k149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.016444553358992392,r[:number])
end

def test_intermediate_output_l149
  r = spreadsheet.intermediate_output_l149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.01879757785220081,r[:number])
end

def test_intermediate_output_m149
  r = spreadsheet.intermediate_output_m149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.020010248534391227,r[:number])
end

def test_intermediate_output_n149
  r = spreadsheet.intermediate_output_n149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.02086321113377499,r[:number])
end

def test_intermediate_output_o149
  r = spreadsheet.intermediate_output_o149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.02177883747991967,r[:number])
end

def test_intermediate_output_p149
  r = spreadsheet.intermediate_output_p149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.02275881191280696,r[:number])
end

def test_intermediate_output_q149
  r = spreadsheet.intermediate_output_q149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.023804123763991034,r[:number])
end

def test_intermediate_output_c150
  r = spreadsheet.intermediate_output_c150
  assert_equal(:ExcelString,r[:type])
  assert_equal("X3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d150
  r = spreadsheet.intermediate_output_d150
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon capture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h150
  r = spreadsheet.intermediate_output_h150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i150
  r = spreadsheet.intermediate_output_i150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j150
  r = spreadsheet.intermediate_output_j150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.003643664498550936,r[:number])
end

def test_intermediate_output_k150
  r = spreadsheet.intermediate_output_k150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.008583398178140826,r[:number])
end

def test_intermediate_output_l150
  r = spreadsheet.intermediate_output_l150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.008402937969890344,r[:number])
end

def test_intermediate_output_m150
  r = spreadsheet.intermediate_output_m150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.008229960038657414,r[:number])
end

def test_intermediate_output_n150
  r = spreadsheet.intermediate_output_n150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.008064006070149279,r[:number])
end

def test_intermediate_output_o150
  r = spreadsheet.intermediate_output_o150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.008045735840482285,r[:number])
end

def test_intermediate_output_p150
  r = spreadsheet.intermediate_output_p150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.007886955298326493,r[:number])
end

def test_intermediate_output_q150
  r = spreadsheet.intermediate_output_q150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.007734362599841644,r[:number])
end

def test_intermediate_output_d151
  r = spreadsheet.intermediate_output_d151
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f151
  r = spreadsheet.intermediate_output_f151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.851639257351922,r[:number])
end

def test_intermediate_output_h151
  r = spreadsheet.intermediate_output_h151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8516392573519224,r[:number])
end

def test_intermediate_output_i151
  r = spreadsheet.intermediate_output_i151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8419712724948072,r[:number])
end

def test_intermediate_output_j151
  r = spreadsheet.intermediate_output_j151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8322579399350428,r[:number])
end

def test_intermediate_output_k151
  r = spreadsheet.intermediate_output_k151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.823627485246911,r[:number])
end

def test_intermediate_output_l151
  r = spreadsheet.intermediate_output_l151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8159201042943763,r[:number])
end

def test_intermediate_output_m151
  r = spreadsheet.intermediate_output_m151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8144215451491671,r[:number])
end

def test_intermediate_output_n151
  r = spreadsheet.intermediate_output_n151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8535243612733945,r[:number])
end

def test_intermediate_output_o151
  r = spreadsheet.intermediate_output_o151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8913563562756902,r[:number])
end

def test_intermediate_output_p151
  r = spreadsheet.intermediate_output_p151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9316320212565198,r[:number])
end

def test_intermediate_output_q151
  r = spreadsheet.intermediate_output_q151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9660904980557122,r[:number])
end

def test_intermediate_output_c153
  r = spreadsheet.intermediate_output_c153
  assert_equal(:ExcelString,r[:type])
  assert_equal("Excluding international bunkers",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f153
  r = spreadsheet.intermediate_output_f153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8215417518529308,r[:number])
end

def test_intermediate_output_h153
  r = spreadsheet.intermediate_output_h153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8065260142312856,r[:number])
end

def test_intermediate_output_i153
  r = spreadsheet.intermediate_output_i153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8048843872626753,r[:number])
end

def test_intermediate_output_j153
  r = spreadsheet.intermediate_output_j153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7873012879623544,r[:number])
end

def test_intermediate_output_k153
  r = spreadsheet.intermediate_output_k153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7700089653092328,r[:number])
end

def test_intermediate_output_l153
  r = spreadsheet.intermediate_output_l153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7561872621907602,r[:number])
end

def test_intermediate_output_m153
  r = spreadsheet.intermediate_output_m153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7490451749871133,r[:number])
end

def test_intermediate_output_n153
  r = spreadsheet.intermediate_output_n153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.782111921474953,r[:number])
end

def test_intermediate_output_o153
  r = spreadsheet.intermediate_output_o153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.81605466976943,r[:number])
end

def test_intermediate_output_p153
  r = spreadsheet.intermediate_output_p153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8530844886800888,r[:number])
end

def test_intermediate_output_q153
  r = spreadsheet.intermediate_output_q153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8868393872490677,r[:number])
end

def test_intermediate_output_e155
  r = spreadsheet.intermediate_output_e155
  assert_equal(:ExcelString,r[:type])
  assert_equal("Adjustment factor:",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h155
  r = spreadsheet.intermediate_output_h155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.027657227956049,r[:number])
end

def test_intermediate_output_p155
  r = spreadsheet.intermediate_output_p155
  assert_equal(:ExcelString,r[:type])
  assert_equal("% reduction 1990-2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q155
  r = spreadsheet.intermediate_output_q155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03390950194428777,r[:number])
end

def test_intermediate_output_c157
  r = spreadsheet.intermediate_output_c157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions by sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f157
  r = spreadsheet.intermediate_output_f157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h157
  r = spreadsheet.intermediate_output_h157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_intermediate_output_i157
  r = spreadsheet.intermediate_output_i157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_intermediate_output_j157
  r = spreadsheet.intermediate_output_j157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_intermediate_output_k157
  r = spreadsheet.intermediate_output_k157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_l157
  r = spreadsheet.intermediate_output_l157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_intermediate_output_m157
  r = spreadsheet.intermediate_output_m157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_n157
  r = spreadsheet.intermediate_output_n157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_intermediate_output_o157
  r = spreadsheet.intermediate_output_o157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_intermediate_output_p157
  r = spreadsheet.intermediate_output_p157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_intermediate_output_q157
  r = spreadsheet.intermediate_output_q157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_c158
  r = spreadsheet.intermediate_output_c158
  assert_equal(:ExcelString,r[:type])
  assert_equal("I",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f158
  r = spreadsheet.intermediate_output_f158
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydrocarbon fuel power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h158
  r = spreadsheet.intermediate_output_h158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.1293411589495,r[:number])
end

def test_intermediate_output_i158
  r = spreadsheet.intermediate_output_i158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.9000332315603,r[:number])
end

def test_intermediate_output_j158
  r = spreadsheet.intermediate_output_j158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.34859276793827,r[:number])
end

def test_intermediate_output_k158
  r = spreadsheet.intermediate_output_k158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.00991739673591,r[:number])
end

def test_intermediate_output_l158
  r = spreadsheet.intermediate_output_l158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.0258149281104,r[:number])
end

def test_intermediate_output_m158
  r = spreadsheet.intermediate_output_m158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.8971414117987,r[:number])
end

def test_intermediate_output_n158
  r = spreadsheet.intermediate_output_n158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.74970156139895,r[:number])
end

def test_intermediate_output_o158
  r = spreadsheet.intermediate_output_o158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.8548886190499,r[:number])
end

def test_intermediate_output_p158
  r = spreadsheet.intermediate_output_p158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.876013864254,r[:number])
end

def test_intermediate_output_q158
  r = spreadsheet.intermediate_output_q158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217.20934655242903,r[:number])
end

def test_intermediate_output_c159
  r = spreadsheet.intermediate_output_c159
  assert_equal(:ExcelString,r[:type])
  assert_equal("II",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f159
  r = spreadsheet.intermediate_output_f159
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h159
  r = spreadsheet.intermediate_output_h159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i159
  r = spreadsheet.intermediate_output_i159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j159
  r = spreadsheet.intermediate_output_j159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k159
  r = spreadsheet.intermediate_output_k159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l159
  r = spreadsheet.intermediate_output_l159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m159
  r = spreadsheet.intermediate_output_m159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n159
  r = spreadsheet.intermediate_output_n159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o159
  r = spreadsheet.intermediate_output_o159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p159
  r = spreadsheet.intermediate_output_p159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q159
  r = spreadsheet.intermediate_output_q159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c160
  r = spreadsheet.intermediate_output_c160
  assert_equal(:ExcelString,r[:type])
  assert_equal("III",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f160
  r = spreadsheet.intermediate_output_f160
  assert_equal(:ExcelString,r[:type])
  assert_equal("National renewable power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h160
  r = spreadsheet.intermediate_output_h160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i160
  r = spreadsheet.intermediate_output_i160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j160
  r = spreadsheet.intermediate_output_j160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k160
  r = spreadsheet.intermediate_output_k160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l160
  r = spreadsheet.intermediate_output_l160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m160
  r = spreadsheet.intermediate_output_m160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n160
  r = spreadsheet.intermediate_output_n160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o160
  r = spreadsheet.intermediate_output_o160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p160
  r = spreadsheet.intermediate_output_p160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q160
  r = spreadsheet.intermediate_output_q160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c161
  r = spreadsheet.intermediate_output_c161
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f161
  r = spreadsheet.intermediate_output_f161
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed renewable power generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h161
  r = spreadsheet.intermediate_output_h161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i161
  r = spreadsheet.intermediate_output_i161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j161
  r = spreadsheet.intermediate_output_j161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k161
  r = spreadsheet.intermediate_output_k161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l161
  r = spreadsheet.intermediate_output_l161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m161
  r = spreadsheet.intermediate_output_m161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n161
  r = spreadsheet.intermediate_output_n161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o161
  r = spreadsheet.intermediate_output_o161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p161
  r = spreadsheet.intermediate_output_p161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q161
  r = spreadsheet.intermediate_output_q161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c162
  r = spreadsheet.intermediate_output_c162
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f162
  r = spreadsheet.intermediate_output_f162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h162
  r = spreadsheet.intermediate_output_h162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.06308255895862,r[:number])
end

def test_intermediate_output_i162
  r = spreadsheet.intermediate_output_i162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-9.727927159777284,r[:number])
end

def test_intermediate_output_j162
  r = spreadsheet.intermediate_output_j162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.517123416542791,r[:number])
end

def test_intermediate_output_k162
  r = spreadsheet.intermediate_output_k162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-12.794964196213206,r[:number])
end

def test_intermediate_output_l162
  r = spreadsheet.intermediate_output_l162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.625774889952789,r[:number])
end

def test_intermediate_output_m162
  r = spreadsheet.intermediate_output_m162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-15.569313922099209,r[:number])
end

def test_intermediate_output_n162
  r = spreadsheet.intermediate_output_n162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-16.232975967615104,r[:number])
end

def test_intermediate_output_o162
  r = spreadsheet.intermediate_output_o162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-16.945394606192743,r[:number])
end

def test_intermediate_output_p162
  r = spreadsheet.intermediate_output_p162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-17.707880367178195,r[:number])
end

def test_intermediate_output_q162
  r = spreadsheet.intermediate_output_q162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-18.52120301679968,r[:number])
end

def test_intermediate_output_c163
  r = spreadsheet.intermediate_output_c163
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f163
  r = spreadsheet.intermediate_output_f163
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h163
  r = spreadsheet.intermediate_output_h163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.08340837179765,r[:number])
end

def test_intermediate_output_i163
  r = spreadsheet.intermediate_output_i163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.843294707610944,r[:number])
end

def test_intermediate_output_j163
  r = spreadsheet.intermediate_output_j163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.31568934263669,r[:number])
end

def test_intermediate_output_k163
  r = spreadsheet.intermediate_output_k163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.72194190442068,r[:number])
end

def test_intermediate_output_l163
  r = spreadsheet.intermediate_output_l163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.77125456499759,r[:number])
end

def test_intermediate_output_m163
  r = spreadsheet.intermediate_output_m163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.37908637995565,r[:number])
end

def test_intermediate_output_n163
  r = spreadsheet.intermediate_output_n163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92519862134839,r[:number])
end

def test_intermediate_output_o163
  r = spreadsheet.intermediate_output_o163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.1217958977555,r[:number])
end

def test_intermediate_output_p163
  r = spreadsheet.intermediate_output_p163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.00287408664136,r[:number])
end

def test_intermediate_output_q163
  r = spreadsheet.intermediate_output_q163
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.59541235029391,r[:number])
end

def test_intermediate_output_c164
  r = spreadsheet.intermediate_output_c164
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f164
  r = spreadsheet.intermediate_output_f164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity distribution, storage, and balancing",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h164
  r = spreadsheet.intermediate_output_h164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i164
  r = spreadsheet.intermediate_output_i164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j164
  r = spreadsheet.intermediate_output_j164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k164
  r = spreadsheet.intermediate_output_k164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l164
  r = spreadsheet.intermediate_output_l164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m164
  r = spreadsheet.intermediate_output_m164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n164
  r = spreadsheet.intermediate_output_n164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o164
  r = spreadsheet.intermediate_output_o164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p164
  r = spreadsheet.intermediate_output_p164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q164
  r = spreadsheet.intermediate_output_q164
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c165
  r = spreadsheet.intermediate_output_c165
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f165
  r = spreadsheet.intermediate_output_f165
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h165
  r = spreadsheet.intermediate_output_h165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i165
  r = spreadsheet.intermediate_output_i165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j165
  r = spreadsheet.intermediate_output_j165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k165
  r = spreadsheet.intermediate_output_k165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l165
  r = spreadsheet.intermediate_output_l165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m165
  r = spreadsheet.intermediate_output_m165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n165
  r = spreadsheet.intermediate_output_n165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o165
  r = spreadsheet.intermediate_output_o165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p165
  r = spreadsheet.intermediate_output_p165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q165
  r = spreadsheet.intermediate_output_q165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c166
  r = spreadsheet.intermediate_output_c166
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f166
  r = spreadsheet.intermediate_output_f166
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h166
  r = spreadsheet.intermediate_output_h166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.42746088138698,r[:number])
end

def test_intermediate_output_i166
  r = spreadsheet.intermediate_output_i166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.95109883345357,r[:number])
end

def test_intermediate_output_j166
  r = spreadsheet.intermediate_output_j166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.73022286990212,r[:number])
end

def test_intermediate_output_k166
  r = spreadsheet.intermediate_output_k166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.88949361637397,r[:number])
end

def test_intermediate_output_l166
  r = spreadsheet.intermediate_output_l166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.86768786103143,r[:number])
end

def test_intermediate_output_m166
  r = spreadsheet.intermediate_output_m166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.63235844756252,r[:number])
end

def test_intermediate_output_n166
  r = spreadsheet.intermediate_output_n166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.23766853832588,r[:number])
end

def test_intermediate_output_o166
  r = spreadsheet.intermediate_output_o166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.10407627300276,r[:number])
end

def test_intermediate_output_p166
  r = spreadsheet.intermediate_output_p166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.29522839507794,r[:number])
end

def test_intermediate_output_q166
  r = spreadsheet.intermediate_output_q166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.84040240808157,r[:number])
end

def test_intermediate_output_c167
  r = spreadsheet.intermediate_output_c167
  assert_equal(:ExcelString,r[:type])
  assert_equal("X",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f167
  r = spreadsheet.intermediate_output_f167
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting and appliances",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h167
  r = spreadsheet.intermediate_output_h167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.141184245661737,r[:number])
end

def test_intermediate_output_i167
  r = spreadsheet.intermediate_output_i167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1414794849371583,r[:number])
end

def test_intermediate_output_j167
  r = spreadsheet.intermediate_output_j167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1430116249066473,r[:number])
end

def test_intermediate_output_k167
  r = spreadsheet.intermediate_output_k167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1444715711432187,r[:number])
end

def test_intermediate_output_l167
  r = spreadsheet.intermediate_output_l167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1459194387889333,r[:number])
end

def test_intermediate_output_m167
  r = spreadsheet.intermediate_output_m167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.147384506518218,r[:number])
end

def test_intermediate_output_n167
  r = spreadsheet.intermediate_output_n167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.152030205423205,r[:number])
end

def test_intermediate_output_o167
  r = spreadsheet.intermediate_output_o167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1537507004118606,r[:number])
end

def test_intermediate_output_p167
  r = spreadsheet.intermediate_output_p167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1554726130591564,r[:number])
end

def test_intermediate_output_q167
  r = spreadsheet.intermediate_output_q167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.157195944639504,r[:number])
end

def test_intermediate_output_c168
  r = spreadsheet.intermediate_output_c168
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f168
  r = spreadsheet.intermediate_output_f168
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h168
  r = spreadsheet.intermediate_output_h168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.41484291354766,r[:number])
end

def test_intermediate_output_i168
  r = spreadsheet.intermediate_output_i168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.00150323723506,r[:number])
end

def test_intermediate_output_j168
  r = spreadsheet.intermediate_output_j168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.59741720562442,r[:number])
end

def test_intermediate_output_k168
  r = spreadsheet.intermediate_output_k168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.5686266242299,r[:number])
end

def test_intermediate_output_l168
  r = spreadsheet.intermediate_output_l168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.28548836188013,r[:number])
end

def test_intermediate_output_m168
  r = spreadsheet.intermediate_output_m168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.78943022435276,r[:number])
end

def test_intermediate_output_n168
  r = spreadsheet.intermediate_output_n168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.16524930442887,r[:number])
end

def test_intermediate_output_o168
  r = spreadsheet.intermediate_output_o168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.50723447386534,r[:number])
end

def test_intermediate_output_p168
  r = spreadsheet.intermediate_output_p168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.9202515674579,r[:number])
end

def test_intermediate_output_q168
  r = spreadsheet.intermediate_output_q168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(165.5209541617014,r[:number])
end

def test_intermediate_output_c169
  r = spreadsheet.intermediate_output_c169
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f169
  r = spreadsheet.intermediate_output_f169
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h169
  r = spreadsheet.intermediate_output_h169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.72938294460735,r[:number])
end

def test_intermediate_output_i169
  r = spreadsheet.intermediate_output_i169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.9231327172653,r[:number])
end

def test_intermediate_output_j169
  r = spreadsheet.intermediate_output_j169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.9417054583468,r[:number])
end

def test_intermediate_output_k169
  r = spreadsheet.intermediate_output_k169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.95807299666504,r[:number])
end

def test_intermediate_output_l169
  r = spreadsheet.intermediate_output_l169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.7021953552261,r[:number])
end

def test_intermediate_output_m169
  r = spreadsheet.intermediate_output_m169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.19531542257448,r[:number])
end

def test_intermediate_output_n169
  r = spreadsheet.intermediate_output_n169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.71412882658595,r[:number])
end

def test_intermediate_output_o169
  r = spreadsheet.intermediate_output_o169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.91811908128162,r[:number])
end

def test_intermediate_output_p169
  r = spreadsheet.intermediate_output_p169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.79241971415271,r[:number])
end

def test_intermediate_output_q169
  r = spreadsheet.intermediate_output_q169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.51194113099547,r[:number])
end

def test_intermediate_output_c170
  r = spreadsheet.intermediate_output_c170
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f170
  r = spreadsheet.intermediate_output_f170
  assert_equal(:ExcelString,r[:type])
  assert_equal("Food consumption [UNUSED]",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h170
  r = spreadsheet.intermediate_output_h170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i170
  r = spreadsheet.intermediate_output_i170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j170
  r = spreadsheet.intermediate_output_j170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k170
  r = spreadsheet.intermediate_output_k170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l170
  r = spreadsheet.intermediate_output_l170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m170
  r = spreadsheet.intermediate_output_m170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n170
  r = spreadsheet.intermediate_output_n170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o170
  r = spreadsheet.intermediate_output_o170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p170
  r = spreadsheet.intermediate_output_p170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q170
  r = spreadsheet.intermediate_output_q170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c171
  r = spreadsheet.intermediate_output_c171
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f171
  r = spreadsheet.intermediate_output_f171
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h171
  r = spreadsheet.intermediate_output_h171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i171
  r = spreadsheet.intermediate_output_i171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j171
  r = spreadsheet.intermediate_output_j171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k171
  r = spreadsheet.intermediate_output_k171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l171
  r = spreadsheet.intermediate_output_l171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m171
  r = spreadsheet.intermediate_output_m171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n171
  r = spreadsheet.intermediate_output_n171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o171
  r = spreadsheet.intermediate_output_o171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p171
  r = spreadsheet.intermediate_output_p171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q171
  r = spreadsheet.intermediate_output_q171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c172
  r = spreadsheet.intermediate_output_c172
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f172
  r = spreadsheet.intermediate_output_f172
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h172
  r = spreadsheet.intermediate_output_h172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.39920743834843,r[:number])
end

def test_intermediate_output_i172
  r = spreadsheet.intermediate_output_i172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.60246590539384,r[:number])
end

def test_intermediate_output_j172
  r = spreadsheet.intermediate_output_j172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.166079693467566,r[:number])
end

def test_intermediate_output_k172
  r = spreadsheet.intermediate_output_k172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.96536083310944,r[:number])
end

def test_intermediate_output_l172
  r = spreadsheet.intermediate_output_l172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.460345730333966,r[:number])
end

def test_intermediate_output_m172
  r = spreadsheet.intermediate_output_m172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.16434836936552,r[:number])
end

def test_intermediate_output_n172
  r = spreadsheet.intermediate_output_n172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.664503293983817,r[:number])
end

def test_intermediate_output_o172
  r = spreadsheet.intermediate_output_o172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.503951765450205,r[:number])
end

def test_intermediate_output_p172
  r = spreadsheet.intermediate_output_p172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.605939115684412,r[:number])
end

def test_intermediate_output_q172
  r = spreadsheet.intermediate_output_q172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.911074045661776,r[:number])
end

def test_intermediate_output_c173
  r = spreadsheet.intermediate_output_c173
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f173
  r = spreadsheet.intermediate_output_f173
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transfers",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h173
  r = spreadsheet.intermediate_output_h173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.370651364088464,r[:number])
end

def test_intermediate_output_i173
  r = spreadsheet.intermediate_output_i173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.4749758879895225,r[:number])
end

def test_intermediate_output_j173
  r = spreadsheet.intermediate_output_j173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.8268378349521575,r[:number])
end

def test_intermediate_output_k173
  r = spreadsheet.intermediate_output_k173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.374440700551223,r[:number])
end

def test_intermediate_output_l173
  r = spreadsheet.intermediate_output_l173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.2075713688848,r[:number])
end

def test_intermediate_output_m173
  r = spreadsheet.intermediate_output_m173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.038772470145664,r[:number])
end

def test_intermediate_output_n173
  r = spreadsheet.intermediate_output_n173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.723629516706557,r[:number])
end

def test_intermediate_output_o173
  r = spreadsheet.intermediate_output_o173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.316538316391078,r[:number])
end

def test_intermediate_output_p173
  r = spreadsheet.intermediate_output_p173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.931807106301969,r[:number])
end

def test_intermediate_output_q173
  r = spreadsheet.intermediate_output_q173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.458005972100564,r[:number])
end

def test_intermediate_output_c174
  r = spreadsheet.intermediate_output_c174
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f174
  r = spreadsheet.intermediate_output_f174
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h174
  r = spreadsheet.intermediate_output_h174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i174
  r = spreadsheet.intermediate_output_i174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j174
  r = spreadsheet.intermediate_output_j174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k174
  r = spreadsheet.intermediate_output_k174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l174
  r = spreadsheet.intermediate_output_l174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m174
  r = spreadsheet.intermediate_output_m174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n174
  r = spreadsheet.intermediate_output_n174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o174
  r = spreadsheet.intermediate_output_o174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p174
  r = spreadsheet.intermediate_output_p174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q174
  r = spreadsheet.intermediate_output_q174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f175
  r = spreadsheet.intermediate_output_f175
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h175
  r = spreadsheet.intermediate_output_h175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(662.6323967594291,r[:number])
end

def test_intermediate_output_i175
  r = spreadsheet.intermediate_output_i175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(655.1100568456684,r[:number])
end

def test_intermediate_output_j175
  r = spreadsheet.intermediate_output_j175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(647.5524333812318,r[:number])
end

def test_intermediate_output_k175
  r = spreadsheet.intermediate_output_k175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(640.8373614470162,r[:number])
end

def test_intermediate_output_l175
  r = spreadsheet.intermediate_output_l175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(634.8405027193006,r[:number])
end

def test_intermediate_output_m175
  r = spreadsheet.intermediate_output_m175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(633.6745233101743,r[:number])
end

def test_intermediate_output_n175
  r = spreadsheet.intermediate_output_n175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(664.0991339005865,r[:number])
end

def test_intermediate_output_o175
  r = spreadsheet.intermediate_output_o175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(693.5349605210155,r[:number])
end

def test_intermediate_output_p175
  r = spreadsheet.intermediate_output_p175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(724.8721260954513,r[:number])
end

def test_intermediate_output_q175
  r = spreadsheet.intermediate_output_q175
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(751.6831295491035,r[:number])
end

def test_intermediate_output_f176
  r = spreadsheet.intermediate_output_f176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions in the time period (up to and including year above)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i176
  r = spreadsheet.intermediate_output_i176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2627.962567296434,r[:number])
end

def test_intermediate_output_j176
  r = spreadsheet.intermediate_output_j176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3252.8774138350323,r[:number])
end

def test_intermediate_output_k176
  r = spreadsheet.intermediate_output_k176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3217.6169511035123,r[:number])
end

def test_intermediate_output_l176
  r = spreadsheet.intermediate_output_l176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3186.1962310519343,r[:number])
end

def test_intermediate_output_m176
  r = spreadsheet.intermediate_output_m176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3170.704575369124,r[:number])
end

def test_intermediate_output_n176
  r = spreadsheet.intermediate_output_n176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3259.646448322108,r[:number])
end

def test_intermediate_output_o176
  r = spreadsheet.intermediate_output_o176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3408.8031493642193,r[:number])
end

def test_intermediate_output_p176
  r = spreadsheet.intermediate_output_p176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3561.686299328385,r[:number])
end

def test_intermediate_output_q176
  r = spreadsheet.intermediate_output_q176
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3704.793640838213,r[:number])
end

def test_intermediate_output_r176
  r = spreadsheet.intermediate_output_r176
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED - All costs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c177
  r = spreadsheet.intermediate_output_c177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Modelled emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f177
  r = spreadsheet.intermediate_output_f177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i177
  r = spreadsheet.intermediate_output_i177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2627.962567296434,r[:number])
end

def test_intermediate_output_j177
  r = spreadsheet.intermediate_output_j177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5880.839981131467,r[:number])
end

def test_intermediate_output_k177
  r = spreadsheet.intermediate_output_k177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9098.456932234978,r[:number])
end

def test_intermediate_output_l177
  r = spreadsheet.intermediate_output_l177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12284.653163286912,r[:number])
end

def test_intermediate_output_m177
  r = spreadsheet.intermediate_output_m177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15455.357738656036,r[:number])
end

def test_intermediate_output_n177
  r = spreadsheet.intermediate_output_n177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18715.00418697814,r[:number])
end

def test_intermediate_output_o177
  r = spreadsheet.intermediate_output_o177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22123.80733634236,r[:number])
end

def test_intermediate_output_p177
  r = spreadsheet.intermediate_output_p177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25685.493635670748,r[:number])
end

def test_intermediate_output_q177
  r = spreadsheet.intermediate_output_q177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29390.28727650896,r[:number])
end

def test_intermediate_output_d179
  r = spreadsheet.intermediate_output_d179
  assert_equal(:ExcelString,r[:type])
  assert_equal("IPCC Sector",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f179
  r = spreadsheet.intermediate_output_f179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Actuals, GHG Inv.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q179
  r = spreadsheet.intermediate_output_q179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mt CO2e",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c180
  r = spreadsheet.intermediate_output_c180
  assert_equal(:ExcelString,r[:type])
  assert_equal("1A",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d180
  r = spreadsheet.intermediate_output_d180
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f180
  r = spreadsheet.intermediate_output_f180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(532.6387375112939,r[:number])
end

def test_intermediate_output_h180
  r = spreadsheet.intermediate_output_h180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(515.3867661226177,r[:number])
end

def test_intermediate_output_i180
  r = spreadsheet.intermediate_output_i180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(518.4763620730675,r[:number])
end

def test_intermediate_output_j180
  r = spreadsheet.intermediate_output_j180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(508.17424564741026,r[:number])
end

def test_intermediate_output_k180
  r = spreadsheet.intermediate_output_k180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.3035093982542,r[:number])
end

def test_intermediate_output_l180
  r = spreadsheet.intermediate_output_l180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(488.0733636537022,r[:number])
end

def test_intermediate_output_m180
  r = spreadsheet.intermediate_output_m180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.59148811847797,r[:number])
end

def test_intermediate_output_n180
  r = spreadsheet.intermediate_output_n180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.89332708244854,r[:number])
end

def test_intermediate_output_o180
  r = spreadsheet.intermediate_output_o180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(530.2812993718057,r[:number])
end

def test_intermediate_output_p180
  r = spreadsheet.intermediate_output_p180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.0673169327632,r[:number])
end

def test_intermediate_output_q180
  r = spreadsheet.intermediate_output_q180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.6463046497499,r[:number])
end

def test_intermediate_output_c181
  r = spreadsheet.intermediate_output_c181
  assert_equal(:ExcelString,r[:type])
  assert_equal("1B",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d181
  r = spreadsheet.intermediate_output_d181
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fugitive Emissions from Fuels",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f181
  r = spreadsheet.intermediate_output_f181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.3650064404099,r[:number])
end

def test_intermediate_output_h181
  r = spreadsheet.intermediate_output_h181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.10264631136367,r[:number])
end

def test_intermediate_output_i181
  r = spreadsheet.intermediate_output_i181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.377573689629285,r[:number])
end

def test_intermediate_output_j181
  r = spreadsheet.intermediate_output_j181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.91697603357635,r[:number])
end

def test_intermediate_output_k181
  r = spreadsheet.intermediate_output_k181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.707837772224696,r[:number])
end

def test_intermediate_output_l181
  r = spreadsheet.intermediate_output_l181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.948711502474438,r[:number])
end

def test_intermediate_output_m181
  r = spreadsheet.intermediate_output_m181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.96397104865273,r[:number])
end

def test_intermediate_output_n181
  r = spreadsheet.intermediate_output_n181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.294221988862613,r[:number])
end

def test_intermediate_output_o181
  r = spreadsheet.intermediate_output_o181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.612743343131624,r[:number])
end

def test_intermediate_output_p181
  r = spreadsheet.intermediate_output_p181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.015696358290674,r[:number])
end

def test_intermediate_output_q181
  r = spreadsheet.intermediate_output_q181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.377609324855749,r[:number])
end

def test_intermediate_output_c182
  r = spreadsheet.intermediate_output_c182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_intermediate_output_d182
  r = spreadsheet.intermediate_output_d182
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f182
  r = spreadsheet.intermediate_output_f182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(546.0037439517039,r[:number])
end

def test_intermediate_output_h182
  r = spreadsheet.intermediate_output_h182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(527.4894124339813,r[:number])
end

def test_intermediate_output_i182
  r = spreadsheet.intermediate_output_i182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.8539357626968,r[:number])
end

def test_intermediate_output_j182
  r = spreadsheet.intermediate_output_j182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(519.0912216809866,r[:number])
end

def test_intermediate_output_k182
  r = spreadsheet.intermediate_output_k182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(512.0113471704789,r[:number])
end

def test_intermediate_output_l182
  r = spreadsheet.intermediate_output_l182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(499.02207515617664,r[:number])
end

def test_intermediate_output_m182
  r = spreadsheet.intermediate_output_m182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(491.5554591671307,r[:number])
end

def test_intermediate_output_n182
  r = spreadsheet.intermediate_output_n182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(515.1875490713112,r[:number])
end

def test_intermediate_output_o182
  r = spreadsheet.intermediate_output_o182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(540.8940427149373,r[:number])
end

def test_intermediate_output_p182
  r = spreadsheet.intermediate_output_p182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(569.0830132910539,r[:number])
end

def test_intermediate_output_q182
  r = spreadsheet.intermediate_output_q182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(594.0239139746056,r[:number])
end

def test_intermediate_output_c183
  r = spreadsheet.intermediate_output_c183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0,r[:number])
end

def test_intermediate_output_d183
  r = spreadsheet.intermediate_output_d183
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial Processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f183
  r = spreadsheet.intermediate_output_f183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.8913120599484,r[:number])
end

def test_intermediate_output_h183
  r = spreadsheet.intermediate_output_h183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.891312059948405,r[:number])
end

def test_intermediate_output_i183
  r = spreadsheet.intermediate_output_i183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.22138704196695,r[:number])
end

def test_intermediate_output_j183
  r = spreadsheet.intermediate_output_j183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.849107848156855,r[:number])
end

def test_intermediate_output_k183
  r = spreadsheet.intermediate_output_k183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.577156358435566,r[:number])
end

def test_intermediate_output_l183
  r = spreadsheet.intermediate_output_l183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.76521840566171,r[:number])
end

def test_intermediate_output_m183
  r = spreadsheet.intermediate_output_m183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.041869436587184,r[:number])
end

def test_intermediate_output_n183
  r = spreadsheet.intermediate_output_n183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.413238446840964,r[:number])
end

def test_intermediate_output_o183
  r = spreadsheet.intermediate_output_o183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.885887258858915,r[:number])
end

def test_intermediate_output_p183
  r = spreadsheet.intermediate_output_p183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.4668410973334,r[:number])
end

def test_intermediate_output_q183
  r = spreadsheet.intermediate_output_q183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.1636213274151,r[:number])
end

def test_intermediate_output_c184
  r = spreadsheet.intermediate_output_c184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0,r[:number])
end

def test_intermediate_output_d184
  r = spreadsheet.intermediate_output_d184
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solvent and Other Product Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f184
  r = spreadsheet.intermediate_output_f184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h184
  r = spreadsheet.intermediate_output_h184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i184
  r = spreadsheet.intermediate_output_i184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j184
  r = spreadsheet.intermediate_output_j184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k184
  r = spreadsheet.intermediate_output_k184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l184
  r = spreadsheet.intermediate_output_l184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m184
  r = spreadsheet.intermediate_output_m184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n184
  r = spreadsheet.intermediate_output_n184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o184
  r = spreadsheet.intermediate_output_o184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p184
  r = spreadsheet.intermediate_output_p184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q184
  r = spreadsheet.intermediate_output_q184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c185
  r = spreadsheet.intermediate_output_c185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0,r[:number])
end

def test_intermediate_output_d185
  r = spreadsheet.intermediate_output_d185
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f185
  r = spreadsheet.intermediate_output_f185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4591660991799,r[:number])
end

def test_intermediate_output_h185
  r = spreadsheet.intermediate_output_h185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.3067326,r[:number])
end

def test_intermediate_output_i185
  r = spreadsheet.intermediate_output_i185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.546514044392154,r[:number])
end

def test_intermediate_output_j185
  r = spreadsheet.intermediate_output_j185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.43432845352159,r[:number])
end

def test_intermediate_output_k185
  r = spreadsheet.intermediate_output_k185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.355073278960084,r[:number])
end

def test_intermediate_output_l185
  r = spreadsheet.intermediate_output_l185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.54933612174251,r[:number])
end

def test_intermediate_output_m185
  r = spreadsheet.intermediate_output_m185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.74705925720603,r[:number])
end

def test_intermediate_output_n185
  r = spreadsheet.intermediate_output_n185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.94833472074905,r[:number])
end

def test_intermediate_output_o185
  r = spreadsheet.intermediate_output_o185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.15325740991057,r[:number])
end

def test_intermediate_output_p185
  r = spreadsheet.intermediate_output_p185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.36192517715773,r[:number])
end

def test_intermediate_output_q185
  r = spreadsheet.intermediate_output_q185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.5744389257109,r[:number])
end

def test_intermediate_output_c186
  r = spreadsheet.intermediate_output_c186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_intermediate_output_d186
  r = spreadsheet.intermediate_output_d186
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land Use, Land-Use Change and Forestry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f186
  r = spreadsheet.intermediate_output_f186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.7798396847837301,r[:number])
end

def test_intermediate_output_h186
  r = spreadsheet.intermediate_output_h186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.824795399999999,r[:number])
end

def test_intermediate_output_i186
  r = spreadsheet.intermediate_output_i186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.549557736117353,r[:number])
end

def test_intermediate_output_j186
  r = spreadsheet.intermediate_output_j186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.933544988096667,r[:number])
end

def test_intermediate_output_k186
  r = spreadsheet.intermediate_output_k186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.216509860464468,r[:number])
end

def test_intermediate_output_l186
  r = spreadsheet.intermediate_output_l186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.250768713675887,r[:number])
end

def test_intermediate_output_m186
  r = spreadsheet.intermediate_output_m186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.957206773343671,r[:number])
end

def test_intermediate_output_n186
  r = spreadsheet.intermediate_output_n186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.259955560261957,r[:number])
end

def test_intermediate_output_o186
  r = spreadsheet.intermediate_output_o186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.273591570430609,r[:number])
end

def test_intermediate_output_p186
  r = spreadsheet.intermediate_output_p186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.03013906507904,r[:number])
end

def test_intermediate_output_q186
  r = spreadsheet.intermediate_output_q186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.556420470689867,r[:number])
end

def test_intermediate_output_c187
  r = spreadsheet.intermediate_output_c187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0,r[:number])
end

def test_intermediate_output_d187
  r = spreadsheet.intermediate_output_d187
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f187
  r = spreadsheet.intermediate_output_f187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.8602295816192,r[:number])
end

def test_intermediate_output_h187
  r = spreadsheet.intermediate_output_h187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.0979625,r[:number])
end

def test_intermediate_output_i187
  r = spreadsheet.intermediate_output_i187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.21267066552306,r[:number])
end

def test_intermediate_output_j187
  r = spreadsheet.intermediate_output_j187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.403677907027117,r[:number])
end

def test_intermediate_output_k187
  r = spreadsheet.intermediate_output_k187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.596569237935283,r[:number])
end

def test_intermediate_output_l187
  r = spreadsheet.intermediate_output_l187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.407642135495301,r[:number])
end

def test_intermediate_output_m187
  r = spreadsheet.intermediate_output_m187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.10152741287662,r[:number])
end

def test_intermediate_output_n187
  r = spreadsheet.intermediate_output_n187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.133762036208225,r[:number])
end

def test_intermediate_output_o187
  r = spreadsheet.intermediate_output_o187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.101878462443766,r[:number])
end

def test_intermediate_output_p187
  r = spreadsheet.intermediate_output_p187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.007749688815606,r[:number])
end

def test_intermediate_output_q187
  r = spreadsheet.intermediate_output_q187
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.851430772830827,r[:number])
end

def test_intermediate_output_c188
  r = spreadsheet.intermediate_output_c188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.0,r[:number])
end

def test_intermediate_output_d188
  r = spreadsheet.intermediate_output_d188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h188
  r = spreadsheet.intermediate_output_h188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i188
  r = spreadsheet.intermediate_output_i188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j188
  r = spreadsheet.intermediate_output_j188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k188
  r = spreadsheet.intermediate_output_k188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l188
  r = spreadsheet.intermediate_output_l188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m188
  r = spreadsheet.intermediate_output_m188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n188
  r = spreadsheet.intermediate_output_n188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o188
  r = spreadsheet.intermediate_output_o188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p188
  r = spreadsheet.intermediate_output_p188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q188
  r = spreadsheet.intermediate_output_q188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c189
  r = spreadsheet.intermediate_output_c189
  assert_equal(:ExcelString,r[:type])
  assert_equal("X1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d189
  r = spreadsheet.intermediate_output_d189
  assert_equal(:ExcelString,r[:type])
  assert_equal("International Aviation and Shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f189
  r = spreadsheet.intermediate_output_f189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.52436,r[:number])
end

def test_intermediate_output_h189
  r = spreadsheet.intermediate_output_h189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.73485512445805,r[:number])
end

def test_intermediate_output_i189
  r = spreadsheet.intermediate_output_i189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.453918754749346,r[:number])
end

def test_intermediate_output_j189
  r = spreadsheet.intermediate_output_j189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.19269100274443,r[:number])
end

def test_intermediate_output_k189
  r = spreadsheet.intermediate_output_k189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.554128553904185,r[:number])
end

def test_intermediate_output_l189
  r = spreadsheet.intermediate_output_l189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.00928576171873,r[:number])
end

def test_intermediate_output_m189
  r = spreadsheet.intermediate_output_m189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.24417545140071,r[:number])
end

def test_intermediate_output_n189
  r = spreadsheet.intermediate_output_n189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.66360699371727,r[:number])
end

def test_intermediate_output_o189
  r = spreadsheet.intermediate_output_o189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.43181920884129,r[:number])
end

def test_intermediate_output_p189
  r = spreadsheet.intermediate_output_p189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.76691774229698,r[:number])
end

def test_intermediate_output_q189
  r = spreadsheet.intermediate_output_q189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.05235935157397,r[:number])
end

def test_intermediate_output_c190
  r = spreadsheet.intermediate_output_c190
  assert_equal(:ExcelString,r[:type])
  assert_equal("X2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d190
  r = spreadsheet.intermediate_output_d190
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy credit",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h190
  r = spreadsheet.intermediate_output_h190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.06308255895862,r[:number])
end

def test_intermediate_output_i190
  r = spreadsheet.intermediate_output_i190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-9.727927159777284,r[:number])
end

def test_intermediate_output_j190
  r = spreadsheet.intermediate_output_j190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.517123416542791,r[:number])
end

def test_intermediate_output_k190
  r = spreadsheet.intermediate_output_k190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-12.794964196213206,r[:number])
end

def test_intermediate_output_l190
  r = spreadsheet.intermediate_output_l190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.625774889952789,r[:number])
end

def test_intermediate_output_m190
  r = spreadsheet.intermediate_output_m190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-15.569313922099209,r[:number])
end

def test_intermediate_output_n190
  r = spreadsheet.intermediate_output_n190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-16.232975967615104,r[:number])
end

def test_intermediate_output_o190
  r = spreadsheet.intermediate_output_o190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-16.945394606192743,r[:number])
end

def test_intermediate_output_p190
  r = spreadsheet.intermediate_output_p190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-17.707880367178195,r[:number])
end

def test_intermediate_output_q190
  r = spreadsheet.intermediate_output_q190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-18.52120301679968,r[:number])
end

def test_intermediate_output_c191
  r = spreadsheet.intermediate_output_c191
  assert_equal(:ExcelString,r[:type])
  assert_equal("X3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d191
  r = spreadsheet.intermediate_output_d191
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon capture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h191
  r = spreadsheet.intermediate_output_h191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i191
  r = spreadsheet.intermediate_output_i191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j191
  r = spreadsheet.intermediate_output_j191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.8350150827586207,r[:number])
end

def test_intermediate_output_k191
  r = spreadsheet.intermediate_output_k191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.678458816949153,r[:number])
end

def test_intermediate_output_l191
  r = spreadsheet.intermediate_output_l191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.538048685217391,r[:number])
end

def test_intermediate_output_m191
  r = spreadsheet.intermediate_output_m191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.403460266271363,r[:number])
end

def test_intermediate_output_n191
  r = spreadsheet.intermediate_output_n191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.274336960887095,r[:number])
end

def test_intermediate_output_o191
  r = spreadsheet.intermediate_output_o191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.260121498214285,r[:number])
end

def test_intermediate_output_p191
  r = spreadsheet.intermediate_output_p191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.136579599107142,r[:number])
end

def test_intermediate_output_q191
  r = spreadsheet.intermediate_output_q191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.017852256923077,r[:number])
end

def test_intermediate_output_d192
  r = spreadsheet.intermediate_output_d192
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f192
  r = spreadsheet.intermediate_output_f192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(680.9589720076677,r[:number])
end

def test_intermediate_output_h192
  r = spreadsheet.intermediate_output_h192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(662.6323967594292,r[:number])
end

def test_intermediate_output_i192
  r = spreadsheet.intermediate_output_i192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(655.1100568456683,r[:number])
end

def test_intermediate_output_j192
  r = spreadsheet.intermediate_output_j192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(647.5524333812319,r[:number])
end

def test_intermediate_output_k192
  r = spreadsheet.intermediate_output_k192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(640.8373614470161,r[:number])
end

def test_intermediate_output_l192
  r = spreadsheet.intermediate_output_l192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(634.8405027193006,r[:number])
end

def test_intermediate_output_m192
  r = spreadsheet.intermediate_output_m192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(633.6745233101742,r[:number])
end

def test_intermediate_output_n192
  r = spreadsheet.intermediate_output_n192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(664.0991339005865,r[:number])
end

def test_intermediate_output_o192
  r = spreadsheet.intermediate_output_o192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(693.5349605210155,r[:number])
end

def test_intermediate_output_p192
  r = spreadsheet.intermediate_output_p192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(724.8721260954513,r[:number])
end

def test_intermediate_output_q192
  r = spreadsheet.intermediate_output_q192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(751.6831295491035,r[:number])
end

def test_intermediate_output_r192
  r = spreadsheet.intermediate_output_r192
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED - All costs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c194
  r = spreadsheet.intermediate_output_c194
  assert_equal(:ExcelString,r[:type])
  assert_equal("Excluding international bunkers",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f194
  r = spreadsheet.intermediate_output_f194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.4346120076677,r[:number])
end

def test_intermediate_output_h194
  r = spreadsheet.intermediate_output_h194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(609.8975416349712,r[:number])
end

def test_intermediate_output_i194
  r = spreadsheet.intermediate_output_i194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(608.656138090919,r[:number])
end

def test_intermediate_output_j194
  r = spreadsheet.intermediate_output_j194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(595.3597423784875,r[:number])
end

def test_intermediate_output_k194
  r = spreadsheet.intermediate_output_k194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.2832328931119,r[:number])
end

def test_intermediate_output_l194
  r = spreadsheet.intermediate_output_l194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(571.8312169575819,r[:number])
end

def test_intermediate_output_m194
  r = spreadsheet.intermediate_output_m194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(566.4303478587735,r[:number])
end

def test_intermediate_output_n194
  r = spreadsheet.intermediate_output_n194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(591.4355269068692,r[:number])
end

def test_intermediate_output_o194
  r = spreadsheet.intermediate_output_o194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(617.1031413121742,r[:number])
end

def test_intermediate_output_p194
  r = spreadsheet.intermediate_output_p194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.1052083531544,r[:number])
end

def test_intermediate_output_q194
  r = spreadsheet.intermediate_output_q194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(670.6307701975295,r[:number])
end

def test_intermediate_output_r194
  r = spreadsheet.intermediate_output_r194
  assert_equal(:ExcelString,r[:type])
  assert_equal("REFERENCED - All costs",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c197
  r = spreadsheet.intermediate_output_c197
  assert_equal(:ExcelString,r[:type])
  assert_equal("Please note: emissions by sector need to account for bio-energy, which is accounted for seperately (in V). ",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c198
  r = spreadsheet.intermediate_output_c198
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cumulative emissions are estimates based on a linear trajectory between the 5 year time periods",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c201
  r = spreadsheet.intermediate_output_c201
  assert_equal(:ExcelString,r[:type])
  assert_equal("Targets",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h201
  r = spreadsheet.intermediate_output_h201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 target",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i201
  r = spreadsheet.intermediate_output_i201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020 target ",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k201
  r = spreadsheet.intermediate_output_k201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 target",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l201
  r = spreadsheet.intermediate_output_l201
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020 target",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n201
  r = spreadsheet.intermediate_output_n201
  assert_equal(:ExcelString,r[:type])
  assert_equal("Actuals, as % of 2007, modelled",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f202
  r = spreadsheet.intermediate_output_f202
  assert_equal(:ExcelString,r[:type])
  assert_equal("Base year (1990)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h202
  r = spreadsheet.intermediate_output_h202
  assert_equal(:ExcelString,r[:type])
  assert_equal("(20% of base)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i202
  r = spreadsheet.intermediate_output_i202
  assert_equal(:ExcelString,r[:type])
  assert_equal("(66% of base)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k202
  r = spreadsheet.intermediate_output_k202
  assert_equal(:ExcelString,r[:type])
  assert_equal("% of 2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l202
  r = spreadsheet.intermediate_output_l202
  assert_equal(:ExcelString,r[:type])
  assert_equal("% of 2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o202
  r = spreadsheet.intermediate_output_o202
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_p202
  r = spreadsheet.intermediate_output_p202
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_q202
  r = spreadsheet.intermediate_output_q202
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_d203
  r = spreadsheet.intermediate_output_d203
  assert_equal(:ExcelString,r[:type])
  assert_equal("Kyoto agreed sectors",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f203
  r = spreadsheet.intermediate_output_f203
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(777.11767,r[:number])
end

def test_intermediate_output_h203
  r = spreadsheet.intermediate_output_h203
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.42353400000002,r[:number])
end

def test_intermediate_output_i203
  r = spreadsheet.intermediate_output_i203
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(512.8976622,r[:number])
end

def test_intermediate_output_d204
  r = spreadsheet.intermediate_output_d204
  assert_equal(:ExcelString,r[:type])
  assert_equal("International bunkers (CO2 only)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f204
  r = spreadsheet.intermediate_output_f204
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.4685,r[:number])
end

def test_intermediate_output_k204
  r = spreadsheet.intermediate_output_k204
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.91723400000006,r[:number])
end

def test_intermediate_output_l204
  r = spreadsheet.intermediate_output_l204
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(527.7268722000002,r[:number])
end

def test_intermediate_output_d205
  r = spreadsheet.intermediate_output_d205
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f205
  r = spreadsheet.intermediate_output_f205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(799.5861699999999,r[:number])
end

def test_intermediate_output_h205
  r = spreadsheet.intermediate_output_h205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.917234,r[:number])
end

def test_intermediate_output_i205
  r = spreadsheet.intermediate_output_i205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(527.7268722,r[:number])
end

def test_intermediate_output_k205
  r = spreadsheet.intermediate_output_k205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.77578959575553,r[:number])
end

def test_intermediate_output_l205
  r = spreadsheet.intermediate_output_l205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(619.6601056659932,r[:number])
end

def test_intermediate_output_o205
  r = spreadsheet.intermediate_output_o205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9671084066837045,r[:number])
end

def test_intermediate_output_p205
  r = spreadsheet.intermediate_output_p205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9562987357834118,r[:number])
end

def test_intermediate_output_q205
  r = spreadsheet.intermediate_output_q205
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1343893435110814,r[:number])
end

def test_intermediate_output_d206
  r = spreadsheet.intermediate_output_d206
  assert_equal(:ExcelString,r[:type])
  assert_equal("Target, for chart",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h206
  r = spreadsheet.intermediate_output_h206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_i206
  r = spreadsheet.intermediate_output_i206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_j206
  r = spreadsheet.intermediate_output_j206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_k206
  r = spreadsheet.intermediate_output_k206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_l206
  r = spreadsheet.intermediate_output_l206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_m206
  r = spreadsheet.intermediate_output_m206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_n206
  r = spreadsheet.intermediate_output_n206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_o206
  r = spreadsheet.intermediate_output_o206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_p206
  r = spreadsheet.intermediate_output_p206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_q206
  r = spreadsheet.intermediate_output_q206
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2,r[:number])
end

def test_intermediate_output_d207
  r = spreadsheet.intermediate_output_d207
  assert_equal(:ExcelString,r[:type])
  assert_equal("Dummy, for chart",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h207
  r = spreadsheet.intermediate_output_h207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i207
  r = spreadsheet.intermediate_output_i207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j207
  r = spreadsheet.intermediate_output_j207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k207
  r = spreadsheet.intermediate_output_k207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l207
  r = spreadsheet.intermediate_output_l207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m207
  r = spreadsheet.intermediate_output_m207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n207
  r = spreadsheet.intermediate_output_n207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o207
  r = spreadsheet.intermediate_output_o207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p207
  r = spreadsheet.intermediate_output_p207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q207
  r = spreadsheet.intermediate_output_q207
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_b210
  r = spreadsheet.intermediate_output_b210
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-energy - Production and Use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_b212
  r = spreadsheet.intermediate_output_b212
  assert_equal(:ExcelString,r[:type])
  assert_equal("Production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c214
  r = spreadsheet.intermediate_output_c214
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h214
  r = spreadsheet.intermediate_output_h214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i214
  r = spreadsheet.intermediate_output_i214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j214
  r = spreadsheet.intermediate_output_j214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k214
  r = spreadsheet.intermediate_output_k214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l214
  r = spreadsheet.intermediate_output_l214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m214
  r = spreadsheet.intermediate_output_m214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n214
  r = spreadsheet.intermediate_output_n214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o214
  r = spreadsheet.intermediate_output_o214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p214
  r = spreadsheet.intermediate_output_p214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q214
  r = spreadsheet.intermediate_output_q214
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c215
  r = spreadsheet.intermediate_output_c215
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d215
  r = spreadsheet.intermediate_output_d215
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e215
  r = spreadsheet.intermediate_output_e215
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h215
  r = spreadsheet.intermediate_output_h215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.727592565398165,r[:number])
end

def test_intermediate_output_i215
  r = spreadsheet.intermediate_output_i215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.6952277934,r[:number])
end

def test_intermediate_output_j215
  r = spreadsheet.intermediate_output_j215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.807364904225004,r[:number])
end

def test_intermediate_output_k215
  r = spreadsheet.intermediate_output_k215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.9578694341,r[:number])
end

def test_intermediate_output_l215
  r = spreadsheet.intermediate_output_l215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.31595716513819,r[:number])
end

def test_intermediate_output_m215
  r = spreadsheet.intermediate_output_m215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.850401876699994,r[:number])
end

def test_intermediate_output_n215
  r = spreadsheet.intermediate_output_n215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.35724666577778,r[:number])
end

def test_intermediate_output_o215
  r = spreadsheet.intermediate_output_o215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.916433165955553,r[:number])
end

def test_intermediate_output_p215
  r = spreadsheet.intermediate_output_p215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.527961377233332,r[:number])
end

def test_intermediate_output_q215
  r = spreadsheet.intermediate_output_q215
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.19183129961111,r[:number])
end

def test_intermediate_output_c216
  r = spreadsheet.intermediate_output_c216
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d216
  r = spreadsheet.intermediate_output_d216
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e216
  r = spreadsheet.intermediate_output_e216
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h216
  r = spreadsheet.intermediate_output_h216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.562605222222222,r[:number])
end

def test_intermediate_output_i216
  r = spreadsheet.intermediate_output_i216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0691270054227253,r[:number])
end

def test_intermediate_output_j216
  r = spreadsheet.intermediate_output_j216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6812610687861258,r[:number])
end

def test_intermediate_output_k216
  r = spreadsheet.intermediate_output_k216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3096705383941964,r[:number])
end

def test_intermediate_output_l216
  r = spreadsheet.intermediate_output_l216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.528739363098261,r[:number])
end

def test_intermediate_output_m216
  r = spreadsheet.intermediate_output_m216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.329131457560122,r[:number])
end

def test_intermediate_output_n216
  r = spreadsheet.intermediate_output_n216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.1504279377230455,r[:number])
end

def test_intermediate_output_o216
  r = spreadsheet.intermediate_output_o216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.993130384698937,r[:number])
end

def test_intermediate_output_p216
  r = spreadsheet.intermediate_output_p216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.857757484212166,r[:number])
end

def test_intermediate_output_q216
  r = spreadsheet.intermediate_output_q216
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.744845969984378,r[:number])
end

def test_intermediate_output_c217
  r = spreadsheet.intermediate_output_c217
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d217
  r = spreadsheet.intermediate_output_d217
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e217
  r = spreadsheet.intermediate_output_e217
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h217
  r = spreadsheet.intermediate_output_h217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.230008822067568,r[:number])
end

def test_intermediate_output_i217
  r = spreadsheet.intermediate_output_i217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.298750109496886,r[:number])
end

def test_intermediate_output_j217
  r = spreadsheet.intermediate_output_j217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.750204806664975,r[:number])
end

def test_intermediate_output_k217
  r = spreadsheet.intermediate_output_k217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.205781820552314,r[:number])
end

def test_intermediate_output_l217
  r = spreadsheet.intermediate_output_l217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.73401888518371,r[:number])
end

def test_intermediate_output_m217
  r = spreadsheet.intermediate_output_m217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.3876884007179,r[:number])
end

def test_intermediate_output_n217
  r = spreadsheet.intermediate_output_n217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.21199755249822,r[:number])
end

def test_intermediate_output_o217
  r = spreadsheet.intermediate_output_o217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.18458852134214,r[:number])
end

def test_intermediate_output_p217
  r = spreadsheet.intermediate_output_p217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.31187901330933,r[:number])
end

def test_intermediate_output_q217
  r = spreadsheet.intermediate_output_q217
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.597323282735694,r[:number])
end

def test_intermediate_output_c219
  r = spreadsheet.intermediate_output_c219
  assert_equal(:ExcelString,r[:type])
  assert_equal("Imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c220
  r = spreadsheet.intermediate_output_c220
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d220
  r = spreadsheet.intermediate_output_d220
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e220
  r = spreadsheet.intermediate_output_e220
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h220
  r = spreadsheet.intermediate_output_h220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.39614,r[:number])
end

def test_intermediate_output_i220
  r = spreadsheet.intermediate_output_i220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.089432558139535,r[:number])
end

def test_intermediate_output_j220
  r = spreadsheet.intermediate_output_j220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.578253488372093,r[:number])
end

def test_intermediate_output_k220
  r = spreadsheet.intermediate_output_k220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0670744186046512,r[:number])
end

def test_intermediate_output_l220
  r = spreadsheet.intermediate_output_l220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5558953488372094,r[:number])
end

def test_intermediate_output_m220
  r = spreadsheet.intermediate_output_m220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0447162790697675,r[:number])
end

def test_intermediate_output_n220
  r = spreadsheet.intermediate_output_n220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5335372093023256,r[:number])
end

def test_intermediate_output_o220
  r = spreadsheet.intermediate_output_o220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0223581395348837,r[:number])
end

def test_intermediate_output_p220
  r = spreadsheet.intermediate_output_p220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5111790697674419,r[:number])
end

def test_intermediate_output_q220
  r = spreadsheet.intermediate_output_q220
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c221
  r = spreadsheet.intermediate_output_c221
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d221
  r = spreadsheet.intermediate_output_d221
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e221
  r = spreadsheet.intermediate_output_e221
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h221
  r = spreadsheet.intermediate_output_h221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.39542,r[:number])
end

def test_intermediate_output_i221
  r = spreadsheet.intermediate_output_i221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.36783255813953486,r[:number])
end

def test_intermediate_output_j221
  r = spreadsheet.intermediate_output_j221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.32185348837209304,r[:number])
end

def test_intermediate_output_k221
  r = spreadsheet.intermediate_output_k221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.2758744186046512,r[:number])
end

def test_intermediate_output_l221
  r = spreadsheet.intermediate_output_l221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.2298953488372093,r[:number])
end

def test_intermediate_output_m221
  r = spreadsheet.intermediate_output_m221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.18391627906976743,r[:number])
end

def test_intermediate_output_n221
  r = spreadsheet.intermediate_output_n221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.13793720930232556,r[:number])
end

def test_intermediate_output_o221
  r = spreadsheet.intermediate_output_o221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.09195813953488369,r[:number])
end

def test_intermediate_output_p221
  r = spreadsheet.intermediate_output_p221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.04597906976744187,r[:number])
end

def test_intermediate_output_q221
  r = spreadsheet.intermediate_output_q221
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c222
  r = spreadsheet.intermediate_output_c222
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d222
  r = spreadsheet.intermediate_output_d222
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e222
  r = spreadsheet.intermediate_output_e222
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h222
  r = spreadsheet.intermediate_output_h222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i222
  r = spreadsheet.intermediate_output_i222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j222
  r = spreadsheet.intermediate_output_j222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k222
  r = spreadsheet.intermediate_output_k222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l222
  r = spreadsheet.intermediate_output_l222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m222
  r = spreadsheet.intermediate_output_m222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n222
  r = spreadsheet.intermediate_output_n222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o222
  r = spreadsheet.intermediate_output_o222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p222
  r = spreadsheet.intermediate_output_p222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q222
  r = spreadsheet.intermediate_output_q222
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c224
  r = spreadsheet.intermediate_output_c224
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c225
  r = spreadsheet.intermediate_output_c225
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d225
  r = spreadsheet.intermediate_output_d225
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e225
  r = spreadsheet.intermediate_output_e225
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h225
  r = spreadsheet.intermediate_output_h225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.123732565398164,r[:number])
end

def test_intermediate_output_i225
  r = spreadsheet.intermediate_output_i225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.784660351539536,r[:number])
end

def test_intermediate_output_j225
  r = spreadsheet.intermediate_output_j225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.385618392597095,r[:number])
end

def test_intermediate_output_k225
  r = spreadsheet.intermediate_output_k225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.024943852704652,r[:number])
end

def test_intermediate_output_l225
  r = spreadsheet.intermediate_output_l225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.871852513975398,r[:number])
end

def test_intermediate_output_m225
  r = spreadsheet.intermediate_output_m225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.89511815576976,r[:number])
end

def test_intermediate_output_n225
  r = spreadsheet.intermediate_output_n225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.890783875080103,r[:number])
end

def test_intermediate_output_o225
  r = spreadsheet.intermediate_output_o225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.938791305490437,r[:number])
end

def test_intermediate_output_p225
  r = spreadsheet.intermediate_output_p225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.039140447000776,r[:number])
end

def test_intermediate_output_q225
  r = spreadsheet.intermediate_output_q225
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.19183129961111,r[:number])
end

def test_intermediate_output_c226
  r = spreadsheet.intermediate_output_c226
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d226
  r = spreadsheet.intermediate_output_d226
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e226
  r = spreadsheet.intermediate_output_e226
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h226
  r = spreadsheet.intermediate_output_h226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1671852222222219,r[:number])
end

def test_intermediate_output_i226
  r = spreadsheet.intermediate_output_i226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7012944472831905,r[:number])
end

def test_intermediate_output_j226
  r = spreadsheet.intermediate_output_j226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3594075804140329,r[:number])
end

def test_intermediate_output_k226
  r = spreadsheet.intermediate_output_k226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.033796119789545,r[:number])
end

def test_intermediate_output_l226
  r = spreadsheet.intermediate_output_l226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.298844014261052,r[:number])
end

def test_intermediate_output_m226
  r = spreadsheet.intermediate_output_m226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.145215178490354,r[:number])
end

def test_intermediate_output_n226
  r = spreadsheet.intermediate_output_n226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.01249072842072,r[:number])
end

def test_intermediate_output_o226
  r = spreadsheet.intermediate_output_o226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.901172245164053,r[:number])
end

def test_intermediate_output_p226
  r = spreadsheet.intermediate_output_p226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.811778414444724,r[:number])
end

def test_intermediate_output_q226
  r = spreadsheet.intermediate_output_q226
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.744845969984378,r[:number])
end

def test_intermediate_output_c227
  r = spreadsheet.intermediate_output_c227
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d227
  r = spreadsheet.intermediate_output_d227
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e227
  r = spreadsheet.intermediate_output_e227
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous hydrocarbons",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h227
  r = spreadsheet.intermediate_output_h227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.230008822067568,r[:number])
end

def test_intermediate_output_i227
  r = spreadsheet.intermediate_output_i227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.298750109496886,r[:number])
end

def test_intermediate_output_j227
  r = spreadsheet.intermediate_output_j227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.750204806664975,r[:number])
end

def test_intermediate_output_k227
  r = spreadsheet.intermediate_output_k227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.205781820552314,r[:number])
end

def test_intermediate_output_l227
  r = spreadsheet.intermediate_output_l227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.73401888518371,r[:number])
end

def test_intermediate_output_m227
  r = spreadsheet.intermediate_output_m227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.3876884007179,r[:number])
end

def test_intermediate_output_n227
  r = spreadsheet.intermediate_output_n227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.21199755249822,r[:number])
end

def test_intermediate_output_o227
  r = spreadsheet.intermediate_output_o227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.18458852134214,r[:number])
end

def test_intermediate_output_p227
  r = spreadsheet.intermediate_output_p227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.31187901330933,r[:number])
end

def test_intermediate_output_q227
  r = spreadsheet.intermediate_output_q227
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.597323282735694,r[:number])
end

def test_intermediate_output_b229
  r = spreadsheet.intermediate_output_b229
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro-carbon use by sector and Bio-energy share",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h229
  r = spreadsheet.intermediate_output_h229
  assert_equal(:ExcelString,r[:type])
  assert_equal("Please note: Bio-energy is not assigned to sectors but is assumed to replace fossil fuels up to maximum demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c231
  r = spreadsheet.intermediate_output_c231
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid Hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h231
  r = spreadsheet.intermediate_output_h231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(496.28220167438485,r[:number])
end

def test_intermediate_output_i231
  r = spreadsheet.intermediate_output_i231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.62288647121244,r[:number])
end

def test_intermediate_output_j231
  r = spreadsheet.intermediate_output_j231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(452.46752362640234,r[:number])
end

def test_intermediate_output_k231
  r = spreadsheet.intermediate_output_k231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.65089298968246,r[:number])
end

def test_intermediate_output_l231
  r = spreadsheet.intermediate_output_l231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.36577243928855,r[:number])
end

def test_intermediate_output_m231
  r = spreadsheet.intermediate_output_m231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.14982492197697,r[:number])
end

def test_intermediate_output_n231
  r = spreadsheet.intermediate_output_n231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.80330314231705,r[:number])
end

def test_intermediate_output_o231
  r = spreadsheet.intermediate_output_o231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.3882431335079,r[:number])
end

def test_intermediate_output_p231
  r = spreadsheet.intermediate_output_p231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.22260443623873,r[:number])
end

def test_intermediate_output_q231
  r = spreadsheet.intermediate_output_q231
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.78162562276052,r[:number])
end

def test_intermediate_output_c232
  r = spreadsheet.intermediate_output_c232
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d232
  r = spreadsheet.intermediate_output_d232
  assert_equal(:ExcelString,r[:type])
  assert_equal("Share of solid biomass to total solid hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h232
  r = spreadsheet.intermediate_output_h232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.036519005727489916,r[:number])
end

def test_intermediate_output_i232
  r = spreadsheet.intermediate_output_i232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03920682331689727,r[:number])
end

def test_intermediate_output_j232
  r = spreadsheet.intermediate_output_j232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.045054323963876985,r[:number])
end

def test_intermediate_output_k232
  r = spreadsheet.intermediate_output_k232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05703212511489314,r[:number])
end

def test_intermediate_output_l232
  r = spreadsheet.intermediate_output_l232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09972959905965723,r[:number])
end

def test_intermediate_output_m232
  r = spreadsheet.intermediate_output_m232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.19019575067841188,r[:number])
end

def test_intermediate_output_n232
  r = spreadsheet.intermediate_output_n232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22077220552599017,r[:number])
end

def test_intermediate_output_o232
  r = spreadsheet.intermediate_output_o232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21932001429841122,r[:number])
end

def test_intermediate_output_p232
  r = spreadsheet.intermediate_output_p232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21797457398379502,r[:number])
end

def test_intermediate_output_q232
  r = spreadsheet.intermediate_output_q232
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21599284716499248,r[:number])
end

def test_intermediate_output_c233
  r = spreadsheet.intermediate_output_c233
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d233
  r = spreadsheet.intermediate_output_d233
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h233
  r = spreadsheet.intermediate_output_h233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i233
  r = spreadsheet.intermediate_output_i233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j233
  r = spreadsheet.intermediate_output_j233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.773727272727275,r[:number])
end

def test_intermediate_output_k233
  r = spreadsheet.intermediate_output_k233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.697500000000005,r[:number])
end

def test_intermediate_output_l233
  r = spreadsheet.intermediate_output_l233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.24755434782609,r[:number])
end

def test_intermediate_output_m233
  r = spreadsheet.intermediate_output_m233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.81675531914894,r[:number])
end

def test_intermediate_output_n233
  r = spreadsheet.intermediate_output_n233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.40390625,r[:number])
end

def test_intermediate_output_o233
  r = spreadsheet.intermediate_output_o233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.403906250000002,r[:number])
end

def test_intermediate_output_p233
  r = spreadsheet.intermediate_output_p233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.007908163265306,r[:number])
end

def test_intermediate_output_q233
  r = spreadsheet.intermediate_output_q233
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.627750000000002,r[:number])
end

def test_intermediate_output_c234
  r = spreadsheet.intermediate_output_c234
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d234
  r = spreadsheet.intermediate_output_d234
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass/Coal power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h234
  r = spreadsheet.intermediate_output_h234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.5928682890119,r[:number])
end

def test_intermediate_output_i234
  r = spreadsheet.intermediate_output_i234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(434.1451350399233,r[:number])
end

def test_intermediate_output_j234
  r = spreadsheet.intermediate_output_j234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(374.30469360000006,r[:number])
end

def test_intermediate_output_k234
  r = spreadsheet.intermediate_output_k234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(273.841074,r[:number])
end

def test_intermediate_output_l234
  r = spreadsheet.intermediate_output_l234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.6206656,r[:number])
end

def test_intermediate_output_m234
  r = spreadsheet.intermediate_output_m234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.13548,r[:number])
end

def test_intermediate_output_n234
  r = spreadsheet.intermediate_output_n234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.200920000000002,r[:number])
end

def test_intermediate_output_o234
  r = spreadsheet.intermediate_output_o234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.200920000000002,r[:number])
end

def test_intermediate_output_p234
  r = spreadsheet.intermediate_output_p234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.200920000000002,r[:number])
end

def test_intermediate_output_q234
  r = spreadsheet.intermediate_output_q234
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.200920000000002,r[:number])
end

def test_intermediate_output_c235
  r = spreadsheet.intermediate_output_c235
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d235
  r = spreadsheet.intermediate_output_d235
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h235
  r = spreadsheet.intermediate_output_h235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.553269110073614,r[:number])
end

def test_intermediate_output_i235
  r = spreadsheet.intermediate_output_i235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.4320461816109,r[:number])
end

def test_intermediate_output_j235
  r = spreadsheet.intermediate_output_j235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.735865536857546,r[:number])
end

def test_intermediate_output_k235
  r = spreadsheet.intermediate_output_k235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.268616228002266,r[:number])
end

def test_intermediate_output_l235
  r = spreadsheet.intermediate_output_l235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.70433316568167,r[:number])
end

def test_intermediate_output_m235
  r = spreadsheet.intermediate_output_m235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.72159652945082,r[:number])
end

def test_intermediate_output_n235
  r = spreadsheet.intermediate_output_n235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.38590342879701,r[:number])
end

def test_intermediate_output_o235
  r = spreadsheet.intermediate_output_o235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.77029323244011,r[:number])
end

def test_intermediate_output_p235
  r = spreadsheet.intermediate_output_p235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.95622560934686,r[:number])
end

def test_intermediate_output_q235
  r = spreadsheet.intermediate_output_q235
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.03456133604239,r[:number])
end

def test_intermediate_output_c236
  r = spreadsheet.intermediate_output_c236
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d236
  r = spreadsheet.intermediate_output_d236
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h236
  r = spreadsheet.intermediate_output_h236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.25680300224757,r[:number])
end

def test_intermediate_output_i236
  r = spreadsheet.intermediate_output_i236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.147942484875603,r[:number])
end

def test_intermediate_output_j236
  r = spreadsheet.intermediate_output_j236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.750153595975089,r[:number])
end

def test_intermediate_output_k236
  r = spreadsheet.intermediate_output_k236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.935261760116955,r[:number])
end

def test_intermediate_output_l236
  r = spreadsheet.intermediate_output_l236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.879384011776363,r[:number])
end

def test_intermediate_output_m236
  r = spreadsheet.intermediate_output_m236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.5797072356746025,r[:number])
end

def test_intermediate_output_n236
  r = spreadsheet.intermediate_output_n236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.91081821062347,r[:number])
end

def test_intermediate_output_o236
  r = spreadsheet.intermediate_output_o236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.105860802720359,r[:number])
end

def test_intermediate_output_p236
  r = spreadsheet.intermediate_output_p236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1447416140822204,r[:number])
end

def test_intermediate_output_q236
  r = spreadsheet.intermediate_output_q236
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c238
  r = spreadsheet.intermediate_output_c238
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid Hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h238
  r = spreadsheet.intermediate_output_h238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(905.4992863681687,r[:number])
end

def test_intermediate_output_i238
  r = spreadsheet.intermediate_output_i238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.8924025606916,r[:number])
end

def test_intermediate_output_j238
  r = spreadsheet.intermediate_output_j238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(856.5464311602528,r[:number])
end

def test_intermediate_output_k238
  r = spreadsheet.intermediate_output_k238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.6277604642428,r[:number])
end

def test_intermediate_output_l238
  r = spreadsheet.intermediate_output_l238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.0972000576121,r[:number])
end

def test_intermediate_output_m238
  r = spreadsheet.intermediate_output_m238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.634954586045,r[:number])
end

def test_intermediate_output_n238
  r = spreadsheet.intermediate_output_n238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(852.4348097397127,r[:number])
end

def test_intermediate_output_o238
  r = spreadsheet.intermediate_output_o238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(864.2080474650459,r[:number])
end

def test_intermediate_output_p238
  r = spreadsheet.intermediate_output_p238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(879.6884500466551,r[:number])
end

def test_intermediate_output_q238
  r = spreadsheet.intermediate_output_q238
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(887.8266553154101,r[:number])
end

def test_intermediate_output_c239
  r = spreadsheet.intermediate_output_c239
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d239
  r = spreadsheet.intermediate_output_d239
  assert_equal(:ExcelString,r[:type])
  assert_equal("Share of Bioliquids to total liquid hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h239
  r = spreadsheet.intermediate_output_h239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0012889962916521325,r[:number])
end

def test_intermediate_output_i239
  r = spreadsheet.intermediate_output_i239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0008071131076948339,r[:number])
end

def test_intermediate_output_j239
  r = spreadsheet.intermediate_output_j239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0015870798487510117,r[:number])
end

def test_intermediate_output_k239
  r = spreadsheet.intermediate_output_k239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0023604115525406714,r[:number])
end

def test_intermediate_output_l239
  r = spreadsheet.intermediate_output_l239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.003885119411578818,r[:number])
end

def test_intermediate_output_m239
  r = spreadsheet.intermediate_output_m239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.004978430410180415,r[:number])
end

def test_intermediate_output_n239
  r = spreadsheet.intermediate_output_n239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.005880204176494461,r[:number])
end

def test_intermediate_output_o239
  r = spreadsheet.intermediate_output_o239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.006828416215833416,r[:number])
end

def test_intermediate_output_p239
  r = spreadsheet.intermediate_output_p239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.007743398715856113,r[:number])
end

def test_intermediate_output_q239
  r = spreadsheet.intermediate_output_q239
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.008723376262264774,r[:number])
end

def test_intermediate_output_c240
  r = spreadsheet.intermediate_output_c240
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d240
  r = spreadsheet.intermediate_output_d240
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h240
  r = spreadsheet.intermediate_output_h240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(732.8202358203371,r[:number])
end

def test_intermediate_output_i240
  r = spreadsheet.intermediate_output_i240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(698.2600703738092,r[:number])
end

def test_intermediate_output_j240
  r = spreadsheet.intermediate_output_j240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(694.4084550362566,r[:number])
end

def test_intermediate_output_k240
  r = spreadsheet.intermediate_output_k240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(698.3971936448528,r[:number])
end

def test_intermediate_output_l240
  r = spreadsheet.intermediate_output_l240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(681.6949842354908,r[:number])
end

def test_intermediate_output_m240
  r = spreadsheet.intermediate_output_m240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(660.0832111591712,r[:number])
end

def test_intermediate_output_n240
  r = spreadsheet.intermediate_output_n240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(673.8928089196928,r[:number])
end

def test_intermediate_output_o240
  r = spreadsheet.intermediate_output_o240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(678.617873654862,r[:number])
end

def test_intermediate_output_p240
  r = spreadsheet.intermediate_output_p240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(685.9735742420924,r[:number])
end

def test_intermediate_output_q240
  r = spreadsheet.intermediate_output_q240
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(684.8728348822198,r[:number])
end

def test_intermediate_output_c241
  r = spreadsheet.intermediate_output_c241
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d241
  r = spreadsheet.intermediate_output_d241
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h241
  r = spreadsheet.intermediate_output_h241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.62303487912313,r[:number])
end

def test_intermediate_output_i241
  r = spreadsheet.intermediate_output_i241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.43407606770457,r[:number])
end

def test_intermediate_output_j241
  r = spreadsheet.intermediate_output_j241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.37727684864225,r[:number])
end

def test_intermediate_output_k241
  r = spreadsheet.intermediate_output_k241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.66300651409517,r[:number])
end

def test_intermediate_output_l241
  r = spreadsheet.intermediate_output_l241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.79596940403718,r[:number])
end

def test_intermediate_output_m241
  r = spreadsheet.intermediate_output_m241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.79904667932928,r[:number])
end

def test_intermediate_output_n241
  r = spreadsheet.intermediate_output_n241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.7702356358142,r[:number])
end

def test_intermediate_output_o241
  r = spreadsheet.intermediate_output_o241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.81881835755073,r[:number])
end

def test_intermediate_output_p241
  r = spreadsheet.intermediate_output_p241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.06667544875887,r[:number])
end

def test_intermediate_output_q241
  r = spreadsheet.intermediate_output_q241
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.64975352551576,r[:number])
end

def test_intermediate_output_c242
  r = spreadsheet.intermediate_output_c242
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d242
  r = spreadsheet.intermediate_output_d242
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h242
  r = spreadsheet.intermediate_output_h242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.266685142190774,r[:number])
end

def test_intermediate_output_i242
  r = spreadsheet.intermediate_output_i242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.99943367286665,r[:number])
end

def test_intermediate_output_j242
  r = spreadsheet.intermediate_output_j242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.22299177401593,r[:number])
end

def test_intermediate_output_k242
  r = spreadsheet.intermediate_output_k242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.6369582485937,r[:number])
end

def test_intermediate_output_l242
  r = spreadsheet.intermediate_output_l242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.613021339389,r[:number])
end

def test_intermediate_output_m242
  r = spreadsheet.intermediate_output_m242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.04693754034374,r[:number])
end

def test_intermediate_output_n242
  r = spreadsheet.intermediate_output_n242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.83513175011493,r[:number])
end

def test_intermediate_output_o242
  r = spreadsheet.intermediate_output_o242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.897459529683765,r[:number])
end

def test_intermediate_output_p242
  r = spreadsheet.intermediate_output_p242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.17190663989083,r[:number])
end

def test_intermediate_output_q242
  r = spreadsheet.intermediate_output_q242
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.61048764462102,r[:number])
end

def test_intermediate_output_c244
  r = spreadsheet.intermediate_output_c244
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gaseous Hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h244
  r = spreadsheet.intermediate_output_h244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(989.1712766501873,r[:number])
end

def test_intermediate_output_i244
  r = spreadsheet.intermediate_output_i244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1008.3202590740525,r[:number])
end

def test_intermediate_output_j244
  r = spreadsheet.intermediate_output_j244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1088.615908778863,r[:number])
end

def test_intermediate_output_k244
  r = spreadsheet.intermediate_output_k244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1220.2204324873592,r[:number])
end

def test_intermediate_output_l244
  r = spreadsheet.intermediate_output_l244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1408.066373618732,r[:number])
end

def test_intermediate_output_m244
  r = spreadsheet.intermediate_output_m244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1592.6108593355107,r[:number])
end

def test_intermediate_output_n244
  r = spreadsheet.intermediate_output_n244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1744.9495506051887,r[:number])
end

def test_intermediate_output_o244
  r = spreadsheet.intermediate_output_o244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1877.094348807031,r[:number])
end

def test_intermediate_output_p244
  r = spreadsheet.intermediate_output_p244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2014.340660060927,r[:number])
end

def test_intermediate_output_q244
  r = spreadsheet.intermediate_output_q244
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2132.039736084559,r[:number])
end

def test_intermediate_output_c245
  r = spreadsheet.intermediate_output_c245
  assert_equal(:ExcelString,r[:type])
  assert_equal("V",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d245
  r = spreadsheet.intermediate_output_d245
  assert_equal(:ExcelString,r[:type])
  assert_equal("Share of Biogas to total gaseous hydrocarbon consumption",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h245
  r = spreadsheet.intermediate_output_h245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.022473366692721947,r[:number])
end

def test_intermediate_output_i245
  r = spreadsheet.intermediate_output_i245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018147756077320866,r[:number])
end

def test_intermediate_output_j245
  r = spreadsheet.intermediate_output_j245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.019061089075890113,r[:number])
end

def test_intermediate_output_k245
  r = spreadsheet.intermediate_output_k245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02557388893819854,r[:number])
end

def test_intermediate_output_l245
  r = spreadsheet.intermediate_output_l245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02466788465086148,r[:number])
end

def test_intermediate_output_m245
  r = spreadsheet.intermediate_output_m245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.022219921579263124,r[:number])
end

def test_intermediate_output_n245
  r = spreadsheet.intermediate_output_n245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.020752461032434468,r[:number])
end

def test_intermediate_output_o245
  r = spreadsheet.intermediate_output_o245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.019809653438557548,r[:number])
end

def test_intermediate_output_p245
  r = spreadsheet.intermediate_output_p245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01901956296317353,r[:number])
end

def test_intermediate_output_q245
  r = spreadsheet.intermediate_output_q245
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018572507168865084,r[:number])
end

def test_intermediate_output_c246
  r = spreadsheet.intermediate_output_c246
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d246
  r = spreadsheet.intermediate_output_d246
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h246
  r = spreadsheet.intermediate_output_h246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324.47780687796825,r[:number])
end

def test_intermediate_output_i246
  r = spreadsheet.intermediate_output_i246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.8435737936154,r[:number])
end

def test_intermediate_output_j246
  r = spreadsheet.intermediate_output_j246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.96955209021405,r[:number])
end

def test_intermediate_output_k246
  r = spreadsheet.intermediate_output_k246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(408.4682642374902,r[:number])
end

def test_intermediate_output_l246
  r = spreadsheet.intermediate_output_l246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.28527096925444,r[:number])
end

def test_intermediate_output_m246
  r = spreadsheet.intermediate_output_m246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.22652053439543,r[:number])
end

def test_intermediate_output_n246
  r = spreadsheet.intermediate_output_n246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.098708854415,r[:number])
end

def test_intermediate_output_o246
  r = spreadsheet.intermediate_output_o246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.2897766694549,r[:number])
end

def test_intermediate_output_p246
  r = spreadsheet.intermediate_output_p246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500.17015397996613,r[:number])
end

def test_intermediate_output_q246
  r = spreadsheet.intermediate_output_q246
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(517.9434690774432,r[:number])
end

def test_intermediate_output_c247
  r = spreadsheet.intermediate_output_c247
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d247
  r = spreadsheet.intermediate_output_d247
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h247
  r = spreadsheet.intermediate_output_h247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.26235982624942,r[:number])
end

def test_intermediate_output_i247
  r = spreadsheet.intermediate_output_i247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.65151401584527,r[:number])
end

def test_intermediate_output_j247
  r = spreadsheet.intermediate_output_j247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.39821392838152,r[:number])
end

def test_intermediate_output_k247
  r = spreadsheet.intermediate_output_k247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.44410327375198,r[:number])
end

def test_intermediate_output_l247
  r = spreadsheet.intermediate_output_l247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.05380686191101,r[:number])
end

def test_intermediate_output_m247
  r = spreadsheet.intermediate_output_m247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.27784091104671,r[:number])
end

def test_intermediate_output_n247
  r = spreadsheet.intermediate_output_n247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.17110264565169,r[:number])
end

def test_intermediate_output_o247
  r = spreadsheet.intermediate_output_o247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.79324900623955,r[:number])
end

def test_intermediate_output_p247
  r = spreadsheet.intermediate_output_p247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.2091076031487,r[:number])
end

def test_intermediate_output_q247
  r = spreadsheet.intermediate_output_q247
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.48912264058296,r[:number])
end

def test_intermediate_output_c248
  r = spreadsheet.intermediate_output_c248
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d248
  r = spreadsheet.intermediate_output_d248
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h248
  r = spreadsheet.intermediate_output_h248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(150.05297390894643,r[:number])
end

def test_intermediate_output_i248
  r = spreadsheet.intermediate_output_i248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.22069513803135,r[:number])
end

def test_intermediate_output_j248
  r = spreadsheet.intermediate_output_j248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.30810506964173,r[:number])
end

def test_intermediate_output_k248
  r = spreadsheet.intermediate_output_k248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.02520829613317,r[:number])
end

def test_intermediate_output_l248
  r = spreadsheet.intermediate_output_l248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.97656694304166,r[:number])
end

def test_intermediate_output_m248
  r = spreadsheet.intermediate_output_m248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.52751388455468,r[:number])
end

def test_intermediate_output_n248
  r = spreadsheet.intermediate_output_n248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.85820397154254,r[:number])
end

def test_intermediate_output_o248
  r = spreadsheet.intermediate_output_o248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(244.16953762056374,r[:number])
end

def test_intermediate_output_p248
  r = spreadsheet.intermediate_output_p248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.68557593339085,r[:number])
end

def test_intermediate_output_q248
  r = spreadsheet.intermediate_output_q248
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(291.656238483162,r[:number])
end

def test_intermediate_output_c249
  r = spreadsheet.intermediate_output_c249
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d249
  r = spreadsheet.intermediate_output_d249
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass/Coal power stations",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h249
  r = spreadsheet.intermediate_output_h249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.57120492669185,r[:number])
end

def test_intermediate_output_i249
  r = spreadsheet.intermediate_output_i249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.3066403541333,r[:number])
end

def test_intermediate_output_j249
  r = spreadsheet.intermediate_output_j249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.21265572428075,r[:number])
end

def test_intermediate_output_k249
  r = spreadsheet.intermediate_output_k249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(486.29390208870655,r[:number])
end

def test_intermediate_output_l249
  r = spreadsheet.intermediate_output_l249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(635.3969967171009,r[:number])
end

def test_intermediate_output_m249
  r = spreadsheet.intermediate_output_m249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(778.193502902905,r[:number])
end

def test_intermediate_output_n249
  r = spreadsheet.intermediate_output_n249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(896.0137185784046,r[:number])
end

def test_intermediate_output_o249
  r = spreadsheet.intermediate_output_o249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(988.6004346014633,r[:number])
end

def test_intermediate_output_p249
  r = spreadsheet.intermediate_output_p249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080.805706402919,r[:number])
end

def test_intermediate_output_q249
  r = spreadsheet.intermediate_output_q249
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1147.6361834720549,r[:number])
end

def test_intermediate_output_c250
  r = spreadsheet.intermediate_output_c250
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d250
  r = spreadsheet.intermediate_output_d250
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon Capture Storage (CCS)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h250
  r = spreadsheet.intermediate_output_h250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i250
  r = spreadsheet.intermediate_output_i250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j250
  r = spreadsheet.intermediate_output_j250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.781025862068966,r[:number])
end

def test_intermediate_output_k250
  r = spreadsheet.intermediate_output_k250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.683042372881357,r[:number])
end

def test_intermediate_output_l250
  r = spreadsheet.intermediate_output_l250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.588325,r[:number])
end

def test_intermediate_output_m250
  r = spreadsheet.intermediate_output_m250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4967131147540975,r[:number])
end

def test_intermediate_output_n250
  r = spreadsheet.intermediate_output_n250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.408056451612903,r[:number])
end

def test_intermediate_output_o250
  r = spreadsheet.intermediate_output_o250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.322214285714286,r[:number])
end

def test_intermediate_output_p250
  r = spreadsheet.intermediate_output_p250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.2390546874999995,r[:number])
end

def test_intermediate_output_q250
  r = spreadsheet.intermediate_output_q250
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.158453846153846,r[:number])
end

def test_intermediate_output_d252
  r = spreadsheet.intermediate_output_d252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio type",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e252
  r = spreadsheet.intermediate_output_e252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Column1",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f252
  r = spreadsheet.intermediate_output_f252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Column2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_g252
  r = spreadsheet.intermediate_output_g252
  assert_equal(:ExcelString,r[:type])
  assert_equal("Column3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h252
  r = spreadsheet.intermediate_output_h252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i252
  r = spreadsheet.intermediate_output_i252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j252
  r = spreadsheet.intermediate_output_j252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k252
  r = spreadsheet.intermediate_output_k252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l252
  r = spreadsheet.intermediate_output_l252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m252
  r = spreadsheet.intermediate_output_m252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n252
  r = spreadsheet.intermediate_output_n252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o252
  r = spreadsheet.intermediate_output_o252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p252
  r = spreadsheet.intermediate_output_p252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q252
  r = spreadsheet.intermediate_output_q252
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d253
  r = spreadsheet.intermediate_output_d253
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h253
  r = spreadsheet.intermediate_output_h253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.036519005727489916,r[:number])
end

def test_intermediate_output_i253
  r = spreadsheet.intermediate_output_i253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03920682331689727,r[:number])
end

def test_intermediate_output_j253
  r = spreadsheet.intermediate_output_j253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.045054323963876985,r[:number])
end

def test_intermediate_output_k253
  r = spreadsheet.intermediate_output_k253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05703212511489314,r[:number])
end

def test_intermediate_output_l253
  r = spreadsheet.intermediate_output_l253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09972959905965723,r[:number])
end

def test_intermediate_output_m253
  r = spreadsheet.intermediate_output_m253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.19019575067841188,r[:number])
end

def test_intermediate_output_n253
  r = spreadsheet.intermediate_output_n253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22077220552599017,r[:number])
end

def test_intermediate_output_o253
  r = spreadsheet.intermediate_output_o253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21932001429841122,r[:number])
end

def test_intermediate_output_p253
  r = spreadsheet.intermediate_output_p253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21797457398379502,r[:number])
end

def test_intermediate_output_q253
  r = spreadsheet.intermediate_output_q253
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21599284716499248,r[:number])
end

def test_intermediate_output_d254
  r = spreadsheet.intermediate_output_d254
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h254
  r = spreadsheet.intermediate_output_h254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0012889962916521325,r[:number])
end

def test_intermediate_output_i254
  r = spreadsheet.intermediate_output_i254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0008071131076948339,r[:number])
end

def test_intermediate_output_j254
  r = spreadsheet.intermediate_output_j254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0015870798487510117,r[:number])
end

def test_intermediate_output_k254
  r = spreadsheet.intermediate_output_k254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0023604115525406714,r[:number])
end

def test_intermediate_output_l254
  r = spreadsheet.intermediate_output_l254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.003885119411578818,r[:number])
end

def test_intermediate_output_m254
  r = spreadsheet.intermediate_output_m254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.004978430410180415,r[:number])
end

def test_intermediate_output_n254
  r = spreadsheet.intermediate_output_n254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.005880204176494461,r[:number])
end

def test_intermediate_output_o254
  r = spreadsheet.intermediate_output_o254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.006828416215833416,r[:number])
end

def test_intermediate_output_p254
  r = spreadsheet.intermediate_output_p254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.007743398715856113,r[:number])
end

def test_intermediate_output_q254
  r = spreadsheet.intermediate_output_q254
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.008723376262264774,r[:number])
end

def test_intermediate_output_d255
  r = spreadsheet.intermediate_output_d255
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h255
  r = spreadsheet.intermediate_output_h255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.022473366692721947,r[:number])
end

def test_intermediate_output_i255
  r = spreadsheet.intermediate_output_i255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018147756077320866,r[:number])
end

def test_intermediate_output_j255
  r = spreadsheet.intermediate_output_j255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.019061089075890113,r[:number])
end

def test_intermediate_output_k255
  r = spreadsheet.intermediate_output_k255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02557388893819854,r[:number])
end

def test_intermediate_output_l255
  r = spreadsheet.intermediate_output_l255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02466788465086148,r[:number])
end

def test_intermediate_output_m255
  r = spreadsheet.intermediate_output_m255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.022219921579263124,r[:number])
end

def test_intermediate_output_n255
  r = spreadsheet.intermediate_output_n255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.020752461032434468,r[:number])
end

def test_intermediate_output_o255
  r = spreadsheet.intermediate_output_o255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.019809653438557548,r[:number])
end

def test_intermediate_output_p255
  r = spreadsheet.intermediate_output_p255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01901956296317353,r[:number])
end

def test_intermediate_output_q255
  r = spreadsheet.intermediate_output_q255
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018572507168865084,r[:number])
end

def test_intermediate_output_b257
  r = spreadsheet.intermediate_output_b257
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Generation Emissions",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c260
  r = spreadsheet.intermediate_output_c260
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions from Electricity Generation, exlcuding CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h260
  r = spreadsheet.intermediate_output_h260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i260
  r = spreadsheet.intermediate_output_i260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j260
  r = spreadsheet.intermediate_output_j260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k260
  r = spreadsheet.intermediate_output_k260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l260
  r = spreadsheet.intermediate_output_l260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m260
  r = spreadsheet.intermediate_output_m260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n260
  r = spreadsheet.intermediate_output_n260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o260
  r = spreadsheet.intermediate_output_o260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p260
  r = spreadsheet.intermediate_output_p260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q260
  r = spreadsheet.intermediate_output_q260
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c261
  r = spreadsheet.intermediate_output_c261
  assert_equal(:ExcelString,r[:type])
  assert_equal("Power Generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h261
  r = spreadsheet.intermediate_output_h261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.1293411589495,r[:number])
end

def test_intermediate_output_i261
  r = spreadsheet.intermediate_output_i261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.9000332315603,r[:number])
end

def test_intermediate_output_j261
  r = spreadsheet.intermediate_output_j261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.1836078506969,r[:number])
end

def test_intermediate_output_k261
  r = spreadsheet.intermediate_output_k261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.68837621368507,r[:number])
end

def test_intermediate_output_l261
  r = spreadsheet.intermediate_output_l261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.5638636133278,r[:number])
end

def test_intermediate_output_m261
  r = spreadsheet.intermediate_output_m261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.30060167807008,r[:number])
end

def test_intermediate_output_n261
  r = spreadsheet.intermediate_output_n261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.02403852228605,r[:number])
end

def test_intermediate_output_o261
  r = spreadsheet.intermediate_output_o261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.11501011726418,r[:number])
end

def test_intermediate_output_p261
  r = spreadsheet.intermediate_output_p261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.01259346336113,r[:number])
end

def test_intermediate_output_q261
  r = spreadsheet.intermediate_output_q261
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.2271988093521,r[:number])
end

def test_intermediate_output_c262
  r = spreadsheet.intermediate_output_c262
  assert_equal(:ExcelString,r[:type])
  assert_equal("CCS in Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h262
  r = spreadsheet.intermediate_output_h262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i262
  r = spreadsheet.intermediate_output_i262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j262
  r = spreadsheet.intermediate_output_j262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.8350150827586207,r[:number])
end

def test_intermediate_output_k262
  r = spreadsheet.intermediate_output_k262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.678458816949153,r[:number])
end

def test_intermediate_output_l262
  r = spreadsheet.intermediate_output_l262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.538048685217391,r[:number])
end

def test_intermediate_output_m262
  r = spreadsheet.intermediate_output_m262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.403460266271363,r[:number])
end

def test_intermediate_output_n262
  r = spreadsheet.intermediate_output_n262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.274336960887095,r[:number])
end

def test_intermediate_output_o262
  r = spreadsheet.intermediate_output_o262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.260121498214285,r[:number])
end

def test_intermediate_output_p262
  r = spreadsheet.intermediate_output_p262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.136579599107142,r[:number])
end

def test_intermediate_output_q262
  r = spreadsheet.intermediate_output_q262
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.017852256923077,r[:number])
end

def test_intermediate_output_c263
  r = spreadsheet.intermediate_output_c263
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Gas Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h263
  r = spreadsheet.intermediate_output_h263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.4556779256945098,r[:number])
end

def test_intermediate_output_i263
  r = spreadsheet.intermediate_output_i263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1511344571226152,r[:number])
end

def test_intermediate_output_j263
  r = spreadsheet.intermediate_output_j263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3601760663003253,r[:number])
end

def test_intermediate_output_k263
  r = spreadsheet.intermediate_output_k263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.297822699450182,r[:number])
end

def test_intermediate_output_l263
  r = spreadsheet.intermediate_output_l263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.895996172564888,r[:number])
end

def test_intermediate_output_m263
  r = spreadsheet.intermediate_output_m263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.1948541686539373,r[:number])
end

def test_intermediate_output_n263
  r = spreadsheet.intermediate_output_n263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.435620479999991,r[:number])
end

def test_intermediate_output_o263
  r = spreadsheet.intermediate_output_o263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.618416804654365,r[:number])
end

def test_intermediate_output_p263
  r = spreadsheet.intermediate_output_p263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.79812347406438,r[:number])
end

def test_intermediate_output_q263
  r = spreadsheet.intermediate_output_q263
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.9381811038760692,r[:number])
end

def test_intermediate_output_c264
  r = spreadsheet.intermediate_output_c264
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Solid BM Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h264
  r = spreadsheet.intermediate_output_h264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.854855135469395,r[:number])
end

def test_intermediate_output_i264
  r = spreadsheet.intermediate_output_i264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.304449684320754,r[:number])
end

def test_intermediate_output_j264
  r = spreadsheet.intermediate_output_j264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.255396535609748,r[:number])
end

def test_intermediate_output_k264
  r = spreadsheet.intermediate_output_k264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.8670060241582815,r[:number])
end

def test_intermediate_output_l264
  r = spreadsheet.intermediate_output_l264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.370357480351144,r[:number])
end

def test_intermediate_output_m264
  r = spreadsheet.intermediate_output_m264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.9639834141663535,r[:number])
end

def test_intermediate_output_n264
  r = spreadsheet.intermediate_output_n264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9770226165457311,r[:number])
end

def test_intermediate_output_o264
  r = spreadsheet.intermediate_output_o264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9705959757033588,r[:number])
end

def test_intermediate_output_p264
  r = spreadsheet.intermediate_output_p264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9646417587154885,r[:number])
end

def test_intermediate_output_q264
  r = spreadsheet.intermediate_output_q264
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9558716695769018,r[:number])
end

def test_intermediate_output_c265
  r = spreadsheet.intermediate_output_c265
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Solid HC CCS Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h265
  r = spreadsheet.intermediate_output_h265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i265
  r = spreadsheet.intermediate_output_i265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j265
  r = spreadsheet.intermediate_output_j265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.09510600174385891,r[:number])
end

def test_intermediate_output_k265
  r = spreadsheet.intermediate_output_k265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.36785883035579997,r[:number])
end

def test_intermediate_output_l265
  r = spreadsheet.intermediate_output_l265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.6292748667151671,r[:number])
end

def test_intermediate_output_m265
  r = spreadsheet.intermediate_output_m265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1745651117594005,r[:number])
end

def test_intermediate_output_n265
  r = spreadsheet.intermediate_output_n265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3349878216047313,r[:number])
end

def test_intermediate_output_o265
  r = spreadsheet.intermediate_output_o265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3262065640236866,r[:number])
end

def test_intermediate_output_p265
  r = spreadsheet.intermediate_output_p265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.2911714142544801,r[:number])
end

def test_intermediate_output_q265
  r = spreadsheet.intermediate_output_q265
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.2538440110190843,r[:number])
end

def test_intermediate_output_c266
  r = spreadsheet.intermediate_output_c266
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy in Gas CCS Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h266
  r = spreadsheet.intermediate_output_h266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i266
  r = spreadsheet.intermediate_output_i266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j266
  r = spreadsheet.intermediate_output_j266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.020359801523083705,r[:number])
end

def test_intermediate_output_k266
  r = spreadsheet.intermediate_output_k266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.026853357013639743,r[:number])
end

def test_intermediate_output_l266
  r = spreadsheet.intermediate_output_l266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.025470324686243693,r[:number])
end

def test_intermediate_output_m266
  r = spreadsheet.intermediate_output_m266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.022566619668576187,r[:number])
end

def test_intermediate_output_n266
  r = spreadsheet.intermediate_output_n266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.02073632257733289,r[:number])
end

def test_intermediate_output_o266
  r = spreadsheet.intermediate_output_o266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.01948005375616046,r[:number])
end

def test_intermediate_output_p266
  r = spreadsheet.intermediate_output_p266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.018410872992821417,r[:number])
end

def test_intermediate_output_q266
  r = spreadsheet.intermediate_output_q266
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.0177015379566364,r[:number])
end

def test_intermediate_output_c267
  r = spreadsheet.intermediate_output_c267
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Emissions from Power",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h267
  r = spreadsheet.intermediate_output_h267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.8188080977856,r[:number])
end

def test_intermediate_output_i267
  r = spreadsheet.intermediate_output_i267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.4444490901169,r[:number])
end

def test_intermediate_output_j267
  r = spreadsheet.intermediate_output_j267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.61755436276127,r[:number])
end

def test_intermediate_output_k267
  r = spreadsheet.intermediate_output_k267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.450376485758,r[:number])
end

def test_intermediate_output_l267
  r = spreadsheet.intermediate_output_l267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.10471608379297,r[:number])
end

def test_intermediate_output_m267
  r = spreadsheet.intermediate_output_m267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.54117209755046,r[:number])
end

def test_intermediate_output_n267
  r = spreadsheet.intermediate_output_n267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.98133432067118,r[:number])
end

def test_intermediate_output_o267
  r = spreadsheet.intermediate_output_o267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.9201892209123,r[:number])
end

def test_intermediate_output_p267
  r = spreadsheet.intermediate_output_p267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.80366634422683,r[:number])
end

def test_intermediate_output_q267
  r = spreadsheet.intermediate_output_q267
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.04374823000032,r[:number])
end

def test_intermediate_output_c269
  r = spreadsheet.intermediate_output_c269
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions reclassified",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h269
  r = spreadsheet.intermediate_output_h269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2007",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i269
  r = spreadsheet.intermediate_output_i269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j269
  r = spreadsheet.intermediate_output_j269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_k269
  r = spreadsheet.intermediate_output_k269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_l269
  r = spreadsheet.intermediate_output_l269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_m269
  r = spreadsheet.intermediate_output_m269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n269
  r = spreadsheet.intermediate_output_n269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o269
  r = spreadsheet.intermediate_output_o269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p269
  r = spreadsheet.intermediate_output_p269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q269
  r = spreadsheet.intermediate_output_q269
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c270
  r = spreadsheet.intermediate_output_c270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0,r[:number])
end

def test_intermediate_output_d270
  r = spreadsheet.intermediate_output_d270
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel Combustion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h270
  r = spreadsheet.intermediate_output_h270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.1293411589495,r[:number])
end

def test_intermediate_output_i270
  r = spreadsheet.intermediate_output_i270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.9000332315603,r[:number])
end

def test_intermediate_output_j270
  r = spreadsheet.intermediate_output_j270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.1836078506969,r[:number])
end

def test_intermediate_output_k270
  r = spreadsheet.intermediate_output_k270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.68837621368507,r[:number])
end

def test_intermediate_output_l270
  r = spreadsheet.intermediate_output_l270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.5638636133278,r[:number])
end

def test_intermediate_output_m270
  r = spreadsheet.intermediate_output_m270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.30060167807008,r[:number])
end

def test_intermediate_output_n270
  r = spreadsheet.intermediate_output_n270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.02403852228605,r[:number])
end

def test_intermediate_output_o270
  r = spreadsheet.intermediate_output_o270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.11501011726418,r[:number])
end

def test_intermediate_output_p270
  r = spreadsheet.intermediate_output_p270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.01259346336113,r[:number])
end

def test_intermediate_output_q270
  r = spreadsheet.intermediate_output_q270
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.2271988093521,r[:number])
end

def test_intermediate_output_c271
  r = spreadsheet.intermediate_output_c271
  assert_equal(:ExcelString,r[:type])
  assert_equal("X2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d271
  r = spreadsheet.intermediate_output_d271
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy credit",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h271
  r = spreadsheet.intermediate_output_h271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.310533061163905,r[:number])
end

def test_intermediate_output_i271
  r = spreadsheet.intermediate_output_i271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.455584141443369,r[:number])
end

def test_intermediate_output_j271
  r = spreadsheet.intermediate_output_j271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.731038405177015,r[:number])
end

def test_intermediate_output_k271
  r = spreadsheet.intermediate_output_k271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-7.559540910977904,r[:number])
end

def test_intermediate_output_l271
  r = spreadsheet.intermediate_output_l271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-7.921098844317442,r[:number])
end

def test_intermediate_output_m271
  r = spreadsheet.intermediate_output_m271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.355969314248267,r[:number])
end

def test_intermediate_output_n271
  r = spreadsheet.intermediate_output_n271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.768367240727786,r[:number])
end

def test_intermediate_output_o271
  r = spreadsheet.intermediate_output_o271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.93469939813757,r[:number])
end

def test_intermediate_output_p271
  r = spreadsheet.intermediate_output_p271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.0723475200271695,r[:number])
end

def test_intermediate_output_q271
  r = spreadsheet.intermediate_output_q271
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.165598322428692,r[:number])
end

def test_intermediate_output_c272
  r = spreadsheet.intermediate_output_c272
  assert_equal(:ExcelString,r[:type])
  assert_equal("X3",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d272
  r = spreadsheet.intermediate_output_d272
  assert_equal(:ExcelString,r[:type])
  assert_equal("Carbon capture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h272
  r = spreadsheet.intermediate_output_h272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i272
  r = spreadsheet.intermediate_output_i272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j272
  r = spreadsheet.intermediate_output_j272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.8350150827586207,r[:number])
end

def test_intermediate_output_k272
  r = spreadsheet.intermediate_output_k272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.678458816949153,r[:number])
end

def test_intermediate_output_l272
  r = spreadsheet.intermediate_output_l272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.538048685217391,r[:number])
end

def test_intermediate_output_m272
  r = spreadsheet.intermediate_output_m272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.403460266271363,r[:number])
end

def test_intermediate_output_n272
  r = spreadsheet.intermediate_output_n272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.274336960887095,r[:number])
end

def test_intermediate_output_o272
  r = spreadsheet.intermediate_output_o272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.260121498214285,r[:number])
end

def test_intermediate_output_p272
  r = spreadsheet.intermediate_output_p272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.136579599107142,r[:number])
end

def test_intermediate_output_q272
  r = spreadsheet.intermediate_output_q272
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.017852256923077,r[:number])
end

def test_intermediate_output_d273
  r = spreadsheet.intermediate_output_d273
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h273
  r = spreadsheet.intermediate_output_h273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.8188080977856,r[:number])
end

def test_intermediate_output_i273
  r = spreadsheet.intermediate_output_i273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.4444490901169,r[:number])
end

def test_intermediate_output_j273
  r = spreadsheet.intermediate_output_j273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.61755436276127,r[:number])
end

def test_intermediate_output_k273
  r = spreadsheet.intermediate_output_k273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.450376485758,r[:number])
end

def test_intermediate_output_l273
  r = spreadsheet.intermediate_output_l273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.10471608379297,r[:number])
end

def test_intermediate_output_m273
  r = spreadsheet.intermediate_output_m273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.54117209755046,r[:number])
end

def test_intermediate_output_n273
  r = spreadsheet.intermediate_output_n273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.98133432067118,r[:number])
end

def test_intermediate_output_o273
  r = spreadsheet.intermediate_output_o273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.9201892209123,r[:number])
end

def test_intermediate_output_p273
  r = spreadsheet.intermediate_output_p273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.80366634422683,r[:number])
end

def test_intermediate_output_q273
  r = spreadsheet.intermediate_output_q273
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.04374823000032,r[:number])
end

def test_intermediate_output_c275
  r = spreadsheet.intermediate_output_c275
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions intensity",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e275
  r = spreadsheet.intermediate_output_e275
  assert_equal(:ExcelString,r[:type])
  assert_equal("MtCO2e/TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h275
  r = spreadsheet.intermediate_output_h275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5068501590997587,r[:number])
end

def test_intermediate_output_i275
  r = spreadsheet.intermediate_output_i275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.501745785012277,r[:number])
end

def test_intermediate_output_j275
  r = spreadsheet.intermediate_output_j275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4562592451582826,r[:number])
end

def test_intermediate_output_k275
  r = spreadsheet.intermediate_output_k275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4043107429060427,r[:number])
end

def test_intermediate_output_l275
  r = spreadsheet.intermediate_output_l275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3493016466186846,r[:number])
end

def test_intermediate_output_m275
  r = spreadsheet.intermediate_output_m275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.31884248784262964,r[:number])
end

def test_intermediate_output_n275
  r = spreadsheet.intermediate_output_n275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3349610913966166,r[:number])
end

def test_intermediate_output_o275
  r = spreadsheet.intermediate_output_o275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3492737579350389,r[:number])
end

def test_intermediate_output_p275
  r = spreadsheet.intermediate_output_p275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3608305230344585,r[:number])
end

def test_intermediate_output_q275
  r = spreadsheet.intermediate_output_q275
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.36152685679630525,r[:number])
end

def test_intermediate_output_e276
  r = spreadsheet.intermediate_output_e276
  assert_equal(:ExcelString,r[:type])
  assert_equal("gCO2e/KWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h276
  r = spreadsheet.intermediate_output_h276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(506.85015909975874,r[:number])
end

def test_intermediate_output_i276
  r = spreadsheet.intermediate_output_i276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.74578501227694,r[:number])
end

def test_intermediate_output_j276
  r = spreadsheet.intermediate_output_j276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(456.25924515828257,r[:number])
end

def test_intermediate_output_k276
  r = spreadsheet.intermediate_output_k276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(404.31074290604266,r[:number])
end

def test_intermediate_output_l276
  r = spreadsheet.intermediate_output_l276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.30164661868463,r[:number])
end

def test_intermediate_output_m276
  r = spreadsheet.intermediate_output_m276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(318.8424878426296,r[:number])
end

def test_intermediate_output_n276
  r = spreadsheet.intermediate_output_n276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.9610913966166,r[:number])
end

def test_intermediate_output_o276
  r = spreadsheet.intermediate_output_o276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.2737579350389,r[:number])
end

def test_intermediate_output_p276
  r = spreadsheet.intermediate_output_p276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(360.8305230344585,r[:number])
end

def test_intermediate_output_q276
  r = spreadsheet.intermediate_output_q276
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.52685679630525,r[:number])
end

def test_intermediate_output_c278
  r = spreadsheet.intermediate_output_c278
  assert_equal(:ExcelString,r[:type])
  assert_equal("Note: Emissions from CHP are excluded, while emissions from district heating are included.",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_b281
  r = spreadsheet.intermediate_output_b281
  assert_equal(:ExcelString,r[:type])
  assert_equal("Primary supply, format for web-based interface",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c283
  r = spreadsheet.intermediate_output_c283
  assert_equal(:ExcelString,r[:type])
  assert_equal("N.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d283
  r = spreadsheet.intermediate_output_d283
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear fission",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e283
  r = spreadsheet.intermediate_output_e283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f283
  r = spreadsheet.intermediate_output_f283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.24447683045062,r[:number])
end

def test_intermediate_output_g283
  r = spreadsheet.intermediate_output_g283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h283
  r = spreadsheet.intermediate_output_h283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.91620313701554,r[:number])
end

def test_intermediate_output_i283
  r = spreadsheet.intermediate_output_i283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.70999999999998,r[:number])
end

def test_intermediate_output_j283
  r = spreadsheet.intermediate_output_j283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.9964,r[:number])
end

def test_intermediate_output_k283
  r = spreadsheet.intermediate_output_k283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.14080000000003,r[:number])
end

def test_intermediate_output_l283
  r = spreadsheet.intermediate_output_l283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_intermediate_output_m283
  r = spreadsheet.intermediate_output_m283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_intermediate_output_n283
  r = spreadsheet.intermediate_output_n283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o283
  r = spreadsheet.intermediate_output_o283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p283
  r = spreadsheet.intermediate_output_p283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q283
  r = spreadsheet.intermediate_output_q283
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c284
  r = spreadsheet.intermediate_output_c284
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d284
  r = spreadsheet.intermediate_output_d284
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e284
  r = spreadsheet.intermediate_output_e284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f284
  r = spreadsheet.intermediate_output_f284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5360591477000001,r[:number])
end

def test_intermediate_output_g284
  r = spreadsheet.intermediate_output_g284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h284
  r = spreadsheet.intermediate_output_h284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_intermediate_output_i284
  r = spreadsheet.intermediate_output_i284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_intermediate_output_j284
  r = spreadsheet.intermediate_output_j284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_intermediate_output_k284
  r = spreadsheet.intermediate_output_k284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l284
  r = spreadsheet.intermediate_output_l284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m284
  r = spreadsheet.intermediate_output_m284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n284
  r = spreadsheet.intermediate_output_n284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o284
  r = spreadsheet.intermediate_output_o284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p284
  r = spreadsheet.intermediate_output_p284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q284
  r = spreadsheet.intermediate_output_q284
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c285
  r = spreadsheet.intermediate_output_c285
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d285
  r = spreadsheet.intermediate_output_d285
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e285
  r = spreadsheet.intermediate_output_e285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f285
  r = spreadsheet.intermediate_output_f285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.978861884782586,r[:number])
end

def test_intermediate_output_g285
  r = spreadsheet.intermediate_output_g285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h285
  r = spreadsheet.intermediate_output_h285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.962752417600001,r[:number])
end

def test_intermediate_output_i285
  r = spreadsheet.intermediate_output_i285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.440670099999998,r[:number])
end

def test_intermediate_output_j285
  r = spreadsheet.intermediate_output_j285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.3428701,r[:number])
end

def test_intermediate_output_k285
  r = spreadsheet.intermediate_output_k285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.35726511600001,r[:number])
end

def test_intermediate_output_l285
  r = spreadsheet.intermediate_output_l285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.69377964,r[:number])
end

def test_intermediate_output_m285
  r = spreadsheet.intermediate_output_m285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.16934531999999,r[:number])
end

def test_intermediate_output_n285
  r = spreadsheet.intermediate_output_n285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.302885319999994,r[:number])
end

def test_intermediate_output_o285
  r = spreadsheet.intermediate_output_o285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.209185319999996,r[:number])
end

def test_intermediate_output_p285
  r = spreadsheet.intermediate_output_p285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_q285
  r = spreadsheet.intermediate_output_q285
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_c286
  r = spreadsheet.intermediate_output_c286
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.03",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d286
  r = spreadsheet.intermediate_output_d286
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e286
  r = spreadsheet.intermediate_output_e286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f286
  r = spreadsheet.intermediate_output_f286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_g286
  r = spreadsheet.intermediate_output_g286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h286
  r = spreadsheet.intermediate_output_h286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i286
  r = spreadsheet.intermediate_output_i286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0050034246575342495,r[:number])
end

def test_intermediate_output_j286
  r = spreadsheet.intermediate_output_j286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.020013698630136998,r[:number])
end

def test_intermediate_output_k286
  r = spreadsheet.intermediate_output_k286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050034246575342486,r[:number])
end

def test_intermediate_output_l286
  r = spreadsheet.intermediate_output_l286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_intermediate_output_m286
  r = spreadsheet.intermediate_output_m286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_intermediate_output_n286
  r = spreadsheet.intermediate_output_n286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o286
  r = spreadsheet.intermediate_output_o286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p286
  r = spreadsheet.intermediate_output_p286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q286
  r = spreadsheet.intermediate_output_q286
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c287
  r = spreadsheet.intermediate_output_c287
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.04",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d287
  r = spreadsheet.intermediate_output_d287
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e287
  r = spreadsheet.intermediate_output_e287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f287
  r = spreadsheet.intermediate_output_f287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_g287
  r = spreadsheet.intermediate_output_g287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h287
  r = spreadsheet.intermediate_output_h287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i287
  r = spreadsheet.intermediate_output_i287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j287
  r = spreadsheet.intermediate_output_j287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030020547945205484,r[:number])
end

def test_intermediate_output_k287
  r = spreadsheet.intermediate_output_k287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1584417808219177,r[:number])
end

def test_intermediate_output_l287
  r = spreadsheet.intermediate_output_l287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_intermediate_output_m287
  r = spreadsheet.intermediate_output_m287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_intermediate_output_n287
  r = spreadsheet.intermediate_output_n287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o287
  r = spreadsheet.intermediate_output_o287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p287
  r = spreadsheet.intermediate_output_p287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q287
  r = spreadsheet.intermediate_output_q287
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c288
  r = spreadsheet.intermediate_output_c288
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.05",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d288
  r = spreadsheet.intermediate_output_d288
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e288
  r = spreadsheet.intermediate_output_e288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f288
  r = spreadsheet.intermediate_output_f288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_g288
  r = spreadsheet.intermediate_output_g288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h288
  r = spreadsheet.intermediate_output_h288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i288
  r = spreadsheet.intermediate_output_i288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j288
  r = spreadsheet.intermediate_output_j288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k288
  r = spreadsheet.intermediate_output_k288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l288
  r = spreadsheet.intermediate_output_l288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m288
  r = spreadsheet.intermediate_output_m288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n288
  r = spreadsheet.intermediate_output_n288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o288
  r = spreadsheet.intermediate_output_o288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p288
  r = spreadsheet.intermediate_output_p288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q288
  r = spreadsheet.intermediate_output_q288
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c289
  r = spreadsheet.intermediate_output_c289
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.06",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d289
  r = spreadsheet.intermediate_output_d289
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e289
  r = spreadsheet.intermediate_output_e289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f289
  r = spreadsheet.intermediate_output_f289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.088394340000001,r[:number])
end

def test_intermediate_output_g289
  r = spreadsheet.intermediate_output_g289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h289
  r = spreadsheet.intermediate_output_h289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.114400994,r[:number])
end

def test_intermediate_output_i289
  r = spreadsheet.intermediate_output_i289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_j289
  r = spreadsheet.intermediate_output_j289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_k289
  r = spreadsheet.intermediate_output_k289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_l289
  r = spreadsheet.intermediate_output_l289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_m289
  r = spreadsheet.intermediate_output_m289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_n289
  r = spreadsheet.intermediate_output_n289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_o289
  r = spreadsheet.intermediate_output_o289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_p289
  r = spreadsheet.intermediate_output_p289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_q289
  r = spreadsheet.intermediate_output_q289
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_c290
  r = spreadsheet.intermediate_output_c290
  assert_equal(:ExcelString,r[:type])
  assert_equal("Y.02",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d290
  r = spreadsheet.intermediate_output_d290
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity oversupply (imports)",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e290
  r = spreadsheet.intermediate_output_e290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f290
  r = spreadsheet.intermediate_output_f290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.21452425,r[:number])
end

def test_intermediate_output_g290
  r = spreadsheet.intermediate_output_g290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h290
  r = spreadsheet.intermediate_output_h290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_i290
  r = spreadsheet.intermediate_output_i290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j290
  r = spreadsheet.intermediate_output_j290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k290
  r = spreadsheet.intermediate_output_k290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_l290
  r = spreadsheet.intermediate_output_l290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m290
  r = spreadsheet.intermediate_output_m290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n290
  r = spreadsheet.intermediate_output_n290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.684341886080802e-14,r[:number])
end

def test_intermediate_output_o290
  r = spreadsheet.intermediate_output_o290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p290
  r = spreadsheet.intermediate_output_p290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q290
  r = spreadsheet.intermediate_output_q290
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_intermediate_output_c291
  r = spreadsheet.intermediate_output_c291
  assert_equal(:ExcelString,r[:type])
  assert_equal("R.07",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d291
  r = spreadsheet.intermediate_output_d291
  assert_equal(:ExcelString,r[:type])
  assert_equal("Environmental heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e291
  r = spreadsheet.intermediate_output_e291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f291
  r = spreadsheet.intermediate_output_f291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_g291
  r = spreadsheet.intermediate_output_g291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h291
  r = spreadsheet.intermediate_output_h291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i291
  r = spreadsheet.intermediate_output_i291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j291
  r = spreadsheet.intermediate_output_j291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k291
  r = spreadsheet.intermediate_output_k291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l291
  r = spreadsheet.intermediate_output_l291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m291
  r = spreadsheet.intermediate_output_m291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n291
  r = spreadsheet.intermediate_output_n291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o291
  r = spreadsheet.intermediate_output_o291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p291
  r = spreadsheet.intermediate_output_p291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q291
  r = spreadsheet.intermediate_output_q291
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_d292
  r = spreadsheet.intermediate_output_d292
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e292
  r = spreadsheet.intermediate_output_e292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f292
  r = spreadsheet.intermediate_output_f292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.50879965682326,r[:number])
end

def test_intermediate_output_g292
  r = spreadsheet.intermediate_output_g292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h292
  r = spreadsheet.intermediate_output_h292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.80017770149263,r[:number])
end

def test_intermediate_output_i292
  r = spreadsheet.intermediate_output_i292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.86701468515299,r[:number])
end

def test_intermediate_output_j292
  r = spreadsheet.intermediate_output_j292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.78980840380536,r[:number])
end

def test_intermediate_output_k292
  r = spreadsheet.intermediate_output_k292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.59273739822123,r[:number])
end

def test_intermediate_output_l292
  r = spreadsheet.intermediate_output_l292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.32349558678314,r[:number])
end

def test_intermediate_output_m292
  r = spreadsheet.intermediate_output_m292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.6250681927008,r[:number])
end

def test_intermediate_output_n292
  r = spreadsheet.intermediate_output_n292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.44163245057696,r[:number])
end

def test_intermediate_output_o292
  r = spreadsheet.intermediate_output_o292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.55180843129864,r[:number])
end

def test_intermediate_output_p292
  r = spreadsheet.intermediate_output_p292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.96477952879691,r[:number])
end

def test_intermediate_output_q292
  r = spreadsheet.intermediate_output_q292
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.6862941839934,r[:number])
end

def test_intermediate_output_d293
  r = spreadsheet.intermediate_output_d293
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e293
  r = spreadsheet.intermediate_output_e293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f293
  r = spreadsheet.intermediate_output_f293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.4021773117744,r[:number])
end

def test_intermediate_output_g293
  r = spreadsheet.intermediate_output_g293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h293
  r = spreadsheet.intermediate_output_h293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.98728375500406,r[:number])
end

def test_intermediate_output_i293
  r = spreadsheet.intermediate_output_i293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477.7179707863396,r[:number])
end

def test_intermediate_output_j293
  r = spreadsheet.intermediate_output_j293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.29321857088854,r[:number])
end

def test_intermediate_output_k293
  r = spreadsheet.intermediate_output_k293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.1461187019778,r[:number])
end

def test_intermediate_output_l293
  r = spreadsheet.intermediate_output_l293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.75581145406315,r[:number])
end

def test_intermediate_output_m293
  r = spreadsheet.intermediate_output_m293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17138476620721,r[:number])
end

def test_intermediate_output_n293
  r = spreadsheet.intermediate_output_n293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.07342822723695,r[:number])
end

def test_intermediate_output_o293
  r = spreadsheet.intermediate_output_o293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.83099313468412,r[:number])
end

def test_intermediate_output_p293
  r = spreadsheet.intermediate_output_p293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.76203902923795,r[:number])
end

def test_intermediate_output_q293
  r = spreadsheet.intermediate_output_q293
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_intermediate_output_d294
  r = spreadsheet.intermediate_output_d294
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e294
  r = spreadsheet.intermediate_output_e294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f294
  r = spreadsheet.intermediate_output_f294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.622998738918,r[:number])
end

def test_intermediate_output_g294
  r = spreadsheet.intermediate_output_g294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h294
  r = spreadsheet.intermediate_output_h294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.0089098264583,r[:number])
end

def test_intermediate_output_i294
  r = spreadsheet.intermediate_output_i294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.1911081134084,r[:number])
end

def test_intermediate_output_j294
  r = spreadsheet.intermediate_output_j294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(855.1870235798388,r[:number])
end

def test_intermediate_output_k294
  r = spreadsheet.intermediate_output_k294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(859.5939643444532,r[:number])
end

def test_intermediate_output_l294
  r = spreadsheet.intermediate_output_l294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.7983560433511,r[:number])
end

def test_intermediate_output_m294
  r = spreadsheet.intermediate_output_m294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(828.4897394075546,r[:number])
end

def test_intermediate_output_n294
  r = spreadsheet.intermediate_output_n294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(847.4223190112918,r[:number])
end

def test_intermediate_output_o294
  r = spreadsheet.intermediate_output_o294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(858.3068752198818,r[:number])
end

def test_intermediate_output_p294
  r = spreadsheet.intermediate_output_p294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(872.8766716322104,r[:number])
end

def test_intermediate_output_q294
  r = spreadsheet.intermediate_output_q294
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_intermediate_output_d295
  r = spreadsheet.intermediate_output_d295
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e295
  r = spreadsheet.intermediate_output_e295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f295
  r = spreadsheet.intermediate_output_f295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1048.9298032969484,r[:number])
end

def test_intermediate_output_g295
  r = spreadsheet.intermediate_output_g295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h295
  r = spreadsheet.intermediate_output_h295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(978.0856143179448,r[:number])
end

def test_intermediate_output_i295
  r = spreadsheet.intermediate_output_i295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1001.4318635490304,r[:number])
end

def test_intermediate_output_j295
  r = spreadsheet.intermediate_output_j295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080.1732409505273,r[:number])
end

def test_intermediate_output_k295
  r = spreadsheet.intermediate_output_k295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1202.7184729043995,r[:number])
end

def test_intermediate_output_l295
  r = spreadsheet.intermediate_output_l295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1389.160504918114,r[:number])
end

def test_intermediate_output_m295
  r = spreadsheet.intermediate_output_m295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1575.1707290298787,r[:number])
end

def test_intermediate_output_n295
  r = spreadsheet.intermediate_output_n295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.4313689906198,r[:number])
end

def test_intermediate_output_o295
  r = spreadsheet.intermediate_output_o295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1861.115383171855,r[:number])
end

def test_intermediate_output_p295
  r = spreadsheet.intermediate_output_p295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1998.803224690223,r[:number])
end

def test_intermediate_output_q295
  r = spreadsheet.intermediate_output_q295
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_intermediate_output_d296
  r = spreadsheet.intermediate_output_d296
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total Primary Supply",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_e296
  r = spreadsheet.intermediate_output_e296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_f296
  r = spreadsheet.intermediate_output_f296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2710.526095457397,r[:number])
end

def test_intermediate_output_g296
  r = spreadsheet.intermediate_output_g296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h296
  r = spreadsheet.intermediate_output_h296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2578.8923481895154,r[:number])
end

def test_intermediate_output_i296
  r = spreadsheet.intermediate_output_i296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2579.7214186245888,r[:number])
end

def test_intermediate_output_j296
  r = spreadsheet.intermediate_output_j296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2588.1489101904845,r[:number])
end

def test_intermediate_output_k296
  r = spreadsheet.intermediate_output_k296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2606.0875624924493,r[:number])
end

def test_intermediate_output_l296
  r = spreadsheet.intermediate_output_l296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2612.2964657108046,r[:number])
end

def test_intermediate_output_m296
  r = spreadsheet.intermediate_output_m296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2671.1907847848342,r[:number])
end

def test_intermediate_output_n296
  r = spreadsheet.intermediate_output_n296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2790.0013619997258,r[:number])
end

def test_intermediate_output_o296
  r = spreadsheet.intermediate_output_o296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.3439732777197,r[:number])
end

def test_intermediate_output_p296
  r = spreadsheet.intermediate_output_p296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3071.824278200468,r[:number])
end

def test_intermediate_output_q296
  r = spreadsheet.intermediate_output_q296
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3207.0860368254926,r[:number])
end

def test_intermediate_output_d297
  r = spreadsheet.intermediate_output_d297
  assert_equal(:ExcelString,r[:type])
  assert_equal("Imported energy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f297
  r = spreadsheet.intermediate_output_f297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(818.936866535737,r[:number])
end

def test_intermediate_output_g297
  r = spreadsheet.intermediate_output_g297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h297
  r = spreadsheet.intermediate_output_h297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(761.5941198157466,r[:number])
end

def test_intermediate_output_i297
  r = spreadsheet.intermediate_output_i297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(935.5216937274517,r[:number])
end

def test_intermediate_output_j297
  r = spreadsheet.intermediate_output_j297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1227.2598564445884,r[:number])
end

def test_intermediate_output_k297
  r = spreadsheet.intermediate_output_k297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1468.5509599395214,r[:number])
end

def test_intermediate_output_l297
  r = spreadsheet.intermediate_output_l297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1656.0980956111512,r[:number])
end

def test_intermediate_output_m297
  r = spreadsheet.intermediate_output_m297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1936.613190185159,r[:number])
end

def test_intermediate_output_n297
  r = spreadsheet.intermediate_output_n297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2186.386860912899,r[:number])
end

def test_intermediate_output_o297
  r = spreadsheet.intermediate_output_o297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2425.9910187521364,r[:number])
end

def test_intermediate_output_p297
  r = spreadsheet.intermediate_output_p297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2653.47744026268,r[:number])
end

def test_intermediate_output_q297
  r = spreadsheet.intermediate_output_q297
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2838.0812774323877,r[:number])
end

def test_intermediate_output_p298
  r = spreadsheet.intermediate_output_p298
  assert_equal(:ExcelString,r[:type])
  assert_equal("% imported",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q298
  r = spreadsheet.intermediate_output_q298
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8849407982336635,r[:number])
end

def test_intermediate_output_d299
  r = spreadsheet.intermediate_output_d299
  assert_equal(:ExcelString,r[:type])
  assert_equal("Primary demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_f299
  r = spreadsheet.intermediate_output_f299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2707.9903243745525,r[:number])
end

def test_intermediate_output_g299
  r = spreadsheet.intermediate_output_g299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h299
  r = spreadsheet.intermediate_output_h299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2578.8923481895154,r[:number])
end

def test_intermediate_output_i299
  r = spreadsheet.intermediate_output_i299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2579.7214186245888,r[:number])
end

def test_intermediate_output_j299
  r = spreadsheet.intermediate_output_j299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2588.1489101904845,r[:number])
end

def test_intermediate_output_k299
  r = spreadsheet.intermediate_output_k299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2606.0875624924497,r[:number])
end

def test_intermediate_output_l299
  r = spreadsheet.intermediate_output_l299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2612.296465710804,r[:number])
end

def test_intermediate_output_m299
  r = spreadsheet.intermediate_output_m299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2671.1907847848347,r[:number])
end

def test_intermediate_output_n299
  r = spreadsheet.intermediate_output_n299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2790.001361999726,r[:number])
end

def test_intermediate_output_o299
  r = spreadsheet.intermediate_output_o299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.34397327772,r[:number])
end

def test_intermediate_output_p299
  r = spreadsheet.intermediate_output_p299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3071.8242782004686,r[:number])
end

def test_intermediate_output_q299
  r = spreadsheet.intermediate_output_q299
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3207.0860368254916,r[:number])
end

def test_intermediate_output_b302
  r = spreadsheet.intermediate_output_b302
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity, format for web-based interface",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c304
  r = spreadsheet.intermediate_output_c304
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.01",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h304
  r = spreadsheet.intermediate_output_h304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_intermediate_output_i304
  r = spreadsheet.intermediate_output_i304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_intermediate_output_j304
  r = spreadsheet.intermediate_output_j304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_intermediate_output_k304
  r = spreadsheet.intermediate_output_k304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_intermediate_output_l304
  r = spreadsheet.intermediate_output_l304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_intermediate_output_m304
  r = spreadsheet.intermediate_output_m304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_intermediate_output_n304
  r = spreadsheet.intermediate_output_n304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_intermediate_output_o304
  r = spreadsheet.intermediate_output_o304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_intermediate_output_p304
  r = spreadsheet.intermediate_output_p304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_intermediate_output_q304
  r = spreadsheet.intermediate_output_q304
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_r304
  r = spreadsheet.intermediate_output_r304
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_c306
  r = spreadsheet.intermediate_output_c306
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d306
  r = spreadsheet.intermediate_output_d306
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production for Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h306
  r = spreadsheet.intermediate_output_h306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i306
  r = spreadsheet.intermediate_output_i306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j306
  r = spreadsheet.intermediate_output_j306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k306
  r = spreadsheet.intermediate_output_k306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l306
  r = spreadsheet.intermediate_output_l306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m306
  r = spreadsheet.intermediate_output_m306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n306
  r = spreadsheet.intermediate_output_n306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o306
  r = spreadsheet.intermediate_output_o306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p306
  r = spreadsheet.intermediate_output_p306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q306
  r = spreadsheet.intermediate_output_q306
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c307
  r = spreadsheet.intermediate_output_c307
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d307
  r = spreadsheet.intermediate_output_d307
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h307
  r = spreadsheet.intermediate_output_h307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.172844,r[:number])
end

def test_intermediate_output_i307
  r = spreadsheet.intermediate_output_i307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.259002503628829,r[:number])
end

def test_intermediate_output_j307
  r = spreadsheet.intermediate_output_j307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.285606783827001,r[:number])
end

def test_intermediate_output_k307
  r = spreadsheet.intermediate_output_k307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.312393687431538,r[:number])
end

def test_intermediate_output_l307
  r = spreadsheet.intermediate_output_l307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.339365249637551,r[:number])
end

def test_intermediate_output_m307
  r = spreadsheet.intermediate_output_m307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.366523528320811,r[:number])
end

def test_intermediate_output_n307
  r = spreadsheet.intermediate_output_n307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.3938706042905045,r[:number])
end

def test_intermediate_output_o307
  r = spreadsheet.intermediate_output_o307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.421408581544809,r[:number])
end

def test_intermediate_output_p307
  r = spreadsheet.intermediate_output_p307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.449139587529321,r[:number])
end

def test_intermediate_output_q307
  r = spreadsheet.intermediate_output_q307
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.47706577339835,r[:number])
end

def test_intermediate_output_c308
  r = spreadsheet.intermediate_output_c308
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d308
  r = spreadsheet.intermediate_output_d308
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h308
  r = spreadsheet.intermediate_output_h308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i308
  r = spreadsheet.intermediate_output_i308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j308
  r = spreadsheet.intermediate_output_j308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k308
  r = spreadsheet.intermediate_output_k308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l308
  r = spreadsheet.intermediate_output_l308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m308
  r = spreadsheet.intermediate_output_m308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n308
  r = spreadsheet.intermediate_output_n308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o308
  r = spreadsheet.intermediate_output_o308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p308
  r = spreadsheet.intermediate_output_p308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q308
  r = spreadsheet.intermediate_output_q308
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c309
  r = spreadsheet.intermediate_output_c309
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d309
  r = spreadsheet.intermediate_output_d309
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic space heating and hot water",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h309
  r = spreadsheet.intermediate_output_h309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.008546529888466,r[:number])
end

def test_intermediate_output_i309
  r = spreadsheet.intermediate_output_i309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.776774904604437,r[:number])
end

def test_intermediate_output_j309
  r = spreadsheet.intermediate_output_j309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.943250737912486,r[:number])
end

def test_intermediate_output_k309
  r = spreadsheet.intermediate_output_k309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.18933662099497,r[:number])
end

def test_intermediate_output_l309
  r = spreadsheet.intermediate_output_l309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.847057573486566,r[:number])
end

def test_intermediate_output_m309
  r = spreadsheet.intermediate_output_m309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.922473900258154,r[:number])
end

def test_intermediate_output_n309
  r = spreadsheet.intermediate_output_n309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.61889890941194,r[:number])
end

def test_intermediate_output_o309
  r = spreadsheet.intermediate_output_o309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.891185568066064,r[:number])
end

def test_intermediate_output_p309
  r = spreadsheet.intermediate_output_p309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.84879586918063,r[:number])
end

def test_intermediate_output_q309
  r = spreadsheet.intermediate_output_q309
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.658172984497035,r[:number])
end

def test_intermediate_output_c310
  r = spreadsheet.intermediate_output_c310
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d310
  r = spreadsheet.intermediate_output_d310
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h310
  r = spreadsheet.intermediate_output_h310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.551697890247862,r[:number])
end

def test_intermediate_output_i310
  r = spreadsheet.intermediate_output_i310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.40903797859884,r[:number])
end

def test_intermediate_output_j310
  r = spreadsheet.intermediate_output_j310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.16946485012258,r[:number])
end

def test_intermediate_output_k310
  r = spreadsheet.intermediate_output_k310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.74416002679409,r[:number])
end

def test_intermediate_output_l310
  r = spreadsheet.intermediate_output_l310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.59493963027826,r[:number])
end

def test_intermediate_output_m310
  r = spreadsheet.intermediate_output_m310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.73848109426944,r[:number])
end

def test_intermediate_output_n310
  r = spreadsheet.intermediate_output_n310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.186936739885184,r[:number])
end

def test_intermediate_output_o310
  r = spreadsheet.intermediate_output_o310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.947741102135936,r[:number])
end

def test_intermediate_output_p310
  r = spreadsheet.intermediate_output_p310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.02338938595468,r[:number])
end

def test_intermediate_output_q310
  r = spreadsheet.intermediate_output_q310
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.41118473825011,r[:number])
end

def test_intermediate_output_c311
  r = spreadsheet.intermediate_output_c311
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d311
  r = spreadsheet.intermediate_output_d311
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h311
  r = spreadsheet.intermediate_output_h311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.7250002380565,r[:number])
end

def test_intermediate_output_i311
  r = spreadsheet.intermediate_output_i311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.37770781750622,r[:number])
end

def test_intermediate_output_j311
  r = spreadsheet.intermediate_output_j311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.4785198583305,r[:number])
end

def test_intermediate_output_k311
  r = spreadsheet.intermediate_output_k311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.46434104552873,r[:number])
end

def test_intermediate_output_l311
  r = spreadsheet.intermediate_output_l311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.1641125929225,r[:number])
end

def test_intermediate_output_m311
  r = spreadsheet.intermediate_output_m311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.56743589111149,r[:number])
end

def test_intermediate_output_n311
  r = spreadsheet.intermediate_output_n311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.68001200867188,r[:number])
end

def test_intermediate_output_o311
  r = spreadsheet.intermediate_output_o311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.82343859522426,r[:number])
end

def test_intermediate_output_p311
  r = spreadsheet.intermediate_output_p311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.062380337744,r[:number])
end

def test_intermediate_output_q311
  r = spreadsheet.intermediate_output_q311
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.40155946528074,r[:number])
end

def test_intermediate_output_c312
  r = spreadsheet.intermediate_output_c312
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d312
  r = spreadsheet.intermediate_output_d312
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h312
  r = spreadsheet.intermediate_output_h312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.6348790796996,r[:number])
end

def test_intermediate_output_i312
  r = spreadsheet.intermediate_output_i312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.0477408893982,r[:number])
end

def test_intermediate_output_j312
  r = spreadsheet.intermediate_output_j312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.15818753192958,r[:number])
end

def test_intermediate_output_k312
  r = spreadsheet.intermediate_output_k312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.34780373251103,r[:number])
end

def test_intermediate_output_l312
  r = spreadsheet.intermediate_output_l312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.61979665666068,r[:number])
end

def test_intermediate_output_m312
  r = spreadsheet.intermediate_output_m312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.97751212457892,r[:number])
end

def test_intermediate_output_n312
  r = spreadsheet.intermediate_output_n312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.42444092846185,r[:number])
end

def test_intermediate_output_o312
  r = spreadsheet.intermediate_output_o312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.96422544894558,r[:number])
end

def test_intermediate_output_p312
  r = spreadsheet.intermediate_output_p312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.6006665852183,r[:number])
end

def test_intermediate_output_q312
  r = spreadsheet.intermediate_output_q312
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.33773101406193,r[:number])
end

def test_intermediate_output_c313
  r = spreadsheet.intermediate_output_c313
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d313
  r = spreadsheet.intermediate_output_d313
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h313
  r = spreadsheet.intermediate_output_h313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.37233546157294,r[:number])
end

def test_intermediate_output_i313
  r = spreadsheet.intermediate_output_i313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.31124004032155,r[:number])
end

def test_intermediate_output_j313
  r = spreadsheet.intermediate_output_j313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.23778251461906,r[:number])
end

def test_intermediate_output_k313
  r = spreadsheet.intermediate_output_k313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.64428543810925,r[:number])
end

def test_intermediate_output_l313
  r = spreadsheet.intermediate_output_l313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.04040616949953,r[:number])
end

def test_intermediate_output_m313
  r = spreadsheet.intermediate_output_m313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.6557539796009,r[:number])
end

def test_intermediate_output_n313
  r = spreadsheet.intermediate_output_n313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.62764524743605,r[:number])
end

def test_intermediate_output_o313
  r = spreadsheet.intermediate_output_o313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.10920889300192,r[:number])
end

def test_intermediate_output_p313
  r = spreadsheet.intermediate_output_p313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.27122721289845,r[:number])
end

def test_intermediate_output_q313
  r = spreadsheet.intermediate_output_q313
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.30419216814937,r[:number])
end

def test_intermediate_output_c314
  r = spreadsheet.intermediate_output_c314
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d314
  r = spreadsheet.intermediate_output_d314
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic passenger transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h314
  r = spreadsheet.intermediate_output_h314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.580392457134547,r[:number])
end

def test_intermediate_output_i314
  r = spreadsheet.intermediate_output_i314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.081440121990916,r[:number])
end

def test_intermediate_output_j314
  r = spreadsheet.intermediate_output_j314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.141373974862617,r[:number])
end

def test_intermediate_output_k314
  r = spreadsheet.intermediate_output_k314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.323096485047898,r[:number])
end

def test_intermediate_output_l314
  r = spreadsheet.intermediate_output_l314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.455458229294567,r[:number])
end

def test_intermediate_output_m314
  r = spreadsheet.intermediate_output_m314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.433952472985883,r[:number])
end

def test_intermediate_output_n314
  r = spreadsheet.intermediate_output_n314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.586405934010916,r[:number])
end

def test_intermediate_output_o314
  r = spreadsheet.intermediate_output_o314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.696515393396112,r[:number])
end

def test_intermediate_output_p314
  r = spreadsheet.intermediate_output_p314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.554390850868224,r[:number])
end

def test_intermediate_output_q314
  r = spreadsheet.intermediate_output_q314
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.632736892106443,r[:number])
end

def test_intermediate_output_c315
  r = spreadsheet.intermediate_output_c315
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d315
  r = spreadsheet.intermediate_output_d315
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h315
  r = spreadsheet.intermediate_output_h315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10120000000000001,r[:number])
end

def test_intermediate_output_i315
  r = spreadsheet.intermediate_output_i315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10259599185085001,r[:number])
end

def test_intermediate_output_j315
  r = spreadsheet.intermediate_output_j315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10846245968266201,r[:number])
end

def test_intermediate_output_k315
  r = spreadsheet.intermediate_output_k315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11432892751447502,r[:number])
end

def test_intermediate_output_l315
  r = spreadsheet.intermediate_output_l315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12019539534628801,r[:number])
end

def test_intermediate_output_m315
  r = spreadsheet.intermediate_output_m315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1260618631781,r[:number])
end

def test_intermediate_output_n315
  r = spreadsheet.intermediate_output_n315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.131928331009913,r[:number])
end

def test_intermediate_output_o315
  r = spreadsheet.intermediate_output_o315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.137794798841725,r[:number])
end

def test_intermediate_output_p315
  r = spreadsheet.intermediate_output_p315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.143661266673538,r[:number])
end

def test_intermediate_output_q315
  r = spreadsheet.intermediate_output_q315
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.149527734505351,r[:number])
end

def test_intermediate_output_c316
  r = spreadsheet.intermediate_output_c316
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d316
  r = spreadsheet.intermediate_output_d316
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h316
  r = spreadsheet.intermediate_output_h316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_i316
  r = spreadsheet.intermediate_output_i316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j316
  r = spreadsheet.intermediate_output_j316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_k316
  r = spreadsheet.intermediate_output_k316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_l316
  r = spreadsheet.intermediate_output_l316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_m316
  r = spreadsheet.intermediate_output_m316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n316
  r = spreadsheet.intermediate_output_n316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_o316
  r = spreadsheet.intermediate_output_o316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p316
  r = spreadsheet.intermediate_output_p316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q316
  r = spreadsheet.intermediate_output_q316
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_c317
  r = spreadsheet.intermediate_output_c317
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d317
  r = spreadsheet.intermediate_output_d317
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h317
  r = spreadsheet.intermediate_output_h317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.864816135126634,r[:number])
end

def test_intermediate_output_i317
  r = spreadsheet.intermediate_output_i317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.4661951652320635,r[:number])
end

def test_intermediate_output_j317
  r = spreadsheet.intermediate_output_j317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.127455410129975,r[:number])
end

def test_intermediate_output_k317
  r = spreadsheet.intermediate_output_k317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.811946425969375,r[:number])
end

def test_intermediate_output_l317
  r = spreadsheet.intermediate_output_l317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.5650160316218935,r[:number])
end

def test_intermediate_output_m317
  r = spreadsheet.intermediate_output_m317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3739459995864545,r[:number])
end

def test_intermediate_output_n317
  r = spreadsheet.intermediate_output_n317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.226099651069918,r[:number])
end

def test_intermediate_output_o317
  r = spreadsheet.intermediate_output_o317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.1116989649088405,r[:number])
end

def test_intermediate_output_p317
  r = spreadsheet.intermediate_output_p317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0231778947204795,r[:number])
end

def test_intermediate_output_q317
  r = spreadsheet.intermediate_output_q317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.954681978041625,r[:number])
end

def test_intermediate_output_c318
  r = spreadsheet.intermediate_output_c318
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d318
  r = spreadsheet.intermediate_output_d318
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h318
  r = spreadsheet.intermediate_output_h318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5434122188034558,r[:number])
end

def test_intermediate_output_i318
  r = spreadsheet.intermediate_output_i318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4718031885075522,r[:number])
end

def test_intermediate_output_j318
  r = spreadsheet.intermediate_output_j318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.382384898664516,r[:number])
end

def test_intermediate_output_k318
  r = spreadsheet.intermediate_output_k318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2990989147526133,r[:number])
end

def test_intermediate_output_l318
  r = spreadsheet.intermediate_output_l318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.233915855367795,r[:number])
end

def test_intermediate_output_m318
  r = spreadsheet.intermediate_output_m318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6779996494278735,r[:number])
end

def test_intermediate_output_n318
  r = spreadsheet.intermediate_output_n318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.638972143961614,r[:number])
end

def test_intermediate_output_o318
  r = spreadsheet.intermediate_output_o318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6087734041936452,r[:number])
end

def test_intermediate_output_p318
  r = spreadsheet.intermediate_output_p318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.585406195024668,r[:number])
end

def test_intermediate_output_q318
  r = spreadsheet.intermediate_output_q318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.567325094007138,r[:number])
end

def test_intermediate_output_c319
  r = spreadsheet.intermediate_output_c319
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_d319
  r = spreadsheet.intermediate_output_d319
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h319
  r = spreadsheet.intermediate_output_h319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2590275909415456,r[:number])
end

def test_intermediate_output_i319
  r = spreadsheet.intermediate_output_i319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2917342901248294,r[:number])
end

def test_intermediate_output_j319
  r = spreadsheet.intermediate_output_j319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3553256124931699,r[:number])
end

def test_intermediate_output_k319
  r = spreadsheet.intermediate_output_k319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4241068474422023,r[:number])
end

def test_intermediate_output_l319
  r = spreadsheet.intermediate_output_l319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5339396467223014,r[:number])
end

def test_intermediate_output_m319
  r = spreadsheet.intermediate_output_m319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6569033260887653,r[:number])
end

def test_intermediate_output_n319
  r = spreadsheet.intermediate_output_n319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.794159227697514,r[:number])
end

def test_intermediate_output_o319
  r = spreadsheet.intermediate_output_o319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.947074795037317,r[:number])
end

def test_intermediate_output_p319
  r = spreadsheet.intermediate_output_p319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.117231134901898,r[:number])
end

def test_intermediate_output_q319
  r = spreadsheet.intermediate_output_q319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.306435188322379,r[:number])
end

def test_intermediate_output_d320
  r = spreadsheet.intermediate_output_d320
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h320
  r = spreadsheet.intermediate_output_h320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.8141516014716,r[:number])
end

def test_intermediate_output_i320
  r = spreadsheet.intermediate_output_i320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(360.59527289176435,r[:number])
end

def test_intermediate_output_j320
  r = spreadsheet.intermediate_output_j320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(370.38781463257413,r[:number])
end

def test_intermediate_output_k320
  r = spreadsheet.intermediate_output_k320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.67489815209615,r[:number])
end

def test_intermediate_output_l320
  r = spreadsheet.intermediate_output_l320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410.5142030308379,r[:number])
end

def test_intermediate_output_m320
  r = spreadsheet.intermediate_output_m320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.4970438294068,r[:number])
end

def test_intermediate_output_n320
  r = spreadsheet.intermediate_output_n320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(458.30936972590735,r[:number])
end

def test_intermediate_output_o320
  r = spreadsheet.intermediate_output_o320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.6590655452963,r[:number])
end

def test_intermediate_output_p320
  r = spreadsheet.intermediate_output_p320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(512.6794663207143,r[:number])
end

def test_intermediate_output_q320
  r = spreadsheet.intermediate_output_q320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(543.2006130306205,r[:number])
end

def test_intermediate_output_d322
  r = spreadsheet.intermediate_output_d322
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h322
  r = spreadsheet.intermediate_output_h322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.681592457134547,r[:number])
end

def test_intermediate_output_i322
  r = spreadsheet.intermediate_output_i322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.184036113841765,r[:number])
end

def test_intermediate_output_j322
  r = spreadsheet.intermediate_output_j322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.24983643454528,r[:number])
end

def test_intermediate_output_k322
  r = spreadsheet.intermediate_output_k322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.437425412562373,r[:number])
end

def test_intermediate_output_l322
  r = spreadsheet.intermediate_output_l322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.575653624640855,r[:number])
end

def test_intermediate_output_m322
  r = spreadsheet.intermediate_output_m322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.560014336163983,r[:number])
end

def test_intermediate_output_n322
  r = spreadsheet.intermediate_output_n322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.718334265020829,r[:number])
end

def test_intermediate_output_o322
  r = spreadsheet.intermediate_output_o322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.834310192237837,r[:number])
end

def test_intermediate_output_p322
  r = spreadsheet.intermediate_output_p322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.69805211754176,r[:number])
end

def test_intermediate_output_q322
  r = spreadsheet.intermediate_output_q322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.782264626611795,r[:number])
end

def test_intermediate_output_d323
  r = spreadsheet.intermediate_output_d323
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h323
  r = spreadsheet.intermediate_output_h323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.95340781550303,r[:number])
end

def test_intermediate_output_i323
  r = spreadsheet.intermediate_output_i323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.50824089769,r[:number])
end

def test_intermediate_output_j323
  r = spreadsheet.intermediate_output_j323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.03322960724054,r[:number])
end

def test_intermediate_output_k323
  r = spreadsheet.intermediate_output_k323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.0677244662628,r[:number])
end

def test_intermediate_output_l323
  r = spreadsheet.intermediate_output_l323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.17870330612678,r[:number])
end

def test_intermediate_output_m323
  r = spreadsheet.intermediate_output_m323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.07422315693603,r[:number])
end

def test_intermediate_output_n323
  r = spreadsheet.intermediate_output_n323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.88658764675807,r[:number])
end

def test_intermediate_output_o323
  r = spreadsheet.intermediate_output_o323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.2510898436492,r[:number])
end

def test_intermediate_output_p323
  r = spreadsheet.intermediate_output_p323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.3289508901729,r[:number])
end

def test_intermediate_output_q323
  r = spreadsheet.intermediate_output_q323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.30326501359647,r[:number])
end

def test_intermediate_output_d324
  r = spreadsheet.intermediate_output_d324
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h324
  r = spreadsheet.intermediate_output_h324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.81927201107787,r[:number])
end

def test_intermediate_output_i324
  r = spreadsheet.intermediate_output_i324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.477547173328105,r[:number])
end

def test_intermediate_output_j324
  r = spreadsheet.intermediate_output_j324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.46804120052823,r[:number])
end

def test_intermediate_output_k324
  r = spreadsheet.intermediate_output_k324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.35760349523126,r[:number])
end

def test_intermediate_output_l324
  r = spreadsheet.intermediate_output_l324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.97593685048713,r[:number])
end

def test_intermediate_output_m324
  r = spreadsheet.intermediate_output_m324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.31785832061637,r[:number])
end

def test_intermediate_output_n324
  r = spreadsheet.intermediate_output_n324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.59999487699464,r[:number])
end

def test_intermediate_output_o324
  r = spreadsheet.intermediate_output_o324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.78600146523932,r[:number])
end

def test_intermediate_output_p324
  r = spreadsheet.intermediate_output_p324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.9894163900372,r[:number])
end

def test_intermediate_output_q324
  r = spreadsheet.intermediate_output_q324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.37579291106952,r[:number])
end

def test_intermediate_output_d325
  r = spreadsheet.intermediate_output_d325
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h325
  r = spreadsheet.intermediate_output_h325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.3598793177561,r[:number])
end

def test_intermediate_output_i325
  r = spreadsheet.intermediate_output_i325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.42544870690443,r[:number])
end

def test_intermediate_output_j325
  r = spreadsheet.intermediate_output_j325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.63670739026009,r[:number])
end

def test_intermediate_output_k325
  r = spreadsheet.intermediate_output_k325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.81214477803974,r[:number])
end

def test_intermediate_output_l325
  r = spreadsheet.intermediate_output_l325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.7839092495832,r[:number])
end

def test_intermediate_output_m325
  r = spreadsheet.intermediate_output_m325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.5449480156904,r[:number])
end

def test_intermediate_output_n325
  r = spreadsheet.intermediate_output_n325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.10445293713371,r[:number])
end

def test_intermediate_output_o325
  r = spreadsheet.intermediate_output_o325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.78766404416984,r[:number])
end

def test_intermediate_output_p325
  r = spreadsheet.intermediate_output_p325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.6630469229623,r[:number])
end

def test_intermediate_output_q325
  r = spreadsheet.intermediate_output_q325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.73929047934269,r[:number])
end

def test_intermediate_output_d326
  r = spreadsheet.intermediate_output_d326
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h326
  r = spreadsheet.intermediate_output_h326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.81415160147156,r[:number])
end

def test_intermediate_output_i326
  r = spreadsheet.intermediate_output_i326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(360.5952728917643,r[:number])
end

def test_intermediate_output_j326
  r = spreadsheet.intermediate_output_j326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(370.38781463257413,r[:number])
end

def test_intermediate_output_k326
  r = spreadsheet.intermediate_output_k326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.67489815209615,r[:number])
end

def test_intermediate_output_l326
  r = spreadsheet.intermediate_output_l326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410.51420303083796,r[:number])
end

def test_intermediate_output_m326
  r = spreadsheet.intermediate_output_m326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.4970438294068,r[:number])
end

def test_intermediate_output_n326
  r = spreadsheet.intermediate_output_n326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(458.30936972590723,r[:number])
end

def test_intermediate_output_o326
  r = spreadsheet.intermediate_output_o326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.6590655452962,r[:number])
end

def test_intermediate_output_p326
  r = spreadsheet.intermediate_output_p326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(512.6794663207141,r[:number])
end

def test_intermediate_output_q326
  r = spreadsheet.intermediate_output_q326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(543.2006130306205,r[:number])
end

def test_intermediate_output_i368
  r = spreadsheet.intermediate_output_i368
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_intermediate_output_d369
  r = spreadsheet.intermediate_output_d369
  assert_equal(:ExcelString,r[:type])
  assert_equal("This is the data used for the sankey diagram in the web tool",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h369
  r = spreadsheet.intermediate_output_h369
  assert_equal(:ExcelString,r[:type])
  assert_equal("From",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i369
  r = spreadsheet.intermediate_output_i369
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_j369
  r = spreadsheet.intermediate_output_j369
  assert_equal(:ExcelString,r[:type])
  assert_equal("To",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n369
  r = spreadsheet.intermediate_output_n369
  assert_equal(:ExcelString,r[:type])
  assert_equal("Box",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o369
  r = spreadsheet.intermediate_output_o369
  assert_equal(:ExcelString,r[:type])
  assert_equal("Out",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_p369
  r = spreadsheet.intermediate_output_p369
  assert_equal(:ExcelString,r[:type])
  assert_equal("In",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_q369
  r = spreadsheet.intermediate_output_q369
  assert_equal(:ExcelString,r[:type])
  assert_equal("Delta",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_r369
  r = spreadsheet.intermediate_output_r369
  assert_equal(:ExcelString,r[:type])
  assert_equal("Problem",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h370
  r = spreadsheet.intermediate_output_h370
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i370
  r = spreadsheet.intermediate_output_i370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_j370
  r = spreadsheet.intermediate_output_j370
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n370
  r = spreadsheet.intermediate_output_n370
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o370
  r = spreadsheet.intermediate_output_o370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.42321810680604,r[:number])
end

def test_intermediate_output_p370
  r = spreadsheet.intermediate_output_p370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q370
  r = spreadsheet.intermediate_output_q370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.42321810680604,r[:number])
end

def test_intermediate_output_r370
  r = spreadsheet.intermediate_output_r370
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s370
  r = spreadsheet.intermediate_output_s370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.49638743214874,r[:number])
end

def test_intermediate_output_t370
  r = spreadsheet.intermediate_output_t370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u370
  r = spreadsheet.intermediate_output_u370
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.49638743214874,r[:number])
end

def test_intermediate_output_h371
  r = spreadsheet.intermediate_output_h371
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i371
  r = spreadsheet.intermediate_output_i371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3768044831494,r[:number])
end

def test_intermediate_output_j371
  r = spreadsheet.intermediate_output_j371
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n371
  r = spreadsheet.intermediate_output_n371
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o371
  r = spreadsheet.intermediate_output_o371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p371
  r = spreadsheet.intermediate_output_p371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.192664433495876,r[:number])
end

def test_intermediate_output_q371
  r = spreadsheet.intermediate_output_q371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-11.192664433495876,r[:number])
end

def test_intermediate_output_r371
  r = spreadsheet.intermediate_output_r371
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s371
  r = spreadsheet.intermediate_output_s371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t371
  r = spreadsheet.intermediate_output_t371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.394396627131044,r[:number])
end

def test_intermediate_output_u371
  r = spreadsheet.intermediate_output_u371
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-11.394396627131044,r[:number])
end

def test_intermediate_output_h372
  r = spreadsheet.intermediate_output_h372
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i372
  r = spreadsheet.intermediate_output_i372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_intermediate_output_j372
  r = spreadsheet.intermediate_output_j372
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n372
  r = spreadsheet.intermediate_output_n372
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o372
  r = spreadsheet.intermediate_output_o372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.43830434399338,r[:number])
end

def test_intermediate_output_p372
  r = spreadsheet.intermediate_output_p372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.4383043439934,r[:number])
end

def test_intermediate_output_q372
  r = spreadsheet.intermediate_output_q372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r372
  r = spreadsheet.intermediate_output_r372
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s372
  r = spreadsheet.intermediate_output_s372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.4319179503946,r[:number])
end

def test_intermediate_output_t372
  r = spreadsheet.intermediate_output_t372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.43191795039456,r[:number])
end

def test_intermediate_output_u372
  r = spreadsheet.intermediate_output_u372
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h373
  r = spreadsheet.intermediate_output_h373
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i373
  r = spreadsheet.intermediate_output_i373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(772.3784493415866,r[:number])
end

def test_intermediate_output_j373
  r = spreadsheet.intermediate_output_j373
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n373
  r = spreadsheet.intermediate_output_n373
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o373
  r = spreadsheet.intermediate_output_o373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p373
  r = spreadsheet.intermediate_output_p373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q373
  r = spreadsheet.intermediate_output_q373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r373
  r = spreadsheet.intermediate_output_r373
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s373
  r = spreadsheet.intermediate_output_s373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number])
end

def test_intermediate_output_t373
  r = spreadsheet.intermediate_output_t373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u373
  r = spreadsheet.intermediate_output_u373
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number])
end

def test_intermediate_output_h374
  r = spreadsheet.intermediate_output_h374
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i374
  r = spreadsheet.intermediate_output_i374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_intermediate_output_j374
  r = spreadsheet.intermediate_output_j374
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n374
  r = spreadsheet.intermediate_output_n374
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o374
  r = spreadsheet.intermediate_output_o374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p374
  r = spreadsheet.intermediate_output_p374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q374
  r = spreadsheet.intermediate_output_q374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r374
  r = spreadsheet.intermediate_output_r374
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s374
  r = spreadsheet.intermediate_output_s374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number])
end

def test_intermediate_output_t374
  r = spreadsheet.intermediate_output_t374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u374
  r = spreadsheet.intermediate_output_u374
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.0,r[:number])
end

def test_intermediate_output_h375
  r = spreadsheet.intermediate_output_h375
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i375
  r = spreadsheet.intermediate_output_i375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.3260236076515,r[:number])
end

def test_intermediate_output_j375
  r = spreadsheet.intermediate_output_j375
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n375
  r = spreadsheet.intermediate_output_n375
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o375
  r = spreadsheet.intermediate_output_o375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p375
  r = spreadsheet.intermediate_output_p375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q375
  r = spreadsheet.intermediate_output_q375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r375
  r = spreadsheet.intermediate_output_r375
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s375
  r = spreadsheet.intermediate_output_s375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.8480139335702,r[:number])
end

def test_intermediate_output_t375
  r = spreadsheet.intermediate_output_t375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.8480139335702,r[:number])
end

def test_intermediate_output_u375
  r = spreadsheet.intermediate_output_u375
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h376
  r = spreadsheet.intermediate_output_h376
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i376
  r = spreadsheet.intermediate_output_i376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.667299613344547,r[:number])
end

def test_intermediate_output_j376
  r = spreadsheet.intermediate_output_j376
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n376
  r = spreadsheet.intermediate_output_n376
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o376
  r = spreadsheet.intermediate_output_o376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_intermediate_output_p376
  r = spreadsheet.intermediate_output_p376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_intermediate_output_q376
  r = spreadsheet.intermediate_output_q376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r376
  r = spreadsheet.intermediate_output_r376
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s376
  r = spreadsheet.intermediate_output_s376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.55506943339304,r[:number])
end

def test_intermediate_output_t376
  r = spreadsheet.intermediate_output_t376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.55506943339304,r[:number])
end

def test_intermediate_output_u376
  r = spreadsheet.intermediate_output_u376
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h377
  r = spreadsheet.intermediate_output_h377
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i377
  r = spreadsheet.intermediate_output_i377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j377
  r = spreadsheet.intermediate_output_j377
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n377
  r = spreadsheet.intermediate_output_n377
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o377
  r = spreadsheet.intermediate_output_o377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3768044831494,r[:number])
end

def test_intermediate_output_p377
  r = spreadsheet.intermediate_output_p377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q377
  r = spreadsheet.intermediate_output_q377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3768044831494,r[:number])
end

def test_intermediate_output_r377
  r = spreadsheet.intermediate_output_r377
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s377
  r = spreadsheet.intermediate_output_s377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.59006943339304,r[:number])
end

def test_intermediate_output_t377
  r = spreadsheet.intermediate_output_t377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u377
  r = spreadsheet.intermediate_output_u377
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.59006943339304,r[:number])
end

def test_intermediate_output_h378
  r = spreadsheet.intermediate_output_h378
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i378
  r = spreadsheet.intermediate_output_i378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.42321810680604,r[:number])
end

def test_intermediate_output_j378
  r = spreadsheet.intermediate_output_j378
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n378
  r = spreadsheet.intermediate_output_n378
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o378
  r = spreadsheet.intermediate_output_o378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_p378
  r = spreadsheet.intermediate_output_p378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q378
  r = spreadsheet.intermediate_output_q378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_r378
  r = spreadsheet.intermediate_output_r378
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s378
  r = spreadsheet.intermediate_output_s378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_t378
  r = spreadsheet.intermediate_output_t378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u378
  r = spreadsheet.intermediate_output_u378
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_intermediate_output_h379
  r = spreadsheet.intermediate_output_h379
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i379
  r = spreadsheet.intermediate_output_i379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.347786623842815,r[:number])
end

def test_intermediate_output_j379
  r = spreadsheet.intermediate_output_j379
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n379
  r = spreadsheet.intermediate_output_n379
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o379
  r = spreadsheet.intermediate_output_o379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_intermediate_output_p379
  r = spreadsheet.intermediate_output_p379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_intermediate_output_q379
  r = spreadsheet.intermediate_output_q379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r379
  r = spreadsheet.intermediate_output_r379
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s379
  r = spreadsheet.intermediate_output_s379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.947704428248294,r[:number])
end

def test_intermediate_output_t379
  r = spreadsheet.intermediate_output_t379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.947704428248294,r[:number])
end

def test_intermediate_output_u379
  r = spreadsheet.intermediate_output_u379
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h380
  r = spreadsheet.intermediate_output_h380
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i380
  r = spreadsheet.intermediate_output_i380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.247989840000002,r[:number])
end

def test_intermediate_output_j380
  r = spreadsheet.intermediate_output_j380
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n380
  r = spreadsheet.intermediate_output_n380
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o380
  r = spreadsheet.intermediate_output_o380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p380
  r = spreadsheet.intermediate_output_p380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06603376625031618,r[:number])
end

def test_intermediate_output_q380
  r = spreadsheet.intermediate_output_q380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06603376625031618,r[:number])
end

def test_intermediate_output_r380
  r = spreadsheet.intermediate_output_r380
  assert_equal(:ExcelString,r[:type])
  assert_equal("error",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s380
  r = spreadsheet.intermediate_output_s380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t380
  r = spreadsheet.intermediate_output_t380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.45823092617519,r[:number])
end

def test_intermediate_output_u380
  r = spreadsheet.intermediate_output_u380
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.45823092617519,r[:number])
end

def test_intermediate_output_h381
  r = spreadsheet.intermediate_output_h381
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i381
  r = spreadsheet.intermediate_output_i381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j381
  r = spreadsheet.intermediate_output_j381
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n381
  r = spreadsheet.intermediate_output_n381
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o381
  r = spreadsheet.intermediate_output_o381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(588.5021128913104,r[:number])
end

def test_intermediate_output_p381
  r = spreadsheet.intermediate_output_p381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(581.4503293856261,r[:number])
end

def test_intermediate_output_q381
  r = spreadsheet.intermediate_output_q381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.051783505684284,r[:number])
end

def test_intermediate_output_r381
  r = spreadsheet.intermediate_output_r381
  assert_equal(:ExcelString,r[:type])
  assert_equal("error",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s381
  r = spreadsheet.intermediate_output_s381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(551.5637593526618,r[:number])
end

def test_intermediate_output_t381
  r = spreadsheet.intermediate_output_t381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(551.5637593526618,r[:number])
end

def test_intermediate_output_u381
  r = spreadsheet.intermediate_output_u381
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h382
  r = spreadsheet.intermediate_output_h382
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i382
  r = spreadsheet.intermediate_output_i382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j382
  r = spreadsheet.intermediate_output_j382
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n382
  r = spreadsheet.intermediate_output_n382
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o382
  r = spreadsheet.intermediate_output_o382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p382
  r = spreadsheet.intermediate_output_p382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q382
  r = spreadsheet.intermediate_output_q382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r382
  r = spreadsheet.intermediate_output_r382
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s382
  r = spreadsheet.intermediate_output_s382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.0,r[:number])
end

def test_intermediate_output_t382
  r = spreadsheet.intermediate_output_t382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u382
  r = spreadsheet.intermediate_output_u382
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.0,r[:number])
end

def test_intermediate_output_h383
  r = spreadsheet.intermediate_output_h383
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i383
  r = spreadsheet.intermediate_output_i383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_intermediate_output_j383
  r = spreadsheet.intermediate_output_j383
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n383
  r = spreadsheet.intermediate_output_n383
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o383
  r = spreadsheet.intermediate_output_o383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2156.1558887756587,r[:number])
end

def test_intermediate_output_p383
  r = spreadsheet.intermediate_output_p383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2156.155888775659,r[:number])
end

def test_intermediate_output_q383
  r = spreadsheet.intermediate_output_q383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r383
  r = spreadsheet.intermediate_output_r383
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s383
  r = spreadsheet.intermediate_output_s383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.6393702891703,r[:number])
end

def test_intermediate_output_t383
  r = spreadsheet.intermediate_output_t383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.63937028917024,r[:number])
end

def test_intermediate_output_u383
  r = spreadsheet.intermediate_output_u383
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h384
  r = spreadsheet.intermediate_output_h384
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i384
  r = spreadsheet.intermediate_output_i384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_intermediate_output_j384
  r = spreadsheet.intermediate_output_j384
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n384
  r = spreadsheet.intermediate_output_n384
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o384
  r = spreadsheet.intermediate_output_o384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.3260236076515,r[:number])
end

def test_intermediate_output_p384
  r = spreadsheet.intermediate_output_p384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q384
  r = spreadsheet.intermediate_output_q384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.3260236076515,r[:number])
end

def test_intermediate_output_r384
  r = spreadsheet.intermediate_output_r384
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s384
  r = spreadsheet.intermediate_output_s384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.91648830119163,r[:number])
end

def test_intermediate_output_t384
  r = spreadsheet.intermediate_output_t384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u384
  r = spreadsheet.intermediate_output_u384
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.91648830119163,r[:number])
end

def test_intermediate_output_h385
  r = spreadsheet.intermediate_output_h385
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i385
  r = spreadsheet.intermediate_output_i385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_intermediate_output_j385
  r = spreadsheet.intermediate_output_j385
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n385
  r = spreadsheet.intermediate_output_n385
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o385
  r = spreadsheet.intermediate_output_o385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_intermediate_output_p385
  r = spreadsheet.intermediate_output_p385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q385
  r = spreadsheet.intermediate_output_q385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_intermediate_output_r385
  r = spreadsheet.intermediate_output_r385
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s385
  r = spreadsheet.intermediate_output_s385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_intermediate_output_t385
  r = spreadsheet.intermediate_output_t385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u385
  r = spreadsheet.intermediate_output_u385
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_intermediate_output_h386
  r = spreadsheet.intermediate_output_h386
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i386
  r = spreadsheet.intermediate_output_i386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j386
  r = spreadsheet.intermediate_output_j386
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n386
  r = spreadsheet.intermediate_output_n386
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o386
  r = spreadsheet.intermediate_output_o386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p386
  r = spreadsheet.intermediate_output_p386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q386
  r = spreadsheet.intermediate_output_q386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r386
  r = spreadsheet.intermediate_output_r386
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s386
  r = spreadsheet.intermediate_output_s386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t386
  r = spreadsheet.intermediate_output_t386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u386
  r = spreadsheet.intermediate_output_u386
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h387
  r = spreadsheet.intermediate_output_h387
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i387
  r = spreadsheet.intermediate_output_i387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j387
  r = spreadsheet.intermediate_output_j387
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n387
  r = spreadsheet.intermediate_output_n387
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o387
  r = spreadsheet.intermediate_output_o387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p387
  r = spreadsheet.intermediate_output_p387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q387
  r = spreadsheet.intermediate_output_q387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r387
  r = spreadsheet.intermediate_output_r387
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s387
  r = spreadsheet.intermediate_output_s387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t387
  r = spreadsheet.intermediate_output_t387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u387
  r = spreadsheet.intermediate_output_u387
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h388
  r = spreadsheet.intermediate_output_h388
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i388
  r = spreadsheet.intermediate_output_i388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j388
  r = spreadsheet.intermediate_output_j388
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n388
  r = spreadsheet.intermediate_output_n388
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o388
  r = spreadsheet.intermediate_output_o388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p388
  r = spreadsheet.intermediate_output_p388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q388
  r = spreadsheet.intermediate_output_q388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r388
  r = spreadsheet.intermediate_output_r388
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s388
  r = spreadsheet.intermediate_output_s388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7012811485283734,r[:number])
end

def test_intermediate_output_t388
  r = spreadsheet.intermediate_output_t388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7012811485283734,r[:number])
end

def test_intermediate_output_u388
  r = spreadsheet.intermediate_output_u388
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_n389
  r = spreadsheet.intermediate_output_n389
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o389
  r = spreadsheet.intermediate_output_o389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p389
  r = spreadsheet.intermediate_output_p389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q389
  r = spreadsheet.intermediate_output_q389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r389
  r = spreadsheet.intermediate_output_r389
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s389
  r = spreadsheet.intermediate_output_s389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2094560370498355,r[:number])
end

def test_intermediate_output_t389
  r = spreadsheet.intermediate_output_t389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2094560370498355,r[:number])
end

def test_intermediate_output_u389
  r = spreadsheet.intermediate_output_u389
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h390
  r = spreadsheet.intermediate_output_h390
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i390
  r = spreadsheet.intermediate_output_i390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.19183129961111,r[:number])
end

def test_intermediate_output_j390
  r = spreadsheet.intermediate_output_j390
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n390
  r = spreadsheet.intermediate_output_n390
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o390
  r = spreadsheet.intermediate_output_o390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p390
  r = spreadsheet.intermediate_output_p390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.90030737883308,r[:number])
end

def test_intermediate_output_q390
  r = spreadsheet.intermediate_output_q390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-172.90030737883308,r[:number])
end

def test_intermediate_output_r390
  r = spreadsheet.intermediate_output_r390
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s390
  r = spreadsheet.intermediate_output_s390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t390
  r = spreadsheet.intermediate_output_t390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.66839811374751,r[:number])
end

def test_intermediate_output_u390
  r = spreadsheet.intermediate_output_u390
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-100.66839811374751,r[:number])
end

def test_intermediate_output_h391
  r = spreadsheet.intermediate_output_h391
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i391
  r = spreadsheet.intermediate_output_i391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.744845969984378,r[:number])
end

def test_intermediate_output_j391
  r = spreadsheet.intermediate_output_j391
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n391
  r = spreadsheet.intermediate_output_n391
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o391
  r = spreadsheet.intermediate_output_o391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p391
  r = spreadsheet.intermediate_output_p391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(578.6016420619402,r[:number])
end

def test_intermediate_output_q391
  r = spreadsheet.intermediate_output_q391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-578.6016420619402,r[:number])
end

def test_intermediate_output_r391
  r = spreadsheet.intermediate_output_r391
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s391
  r = spreadsheet.intermediate_output_s391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t391
  r = spreadsheet.intermediate_output_t391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.59644437905297,r[:number])
end

def test_intermediate_output_u391
  r = spreadsheet.intermediate_output_u391
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-272.59644437905297,r[:number])
end

def test_intermediate_output_h392
  r = spreadsheet.intermediate_output_h392
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i392
  r = spreadsheet.intermediate_output_i392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.597323282735694,r[:number])
end

def test_intermediate_output_j392
  r = spreadsheet.intermediate_output_j392
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n392
  r = spreadsheet.intermediate_output_n392
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o392
  r = spreadsheet.intermediate_output_o392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_p392
  r = spreadsheet.intermediate_output_p392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q392
  r = spreadsheet.intermediate_output_q392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_r392
  r = spreadsheet.intermediate_output_r392
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s392
  r = spreadsheet.intermediate_output_s392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_t392
  r = spreadsheet.intermediate_output_t392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u392
  r = spreadsheet.intermediate_output_u392
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_h393
  r = spreadsheet.intermediate_output_h393
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i393
  r = spreadsheet.intermediate_output_i393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.9043037916622,r[:number])
end

def test_intermediate_output_j393
  r = spreadsheet.intermediate_output_j393
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n393
  r = spreadsheet.intermediate_output_n393
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o393
  r = spreadsheet.intermediate_output_o393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p393
  r = spreadsheet.intermediate_output_p393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.8873476967058,r[:number])
end

def test_intermediate_output_q393
  r = spreadsheet.intermediate_output_q393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-849.8873476967058,r[:number])
end

def test_intermediate_output_r393
  r = spreadsheet.intermediate_output_r393
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s393
  r = spreadsheet.intermediate_output_s393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t393
  r = spreadsheet.intermediate_output_t393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.9804755886297,r[:number])
end

def test_intermediate_output_u393
  r = spreadsheet.intermediate_output_u393
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-355.9804755886297,r[:number])
end

def test_intermediate_output_h394
  r = spreadsheet.intermediate_output_h394
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i394
  r = spreadsheet.intermediate_output_i394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j394
  r = spreadsheet.intermediate_output_j394
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n394
  r = spreadsheet.intermediate_output_n394
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o394
  r = spreadsheet.intermediate_output_o394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p394
  r = spreadsheet.intermediate_output_p394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.58168305622323,r[:number])
end

def test_intermediate_output_q394
  r = spreadsheet.intermediate_output_q394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-188.58168305622323,r[:number])
end

def test_intermediate_output_r394
  r = spreadsheet.intermediate_output_r394
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s394
  r = spreadsheet.intermediate_output_s394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t394
  r = spreadsheet.intermediate_output_t394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.3002024926071,r[:number])
end

def test_intermediate_output_u394
  r = spreadsheet.intermediate_output_u394
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-186.3002024926071,r[:number])
end

def test_intermediate_output_h395
  r = spreadsheet.intermediate_output_h395
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i395
  r = spreadsheet.intermediate_output_i395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j395
  r = spreadsheet.intermediate_output_j395
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n395
  r = spreadsheet.intermediate_output_n395
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o395
  r = spreadsheet.intermediate_output_o395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p395
  r = spreadsheet.intermediate_output_p395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.50863651300597,r[:number])
end

def test_intermediate_output_q395
  r = spreadsheet.intermediate_output_q395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-129.50863651300597,r[:number])
end

def test_intermediate_output_r395
  r = spreadsheet.intermediate_output_r395
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s395
  r = spreadsheet.intermediate_output_s395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t395
  r = spreadsheet.intermediate_output_t395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.15035135056532,r[:number])
end

def test_intermediate_output_u395
  r = spreadsheet.intermediate_output_u395
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-96.15035135056532,r[:number])
end

def test_intermediate_output_h396
  r = spreadsheet.intermediate_output_h396
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i396
  r = spreadsheet.intermediate_output_i396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j396
  r = spreadsheet.intermediate_output_j396
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n396
  r = spreadsheet.intermediate_output_n396
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o396
  r = spreadsheet.intermediate_output_o396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p396
  r = spreadsheet.intermediate_output_p396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.39066503541156,r[:number])
end

def test_intermediate_output_q396
  r = spreadsheet.intermediate_output_q396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-101.39066503541156,r[:number])
end

def test_intermediate_output_r396
  r = spreadsheet.intermediate_output_r396
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s396
  r = spreadsheet.intermediate_output_s396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t396
  r = spreadsheet.intermediate_output_t396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.90673211164959,r[:number])
end

def test_intermediate_output_u396
  r = spreadsheet.intermediate_output_u396
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-72.90673211164959,r[:number])
end

def test_intermediate_output_h397
  r = spreadsheet.intermediate_output_h397
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i397
  r = spreadsheet.intermediate_output_i397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.82867,r[:number])
end

def test_intermediate_output_j397
  r = spreadsheet.intermediate_output_j397
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n397
  r = spreadsheet.intermediate_output_n397
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o397
  r = spreadsheet.intermediate_output_o397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p397
  r = spreadsheet.intermediate_output_p397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.43620774985737,r[:number])
end

def test_intermediate_output_q397
  r = spreadsheet.intermediate_output_q397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-111.43620774985737,r[:number])
end

def test_intermediate_output_r397
  r = spreadsheet.intermediate_output_r397
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s397
  r = spreadsheet.intermediate_output_s397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t397
  r = spreadsheet.intermediate_output_t397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.70002002556289,r[:number])
end

def test_intermediate_output_u397
  r = spreadsheet.intermediate_output_u397
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-62.70002002556289,r[:number])
end

def test_intermediate_output_h398
  r = spreadsheet.intermediate_output_h398
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i398
  r = spreadsheet.intermediate_output_i398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j398
  r = spreadsheet.intermediate_output_j398
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n398
  r = spreadsheet.intermediate_output_n398
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o398
  r = spreadsheet.intermediate_output_o398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.9041728789264,r[:number])
end

def test_intermediate_output_p398
  r = spreadsheet.intermediate_output_p398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(887.8266553154101,r[:number])
end

def test_intermediate_output_q398
  r = spreadsheet.intermediate_output_q398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-18.922482436483733,r[:number])
end

def test_intermediate_output_r398
  r = spreadsheet.intermediate_output_r398
  assert_equal(:ExcelString,r[:type])
  assert_equal("error",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s398
  r = spreadsheet.intermediate_output_s398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.1736401050265,r[:number])
end

def test_intermediate_output_t398
  r = spreadsheet.intermediate_output_t398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.1736401050266,r[:number])
end

def test_intermediate_output_u398
  r = spreadsheet.intermediate_output_u398
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h399
  r = spreadsheet.intermediate_output_h399
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i399
  r = spreadsheet.intermediate_output_i399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1152.7946373182087,r[:number])
end

def test_intermediate_output_j399
  r = spreadsheet.intermediate_output_j399
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n399
  r = spreadsheet.intermediate_output_n399
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o399
  r = spreadsheet.intermediate_output_o399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p399
  r = spreadsheet.intermediate_output_p399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(676.0221029604164,r[:number])
end

def test_intermediate_output_q399
  r = spreadsheet.intermediate_output_q399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-676.0221029604164,r[:number])
end

def test_intermediate_output_r399
  r = spreadsheet.intermediate_output_r399
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s399
  r = spreadsheet.intermediate_output_s399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t399
  r = spreadsheet.intermediate_output_t399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.6504645311538,r[:number])
end

def test_intermediate_output_u399
  r = spreadsheet.intermediate_output_u399
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-614.6504645311538,r[:number])
end

def test_intermediate_output_h400
  r = spreadsheet.intermediate_output_h400
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i400
  r = spreadsheet.intermediate_output_i400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j400
  r = spreadsheet.intermediate_output_j400
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n400
  r = spreadsheet.intermediate_output_n400
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o400
  r = spreadsheet.intermediate_output_o400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p400
  r = spreadsheet.intermediate_output_p400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q400
  r = spreadsheet.intermediate_output_q400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r400
  r = spreadsheet.intermediate_output_r400
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s400
  r = spreadsheet.intermediate_output_s400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t400
  r = spreadsheet.intermediate_output_t400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u400
  r = spreadsheet.intermediate_output_u400
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h401
  r = spreadsheet.intermediate_output_h401
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i401
  r = spreadsheet.intermediate_output_i401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_intermediate_output_j401
  r = spreadsheet.intermediate_output_j401
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n401
  r = spreadsheet.intermediate_output_n401
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o401
  r = spreadsheet.intermediate_output_o401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p401
  r = spreadsheet.intermediate_output_p401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number])
end

def test_intermediate_output_q401
  r = spreadsheet.intermediate_output_q401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-22.49614487028552,r[:number])
end

def test_intermediate_output_r401
  r = spreadsheet.intermediate_output_r401
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s401
  r = spreadsheet.intermediate_output_s401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t401
  r = spreadsheet.intermediate_output_t401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.046644936214143,r[:number])
end

def test_intermediate_output_u401
  r = spreadsheet.intermediate_output_u401
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-28.046644936214143,r[:number])
end

def test_intermediate_output_h402
  r = spreadsheet.intermediate_output_h402
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i402
  r = spreadsheet.intermediate_output_i402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(576.0327660656261,r[:number])
end

def test_intermediate_output_j402
  r = spreadsheet.intermediate_output_j402
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n402
  r = spreadsheet.intermediate_output_n402
  assert_equal(:ExcelString,r[:type])
  assert_equal("Ngas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o402
  r = spreadsheet.intermediate_output_o402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_intermediate_output_p402
  r = spreadsheet.intermediate_output_p402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_intermediate_output_q402
  r = spreadsheet.intermediate_output_q402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r402
  r = spreadsheet.intermediate_output_r402
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s402
  r = spreadsheet.intermediate_output_s402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297.14903018646385,r[:number])
end

def test_intermediate_output_t402
  r = spreadsheet.intermediate_output_t402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297.14903018646385,r[:number])
end

def test_intermediate_output_u402
  r = spreadsheet.intermediate_output_u402
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h403
  r = spreadsheet.intermediate_output_h403
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i403
  r = spreadsheet.intermediate_output_i403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(593.445494934326,r[:number])
end

def test_intermediate_output_j403
  r = spreadsheet.intermediate_output_j403
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n403
  r = spreadsheet.intermediate_output_n403
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o403
  r = spreadsheet.intermediate_output_o403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p403
  r = spreadsheet.intermediate_output_p403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q403
  r = spreadsheet.intermediate_output_q403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r403
  r = spreadsheet.intermediate_output_r403
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s403
  r = spreadsheet.intermediate_output_s403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.9888000000001,r[:number])
end

def test_intermediate_output_t403
  r = spreadsheet.intermediate_output_t403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u403
  r = spreadsheet.intermediate_output_u403
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(419.9888000000001,r[:number])
end

def test_intermediate_output_h404
  r = spreadsheet.intermediate_output_h404
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i404
  r = spreadsheet.intermediate_output_i404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j404
  r = spreadsheet.intermediate_output_j404
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n404
  r = spreadsheet.intermediate_output_n404
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o404
  r = spreadsheet.intermediate_output_o404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_intermediate_output_p404
  r = spreadsheet.intermediate_output_p404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_intermediate_output_q404
  r = spreadsheet.intermediate_output_q404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r404
  r = spreadsheet.intermediate_output_r404
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s404
  r = spreadsheet.intermediate_output_s404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.5771354262274,r[:number])
end

def test_intermediate_output_t404
  r = spreadsheet.intermediate_output_t404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.5771354262274,r[:number])
end

def test_intermediate_output_u404
  r = spreadsheet.intermediate_output_u404
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h405
  r = spreadsheet.intermediate_output_h405
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i405
  r = spreadsheet.intermediate_output_i405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j405
  r = spreadsheet.intermediate_output_j405
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n405
  r = spreadsheet.intermediate_output_n405
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o405
  r = spreadsheet.intermediate_output_o405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(772.3784493415866,r[:number])
end

def test_intermediate_output_p405
  r = spreadsheet.intermediate_output_p405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q405
  r = spreadsheet.intermediate_output_q405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(772.3784493415866,r[:number])
end

def test_intermediate_output_r405
  r = spreadsheet.intermediate_output_r405
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s405
  r = spreadsheet.intermediate_output_s405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(373.87377542238823,r[:number])
end

def test_intermediate_output_t405
  r = spreadsheet.intermediate_output_t405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u405
  r = spreadsheet.intermediate_output_u405
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(373.87377542238823,r[:number])
end

def test_intermediate_output_h406
  r = spreadsheet.intermediate_output_h406
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i406
  r = spreadsheet.intermediate_output_i406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j406
  r = spreadsheet.intermediate_output_j406
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n406
  r = spreadsheet.intermediate_output_n406
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o406
  r = spreadsheet.intermediate_output_o406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_intermediate_output_p406
  r = spreadsheet.intermediate_output_p406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q406
  r = spreadsheet.intermediate_output_q406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_intermediate_output_r406
  r = spreadsheet.intermediate_output_r406
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s406
  r = spreadsheet.intermediate_output_s406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_intermediate_output_t406
  r = spreadsheet.intermediate_output_t406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u406
  r = spreadsheet.intermediate_output_u406
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_intermediate_output_h407
  r = spreadsheet.intermediate_output_h407
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i407
  r = spreadsheet.intermediate_output_i407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j407
  r = spreadsheet.intermediate_output_j407
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n407
  r = spreadsheet.intermediate_output_n407
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o407
  r = spreadsheet.intermediate_output_o407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.59577646384282,r[:number])
end

def test_intermediate_output_p407
  r = spreadsheet.intermediate_output_p407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q407
  r = spreadsheet.intermediate_output_q407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.59577646384282,r[:number])
end

def test_intermediate_output_r407
  r = spreadsheet.intermediate_output_r407
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s407
  r = spreadsheet.intermediate_output_s407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.072098478484804,r[:number])
end

def test_intermediate_output_t407
  r = spreadsheet.intermediate_output_t407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u407
  r = spreadsheet.intermediate_output_u407
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.072098478484804,r[:number])
end

def test_intermediate_output_h408
  r = spreadsheet.intermediate_output_h408
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i408
  r = spreadsheet.intermediate_output_i408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j408
  r = spreadsheet.intermediate_output_j408
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n408
  r = spreadsheet.intermediate_output_n408
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o408
  r = spreadsheet.intermediate_output_o408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p408
  r = spreadsheet.intermediate_output_p408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q408
  r = spreadsheet.intermediate_output_q408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r408
  r = spreadsheet.intermediate_output_r408
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s408
  r = spreadsheet.intermediate_output_s408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t408
  r = spreadsheet.intermediate_output_t408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.288314718968195,r[:number])
end

def test_intermediate_output_u408
  r = spreadsheet.intermediate_output_u408
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-61.288314718968195,r[:number])
end

def test_intermediate_output_h409
  r = spreadsheet.intermediate_output_h409
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i409
  r = spreadsheet.intermediate_output_i409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j409
  r = spreadsheet.intermediate_output_j409
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n409
  r = spreadsheet.intermediate_output_n409
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o409
  r = spreadsheet.intermediate_output_o409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p409
  r = spreadsheet.intermediate_output_p409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q409
  r = spreadsheet.intermediate_output_q409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r409
  r = spreadsheet.intermediate_output_r409
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s409
  r = spreadsheet.intermediate_output_s409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.41553252431277,r[:number])
end

def test_intermediate_output_t409
  r = spreadsheet.intermediate_output_t409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u409
  r = spreadsheet.intermediate_output_u409
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.41553252431277,r[:number])
end

def test_intermediate_output_h410
  r = spreadsheet.intermediate_output_h410
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i410
  r = spreadsheet.intermediate_output_i410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_j410
  r = spreadsheet.intermediate_output_j410
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n410
  r = spreadsheet.intermediate_output_n410
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o410
  r = spreadsheet.intermediate_output_o410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p410
  r = spreadsheet.intermediate_output_p410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.403379009572024,r[:number])
end

def test_intermediate_output_q410
  r = spreadsheet.intermediate_output_q410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-17.403379009572024,r[:number])
end

def test_intermediate_output_r410
  r = spreadsheet.intermediate_output_r410
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s410
  r = spreadsheet.intermediate_output_s410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t410
  r = spreadsheet.intermediate_output_t410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.302960702035355,r[:number])
end

def test_intermediate_output_u410
  r = spreadsheet.intermediate_output_u410
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.302960702035355,r[:number])
end

def test_intermediate_output_h411
  r = spreadsheet.intermediate_output_h411
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i411
  r = spreadsheet.intermediate_output_i411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j411
  r = spreadsheet.intermediate_output_j411
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n411
  r = spreadsheet.intermediate_output_n411
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o411
  r = spreadsheet.intermediate_output_o411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p411
  r = spreadsheet.intermediate_output_p411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.86059089519557,r[:number])
end

def test_intermediate_output_q411
  r = spreadsheet.intermediate_output_q411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-335.86059089519557,r[:number])
end

def test_intermediate_output_r411
  r = spreadsheet.intermediate_output_r411
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s411
  r = spreadsheet.intermediate_output_s411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t411
  r = spreadsheet.intermediate_output_t411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.54009825396582,r[:number])
end

def test_intermediate_output_u411
  r = spreadsheet.intermediate_output_u411
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-164.54009825396582,r[:number])
end

def test_intermediate_output_h412
  r = spreadsheet.intermediate_output_h412
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i412
  r = spreadsheet.intermediate_output_i412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j412
  r = spreadsheet.intermediate_output_j412
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n412
  r = spreadsheet.intermediate_output_n412
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o412
  r = spreadsheet.intermediate_output_o412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p412
  r = spreadsheet.intermediate_output_p412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q412
  r = spreadsheet.intermediate_output_q412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r412
  r = spreadsheet.intermediate_output_r412
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s412
  r = spreadsheet.intermediate_output_s412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t412
  r = spreadsheet.intermediate_output_t412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u412
  r = spreadsheet.intermediate_output_u412
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h413
  r = spreadsheet.intermediate_output_h413
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i413
  r = spreadsheet.intermediate_output_i413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j413
  r = spreadsheet.intermediate_output_j413
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n413
  r = spreadsheet.intermediate_output_n413
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o413
  r = spreadsheet.intermediate_output_o413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p413
  r = spreadsheet.intermediate_output_p413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q413
  r = spreadsheet.intermediate_output_q413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r413
  r = spreadsheet.intermediate_output_r413
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s413
  r = spreadsheet.intermediate_output_s413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t413
  r = spreadsheet.intermediate_output_t413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u413
  r = spreadsheet.intermediate_output_u413
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h414
  r = spreadsheet.intermediate_output_h414
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i414
  r = spreadsheet.intermediate_output_i414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_intermediate_output_j414
  r = spreadsheet.intermediate_output_j414
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n414
  r = spreadsheet.intermediate_output_n414
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o414
  r = spreadsheet.intermediate_output_o414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p414
  r = spreadsheet.intermediate_output_p414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q414
  r = spreadsheet.intermediate_output_q414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r414
  r = spreadsheet.intermediate_output_r414
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s414
  r = spreadsheet.intermediate_output_s414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t414
  r = spreadsheet.intermediate_output_t414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u414
  r = spreadsheet.intermediate_output_u414
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h415
  r = spreadsheet.intermediate_output_h415
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i415
  r = spreadsheet.intermediate_output_i415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j415
  r = spreadsheet.intermediate_output_j415
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n415
  r = spreadsheet.intermediate_output_n415
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o415
  r = spreadsheet.intermediate_output_o415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.78162562276052,r[:number])
end

def test_intermediate_output_p415
  r = spreadsheet.intermediate_output_p415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.78162562276052,r[:number])
end

def test_intermediate_output_q415
  r = spreadsheet.intermediate_output_q415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r415
  r = spreadsheet.intermediate_output_r415
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s415
  r = spreadsheet.intermediate_output_s415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(448.3424689522869,r[:number])
end

def test_intermediate_output_t415
  r = spreadsheet.intermediate_output_t415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(448.34246895228694,r[:number])
end

def test_intermediate_output_u415
  r = spreadsheet.intermediate_output_u415
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h416
  r = spreadsheet.intermediate_output_h416
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i416
  r = spreadsheet.intermediate_output_i416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j416
  r = spreadsheet.intermediate_output_j416
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n416
  r = spreadsheet.intermediate_output_n416
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o416
  r = spreadsheet.intermediate_output_o416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1185.6233073182088,r[:number])
end

def test_intermediate_output_p416
  r = spreadsheet.intermediate_output_p416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1185.6233073182088,r[:number])
end

def test_intermediate_output_q416
  r = spreadsheet.intermediate_output_q416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r416
  r = spreadsheet.intermediate_output_r416
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s416
  r = spreadsheet.intermediate_output_s416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(927.9827519145847,r[:number])
end

def test_intermediate_output_t416
  r = spreadsheet.intermediate_output_t416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(927.9827519145847,r[:number])
end

def test_intermediate_output_u416
  r = spreadsheet.intermediate_output_u416
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h417
  r = spreadsheet.intermediate_output_h417
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i417
  r = spreadsheet.intermediate_output_i417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.556151543328035,r[:number])
end

def test_intermediate_output_j417
  r = spreadsheet.intermediate_output_j417
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n417
  r = spreadsheet.intermediate_output_n417
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o417
  r = spreadsheet.intermediate_output_o417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p417
  r = spreadsheet.intermediate_output_p417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q417
  r = spreadsheet.intermediate_output_q417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r417
  r = spreadsheet.intermediate_output_r417
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s417
  r = spreadsheet.intermediate_output_s417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t417
  r = spreadsheet.intermediate_output_t417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u417
  r = spreadsheet.intermediate_output_u417
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h418
  r = spreadsheet.intermediate_output_h418
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i418
  r = spreadsheet.intermediate_output_i418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j418
  r = spreadsheet.intermediate_output_j418
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n418
  r = spreadsheet.intermediate_output_n418
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o418
  r = spreadsheet.intermediate_output_o418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.667299613344547,r[:number])
end

def test_intermediate_output_p418
  r = spreadsheet.intermediate_output_p418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q418
  r = spreadsheet.intermediate_output_q418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.667299613344547,r[:number])
end

def test_intermediate_output_r418
  r = spreadsheet.intermediate_output_r418
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s418
  r = spreadsheet.intermediate_output_s418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.0095179564277,r[:number])
end

def test_intermediate_output_t418
  r = spreadsheet.intermediate_output_t418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u418
  r = spreadsheet.intermediate_output_u418
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.0095179564277,r[:number])
end

def test_intermediate_output_h419
  r = spreadsheet.intermediate_output_h419
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i419
  r = spreadsheet.intermediate_output_i419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j419
  r = spreadsheet.intermediate_output_j419
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n419
  r = spreadsheet.intermediate_output_n419
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o419
  r = spreadsheet.intermediate_output_o419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_p419
  r = spreadsheet.intermediate_output_p419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q419
  r = spreadsheet.intermediate_output_q419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_r419
  r = spreadsheet.intermediate_output_r419
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s419
  r = spreadsheet.intermediate_output_s419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_t419
  r = spreadsheet.intermediate_output_t419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u419
  r = spreadsheet.intermediate_output_u419
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_h420
  r = spreadsheet.intermediate_output_h420
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i420
  r = spreadsheet.intermediate_output_i420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j420
  r = spreadsheet.intermediate_output_j420
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_n420
  r = spreadsheet.intermediate_output_n420
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_o420
  r = spreadsheet.intermediate_output_o420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_p420
  r = spreadsheet.intermediate_output_p420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_q420
  r = spreadsheet.intermediate_output_q420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_intermediate_output_r420
  r = spreadsheet.intermediate_output_r420
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_s420
  r = spreadsheet.intermediate_output_s420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.39043532000001,r[:number])
end

def test_intermediate_output_t420
  r = spreadsheet.intermediate_output_t420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_u420
  r = spreadsheet.intermediate_output_u420
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.39043532000001,r[:number])
end

def test_intermediate_output_h421
  r = spreadsheet.intermediate_output_h421
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i421
  r = spreadsheet.intermediate_output_i421
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j421
  r = spreadsheet.intermediate_output_j421
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h422
  r = spreadsheet.intermediate_output_h422
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i422
  r = spreadsheet.intermediate_output_i422
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j422
  r = spreadsheet.intermediate_output_j422
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h423
  r = spreadsheet.intermediate_output_h423
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i423
  r = spreadsheet.intermediate_output_i423
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j423
  r = spreadsheet.intermediate_output_j423
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h424
  r = spreadsheet.intermediate_output_h424
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i424
  r = spreadsheet.intermediate_output_i424
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j424
  r = spreadsheet.intermediate_output_j424
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h425
  r = spreadsheet.intermediate_output_h425
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i425
  r = spreadsheet.intermediate_output_i425
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j425
  r = spreadsheet.intermediate_output_j425
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h426
  r = spreadsheet.intermediate_output_h426
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i426
  r = spreadsheet.intermediate_output_i426
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j426
  r = spreadsheet.intermediate_output_j426
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h427
  r = spreadsheet.intermediate_output_h427
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i427
  r = spreadsheet.intermediate_output_i427
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j427
  r = spreadsheet.intermediate_output_j427
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h428
  r = spreadsheet.intermediate_output_h428
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i428
  r = spreadsheet.intermediate_output_i428
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j428
  r = spreadsheet.intermediate_output_j428
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h429
  r = spreadsheet.intermediate_output_h429
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i429
  r = spreadsheet.intermediate_output_i429
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_intermediate_output_j429
  r = spreadsheet.intermediate_output_j429
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h430
  r = spreadsheet.intermediate_output_h430
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i430
  r = spreadsheet.intermediate_output_i430
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j430
  r = spreadsheet.intermediate_output_j430
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h431
  r = spreadsheet.intermediate_output_h431
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i431
  r = spreadsheet.intermediate_output_i431
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.658172984497035,r[:number])
end

def test_intermediate_output_j431
  r = spreadsheet.intermediate_output_j431
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h432
  r = spreadsheet.intermediate_output_h432
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i432
  r = spreadsheet.intermediate_output_i432
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j432
  r = spreadsheet.intermediate_output_j432
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h433
  r = spreadsheet.intermediate_output_h433
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i433
  r = spreadsheet.intermediate_output_i433
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j433
  r = spreadsheet.intermediate_output_j433
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h434
  r = spreadsheet.intermediate_output_h434
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i434
  r = spreadsheet.intermediate_output_i434
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(517.9434690774432,r[:number])
end

def test_intermediate_output_j434
  r = spreadsheet.intermediate_output_j434
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h435
  r = spreadsheet.intermediate_output_h435
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i435
  r = spreadsheet.intermediate_output_i435
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.41118473825011,r[:number])
end

def test_intermediate_output_j435
  r = spreadsheet.intermediate_output_j435
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h436
  r = spreadsheet.intermediate_output_h436
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i436
  r = spreadsheet.intermediate_output_i436
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j436
  r = spreadsheet.intermediate_output_j436
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h437
  r = spreadsheet.intermediate_output_h437
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i437
  r = spreadsheet.intermediate_output_i437
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j437
  r = spreadsheet.intermediate_output_j437
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h438
  r = spreadsheet.intermediate_output_h438
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i438
  r = spreadsheet.intermediate_output_i438
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.48912264058296,r[:number])
end

def test_intermediate_output_j438
  r = spreadsheet.intermediate_output_j438
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h439
  r = spreadsheet.intermediate_output_h439
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i439
  r = spreadsheet.intermediate_output_i439
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.40155946528074,r[:number])
end

def test_intermediate_output_j439
  r = spreadsheet.intermediate_output_j439
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h440
  r = spreadsheet.intermediate_output_h440
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i440
  r = spreadsheet.intermediate_output_i440
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.034648284576637,r[:number])
end

def test_intermediate_output_j440
  r = spreadsheet.intermediate_output_j440
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h441
  r = spreadsheet.intermediate_output_h441
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i441
  r = spreadsheet.intermediate_output_i441
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.33773101406193,r[:number])
end

def test_intermediate_output_j441
  r = spreadsheet.intermediate_output_j441
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h442
  r = spreadsheet.intermediate_output_h442
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i442
  r = spreadsheet.intermediate_output_i442
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.052934021349623,r[:number])
end

def test_intermediate_output_j442
  r = spreadsheet.intermediate_output_j442
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h443
  r = spreadsheet.intermediate_output_h443
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i443
  r = spreadsheet.intermediate_output_i443
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.82619924019815,r[:number])
end

def test_intermediate_output_j443
  r = spreadsheet.intermediate_output_j443
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h444
  r = spreadsheet.intermediate_output_h444
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i444
  r = spreadsheet.intermediate_output_i444
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.05754246808085,r[:number])
end

def test_intermediate_output_j444
  r = spreadsheet.intermediate_output_j444
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h445
  r = spreadsheet.intermediate_output_h445
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i445
  r = spreadsheet.intermediate_output_i445
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199.2602411701368,r[:number])
end

def test_intermediate_output_j445
  r = spreadsheet.intermediate_output_j445
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h446
  r = spreadsheet.intermediate_output_h446
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i446
  r = spreadsheet.intermediate_output_i446
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.59831850003326,r[:number])
end

def test_intermediate_output_j446
  r = spreadsheet.intermediate_output_j446
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h447
  r = spreadsheet.intermediate_output_h447
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i447
  r = spreadsheet.intermediate_output_i447
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.47706577339835,r[:number])
end

def test_intermediate_output_j447
  r = spreadsheet.intermediate_output_j447
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h448
  r = spreadsheet.intermediate_output_h448
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i448
  r = spreadsheet.intermediate_output_i448
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.89541315467967,r[:number])
end

def test_intermediate_output_j448
  r = spreadsheet.intermediate_output_j448
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h449
  r = spreadsheet.intermediate_output_h449
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i449
  r = spreadsheet.intermediate_output_i449
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6935792630536386,r[:number])
end

def test_intermediate_output_j449
  r = spreadsheet.intermediate_output_j449
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h450
  r = spreadsheet.intermediate_output_h450
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i450
  r = spreadsheet.intermediate_output_i450
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.126606242364216,r[:number])
end

def test_intermediate_output_j450
  r = spreadsheet.intermediate_output_j450
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h451
  r = spreadsheet.intermediate_output_h451
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i451
  r = spreadsheet.intermediate_output_i451
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.84226019889534,r[:number])
end

def test_intermediate_output_j451
  r = spreadsheet.intermediate_output_j451
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h452
  r = spreadsheet.intermediate_output_h452
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i452
  r = spreadsheet.intermediate_output_i452
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.0183306963002,r[:number])
end

def test_intermediate_output_j452
  r = spreadsheet.intermediate_output_j452
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h453
  r = spreadsheet.intermediate_output_h453
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i453
  r = spreadsheet.intermediate_output_i453
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.991787933400692,r[:number])
end

def test_intermediate_output_j453
  r = spreadsheet.intermediate_output_j453
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h454
  r = spreadsheet.intermediate_output_h454
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i454
  r = spreadsheet.intermediate_output_i454
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.411591076171332,r[:number])
end

def test_intermediate_output_j454
  r = spreadsheet.intermediate_output_j454
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h455
  r = spreadsheet.intermediate_output_h455
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i455
  r = spreadsheet.intermediate_output_i455
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06603376625031618,r[:number])
end

def test_intermediate_output_j455
  r = spreadsheet.intermediate_output_j455
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h456
  r = spreadsheet.intermediate_output_h456
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i456
  r = spreadsheet.intermediate_output_i456
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number])
end

def test_intermediate_output_j456
  r = spreadsheet.intermediate_output_j456
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h457
  r = spreadsheet.intermediate_output_h457
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i457
  r = spreadsheet.intermediate_output_i457
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.58168305622323,r[:number])
end

def test_intermediate_output_j457
  r = spreadsheet.intermediate_output_j457
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h458
  r = spreadsheet.intermediate_output_h458
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i458
  r = spreadsheet.intermediate_output_i458
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.50863651300597,r[:number])
end

def test_intermediate_output_j458
  r = spreadsheet.intermediate_output_j458
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h459
  r = spreadsheet.intermediate_output_h459
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i459
  r = spreadsheet.intermediate_output_i459
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_intermediate_output_j459
  r = spreadsheet.intermediate_output_j459
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_h460
  r = spreadsheet.intermediate_output_h460
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_intermediate_output_i460
  r = spreadsheet.intermediate_output_i460
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.116152691100137,r[:number])
end

def test_intermediate_output_j460
  r = spreadsheet.intermediate_output_j460
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end


  # start of Land Use
def test_land_use_b2
  r = spreadsheet.land_use_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land use implications",r[:string].force_encoding('utf-8'))
end

def test_land_use_c4
  r = spreadsheet.land_use_c4
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.01",r[:string].force_encoding('utf-8'))
end

def test_land_use_d4
  r = spreadsheet.land_use_d4
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK Land area",r[:string].force_encoding('utf-8'))
end

def test_land_use_h4
  r = spreadsheet.land_use_h4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_land_use_i4
  r = spreadsheet.land_use_i4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_land_use_j4
  r = spreadsheet.land_use_j4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_land_use_k4
  r = spreadsheet.land_use_k4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_land_use_l4
  r = spreadsheet.land_use_l4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_land_use_m4
  r = spreadsheet.land_use_m4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_land_use_n4
  r = spreadsheet.land_use_n4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_land_use_o4
  r = spreadsheet.land_use_o4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_land_use_p4
  r = spreadsheet.land_use_p4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_land_use_q4
  r = spreadsheet.land_use_q4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_land_use_r4
  r = spreadsheet.land_use_r4
  assert_equal(:ExcelString,r[:type])
  assert_equal("km^2",r[:string].force_encoding('utf-8'))
end

def test_land_use_c6
  r = spreadsheet.land_use_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_land_use_d6
  r = spreadsheet.land_use_d6
  assert_equal(:ExcelString,r[:type])
  assert_equal("onshore wind if 2.5 W/m2",r[:string].force_encoding('utf-8'))
end

def test_land_use_h6
  r = spreadsheet.land_use_h6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.50727999999998,r[:number])
end

def test_land_use_i6
  r = spreadsheet.land_use_i6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.80799999999977,r[:number])
end

def test_land_use_j6
  r = spreadsheet.land_use_j6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(800.8079999999997,r[:number])
end

def test_land_use_k6
  r = spreadsheet.land_use_k6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1130.8079999999998,r[:number])
end

def test_land_use_l6
  r = spreadsheet.land_use_l6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1321.6079999999995,r[:number])
end

def test_land_use_m6
  r = spreadsheet.land_use_m6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(994.0079999999995,r[:number])
end

def test_land_use_n6
  r = spreadsheet.land_use_n6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(664.0079999999997,r[:number])
end

def test_land_use_o6
  r = spreadsheet.land_use_o6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.00799999999975,r[:number])
end

def test_land_use_p6
  r = spreadsheet.land_use_p6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.007999999999824,r[:number])
end

def test_land_use_q6
  r = spreadsheet.land_use_q6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.007999999999824,r[:number])
end

def test_land_use_c7
  r = spreadsheet.land_use_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d7
  r = spreadsheet.land_use_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("hydroelectric resevoir assuming similar to Loch Sloy",r[:string].force_encoding('utf-8'))
end

def test_land_use_h7
  r = spreadsheet.land_use_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.31636363636362,r[:number])
end

def test_land_use_i7
  r = spreadsheet.land_use_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_j7
  r = spreadsheet.land_use_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_k7
  r = spreadsheet.land_use_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_l7
  r = spreadsheet.land_use_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_m7
  r = spreadsheet.land_use_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_n7
  r = spreadsheet.land_use_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_o7
  r = spreadsheet.land_use_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_p7
  r = spreadsheet.land_use_p7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_q7
  r = spreadsheet.land_use_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.36363636363635,r[:number])
end

def test_land_use_c8
  r = spreadsheet.land_use_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d8
  r = spreadsheet.land_use_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("solar PV if 20% efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h8
  r = spreadsheet.land_use_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08818181818181817,r[:number])
end

def test_land_use_i8
  r = spreadsheet.land_use_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1455,r[:number])
end

def test_land_use_j8
  r = spreadsheet.land_use_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07054545454545454,r[:number])
end

def test_land_use_k8
  r = spreadsheet.land_use_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l8
  r = spreadsheet.land_use_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m8
  r = spreadsheet.land_use_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n8
  r = spreadsheet.land_use_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o8
  r = spreadsheet.land_use_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p8
  r = spreadsheet.land_use_p8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q8
  r = spreadsheet.land_use_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c9
  r = spreadsheet.land_use_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d9
  r = spreadsheet.land_use_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("solar thermal panels if 50% efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h9
  r = spreadsheet.land_use_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i9
  r = spreadsheet.land_use_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j9
  r = spreadsheet.land_use_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k9
  r = spreadsheet.land_use_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l9
  r = spreadsheet.land_use_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m9
  r = spreadsheet.land_use_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n9
  r = spreadsheet.land_use_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o9
  r = spreadsheet.land_use_o9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p9
  r = spreadsheet.land_use_p9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q9
  r = spreadsheet.land_use_q9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c10
  r = spreadsheet.land_use_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_land_use_d10
  r = spreadsheet.land_use_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("micro wind if 2 Wpeak/m2",r[:string].force_encoding('utf-8'))
end

def test_land_use_h10
  r = spreadsheet.land_use_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i10
  r = spreadsheet.land_use_i10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j10
  r = spreadsheet.land_use_j10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k10
  r = spreadsheet.land_use_k10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l10
  r = spreadsheet.land_use_l10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m10
  r = spreadsheet.land_use_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n10
  r = spreadsheet.land_use_n10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o10
  r = spreadsheet.land_use_o10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p10
  r = spreadsheet.land_use_p10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q10
  r = spreadsheet.land_use_q10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c11
  r = spreadsheet.land_use_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Biocrop",r[:string].force_encoding('utf-8'))
end

def test_land_use_d11
  r = spreadsheet.land_use_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area of biocrops",r[:string].force_encoding('utf-8'))
end

def test_land_use_h11
  r = spreadsheet.land_use_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3639.4,r[:number])
end

def test_land_use_i11
  r = spreadsheet.land_use_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1120.0,r[:number])
end

def test_land_use_j11
  r = spreadsheet.land_use_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1420.0,r[:number])
end

def test_land_use_k11
  r = spreadsheet.land_use_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1720.0,r[:number])
end

def test_land_use_l11
  r = spreadsheet.land_use_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_land_use_m11
  r = spreadsheet.land_use_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2320.0,r[:number])
end

def test_land_use_n11
  r = spreadsheet.land_use_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2620.0,r[:number])
end

def test_land_use_o11
  r = spreadsheet.land_use_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2920.0,r[:number])
end

def test_land_use_p11
  r = spreadsheet.land_use_p11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3220.0,r[:number])
end

def test_land_use_q11
  r = spreadsheet.land_use_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3520.0,r[:number])
end

def test_land_use_c12
  r = spreadsheet.land_use_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Forestry",r[:string].force_encoding('utf-8'))
end

def test_land_use_d12
  r = spreadsheet.land_use_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Area of forest",r[:string].force_encoding('utf-8'))
end

def test_land_use_h12
  r = spreadsheet.land_use_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24369.699999999997,r[:number])
end

def test_land_use_i12
  r = spreadsheet.land_use_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24414.64,r[:number])
end

def test_land_use_j12
  r = spreadsheet.land_use_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24776.239999999998,r[:number])
end

def test_land_use_k12
  r = spreadsheet.land_use_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25137.84,r[:number])
end

def test_land_use_l12
  r = spreadsheet.land_use_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25499.44,r[:number])
end

def test_land_use_m12
  r = spreadsheet.land_use_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25861.039999999997,r[:number])
end

def test_land_use_n12
  r = spreadsheet.land_use_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26222.64,r[:number])
end

def test_land_use_o12
  r = spreadsheet.land_use_o12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26584.239999999998,r[:number])
end

def test_land_use_p12
  r = spreadsheet.land_use_p12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26945.839999999997,r[:number])
end

def test_land_use_q12
  r = spreadsheet.land_use_q12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27307.440000000002,r[:number])
end

def test_land_use_c14
  r = spreadsheet.land_use_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.04",r[:string].force_encoding('utf-8'))
end

def test_land_use_d14
  r = spreadsheet.land_use_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK Sea area",r[:string].force_encoding('utf-8'))
end

def test_land_use_h14
  r = spreadsheet.land_use_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_land_use_i14
  r = spreadsheet.land_use_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_land_use_j14
  r = spreadsheet.land_use_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_land_use_k14
  r = spreadsheet.land_use_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_land_use_l14
  r = spreadsheet.land_use_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_land_use_m14
  r = spreadsheet.land_use_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_land_use_n14
  r = spreadsheet.land_use_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_land_use_o14
  r = spreadsheet.land_use_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_land_use_p14
  r = spreadsheet.land_use_p14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_land_use_q14
  r = spreadsheet.land_use_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_land_use_r14
  r = spreadsheet.land_use_r14
  assert_equal(:ExcelString,r[:type])
  assert_equal("km^2",r[:string].force_encoding('utf-8'))
end

def test_land_use_c16
  r = spreadsheet.land_use_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_land_use_d16
  r = spreadsheet.land_use_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("offshore wind area if 2.5 W/m2",r[:string].force_encoding('utf-8'))
end

def test_land_use_h16
  r = spreadsheet.land_use_h16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.57815999999999,r[:number])
end

def test_land_use_i16
  r = spreadsheet.land_use_i16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.1320000000001,r[:number])
end

def test_land_use_j16
  r = spreadsheet.land_use_j16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(538.132,r[:number])
end

def test_land_use_k16
  r = spreadsheet.land_use_k16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(938.8824,r[:number])
end

def test_land_use_l16
  r = spreadsheet.land_use_l16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1311.0080000000003,r[:number])
end

def test_land_use_m16
  r = spreadsheet.land_use_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1203.9999999999998,r[:number])
end

def test_land_use_n16
  r = spreadsheet.land_use_n16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(809.9999999999998,r[:number])
end

def test_land_use_o16
  r = spreadsheet.land_use_o16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(359.99999999999994,r[:number])
end

def test_land_use_p16
  r = spreadsheet.land_use_p16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q16
  r = spreadsheet.land_use_q16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c17
  r = spreadsheet.land_use_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalStream",r[:string].force_encoding('utf-8'))
end

def test_land_use_d17
  r = spreadsheet.land_use_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("tidal stream devices if >1m/s tides",r[:string].force_encoding('utf-8'))
end

def test_land_use_h17
  r = spreadsheet.land_use_h17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i17
  r = spreadsheet.land_use_i17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10569930661254866,r[:number])
end

def test_land_use_j17
  r = spreadsheet.land_use_j17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42279722645019463,r[:number])
end

def test_land_use_k17
  r = spreadsheet.land_use_k17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0569930661254865,r[:number])
end

def test_land_use_l17
  r = spreadsheet.land_use_l17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6424826653137132,r[:number])
end

def test_land_use_m17
  r = spreadsheet.land_use_m17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6424826653137132,r[:number])
end

def test_land_use_n17
  r = spreadsheet.land_use_n17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o17
  r = spreadsheet.land_use_o17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p17
  r = spreadsheet.land_use_p17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q17
  r = spreadsheet.land_use_q17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c18
  r = spreadsheet.land_use_c18
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.TidalRange",r[:string].force_encoding('utf-8'))
end

def test_land_use_d18
  r = spreadsheet.land_use_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("tidal impoundment if >Xm tidal range",r[:string].force_encoding('utf-8'))
end

def test_land_use_h18
  r = spreadsheet.land_use_h18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i18
  r = spreadsheet.land_use_i18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j18
  r = spreadsheet.land_use_j18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k18
  r = spreadsheet.land_use_k18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l18
  r = spreadsheet.land_use_l18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m18
  r = spreadsheet.land_use_m18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n18
  r = spreadsheet.land_use_n18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o18
  r = spreadsheet.land_use_o18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p18
  r = spreadsheet.land_use_p18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q18
  r = spreadsheet.land_use_q18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c19
  r = spreadsheet.land_use_c19
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_land_use_d19
  r = spreadsheet.land_use_d19
  assert_equal(:ExcelString,r[:type])
  assert_equal("algae if 0.9W/m2 efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h19
  r = spreadsheet.land_use_h19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i19
  r = spreadsheet.land_use_i19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j19
  r = spreadsheet.land_use_j19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k19
  r = spreadsheet.land_use_k19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l19
  r = spreadsheet.land_use_l19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m19
  r = spreadsheet.land_use_m19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n19
  r = spreadsheet.land_use_n19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o19
  r = spreadsheet.land_use_o19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p19
  r = spreadsheet.land_use_p19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q19
  r = spreadsheet.land_use_q19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c21
  r = spreadsheet.land_use_c21
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.05",r[:string].force_encoding('utf-8'))
end

def test_land_use_d21
  r = spreadsheet.land_use_d21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Land area overseas",r[:string].force_encoding('utf-8'))
end

def test_land_use_h21
  r = spreadsheet.land_use_h21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_land_use_i21
  r = spreadsheet.land_use_i21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_land_use_j21
  r = spreadsheet.land_use_j21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_land_use_k21
  r = spreadsheet.land_use_k21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_land_use_l21
  r = spreadsheet.land_use_l21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_land_use_m21
  r = spreadsheet.land_use_m21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_land_use_n21
  r = spreadsheet.land_use_n21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_land_use_o21
  r = spreadsheet.land_use_o21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_land_use_p21
  r = spreadsheet.land_use_p21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_land_use_q21
  r = spreadsheet.land_use_q21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_land_use_r21
  r = spreadsheet.land_use_r21
  assert_equal(:ExcelString,r[:type])
  assert_equal("km^2",r[:string].force_encoding('utf-8'))
end

def test_land_use_c23
  r = spreadsheet.land_use_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d23
  r = spreadsheet.land_use_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("biocrops overseas if 0.6W/m2 productivity",r[:string].force_encoding('utf-8'))
end

def test_land_use_h23
  r = spreadsheet.land_use_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(760.6510000760512,r[:number])
end

def test_land_use_i23
  r = spreadsheet.land_use_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(707.5823256521406,r[:number])
end

def test_land_use_j23
  r = spreadsheet.land_use_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(619.134534945623,r[:number])
end

def test_land_use_k23
  r = spreadsheet.land_use_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(530.6867442391055,r[:number])
end

def test_land_use_l23
  r = spreadsheet.land_use_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.2389535325879,r[:number])
end

def test_land_use_m23
  r = spreadsheet.land_use_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(353.7911628260703,r[:number])
end

def test_land_use_n23
  r = spreadsheet.land_use_n23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.3433721195527,r[:number])
end

def test_land_use_o23
  r = spreadsheet.land_use_o23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.89558141303516,r[:number])
end

def test_land_use_p23
  r = spreadsheet.land_use_p23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.44779070651758,r[:number])
end

def test_land_use_q23
  r = spreadsheet.land_use_q23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c24
  r = spreadsheet.land_use_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d24
  r = spreadsheet.land_use_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("solar devices overseas assuming 15W/m2 ",r[:string].force_encoding('utf-8'))
end

def test_land_use_h24
  r = spreadsheet.land_use_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i24
  r = spreadsheet.land_use_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j24
  r = spreadsheet.land_use_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k24
  r = spreadsheet.land_use_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l24
  r = spreadsheet.land_use_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m24
  r = spreadsheet.land_use_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n24
  r = spreadsheet.land_use_n24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o24
  r = spreadsheet.land_use_o24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p24
  r = spreadsheet.land_use_p24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q24
  r = spreadsheet.land_use_q24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c26
  r = spreadsheet.land_use_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.06",r[:string].force_encoding('utf-8'))
end

def test_land_use_d26
  r = spreadsheet.land_use_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Length of wave front",r[:string].force_encoding('utf-8'))
end

def test_land_use_h26
  r = spreadsheet.land_use_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_land_use_i26
  r = spreadsheet.land_use_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_land_use_j26
  r = spreadsheet.land_use_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_land_use_k26
  r = spreadsheet.land_use_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_land_use_l26
  r = spreadsheet.land_use_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_land_use_m26
  r = spreadsheet.land_use_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_land_use_n26
  r = spreadsheet.land_use_n26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_land_use_o26
  r = spreadsheet.land_use_o26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_land_use_p26
  r = spreadsheet.land_use_p26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_land_use_q26
  r = spreadsheet.land_use_q26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_land_use_r26
  r = spreadsheet.land_use_r26
  assert_equal(:ExcelString,r[:type])
  assert_equal("km",r[:string].force_encoding('utf-8'))
end

def test_land_use_c28
  r = spreadsheet.land_use_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c.Wave",r[:string].force_encoding('utf-8'))
end

def test_land_use_d28
  r = spreadsheet.land_use_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("wave energy convertors if 25% efficient",r[:string].force_encoding('utf-8'))
end

def test_land_use_h28
  r = spreadsheet.land_use_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i28
  r = spreadsheet.land_use_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j28
  r = spreadsheet.land_use_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03805175038051751,r[:number])
end

def test_land_use_k28
  r = spreadsheet.land_use_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0082868256384225,r[:number])
end

def test_land_use_l28
  r = spreadsheet.land_use_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.020717064096051,r[:number])
end

def test_land_use_m28
  r = spreadsheet.land_use_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.020717064096051,r[:number])
end

def test_land_use_n28
  r = spreadsheet.land_use_n28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o28
  r = spreadsheet.land_use_o28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p28
  r = spreadsheet.land_use_p28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q28
  r = spreadsheet.land_use_q28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c30
  r = spreadsheet.land_use_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("B.03",r[:string].force_encoding('utf-8'))
end

def test_land_use_d30
  r = spreadsheet.land_use_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Number of units",r[:string].force_encoding('utf-8'))
end

def test_land_use_h30
  r = spreadsheet.land_use_h30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_land_use_i30
  r = spreadsheet.land_use_i30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_land_use_j30
  r = spreadsheet.land_use_j30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_land_use_k30
  r = spreadsheet.land_use_k30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_land_use_l30
  r = spreadsheet.land_use_l30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_land_use_m30
  r = spreadsheet.land_use_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_land_use_n30
  r = spreadsheet.land_use_n30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_land_use_o30
  r = spreadsheet.land_use_o30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_land_use_p30
  r = spreadsheet.land_use_p30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_land_use_q30
  r = spreadsheet.land_use_q30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_land_use_r30
  r = spreadsheet.land_use_r30
  assert_equal(:ExcelString,r[:type])
  assert_equal("#",r[:string].force_encoding('utf-8'))
end

def test_land_use_c32
  r = spreadsheet.land_use_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d32
  r = spreadsheet.land_use_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("2 GW thermal power stations",r[:string].force_encoding('utf-8'))
end

def test_land_use_h32
  r = spreadsheet.land_use_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.290833849434243,r[:number])
end

def test_land_use_i32
  r = spreadsheet.land_use_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.810086092455084,r[:number])
end

def test_land_use_j32
  r = spreadsheet.land_use_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.137479684218917,r[:number])
end

def test_land_use_k32
  r = spreadsheet.land_use_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.95152168842067,r[:number])
end

def test_land_use_l32
  r = spreadsheet.land_use_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.685641800934988,r[:number])
end

def test_land_use_m32
  r = spreadsheet.land_use_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.98335805415216,r[:number])
end

def test_land_use_n32
  r = spreadsheet.land_use_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.08944713893333,r[:number])
end

def test_land_use_o32
  r = spreadsheet.land_use_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.78763535878784,r[:number])
end

def test_land_use_p32
  r = spreadsheet.land_use_p32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.47058756436885,r[:number])
end

def test_land_use_q32
  r = spreadsheet.land_use_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.13999516019266,r[:number])
end

def test_land_use_c33
  r = spreadsheet.land_use_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d33
  r = spreadsheet.land_use_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("1.2 GW CCS power stations",r[:string].force_encoding('utf-8'))
end

def test_land_use_h33
  r = spreadsheet.land_use_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i33
  r = spreadsheet.land_use_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j33
  r = spreadsheet.land_use_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7083333333333335,r[:number])
end

def test_land_use_k33
  r = spreadsheet.land_use_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.416666666666667,r[:number])
end

def test_land_use_l33
  r = spreadsheet.land_use_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number])
end

def test_land_use_m33
  r = spreadsheet.land_use_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number])
end

def test_land_use_n33
  r = spreadsheet.land_use_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number])
end

def test_land_use_o33
  r = spreadsheet.land_use_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number])
end

def test_land_use_p33
  r = spreadsheet.land_use_p33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number])
end

def test_land_use_q33
  r = spreadsheet.land_use_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4166666666666667,r[:number])
end

def test_land_use_c34
  r = spreadsheet.land_use_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_land_use_d34
  r = spreadsheet.land_use_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("3 GW nuclear power station complexes",r[:string].force_encoding('utf-8'))
end

def test_land_use_h34
  r = spreadsheet.land_use_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6666666666666665,r[:number])
end

def test_land_use_i34
  r = spreadsheet.land_use_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3333333333333335,r[:number])
end

def test_land_use_j34
  r = spreadsheet.land_use_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4,r[:number])
end

def test_land_use_k34
  r = spreadsheet.land_use_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2000000000000002,r[:number])
end

def test_land_use_l34
  r = spreadsheet.land_use_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4000000000000002,r[:number])
end

def test_land_use_m34
  r = spreadsheet.land_use_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4000000000000002,r[:number])
end

def test_land_use_n34
  r = spreadsheet.land_use_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o34
  r = spreadsheet.land_use_o34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p34
  r = spreadsheet.land_use_p34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q34
  r = spreadsheet.land_use_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c35
  r = spreadsheet.land_use_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_land_use_d35
  r = spreadsheet.land_use_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("0.01 GW geothermal power stations",r[:string].force_encoding('utf-8'))
end

def test_land_use_h35
  r = spreadsheet.land_use_h35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i35
  r = spreadsheet.land_use_i35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j35
  r = spreadsheet.land_use_j35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k35
  r = spreadsheet.land_use_k35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l35
  r = spreadsheet.land_use_l35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m35
  r = spreadsheet.land_use_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n35
  r = spreadsheet.land_use_n35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o35
  r = spreadsheet.land_use_o35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p35
  r = spreadsheet.land_use_p35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q35
  r = spreadsheet.land_use_q35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c36
  r = spreadsheet.land_use_c36
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_land_use_d36
  r = spreadsheet.land_use_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("1 GW standby generators",r[:string].force_encoding('utf-8'))
end

def test_land_use_h36
  r = spreadsheet.land_use_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_i36
  r = spreadsheet.land_use_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_j36
  r = spreadsheet.land_use_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_k36
  r = spreadsheet.land_use_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_l36
  r = spreadsheet.land_use_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_m36
  r = spreadsheet.land_use_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_n36
  r = spreadsheet.land_use_n36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_o36
  r = spreadsheet.land_use_o36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_p36
  r = spreadsheet.land_use_p36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_q36
  r = spreadsheet.land_use_q36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_land_use_c37
  r = spreadsheet.land_use_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b",r[:string].force_encoding('utf-8'))
end

def test_land_use_d37
  r = spreadsheet.land_use_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Number of Household, C&I and CDW to energy facilities",r[:string].force_encoding('utf-8'))
end

def test_land_use_h37
  r = spreadsheet.land_use_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.99784119293418,r[:number])
end

def test_land_use_i37
  r = spreadsheet.land_use_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.70304186046512,r[:number])
end

def test_land_use_j37
  r = spreadsheet.land_use_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.03595044186047,r[:number])
end

def test_land_use_k37
  r = spreadsheet.land_use_k37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.52010037209303,r[:number])
end

def test_land_use_l37
  r = spreadsheet.land_use_l37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.652986837209305,r[:number])
end

def test_land_use_m37
  r = spreadsheet.land_use_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.48816744186045,r[:number])
end

def test_land_use_n37
  r = spreadsheet.land_use_n37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.15112520930234,r[:number])
end

def test_land_use_o37
  r = spreadsheet.land_use_o37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.00559665116278,r[:number])
end

def test_land_use_p37
  r = spreadsheet.land_use_p37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.05158176744186,r[:number])
end

def test_land_use_q37
  r = spreadsheet.land_use_q37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.28908055813953,r[:number])
end


  # start of Flows
def test_flows_b2
  r = spreadsheet.flows_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Flows through the energy system (for producing an energy flow diagram)",r[:string].force_encoding('utf-8'))
end

def test_flows_q2
  r = spreadsheet.flows_q2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cross check of flows through the energy system (based on the idea that energy is transformed, but not destroyed)",r[:string].force_encoding('utf-8'))
end

def test_flows_n4
  r = spreadsheet.flows_n4
  assert_equal(:ExcelString,r[:type])
  assert_equal("TWh",r[:string].force_encoding('utf-8'))
end

def test_flows_s4
  r = spreadsheet.flows_s4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Values flowing from the transformation",r[:string].force_encoding('utf-8'))
end

def test_flows_ad4
  r = spreadsheet.flows_ad4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Values flowing to the transformation",r[:string].force_encoding('utf-8'))
end

def test_flows_ao4
  r = spreadsheet.flows_ao4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Check that flows in equal flows out",r[:string].force_encoding('utf-8'))
end

def test_flows_c5
  r = spreadsheet.flows_c5
  assert_equal(:ExcelString,r[:type])
  assert_equal("From",r[:string].force_encoding('utf-8'))
end

def test_flows_d5
  r = spreadsheet.flows_d5
  assert_equal(:ExcelString,r[:type])
  assert_equal("To",r[:string].force_encoding('utf-8'))
end

def test_flows_e5
  r = spreadsheet.flows_e5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_flows_f5
  r = spreadsheet.flows_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_flows_g5
  r = spreadsheet.flows_g5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_flows_h5
  r = spreadsheet.flows_h5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_flows_i5
  r = spreadsheet.flows_i5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_flows_j5
  r = spreadsheet.flows_j5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_flows_k5
  r = spreadsheet.flows_k5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_flows_l5
  r = spreadsheet.flows_l5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_flows_m5
  r = spreadsheet.flows_m5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_flows_n5
  r = spreadsheet.flows_n5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_flows_r5
  r = spreadsheet.flows_r5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transformation",r[:string].force_encoding('utf-8'))
end

def test_flows_s5
  r = spreadsheet.flows_s5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_flows_t5
  r = spreadsheet.flows_t5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_flows_u5
  r = spreadsheet.flows_u5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_flows_v5
  r = spreadsheet.flows_v5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_flows_w5
  r = spreadsheet.flows_w5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_flows_x5
  r = spreadsheet.flows_x5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_flows_y5
  r = spreadsheet.flows_y5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_flows_z5
  r = spreadsheet.flows_z5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_flows_aa5
  r = spreadsheet.flows_aa5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_flows_ab5
  r = spreadsheet.flows_ab5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_flows_ad5
  r = spreadsheet.flows_ad5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_flows_ae5
  r = spreadsheet.flows_ae5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_flows_af5
  r = spreadsheet.flows_af5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_flows_ag5
  r = spreadsheet.flows_ag5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_flows_ah5
  r = spreadsheet.flows_ah5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_flows_ai5
  r = spreadsheet.flows_ai5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_flows_aj5
  r = spreadsheet.flows_aj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_flows_ak5
  r = spreadsheet.flows_ak5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_flows_al5
  r = spreadsheet.flows_al5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_flows_am5
  r = spreadsheet.flows_am5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_flows_ao5
  r = spreadsheet.flows_ao5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2007.0,r[:number])
end

def test_flows_ap5
  r = spreadsheet.flows_ap5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_flows_aq5
  r = spreadsheet.flows_aq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_flows_ar5
  r = spreadsheet.flows_ar5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_flows_as5
  r = spreadsheet.flows_as5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_flows_at5
  r = spreadsheet.flows_at5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_flows_au5
  r = spreadsheet.flows_au5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_flows_av5
  r = spreadsheet.flows_av5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_flows_aw5
  r = spreadsheet.flows_aw5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_flows_ax5
  r = spreadsheet.flows_ax5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_flows_c6
  r = spreadsheet.flows_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_d6
  r = spreadsheet.flows_d6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_e6
  r = spreadsheet.flows_e6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.3957013942179,r[:number])
end

def test_flows_f6
  r = spreadsheet.flows_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_g6
  r = spreadsheet.flows_g6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_h6
  r = spreadsheet.flows_h6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_i6
  r = spreadsheet.flows_i6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_j6
  r = spreadsheet.flows_j6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_k6
  r = spreadsheet.flows_k6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_l6
  r = spreadsheet.flows_l6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_m6
  r = spreadsheet.flows_m6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_n6
  r = spreadsheet.flows_n6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_r6
  r = spreadsheet.flows_r6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_flows_s6
  r = spreadsheet.flows_s6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4811481886666664,r[:number])
end

def test_flows_t6
  r = spreadsheet.flows_t6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.282517755325008,r[:number])
end

def test_flows_u6
  r = spreadsheet.flows_u6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.611077707602018,r[:number])
end

def test_flows_v6
  r = spreadsheet.flows_v6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.999504568609865,r[:number])
end

def test_flows_w6
  r = spreadsheet.flows_w6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.975858016813987,r[:number])
end

def test_flows_x6
  r = spreadsheet.flows_x6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.988112973997794,r[:number])
end

def test_flows_y6
  r = spreadsheet.flows_y6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.03758619538769,r[:number])
end

def test_flows_z6
  r = spreadsheet.flows_z6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.12564273067945,r[:number])
end

def test_flows_aa6
  r = spreadsheet.flows_aa6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.25369769532861,r[:number])
end

def test_flows_ab6
  r = spreadsheet.flows_ab6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.42321810680604,r[:number])
end

def test_flows_ad6
  r = spreadsheet.flows_ad6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae6
  r = spreadsheet.flows_ae6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af6
  r = spreadsheet.flows_af6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag6
  r = spreadsheet.flows_ag6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah6
  r = spreadsheet.flows_ah6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai6
  r = spreadsheet.flows_ai6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj6
  r = spreadsheet.flows_aj6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak6
  r = spreadsheet.flows_ak6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al6
  r = spreadsheet.flows_al6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am6
  r = spreadsheet.flows_am6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c7
  r = spreadsheet.flows_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d7
  r = spreadsheet.flows_d7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_e7
  r = spreadsheet.flows_e7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.59158236078616,r[:number])
end

def test_flows_f7
  r = spreadsheet.flows_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.7879707863396,r[:number])
end

def test_flows_g7
  r = spreadsheet.flows_g7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.36321857088853,r[:number])
end

def test_flows_h7
  r = spreadsheet.flows_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.2161187019778,r[:number])
end

def test_flows_i7
  r = spreadsheet.flows_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.82581145406314,r[:number])
end

def test_flows_j7
  r = spreadsheet.flows_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.20638476620721,r[:number])
end

def test_flows_k7
  r = spreadsheet.flows_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.108428227236942,r[:number])
end

def test_flows_l7
  r = spreadsheet.flows_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.865993134684118,r[:number])
end

def test_flows_m7
  r = spreadsheet.flows_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.79703902923795,r[:number])
end

def test_flows_n7
  r = spreadsheet.flows_n7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3768044831494,r[:number])
end

def test_flows_r7
  r = spreadsheet.flows_r7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_s7
  r = spreadsheet.flows_s7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t7
  r = spreadsheet.flows_t7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u7
  r = spreadsheet.flows_u7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v7
  r = spreadsheet.flows_v7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w7
  r = spreadsheet.flows_w7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x7
  r = spreadsheet.flows_x7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y7
  r = spreadsheet.flows_y7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z7
  r = spreadsheet.flows_z7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa7
  r = spreadsheet.flows_aa7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab7
  r = spreadsheet.flows_ab7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad7
  r = spreadsheet.flows_ad7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.432110000000002,r[:number])
end

def test_flows_ae7
  r = spreadsheet.flows_ae7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.647506259072072,r[:number])
end

def test_flows_af7
  r = spreadsheet.flows_af7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.714016959567504,r[:number])
end

def test_flows_ag7
  r = spreadsheet.flows_ag7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.780984218578844,r[:number])
end

def test_flows_ah7
  r = spreadsheet.flows_ah7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.848413124093879,r[:number])
end

def test_flows_ai7
  r = spreadsheet.flows_ai7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.916308820802026,r[:number])
end

def test_flows_aj7
  r = spreadsheet.flows_aj7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.98467651072626,r[:number])
end

def test_flows_ak7
  r = spreadsheet.flows_ak7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.053521453862023,r[:number])
end

def test_flows_al7
  r = spreadsheet.flows_al7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.122848968823302,r[:number])
end

def test_flows_am7
  r = spreadsheet.flows_am7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.192664433495876,r[:number])
end

def test_flows_c8
  r = spreadsheet.flows_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_d8
  r = spreadsheet.flows_d8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_e8
  r = spreadsheet.flows_e8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number])
end

def test_flows_f8
  r = spreadsheet.flows_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.547952837212,r[:number])
end

def test_flows_g8
  r = spreadsheet.flows_g8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.8288435333163,r[:number])
end

def test_flows_h8
  r = spreadsheet.flows_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.7889500727494,r[:number])
end

def test_flows_i8
  r = spreadsheet.flows_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.27472421443264,r[:number])
end

def test_flows_j8
  r = spreadsheet.flows_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.43958011019754,r[:number])
end

def test_flows_k8
  r = spreadsheet.flows_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.47441995977493,r[:number])
end

def test_flows_l8
  r = spreadsheet.flows_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88427462124332,r[:number])
end

def test_flows_m8
  r = spreadsheet.flows_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19102265793308,r[:number])
end

def test_flows_n8
  r = spreadsheet.flows_n8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_flows_r8
  r = spreadsheet.flows_r8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_s8
  r = spreadsheet.flows_s8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.62827234750997,r[:number])
end

def test_flows_t8
  r = spreadsheet.flows_t8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.02515935181965,r[:number])
end

def test_flows_u8
  r = spreadsheet.flows_u8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.7447217408887,r[:number])
end

def test_flows_v8
  r = spreadsheet.flows_v8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.32170696322123,r[:number])
end

def test_flows_w8
  r = spreadsheet.flows_w8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.25938711553314,r[:number])
end

def test_flows_x8
  r = spreadsheet.flows_x8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.68094619270077,r[:number])
end

def test_flows_y8
  r = spreadsheet.flows_y8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.20694141057695,r[:number])
end

def test_flows_z8
  r = spreadsheet.flows_z8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.00294973796528,r[:number])
end

def test_flows_aa8
  r = spreadsheet.flows_aa8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.0781545687969,r[:number])
end

def test_flows_ab8
  r = spreadsheet.flows_ab8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.43830434399338,r[:number])
end

def test_flows_ad8
  r = spreadsheet.flows_ad8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.62827234750998,r[:number])
end

def test_flows_ae8
  r = spreadsheet.flows_ae8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.02515935181965,r[:number])
end

def test_flows_af8
  r = spreadsheet.flows_af8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.7447217408887,r[:number])
end

def test_flows_ag8
  r = spreadsheet.flows_ag8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.32170696322122,r[:number])
end

def test_flows_ah8
  r = spreadsheet.flows_ah8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.25938711553314,r[:number])
end

def test_flows_ai8
  r = spreadsheet.flows_ai8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.68094619270079,r[:number])
end

def test_flows_aj8
  r = spreadsheet.flows_aj8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.20694141057695,r[:number])
end

def test_flows_ak8
  r = spreadsheet.flows_ak8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.00294973796531,r[:number])
end

def test_flows_al8
  r = spreadsheet.flows_al8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.07815456879692,r[:number])
end

def test_flows_am8
  r = spreadsheet.flows_am8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.4383043439934,r[:number])
end

def test_flows_ao8
  r = spreadsheet.flows_ao8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap8
  r = spreadsheet.flows_ap8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq8
  r = spreadsheet.flows_aq8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar8
  r = spreadsheet.flows_ar8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as8
  r = spreadsheet.flows_as8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at8
  r = spreadsheet.flows_at8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au8
  r = spreadsheet.flows_au8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av8
  r = spreadsheet.flows_av8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw8
  r = spreadsheet.flows_aw8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax8
  r = spreadsheet.flows_ax8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c9
  r = spreadsheet.flows_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d9
  r = spreadsheet.flows_d9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_e9
  r = spreadsheet.flows_e9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f9
  r = spreadsheet.flows_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.64315527619635,r[:number])
end

def test_flows_g9
  r = spreadsheet.flows_g9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.35818004652242,r[:number])
end

def test_flows_h9
  r = spreadsheet.flows_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(357.8050142717038,r[:number])
end

def test_flows_i9
  r = spreadsheet.flows_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.52363182891844,r[:number])
end

def test_flows_j9
  r = spreadsheet.flows_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(528.050159297357,r[:number])
end

def test_flows_k9
  r = spreadsheet.flows_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.947899051517,r[:number])
end

def test_flows_l9
  r = spreadsheet.flows_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(678.4226005986385,r[:number])
end

def test_flows_m9
  r = spreadsheet.flows_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(733.6856489742773,r[:number])
end

def test_flows_n9
  r = spreadsheet.flows_n9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(772.3784493415866,r[:number])
end

def test_flows_r9
  r = spreadsheet.flows_r9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s9
  r = spreadsheet.flows_s9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t9
  r = spreadsheet.flows_t9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u9
  r = spreadsheet.flows_u9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v9
  r = spreadsheet.flows_v9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w9
  r = spreadsheet.flows_w9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x9
  r = spreadsheet.flows_x9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y9
  r = spreadsheet.flows_y9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z9
  r = spreadsheet.flows_z9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa9
  r = spreadsheet.flows_aa9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab9
  r = spreadsheet.flows_ab9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad9
  r = spreadsheet.flows_ad9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae9
  r = spreadsheet.flows_ae9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af9
  r = spreadsheet.flows_af9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag9
  r = spreadsheet.flows_ag9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah9
  r = spreadsheet.flows_ah9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai9
  r = spreadsheet.flows_ai9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj9
  r = spreadsheet.flows_aj9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak9
  r = spreadsheet.flows_ak9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al9
  r = spreadsheet.flows_al9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am9
  r = spreadsheet.flows_am9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c10
  r = spreadsheet.flows_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_d10
  r = spreadsheet.flows_d10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e10
  r = spreadsheet.flows_e10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.0,r[:number])
end

def test_flows_f10
  r = spreadsheet.flows_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7728958841146,r[:number])
end

def test_flows_g10
  r = spreadsheet.flows_g10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.88758312334966,r[:number])
end

def test_flows_h10
  r = spreadsheet.flows_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.12064593855996,r[:number])
end

def test_flows_i10
  r = spreadsheet.flows_i10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.45145258994444,r[:number])
end

def test_flows_j10
  r = spreadsheet.flows_j10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.38848290828395,r[:number])
end

def test_flows_k10
  r = spreadsheet.flows_k10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.49643535647462,r[:number])
end

def test_flows_l10
  r = spreadsheet.flows_l10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.343358153041,r[:number])
end

def test_flows_m10
  r = spreadsheet.flows_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.27367243105833,r[:number])
end

def test_flows_n10
  r = spreadsheet.flows_n10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_flows_r10
  r = spreadsheet.flows_r10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s10
  r = spreadsheet.flows_s10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.39614,r[:number])
end

def test_flows_t10
  r = spreadsheet.flows_t10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.089432558139535,r[:number])
end

def test_flows_u10
  r = spreadsheet.flows_u10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.578253488372093,r[:number])
end

def test_flows_v10
  r = spreadsheet.flows_v10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0670744186046512,r[:number])
end

def test_flows_w10
  r = spreadsheet.flows_w10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5558953488372094,r[:number])
end

def test_flows_x10
  r = spreadsheet.flows_x10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0447162790697675,r[:number])
end

def test_flows_y10
  r = spreadsheet.flows_y10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5335372093023256,r[:number])
end

def test_flows_z10
  r = spreadsheet.flows_z10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0223581395348837,r[:number])
end

def test_flows_aa10
  r = spreadsheet.flows_aa10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5111790697674419,r[:number])
end

def test_flows_ab10
  r = spreadsheet.flows_ab10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad10
  r = spreadsheet.flows_ad10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae10
  r = spreadsheet.flows_ae10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af10
  r = spreadsheet.flows_af10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag10
  r = spreadsheet.flows_ag10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah10
  r = spreadsheet.flows_ah10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai10
  r = spreadsheet.flows_ai10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj10
  r = spreadsheet.flows_aj10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak10
  r = spreadsheet.flows_ak10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al10
  r = spreadsheet.flows_al10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am10
  r = spreadsheet.flows_am10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c11
  r = spreadsheet.flows_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d11
  r = spreadsheet.flows_d11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e11
  r = spreadsheet.flows_e11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.08561431794476,r[:number])
end

def test_flows_f11
  r = spreadsheet.flows_f11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.65896766491574,r[:number])
end

def test_flows_g11
  r = spreadsheet.flows_g11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(584.2856578271776,r[:number])
end

def test_flows_h11
  r = spreadsheet.flows_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(819.5978269658395,r[:number])
end

def test_flows_i11
  r = spreadsheet.flows_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.7090523281695,r[:number])
end

def test_flows_j11
  r = spreadsheet.flows_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1345.7822461215947,r[:number])
end

def test_flows_k11
  r = spreadsheet.flows_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1550.9349336341452,r[:number])
end

def test_flows_l11
  r = spreadsheet.flows_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1723.772025018814,r[:number])
end

def test_flows_m11
  r = spreadsheet.flows_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1892.5295522591648,r[:number])
end

def test_flows_n11
  r = spreadsheet.flows_n11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.3260236076515,r[:number])
end

def test_flows_r11
  r = spreadsheet.flows_r11
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_s11
  r = spreadsheet.flows_s11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t11
  r = spreadsheet.flows_t11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u11
  r = spreadsheet.flows_u11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v11
  r = spreadsheet.flows_v11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w11
  r = spreadsheet.flows_w11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x11
  r = spreadsheet.flows_x11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y11
  r = spreadsheet.flows_y11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z11
  r = spreadsheet.flows_z11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa11
  r = spreadsheet.flows_aa11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab11
  r = spreadsheet.flows_ab11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad11
  r = spreadsheet.flows_ad11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae11
  r = spreadsheet.flows_ae11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af11
  r = spreadsheet.flows_af11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag11
  r = spreadsheet.flows_ag11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah11
  r = spreadsheet.flows_ah11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai11
  r = spreadsheet.flows_ai11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj11
  r = spreadsheet.flows_aj11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak11
  r = spreadsheet.flows_ak11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al11
  r = spreadsheet.flows_al11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am11
  r = spreadsheet.flows_am11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ao11
  r = spreadsheet.flows_ao11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap11
  r = spreadsheet.flows_ap11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq11
  r = spreadsheet.flows_aq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar11
  r = spreadsheet.flows_ar11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as11
  r = spreadsheet.flows_as11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at11
  r = spreadsheet.flows_at11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au11
  r = spreadsheet.flows_au11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av11
  r = spreadsheet.flows_av11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw11
  r = spreadsheet.flows_aw11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax11
  r = spreadsheet.flows_ax11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c12
  r = spreadsheet.flows_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_flows_d12
  r = spreadsheet.flows_d12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e12
  r = spreadsheet.flows_e12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.881522222222221,r[:number])
end

def test_flows_f12
  r = spreadsheet.flows_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0279139524977032,r[:number])
end

def test_flows_g12
  r = spreadsheet.flows_g12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.692845238477029,r[:number])
end

def test_flows_h12
  r = spreadsheet.flows_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.402563081931533,r[:number])
end

def test_flows_i12
  r = spreadsheet.flows_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.158190817458818,r[:number])
end

def test_flows_j12
  r = spreadsheet.flows_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.96089275380401,r[:number])
end

def test_flows_k12
  r = spreadsheet.flows_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.811876531949348,r[:number])
end

def test_flows_l12
  r = spreadsheet.flows_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.712395650409537,r[:number])
end

def test_flows_m12
  r = spreadsheet.flows_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663752170256295,r[:number])
end

def test_flows_n12
  r = spreadsheet.flows_n12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.667299613344547,r[:number])
end

def test_flows_r12
  r = spreadsheet.flows_r12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_s12
  r = spreadsheet.flows_s12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.98728375500406,r[:number])
end

def test_flows_t12
  r = spreadsheet.flows_t12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477.7179707863396,r[:number])
end

def test_flows_u12
  r = spreadsheet.flows_u12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.29321857088854,r[:number])
end

def test_flows_v12
  r = spreadsheet.flows_v12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.1461187019778,r[:number])
end

def test_flows_w12
  r = spreadsheet.flows_w12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.75581145406315,r[:number])
end

def test_flows_x12
  r = spreadsheet.flows_x12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17138476620721,r[:number])
end

def test_flows_y12
  r = spreadsheet.flows_y12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.07342822723695,r[:number])
end

def test_flows_z12
  r = spreadsheet.flows_z12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.83099313468412,r[:number])
end

def test_flows_aa12
  r = spreadsheet.flows_aa12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.76203902923795,r[:number])
end

def test_flows_ab12
  r = spreadsheet.flows_ab12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_flows_ad12
  r = spreadsheet.flows_ad12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.98728375500406,r[:number])
end

def test_flows_ae12
  r = spreadsheet.flows_ae12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477.7179707863396,r[:number])
end

def test_flows_af12
  r = spreadsheet.flows_af12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.29321857088854,r[:number])
end

def test_flows_ag12
  r = spreadsheet.flows_ag12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.1461187019778,r[:number])
end

def test_flows_ah12
  r = spreadsheet.flows_ah12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.75581145406315,r[:number])
end

def test_flows_ai12
  r = spreadsheet.flows_ai12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17138476620721,r[:number])
end

def test_flows_aj12
  r = spreadsheet.flows_aj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.07342822723695,r[:number])
end

def test_flows_ak12
  r = spreadsheet.flows_ak12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.83099313468412,r[:number])
end

def test_flows_al12
  r = spreadsheet.flows_al12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.76203902923795,r[:number])
end

def test_flows_am12
  r = spreadsheet.flows_am12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_flows_ao12
  r = spreadsheet.flows_ao12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap12
  r = spreadsheet.flows_ap12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq12
  r = spreadsheet.flows_aq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar12
  r = spreadsheet.flows_ar12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as12
  r = spreadsheet.flows_as12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at12
  r = spreadsheet.flows_at12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au12
  r = spreadsheet.flows_au12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av12
  r = spreadsheet.flows_av12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw12
  r = spreadsheet.flows_aw12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax12
  r = spreadsheet.flows_ax12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c13
  r = spreadsheet.flows_c13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_flows_d13
  r = spreadsheet.flows_d13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e13
  r = spreadsheet.flows_e13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f13
  r = spreadsheet.flows_f13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g13
  r = spreadsheet.flows_g13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h13
  r = spreadsheet.flows_h13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i13
  r = spreadsheet.flows_i13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j13
  r = spreadsheet.flows_j13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k13
  r = spreadsheet.flows_k13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l13
  r = spreadsheet.flows_l13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m13
  r = spreadsheet.flows_m13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n13
  r = spreadsheet.flows_n13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r13
  r = spreadsheet.flows_r13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s13
  r = spreadsheet.flows_s13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.59158236078616,r[:number])
end

def test_flows_t13
  r = spreadsheet.flows_t13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.7879707863396,r[:number])
end

def test_flows_u13
  r = spreadsheet.flows_u13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.36321857088853,r[:number])
end

def test_flows_v13
  r = spreadsheet.flows_v13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.2161187019778,r[:number])
end

def test_flows_w13
  r = spreadsheet.flows_w13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.82581145406314,r[:number])
end

def test_flows_x13
  r = spreadsheet.flows_x13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.20638476620721,r[:number])
end

def test_flows_y13
  r = spreadsheet.flows_y13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.108428227236942,r[:number])
end

def test_flows_z13
  r = spreadsheet.flows_z13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.865993134684118,r[:number])
end

def test_flows_aa13
  r = spreadsheet.flows_aa13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.79703902923795,r[:number])
end

def test_flows_ab13
  r = spreadsheet.flows_ab13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3768044831494,r[:number])
end

def test_flows_ad13
  r = spreadsheet.flows_ad13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae13
  r = spreadsheet.flows_ae13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af13
  r = spreadsheet.flows_af13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag13
  r = spreadsheet.flows_ag13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah13
  r = spreadsheet.flows_ah13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai13
  r = spreadsheet.flows_ai13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj13
  r = spreadsheet.flows_aj13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak13
  r = spreadsheet.flows_ak13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al13
  r = spreadsheet.flows_al13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am13
  r = spreadsheet.flows_am13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c14
  r = spreadsheet.flows_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agricultural 'waste'",r[:string].force_encoding('utf-8'))
end

def test_flows_d14
  r = spreadsheet.flows_d14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e14
  r = spreadsheet.flows_e14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4811481886666664,r[:number])
end

def test_flows_f14
  r = spreadsheet.flows_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.282517755325008,r[:number])
end

def test_flows_g14
  r = spreadsheet.flows_g14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.611077707602018,r[:number])
end

def test_flows_h14
  r = spreadsheet.flows_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.999504568609865,r[:number])
end

def test_flows_i14
  r = spreadsheet.flows_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.975858016813987,r[:number])
end

def test_flows_j14
  r = spreadsheet.flows_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.988112973997794,r[:number])
end

def test_flows_k14
  r = spreadsheet.flows_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.03758619538769,r[:number])
end

def test_flows_l14
  r = spreadsheet.flows_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.12564273067945,r[:number])
end

def test_flows_m14
  r = spreadsheet.flows_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.25369769532861,r[:number])
end

def test_flows_n14
  r = spreadsheet.flows_n14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.42321810680604,r[:number])
end

def test_flows_r14
  r = spreadsheet.flows_r14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_s14
  r = spreadsheet.flows_s14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.3957013942179,r[:number])
end

def test_flows_t14
  r = spreadsheet.flows_t14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_u14
  r = spreadsheet.flows_u14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_v14
  r = spreadsheet.flows_v14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_w14
  r = spreadsheet.flows_w14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.93,r[:number])
end

def test_flows_x14
  r = spreadsheet.flows_x14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_y14
  r = spreadsheet.flows_y14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_z14
  r = spreadsheet.flows_z14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_aa14
  r = spreadsheet.flows_aa14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_ab14
  r = spreadsheet.flows_ab14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.965,r[:number])
end

def test_flows_ad14
  r = spreadsheet.flows_ad14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae14
  r = spreadsheet.flows_ae14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af14
  r = spreadsheet.flows_af14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag14
  r = spreadsheet.flows_ag14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah14
  r = spreadsheet.flows_ah14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai14
  r = spreadsheet.flows_ai14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj14
  r = spreadsheet.flows_aj14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak14
  r = spreadsheet.flows_ak14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al14
  r = spreadsheet.flows_al14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am14
  r = spreadsheet.flows_am14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c15
  r = spreadsheet.flows_c15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_flows_d15
  r = spreadsheet.flows_d15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e15
  r = spreadsheet.flows_e15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.26560193662109,r[:number])
end

def test_flows_f15
  r = spreadsheet.flows_f15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.714727643996937,r[:number])
end

def test_flows_g15
  r = spreadsheet.flows_g15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.440798794809652,r[:number])
end

def test_flows_h15
  r = spreadsheet.flows_h15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.91963931267982,r[:number])
end

def test_flows_i15
  r = spreadsheet.flows_i15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.12533828126034,r[:number])
end

def test_flows_j15
  r = spreadsheet.flows_j15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.73194046489898,r[:number])
end

def test_flows_k15
  r = spreadsheet.flows_k15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.35747868323991,r[:number])
end

def test_flows_l15
  r = spreadsheet.flows_l15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.16491135687631,r[:number])
end

def test_flows_m15
  r = spreadsheet.flows_m15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.160704703212005,r[:number])
end

def test_flows_n15
  r = spreadsheet.flows_n15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.347786623842815,r[:number])
end

def test_flows_r15
  r = spreadsheet.flows_r15
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_s15
  r = spreadsheet.flows_s15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.813193136590819,r[:number])
end

def test_flows_t15
  r = spreadsheet.flows_t15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.042140030873806,r[:number])
end

def test_flows_u15
  r = spreadsheet.flows_u15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48727928745219,r[:number])
end

def test_flows_v15
  r = spreadsheet.flows_v15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.968747932095416,r[:number])
end

def test_flows_w15
  r = spreadsheet.flows_w15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.73757752705611,r[:number])
end

def test_flows_x15
  r = spreadsheet.flows_x15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.598323282621358,r[:number])
end

def test_flows_y15
  r = spreadsheet.flows_y15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.559114593882597,r[:number])
end

def test_flows_z15
  r = spreadsheet.flows_z15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.62952356526122,r[:number])
end

def test_flows_aa15
  r = spreadsheet.flows_aa15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.820617944313286,r[:number])
end

def test_flows_ab15
  r = spreadsheet.flows_ab15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_flows_ad15
  r = spreadsheet.flows_ad15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.813193136590819,r[:number])
end

def test_flows_ae15
  r = spreadsheet.flows_ae15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.042140030873806,r[:number])
end

def test_flows_af15
  r = spreadsheet.flows_af15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48727928745219,r[:number])
end

def test_flows_ag15
  r = spreadsheet.flows_ag15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.968747932095416,r[:number])
end

def test_flows_ah15
  r = spreadsheet.flows_ah15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.73757752705611,r[:number])
end

def test_flows_ai15
  r = spreadsheet.flows_ai15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.598323282621358,r[:number])
end

def test_flows_aj15
  r = spreadsheet.flows_aj15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.559114593882597,r[:number])
end

def test_flows_ak15
  r = spreadsheet.flows_ak15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.62952356526122,r[:number])
end

def test_flows_al15
  r = spreadsheet.flows_al15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.820617944313286,r[:number])
end

def test_flows_am15
  r = spreadsheet.flows_am15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_flows_ao15
  r = spreadsheet.flows_ao15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap15
  r = spreadsheet.flows_ap15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq15
  r = spreadsheet.flows_aq15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar15
  r = spreadsheet.flows_ar15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as15
  r = spreadsheet.flows_as15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at15
  r = spreadsheet.flows_at15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au15
  r = spreadsheet.flows_au15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av15
  r = spreadsheet.flows_av15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw15
  r = spreadsheet.flows_aw15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax15
  r = spreadsheet.flows_ax15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c16
  r = spreadsheet.flows_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_flows_d16
  r = spreadsheet.flows_d16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e16
  r = spreadsheet.flows_e16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.1711853539826516,r[:number])
end

def test_flows_f16
  r = spreadsheet.flows_f16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.120255333333333,r[:number])
end

def test_flows_g16
  r = spreadsheet.flows_g16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.788686662916667,r[:number])
end

def test_flows_h16
  r = spreadsheet.flows_h16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.479830435000002,r[:number])
end

def test_flows_i16
  r = spreadsheet.flows_i16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.738108471250001,r[:number])
end

def test_flows_j16
  r = spreadsheet.flows_j16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.083322,r[:number])
end

def test_flows_k16
  r = spreadsheet.flows_k16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.839091040000001,r[:number])
end

def test_flows_l16
  r = spreadsheet.flows_l16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.618458693333332,r[:number])
end

def test_flows_m16
  r = spreadsheet.flows_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.42142496,r[:number])
end

def test_flows_n16
  r = spreadsheet.flows_n16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.247989840000002,r[:number])
end

def test_flows_r16
  r = spreadsheet.flows_r16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_s16
  r = spreadsheet.flows_s16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t16
  r = spreadsheet.flows_t16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u16
  r = spreadsheet.flows_u16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v16
  r = spreadsheet.flows_v16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w16
  r = spreadsheet.flows_w16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x16
  r = spreadsheet.flows_x16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y16
  r = spreadsheet.flows_y16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z16
  r = spreadsheet.flows_z16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa16
  r = spreadsheet.flows_aa16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab16
  r = spreadsheet.flows_ab16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad16
  r = spreadsheet.flows_ad16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.019834608709552,r[:number])
end

def test_flows_ae16
  r = spreadsheet.flows_ae16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.551097329516901,r[:number])
end

def test_flows_af16
  r = spreadsheet.flows_af16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.163716423089292,r[:number])
end

def test_flows_ag16
  r = spreadsheet.flows_ag16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.078742052970153,r[:number])
end

def test_flows_ah16
  r = spreadsheet.flows_ah16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.927979753386868,r[:number])
end

def test_flows_ai16
  r = spreadsheet.flows_ai16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.657847240047854,r[:number])
end

def test_flows_aj16
  r = spreadsheet.flows_aj16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.331077116581312,r[:number])
end

def test_flows_ak16
  r = spreadsheet.flows_ak16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.860251279239513,r[:number])
end

def test_flows_al16
  r = spreadsheet.flows_al16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.344409418627478,r[:number])
end

def test_flows_am16
  r = spreadsheet.flows_am16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.785449092646568,r[:number])
end

def test_flows_c17
  r = spreadsheet.flows_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomass imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d17
  r = spreadsheet.flows_d17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e17
  r = spreadsheet.flows_e17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.39614,r[:number])
end

def test_flows_f17
  r = spreadsheet.flows_f17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.089432558139535,r[:number])
end

def test_flows_g17
  r = spreadsheet.flows_g17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.578253488372093,r[:number])
end

def test_flows_h17
  r = spreadsheet.flows_h17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0670744186046512,r[:number])
end

def test_flows_i17
  r = spreadsheet.flows_i17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5558953488372094,r[:number])
end

def test_flows_j17
  r = spreadsheet.flows_j17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0447162790697675,r[:number])
end

def test_flows_k17
  r = spreadsheet.flows_k17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5335372093023256,r[:number])
end

def test_flows_l17
  r = spreadsheet.flows_l17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0223581395348837,r[:number])
end

def test_flows_m17
  r = spreadsheet.flows_m17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5111790697674419,r[:number])
end

def test_flows_n17
  r = spreadsheet.flows_n17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r17
  r = spreadsheet.flows_r17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_s17
  r = spreadsheet.flows_s17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.13960565016595,r[:number])
end

def test_flows_t17
  r = spreadsheet.flows_t17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.24405554288626,r[:number])
end

def test_flows_u17
  r = spreadsheet.flows_u17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(396.7024809745397,r[:number])
end

def test_flows_v17
  r = spreadsheet.flows_v17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(415.21180857492885,r[:number])
end

def test_flows_w17
  r = spreadsheet.flows_w17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(439.64553252456545,r[:number])
end

def test_flows_x17
  r = spreadsheet.flows_x17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464.2194392611814,r[:number])
end

def test_flows_y17
  r = spreadsheet.flows_y17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.7446417201478,r[:number])
end

def test_flows_z17
  r = spreadsheet.flows_z17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(518.9056520071506,r[:number])
end

def test_flows_aa17
  r = spreadsheet.flows_aa17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(548.8441029350583,r[:number])
end

def test_flows_ab17
  r = spreadsheet.flows_ab17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(581.4503293856261,r[:number])
end

def test_flows_ad17
  r = spreadsheet.flows_ad17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.1396056501659,r[:number])
end

def test_flows_ae17
  r = spreadsheet.flows_ae17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.2440555428862,r[:number])
end

def test_flows_af17
  r = spreadsheet.flows_af17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(396.70248097453964,r[:number])
end

def test_flows_ag17
  r = spreadsheet.flows_ag17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(415.21180857492885,r[:number])
end

def test_flows_ah17
  r = spreadsheet.flows_ah17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(439.6455325245654,r[:number])
end

def test_flows_ai17
  r = spreadsheet.flows_ai17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464.2194392611814,r[:number])
end

def test_flows_aj17
  r = spreadsheet.flows_aj17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.7446417201478,r[:number])
end

def test_flows_ak17
  r = spreadsheet.flows_ak17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(518.9056520071506,r[:number])
end

def test_flows_al17
  r = spreadsheet.flows_al17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(548.8441029350585,r[:number])
end

def test_flows_am17
  r = spreadsheet.flows_am17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(581.4503293856261,r[:number])
end

def test_flows_ao17
  r = spreadsheet.flows_ao17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap17
  r = spreadsheet.flows_ap17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq17
  r = spreadsheet.flows_aq17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar17
  r = spreadsheet.flows_ar17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as17
  r = spreadsheet.flows_as17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at17
  r = spreadsheet.flows_at17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au17
  r = spreadsheet.flows_au17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av17
  r = spreadsheet.flows_av17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw17
  r = spreadsheet.flows_aw17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax17
  r = spreadsheet.flows_ax17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c18
  r = spreadsheet.flows_c18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biofuel imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d18
  r = spreadsheet.flows_d18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_e18
  r = spreadsheet.flows_e18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f18
  r = spreadsheet.flows_f18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g18
  r = spreadsheet.flows_g18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h18
  r = spreadsheet.flows_h18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i18
  r = spreadsheet.flows_i18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j18
  r = spreadsheet.flows_j18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k18
  r = spreadsheet.flows_k18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l18
  r = spreadsheet.flows_l18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m18
  r = spreadsheet.flows_m18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n18
  r = spreadsheet.flows_n18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r18
  r = spreadsheet.flows_r18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s18
  r = spreadsheet.flows_s18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t18
  r = spreadsheet.flows_t18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u18
  r = spreadsheet.flows_u18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v18
  r = spreadsheet.flows_v18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w18
  r = spreadsheet.flows_w18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x18
  r = spreadsheet.flows_x18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y18
  r = spreadsheet.flows_y18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z18
  r = spreadsheet.flows_z18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa18
  r = spreadsheet.flows_aa18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab18
  r = spreadsheet.flows_ab18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad18
  r = spreadsheet.flows_ad18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae18
  r = spreadsheet.flows_ae18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af18
  r = spreadsheet.flows_af18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag18
  r = spreadsheet.flows_ag18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah18
  r = spreadsheet.flows_ah18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai18
  r = spreadsheet.flows_ai18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj18
  r = spreadsheet.flows_aj18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak18
  r = spreadsheet.flows_ak18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al18
  r = spreadsheet.flows_al18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am18
  r = spreadsheet.flows_am18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c19
  r = spreadsheet.flows_c19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Coal",r[:string].force_encoding('utf-8'))
end

def test_flows_d19
  r = spreadsheet.flows_d19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e19
  r = spreadsheet.flows_e19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.98728375500406,r[:number])
end

def test_flows_f19
  r = spreadsheet.flows_f19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477.7179707863396,r[:number])
end

def test_flows_g19
  r = spreadsheet.flows_g19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.29321857088854,r[:number])
end

def test_flows_h19
  r = spreadsheet.flows_h19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.1461187019778,r[:number])
end

def test_flows_i19
  r = spreadsheet.flows_i19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.75581145406315,r[:number])
end

def test_flows_j19
  r = spreadsheet.flows_j19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17138476620721,r[:number])
end

def test_flows_k19
  r = spreadsheet.flows_k19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.07342822723695,r[:number])
end

def test_flows_l19
  r = spreadsheet.flows_l19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.83099313468412,r[:number])
end

def test_flows_m19
  r = spreadsheet.flows_m19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.76203902923795,r[:number])
end

def test_flows_n19
  r = spreadsheet.flows_n19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.3418044831494,r[:number])
end

def test_flows_r19
  r = spreadsheet.flows_r19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_s19
  r = spreadsheet.flows_s19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1000.3156231400121,r[:number])
end

def test_flows_t19
  r = spreadsheet.flows_t19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1019.7306136585273,r[:number])
end

def test_flows_u19
  r = spreadsheet.flows_u19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1100.9234457571922,r[:number])
end

def test_flows_v19
  r = spreadsheet.flows_v19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1233.924254724952,r[:number])
end

def test_flows_w19
  r = spreadsheet.flows_w19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1423.8945238032977,r[:number])
end

def test_flows_x19
  r = spreadsheet.flows_x19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1610.5584174305968,r[:number])
end

def test_flows_y19
  r = spreadsheet.flows_y19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1764.643366543118,r[:number])
end

def test_flows_z19
  r = spreadsheet.flows_z19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898.2999716931974,r[:number])
end

def test_flows_aa19
  r = spreadsheet.flows_aa19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2037.1151037035324,r[:number])
end

def test_flows_ab19
  r = spreadsheet.flows_ab19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2156.1558887756587,r[:number])
end

def test_flows_ad19
  r = spreadsheet.flows_ad19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1000.3156231400123,r[:number])
end

def test_flows_ae19
  r = spreadsheet.flows_ae19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1019.7306136585272,r[:number])
end

def test_flows_af19
  r = spreadsheet.flows_af19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1100.9234457571922,r[:number])
end

def test_flows_ag19
  r = spreadsheet.flows_ag19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1233.9242547249519,r[:number])
end

def test_flows_ah19
  r = spreadsheet.flows_ah19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1423.8945238032977,r[:number])
end

def test_flows_ai19
  r = spreadsheet.flows_ai19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1610.5584174305966,r[:number])
end

def test_flows_aj19
  r = spreadsheet.flows_aj19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1764.643366543118,r[:number])
end

def test_flows_ak19
  r = spreadsheet.flows_ak19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1898.2999716931972,r[:number])
end

def test_flows_al19
  r = spreadsheet.flows_al19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2037.1151037035324,r[:number])
end

def test_flows_am19
  r = spreadsheet.flows_am19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2156.155888775659,r[:number])
end

def test_flows_ao19
  r = spreadsheet.flows_ao19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap19
  r = spreadsheet.flows_ap19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq19
  r = spreadsheet.flows_aq19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar19
  r = spreadsheet.flows_ar19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as19
  r = spreadsheet.flows_as19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at19
  r = spreadsheet.flows_at19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au19
  r = spreadsheet.flows_au19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av19
  r = spreadsheet.flows_av19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw19
  r = spreadsheet.flows_aw19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax19
  r = spreadsheet.flows_ax19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c20
  r = spreadsheet.flows_c20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_d20
  r = spreadsheet.flows_d20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_e20
  r = spreadsheet.flows_e20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number])
end

def test_flows_f20
  r = spreadsheet.flows_f20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.1911081134084,r[:number])
end

def test_flows_g20
  r = spreadsheet.flows_g20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(855.1870235798388,r[:number])
end

def test_flows_h20
  r = spreadsheet.flows_h20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(859.5939643444532,r[:number])
end

def test_flows_i20
  r = spreadsheet.flows_i20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.7983560433511,r[:number])
end

def test_flows_j20
  r = spreadsheet.flows_j20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(828.4897394075546,r[:number])
end

def test_flows_k20
  r = spreadsheet.flows_k20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(847.4223190112918,r[:number])
end

def test_flows_l20
  r = spreadsheet.flows_l20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(858.3068752198818,r[:number])
end

def test_flows_m20
  r = spreadsheet.flows_m20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(872.8766716322104,r[:number])
end

def test_flows_n20
  r = spreadsheet.flows_n20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_flows_r20
  r = spreadsheet.flows_r20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s20
  r = spreadsheet.flows_s20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.08561431794476,r[:number])
end

def test_flows_t20
  r = spreadsheet.flows_t20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(355.65896766491574,r[:number])
end

def test_flows_u20
  r = spreadsheet.flows_u20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(584.2856578271776,r[:number])
end

def test_flows_v20
  r = spreadsheet.flows_v20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(819.5978269658395,r[:number])
end

def test_flows_w20
  r = spreadsheet.flows_w20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.7090523281695,r[:number])
end

def test_flows_x20
  r = spreadsheet.flows_x20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1345.7822461215947,r[:number])
end

def test_flows_y20
  r = spreadsheet.flows_y20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1550.9349336341452,r[:number])
end

def test_flows_z20
  r = spreadsheet.flows_z20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1723.772025018814,r[:number])
end

def test_flows_aa20
  r = spreadsheet.flows_aa20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1892.5295522591648,r[:number])
end

def test_flows_ab20
  r = spreadsheet.flows_ab20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.3260236076515,r[:number])
end

def test_flows_ad20
  r = spreadsheet.flows_ad20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae20
  r = spreadsheet.flows_ae20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af20
  r = spreadsheet.flows_af20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag20
  r = spreadsheet.flows_ag20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah20
  r = spreadsheet.flows_ah20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai20
  r = spreadsheet.flows_ai20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj20
  r = spreadsheet.flows_aj20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak20
  r = spreadsheet.flows_ak20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al20
  r = spreadsheet.flows_al20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am20
  r = spreadsheet.flows_am20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c21
  r = spreadsheet.flows_c21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d21
  r = spreadsheet.flows_d21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e21
  r = spreadsheet.flows_e21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(978.0856143179448,r[:number])
end

def test_flows_f21
  r = spreadsheet.flows_f21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1001.4318635490304,r[:number])
end

def test_flows_g21
  r = spreadsheet.flows_g21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080.1732409505273,r[:number])
end

def test_flows_h21
  r = spreadsheet.flows_h21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1202.7184729043995,r[:number])
end

def test_flows_i21
  r = spreadsheet.flows_i21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1389.160504918114,r[:number])
end

def test_flows_j21
  r = spreadsheet.flows_j21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1575.1707290298787,r[:number])
end

def test_flows_k21
  r = spreadsheet.flows_k21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.4313689906198,r[:number])
end

def test_flows_l21
  r = spreadsheet.flows_l21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1861.115383171855,r[:number])
end

def test_flows_m21
  r = spreadsheet.flows_m21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1998.803224690223,r[:number])
end

def test_flows_n21
  r = spreadsheet.flows_n21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_flows_r21
  r = spreadsheet.flows_r21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_s21
  r = spreadsheet.flows_s21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(731.0,r[:number])
end

def test_flows_t21
  r = spreadsheet.flows_t21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.7728958841146,r[:number])
end

def test_flows_u21
  r = spreadsheet.flows_u21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(495.88758312334966,r[:number])
end

def test_flows_v21
  r = spreadsheet.flows_v21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(383.12064593855996,r[:number])
end

def test_flows_w21
  r = spreadsheet.flows_w21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.45145258994444,r[:number])
end

def test_flows_x21
  r = spreadsheet.flows_x21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.38848290828395,r[:number])
end

def test_flows_y21
  r = spreadsheet.flows_y21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.49643535647462,r[:number])
end

def test_flows_z21
  r = spreadsheet.flows_z21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.343358153041,r[:number])
end

def test_flows_aa21
  r = spreadsheet.flows_aa21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.27367243105833,r[:number])
end

def test_flows_ab21
  r = spreadsheet.flows_ab21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.2325418852722,r[:number])
end

def test_flows_ad21
  r = spreadsheet.flows_ad21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae21
  r = spreadsheet.flows_ae21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af21
  r = spreadsheet.flows_af21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag21
  r = spreadsheet.flows_ag21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah21
  r = spreadsheet.flows_ah21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai21
  r = spreadsheet.flows_ai21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj21
  r = spreadsheet.flows_aj21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak21
  r = spreadsheet.flows_ak21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al21
  r = spreadsheet.flows_al21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am21
  r = spreadsheet.flows_am21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c22
  r = spreadsheet.flows_c22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_flows_d22
  r = spreadsheet.flows_d22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_flows_e22
  r = spreadsheet.flows_e22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_flows_f22
  r = spreadsheet.flows_f22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_flows_g22
  r = spreadsheet.flows_g22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_flows_h22
  r = spreadsheet.flows_h22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i22
  r = spreadsheet.flows_i22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j22
  r = spreadsheet.flows_j22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k22
  r = spreadsheet.flows_k22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l22
  r = spreadsheet.flows_l22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m22
  r = spreadsheet.flows_m22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n22
  r = spreadsheet.flows_n22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r22
  r = spreadsheet.flows_r22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_flows_s22
  r = spreadsheet.flows_s22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t22
  r = spreadsheet.flows_t22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u22
  r = spreadsheet.flows_u22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v22
  r = spreadsheet.flows_v22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w22
  r = spreadsheet.flows_w22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x22
  r = spreadsheet.flows_x22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y22
  r = spreadsheet.flows_y22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z22
  r = spreadsheet.flows_z22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa22
  r = spreadsheet.flows_aa22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab22
  r = spreadsheet.flows_ab22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad22
  r = spreadsheet.flows_ad22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae22
  r = spreadsheet.flows_ae22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af22
  r = spreadsheet.flows_af22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag22
  r = spreadsheet.flows_ag22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah22
  r = spreadsheet.flows_ah22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai22
  r = spreadsheet.flows_ai22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj22
  r = spreadsheet.flows_aj22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak22
  r = spreadsheet.flows_ak22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al22
  r = spreadsheet.flows_al22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am22
  r = spreadsheet.flows_am22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c23
  r = spreadsheet.flows_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_flows_d23
  r = spreadsheet.flows_d23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e23
  r = spreadsheet.flows_e23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_flows_f23
  r = spreadsheet.flows_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_flows_g23
  r = spreadsheet.flows_g23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_flows_h23
  r = spreadsheet.flows_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i23
  r = spreadsheet.flows_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j23
  r = spreadsheet.flows_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k23
  r = spreadsheet.flows_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l23
  r = spreadsheet.flows_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m23
  r = spreadsheet.flows_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n23
  r = spreadsheet.flows_n23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r23
  r = spreadsheet.flows_r23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_flows_s23
  r = spreadsheet.flows_s23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t23
  r = spreadsheet.flows_t23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u23
  r = spreadsheet.flows_u23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v23
  r = spreadsheet.flows_v23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w23
  r = spreadsheet.flows_w23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x23
  r = spreadsheet.flows_x23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y23
  r = spreadsheet.flows_y23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z23
  r = spreadsheet.flows_z23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa23
  r = spreadsheet.flows_aa23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab23
  r = spreadsheet.flows_ab23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad23
  r = spreadsheet.flows_ad23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae23
  r = spreadsheet.flows_ae23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af23
  r = spreadsheet.flows_af23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag23
  r = spreadsheet.flows_ag23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah23
  r = spreadsheet.flows_ah23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai23
  r = spreadsheet.flows_ai23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj23
  r = spreadsheet.flows_aj23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak23
  r = spreadsheet.flows_ak23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al23
  r = spreadsheet.flows_al23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am23
  r = spreadsheet.flows_am23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c24
  r = spreadsheet.flows_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_flows_d24
  r = spreadsheet.flows_d24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_flows_e24
  r = spreadsheet.flows_e24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f24
  r = spreadsheet.flows_f24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g24
  r = spreadsheet.flows_g24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h24
  r = spreadsheet.flows_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i24
  r = spreadsheet.flows_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j24
  r = spreadsheet.flows_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k24
  r = spreadsheet.flows_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l24
  r = spreadsheet.flows_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m24
  r = spreadsheet.flows_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n24
  r = spreadsheet.flows_n24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r24
  r = spreadsheet.flows_r24
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_flows_s24
  r = spreadsheet.flows_s24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t24
  r = spreadsheet.flows_t24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u24
  r = spreadsheet.flows_u24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v24
  r = spreadsheet.flows_v24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w24
  r = spreadsheet.flows_w24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x24
  r = spreadsheet.flows_x24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y24
  r = spreadsheet.flows_y24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z24
  r = spreadsheet.flows_z24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa24
  r = spreadsheet.flows_aa24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab24
  r = spreadsheet.flows_ab24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad24
  r = spreadsheet.flows_ad24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae24
  r = spreadsheet.flows_ae24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af24
  r = spreadsheet.flows_af24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag24
  r = spreadsheet.flows_ag24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah24
  r = spreadsheet.flows_ah24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai24
  r = spreadsheet.flows_ai24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj24
  r = spreadsheet.flows_aj24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak24
  r = spreadsheet.flows_ak24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al24
  r = spreadsheet.flows_al24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am24
  r = spreadsheet.flows_am24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ao24
  r = spreadsheet.flows_ao24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap24
  r = spreadsheet.flows_ap24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq24
  r = spreadsheet.flows_aq24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar24
  r = spreadsheet.flows_ar24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as24
  r = spreadsheet.flows_as24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at24
  r = spreadsheet.flows_at24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au24
  r = spreadsheet.flows_au24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av24
  r = spreadsheet.flows_av24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw24
  r = spreadsheet.flows_aw24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax24
  r = spreadsheet.flows_ax24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c25
  r = spreadsheet.flows_c25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d25
  r = spreadsheet.flows_d25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_e25
  r = spreadsheet.flows_e25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.727592565398165,r[:number])
end

def test_flows_f25
  r = spreadsheet.flows_f25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.6952277934,r[:number])
end

def test_flows_g25
  r = spreadsheet.flows_g25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.807364904225004,r[:number])
end

def test_flows_h25
  r = spreadsheet.flows_h25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.9578694341,r[:number])
end

def test_flows_i25
  r = spreadsheet.flows_i25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.31595716513819,r[:number])
end

def test_flows_j25
  r = spreadsheet.flows_j25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.850401876699994,r[:number])
end

def test_flows_k25
  r = spreadsheet.flows_k25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.35724666577778,r[:number])
end

def test_flows_l25
  r = spreadsheet.flows_l25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.916433165955553,r[:number])
end

def test_flows_m25
  r = spreadsheet.flows_m25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.527961377233332,r[:number])
end

def test_flows_n25
  r = spreadsheet.flows_n25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.19183129961111,r[:number])
end

def test_flows_r25
  r = spreadsheet.flows_r25
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_s25
  r = spreadsheet.flows_s25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t25
  r = spreadsheet.flows_t25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u25
  r = spreadsheet.flows_u25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v25
  r = spreadsheet.flows_v25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w25
  r = spreadsheet.flows_w25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x25
  r = spreadsheet.flows_x25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y25
  r = spreadsheet.flows_y25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z25
  r = spreadsheet.flows_z25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa25
  r = spreadsheet.flows_aa25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab25
  r = spreadsheet.flows_ab25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad25
  r = spreadsheet.flows_ad25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae25
  r = spreadsheet.flows_ae25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af25
  r = spreadsheet.flows_af25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag25
  r = spreadsheet.flows_ag25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah25
  r = spreadsheet.flows_ah25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai25
  r = spreadsheet.flows_ai25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj25
  r = spreadsheet.flows_aj25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak25
  r = spreadsheet.flows_ak25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al25
  r = spreadsheet.flows_al25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am25
  r = spreadsheet.flows_am25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ao25
  r = spreadsheet.flows_ao25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap25
  r = spreadsheet.flows_ap25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq25
  r = spreadsheet.flows_aq25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar25
  r = spreadsheet.flows_ar25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as25
  r = spreadsheet.flows_as25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at25
  r = spreadsheet.flows_at25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au25
  r = spreadsheet.flows_au25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av25
  r = spreadsheet.flows_av25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw25
  r = spreadsheet.flows_aw25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax25
  r = spreadsheet.flows_ax25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c26
  r = spreadsheet.flows_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d26
  r = spreadsheet.flows_d26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_e26
  r = spreadsheet.flows_e26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.562605222222222,r[:number])
end

def test_flows_f26
  r = spreadsheet.flows_f26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0691270054227253,r[:number])
end

def test_flows_g26
  r = spreadsheet.flows_g26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6812610687861258,r[:number])
end

def test_flows_h26
  r = spreadsheet.flows_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3096705383941964,r[:number])
end

def test_flows_i26
  r = spreadsheet.flows_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.528739363098261,r[:number])
end

def test_flows_j26
  r = spreadsheet.flows_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.329131457560122,r[:number])
end

def test_flows_k26
  r = spreadsheet.flows_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.1504279377230455,r[:number])
end

def test_flows_l26
  r = spreadsheet.flows_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.993130384698937,r[:number])
end

def test_flows_m26
  r = spreadsheet.flows_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.857757484212166,r[:number])
end

def test_flows_n26
  r = spreadsheet.flows_n26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.744845969984378,r[:number])
end

def test_flows_r26
  r = spreadsheet.flows_r26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_s26
  r = spreadsheet.flows_s26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t26
  r = spreadsheet.flows_t26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u26
  r = spreadsheet.flows_u26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v26
  r = spreadsheet.flows_v26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w26
  r = spreadsheet.flows_w26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x26
  r = spreadsheet.flows_x26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y26
  r = spreadsheet.flows_y26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z26
  r = spreadsheet.flows_z26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa26
  r = spreadsheet.flows_aa26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab26
  r = spreadsheet.flows_ab26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad26
  r = spreadsheet.flows_ad26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.89465262742715,r[:number])
end

def test_flows_ae26
  r = spreadsheet.flows_ae26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.41835476651738,r[:number])
end

def test_flows_af26
  r = spreadsheet.flows_af26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.92787034452687,r[:number])
end

def test_flows_ag26
  r = spreadsheet.flows_ag26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.65013259470194,r[:number])
end

def test_flows_ah26
  r = spreadsheet.flows_ah26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.0980116417422,r[:number])
end

def test_flows_ai26
  r = spreadsheet.flows_ai26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.32140518305744,r[:number])
end

def test_flows_aj26
  r = spreadsheet.flows_aj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.36827406259067,r[:number])
end

def test_flows_ak26
  r = spreadsheet.flows_ak26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.2846477676672,r[:number])
end

def test_flows_al26
  r = spreadsheet.flows_al26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.11461631411763,r[:number])
end

def test_flows_am26
  r = spreadsheet.flows_am26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.90030737883308,r[:number])
end

def test_flows_c27
  r = spreadsheet.flows_c27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d27
  r = spreadsheet.flows_d27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_e27
  r = spreadsheet.flows_e27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.230008822067568,r[:number])
end

def test_flows_f27
  r = spreadsheet.flows_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.298750109496886,r[:number])
end

def test_flows_g27
  r = spreadsheet.flows_g27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.750204806664975,r[:number])
end

def test_flows_h27
  r = spreadsheet.flows_h27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.205781820552314,r[:number])
end

def test_flows_i27
  r = spreadsheet.flows_i27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.73401888518371,r[:number])
end

def test_flows_j27
  r = spreadsheet.flows_j27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.3876884007179,r[:number])
end

def test_flows_k27
  r = spreadsheet.flows_k27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.21199755249822,r[:number])
end

def test_flows_l27
  r = spreadsheet.flows_l27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.18458852134214,r[:number])
end

def test_flows_m27
  r = spreadsheet.flows_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.31187901330933,r[:number])
end

def test_flows_n27
  r = spreadsheet.flows_n27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.597323282735694,r[:number])
end

def test_flows_r27
  r = spreadsheet.flows_r27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_s27
  r = spreadsheet.flows_s27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t27
  r = spreadsheet.flows_t27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u27
  r = spreadsheet.flows_u27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v27
  r = spreadsheet.flows_v27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w27
  r = spreadsheet.flows_w27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x27
  r = spreadsheet.flows_x27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y27
  r = spreadsheet.flows_y27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z27
  r = spreadsheet.flows_z27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa27
  r = spreadsheet.flows_aa27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab27
  r = spreadsheet.flows_ab27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad27
  r = spreadsheet.flows_ad27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.5301859069655,r[:number])
end

def test_flows_ae27
  r = spreadsheet.flows_ae27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(408.56077567983954,r[:number])
end

def test_flows_af27
  r = spreadsheet.flows_af27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(427.30484676275967,r[:number])
end

def test_flows_ag27
  r = spreadsheet.flows_ag27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(455.5038705890163,r[:number])
end

def test_flows_ah27
  r = spreadsheet.flows_ah27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(482.97569615270857,r[:number])
end

def test_flows_ai27
  r = spreadsheet.flows_ai27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(509.52699578892293,r[:number])
end

def test_flows_aj27
  r = spreadsheet.flows_aj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(523.9298814829477,r[:number])
end

def test_flows_ak27
  r = spreadsheet.flows_ak27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(539.9693992241246,r[:number])
end

def test_flows_al27
  r = spreadsheet.flows_al27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.0873256944161,r[:number])
end

def test_flows_am27
  r = spreadsheet.flows_am27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(578.6016420619402,r[:number])
end

def test_flows_c28
  r = spreadsheet.flows_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bio-conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d28
  r = spreadsheet.flows_d28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e28
  r = spreadsheet.flows_e28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.108065737822017,r[:number])
end

def test_flows_f28
  r = spreadsheet.flows_f28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.962054443500037,r[:number])
end

def test_flows_g28
  r = spreadsheet.flows_g28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.505890961212593,r[:number])
end

def test_flows_h28
  r = spreadsheet.flows_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.848385170174723,r[:number])
end

def test_flows_i28
  r = spreadsheet.flows_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.680671702112988,r[:number])
end

def test_flows_j28
  r = spreadsheet.flows_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.11372445772276,r[:number])
end

def test_flows_k28
  r = spreadsheet.flows_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.48726925457791,r[:number])
end

def test_flows_l28
  r = spreadsheet.flows_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.908797665968649,r[:number])
end

def test_flows_m28
  r = spreadsheet.flows_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.380556694042085,r[:number])
end

def test_flows_n28
  r = spreadsheet.flows_n28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.9043037916622,r[:number])
end

def test_flows_r28
  r = spreadsheet.flows_r28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_flows_s28
  r = spreadsheet.flows_s28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.114400994,r[:number])
end

def test_flows_t28
  r = spreadsheet.flows_t28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_u28
  r = spreadsheet.flows_u28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_v28
  r = spreadsheet.flows_v28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_w28
  r = spreadsheet.flows_w28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_x28
  r = spreadsheet.flows_x28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_y28
  r = spreadsheet.flows_y28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_z28
  r = spreadsheet.flows_z28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_aa28
  r = spreadsheet.flows_aa28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_ab28
  r = spreadsheet.flows_ab28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_ad28
  r = spreadsheet.flows_ad28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae28
  r = spreadsheet.flows_ae28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af28
  r = spreadsheet.flows_af28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag28
  r = spreadsheet.flows_ag28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah28
  r = spreadsheet.flows_ah28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai28
  r = spreadsheet.flows_ai28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj28
  r = spreadsheet.flows_aj28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak28
  r = spreadsheet.flows_ak28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al28
  r = spreadsheet.flows_al28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am28
  r = spreadsheet.flows_am28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c29
  r = spreadsheet.flows_c29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d29
  r = spreadsheet.flows_d29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e29
  r = spreadsheet.flows_e29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f29
  r = spreadsheet.flows_f29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g29
  r = spreadsheet.flows_g29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h29
  r = spreadsheet.flows_h29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i29
  r = spreadsheet.flows_i29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j29
  r = spreadsheet.flows_j29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k29
  r = spreadsheet.flows_k29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l29
  r = spreadsheet.flows_l29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m29
  r = spreadsheet.flows_m29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n29
  r = spreadsheet.flows_n29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r29
  r = spreadsheet.flows_r29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_s29
  r = spreadsheet.flows_s29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t29
  r = spreadsheet.flows_t29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u29
  r = spreadsheet.flows_u29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v29
  r = spreadsheet.flows_v29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w29
  r = spreadsheet.flows_w29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x29
  r = spreadsheet.flows_x29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y29
  r = spreadsheet.flows_y29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z29
  r = spreadsheet.flows_z29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa29
  r = spreadsheet.flows_aa29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab29
  r = spreadsheet.flows_ab29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad29
  r = spreadsheet.flows_ad29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(540.9583199339212,r[:number])
end

def test_flows_ae29
  r = spreadsheet.flows_ae29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(539.6958806772302,r[:number])
end

def test_flows_af29
  r = spreadsheet.flows_af29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(550.824983482747,r[:number])
end

def test_flows_ag29
  r = spreadsheet.flows_ag29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(564.6026408589114,r[:number])
end

def test_flows_ah29
  r = spreadsheet.flows_ah29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(595.3904264699028,r[:number])
end

def test_flows_ai29
  r = spreadsheet.flows_ai29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(632.2042877897919,r[:number])
end

def test_flows_aj29
  r = spreadsheet.flows_aj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(676.1773351667725,r[:number])
end

def test_flows_ak29
  r = spreadsheet.flows_ak29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(726.888326517133,r[:number])
end

def test_flows_al29
  r = spreadsheet.flows_al29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(784.6432589822314,r[:number])
end

def test_flows_am29
  r = spreadsheet.flows_am29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.8873476967058,r[:number])
end

def test_flows_c30
  r = spreadsheet.flows_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d30
  r = spreadsheet.flows_d30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e30
  r = spreadsheet.flows_e30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.88229852333984,r[:number])
end

def test_flows_f30
  r = spreadsheet.flows_f30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g30
  r = spreadsheet.flows_g30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h30
  r = spreadsheet.flows_h30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i30
  r = spreadsheet.flows_i30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j30
  r = spreadsheet.flows_j30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k30
  r = spreadsheet.flows_k30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l30
  r = spreadsheet.flows_l30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m30
  r = spreadsheet.flows_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n30
  r = spreadsheet.flows_n30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r30
  r = spreadsheet.flows_r30
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_s30
  r = spreadsheet.flows_s30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t30
  r = spreadsheet.flows_t30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u30
  r = spreadsheet.flows_u30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v30
  r = spreadsheet.flows_v30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w30
  r = spreadsheet.flows_w30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x30
  r = spreadsheet.flows_x30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y30
  r = spreadsheet.flows_y30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z30
  r = spreadsheet.flows_z30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa30
  r = spreadsheet.flows_aa30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab30
  r = spreadsheet.flows_ab30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad30
  r = spreadsheet.flows_ad30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.8,r[:number])
end

def test_flows_ae30
  r = spreadsheet.flows_ae30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.0236041697801,r[:number])
end

def test_flows_af30
  r = spreadsheet.flows_af30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.92775040162394,r[:number])
end

def test_flows_ag30
  r = spreadsheet.flows_ag30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.72464692710642,r[:number])
end

def test_flows_ah30
  r = spreadsheet.flows_ah30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.5797951758127,r[:number])
end

def test_flows_ai30
  r = spreadsheet.flows_ai30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.72784123896676,r[:number])
end

def test_flows_aj30
  r = spreadsheet.flows_aj30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.58889075870331,r[:number])
end

def test_flows_ak30
  r = spreadsheet.flows_ak30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.9306323392334,r[:number])
end

def test_flows_al30
  r = spreadsheet.flows_al30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.4187558423291,r[:number])
end

def test_flows_am30
  r = spreadsheet.flows_am30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.58168305622323,r[:number])
end

def test_flows_c31
  r = spreadsheet.flows_c31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d31
  r = spreadsheet.flows_d31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e31
  r = spreadsheet.flows_e31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f31
  r = spreadsheet.flows_f31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g31
  r = spreadsheet.flows_g31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h31
  r = spreadsheet.flows_h31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i31
  r = spreadsheet.flows_i31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j31
  r = spreadsheet.flows_j31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k31
  r = spreadsheet.flows_k31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l31
  r = spreadsheet.flows_l31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m31
  r = spreadsheet.flows_m31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n31
  r = spreadsheet.flows_n31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r31
  r = spreadsheet.flows_r31
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_flows_s31
  r = spreadsheet.flows_s31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t31
  r = spreadsheet.flows_t31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u31
  r = spreadsheet.flows_u31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v31
  r = spreadsheet.flows_v31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w31
  r = spreadsheet.flows_w31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x31
  r = spreadsheet.flows_x31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y31
  r = spreadsheet.flows_y31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z31
  r = spreadsheet.flows_z31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa31
  r = spreadsheet.flows_aa31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab31
  r = spreadsheet.flows_ab31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad31
  r = spreadsheet.flows_ad31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.1581570872572,r[:number])
end

def test_flows_ae31
  r = spreadsheet.flows_ae31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.28499215184298,r[:number])
end

def test_flows_af31
  r = spreadsheet.flows_af31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.90268134716652,r[:number])
end

def test_flows_ag31
  r = spreadsheet.flows_ag31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.07127280693672,r[:number])
end

def test_flows_ah31
  r = spreadsheet.flows_ah31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.70040745020478,r[:number])
end

def test_flows_ai31
  r = spreadsheet.flows_ai31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.17220349292045,r[:number])
end

def test_flows_aj31
  r = spreadsheet.flows_aj31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.57973547988082,r[:number])
end

def test_flows_ak31
  r = spreadsheet.flows_ak31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.02635832578606,r[:number])
end

def test_flows_al31
  r = spreadsheet.flows_al31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.62684281373198,r[:number])
end

def test_flows_am31
  r = spreadsheet.flows_am31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.50863651300597,r[:number])
end

def test_flows_c32
  r = spreadsheet.flows_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d32
  r = spreadsheet.flows_d32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e32
  r = spreadsheet.flows_e32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.5928682890119,r[:number])
end

def test_flows_f32
  r = spreadsheet.flows_f32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(434.1451350399233,r[:number])
end

def test_flows_g32
  r = spreadsheet.flows_g32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.07842087272735,r[:number])
end

def test_flows_h32
  r = spreadsheet.flows_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(294.538574,r[:number])
end

def test_flows_i32
  r = spreadsheet.flows_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.86821994782608,r[:number])
end

def test_flows_j32
  r = spreadsheet.flows_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.95223531914894,r[:number])
end

def test_flows_k32
  r = spreadsheet.flows_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.60482625,r[:number])
end

def test_flows_l32
  r = spreadsheet.flows_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.60482625,r[:number])
end

def test_flows_m32
  r = spreadsheet.flows_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.20882816326531,r[:number])
end

def test_flows_n32
  r = spreadsheet.flows_n32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.82867,r[:number])
end

def test_flows_r32
  r = spreadsheet.flows_r32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_s32
  r = spreadsheet.flows_s32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t32
  r = spreadsheet.flows_t32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u32
  r = spreadsheet.flows_u32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v32
  r = spreadsheet.flows_v32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w32
  r = spreadsheet.flows_w32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x32
  r = spreadsheet.flows_x32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y32
  r = spreadsheet.flows_y32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z32
  r = spreadsheet.flows_z32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa32
  r = spreadsheet.flows_aa32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab32
  r = spreadsheet.flows_ab32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad32
  r = spreadsheet.flows_ad32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.62029588380175,r[:number])
end

def test_flows_ae32
  r = spreadsheet.flows_ae32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.03479844854478,r[:number])
end

def test_flows_af32
  r = spreadsheet.flows_af32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.15345336146986,r[:number])
end

def test_flows_ag32
  r = spreadsheet.flows_ag32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.35128532941522,r[:number])
end

def test_flows_ah32
  r = spreadsheet.flows_ah32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.63150152474631,r[:number])
end

def test_flows_ai32
  r = spreadsheet.flows_ai32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.99744777451708,r[:number])
end

def test_flows_aj32
  r = spreadsheet.flows_aj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.45261487778345,r[:number])
end

def test_flows_ak32
  r = spreadsheet.flows_ak32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.00064522204762,r[:number])
end

def test_flows_al32
  r = spreadsheet.flows_al32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.64533971337013,r[:number])
end

def test_flows_am32
  r = spreadsheet.flows_am32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.39066503541156,r[:number])
end

def test_flows_c33
  r = spreadsheet.flows_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d33
  r = spreadsheet.flows_d33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e33
  r = spreadsheet.flows_e33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.479109818726624,r[:number])
end

def test_flows_f33
  r = spreadsheet.flows_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.534858112,r[:number])
end

def test_flows_g33
  r = spreadsheet.flows_g33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h33
  r = spreadsheet.flows_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i33
  r = spreadsheet.flows_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j33
  r = spreadsheet.flows_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k33
  r = spreadsheet.flows_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l33
  r = spreadsheet.flows_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m33
  r = spreadsheet.flows_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n33
  r = spreadsheet.flows_n33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r33
  r = spreadsheet.flows_r33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_s33
  r = spreadsheet.flows_s33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t33
  r = spreadsheet.flows_t33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u33
  r = spreadsheet.flows_u33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v33
  r = spreadsheet.flows_v33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w33
  r = spreadsheet.flows_w33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x33
  r = spreadsheet.flows_x33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y33
  r = spreadsheet.flows_y33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z33
  r = spreadsheet.flows_z33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa33
  r = spreadsheet.flows_aa33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab33
  r = spreadsheet.flows_ab33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad33
  r = spreadsheet.flows_ad33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.7405061758441,r[:number])
end

def test_flows_ae33
  r = spreadsheet.flows_ae33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.39317091355828,r[:number])
end

def test_flows_af33
  r = spreadsheet.flows_af33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.49406703210153,r[:number])
end

def test_flows_ag33
  r = spreadsheet.flows_ag33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.47957406840723,r[:number])
end

def test_flows_ah33
  r = spreadsheet.flows_ah33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.17895858855188,r[:number])
end

def test_flows_ai33
  r = spreadsheet.flows_ai33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.58198044023743,r[:number])
end

def test_flows_aj33
  r = spreadsheet.flows_aj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.71146201375916,r[:number])
end

def test_flows_ak33
  r = spreadsheet.flows_ak33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.85595455199297,r[:number])
end

def test_flows_al33
  r = spreadsheet.flows_al33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.09596238766956,r[:number])
end

def test_flows_am33
  r = spreadsheet.flows_am33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.43620774985737,r[:number])
end

def test_flows_c34
  r = spreadsheet.flows_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d34
  r = spreadsheet.flows_d34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e34
  r = spreadsheet.flows_e34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.57120492669185,r[:number])
end

def test_flows_f34
  r = spreadsheet.flows_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.3066403541333,r[:number])
end

def test_flows_g34
  r = spreadsheet.flows_g34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.99368158634974,r[:number])
end

def test_flows_h34
  r = spreadsheet.flows_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(491.9769444615879,r[:number])
end

def test_flows_i34
  r = spreadsheet.flows_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(640.985321717101,r[:number])
end

def test_flows_j34
  r = spreadsheet.flows_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(783.6902160176592,r[:number])
end

def test_flows_k34
  r = spreadsheet.flows_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.4217750300174,r[:number])
end

def test_flows_l34
  r = spreadsheet.flows_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(993.9226488871776,r[:number])
end

def test_flows_m34
  r = spreadsheet.flows_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1086.044761090419,r[:number])
end

def test_flows_n34
  r = spreadsheet.flows_n34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1152.7946373182087,r[:number])
end

def test_flows_r34
  r = spreadsheet.flows_r34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_s34
  r = spreadsheet.flows_s34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(980.3815848915083,r[:number])
end

def test_flows_t34
  r = spreadsheet.flows_t34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.8924025606916,r[:number])
end

def test_flows_u34
  r = spreadsheet.flows_u34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(856.5464311602528,r[:number])
end

def test_flows_v34
  r = spreadsheet.flows_v34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.6277604642428,r[:number])
end

def test_flows_w34
  r = spreadsheet.flows_w34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.0972000576121,r[:number])
end

def test_flows_x34
  r = spreadsheet.flows_x34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.634954586045,r[:number])
end

def test_flows_y34
  r = spreadsheet.flows_y34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(852.4348097397128,r[:number])
end

def test_flows_z34
  r = spreadsheet.flows_z34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(864.2080474650459,r[:number])
end

def test_flows_aa34
  r = spreadsheet.flows_aa34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(879.6884500466551,r[:number])
end

def test_flows_ab34
  r = spreadsheet.flows_ab34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(887.8266553154101,r[:number])
end

def test_flows_ad34
  r = spreadsheet.flows_ad34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(977.4538135720204,r[:number])
end

def test_flows_ae34
  r = spreadsheet.flows_ae34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(869.2602351188311,r[:number])
end

def test_flows_af34
  r = spreadsheet.flows_af34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(856.8682846486249,r[:number])
end

def test_flows_ag34
  r = spreadsheet.flows_ag34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.9036348828474,r[:number])
end

def test_flows_ah34
  r = spreadsheet.flows_ah34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.3270954064493,r[:number])
end

def test_flows_ai34
  r = spreadsheet.flows_ai34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(832.8188708651147,r[:number])
end

def test_flows_aj34
  r = spreadsheet.flows_aj34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(852.5727469490149,r[:number])
end

def test_flows_ak34
  r = spreadsheet.flows_ak34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(864.3000056045807,r[:number])
end

def test_flows_al34
  r = spreadsheet.flows_al34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(879.7344291164226,r[:number])
end

def test_flows_am34
  r = spreadsheet.flows_am34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(887.8266553154101,r[:number])
end

def test_flows_ao34
  r = spreadsheet.flows_ao34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9277713194878743,r[:number])
end

def test_flows_ap34
  r = spreadsheet.flows_ap34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.36783255813952564,r[:number])
end

def test_flows_aq34
  r = spreadsheet.flows_aq34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.32185348837208494,r[:number])
end

def test_flows_ar34
  r = spreadsheet.flows_ar34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.27587441860464423,r[:number])
end

def test_flows_as34
  r = spreadsheet.flows_as34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.22989534883720353,r[:number])
end

def test_flows_at34
  r = spreadsheet.flows_at34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.18391627906976282,r[:number])
end

def test_flows_au34
  r = spreadsheet.flows_au34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.13793720930209474,r[:number])
end

def test_flows_av34
  r = spreadsheet.flows_av34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.09195813953488141,r[:number])
end

def test_flows_aw34
  r = spreadsheet.flows_aw34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.045979069767440706,r[:number])
end

def test_flows_ax34
  r = spreadsheet.flows_ax34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c35
  r = spreadsheet.flows_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_flows_d35
  r = spreadsheet.flows_d35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_e35
  r = spreadsheet.flows_e35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.91620313701554,r[:number])
end

def test_flows_f35
  r = spreadsheet.flows_f35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.70999999999998,r[:number])
end

def test_flows_g35
  r = spreadsheet.flows_g35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.9964,r[:number])
end

def test_flows_h35
  r = spreadsheet.flows_h35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.14080000000003,r[:number])
end

def test_flows_i35
  r = spreadsheet.flows_i35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_flows_j35
  r = spreadsheet.flows_j35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_flows_k35
  r = spreadsheet.flows_k35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l35
  r = spreadsheet.flows_l35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m35
  r = spreadsheet.flows_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n35
  r = spreadsheet.flows_n35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r35
  r = spreadsheet.flows_r35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_s35
  r = spreadsheet.flows_s35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t35
  r = spreadsheet.flows_t35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u35
  r = spreadsheet.flows_u35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v35
  r = spreadsheet.flows_v35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w35
  r = spreadsheet.flows_w35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x35
  r = spreadsheet.flows_x35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y35
  r = spreadsheet.flows_y35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z35
  r = spreadsheet.flows_z35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa35
  r = spreadsheet.flows_aa35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab35
  r = spreadsheet.flows_ab35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad35
  r = spreadsheet.flows_ad35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.5376407035722,r[:number])
end

def test_flows_ae35
  r = spreadsheet.flows_ae35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(615.5268253921754,r[:number])
end

def test_flows_af35
  r = spreadsheet.flows_af35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.0713807765101,r[:number])
end

def test_flows_ag35
  r = spreadsheet.flows_ag35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(545.8844557760032,r[:number])
end

def test_flows_ah35
  r = spreadsheet.flows_ah35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(497.90282034892726,r[:number])
end

def test_flows_ai35
  r = spreadsheet.flows_ai35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(502.99913349217064,r[:number])
end

def test_flows_aj35
  r = spreadsheet.flows_aj35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(536.765974700432,r[:number])
end

def test_flows_ak35
  r = spreadsheet.flows_ak35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(587.8392946937925,r[:number])
end

def test_flows_al35
  r = spreadsheet.flows_al35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.4432997802064,r[:number])
end

def test_flows_am35
  r = spreadsheet.flows_am35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(676.0221029604164,r[:number])
end

def test_flows_c36
  r = spreadsheet.flows_c36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_d36
  r = spreadsheet.flows_d36
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_e36
  r = spreadsheet.flows_e36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.813193136590819,r[:number])
end

def test_flows_f36
  r = spreadsheet.flows_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.042140030873806,r[:number])
end

def test_flows_g36
  r = spreadsheet.flows_g36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48727928745219,r[:number])
end

def test_flows_h36
  r = spreadsheet.flows_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.968747932095416,r[:number])
end

def test_flows_i36
  r = spreadsheet.flows_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.73757752705611,r[:number])
end

def test_flows_j36
  r = spreadsheet.flows_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.598323282621358,r[:number])
end

def test_flows_k36
  r = spreadsheet.flows_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.559114593882597,r[:number])
end

def test_flows_l36
  r = spreadsheet.flows_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.62952356526122,r[:number])
end

def test_flows_m36
  r = spreadsheet.flows_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.820617944313286,r[:number])
end

def test_flows_n36
  r = spreadsheet.flows_n36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_flows_r36
  r = spreadsheet.flows_r36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_flows_s36
  r = spreadsheet.flows_s36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t36
  r = spreadsheet.flows_t36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u36
  r = spreadsheet.flows_u36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v36
  r = spreadsheet.flows_v36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w36
  r = spreadsheet.flows_w36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x36
  r = spreadsheet.flows_x36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y36
  r = spreadsheet.flows_y36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z36
  r = spreadsheet.flows_z36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa36
  r = spreadsheet.flows_aa36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab36
  r = spreadsheet.flows_ab36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad36
  r = spreadsheet.flows_ad36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae36
  r = spreadsheet.flows_ae36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af36
  r = spreadsheet.flows_af36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag36
  r = spreadsheet.flows_ag36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah36
  r = spreadsheet.flows_ah36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai36
  r = spreadsheet.flows_ai36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj36
  r = spreadsheet.flows_aj36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak36
  r = spreadsheet.flows_ak36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al36
  r = spreadsheet.flows_al36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am36
  r = spreadsheet.flows_am36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c37
  r = spreadsheet.flows_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_d37
  r = spreadsheet.flows_d37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e37
  r = spreadsheet.flows_e37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(371.04544619856586,r[:number])
end

def test_flows_f37
  r = spreadsheet.flows_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.4405940522287,r[:number])
end

def test_flows_g37
  r = spreadsheet.flows_g37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.993262289115,r[:number])
end

def test_flows_h37
  r = spreadsheet.flows_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(364.31633943153156,r[:number])
end

def test_flows_i37
  r = spreadsheet.flows_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376.1008348160723,r[:number])
end

def test_flows_j37
  r = spreadsheet.flows_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(410.1991758726883,r[:number])
end

def test_flows_k37
  r = spreadsheet.flows_k37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(453.11202840014784,r[:number])
end

def test_flows_l37
  r = spreadsheet.flows_l37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(498.36673868715053,r[:number])
end

def test_flows_m37
  r = spreadsheet.flows_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(543.4265396150585,r[:number])
end

def test_flows_n37
  r = spreadsheet.flows_n37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(576.0327660656261,r[:number])
end

def test_flows_r37
  r = spreadsheet.flows_r37
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_flows_s37
  r = spreadsheet.flows_s37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t37
  r = spreadsheet.flows_t37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u37
  r = spreadsheet.flows_u37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v37
  r = spreadsheet.flows_v37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w37
  r = spreadsheet.flows_w37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x37
  r = spreadsheet.flows_x37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y37
  r = spreadsheet.flows_y37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z37
  r = spreadsheet.flows_z37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa37
  r = spreadsheet.flows_aa37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab37
  r = spreadsheet.flows_ab37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad37
  r = spreadsheet.flows_ad37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.817339999999998,r[:number])
end

def test_flows_ae37
  r = spreadsheet.flows_ae37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.572895707388618,r[:number])
end

def test_flows_af37
  r = spreadsheet.flows_af37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.383064556311584,r[:number])
end

def test_flows_ag37
  r = spreadsheet.flows_ag37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.58984378892685,r[:number])
end

def test_flows_ah37
  r = spreadsheet.flows_ah37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.99670495670838,r[:number])
end

def test_flows_ai37
  r = spreadsheet.flows_ai37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.688791719453825,r[:number])
end

def test_flows_aj37
  r = spreadsheet.flows_aj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.384829464713203,r[:number])
end

def test_flows_ak37
  r = spreadsheet.flows_ak37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.084767495533725,r[:number])
end

def test_flows_al37
  r = spreadsheet.flows_al37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.788555765479813,r[:number])
end

def test_flows_am37
  r = spreadsheet.flows_am37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number])
end

def test_flows_c38
  r = spreadsheet.flows_c38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_d38
  r = spreadsheet.flows_d38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e38
  r = spreadsheet.flows_e38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(570.7007468362892,r[:number])
end

def test_flows_f38
  r = spreadsheet.flows_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(571.213899422954,r[:number])
end

def test_flows_g38
  r = spreadsheet.flows_g38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(536.5879608825096,r[:number])
end

def test_flows_h38
  r = spreadsheet.flows_h38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.37123109796084,r[:number])
end

def test_flows_i38
  r = spreadsheet.flows_i38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(440.7287293217987,r[:number])
end

def test_flows_j38
  r = spreadsheet.flows_j38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(440.55855218149856,r[:number])
end

def test_flows_k38
  r = spreadsheet.flows_k38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(469.35545828598697,r[:number])
end

def test_flows_l38
  r = spreadsheet.flows_l38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(515.5312128847659,r[:number])
end

def test_flows_m38
  r = spreadsheet.flows_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561.0064316943125,r[:number])
end

def test_flows_n38
  r = spreadsheet.flows_n38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(593.445494934326,r[:number])
end

def test_flows_r38
  r = spreadsheet.flows_r38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Natural Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_s38
  r = spreadsheet.flows_s38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(978.0856143179448,r[:number])
end

def test_flows_t38
  r = spreadsheet.flows_t38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1001.4318635490304,r[:number])
end

def test_flows_u38
  r = spreadsheet.flows_u38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080.1732409505273,r[:number])
end

def test_flows_v38
  r = spreadsheet.flows_v38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1202.7184729043995,r[:number])
end

def test_flows_w38
  r = spreadsheet.flows_w38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1389.160504918114,r[:number])
end

def test_flows_x38
  r = spreadsheet.flows_x38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1575.1707290298787,r[:number])
end

def test_flows_y38
  r = spreadsheet.flows_y38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.4313689906198,r[:number])
end

def test_flows_z38
  r = spreadsheet.flows_z38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1861.115383171855,r[:number])
end

def test_flows_aa38
  r = spreadsheet.flows_aa38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1998.803224690223,r[:number])
end

def test_flows_ab38
  r = spreadsheet.flows_ab38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_flows_ad38
  r = spreadsheet.flows_ad38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(978.0856143179448,r[:number])
end

def test_flows_ae38
  r = spreadsheet.flows_ae38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1001.4318635490304,r[:number])
end

def test_flows_af38
  r = spreadsheet.flows_af38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1080.1732409505273,r[:number])
end

def test_flows_ag38
  r = spreadsheet.flows_ag38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1202.7184729043995,r[:number])
end

def test_flows_ah38
  r = spreadsheet.flows_ah38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1389.160504918114,r[:number])
end

def test_flows_ai38
  r = spreadsheet.flows_ai38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1575.1707290298787,r[:number])
end

def test_flows_aj38
  r = spreadsheet.flows_aj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.4313689906198,r[:number])
end

def test_flows_ak38
  r = spreadsheet.flows_ak38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1861.115383171855,r[:number])
end

def test_flows_al38
  r = spreadsheet.flows_al38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1998.803224690223,r[:number])
end

def test_flows_am38
  r = spreadsheet.flows_am38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2116.5585654929237,r[:number])
end

def test_flows_ao38
  r = spreadsheet.flows_ao38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap38
  r = spreadsheet.flows_ap38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq38
  r = spreadsheet.flows_aq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar38
  r = spreadsheet.flows_ar38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as38
  r = spreadsheet.flows_as38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at38
  r = spreadsheet.flows_at38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au38
  r = spreadsheet.flows_au38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av38
  r = spreadsheet.flows_av38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw38
  r = spreadsheet.flows_aw38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax38
  r = spreadsheet.flows_ax38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c39
  r = spreadsheet.flows_c39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d39
  r = spreadsheet.flows_d39
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_e39
  r = spreadsheet.flows_e39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f39
  r = spreadsheet.flows_f39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g39
  r = spreadsheet.flows_g39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h39
  r = spreadsheet.flows_h39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i39
  r = spreadsheet.flows_i39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j39
  r = spreadsheet.flows_j39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k39
  r = spreadsheet.flows_k39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l39
  r = spreadsheet.flows_l39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m39
  r = spreadsheet.flows_m39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n39
  r = spreadsheet.flows_n39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r39
  r = spreadsheet.flows_r39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear",r[:string].force_encoding('utf-8'))
end

def test_flows_s39
  r = spreadsheet.flows_s39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.91620313701554,r[:number])
end

def test_flows_t39
  r = spreadsheet.flows_t39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.70999999999998,r[:number])
end

def test_flows_u39
  r = spreadsheet.flows_u39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.9964,r[:number])
end

def test_flows_v39
  r = spreadsheet.flows_v39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.14080000000003,r[:number])
end

def test_flows_w39
  r = spreadsheet.flows_w39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_flows_x39
  r = spreadsheet.flows_x39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.713600000000014,r[:number])
end

def test_flows_y39
  r = spreadsheet.flows_y39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z39
  r = spreadsheet.flows_z39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa39
  r = spreadsheet.flows_aa39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab39
  r = spreadsheet.flows_ab39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad39
  r = spreadsheet.flows_ad39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae39
  r = spreadsheet.flows_ae39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af39
  r = spreadsheet.flows_af39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag39
  r = spreadsheet.flows_ag39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah39
  r = spreadsheet.flows_ah39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai39
  r = spreadsheet.flows_ai39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj39
  r = spreadsheet.flows_aj39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak39
  r = spreadsheet.flows_ak39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al39
  r = spreadsheet.flows_al39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am39
  r = spreadsheet.flows_am39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c40
  r = spreadsheet.flows_c40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d40
  r = spreadsheet.flows_d40
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_e40
  r = spreadsheet.flows_e40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f40
  r = spreadsheet.flows_f40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g40
  r = spreadsheet.flows_g40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h40
  r = spreadsheet.flows_h40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i40
  r = spreadsheet.flows_i40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j40
  r = spreadsheet.flows_j40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k40
  r = spreadsheet.flows_k40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l40
  r = spreadsheet.flows_l40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m40
  r = spreadsheet.flows_m40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n40
  r = spreadsheet.flows_n40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r40
  r = spreadsheet.flows_r40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil",r[:string].force_encoding('utf-8'))
end

def test_flows_s40
  r = spreadsheet.flows_s40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number])
end

def test_flows_t40
  r = spreadsheet.flows_t40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.1911081134084,r[:number])
end

def test_flows_u40
  r = spreadsheet.flows_u40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(855.1870235798388,r[:number])
end

def test_flows_v40
  r = spreadsheet.flows_v40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(859.5939643444532,r[:number])
end

def test_flows_w40
  r = spreadsheet.flows_w40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.7983560433511,r[:number])
end

def test_flows_x40
  r = spreadsheet.flows_x40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(828.4897394075546,r[:number])
end

def test_flows_y40
  r = spreadsheet.flows_y40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(847.4223190112918,r[:number])
end

def test_flows_z40
  r = spreadsheet.flows_z40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(858.3068752198818,r[:number])
end

def test_flows_aa40
  r = spreadsheet.flows_aa40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(872.8766716322104,r[:number])
end

def test_flows_ab40
  r = spreadsheet.flows_ab40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_flows_ad40
  r = spreadsheet.flows_ad40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number])
end

def test_flows_ae40
  r = spreadsheet.flows_ae40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(868.1911081134084,r[:number])
end

def test_flows_af40
  r = spreadsheet.flows_af40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(855.1870235798388,r[:number])
end

def test_flows_ag40
  r = spreadsheet.flows_ag40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(859.5939643444532,r[:number])
end

def test_flows_ah40
  r = spreadsheet.flows_ah40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(845.7983560433511,r[:number])
end

def test_flows_ai40
  r = spreadsheet.flows_ai40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(828.4897394075546,r[:number])
end

def test_flows_aj40
  r = spreadsheet.flows_aj40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(847.4223190112918,r[:number])
end

def test_flows_ak40
  r = spreadsheet.flows_ak40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(858.3068752198818,r[:number])
end

def test_flows_al40
  r = spreadsheet.flows_al40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(872.8766716322104,r[:number])
end

def test_flows_am40
  r = spreadsheet.flows_am40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(880.0818093454258,r[:number])
end

def test_flows_ao40
  r = spreadsheet.flows_ao40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap40
  r = spreadsheet.flows_ap40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq40
  r = spreadsheet.flows_aq40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar40
  r = spreadsheet.flows_ar40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as40
  r = spreadsheet.flows_as40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at40
  r = spreadsheet.flows_at40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au40
  r = spreadsheet.flows_au40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av40
  r = spreadsheet.flows_av40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw40
  r = spreadsheet.flows_aw40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax40
  r = spreadsheet.flows_ax40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c41
  r = spreadsheet.flows_c41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d41
  r = spreadsheet.flows_d41
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_e41
  r = spreadsheet.flows_e41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f41
  r = spreadsheet.flows_f41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g41
  r = spreadsheet.flows_g41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h41
  r = spreadsheet.flows_h41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i41
  r = spreadsheet.flows_i41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j41
  r = spreadsheet.flows_j41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k41
  r = spreadsheet.flows_k41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l41
  r = spreadsheet.flows_l41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m41
  r = spreadsheet.flows_m41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n41
  r = spreadsheet.flows_n41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r41
  r = spreadsheet.flows_r41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil imports",r[:string].force_encoding('utf-8'))
end

def test_flows_s41
  r = spreadsheet.flows_s41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t41
  r = spreadsheet.flows_t41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.64315527619635,r[:number])
end

def test_flows_u41
  r = spreadsheet.flows_u41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.35818004652242,r[:number])
end

def test_flows_v41
  r = spreadsheet.flows_v41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(357.8050142717038,r[:number])
end

def test_flows_w41
  r = spreadsheet.flows_w41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.52363182891844,r[:number])
end

def test_flows_x41
  r = spreadsheet.flows_x41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(528.050159297357,r[:number])
end

def test_flows_y41
  r = spreadsheet.flows_y41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.947899051517,r[:number])
end

def test_flows_z41
  r = spreadsheet.flows_z41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(678.4226005986385,r[:number])
end

def test_flows_aa41
  r = spreadsheet.flows_aa41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(733.6856489742773,r[:number])
end

def test_flows_ab41
  r = spreadsheet.flows_ab41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(772.3784493415866,r[:number])
end

def test_flows_ad41
  r = spreadsheet.flows_ad41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae41
  r = spreadsheet.flows_ae41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af41
  r = spreadsheet.flows_af41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag41
  r = spreadsheet.flows_ag41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah41
  r = spreadsheet.flows_ah41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai41
  r = spreadsheet.flows_ai41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj41
  r = spreadsheet.flows_aj41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak41
  r = spreadsheet.flows_ak41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al41
  r = spreadsheet.flows_al41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am41
  r = spreadsheet.flows_am41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c42
  r = spreadsheet.flows_c42
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d42
  r = spreadsheet.flows_d42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e42
  r = spreadsheet.flows_e42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f42
  r = spreadsheet.flows_f42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g42
  r = spreadsheet.flows_g42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h42
  r = spreadsheet.flows_h42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i42
  r = spreadsheet.flows_i42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j42
  r = spreadsheet.flows_j42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k42
  r = spreadsheet.flows_k42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l42
  r = spreadsheet.flows_l42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m42
  r = spreadsheet.flows_m42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n42
  r = spreadsheet.flows_n42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r42
  r = spreadsheet.flows_r42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Oil reserves",r[:string].force_encoding('utf-8'))
end

def test_flows_s42
  r = spreadsheet.flows_s42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(975.8912083497981,r[:number])
end

def test_flows_t42
  r = spreadsheet.flows_t42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(802.547952837212,r[:number])
end

def test_flows_u42
  r = spreadsheet.flows_u42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(646.8288435333163,r[:number])
end

def test_flows_v42
  r = spreadsheet.flows_v42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.7889500727494,r[:number])
end

def test_flows_w42
  r = spreadsheet.flows_w42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.27472421443264,r[:number])
end

def test_flows_x42
  r = spreadsheet.flows_x42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.43958011019754,r[:number])
end

def test_flows_y42
  r = spreadsheet.flows_y42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.47441995977493,r[:number])
end

def test_flows_z42
  r = spreadsheet.flows_z42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88427462124332,r[:number])
end

def test_flows_aa42
  r = spreadsheet.flows_aa42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19102265793308,r[:number])
end

def test_flows_ab42
  r = spreadsheet.flows_ab42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.70336000383915,r[:number])
end

def test_flows_ad42
  r = spreadsheet.flows_ad42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae42
  r = spreadsheet.flows_ae42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af42
  r = spreadsheet.flows_af42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag42
  r = spreadsheet.flows_ag42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah42
  r = spreadsheet.flows_ah42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai42
  r = spreadsheet.flows_ai42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj42
  r = spreadsheet.flows_aj42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak42
  r = spreadsheet.flows_ak42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al42
  r = spreadsheet.flows_al42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am42
  r = spreadsheet.flows_am42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c43
  r = spreadsheet.flows_c43
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d43
  r = spreadsheet.flows_d43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e43
  r = spreadsheet.flows_e43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f43
  r = spreadsheet.flows_f43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g43
  r = spreadsheet.flows_g43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h43
  r = spreadsheet.flows_h43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i43
  r = spreadsheet.flows_i43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j43
  r = spreadsheet.flows_j43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k43
  r = spreadsheet.flows_k43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l43
  r = spreadsheet.flows_l43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m43
  r = spreadsheet.flows_m43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n43
  r = spreadsheet.flows_n43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r43
  r = spreadsheet.flows_r43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other waste",r[:string].force_encoding('utf-8'))
end

def test_flows_s43
  r = spreadsheet.flows_s43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.43678729060374,r[:number])
end

def test_flows_t43
  r = spreadsheet.flows_t43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.83498297733027,r[:number])
end

def test_flows_u43
  r = spreadsheet.flows_u43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.22948545772632,r[:number])
end

def test_flows_v43
  r = spreadsheet.flows_v43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.399469747679824,r[:number])
end

def test_flows_w43
  r = spreadsheet.flows_w43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.86344675251034,r[:number])
end

def test_flows_x43
  r = spreadsheet.flows_x43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.815262464898986,r[:number])
end

def test_flows_y43
  r = spreadsheet.flows_y43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.19656972323991,r[:number])
end

def test_flows_z43
  r = spreadsheet.flows_z43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.78337005020964,r[:number])
end

def test_flows_aa43
  r = spreadsheet.flows_aa43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.582129663212,r[:number])
end

def test_flows_ab43
  r = spreadsheet.flows_ab43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.59577646384282,r[:number])
end

def test_flows_ad43
  r = spreadsheet.flows_ad43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae43
  r = spreadsheet.flows_ae43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af43
  r = spreadsheet.flows_af43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag43
  r = spreadsheet.flows_ag43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah43
  r = spreadsheet.flows_ah43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai43
  r = spreadsheet.flows_ai43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj43
  r = spreadsheet.flows_aj43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak43
  r = spreadsheet.flows_ak43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al43
  r = spreadsheet.flows_al43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am43
  r = spreadsheet.flows_am43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c44
  r = spreadsheet.flows_c44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_flows_d44
  r = spreadsheet.flows_d44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e44
  r = spreadsheet.flows_e44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f44
  r = spreadsheet.flows_f44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g44
  r = spreadsheet.flows_g44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h44
  r = spreadsheet.flows_h44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i44
  r = spreadsheet.flows_i44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j44
  r = spreadsheet.flows_j44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k44
  r = spreadsheet.flows_k44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l44
  r = spreadsheet.flows_l44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m44
  r = spreadsheet.flows_m44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n44
  r = spreadsheet.flows_n44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r44
  r = spreadsheet.flows_r44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_s44
  r = spreadsheet.flows_s44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t44
  r = spreadsheet.flows_t44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u44
  r = spreadsheet.flows_u44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v44
  r = spreadsheet.flows_v44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w44
  r = spreadsheet.flows_w44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x44
  r = spreadsheet.flows_x44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y44
  r = spreadsheet.flows_y44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z44
  r = spreadsheet.flows_z44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa44
  r = spreadsheet.flows_aa44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab44
  r = spreadsheet.flows_ab44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad44
  r = spreadsheet.flows_ad44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.88229852333984,r[:number])
end

def test_flows_ae44
  r = spreadsheet.flows_ae44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_flows_af44
  r = spreadsheet.flows_af44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag44
  r = spreadsheet.flows_ag44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah44
  r = spreadsheet.flows_ah44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai44
  r = spreadsheet.flows_ai44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj44
  r = spreadsheet.flows_aj44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak44
  r = spreadsheet.flows_ak44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al44
  r = spreadsheet.flows_al44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am44
  r = spreadsheet.flows_am44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c45
  r = spreadsheet.flows_c45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_flows_d45
  r = spreadsheet.flows_d45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e45
  r = spreadsheet.flows_e45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.962752417600001,r[:number])
end

def test_flows_f45
  r = spreadsheet.flows_f45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.440670099999998,r[:number])
end

def test_flows_g45
  r = spreadsheet.flows_g45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.3428701,r[:number])
end

def test_flows_h45
  r = spreadsheet.flows_h45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.35726511600001,r[:number])
end

def test_flows_i45
  r = spreadsheet.flows_i45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.69377964,r[:number])
end

def test_flows_j45
  r = spreadsheet.flows_j45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.16934531999999,r[:number])
end

def test_flows_k45
  r = spreadsheet.flows_k45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.302885319999994,r[:number])
end

def test_flows_l45
  r = spreadsheet.flows_l45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.209185319999996,r[:number])
end

def test_flows_m45
  r = spreadsheet.flows_m45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_flows_n45
  r = spreadsheet.flows_n45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_flows_r45
  r = spreadsheet.flows_r45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_flows_s45
  r = spreadsheet.flows_s45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t45
  r = spreadsheet.flows_t45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u45
  r = spreadsheet.flows_u45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v45
  r = spreadsheet.flows_v45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w45
  r = spreadsheet.flows_w45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x45
  r = spreadsheet.flows_x45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y45
  r = spreadsheet.flows_y45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z45
  r = spreadsheet.flows_z45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa45
  r = spreadsheet.flows_aa45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab45
  r = spreadsheet.flows_ab45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad45
  r = spreadsheet.flows_ad45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae45
  r = spreadsheet.flows_ae45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af45
  r = spreadsheet.flows_af45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag45
  r = spreadsheet.flows_ag45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah45
  r = spreadsheet.flows_ah45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai45
  r = spreadsheet.flows_ai45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj45
  r = spreadsheet.flows_aj45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak45
  r = spreadsheet.flows_ak45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al45
  r = spreadsheet.flows_al45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am45
  r = spreadsheet.flows_am45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c46
  r = spreadsheet.flows_c46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_flows_d46
  r = spreadsheet.flows_d46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e46
  r = spreadsheet.flows_e46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f46
  r = spreadsheet.flows_f46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0050034246575342495,r[:number])
end

def test_flows_g46
  r = spreadsheet.flows_g46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.020013698630136998,r[:number])
end

def test_flows_h46
  r = spreadsheet.flows_h46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050034246575342486,r[:number])
end

def test_flows_i46
  r = spreadsheet.flows_i46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_flows_j46
  r = spreadsheet.flows_j46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_flows_k46
  r = spreadsheet.flows_k46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l46
  r = spreadsheet.flows_l46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m46
  r = spreadsheet.flows_m46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n46
  r = spreadsheet.flows_n46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r46
  r = spreadsheet.flows_r46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_flows_s46
  r = spreadsheet.flows_s46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t46
  r = spreadsheet.flows_t46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u46
  r = spreadsheet.flows_u46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v46
  r = spreadsheet.flows_v46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w46
  r = spreadsheet.flows_w46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x46
  r = spreadsheet.flows_x46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y46
  r = spreadsheet.flows_y46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z46
  r = spreadsheet.flows_z46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa46
  r = spreadsheet.flows_aa46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab46
  r = spreadsheet.flows_ab46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad46
  r = spreadsheet.flows_ad46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.852446803025652,r[:number])
end

def test_flows_ae46
  r = spreadsheet.flows_ae46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.724487403333235,r[:number])
end

def test_flows_af46
  r = spreadsheet.flows_af46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.18344884013044,r[:number])
end

def test_flows_ag46
  r = spreadsheet.flows_ag46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.963945338992865,r[:number])
end

def test_flows_ah46
  r = spreadsheet.flows_ah46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.668321544879078,r[:number])
end

def test_flows_ai46
  r = spreadsheet.flows_ai46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.278078430943093,r[:number])
end

def test_flows_aj46
  r = spreadsheet.flows_aj46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.860444512419438,r[:number])
end

def test_flows_ak46
  r = spreadsheet.flows_ak46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.374887113066478,r[:number])
end

def test_flows_al46
  r = spreadsheet.flows_al46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.894486251116774,r[:number])
end

def test_flows_am46
  r = spreadsheet.flows_am46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.422595081474668,r[:number])
end

def test_flows_c47
  r = spreadsheet.flows_c47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_flows_d47
  r = spreadsheet.flows_d47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e47
  r = spreadsheet.flows_e47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f47
  r = spreadsheet.flows_f47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g47
  r = spreadsheet.flows_g47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030020547945205484,r[:number])
end

def test_flows_h47
  r = spreadsheet.flows_h47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1584417808219177,r[:number])
end

def test_flows_i47
  r = spreadsheet.flows_i47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_flows_j47
  r = spreadsheet.flows_j47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_flows_k47
  r = spreadsheet.flows_k47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l47
  r = spreadsheet.flows_l47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m47
  r = spreadsheet.flows_m47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n47
  r = spreadsheet.flows_n47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r47
  r = spreadsheet.flows_r47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_s47
  r = spreadsheet.flows_s47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t47
  r = spreadsheet.flows_t47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u47
  r = spreadsheet.flows_u47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v47
  r = spreadsheet.flows_v47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w47
  r = spreadsheet.flows_w47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x47
  r = spreadsheet.flows_x47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y47
  r = spreadsheet.flows_y47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z47
  r = spreadsheet.flows_z47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa47
  r = spreadsheet.flows_aa47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab47
  r = spreadsheet.flows_ab47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad47
  r = spreadsheet.flows_ad47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.85404977847907,r[:number])
end

def test_flows_ae47
  r = spreadsheet.flows_ae47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.2870297257891,r[:number])
end

def test_flows_af47
  r = spreadsheet.flows_af47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(445.09762990248004,r[:number])
end

def test_flows_ag47
  r = spreadsheet.flows_ag47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.4061681424823,r[:number])
end

def test_flows_ah47
  r = spreadsheet.flows_ah47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.3974289791397,r[:number])
end

def test_flows_ai47
  r = spreadsheet.flows_ai47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(356.1184633730033,r[:number])
end

def test_flows_aj47
  r = spreadsheet.flows_aj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.8661658524155,r[:number])
end

def test_flows_ak47
  r = spreadsheet.flows_ak47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.17528729424066,r[:number])
end

def test_flows_al47
  r = spreadsheet.flows_al47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.59857626834895,r[:number])
end

def test_flows_am47
  r = spreadsheet.flows_am47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.86059089519557,r[:number])
end

def test_flows_c48
  r = spreadsheet.flows_c48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_flows_d48
  r = spreadsheet.flows_d48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e48
  r = spreadsheet.flows_e48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f48
  r = spreadsheet.flows_f48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g48
  r = spreadsheet.flows_g48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h48
  r = spreadsheet.flows_h48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i48
  r = spreadsheet.flows_i48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j48
  r = spreadsheet.flows_j48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k48
  r = spreadsheet.flows_k48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l48
  r = spreadsheet.flows_l48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m48
  r = spreadsheet.flows_m48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n48
  r = spreadsheet.flows_n48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r48
  r = spreadsheet.flows_r48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar",r[:string].force_encoding('utf-8'))
end

def test_flows_s48
  r = spreadsheet.flows_s48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_flows_t48
  r = spreadsheet.flows_t48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_flows_u48
  r = spreadsheet.flows_u48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_flows_v48
  r = spreadsheet.flows_v48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w48
  r = spreadsheet.flows_w48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x48
  r = spreadsheet.flows_x48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y48
  r = spreadsheet.flows_y48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z48
  r = spreadsheet.flows_z48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa48
  r = spreadsheet.flows_aa48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab48
  r = spreadsheet.flows_ab48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad48
  r = spreadsheet.flows_ad48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae48
  r = spreadsheet.flows_ae48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af48
  r = spreadsheet.flows_af48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag48
  r = spreadsheet.flows_ag48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah48
  r = spreadsheet.flows_ah48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai48
  r = spreadsheet.flows_ai48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj48
  r = spreadsheet.flows_aj48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak48
  r = spreadsheet.flows_ak48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al48
  r = spreadsheet.flows_al48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am48
  r = spreadsheet.flows_am48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c49
  r = spreadsheet.flows_c49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydro",r[:string].force_encoding('utf-8'))
end

def test_flows_d49
  r = spreadsheet.flows_d49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_e49
  r = spreadsheet.flows_e49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.114400994,r[:number])
end

def test_flows_f49
  r = spreadsheet.flows_f49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_g49
  r = spreadsheet.flows_g49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_h49
  r = spreadsheet.flows_h49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_i49
  r = spreadsheet.flows_i49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_j49
  r = spreadsheet.flows_j49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_k49
  r = spreadsheet.flows_k49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_l49
  r = spreadsheet.flows_l49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_m49
  r = spreadsheet.flows_m49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_n49
  r = spreadsheet.flows_n49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.329728000000001,r[:number])
end

def test_flows_r49
  r = spreadsheet.flows_r49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar PV",r[:string].force_encoding('utf-8'))
end

def test_flows_s49
  r = spreadsheet.flows_s49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_flows_t49
  r = spreadsheet.flows_t49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_flows_u49
  r = spreadsheet.flows_u49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_flows_v49
  r = spreadsheet.flows_v49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w49
  r = spreadsheet.flows_w49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x49
  r = spreadsheet.flows_x49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y49
  r = spreadsheet.flows_y49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z49
  r = spreadsheet.flows_z49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa49
  r = spreadsheet.flows_aa49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab49
  r = spreadsheet.flows_ab49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad49
  r = spreadsheet.flows_ad49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01700604,r[:number])
end

def test_flows_ae49
  r = spreadsheet.flows_ae49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.028059966000000006,r[:number])
end

def test_flows_af49
  r = spreadsheet.flows_af49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.013604831999999999,r[:number])
end

def test_flows_ag49
  r = spreadsheet.flows_ag49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah49
  r = spreadsheet.flows_ah49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai49
  r = spreadsheet.flows_ai49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj49
  r = spreadsheet.flows_aj49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak49
  r = spreadsheet.flows_ak49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al49
  r = spreadsheet.flows_al49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am49
  r = spreadsheet.flows_am49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ao49
  r = spreadsheet.flows_ao49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap49
  r = spreadsheet.flows_ap49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq49
  r = spreadsheet.flows_aq49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar49
  r = spreadsheet.flows_ar49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as49
  r = spreadsheet.flows_as49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at49
  r = spreadsheet.flows_at49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au49
  r = spreadsheet.flows_au49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av49
  r = spreadsheet.flows_av49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw49
  r = spreadsheet.flows_aw49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax49
  r = spreadsheet.flows_ax49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c50
  r = spreadsheet.flows_c50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d50
  r = spreadsheet.flows_d50
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e50
  r = spreadsheet.flows_e50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f50
  r = spreadsheet.flows_f50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g50
  r = spreadsheet.flows_g50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h50
  r = spreadsheet.flows_h50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i50
  r = spreadsheet.flows_i50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j50
  r = spreadsheet.flows_j50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k50
  r = spreadsheet.flows_k50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l50
  r = spreadsheet.flows_l50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m50
  r = spreadsheet.flows_m50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n50
  r = spreadsheet.flows_n50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r50
  r = spreadsheet.flows_r50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_flows_s50
  r = spreadsheet.flows_s50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t50
  r = spreadsheet.flows_t50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u50
  r = spreadsheet.flows_u50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_v50
  r = spreadsheet.flows_v50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_w50
  r = spreadsheet.flows_w50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_x50
  r = spreadsheet.flows_x50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_y50
  r = spreadsheet.flows_y50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z50
  r = spreadsheet.flows_z50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa50
  r = spreadsheet.flows_aa50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab50
  r = spreadsheet.flows_ab50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad50
  r = spreadsheet.flows_ad50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae50
  r = spreadsheet.flows_ae50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af50
  r = spreadsheet.flows_af50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag50
  r = spreadsheet.flows_ag50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah50
  r = spreadsheet.flows_ah50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai50
  r = spreadsheet.flows_ai50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj50
  r = spreadsheet.flows_aj50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak50
  r = spreadsheet.flows_ak50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al50
  r = spreadsheet.flows_al50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am50
  r = spreadsheet.flows_am50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ao50
  r = spreadsheet.flows_ao50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap50
  r = spreadsheet.flows_ap50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq50
  r = spreadsheet.flows_aq50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar50
  r = spreadsheet.flows_ar50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as50
  r = spreadsheet.flows_as50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at50
  r = spreadsheet.flows_at50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au50
  r = spreadsheet.flows_au50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av50
  r = spreadsheet.flows_av50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw50
  r = spreadsheet.flows_aw50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax50
  r = spreadsheet.flows_ax50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c51
  r = spreadsheet.flows_c51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d51
  r = spreadsheet.flows_d51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Over generation / exports",r[:string].force_encoding('utf-8'))
end

def test_flows_e51
  r = spreadsheet.flows_e51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f51
  r = spreadsheet.flows_f51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_flows_g51
  r = spreadsheet.flows_g51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h51
  r = spreadsheet.flows_h51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i51
  r = spreadsheet.flows_i51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j51
  r = spreadsheet.flows_j51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k51
  r = spreadsheet.flows_k51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l51
  r = spreadsheet.flows_l51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m51
  r = spreadsheet.flows_m51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n51
  r = spreadsheet.flows_n51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r51
  r = spreadsheet.flows_r51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_s51
  r = spreadsheet.flows_s51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(496.2822016743849,r[:number])
end

def test_flows_t51
  r = spreadsheet.flows_t51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.62288647121244,r[:number])
end

def test_flows_u51
  r = spreadsheet.flows_u51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(452.4675236264023,r[:number])
end

def test_flows_v51
  r = spreadsheet.flows_v51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.6508929896824,r[:number])
end

def test_flows_w51
  r = spreadsheet.flows_w51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.36577243928852,r[:number])
end

def test_flows_x51
  r = spreadsheet.flows_x51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.149824921977,r[:number])
end

def test_flows_y51
  r = spreadsheet.flows_y51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.80330314231703,r[:number])
end

def test_flows_z51
  r = spreadsheet.flows_z51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.3882431335079,r[:number])
end

def test_flows_aa51
  r = spreadsheet.flows_aa51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.22260443623873,r[:number])
end

def test_flows_ab51
  r = spreadsheet.flows_ab51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.78162562276052,r[:number])
end

def test_flows_ad51
  r = spreadsheet.flows_ad51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(496.28220167438485,r[:number])
end

def test_flows_ae51
  r = spreadsheet.flows_ae51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.6228864712125,r[:number])
end

def test_flows_af51
  r = spreadsheet.flows_af51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(452.4675236264023,r[:number])
end

def test_flows_ag51
  r = spreadsheet.flows_ag51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.65089298968246,r[:number])
end

def test_flows_ah51
  r = spreadsheet.flows_ah51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.36577243928855,r[:number])
end

def test_flows_ai51
  r = spreadsheet.flows_ai51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(136.14982492197697,r[:number])
end

def test_flows_aj51
  r = spreadsheet.flows_aj51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.80330314231705,r[:number])
end

def test_flows_ak51
  r = spreadsheet.flows_ak51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.38824313350788,r[:number])
end

def test_flows_al51
  r = spreadsheet.flows_al51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.22260443623873,r[:number])
end

def test_flows_am51
  r = spreadsheet.flows_am51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.78162562276052,r[:number])
end

def test_flows_ao51
  r = spreadsheet.flows_ao51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap51
  r = spreadsheet.flows_ap51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq51
  r = spreadsheet.flows_aq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar51
  r = spreadsheet.flows_ar51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as51
  r = spreadsheet.flows_as51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at51
  r = spreadsheet.flows_at51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au51
  r = spreadsheet.flows_au51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av51
  r = spreadsheet.flows_av51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw51
  r = spreadsheet.flows_aw51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax51
  r = spreadsheet.flows_ax51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c52
  r = spreadsheet.flows_c52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d52
  r = spreadsheet.flows_d52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e52
  r = spreadsheet.flows_e52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.584481639635886,r[:number])
end

def test_flows_f52
  r = spreadsheet.flows_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.940516941246642,r[:number])
end

def test_flows_g52
  r = spreadsheet.flows_g52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.669991954458705,r[:number])
end

def test_flows_h52
  r = spreadsheet.flows_h52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.961017270274862,r[:number])
end

def test_flows_i52
  r = spreadsheet.flows_i52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.665269140449826,r[:number])
end

def test_flows_j52
  r = spreadsheet.flows_j52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.379298757863346,r[:number])
end

def test_flows_k52
  r = spreadsheet.flows_k52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.22943122193809,r[:number])
end

def test_flows_l52
  r = spreadsheet.flows_l52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.19366125689168,r[:number])
end

def test_flows_m52
  r = spreadsheet.flows_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.28186774924617,r[:number])
end

def test_flows_n52
  r = spreadsheet.flows_n52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.556151543328035,r[:number])
end

def test_flows_r52
  r = spreadsheet.flows_r52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Thermal generation",r[:string].force_encoding('utf-8'))
end

def test_flows_s52
  r = spreadsheet.flows_s52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(950.5593861714459,r[:number])
end

def test_flows_t52
  r = spreadsheet.flows_t52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(946.6966335060565,r[:number])
end

def test_flows_u52
  r = spreadsheet.flows_u52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(908.0685024590769,r[:number])
end

def test_flows_v52
  r = spreadsheet.flows_v52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(863.6563184615878,r[:number])
end

def test_flows_w52
  r = spreadsheet.flows_w52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827.567141664927,r[:number])
end

def test_flows_x52
  r = spreadsheet.flows_x52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(862.3560513368082,r[:number])
end

def test_flows_y52
  r = spreadsheet.flows_y52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(935.0266012800174,r[:number])
end

def test_flows_z52
  r = spreadsheet.flows_z52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1027.5274751371776,r[:number])
end

def test_flows_aa52
  r = spreadsheet.flows_aa52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1119.2535892536844,r[:number])
end

def test_flows_ab52
  r = spreadsheet.flows_ab52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1185.6233073182088,r[:number])
end

def test_flows_ad52
  r = spreadsheet.flows_ad52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(950.559386171446,r[:number])
end

def test_flows_ae52
  r = spreadsheet.flows_ae52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(946.6966335060565,r[:number])
end

def test_flows_af52
  r = spreadsheet.flows_af52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(908.0685024590771,r[:number])
end

def test_flows_ag52
  r = spreadsheet.flows_ag52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(863.6563184615878,r[:number])
end

def test_flows_ah52
  r = spreadsheet.flows_ah52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827.5671416649271,r[:number])
end

def test_flows_ai52
  r = spreadsheet.flows_ai52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(862.3560513368082,r[:number])
end

def test_flows_aj52
  r = spreadsheet.flows_aj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(935.0266012800174,r[:number])
end

def test_flows_ak52
  r = spreadsheet.flows_ak52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1027.5274751371776,r[:number])
end

def test_flows_al52
  r = spreadsheet.flows_al52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1119.2535892536841,r[:number])
end

def test_flows_am52
  r = spreadsheet.flows_am52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1185.6233073182088,r[:number])
end

def test_flows_ao52
  r = spreadsheet.flows_ao52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ap52
  r = spreadsheet.flows_ap52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aq52
  r = spreadsheet.flows_aq52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ar52
  r = spreadsheet.flows_ar52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_as52
  r = spreadsheet.flows_as52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_at52
  r = spreadsheet.flows_at52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_au52
  r = spreadsheet.flows_au52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_av52
  r = spreadsheet.flows_av52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aw52
  r = spreadsheet.flows_aw52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ax52
  r = spreadsheet.flows_ax52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c53
  r = spreadsheet.flows_c53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d53
  r = spreadsheet.flows_d53
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_e53
  r = spreadsheet.flows_e53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f53
  r = spreadsheet.flows_f53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g53
  r = spreadsheet.flows_g53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h53
  r = spreadsheet.flows_h53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i53
  r = spreadsheet.flows_i53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j53
  r = spreadsheet.flows_j53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k53
  r = spreadsheet.flows_k53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l53
  r = spreadsheet.flows_l53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m53
  r = spreadsheet.flows_m53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n53
  r = spreadsheet.flows_n53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r53
  r = spreadsheet.flows_r53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Tidal",r[:string].force_encoding('utf-8'))
end

def test_flows_s53
  r = spreadsheet.flows_s53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t53
  r = spreadsheet.flows_t53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0050034246575342495,r[:number])
end

def test_flows_u53
  r = spreadsheet.flows_u53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.020013698630136998,r[:number])
end

def test_flows_v53
  r = spreadsheet.flows_v53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050034246575342486,r[:number])
end

def test_flows_w53
  r = spreadsheet.flows_w53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_flows_x53
  r = spreadsheet.flows_x53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12508561643835608,r[:number])
end

def test_flows_y53
  r = spreadsheet.flows_y53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z53
  r = spreadsheet.flows_z53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa53
  r = spreadsheet.flows_aa53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab53
  r = spreadsheet.flows_ab53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad53
  r = spreadsheet.flows_ad53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae53
  r = spreadsheet.flows_ae53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af53
  r = spreadsheet.flows_af53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag53
  r = spreadsheet.flows_ag53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah53
  r = spreadsheet.flows_ah53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai53
  r = spreadsheet.flows_ai53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj53
  r = spreadsheet.flows_aj53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak53
  r = spreadsheet.flows_ak53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al53
  r = spreadsheet.flows_al53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am53
  r = spreadsheet.flows_am53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c54
  r = spreadsheet.flows_c54
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d54
  r = spreadsheet.flows_d54
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_flows_e54
  r = spreadsheet.flows_e54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f54
  r = spreadsheet.flows_f54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g54
  r = spreadsheet.flows_g54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h54
  r = spreadsheet.flows_h54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i54
  r = spreadsheet.flows_i54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j54
  r = spreadsheet.flows_j54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k54
  r = spreadsheet.flows_k54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l54
  r = spreadsheet.flows_l54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m54
  r = spreadsheet.flows_m54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n54
  r = spreadsheet.flows_n54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r54
  r = spreadsheet.flows_r54
  assert_equal(:ExcelString,r[:type])
  assert_equal("UK land based bioenergy",r[:string].force_encoding('utf-8'))
end

def test_flows_s54
  r = spreadsheet.flows_s54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.881522222222221,r[:number])
end

def test_flows_t54
  r = spreadsheet.flows_t54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0279139524977032,r[:number])
end

def test_flows_u54
  r = spreadsheet.flows_u54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.692845238477029,r[:number])
end

def test_flows_v54
  r = spreadsheet.flows_v54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.402563081931533,r[:number])
end

def test_flows_w54
  r = spreadsheet.flows_w54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.158190817458818,r[:number])
end

def test_flows_x54
  r = spreadsheet.flows_x54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.96089275380401,r[:number])
end

def test_flows_y54
  r = spreadsheet.flows_y54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.811876531949348,r[:number])
end

def test_flows_z54
  r = spreadsheet.flows_z54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.712395650409537,r[:number])
end

def test_flows_aa54
  r = spreadsheet.flows_aa54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663752170256295,r[:number])
end

def test_flows_ab54
  r = spreadsheet.flows_ab54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.667299613344547,r[:number])
end

def test_flows_ad54
  r = spreadsheet.flows_ad54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae54
  r = spreadsheet.flows_ae54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af54
  r = spreadsheet.flows_af54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag54
  r = spreadsheet.flows_ag54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah54
  r = spreadsheet.flows_ah54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai54
  r = spreadsheet.flows_ai54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj54
  r = spreadsheet.flows_aj54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak54
  r = spreadsheet.flows_ak54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al54
  r = spreadsheet.flows_al54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am54
  r = spreadsheet.flows_am54
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c55
  r = spreadsheet.flows_c55
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 conversion",r[:string].force_encoding('utf-8'))
end

def test_flows_d55
  r = spreadsheet.flows_d55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e55
  r = spreadsheet.flows_e55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f55
  r = spreadsheet.flows_f55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g55
  r = spreadsheet.flows_g55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h55
  r = spreadsheet.flows_h55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i55
  r = spreadsheet.flows_i55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j55
  r = spreadsheet.flows_j55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k55
  r = spreadsheet.flows_k55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l55
  r = spreadsheet.flows_l55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m55
  r = spreadsheet.flows_m55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n55
  r = spreadsheet.flows_n55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r55
  r = spreadsheet.flows_r55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave",r[:string].force_encoding('utf-8'))
end

def test_flows_s55
  r = spreadsheet.flows_s55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_t55
  r = spreadsheet.flows_t55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_u55
  r = spreadsheet.flows_u55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030020547945205484,r[:number])
end

def test_flows_v55
  r = spreadsheet.flows_v55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1584417808219177,r[:number])
end

def test_flows_w55
  r = spreadsheet.flows_w55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_flows_x55
  r = spreadsheet.flows_x55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39610445205479383,r[:number])
end

def test_flows_y55
  r = spreadsheet.flows_y55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_z55
  r = spreadsheet.flows_z55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aa55
  r = spreadsheet.flows_aa55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ab55
  r = spreadsheet.flows_ab55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ad55
  r = spreadsheet.flows_ad55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae55
  r = spreadsheet.flows_ae55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af55
  r = spreadsheet.flows_af55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag55
  r = spreadsheet.flows_ag55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah55
  r = spreadsheet.flows_ah55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai55
  r = spreadsheet.flows_ai55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj55
  r = spreadsheet.flows_aj55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak55
  r = spreadsheet.flows_ak55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al55
  r = spreadsheet.flows_al55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am55
  r = spreadsheet.flows_am55
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c56
  r = spreadsheet.flows_c56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solar Thermal",r[:string].force_encoding('utf-8'))
end

def test_flows_d56
  r = spreadsheet.flows_d56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e56
  r = spreadsheet.flows_e56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f56
  r = spreadsheet.flows_f56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g56
  r = spreadsheet.flows_g56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h56
  r = spreadsheet.flows_h56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i56
  r = spreadsheet.flows_i56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j56
  r = spreadsheet.flows_j56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k56
  r = spreadsheet.flows_k56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l56
  r = spreadsheet.flows_l56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m56
  r = spreadsheet.flows_m56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n56
  r = spreadsheet.flows_n56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_r56
  r = spreadsheet.flows_r56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wind",r[:string].force_encoding('utf-8'))
end

def test_flows_s56
  r = spreadsheet.flows_s56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.962752417600001,r[:number])
end

def test_flows_t56
  r = spreadsheet.flows_t56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.440670099999998,r[:number])
end

def test_flows_u56
  r = spreadsheet.flows_u56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.3428701,r[:number])
end

def test_flows_v56
  r = spreadsheet.flows_v56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.35726511600001,r[:number])
end

def test_flows_w56
  r = spreadsheet.flows_w56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.69377964,r[:number])
end

def test_flows_x56
  r = spreadsheet.flows_x56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.16934531999999,r[:number])
end

def test_flows_y56
  r = spreadsheet.flows_y56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.302885319999994,r[:number])
end

def test_flows_z56
  r = spreadsheet.flows_z56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.209185319999996,r[:number])
end

def test_flows_aa56
  r = spreadsheet.flows_aa56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_flows_ab56
  r = spreadsheet.flows_ab56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08783531999999616,r[:number])
end

def test_flows_ad56
  r = spreadsheet.flows_ad56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ae56
  r = spreadsheet.flows_ae56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_af56
  r = spreadsheet.flows_af56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ag56
  r = spreadsheet.flows_ag56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ah56
  r = spreadsheet.flows_ah56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ai56
  r = spreadsheet.flows_ai56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_aj56
  r = spreadsheet.flows_aj56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_ak56
  r = spreadsheet.flows_ak56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_al56
  r = spreadsheet.flows_al56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_am56
  r = spreadsheet.flows_am56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c57
  r = spreadsheet.flows_c57
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2",r[:string].force_encoding('utf-8'))
end

def test_flows_d57
  r = spreadsheet.flows_d57
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e57
  r = spreadsheet.flows_e57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f57
  r = spreadsheet.flows_f57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g57
  r = spreadsheet.flows_g57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h57
  r = spreadsheet.flows_h57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i57
  r = spreadsheet.flows_i57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j57
  r = spreadsheet.flows_j57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k57
  r = spreadsheet.flows_k57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l57
  r = spreadsheet.flows_l57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m57
  r = spreadsheet.flows_m57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n57
  r = spreadsheet.flows_n57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c58
  r = spreadsheet.flows_c58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_flows_d58
  r = spreadsheet.flows_d58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e58
  r = spreadsheet.flows_e58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f58
  r = spreadsheet.flows_f58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g58
  r = spreadsheet.flows_g58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h58
  r = spreadsheet.flows_h58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i58
  r = spreadsheet.flows_i58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j58
  r = spreadsheet.flows_j58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k58
  r = spreadsheet.flows_k58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l58
  r = spreadsheet.flows_l58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m58
  r = spreadsheet.flows_m58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n58
  r = spreadsheet.flows_n58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c59
  r = spreadsheet.flows_c59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Pumped heat",r[:string].force_encoding('utf-8'))
end

def test_flows_d59
  r = spreadsheet.flows_d59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e59
  r = spreadsheet.flows_e59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f59
  r = spreadsheet.flows_f59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g59
  r = spreadsheet.flows_g59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h59
  r = spreadsheet.flows_h59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i59
  r = spreadsheet.flows_i59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j59
  r = spreadsheet.flows_j59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k59
  r = spreadsheet.flows_k59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l59
  r = spreadsheet.flows_l59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m59
  r = spreadsheet.flows_m59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n59
  r = spreadsheet.flows_n59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c60
  r = spreadsheet.flows_c60
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d60
  r = spreadsheet.flows_d60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e60
  r = spreadsheet.flows_e60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f60
  r = spreadsheet.flows_f60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g60
  r = spreadsheet.flows_g60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h60
  r = spreadsheet.flows_h60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i60
  r = spreadsheet.flows_i60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j60
  r = spreadsheet.flows_j60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k60
  r = spreadsheet.flows_k60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l60
  r = spreadsheet.flows_l60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m60
  r = spreadsheet.flows_m60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n60
  r = spreadsheet.flows_n60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c61
  r = spreadsheet.flows_c61
  assert_equal(:ExcelString,r[:type])
  assert_equal("CHP",r[:string].force_encoding('utf-8'))
end

def test_flows_d61
  r = spreadsheet.flows_d61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e61
  r = spreadsheet.flows_e61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f61
  r = spreadsheet.flows_f61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g61
  r = spreadsheet.flows_g61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h61
  r = spreadsheet.flows_h61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i61
  r = spreadsheet.flows_i61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j61
  r = spreadsheet.flows_j61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k61
  r = spreadsheet.flows_k61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l61
  r = spreadsheet.flows_l61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m61
  r = spreadsheet.flows_m61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n61
  r = spreadsheet.flows_n61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c62
  r = spreadsheet.flows_c62
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_d62
  r = spreadsheet.flows_d62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e62
  r = spreadsheet.flows_e62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f62
  r = spreadsheet.flows_f62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g62
  r = spreadsheet.flows_g62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h62
  r = spreadsheet.flows_h62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i62
  r = spreadsheet.flows_i62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j62
  r = spreadsheet.flows_j62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k62
  r = spreadsheet.flows_k62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l62
  r = spreadsheet.flows_l62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m62
  r = spreadsheet.flows_m62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n62
  r = spreadsheet.flows_n62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c63
  r = spreadsheet.flows_c63
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_d63
  r = spreadsheet.flows_d63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e63
  r = spreadsheet.flows_e63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f63
  r = spreadsheet.flows_f63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g63
  r = spreadsheet.flows_g63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h63
  r = spreadsheet.flows_h63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i63
  r = spreadsheet.flows_i63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j63
  r = spreadsheet.flows_j63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k63
  r = spreadsheet.flows_k63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l63
  r = spreadsheet.flows_l63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m63
  r = spreadsheet.flows_m63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n63
  r = spreadsheet.flows_n63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c64
  r = spreadsheet.flows_c64
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating",r[:string].force_encoding('utf-8'))
end

def test_flows_d64
  r = spreadsheet.flows_d64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e64
  r = spreadsheet.flows_e64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.813193136590819,r[:number])
end

def test_flows_f64
  r = spreadsheet.flows_f64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.042140030873806,r[:number])
end

def test_flows_g64
  r = spreadsheet.flows_g64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48727928745219,r[:number])
end

def test_flows_h64
  r = spreadsheet.flows_h64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.968747932095416,r[:number])
end

def test_flows_i64
  r = spreadsheet.flows_i64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.73757752705611,r[:number])
end

def test_flows_j64
  r = spreadsheet.flows_j64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.598323282621358,r[:number])
end

def test_flows_k64
  r = spreadsheet.flows_k64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.559114593882597,r[:number])
end

def test_flows_l64
  r = spreadsheet.flows_l64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.62952356526122,r[:number])
end

def test_flows_m64
  r = spreadsheet.flows_m64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.820617944313286,r[:number])
end

def test_flows_n64
  r = spreadsheet.flows_n64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.145046318256654,r[:number])
end

def test_flows_c65
  r = spreadsheet.flows_c65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d65
  r = spreadsheet.flows_d65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e65
  r = spreadsheet.flows_e65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.008546529888466,r[:number])
end

def test_flows_f65
  r = spreadsheet.flows_f65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.776774904604437,r[:number])
end

def test_flows_g65
  r = spreadsheet.flows_g65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.943250737912486,r[:number])
end

def test_flows_h65
  r = spreadsheet.flows_h65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.18933662099497,r[:number])
end

def test_flows_i65
  r = spreadsheet.flows_i65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.847057573486566,r[:number])
end

def test_flows_j65
  r = spreadsheet.flows_j65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.922473900258154,r[:number])
end

def test_flows_k65
  r = spreadsheet.flows_k65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.61889890941194,r[:number])
end

def test_flows_l65
  r = spreadsheet.flows_l65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.891185568066064,r[:number])
end

def test_flows_m65
  r = spreadsheet.flows_m65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.84879586918063,r[:number])
end

def test_flows_n65
  r = spreadsheet.flows_n65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.658172984497035,r[:number])
end

def test_flows_c66
  r = spreadsheet.flows_c66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d66
  r = spreadsheet.flows_d66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e66
  r = spreadsheet.flows_e66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.25680300224757,r[:number])
end

def test_flows_f66
  r = spreadsheet.flows_f66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.147942484875603,r[:number])
end

def test_flows_g66
  r = spreadsheet.flows_g66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.750153595975089,r[:number])
end

def test_flows_h66
  r = spreadsheet.flows_h66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.935261760116955,r[:number])
end

def test_flows_i66
  r = spreadsheet.flows_i66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.879384011776363,r[:number])
end

def test_flows_j66
  r = spreadsheet.flows_j66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.5797072356746025,r[:number])
end

def test_flows_k66
  r = spreadsheet.flows_k66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.91081821062347,r[:number])
end

def test_flows_l66
  r = spreadsheet.flows_l66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.105860802720359,r[:number])
end

def test_flows_m66
  r = spreadsheet.flows_m66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1447416140822204,r[:number])
end

def test_flows_n66
  r = spreadsheet.flows_n66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c67
  r = spreadsheet.flows_c67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d67
  r = spreadsheet.flows_d67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e67
  r = spreadsheet.flows_e67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.787029496861225,r[:number])
end

def test_flows_f67
  r = spreadsheet.flows_f67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.792484496744096,r[:number])
end

def test_flows_g67
  r = spreadsheet.flows_g67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.64189033865807,r[:number])
end

def test_flows_h67
  r = spreadsheet.flows_h67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911007970414175,r[:number])
end

def test_flows_i67
  r = spreadsheet.flows_i67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.963983598191172,r[:number])
end

def test_flows_j67
  r = spreadsheet.flows_j67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.798294118594747,r[:number])
end

def test_flows_k67
  r = spreadsheet.flows_k67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.301455508497339,r[:number])
end

def test_flows_l67
  r = spreadsheet.flows_l67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6825761838832083,r[:number])
end

def test_flows_m67
  r = spreadsheet.flows_m67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9236342311871462,r[:number])
end

def test_flows_n67
  r = spreadsheet.flows_n67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c68
  r = spreadsheet.flows_c68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d68
  r = spreadsheet.flows_d68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e68
  r = spreadsheet.flows_e68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324.47780687796825,r[:number])
end

def test_flows_f68
  r = spreadsheet.flows_f68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.8435737936154,r[:number])
end

def test_flows_g68
  r = spreadsheet.flows_g68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(382.96955209021405,r[:number])
end

def test_flows_h68
  r = spreadsheet.flows_h68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(408.4682642374902,r[:number])
end

def test_flows_i68
  r = spreadsheet.flows_i68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(433.28527096925444,r[:number])
end

def test_flows_j68
  r = spreadsheet.flows_j68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.22652053439543,r[:number])
end

def test_flows_k68
  r = spreadsheet.flows_k68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.098708854415,r[:number])
end

def test_flows_l68
  r = spreadsheet.flows_l68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(484.2897766694549,r[:number])
end

def test_flows_m68
  r = spreadsheet.flows_m68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500.17015397996613,r[:number])
end

def test_flows_n68
  r = spreadsheet.flows_n68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(517.9434690774432,r[:number])
end

def test_flows_c69
  r = spreadsheet.flows_c69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d69
  r = spreadsheet.flows_d69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e69
  r = spreadsheet.flows_e69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.551697890247862,r[:number])
end

def test_flows_f69
  r = spreadsheet.flows_f69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.40903797859884,r[:number])
end

def test_flows_g69
  r = spreadsheet.flows_g69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.16946485012258,r[:number])
end

def test_flows_h69
  r = spreadsheet.flows_h69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.74416002679409,r[:number])
end

def test_flows_i69
  r = spreadsheet.flows_i69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.59493963027826,r[:number])
end

def test_flows_j69
  r = spreadsheet.flows_j69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.73848109426944,r[:number])
end

def test_flows_k69
  r = spreadsheet.flows_k69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.186936739885184,r[:number])
end

def test_flows_l69
  r = spreadsheet.flows_l69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.947741102135936,r[:number])
end

def test_flows_m69
  r = spreadsheet.flows_m69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.02338938595468,r[:number])
end

def test_flows_n69
  r = spreadsheet.flows_n69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.41118473825011,r[:number])
end

def test_flows_c70
  r = spreadsheet.flows_c70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d70
  r = spreadsheet.flows_d70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e70
  r = spreadsheet.flows_e70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f70
  r = spreadsheet.flows_f70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g70
  r = spreadsheet.flows_g70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h70
  r = spreadsheet.flows_h70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i70
  r = spreadsheet.flows_i70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j70
  r = spreadsheet.flows_j70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k70
  r = spreadsheet.flows_k70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l70
  r = spreadsheet.flows_l70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m70
  r = spreadsheet.flows_m70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n70
  r = spreadsheet.flows_n70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c71
  r = spreadsheet.flows_c71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d71
  r = spreadsheet.flows_d71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e71
  r = spreadsheet.flows_e71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.080594910929866,r[:number])
end

def test_flows_f71
  r = spreadsheet.flows_f71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.35780277207328,r[:number])
end

def test_flows_g71
  r = spreadsheet.flows_g71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.360191566022753,r[:number])
end

def test_flows_h71
  r = spreadsheet.flows_h71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461869294155873,r[:number])
end

def test_flows_i71
  r = spreadsheet.flows_i71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.449265149552934,r[:number])
end

def test_flows_j71
  r = spreadsheet.flows_j71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.305083177741304,r[:number])
end

def test_flows_k71
  r = spreadsheet.flows_k71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0102346770537896,r[:number])
end

def test_flows_l71
  r = spreadsheet.flows_l71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5436576592917217,r[:number])
end

def test_flows_m71
  r = spreadsheet.flows_m71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.882119325014239,r[:number])
end

def test_flows_n71
  r = spreadsheet.flows_n71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c72
  r = spreadsheet.flows_c72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d72
  r = spreadsheet.flows_d72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Heating and cooling - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e72
  r = spreadsheet.flows_e72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.26235982624942,r[:number])
end

def test_flows_f72
  r = spreadsheet.flows_f72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.65151401584527,r[:number])
end

def test_flows_g72
  r = spreadsheet.flows_g72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.39821392838152,r[:number])
end

def test_flows_h72
  r = spreadsheet.flows_h72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.44410327375198,r[:number])
end

def test_flows_i72
  r = spreadsheet.flows_i72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.05380686191101,r[:number])
end

def test_flows_j72
  r = spreadsheet.flows_j72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.27784091104671,r[:number])
end

def test_flows_k72
  r = spreadsheet.flows_k72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.17110264565169,r[:number])
end

def test_flows_l72
  r = spreadsheet.flows_l72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.79324900623955,r[:number])
end

def test_flows_m72
  r = spreadsheet.flows_m72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.2091076031487,r[:number])
end

def test_flows_n72
  r = spreadsheet.flows_n72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.48912264058296,r[:number])
end

def test_flows_c73
  r = spreadsheet.flows_c73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d73
  r = spreadsheet.flows_d73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e73
  r = spreadsheet.flows_e73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.7250002380565,r[:number])
end

def test_flows_f73
  r = spreadsheet.flows_f73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.37770781750622,r[:number])
end

def test_flows_g73
  r = spreadsheet.flows_g73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.4785198583305,r[:number])
end

def test_flows_h73
  r = spreadsheet.flows_h73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.46434104552873,r[:number])
end

def test_flows_i73
  r = spreadsheet.flows_i73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.1641125929225,r[:number])
end

def test_flows_j73
  r = spreadsheet.flows_j73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.56743589111149,r[:number])
end

def test_flows_k73
  r = spreadsheet.flows_k73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.68001200867188,r[:number])
end

def test_flows_l73
  r = spreadsheet.flows_l73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.82343859522426,r[:number])
end

def test_flows_m73
  r = spreadsheet.flows_m73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.062380337744,r[:number])
end

def test_flows_n73
  r = spreadsheet.flows_n73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.40155946528074,r[:number])
end

def test_flows_c74
  r = spreadsheet.flows_c74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d74
  r = spreadsheet.flows_d74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - homes",r[:string].force_encoding('utf-8'))
end

def test_flows_e74
  r = spreadsheet.flows_e74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.015505937787601,r[:number])
end

def test_flows_f74
  r = spreadsheet.flows_f74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.015463096052056,r[:number])
end

def test_flows_g74
  r = spreadsheet.flows_g74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.015547173771019,r[:number])
end

def test_flows_h74
  r = spreadsheet.flows_h74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.01523302287851,r[:number])
end

def test_flows_i74
  r = spreadsheet.flows_i74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.014845995629367,r[:number])
end

def test_flows_j74
  r = spreadsheet.flows_j74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.014544549125949,r[:number])
end

def test_flows_k74
  r = spreadsheet.flows_k74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.031450005087287,r[:number])
end

def test_flows_l74
  r = spreadsheet.flows_l74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.032515956768702,r[:number])
end

def test_flows_m74
  r = spreadsheet.flows_m74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.033582049925556,r[:number])
end

def test_flows_n74
  r = spreadsheet.flows_n74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.034648284576637,r[:number])
end

def test_flows_c75
  r = spreadsheet.flows_c75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d75
  r = spreadsheet.flows_d75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e75
  r = spreadsheet.flows_e75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.6348790796996,r[:number])
end

def test_flows_f75
  r = spreadsheet.flows_f75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.0477408893982,r[:number])
end

def test_flows_g75
  r = spreadsheet.flows_g75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.15818753192958,r[:number])
end

def test_flows_h75
  r = spreadsheet.flows_h75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.34780373251103,r[:number])
end

def test_flows_i75
  r = spreadsheet.flows_i75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.61979665666068,r[:number])
end

def test_flows_j75
  r = spreadsheet.flows_j75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.97751212457892,r[:number])
end

def test_flows_k75
  r = spreadsheet.flows_k75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.42444092846185,r[:number])
end

def test_flows_l75
  r = spreadsheet.flows_l75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.96422544894558,r[:number])
end

def test_flows_m75
  r = spreadsheet.flows_m75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.6006665852183,r[:number])
end

def test_flows_n75
  r = spreadsheet.flows_n75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.33773101406193,r[:number])
end

def test_flows_c76
  r = spreadsheet.flows_c76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d76
  r = spreadsheet.flows_d76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Lighting & appliances - commercial",r[:string].force_encoding('utf-8'))
end

def test_flows_e76
  r = spreadsheet.flows_e76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.985416804102144,r[:number])
end

def test_flows_f76
  r = spreadsheet.flows_f76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.987057559146578,r[:number])
end

def test_flows_g76
  r = spreadsheet.flows_g76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.995265829540278,r[:number])
end

def test_flows_h76
  r = spreadsheet.flows_h76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.003481596904201,r[:number])
end

def test_flows_i76
  r = spreadsheet.flows_i76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.011704868085635,r[:number])
end

def test_flows_j76
  r = spreadsheet.flows_j76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.019935649938168,r[:number])
end

def test_flows_k76
  r = spreadsheet.flows_k76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.0281739493216,r[:number])
end

def test_flows_l76
  r = spreadsheet.flows_l76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.036419773102045,r[:number])
end

def test_flows_m76
  r = spreadsheet.flows_m76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.044673128151834,r[:number])
end

def test_flows_n76
  r = spreadsheet.flows_n76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.052934021349623,r[:number])
end

def test_flows_c77
  r = spreadsheet.flows_c77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d77
  r = spreadsheet.flows_d77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e77
  r = spreadsheet.flows_e77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.78056381550303,r[:number])
end

def test_flows_f77
  r = spreadsheet.flows_f77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.24923839406117,r[:number])
end

def test_flows_g77
  r = spreadsheet.flows_g77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.74762282341356,r[:number])
end

def test_flows_h77
  r = spreadsheet.flows_h77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.75533077883125,r[:number])
end

def test_flows_i77
  r = spreadsheet.flows_i77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(150.83933805648923,r[:number])
end

def test_flows_j77
  r = spreadsheet.flows_j77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.70769962861522,r[:number])
end

def test_flows_k77
  r = spreadsheet.flows_k77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.49271704246758,r[:number])
end

def test_flows_l77
  r = spreadsheet.flows_l77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.8296812621044,r[:number])
end

def test_flows_m77
  r = spreadsheet.flows_m77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.8798113026436,r[:number])
end

def test_flows_n77
  r = spreadsheet.flows_n77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.82619924019815,r[:number])
end

def test_flows_c78
  r = spreadsheet.flows_c78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d78
  r = spreadsheet.flows_d78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e78
  r = spreadsheet.flows_e78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.597961583125404,r[:number])
end

def test_flows_f78
  r = spreadsheet.flows_f78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.47800844568782,r[:number])
end

def test_flows_g78
  r = spreadsheet.flows_g78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.781827800934465,r[:number])
end

def test_flows_h78
  r = spreadsheet.flows_h78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.314578492079185,r[:number])
end

def test_flows_i78
  r = spreadsheet.flows_i78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.7502954297586,r[:number])
end

def test_flows_j78
  r = spreadsheet.flows_j78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.74457766148929,r[:number])
end

def test_flows_k78
  r = spreadsheet.flows_k78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.40888456083547,r[:number])
end

def test_flows_l78
  r = spreadsheet.flows_l78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.79327436447858,r[:number])
end

def test_flows_m78
  r = spreadsheet.flows_m78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.97920674138533,r[:number])
end

def test_flows_n78
  r = spreadsheet.flows_n78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.05754246808085,r[:number])
end

def test_flows_c79
  r = spreadsheet.flows_c79
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d79
  r = spreadsheet.flows_d79
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e79
  r = spreadsheet.flows_e79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.8897200213139,r[:number])
end

def test_flows_f79
  r = spreadsheet.flows_f79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.43350974057122,r[:number])
end

def test_flows_g79
  r = spreadsheet.flows_g79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.60026862265818,r[:number])
end

def test_flows_h79
  r = spreadsheet.flows_h79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.2999647626889,r[:number])
end

def test_flows_i79
  r = spreadsheet.flows_i79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.4089907434262,r[:number])
end

def test_flows_j79
  r = spreadsheet.flows_j79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.84598421967303,r[:number])
end

def test_flows_k79
  r = spreadsheet.flows_k79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.60536738592913,r[:number])
end

def test_flows_l79
  r = spreadsheet.flows_l79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.7162778872345,r[:number])
end

def test_flows_m79
  r = spreadsheet.flows_m79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.2385820886497,r[:number])
end

def test_flows_n79
  r = spreadsheet.flows_n79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199.2602411701368,r[:number])
end

def test_flows_c80
  r = spreadsheet.flows_c80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d80
  r = spreadsheet.flows_d80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_flows_e80
  r = spreadsheet.flows_e80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.87688137738803,r[:number])
end

def test_flows_f80
  r = spreadsheet.flows_f80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.4929840660362,r[:number])
end

def test_flows_g80
  r = spreadsheet.flows_g80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.20798494828864,r[:number])
end

def test_flows_h80
  r = spreadsheet.flows_h80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.26401889321662,r[:number])
end

def test_flows_i80
  r = spreadsheet.flows_i80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.65422471317268,r[:number])
end

def test_flows_j80
  r = spreadsheet.flows_j80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.30770299739305,r[:number])
end

def test_flows_k80
  r = spreadsheet.flows_k80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(241.11125158365778,r[:number])
end

def test_flows_l80
  r = spreadsheet.flows_l80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.91956943805434,r[:number])
end

def test_flows_m80
  r = spreadsheet.flows_m80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(277.72504090523944,r[:number])
end

def test_flows_n80
  r = spreadsheet.flows_n80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.59831850003326,r[:number])
end

def test_flows_c81
  r = spreadsheet.flows_c81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d81
  r = spreadsheet.flows_d81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e81
  r = spreadsheet.flows_e81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.172844,r[:number])
end

def test_flows_f81
  r = spreadsheet.flows_f81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.259002503628829,r[:number])
end

def test_flows_g81
  r = spreadsheet.flows_g81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.285606783827001,r[:number])
end

def test_flows_h81
  r = spreadsheet.flows_h81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.312393687431538,r[:number])
end

def test_flows_i81
  r = spreadsheet.flows_i81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.339365249637551,r[:number])
end

def test_flows_j81
  r = spreadsheet.flows_j81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.366523528320811,r[:number])
end

def test_flows_k81
  r = spreadsheet.flows_k81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.3938706042905045,r[:number])
end

def test_flows_l81
  r = spreadsheet.flows_l81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.421408581544809,r[:number])
end

def test_flows_m81
  r = spreadsheet.flows_m81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.449139587529321,r[:number])
end

def test_flows_n81
  r = spreadsheet.flows_n81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.47706577339835,r[:number])
end

def test_flows_c82
  r = spreadsheet.flows_c82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Solid",r[:string].force_encoding('utf-8'))
end

def test_flows_d82
  r = spreadsheet.flows_d82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e82
  r = spreadsheet.flows_e82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8345688,r[:number])
end

def test_flows_f82
  r = spreadsheet.flows_f82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8518005007257657,r[:number])
end

def test_flows_g82
  r = spreadsheet.flows_g82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8571213567654001,r[:number])
end

def test_flows_h82
  r = spreadsheet.flows_h82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8624787374863075,r[:number])
end

def test_flows_i82
  r = spreadsheet.flows_i82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8678730499275102,r[:number])
end

def test_flows_j82
  r = spreadsheet.flows_j82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8733047056641621,r[:number])
end

def test_flows_k82
  r = spreadsheet.flows_k82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8787741208581008,r[:number])
end

def test_flows_l82
  r = spreadsheet.flows_l82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8842817163089618,r[:number])
end

def test_flows_m82
  r = spreadsheet.flows_m82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8898279175058642,r[:number])
end

def test_flows_n82
  r = spreadsheet.flows_n82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.89541315467967,r[:number])
end

def test_flows_c83
  r = spreadsheet.flows_c83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d83
  r = spreadsheet.flows_d83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e83
  r = spreadsheet.flows_e83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4425963,r[:number])
end

def test_flows_f83
  r = spreadsheet.flows_f83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.513677065493784,r[:number])
end

def test_flows_g83
  r = spreadsheet.flows_g83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5356255966572756,r[:number])
end

def test_flows_h83
  r = spreadsheet.flows_h83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.557724792131019,r[:number])
end

def test_flows_i83
  r = spreadsheet.flows_i83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.57997633095098,r[:number])
end

def test_flows_j83
  r = spreadsheet.flows_j83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.602381910864669,r[:number])
end

def test_flows_k83
  r = spreadsheet.flows_k83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6249432485396658,r[:number])
end

def test_flows_l83
  r = spreadsheet.flows_l83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6476620797744674,r[:number])
end

def test_flows_m83
  r = spreadsheet.flows_m83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.67054015971169,r[:number])
end

def test_flows_n83
  r = spreadsheet.flows_n83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6935792630536386,r[:number])
end

def test_flows_c84
  r = spreadsheet.flows_c84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d84
  r = spreadsheet.flows_d84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture",r[:string].force_encoding('utf-8'))
end

def test_flows_e84
  r = spreadsheet.flows_e84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9821009,r[:number])
end

def test_flows_f84
  r = spreadsheet.flows_f84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.023026189223694,r[:number])
end

def test_flows_g84
  r = spreadsheet.flows_g84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0356632223178255,r[:number])
end

def test_flows_h84
  r = spreadsheet.flows_h84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0483870015299805,r[:number])
end

def test_flows_i84
  r = spreadsheet.flows_i84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.061198493577837,r[:number])
end

def test_flows_j84
  r = spreadsheet.flows_j84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.074098675952385,r[:number])
end

def test_flows_k84
  r = spreadsheet.flows_k84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0870885370379892,r[:number])
end

def test_flows_l84
  r = spreadsheet.flows_l84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1001690762337843,r[:number])
end

def test_flows_m84
  r = spreadsheet.flows_m84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1133413040764273,r[:number])
end

def test_flows_n84
  r = spreadsheet.flows_n84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.126606242364216,r[:number])
end

def test_flows_c85
  r = spreadsheet.flows_c85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d85
  r = spreadsheet.flows_d85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e85
  r = spreadsheet.flows_e85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f85
  r = spreadsheet.flows_f85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g85
  r = spreadsheet.flows_g85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.26431802315687997,r[:number])
end

def test_flows_h85
  r = spreadsheet.flows_h85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.538634783704799,r[:number])
end

def test_flows_i85
  r = spreadsheet.flows_i85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7896366056892323,r[:number])
end

def test_flows_j85
  r = spreadsheet.flows_j85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.920208328489396,r[:number])
end

def test_flows_k85
  r = spreadsheet.flows_k85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.234926083203689,r[:number])
end

def test_flows_l85
  r = spreadsheet.flows_l85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.532878505267737,r[:number])
end

def test_flows_m85
  r = spreadsheet.flows_m85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.578110391060045,r[:number])
end

def test_flows_n85
  r = spreadsheet.flows_n85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.84226019889534,r[:number])
end

def test_flows_c86
  r = spreadsheet.flows_c86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d86
  r = spreadsheet.flows_d86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Road transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e86
  r = spreadsheet.flows_e86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.85404977847907,r[:number])
end

def test_flows_f86
  r = spreadsheet.flows_f86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.2870297257891,r[:number])
end

def test_flows_g86
  r = spreadsheet.flows_g86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(444.83331187932316,r[:number])
end

def test_flows_h86
  r = spreadsheet.flows_h86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(423.86753335877745,r[:number])
end

def test_flows_i86
  r = spreadsheet.flows_i86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(389.6077923734505,r[:number])
end

def test_flows_j86
  r = spreadsheet.flows_j86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(351.19825504451387,r[:number])
end

def test_flows_k86
  r = spreadsheet.flows_k86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(343.63123976921185,r[:number])
end

def test_flows_l86
  r = spreadsheet.flows_l86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(333.64240878897294,r[:number])
end

def test_flows_m86
  r = spreadsheet.flows_m86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(328.0204658772889,r[:number])
end

def test_flows_n86
  r = spreadsheet.flows_n86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.0183306963002,r[:number])
end

def test_flows_c87
  r = spreadsheet.flows_c87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d87
  r = spreadsheet.flows_d87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e87
  r = spreadsheet.flows_e87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.681592457134547,r[:number])
end

def test_flows_f87
  r = spreadsheet.flows_f87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.184036113841765,r[:number])
end

def test_flows_g87
  r = spreadsheet.flows_g87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.985518411388399,r[:number])
end

def test_flows_h87
  r = spreadsheet.flows_h87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.898790628857575,r[:number])
end

def test_flows_i87
  r = spreadsheet.flows_i87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.786017018951624,r[:number])
end

def test_flows_j87
  r = spreadsheet.flows_j87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.639806007674586,r[:number])
end

def test_flows_k87
  r = spreadsheet.flows_k87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.483408181817141,r[:number])
end

def test_flows_l87
  r = spreadsheet.flows_l87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.301431686970098,r[:number])
end

def test_flows_m87
  r = spreadsheet.flows_m87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.119941726481715,r[:number])
end

def test_flows_n87
  r = spreadsheet.flows_n87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.940004427716452,r[:number])
end

def test_flows_c88
  r = spreadsheet.flows_c88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d88
  r = spreadsheet.flows_d88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail transport",r[:string].force_encoding('utf-8'))
end

def test_flows_e88
  r = spreadsheet.flows_e88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.1708543458911045,r[:number])
end

def test_flows_f88
  r = spreadsheet.flows_f88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.540451289491472,r[:number])
end

def test_flows_g88
  r = spreadsheet.flows_g88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.197930428742039,r[:number])
end

def test_flows_h88
  r = spreadsheet.flows_h88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.065154710135289,r[:number])
end

def test_flows_i88
  r = spreadsheet.flows_i88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.882304525927452,r[:number])
end

def test_flows_j88
  r = spreadsheet.flows_j88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.638272423268507,r[:number])
end

def test_flows_k88
  r = spreadsheet.flows_k88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.377036330602296,r[:number])
end

def test_flows_l88
  r = spreadsheet.flows_l88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.07345542609638,r[:number])
end

def test_flows_m88
  r = spreadsheet.flows_m88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.7745445246350595,r[:number])
end

def test_flows_n88
  r = spreadsheet.flows_n88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.482590653758216,r[:number])
end

def test_flows_c89
  r = spreadsheet.flows_c89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d89
  r = spreadsheet.flows_d89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_e89
  r = spreadsheet.flows_e89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.019834608709552,r[:number])
end

def test_flows_f89
  r = spreadsheet.flows_f89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.551097329516901,r[:number])
end

def test_flows_g89
  r = spreadsheet.flows_g89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.163716423089292,r[:number])
end

def test_flows_h89
  r = spreadsheet.flows_h89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.078742052970153,r[:number])
end

def test_flows_i89
  r = spreadsheet.flows_i89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.927979753386868,r[:number])
end

def test_flows_j89
  r = spreadsheet.flows_j89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.657847240047854,r[:number])
end

def test_flows_k89
  r = spreadsheet.flows_k89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.331077116581312,r[:number])
end

def test_flows_l89
  r = spreadsheet.flows_l89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.860251279239513,r[:number])
end

def test_flows_m89
  r = spreadsheet.flows_m89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.344409418627478,r[:number])
end

def test_flows_n89
  r = spreadsheet.flows_n89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.785449092646568,r[:number])
end

def test_flows_c90
  r = spreadsheet.flows_c90
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d90
  r = spreadsheet.flows_d90
  assert_equal(:ExcelString,r[:type])
  assert_equal("National navigation",r[:string].force_encoding('utf-8'))
end

def test_flows_e90
  r = spreadsheet.flows_e90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.817339999999998,r[:number])
end

def test_flows_f90
  r = spreadsheet.flows_f90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.572895707388618,r[:number])
end

def test_flows_g90
  r = spreadsheet.flows_g90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.383064556311584,r[:number])
end

def test_flows_h90
  r = spreadsheet.flows_h90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.58984378892685,r[:number])
end

def test_flows_i90
  r = spreadsheet.flows_i90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.99670495670838,r[:number])
end

def test_flows_j90
  r = spreadsheet.flows_j90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.688791719453825,r[:number])
end

def test_flows_k90
  r = spreadsheet.flows_k90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.384829464713203,r[:number])
end

def test_flows_l90
  r = spreadsheet.flows_l90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.084767495533725,r[:number])
end

def test_flows_m90
  r = spreadsheet.flows_m90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.788555765479813,r[:number])
end

def test_flows_n90
  r = spreadsheet.flows_n90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.49614487028552,r[:number])
end

def test_flows_c91
  r = spreadsheet.flows_c91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d91
  r = spreadsheet.flows_d91
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_flows_e91
  r = spreadsheet.flows_e91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.8,r[:number])
end

def test_flows_f91
  r = spreadsheet.flows_f91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.0236041697801,r[:number])
end

def test_flows_g91
  r = spreadsheet.flows_g91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.92775040162394,r[:number])
end

def test_flows_h91
  r = spreadsheet.flows_h91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.72464692710642,r[:number])
end

def test_flows_i91
  r = spreadsheet.flows_i91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.5797951758127,r[:number])
end

def test_flows_j91
  r = spreadsheet.flows_j91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.72784123896676,r[:number])
end

def test_flows_k91
  r = spreadsheet.flows_k91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.58889075870331,r[:number])
end

def test_flows_l91
  r = spreadsheet.flows_l91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.9306323392334,r[:number])
end

def test_flows_m91
  r = spreadsheet.flows_m91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.4187558423291,r[:number])
end

def test_flows_n91
  r = spreadsheet.flows_n91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.58168305622323,r[:number])
end

def test_flows_c92
  r = spreadsheet.flows_c92
  assert_equal(:ExcelString,r[:type])
  assert_equal("Liquid",r[:string].force_encoding('utf-8'))
end

def test_flows_d92
  r = spreadsheet.flows_d92
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping",r[:string].force_encoding('utf-8'))
end

def test_flows_e92
  r = spreadsheet.flows_e92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.1581570872572,r[:number])
end

def test_flows_f92
  r = spreadsheet.flows_f92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.28499215184298,r[:number])
end

def test_flows_g92
  r = spreadsheet.flows_g92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.90268134716652,r[:number])
end

def test_flows_h92
  r = spreadsheet.flows_h92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.07127280693672,r[:number])
end

def test_flows_i92
  r = spreadsheet.flows_i92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.70040745020478,r[:number])
end

def test_flows_j92
  r = spreadsheet.flows_j92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.17220349292045,r[:number])
end

def test_flows_k92
  r = spreadsheet.flows_k92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.57973547988082,r[:number])
end

def test_flows_l92
  r = spreadsheet.flows_l92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.02635832578606,r[:number])
end

def test_flows_m92
  r = spreadsheet.flows_m92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.62684281373198,r[:number])
end

def test_flows_n92
  r = spreadsheet.flows_n92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.50863651300597,r[:number])
end

def test_flows_c93
  r = spreadsheet.flows_c93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid",r[:string].force_encoding('utf-8'))
end

def test_flows_d93
  r = spreadsheet.flows_d93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_flows_e93
  r = spreadsheet.flows_e93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_f93
  r = spreadsheet.flows_f93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_g93
  r = spreadsheet.flows_g93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_h93
  r = spreadsheet.flows_h93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_i93
  r = spreadsheet.flows_i93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_j93
  r = spreadsheet.flows_j93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_k93
  r = spreadsheet.flows_k93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_l93
  r = spreadsheet.flows_l93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_m93
  r = spreadsheet.flows_m93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_n93
  r = spreadsheet.flows_n93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_flows_c94
  r = spreadsheet.flows_c94
  assert_equal(:ExcelString,r[:type])
  assert_equal("Gas",r[:string].force_encoding('utf-8'))
end

def test_flows_d94
  r = spreadsheet.flows_d94
  assert_equal(:ExcelString,r[:type])
  assert_equal("Losses",r[:string].force_encoding('utf-8'))
end

def test_flows_e94
  r = spreadsheet.flows_e94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144346489824967,r[:number])
end

def test_flows_f94
  r = spreadsheet.flows_f94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.410354584474698,r[:number])
end

def test_flows_g94
  r = spreadsheet.flows_g94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.307536978329129,r[:number])
end

def test_flows_h94
  r = spreadsheet.flows_h94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.703822237592723,r[:number])
end

def test_flows_i94
  r = spreadsheet.flows_i94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.828150184565732,r[:number])
end

def test_flows_j94
  r = spreadsheet.flows_j94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.94755809508597,r[:number])
end

def test_flows_k94
  r = spreadsheet.flows_k94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.693815937929163,r[:number])
end

def test_flows_l94
  r = spreadsheet.flows_l94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.205622886166175,r[:number])
end

def test_flows_m94
  r = spreadsheet.flows_m94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.774443642605604,r[:number])
end

def test_flows_n94
  r = spreadsheet.flows_n94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.116152691100137,r[:number])
end


  # start of CostPerCapita
def test_costpercapita_b1
  r = spreadsheet.costpercapita_b1
  assert_equal(:ExcelString,r[:type])
  assert_equal("£/Capita/yr",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e1
  r = spreadsheet.costpercapita_e1
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f1
  r = spreadsheet.costpercapita_f1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o1
  r = spreadsheet.costpercapita_o1
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p1
  r = spreadsheet.costpercapita_p1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y1
  r = spreadsheet.costpercapita_y1
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z1
  r = spreadsheet.costpercapita_z1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai1
  r = spreadsheet.costpercapita_ai1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as1
  r = spreadsheet.costpercapita_as1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av1
  r = spreadsheet.costpercapita_av1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay1
  r = spreadsheet.costpercapita_ay1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi1
  r = spreadsheet.costpercapita_bi1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs1
  r = spreadsheet.costpercapita_bs1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc1
  r = spreadsheet.costpercapita_cc1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf1
  r = spreadsheet.costpercapita_cf1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp1
  r = spreadsheet.costpercapita_cp1
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a2
  r = spreadsheet.costpercapita_a2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Code",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b2
  r = spreadsheet.costpercapita_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Description",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c2
  r = spreadsheet.costpercapita_c2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e2
  r = spreadsheet.costpercapita_e2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f2
  r = spreadsheet.costpercapita_f2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g2
  r = spreadsheet.costpercapita_g2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h2
  r = spreadsheet.costpercapita_h2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i2
  r = spreadsheet.costpercapita_i2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j2
  r = spreadsheet.costpercapita_j2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k2
  r = spreadsheet.costpercapita_k2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l2
  r = spreadsheet.costpercapita_l2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m2
  r = spreadsheet.costpercapita_m2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o2
  r = spreadsheet.costpercapita_o2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p2
  r = spreadsheet.costpercapita_p2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q2
  r = spreadsheet.costpercapita_q2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r2
  r = spreadsheet.costpercapita_r2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s2
  r = spreadsheet.costpercapita_s2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t2
  r = spreadsheet.costpercapita_t2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u2
  r = spreadsheet.costpercapita_u2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v2
  r = spreadsheet.costpercapita_v2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w2
  r = spreadsheet.costpercapita_w2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y2
  r = spreadsheet.costpercapita_y2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z2
  r = spreadsheet.costpercapita_z2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa2
  r = spreadsheet.costpercapita_aa2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab2
  r = spreadsheet.costpercapita_ab2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac2
  r = spreadsheet.costpercapita_ac2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad2
  r = spreadsheet.costpercapita_ad2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae2
  r = spreadsheet.costpercapita_ae2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af2
  r = spreadsheet.costpercapita_af2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag2
  r = spreadsheet.costpercapita_ag2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai2
  r = spreadsheet.costpercapita_ai2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj2
  r = spreadsheet.costpercapita_aj2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak2
  r = spreadsheet.costpercapita_ak2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al2
  r = spreadsheet.costpercapita_al2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am2
  r = spreadsheet.costpercapita_am2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an2
  r = spreadsheet.costpercapita_an2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao2
  r = spreadsheet.costpercapita_ao2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap2
  r = spreadsheet.costpercapita_ap2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq2
  r = spreadsheet.costpercapita_aq2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as2
  r = spreadsheet.costpercapita_as2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at2
  r = spreadsheet.costpercapita_at2
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av2
  r = spreadsheet.costpercapita_av2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw2
  r = spreadsheet.costpercapita_aw2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay2
  r = spreadsheet.costpercapita_ay2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_az2
  r = spreadsheet.costpercapita_az2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_ba2
  r = spreadsheet.costpercapita_ba2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bb2
  r = spreadsheet.costpercapita_bb2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bc2
  r = spreadsheet.costpercapita_bc2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bd2
  r = spreadsheet.costpercapita_bd2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_be2
  r = spreadsheet.costpercapita_be2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bf2
  r = spreadsheet.costpercapita_bf2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bg2
  r = spreadsheet.costpercapita_bg2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bi2
  r = spreadsheet.costpercapita_bi2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_bj2
  r = spreadsheet.costpercapita_bj2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_bk2
  r = spreadsheet.costpercapita_bk2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bl2
  r = spreadsheet.costpercapita_bl2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bm2
  r = spreadsheet.costpercapita_bm2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bn2
  r = spreadsheet.costpercapita_bn2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_bo2
  r = spreadsheet.costpercapita_bo2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bp2
  r = spreadsheet.costpercapita_bp2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bq2
  r = spreadsheet.costpercapita_bq2
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bs2
  r = spreadsheet.costpercapita_bs2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt2
  r = spreadsheet.costpercapita_bt2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu2
  r = spreadsheet.costpercapita_bu2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv2
  r = spreadsheet.costpercapita_bv2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw2
  r = spreadsheet.costpercapita_bw2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx2
  r = spreadsheet.costpercapita_bx2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by2
  r = spreadsheet.costpercapita_by2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz2
  r = spreadsheet.costpercapita_bz2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca2
  r = spreadsheet.costpercapita_ca2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc2
  r = spreadsheet.costpercapita_cc2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd2
  r = spreadsheet.costpercapita_cd2
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf2
  r = spreadsheet.costpercapita_cf2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg2
  r = spreadsheet.costpercapita_cg2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch2
  r = spreadsheet.costpercapita_ch2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci2
  r = spreadsheet.costpercapita_ci2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj2
  r = spreadsheet.costpercapita_cj2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck2
  r = spreadsheet.costpercapita_ck2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl2
  r = spreadsheet.costpercapita_cl2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm2
  r = spreadsheet.costpercapita_cm2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn2
  r = spreadsheet.costpercapita_cn2
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp2
  r = spreadsheet.costpercapita_cp2
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq2
  r = spreadsheet.costpercapita_cq2
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a3
  r = spreadsheet.costpercapita_a3
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b3
  r = spreadsheet.costpercapita_b3
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional thermal plant",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c3
  r = spreadsheet.costpercapita_c3
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e3
  r = spreadsheet.costpercapita_e3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.532268460561132,r[:number])
end

def test_costpercapita_f3
  r = spreadsheet.costpercapita_f3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.26638787729745,r[:number])
end

def test_costpercapita_g3
  r = spreadsheet.costpercapita_g3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.601934183161497,r[:number])
end

def test_costpercapita_h3
  r = spreadsheet.costpercapita_h3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.90834547121747,r[:number])
end

def test_costpercapita_i3
  r = spreadsheet.costpercapita_i3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.88053283244465,r[:number])
end

def test_costpercapita_j3
  r = spreadsheet.costpercapita_j3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.61723009338241,r[:number])
end

def test_costpercapita_k3
  r = spreadsheet.costpercapita_k3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.503201488634865,r[:number])
end

def test_costpercapita_l3
  r = spreadsheet.costpercapita_l3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.3804708665413,r[:number])
end

def test_costpercapita_m3
  r = spreadsheet.costpercapita_m3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.846238835480285,r[:number])
end

def test_costpercapita_o3
  r = spreadsheet.costpercapita_o3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.12171366595489,r[:number])
end

def test_costpercapita_p3
  r = spreadsheet.costpercapita_p3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.19177229594196,r[:number])
end

def test_costpercapita_q3
  r = spreadsheet.costpercapita_q3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.26059566091301,r[:number])
end

def test_costpercapita_r3
  r = spreadsheet.costpercapita_r3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.592086550123838,r[:number])
end

def test_costpercapita_s3
  r = spreadsheet.costpercapita_s3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.412527734765757,r[:number])
end

def test_costpercapita_t3
  r = spreadsheet.costpercapita_t3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.59043053721708,r[:number])
end

def test_costpercapita_u3
  r = spreadsheet.costpercapita_u3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.696208381824903,r[:number])
end

def test_costpercapita_v3
  r = spreadsheet.costpercapita_v3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.769522194515375,r[:number])
end

def test_costpercapita_w3
  r = spreadsheet.costpercapita_w3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.424807024755985,r[:number])
end

def test_costpercapita_y3
  r = spreadsheet.costpercapita_y3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z3
  r = spreadsheet.costpercapita_z3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa3
  r = spreadsheet.costpercapita_aa3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab3
  r = spreadsheet.costpercapita_ab3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac3
  r = spreadsheet.costpercapita_ac3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad3
  r = spreadsheet.costpercapita_ad3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae3
  r = spreadsheet.costpercapita_ae3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af3
  r = spreadsheet.costpercapita_af3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag3
  r = spreadsheet.costpercapita_ag3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai3
  r = spreadsheet.costpercapita_ai3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.65398212651602,r[:number])
end

def test_costpercapita_aj3
  r = spreadsheet.costpercapita_aj3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.458160173239406,r[:number])
end

def test_costpercapita_ak3
  r = spreadsheet.costpercapita_ak3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.8625298440745,r[:number])
end

def test_costpercapita_al3
  r = spreadsheet.costpercapita_al3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.50043202134131,r[:number])
end

def test_costpercapita_am3
  r = spreadsheet.costpercapita_am3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.29306056721041,r[:number])
end

def test_costpercapita_an3
  r = spreadsheet.costpercapita_an3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.20766063059949,r[:number])
end

def test_costpercapita_ao3
  r = spreadsheet.costpercapita_ao3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.19940987045977,r[:number])
end

def test_costpercapita_ap3
  r = spreadsheet.costpercapita_ap3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.149993061056676,r[:number])
end

def test_costpercapita_aq3
  r = spreadsheet.costpercapita_aq3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.27104586023627,r[:number])
end

def test_costpercapita_as3
  r = spreadsheet.costpercapita_as3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.28847490608154,r[:number])
end

def test_costpercapita_at3
  r = spreadsheet.costpercapita_at3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(955.2331925758431,r[:number])
end

def test_costpercapita_av3
  r = spreadsheet.costpercapita_av3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw3
  r = spreadsheet.costpercapita_aw3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay3
  r = spreadsheet.costpercapita_ay3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7193610763366785,r[:number])
end

def test_costpercapita_az3
  r = spreadsheet.costpercapita_az3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.26638787729745,r[:number])
end

def test_costpercapita_ba3
  r = spreadsheet.costpercapita_ba3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.601934183161497,r[:number])
end

def test_costpercapita_bb3
  r = spreadsheet.costpercapita_bb3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.90834547121747,r[:number])
end

def test_costpercapita_bc3
  r = spreadsheet.costpercapita_bc3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.88053283244465,r[:number])
end

def test_costpercapita_bd3
  r = spreadsheet.costpercapita_bd3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.61723009338241,r[:number])
end

def test_costpercapita_be3
  r = spreadsheet.costpercapita_be3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.503201488634865,r[:number])
end

def test_costpercapita_bf3
  r = spreadsheet.costpercapita_bf3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.3804708665413,r[:number])
end

def test_costpercapita_bg3
  r = spreadsheet.costpercapita_bg3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.846238835480285,r[:number])
end

def test_costpercapita_bi3
  r = spreadsheet.costpercapita_bi3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7193610763366785,r[:number])
end

def test_costpercapita_bj3
  r = spreadsheet.costpercapita_bj3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.26638787729745,r[:number])
end

def test_costpercapita_bk3
  r = spreadsheet.costpercapita_bk3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.601934183161497,r[:number])
end

def test_costpercapita_bl3
  r = spreadsheet.costpercapita_bl3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.90834547121747,r[:number])
end

def test_costpercapita_bm3
  r = spreadsheet.costpercapita_bm3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.88053283244465,r[:number])
end

def test_costpercapita_bn3
  r = spreadsheet.costpercapita_bn3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.61723009338241,r[:number])
end

def test_costpercapita_bo3
  r = spreadsheet.costpercapita_bo3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.503201488634865,r[:number])
end

def test_costpercapita_bp3
  r = spreadsheet.costpercapita_bp3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.3804708665413,r[:number])
end

def test_costpercapita_bq3
  r = spreadsheet.costpercapita_bq3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.846238835480285,r[:number])
end

def test_costpercapita_bs3
  r = spreadsheet.costpercapita_bs3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.841074742291568,r[:number])
end

def test_costpercapita_bt3
  r = spreadsheet.costpercapita_bt3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.458160173239406,r[:number])
end

def test_costpercapita_bu3
  r = spreadsheet.costpercapita_bu3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.8625298440745,r[:number])
end

def test_costpercapita_bv3
  r = spreadsheet.costpercapita_bv3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.50043202134131,r[:number])
end

def test_costpercapita_bw3
  r = spreadsheet.costpercapita_bw3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.29306056721041,r[:number])
end

def test_costpercapita_bx3
  r = spreadsheet.costpercapita_bx3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.20766063059949,r[:number])
end

def test_costpercapita_by3
  r = spreadsheet.costpercapita_by3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.19940987045977,r[:number])
end

def test_costpercapita_bz3
  r = spreadsheet.costpercapita_bz3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.149993061056676,r[:number])
end

def test_costpercapita_ca3
  r = spreadsheet.costpercapita_ca3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.27104586023627,r[:number])
end

def test_costpercapita_cc3
  r = spreadsheet.costpercapita_cc3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.087040752278824,r[:number])
end

def test_costpercapita_cd3
  r = spreadsheet.costpercapita_cd3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(953.4202851916186,r[:number])
end

def test_costpercapita_cf3
  r = spreadsheet.costpercapita_cf3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8129073842244527,r[:number])
end

def test_costpercapita_cg3
  r = spreadsheet.costpercapita_cg3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch3
  r = spreadsheet.costpercapita_ch3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci3
  r = spreadsheet.costpercapita_ci3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj3
  r = spreadsheet.costpercapita_cj3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck3
  r = spreadsheet.costpercapita_ck3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl3
  r = spreadsheet.costpercapita_cl3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm3
  r = spreadsheet.costpercapita_cm3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn3
  r = spreadsheet.costpercapita_cn3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp3
  r = spreadsheet.costpercapita_cp3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.20143415380271698,r[:number])
end

def test_costpercapita_cq3
  r = spreadsheet.costpercapita_cq3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8129073842244527,r[:number])
end

def test_costpercapita_cr3
  r = spreadsheet.costpercapita_cr3
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a4
  r = spreadsheet.costpercapita_a4
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b4
  r = spreadsheet.costpercapita_b4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Combustion + CCS",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c4
  r = spreadsheet.costpercapita_c4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e4
  r = spreadsheet.costpercapita_e4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f4
  r = spreadsheet.costpercapita_f4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1002490109591307,r[:number])
end

def test_costpercapita_g4
  r = spreadsheet.costpercapita_g4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9332713006871327,r[:number])
end

def test_costpercapita_h4
  r = spreadsheet.costpercapita_h4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.256914816895382e-16,r[:number])
end

def test_costpercapita_i4
  r = spreadsheet.costpercapita_i4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j4
  r = spreadsheet.costpercapita_j4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k4
  r = spreadsheet.costpercapita_k4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l4
  r = spreadsheet.costpercapita_l4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m4
  r = spreadsheet.costpercapita_m4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o4
  r = spreadsheet.costpercapita_o4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p4
  r = spreadsheet.costpercapita_p4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2710424859718418,r[:number])
end

def test_costpercapita_q4
  r = spreadsheet.costpercapita_q4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5192270185897404,r[:number])
end

def test_costpercapita_r4
  r = spreadsheet.costpercapita_r4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.45886575842905813,r[:number])
end

def test_costpercapita_s4
  r = spreadsheet.costpercapita_s4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.44632947565808306,r[:number])
end

def test_costpercapita_t4
  r = spreadsheet.costpercapita_t4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4358158742957596,r[:number])
end

def test_costpercapita_u4
  r = spreadsheet.costpercapita_u4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42652149662249816,r[:number])
end

def test_costpercapita_v4
  r = spreadsheet.costpercapita_v4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41801327764104834,r[:number])
end

def test_costpercapita_w4
  r = spreadsheet.costpercapita_w4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41021242453214596,r[:number])
end

def test_costpercapita_y4
  r = spreadsheet.costpercapita_y4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z4
  r = spreadsheet.costpercapita_z4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa4
  r = spreadsheet.costpercapita_aa4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab4
  r = spreadsheet.costpercapita_ab4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac4
  r = spreadsheet.costpercapita_ac4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad4
  r = spreadsheet.costpercapita_ad4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae4
  r = spreadsheet.costpercapita_ae4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af4
  r = spreadsheet.costpercapita_af4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag4
  r = spreadsheet.costpercapita_ag4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai4
  r = spreadsheet.costpercapita_ai4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj4
  r = spreadsheet.costpercapita_aj4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3712914969309726,r[:number])
end

def test_costpercapita_ak4
  r = spreadsheet.costpercapita_ak4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4524983192768732,r[:number])
end

def test_costpercapita_al4
  r = spreadsheet.costpercapita_al4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4588657584290579,r[:number])
end

def test_costpercapita_am4
  r = spreadsheet.costpercapita_am4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.44632947565808306,r[:number])
end

def test_costpercapita_an4
  r = spreadsheet.costpercapita_an4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4358158742957596,r[:number])
end

def test_costpercapita_ao4
  r = spreadsheet.costpercapita_ao4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42652149662249816,r[:number])
end

def test_costpercapita_ap4
  r = spreadsheet.costpercapita_ap4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41801327764104834,r[:number])
end

def test_costpercapita_aq4
  r = spreadsheet.costpercapita_aq4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41021242453214596,r[:number])
end

def test_costpercapita_as4
  r = spreadsheet.costpercapita_as4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8243942359318264,r[:number])
end

def test_costpercapita_at4
  r = spreadsheet.costpercapita_at4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.034899876440434,r[:number])
end

def test_costpercapita_av4
  r = spreadsheet.costpercapita_av4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw4
  r = spreadsheet.costpercapita_aw4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay4
  r = spreadsheet.costpercapita_ay4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az4
  r = spreadsheet.costpercapita_az4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1002490109591307,r[:number])
end

def test_costpercapita_ba4
  r = spreadsheet.costpercapita_ba4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9332713006871327,r[:number])
end

def test_costpercapita_bb4
  r = spreadsheet.costpercapita_bb4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.256914816895382e-16,r[:number])
end

def test_costpercapita_bc4
  r = spreadsheet.costpercapita_bc4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd4
  r = spreadsheet.costpercapita_bd4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be4
  r = spreadsheet.costpercapita_be4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf4
  r = spreadsheet.costpercapita_bf4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg4
  r = spreadsheet.costpercapita_bg4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi4
  r = spreadsheet.costpercapita_bi4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj4
  r = spreadsheet.costpercapita_bj4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1002490109591307,r[:number])
end

def test_costpercapita_bk4
  r = spreadsheet.costpercapita_bk4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9332713006871327,r[:number])
end

def test_costpercapita_bl4
  r = spreadsheet.costpercapita_bl4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.256914816895382e-16,r[:number])
end

def test_costpercapita_bm4
  r = spreadsheet.costpercapita_bm4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn4
  r = spreadsheet.costpercapita_bn4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo4
  r = spreadsheet.costpercapita_bo4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp4
  r = spreadsheet.costpercapita_bp4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq4
  r = spreadsheet.costpercapita_bq4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs4
  r = spreadsheet.costpercapita_bs4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt4
  r = spreadsheet.costpercapita_bt4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3712914969309726,r[:number])
end

def test_costpercapita_bu4
  r = spreadsheet.costpercapita_bu4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4524983192768732,r[:number])
end

def test_costpercapita_bv4
  r = spreadsheet.costpercapita_bv4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4588657584290579,r[:number])
end

def test_costpercapita_bw4
  r = spreadsheet.costpercapita_bw4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.44632947565808306,r[:number])
end

def test_costpercapita_bx4
  r = spreadsheet.costpercapita_bx4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4358158742957596,r[:number])
end

def test_costpercapita_by4
  r = spreadsheet.costpercapita_by4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42652149662249816,r[:number])
end

def test_costpercapita_bz4
  r = spreadsheet.costpercapita_bz4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41801327764104834,r[:number])
end

def test_costpercapita_ca4
  r = spreadsheet.costpercapita_ca4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41021242453214596,r[:number])
end

def test_costpercapita_cc4
  r = spreadsheet.costpercapita_cc4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8243942359318264,r[:number])
end

def test_costpercapita_cd4
  r = spreadsheet.costpercapita_cd4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.034899876440434,r[:number])
end

def test_costpercapita_cf4
  r = spreadsheet.costpercapita_cf4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg4
  r = spreadsheet.costpercapita_cg4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch4
  r = spreadsheet.costpercapita_ch4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci4
  r = spreadsheet.costpercapita_ci4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj4
  r = spreadsheet.costpercapita_cj4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck4
  r = spreadsheet.costpercapita_ck4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl4
  r = spreadsheet.costpercapita_cl4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm4
  r = spreadsheet.costpercapita_cm4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn4
  r = spreadsheet.costpercapita_cn4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp4
  r = spreadsheet.costpercapita_cp4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq4
  r = spreadsheet.costpercapita_cq4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr4
  r = spreadsheet.costpercapita_cr4
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a5
  r = spreadsheet.costpercapita_a5
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b5
  r = spreadsheet.costpercapita_b5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c5
  r = spreadsheet.costpercapita_c5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e5
  r = spreadsheet.costpercapita_e5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f5
  r = spreadsheet.costpercapita_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g5
  r = spreadsheet.costpercapita_g5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h5
  r = spreadsheet.costpercapita_h5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i5
  r = spreadsheet.costpercapita_i5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j5
  r = spreadsheet.costpercapita_j5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k5
  r = spreadsheet.costpercapita_k5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l5
  r = spreadsheet.costpercapita_l5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m5
  r = spreadsheet.costpercapita_m5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o5
  r = spreadsheet.costpercapita_o5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.715090759467435,r[:number])
end

def test_costpercapita_p5
  r = spreadsheet.costpercapita_p5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.775325462508412,r[:number])
end

def test_costpercapita_q5
  r = spreadsheet.costpercapita_q5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4334769578840183,r[:number])
end

def test_costpercapita_r5
  r = spreadsheet.costpercapita_r5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46303051009710694,r[:number])
end

def test_costpercapita_s5
  r = spreadsheet.costpercapita_s5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4503804456729523,r[:number])
end

def test_costpercapita_t5
  r = spreadsheet.costpercapita_t5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u5
  r = spreadsheet.costpercapita_u5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v5
  r = spreadsheet.costpercapita_v5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w5
  r = spreadsheet.costpercapita_w5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y5
  r = spreadsheet.costpercapita_y5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.27699004186341447,r[:number])
end

def test_costpercapita_z5
  r = spreadsheet.costpercapita_z5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22499927188293975,r[:number])
end

def test_costpercapita_aa5
  r = spreadsheet.costpercapita_aa5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12436183535401259,r[:number])
end

def test_costpercapita_ab5
  r = spreadsheet.costpercapita_ab5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04017038693498128,r[:number])
end

def test_costpercapita_ac5
  r = spreadsheet.costpercapita_ac5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.039072925813976186,r[:number])
end

def test_costpercapita_ad5
  r = spreadsheet.costpercapita_ad5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae5
  r = spreadsheet.costpercapita_ae5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af5
  r = spreadsheet.costpercapita_af5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag5
  r = spreadsheet.costpercapita_ag5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai5
  r = spreadsheet.costpercapita_ai5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9920808013308497,r[:number])
end

def test_costpercapita_aj5
  r = spreadsheet.costpercapita_aj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0003247343913517,r[:number])
end

def test_costpercapita_ak5
  r = spreadsheet.costpercapita_ak5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5578387932380309,r[:number])
end

def test_costpercapita_al5
  r = spreadsheet.costpercapita_al5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5032008970320883,r[:number])
end

def test_costpercapita_am5
  r = spreadsheet.costpercapita_am5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4894533714869285,r[:number])
end

def test_costpercapita_an5
  r = spreadsheet.costpercapita_an5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao5
  r = spreadsheet.costpercapita_ao5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap5
  r = spreadsheet.costpercapita_ap5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq5
  r = spreadsheet.costpercapita_aq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as5
  r = spreadsheet.costpercapita_as5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0603220663865833,r[:number])
end

def test_costpercapita_at5
  r = spreadsheet.costpercapita_at5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.876643844952078,r[:number])
end

def test_costpercapita_av5
  r = spreadsheet.costpercapita_av5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw5
  r = spreadsheet.costpercapita_aw5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay5
  r = spreadsheet.costpercapita_ay5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az5
  r = spreadsheet.costpercapita_az5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba5
  r = spreadsheet.costpercapita_ba5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb5
  r = spreadsheet.costpercapita_bb5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc5
  r = spreadsheet.costpercapita_bc5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd5
  r = spreadsheet.costpercapita_bd5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be5
  r = spreadsheet.costpercapita_be5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf5
  r = spreadsheet.costpercapita_bf5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg5
  r = spreadsheet.costpercapita_bg5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi5
  r = spreadsheet.costpercapita_bi5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj5
  r = spreadsheet.costpercapita_bj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk5
  r = spreadsheet.costpercapita_bk5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl5
  r = spreadsheet.costpercapita_bl5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm5
  r = spreadsheet.costpercapita_bm5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn5
  r = spreadsheet.costpercapita_bn5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo5
  r = spreadsheet.costpercapita_bo5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp5
  r = spreadsheet.costpercapita_bp5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq5
  r = spreadsheet.costpercapita_bq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs5
  r = spreadsheet.costpercapita_bs5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9920808013308497,r[:number])
end

def test_costpercapita_bt5
  r = spreadsheet.costpercapita_bt5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0003247343913517,r[:number])
end

def test_costpercapita_bu5
  r = spreadsheet.costpercapita_bu5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5578387932380309,r[:number])
end

def test_costpercapita_bv5
  r = spreadsheet.costpercapita_bv5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5032008970320883,r[:number])
end

def test_costpercapita_bw5
  r = spreadsheet.costpercapita_bw5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4894533714869285,r[:number])
end

def test_costpercapita_bx5
  r = spreadsheet.costpercapita_bx5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by5
  r = spreadsheet.costpercapita_by5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz5
  r = spreadsheet.costpercapita_bz5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca5
  r = spreadsheet.costpercapita_ca5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc5
  r = spreadsheet.costpercapita_cc5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0603220663865833,r[:number])
end

def test_costpercapita_cd5
  r = spreadsheet.costpercapita_cd5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.876643844952078,r[:number])
end

def test_costpercapita_cf5
  r = spreadsheet.costpercapita_cf5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg5
  r = spreadsheet.costpercapita_cg5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch5
  r = spreadsheet.costpercapita_ch5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci5
  r = spreadsheet.costpercapita_ci5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj5
  r = spreadsheet.costpercapita_cj5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck5
  r = spreadsheet.costpercapita_ck5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl5
  r = spreadsheet.costpercapita_cl5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm5
  r = spreadsheet.costpercapita_cm5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn5
  r = spreadsheet.costpercapita_cn5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp5
  r = spreadsheet.costpercapita_cp5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq5
  r = spreadsheet.costpercapita_cq5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr5
  r = spreadsheet.costpercapita_cr5
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a6
  r = spreadsheet.costpercapita_a6
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b6
  r = spreadsheet.costpercapita_b6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c6
  r = spreadsheet.costpercapita_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e6
  r = spreadsheet.costpercapita_e6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.615117827148735,r[:number])
end

def test_costpercapita_f6
  r = spreadsheet.costpercapita_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.415203332529532,r[:number])
end

def test_costpercapita_g6
  r = spreadsheet.costpercapita_g6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.118701640219212,r[:number])
end

def test_costpercapita_h6
  r = spreadsheet.costpercapita_h6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8462042799268765,r[:number])
end

def test_costpercapita_i6
  r = spreadsheet.costpercapita_i6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j6
  r = spreadsheet.costpercapita_j6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k6
  r = spreadsheet.costpercapita_k6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l6
  r = spreadsheet.costpercapita_l6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m6
  r = spreadsheet.costpercapita_m6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o6
  r = spreadsheet.costpercapita_o6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.44138121762992655,r[:number])
end

def test_costpercapita_p6
  r = spreadsheet.costpercapita_p6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7259991101600587,r[:number])
end

def test_costpercapita_q6
  r = spreadsheet.costpercapita_q6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9916093575231592,r[:number])
end

def test_costpercapita_r6
  r = spreadsheet.costpercapita_r6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1230382541961308,r[:number])
end

def test_costpercapita_s6
  r = spreadsheet.costpercapita_s6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8215834619258144,r[:number])
end

def test_costpercapita_t6
  r = spreadsheet.costpercapita_t6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.535898568628479,r[:number])
end

def test_costpercapita_u6
  r = spreadsheet.costpercapita_u6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.26381776304423576,r[:number])
end

def test_costpercapita_v6
  r = spreadsheet.costpercapita_v6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0031025874384912016,r[:number])
end

def test_costpercapita_w6
  r = spreadsheet.costpercapita_w6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030446877731940174,r[:number])
end

def test_costpercapita_y6
  r = spreadsheet.costpercapita_y6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z6
  r = spreadsheet.costpercapita_z6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa6
  r = spreadsheet.costpercapita_aa6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab6
  r = spreadsheet.costpercapita_ab6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac6
  r = spreadsheet.costpercapita_ac6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad6
  r = spreadsheet.costpercapita_ad6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae6
  r = spreadsheet.costpercapita_ae6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af6
  r = spreadsheet.costpercapita_af6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag6
  r = spreadsheet.costpercapita_ag6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai6
  r = spreadsheet.costpercapita_ai6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.056499044778661,r[:number])
end

def test_costpercapita_aj6
  r = spreadsheet.costpercapita_aj6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.141202442689591,r[:number])
end

def test_costpercapita_ak6
  r = spreadsheet.costpercapita_ak6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.11031099774237,r[:number])
end

def test_costpercapita_al6
  r = spreadsheet.costpercapita_al6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.969242534123008,r[:number])
end

def test_costpercapita_am6
  r = spreadsheet.costpercapita_am6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8215834619258144,r[:number])
end

def test_costpercapita_an6
  r = spreadsheet.costpercapita_an6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.535898568628479,r[:number])
end

def test_costpercapita_ao6
  r = spreadsheet.costpercapita_ao6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.26381776304423576,r[:number])
end

def test_costpercapita_ap6
  r = spreadsheet.costpercapita_ap6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0031025874384912016,r[:number])
end

def test_costpercapita_aq6
  r = spreadsheet.costpercapita_aq6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030446877731940174,r[:number])
end

def test_costpercapita_as6
  r = spreadsheet.costpercapita_as6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8783002320159827,r[:number])
end

def test_costpercapita_at6
  r = spreadsheet.costpercapita_at6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.53854451492977,r[:number])
end

def test_costpercapita_av6
  r = spreadsheet.costpercapita_av6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw6
  r = spreadsheet.costpercapita_aw6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay6
  r = spreadsheet.costpercapita_ay6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.169070696289241,r[:number])
end

def test_costpercapita_az6
  r = spreadsheet.costpercapita_az6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.415203332529533,r[:number])
end

def test_costpercapita_ba6
  r = spreadsheet.costpercapita_ba6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.118701640219212,r[:number])
end

def test_costpercapita_bb6
  r = spreadsheet.costpercapita_bb6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8462042799268765,r[:number])
end

def test_costpercapita_bc6
  r = spreadsheet.costpercapita_bc6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd6
  r = spreadsheet.costpercapita_bd6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be6
  r = spreadsheet.costpercapita_be6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf6
  r = spreadsheet.costpercapita_bf6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg6
  r = spreadsheet.costpercapita_bg6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi6
  r = spreadsheet.costpercapita_bi6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.169070696289241,r[:number])
end

def test_costpercapita_bj6
  r = spreadsheet.costpercapita_bj6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.415203332529533,r[:number])
end

def test_costpercapita_bk6
  r = spreadsheet.costpercapita_bk6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.118701640219212,r[:number])
end

def test_costpercapita_bl6
  r = spreadsheet.costpercapita_bl6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8462042799268765,r[:number])
end

def test_costpercapita_bm6
  r = spreadsheet.costpercapita_bm6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn6
  r = spreadsheet.costpercapita_bn6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo6
  r = spreadsheet.costpercapita_bo6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp6
  r = spreadsheet.costpercapita_bp6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq6
  r = spreadsheet.costpercapita_bq6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs6
  r = spreadsheet.costpercapita_bs6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.610451913919168,r[:number])
end

def test_costpercapita_bt6
  r = spreadsheet.costpercapita_bt6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.141202442689591,r[:number])
end

def test_costpercapita_bu6
  r = spreadsheet.costpercapita_bu6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.11031099774237,r[:number])
end

def test_costpercapita_bv6
  r = spreadsheet.costpercapita_bv6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.969242534123008,r[:number])
end

def test_costpercapita_bw6
  r = spreadsheet.costpercapita_bw6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8215834619258144,r[:number])
end

def test_costpercapita_bx6
  r = spreadsheet.costpercapita_bx6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.535898568628479,r[:number])
end

def test_costpercapita_by6
  r = spreadsheet.costpercapita_by6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.26381776304423576,r[:number])
end

def test_costpercapita_bz6
  r = spreadsheet.costpercapita_bz6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0031025874384912016,r[:number])
end

def test_costpercapita_ca6
  r = spreadsheet.costpercapita_ca6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0030446877731940174,r[:number])
end

def test_costpercapita_cc6
  r = spreadsheet.costpercapita_cc6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4954061063649284,r[:number])
end

def test_costpercapita_cd6
  r = spreadsheet.costpercapita_cd6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.09249738407027,r[:number])
end

def test_costpercapita_cf6
  r = spreadsheet.costpercapita_cf6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.446047130859494,r[:number])
end

def test_costpercapita_cg6
  r = spreadsheet.costpercapita_cg6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch6
  r = spreadsheet.costpercapita_ch6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci6
  r = spreadsheet.costpercapita_ci6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj6
  r = spreadsheet.costpercapita_cj6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck6
  r = spreadsheet.costpercapita_ck6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl6
  r = spreadsheet.costpercapita_cl6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm6
  r = spreadsheet.costpercapita_cm6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn6
  r = spreadsheet.costpercapita_cn6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp6
  r = spreadsheet.costpercapita_cp6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.3828941256510549,r[:number])
end

def test_costpercapita_cq6
  r = spreadsheet.costpercapita_cq6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.446047130859494,r[:number])
end

def test_costpercapita_cr6
  r = spreadsheet.costpercapita_cr6
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a7
  r = spreadsheet.costpercapita_a7
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b7
  r = spreadsheet.costpercapita_b7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c7
  r = spreadsheet.costpercapita_c7
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e7
  r = spreadsheet.costpercapita_e7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.705323134712977,r[:number])
end

def test_costpercapita_f7
  r = spreadsheet.costpercapita_f7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.65846700980894,r[:number])
end

def test_costpercapita_g7
  r = spreadsheet.costpercapita_g7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.938675440751432,r[:number])
end

def test_costpercapita_h7
  r = spreadsheet.costpercapita_h7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.670449779342384,r[:number])
end

def test_costpercapita_i7
  r = spreadsheet.costpercapita_i7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j7
  r = spreadsheet.costpercapita_j7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k7
  r = spreadsheet.costpercapita_k7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l7
  r = spreadsheet.costpercapita_l7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m7
  r = spreadsheet.costpercapita_m7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o7
  r = spreadsheet.costpercapita_o7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6479016890427718,r[:number])
end

def test_costpercapita_p7
  r = spreadsheet.costpercapita_p7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.792144107073221,r[:number])
end

def test_costpercapita_q7
  r = spreadsheet.costpercapita_q7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8609198267483453,r[:number])
end

def test_costpercapita_r7
  r = spreadsheet.costpercapita_r7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.580813572777159,r[:number])
end

def test_costpercapita_s7
  r = spreadsheet.costpercapita_s7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9755298377205532,r[:number])
end

def test_costpercapita_t7
  r = spreadsheet.costpercapita_t7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.867782318410398,r[:number])
end

def test_costpercapita_u7
  r = spreadsheet.costpercapita_u7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8124218983285679,r[:number])
end

def test_costpercapita_v7
  r = spreadsheet.costpercapita_v7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w7
  r = spreadsheet.costpercapita_w7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y7
  r = spreadsheet.costpercapita_y7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z7
  r = spreadsheet.costpercapita_z7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa7
  r = spreadsheet.costpercapita_aa7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab7
  r = spreadsheet.costpercapita_ab7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac7
  r = spreadsheet.costpercapita_ac7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad7
  r = spreadsheet.costpercapita_ad7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae7
  r = spreadsheet.costpercapita_ae7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af7
  r = spreadsheet.costpercapita_af7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag7
  r = spreadsheet.costpercapita_ag7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai7
  r = spreadsheet.costpercapita_ai7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.35322482375575,r[:number])
end

def test_costpercapita_aj7
  r = spreadsheet.costpercapita_aj7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.45061111688216,r[:number])
end

def test_costpercapita_ak7
  r = spreadsheet.costpercapita_ak7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.79959526749978,r[:number])
end

def test_costpercapita_al7
  r = spreadsheet.costpercapita_al7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.251263352119544,r[:number])
end

def test_costpercapita_am7
  r = spreadsheet.costpercapita_am7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9755298377205532,r[:number])
end

def test_costpercapita_an7
  r = spreadsheet.costpercapita_an7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.867782318410398,r[:number])
end

def test_costpercapita_ao7
  r = spreadsheet.costpercapita_ao7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8124218983285679,r[:number])
end

def test_costpercapita_ap7
  r = spreadsheet.costpercapita_ap7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq7
  r = spreadsheet.costpercapita_aq7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as7
  r = spreadsheet.costpercapita_as7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.612269846079638,r[:number])
end

def test_costpercapita_at7
  r = spreadsheet.costpercapita_at7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.5283621457906,r[:number])
end

def test_costpercapita_av7
  r = spreadsheet.costpercapita_av7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw7
  r = spreadsheet.costpercapita_aw7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay7
  r = spreadsheet.costpercapita_ay7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.023193880827788,r[:number])
end

def test_costpercapita_az7
  r = spreadsheet.costpercapita_az7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.65846700980894,r[:number])
end

def test_costpercapita_ba7
  r = spreadsheet.costpercapita_ba7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.938675440751432,r[:number])
end

def test_costpercapita_bb7
  r = spreadsheet.costpercapita_bb7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.670449779342384,r[:number])
end

def test_costpercapita_bc7
  r = spreadsheet.costpercapita_bc7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd7
  r = spreadsheet.costpercapita_bd7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be7
  r = spreadsheet.costpercapita_be7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf7
  r = spreadsheet.costpercapita_bf7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg7
  r = spreadsheet.costpercapita_bg7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi7
  r = spreadsheet.costpercapita_bi7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.023193880827788,r[:number])
end

def test_costpercapita_bj7
  r = spreadsheet.costpercapita_bj7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.65846700980894,r[:number])
end

def test_costpercapita_bk7
  r = spreadsheet.costpercapita_bk7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.938675440751432,r[:number])
end

def test_costpercapita_bl7
  r = spreadsheet.costpercapita_bl7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.670449779342384,r[:number])
end

def test_costpercapita_bm7
  r = spreadsheet.costpercapita_bm7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn7
  r = spreadsheet.costpercapita_bn7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo7
  r = spreadsheet.costpercapita_bo7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp7
  r = spreadsheet.costpercapita_bp7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq7
  r = spreadsheet.costpercapita_bq7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs7
  r = spreadsheet.costpercapita_bs7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.671095569870559,r[:number])
end

def test_costpercapita_bt7
  r = spreadsheet.costpercapita_bt7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.45061111688216,r[:number])
end

def test_costpercapita_bu7
  r = spreadsheet.costpercapita_bu7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.79959526749978,r[:number])
end

def test_costpercapita_bv7
  r = spreadsheet.costpercapita_bv7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.251263352119544,r[:number])
end

def test_costpercapita_bw7
  r = spreadsheet.costpercapita_bw7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9755298377205532,r[:number])
end

def test_costpercapita_bx7
  r = spreadsheet.costpercapita_bx7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.867782318410398,r[:number])
end

def test_costpercapita_by7
  r = spreadsheet.costpercapita_by7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8124218983285679,r[:number])
end

def test_costpercapita_bz7
  r = spreadsheet.costpercapita_bz7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca7
  r = spreadsheet.costpercapita_ca7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc7
  r = spreadsheet.costpercapita_cc7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.092033262314618,r[:number])
end

def test_costpercapita_cd7
  r = spreadsheet.costpercapita_cd7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.8462328919054,r[:number])
end

def test_costpercapita_cf7
  r = spreadsheet.costpercapita_cf7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.68212925388519,r[:number])
end

def test_costpercapita_cg7
  r = spreadsheet.costpercapita_cg7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch7
  r = spreadsheet.costpercapita_ch7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci7
  r = spreadsheet.costpercapita_ci7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj7
  r = spreadsheet.costpercapita_cj7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck7
  r = spreadsheet.costpercapita_ck7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl7
  r = spreadsheet.costpercapita_cl7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm7
  r = spreadsheet.costpercapita_cm7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn7
  r = spreadsheet.costpercapita_cn7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp7
  r = spreadsheet.costpercapita_cp7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.5202365837650211,r[:number])
end

def test_costpercapita_cq7
  r = spreadsheet.costpercapita_cq7
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.68212925388519,r[:number])
end

def test_costpercapita_cr7
  r = spreadsheet.costpercapita_cr7
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a8
  r = spreadsheet.costpercapita_a8
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b8
  r = spreadsheet.costpercapita_b8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c8
  r = spreadsheet.costpercapita_c8
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e8
  r = spreadsheet.costpercapita_e8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.703845049721616,r[:number])
end

def test_costpercapita_f8
  r = spreadsheet.costpercapita_f8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g8
  r = spreadsheet.costpercapita_g8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h8
  r = spreadsheet.costpercapita_h8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i8
  r = spreadsheet.costpercapita_i8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j8
  r = spreadsheet.costpercapita_j8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k8
  r = spreadsheet.costpercapita_k8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l8
  r = spreadsheet.costpercapita_l8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m8
  r = spreadsheet.costpercapita_m8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o8
  r = spreadsheet.costpercapita_o8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.257142110053191,r[:number])
end

def test_costpercapita_p8
  r = spreadsheet.costpercapita_p8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24866283116682733,r[:number])
end

def test_costpercapita_q8
  r = spreadsheet.costpercapita_q8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24052206998945702,r[:number])
end

def test_costpercapita_r8
  r = spreadsheet.costpercapita_r8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.233074670948093,r[:number])
end

def test_costpercapita_s8
  r = spreadsheet.costpercapita_s8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22670703525489933,r[:number])
end

def test_costpercapita_t8
  r = spreadsheet.costpercapita_t8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2213667932930842,r[:number])
end

def test_costpercapita_u8
  r = spreadsheet.costpercapita_u8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2166458395542848,r[:number])
end

def test_costpercapita_v8
  r = spreadsheet.costpercapita_v8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21232420451608805,r[:number])
end

def test_costpercapita_w8
  r = spreadsheet.costpercapita_w8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.20836186642902652,r[:number])
end

def test_costpercapita_y8
  r = spreadsheet.costpercapita_y8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z8
  r = spreadsheet.costpercapita_z8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa8
  r = spreadsheet.costpercapita_aa8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab8
  r = spreadsheet.costpercapita_ab8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac8
  r = spreadsheet.costpercapita_ac8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad8
  r = spreadsheet.costpercapita_ad8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae8
  r = spreadsheet.costpercapita_ae8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af8
  r = spreadsheet.costpercapita_af8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag8
  r = spreadsheet.costpercapita_ag8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai8
  r = spreadsheet.costpercapita_ai8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.960987159774807,r[:number])
end

def test_costpercapita_aj8
  r = spreadsheet.costpercapita_aj8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24866283116682733,r[:number])
end

def test_costpercapita_ak8
  r = spreadsheet.costpercapita_ak8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24052206998945702,r[:number])
end

def test_costpercapita_al8
  r = spreadsheet.costpercapita_al8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.233074670948093,r[:number])
end

def test_costpercapita_am8
  r = spreadsheet.costpercapita_am8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22670703525489933,r[:number])
end

def test_costpercapita_an8
  r = spreadsheet.costpercapita_an8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2213667932930842,r[:number])
end

def test_costpercapita_ao8
  r = spreadsheet.costpercapita_ao8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2166458395542848,r[:number])
end

def test_costpercapita_ap8
  r = spreadsheet.costpercapita_ap8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21232420451608805,r[:number])
end

def test_costpercapita_aq8
  r = spreadsheet.costpercapita_aq8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.20836186642902652,r[:number])
end

def test_costpercapita_as8
  r = spreadsheet.costpercapita_as8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.41873916343628526,r[:number])
end

def test_costpercapita_at8
  r = spreadsheet.costpercapita_at8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.582393838511321,r[:number])
end

def test_costpercapita_av8
  r = spreadsheet.costpercapita_av8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw8
  r = spreadsheet.costpercapita_aw8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay8
  r = spreadsheet.costpercapita_ay8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0223070298329695,r[:number])
end

def test_costpercapita_az8
  r = spreadsheet.costpercapita_az8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba8
  r = spreadsheet.costpercapita_ba8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb8
  r = spreadsheet.costpercapita_bb8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc8
  r = spreadsheet.costpercapita_bc8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd8
  r = spreadsheet.costpercapita_bd8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be8
  r = spreadsheet.costpercapita_be8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf8
  r = spreadsheet.costpercapita_bf8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg8
  r = spreadsheet.costpercapita_bg8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi8
  r = spreadsheet.costpercapita_bi8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0223070298329695,r[:number])
end

def test_costpercapita_bj8
  r = spreadsheet.costpercapita_bj8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk8
  r = spreadsheet.costpercapita_bk8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl8
  r = spreadsheet.costpercapita_bl8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm8
  r = spreadsheet.costpercapita_bm8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn8
  r = spreadsheet.costpercapita_bn8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo8
  r = spreadsheet.costpercapita_bo8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp8
  r = spreadsheet.costpercapita_bp8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq8
  r = spreadsheet.costpercapita_bq8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs8
  r = spreadsheet.costpercapita_bs8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2794491398861605,r[:number])
end

def test_costpercapita_bt8
  r = spreadsheet.costpercapita_bt8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24866283116682733,r[:number])
end

def test_costpercapita_bu8
  r = spreadsheet.costpercapita_bu8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24052206998945702,r[:number])
end

def test_costpercapita_bv8
  r = spreadsheet.costpercapita_bv8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.233074670948093,r[:number])
end

def test_costpercapita_bw8
  r = spreadsheet.costpercapita_bw8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22670703525489933,r[:number])
end

def test_costpercapita_bx8
  r = spreadsheet.costpercapita_bx8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2213667932930842,r[:number])
end

def test_costpercapita_by8
  r = spreadsheet.costpercapita_by8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2166458395542848,r[:number])
end

def test_costpercapita_bz8
  r = spreadsheet.costpercapita_bz8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.21232420451608805,r[:number])
end

def test_costpercapita_ca8
  r = spreadsheet.costpercapita_ca8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.20836186642902652,r[:number])
end

def test_costpercapita_cc8
  r = spreadsheet.costpercapita_cc8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3430127167819912,r[:number])
end

def test_costpercapita_cd8
  r = spreadsheet.costpercapita_cd8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.900855818622675,r[:number])
end

def test_costpercapita_cf8
  r = spreadsheet.costpercapita_cf8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.6815380198886465,r[:number])
end

def test_costpercapita_cg8
  r = spreadsheet.costpercapita_cg8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch8
  r = spreadsheet.costpercapita_ch8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci8
  r = spreadsheet.costpercapita_ci8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj8
  r = spreadsheet.costpercapita_cj8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck8
  r = spreadsheet.costpercapita_ck8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl8
  r = spreadsheet.costpercapita_cl8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm8
  r = spreadsheet.costpercapita_cm8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn8
  r = spreadsheet.costpercapita_cn8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp8
  r = spreadsheet.costpercapita_cp8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.07572644665429405,r[:number])
end

def test_costpercapita_cq8
  r = spreadsheet.costpercapita_cq8
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.6815380198886465,r[:number])
end

def test_costpercapita_cr8
  r = spreadsheet.costpercapita_cr8
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a9
  r = spreadsheet.costpercapita_a9
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b9
  r = spreadsheet.costpercapita_b9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave and Tidal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c9
  r = spreadsheet.costpercapita_c9
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e9
  r = spreadsheet.costpercapita_e9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02446176846015897,r[:number])
end

def test_costpercapita_f9
  r = spreadsheet.costpercapita_f9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050390179124008345,r[:number])
end

def test_costpercapita_g9
  r = spreadsheet.costpercapita_g9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5752089574864554,r[:number])
end

def test_costpercapita_h9
  r = spreadsheet.costpercapita_h9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8169364774621828,r[:number])
end

def test_costpercapita_i9
  r = spreadsheet.costpercapita_i9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j9
  r = spreadsheet.costpercapita_j9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k9
  r = spreadsheet.costpercapita_k9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.030402962567587608,r[:number])
end

def test_costpercapita_l9
  r = spreadsheet.costpercapita_l9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2524110358735458,r[:number])
end

def test_costpercapita_m9
  r = spreadsheet.costpercapita_m9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46976562351293005,r[:number])
end

def test_costpercapita_o9
  r = spreadsheet.costpercapita_o9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.000560582193878643,r[:number])
end

def test_costpercapita_p9
  r = spreadsheet.costpercapita_p9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0026414906278820136,r[:number])
end

def test_costpercapita_q9
  r = spreadsheet.costpercapita_q9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.029395362276478685,r[:number])
end

def test_costpercapita_r9
  r = spreadsheet.costpercapita_r9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0712129492970288,r[:number])
end

def test_costpercapita_s9
  r = spreadsheet.costpercapita_s9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0692674006197882,r[:number])
end

def test_costpercapita_t9
  r = spreadsheet.costpercapita_t9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u9
  r = spreadsheet.costpercapita_u9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v9
  r = spreadsheet.costpercapita_v9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w9
  r = spreadsheet.costpercapita_w9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y9
  r = spreadsheet.costpercapita_y9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z9
  r = spreadsheet.costpercapita_z9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa9
  r = spreadsheet.costpercapita_aa9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab9
  r = spreadsheet.costpercapita_ab9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac9
  r = spreadsheet.costpercapita_ac9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad9
  r = spreadsheet.costpercapita_ad9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae9
  r = spreadsheet.costpercapita_ae9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af9
  r = spreadsheet.costpercapita_af9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag9
  r = spreadsheet.costpercapita_ag9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai9
  r = spreadsheet.costpercapita_ai9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.02502235065403761,r[:number])
end

def test_costpercapita_aj9
  r = spreadsheet.costpercapita_aj9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.053031669751890366,r[:number])
end

def test_costpercapita_ak9
  r = spreadsheet.costpercapita_ak9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.604604319762934,r[:number])
end

def test_costpercapita_al9
  r = spreadsheet.costpercapita_al9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8881494267592115,r[:number])
end

def test_costpercapita_am9
  r = spreadsheet.costpercapita_am9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0692674006197882,r[:number])
end

def test_costpercapita_an9
  r = spreadsheet.costpercapita_an9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao9
  r = spreadsheet.costpercapita_ao9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.030402962567587608,r[:number])
end

def test_costpercapita_ap9
  r = spreadsheet.costpercapita_ap9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2524110358735458,r[:number])
end

def test_costpercapita_aq9
  r = spreadsheet.costpercapita_aq9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46976562351293005,r[:number])
end

def test_costpercapita_as9
  r = spreadsheet.costpercapita_as9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2658505321668806,r[:number])
end

def test_costpercapita_at9
  r = spreadsheet.costpercapita_at9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.280763658473743,r[:number])
end

def test_costpercapita_av9
  r = spreadsheet.costpercapita_av9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw9
  r = spreadsheet.costpercapita_aw9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay9
  r = spreadsheet.costpercapita_ay9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014677061076095382,r[:number])
end

def test_costpercapita_az9
  r = spreadsheet.costpercapita_az9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050390179124008345,r[:number])
end

def test_costpercapita_ba9
  r = spreadsheet.costpercapita_ba9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5752089574864554,r[:number])
end

def test_costpercapita_bb9
  r = spreadsheet.costpercapita_bb9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8169364774621828,r[:number])
end

def test_costpercapita_bc9
  r = spreadsheet.costpercapita_bc9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd9
  r = spreadsheet.costpercapita_bd9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be9
  r = spreadsheet.costpercapita_be9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.030402962567587608,r[:number])
end

def test_costpercapita_bf9
  r = spreadsheet.costpercapita_bf9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2524110358735458,r[:number])
end

def test_costpercapita_bg9
  r = spreadsheet.costpercapita_bg9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46976562351293005,r[:number])
end

def test_costpercapita_bi9
  r = spreadsheet.costpercapita_bi9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.014677061076095382,r[:number])
end

def test_costpercapita_bj9
  r = spreadsheet.costpercapita_bj9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050390179124008345,r[:number])
end

def test_costpercapita_bk9
  r = spreadsheet.costpercapita_bk9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5752089574864554,r[:number])
end

def test_costpercapita_bl9
  r = spreadsheet.costpercapita_bl9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8169364774621828,r[:number])
end

def test_costpercapita_bm9
  r = spreadsheet.costpercapita_bm9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn9
  r = spreadsheet.costpercapita_bn9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo9
  r = spreadsheet.costpercapita_bo9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.030402962567587608,r[:number])
end

def test_costpercapita_bp9
  r = spreadsheet.costpercapita_bp9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2524110358735458,r[:number])
end

def test_costpercapita_bq9
  r = spreadsheet.costpercapita_bq9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46976562351293005,r[:number])
end

def test_costpercapita_bs9
  r = spreadsheet.costpercapita_bs9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.015237643269974024,r[:number])
end

def test_costpercapita_bt9
  r = spreadsheet.costpercapita_bt9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.053031669751890366,r[:number])
end

def test_costpercapita_bu9
  r = spreadsheet.costpercapita_bu9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.604604319762934,r[:number])
end

def test_costpercapita_bv9
  r = spreadsheet.costpercapita_bv9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8881494267592116,r[:number])
end

def test_costpercapita_bw9
  r = spreadsheet.costpercapita_bw9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0692674006197882,r[:number])
end

def test_costpercapita_bx9
  r = spreadsheet.costpercapita_bx9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by9
  r = spreadsheet.costpercapita_by9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.030402962567587608,r[:number])
end

def test_costpercapita_bz9
  r = spreadsheet.costpercapita_bz9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2524110358735458,r[:number])
end

def test_costpercapita_ca9
  r = spreadsheet.costpercapita_ca9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46976562351293005,r[:number])
end

def test_costpercapita_cc9
  r = spreadsheet.costpercapita_cc9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2647633424575402,r[:number])
end

def test_costpercapita_cd9
  r = spreadsheet.costpercapita_cd9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.270978951089682,r[:number])
end

def test_costpercapita_cf9
  r = spreadsheet.costpercapita_cf9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.009784707384063587,r[:number])
end

def test_costpercapita_cg9
  r = spreadsheet.costpercapita_cg9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch9
  r = spreadsheet.costpercapita_ch9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci9
  r = spreadsheet.costpercapita_ci9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj9
  r = spreadsheet.costpercapita_cj9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck9
  r = spreadsheet.costpercapita_ck9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl9
  r = spreadsheet.costpercapita_cl9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm9
  r = spreadsheet.costpercapita_cm9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn9
  r = spreadsheet.costpercapita_cn9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp9
  r = spreadsheet.costpercapita_cp9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.0010871897093403986,r[:number])
end

def test_costpercapita_cq9
  r = spreadsheet.costpercapita_cq9
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.009784707384063587,r[:number])
end

def test_costpercapita_cr9
  r = spreadsheet.costpercapita_cr9
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a10
  r = spreadsheet.costpercapita_a10
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b10
  r = spreadsheet.costpercapita_b10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c10
  r = spreadsheet.costpercapita_c10
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e10
  r = spreadsheet.costpercapita_e10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f10
  r = spreadsheet.costpercapita_f10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g10
  r = spreadsheet.costpercapita_g10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h10
  r = spreadsheet.costpercapita_h10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i10
  r = spreadsheet.costpercapita_i10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j10
  r = spreadsheet.costpercapita_j10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k10
  r = spreadsheet.costpercapita_k10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l10
  r = spreadsheet.costpercapita_l10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m10
  r = spreadsheet.costpercapita_m10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o10
  r = spreadsheet.costpercapita_o10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p10
  r = spreadsheet.costpercapita_p10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q10
  r = spreadsheet.costpercapita_q10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r10
  r = spreadsheet.costpercapita_r10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s10
  r = spreadsheet.costpercapita_s10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t10
  r = spreadsheet.costpercapita_t10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u10
  r = spreadsheet.costpercapita_u10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v10
  r = spreadsheet.costpercapita_v10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w10
  r = spreadsheet.costpercapita_w10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y10
  r = spreadsheet.costpercapita_y10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z10
  r = spreadsheet.costpercapita_z10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa10
  r = spreadsheet.costpercapita_aa10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab10
  r = spreadsheet.costpercapita_ab10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac10
  r = spreadsheet.costpercapita_ac10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad10
  r = spreadsheet.costpercapita_ad10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae10
  r = spreadsheet.costpercapita_ae10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af10
  r = spreadsheet.costpercapita_af10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag10
  r = spreadsheet.costpercapita_ag10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai10
  r = spreadsheet.costpercapita_ai10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj10
  r = spreadsheet.costpercapita_aj10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak10
  r = spreadsheet.costpercapita_ak10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al10
  r = spreadsheet.costpercapita_al10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am10
  r = spreadsheet.costpercapita_am10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an10
  r = spreadsheet.costpercapita_an10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao10
  r = spreadsheet.costpercapita_ao10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap10
  r = spreadsheet.costpercapita_ap10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq10
  r = spreadsheet.costpercapita_aq10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as10
  r = spreadsheet.costpercapita_as10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at10
  r = spreadsheet.costpercapita_at10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av10
  r = spreadsheet.costpercapita_av10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw10
  r = spreadsheet.costpercapita_aw10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay10
  r = spreadsheet.costpercapita_ay10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az10
  r = spreadsheet.costpercapita_az10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba10
  r = spreadsheet.costpercapita_ba10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb10
  r = spreadsheet.costpercapita_bb10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc10
  r = spreadsheet.costpercapita_bc10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd10
  r = spreadsheet.costpercapita_bd10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be10
  r = spreadsheet.costpercapita_be10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf10
  r = spreadsheet.costpercapita_bf10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg10
  r = spreadsheet.costpercapita_bg10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi10
  r = spreadsheet.costpercapita_bi10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj10
  r = spreadsheet.costpercapita_bj10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk10
  r = spreadsheet.costpercapita_bk10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl10
  r = spreadsheet.costpercapita_bl10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm10
  r = spreadsheet.costpercapita_bm10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn10
  r = spreadsheet.costpercapita_bn10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo10
  r = spreadsheet.costpercapita_bo10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp10
  r = spreadsheet.costpercapita_bp10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq10
  r = spreadsheet.costpercapita_bq10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs10
  r = spreadsheet.costpercapita_bs10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt10
  r = spreadsheet.costpercapita_bt10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu10
  r = spreadsheet.costpercapita_bu10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv10
  r = spreadsheet.costpercapita_bv10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw10
  r = spreadsheet.costpercapita_bw10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx10
  r = spreadsheet.costpercapita_bx10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by10
  r = spreadsheet.costpercapita_by10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz10
  r = spreadsheet.costpercapita_bz10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca10
  r = spreadsheet.costpercapita_ca10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc10
  r = spreadsheet.costpercapita_cc10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd10
  r = spreadsheet.costpercapita_cd10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf10
  r = spreadsheet.costpercapita_cf10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg10
  r = spreadsheet.costpercapita_cg10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch10
  r = spreadsheet.costpercapita_ch10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci10
  r = spreadsheet.costpercapita_ci10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj10
  r = spreadsheet.costpercapita_cj10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck10
  r = spreadsheet.costpercapita_ck10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl10
  r = spreadsheet.costpercapita_cl10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm10
  r = spreadsheet.costpercapita_cm10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn10
  r = spreadsheet.costpercapita_cn10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp10
  r = spreadsheet.costpercapita_cp10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq10
  r = spreadsheet.costpercapita_cq10
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr10
  r = spreadsheet.costpercapita_cr10
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a11
  r = spreadsheet.costpercapita_a11
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b11
  r = spreadsheet.costpercapita_b11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar PV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c11
  r = spreadsheet.costpercapita_c11
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e11
  r = spreadsheet.costpercapita_e11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16609773171248304,r[:number])
end

def test_costpercapita_f11
  r = spreadsheet.costpercapita_f11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g11
  r = spreadsheet.costpercapita_g11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h11
  r = spreadsheet.costpercapita_h11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i11
  r = spreadsheet.costpercapita_i11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j11
  r = spreadsheet.costpercapita_j11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k11
  r = spreadsheet.costpercapita_k11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l11
  r = spreadsheet.costpercapita_l11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m11
  r = spreadsheet.costpercapita_m11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o11
  r = spreadsheet.costpercapita_o11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0005303556019847064,r[:number])
end

def test_costpercapita_p11
  r = spreadsheet.costpercapita_p11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.00024866283116682734,r[:number])
end

def test_costpercapita_q11
  r = spreadsheet.costpercapita_q11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r11
  r = spreadsheet.costpercapita_r11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s11
  r = spreadsheet.costpercapita_s11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t11
  r = spreadsheet.costpercapita_t11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u11
  r = spreadsheet.costpercapita_u11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v11
  r = spreadsheet.costpercapita_v11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w11
  r = spreadsheet.costpercapita_w11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y11
  r = spreadsheet.costpercapita_y11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z11
  r = spreadsheet.costpercapita_z11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa11
  r = spreadsheet.costpercapita_aa11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab11
  r = spreadsheet.costpercapita_ab11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac11
  r = spreadsheet.costpercapita_ac11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad11
  r = spreadsheet.costpercapita_ad11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae11
  r = spreadsheet.costpercapita_ae11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af11
  r = spreadsheet.costpercapita_af11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag11
  r = spreadsheet.costpercapita_ag11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai11
  r = spreadsheet.costpercapita_ai11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16662808731446777,r[:number])
end

def test_costpercapita_aj11
  r = spreadsheet.costpercapita_aj11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.00024866283116682734,r[:number])
end

def test_costpercapita_ak11
  r = spreadsheet.costpercapita_ak11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al11
  r = spreadsheet.costpercapita_al11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am11
  r = spreadsheet.costpercapita_am11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an11
  r = spreadsheet.costpercapita_an11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao11
  r = spreadsheet.costpercapita_ao11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap11
  r = spreadsheet.costpercapita_ap11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq11
  r = spreadsheet.costpercapita_aq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as11
  r = spreadsheet.costpercapita_as11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018541861127292735,r[:number])
end

def test_costpercapita_at11
  r = spreadsheet.costpercapita_at11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16767492447165547,r[:number])
end

def test_costpercapita_av11
  r = spreadsheet.costpercapita_av11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw11
  r = spreadsheet.costpercapita_aw11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay11
  r = spreadsheet.costpercapita_ay11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09965863902748984,r[:number])
end

def test_costpercapita_az11
  r = spreadsheet.costpercapita_az11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba11
  r = spreadsheet.costpercapita_ba11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb11
  r = spreadsheet.costpercapita_bb11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc11
  r = spreadsheet.costpercapita_bc11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd11
  r = spreadsheet.costpercapita_bd11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be11
  r = spreadsheet.costpercapita_be11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf11
  r = spreadsheet.costpercapita_bf11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg11
  r = spreadsheet.costpercapita_bg11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi11
  r = spreadsheet.costpercapita_bi11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09965863902748984,r[:number])
end

def test_costpercapita_bj11
  r = spreadsheet.costpercapita_bj11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk11
  r = spreadsheet.costpercapita_bk11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl11
  r = spreadsheet.costpercapita_bl11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm11
  r = spreadsheet.costpercapita_bm11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn11
  r = spreadsheet.costpercapita_bn11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo11
  r = spreadsheet.costpercapita_bo11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp11
  r = spreadsheet.costpercapita_bp11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq11
  r = spreadsheet.costpercapita_bq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs11
  r = spreadsheet.costpercapita_bs11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10018899462947455,r[:number])
end

def test_costpercapita_bt11
  r = spreadsheet.costpercapita_bt11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.00024866283116682734,r[:number])
end

def test_costpercapita_bu11
  r = spreadsheet.costpercapita_bu11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv11
  r = spreadsheet.costpercapita_bv11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw11
  r = spreadsheet.costpercapita_bw11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx11
  r = spreadsheet.costpercapita_bx11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by11
  r = spreadsheet.costpercapita_by11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz11
  r = spreadsheet.costpercapita_bz11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca11
  r = spreadsheet.costpercapita_ca11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc11
  r = spreadsheet.costpercapita_cc11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01115973971784904,r[:number])
end

def test_costpercapita_cd11
  r = spreadsheet.costpercapita_cd11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10123583178666225,r[:number])
end

def test_costpercapita_cf11
  r = spreadsheet.costpercapita_cf11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06643909268499322,r[:number])
end

def test_costpercapita_cg11
  r = spreadsheet.costpercapita_cg11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch11
  r = spreadsheet.costpercapita_ch11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci11
  r = spreadsheet.costpercapita_ci11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj11
  r = spreadsheet.costpercapita_cj11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck11
  r = spreadsheet.costpercapita_ck11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl11
  r = spreadsheet.costpercapita_cl11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm11
  r = spreadsheet.costpercapita_cm11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn11
  r = spreadsheet.costpercapita_cn11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp11
  r = spreadsheet.costpercapita_cp11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.007382121409443691,r[:number])
end

def test_costpercapita_cq11
  r = spreadsheet.costpercapita_cq11
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06643909268499322,r[:number])
end

def test_costpercapita_cr11
  r = spreadsheet.costpercapita_cr11
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a12
  r = spreadsheet.costpercapita_a12
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b12
  r = spreadsheet.costpercapita_b12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar thermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c12
  r = spreadsheet.costpercapita_c12
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e12
  r = spreadsheet.costpercapita_e12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f12
  r = spreadsheet.costpercapita_f12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g12
  r = spreadsheet.costpercapita_g12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h12
  r = spreadsheet.costpercapita_h12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i12
  r = spreadsheet.costpercapita_i12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j12
  r = spreadsheet.costpercapita_j12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k12
  r = spreadsheet.costpercapita_k12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l12
  r = spreadsheet.costpercapita_l12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m12
  r = spreadsheet.costpercapita_m12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o12
  r = spreadsheet.costpercapita_o12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p12
  r = spreadsheet.costpercapita_p12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q12
  r = spreadsheet.costpercapita_q12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r12
  r = spreadsheet.costpercapita_r12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s12
  r = spreadsheet.costpercapita_s12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t12
  r = spreadsheet.costpercapita_t12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u12
  r = spreadsheet.costpercapita_u12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v12
  r = spreadsheet.costpercapita_v12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w12
  r = spreadsheet.costpercapita_w12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y12
  r = spreadsheet.costpercapita_y12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z12
  r = spreadsheet.costpercapita_z12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa12
  r = spreadsheet.costpercapita_aa12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab12
  r = spreadsheet.costpercapita_ab12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac12
  r = spreadsheet.costpercapita_ac12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad12
  r = spreadsheet.costpercapita_ad12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae12
  r = spreadsheet.costpercapita_ae12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af12
  r = spreadsheet.costpercapita_af12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag12
  r = spreadsheet.costpercapita_ag12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai12
  r = spreadsheet.costpercapita_ai12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj12
  r = spreadsheet.costpercapita_aj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak12
  r = spreadsheet.costpercapita_ak12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al12
  r = spreadsheet.costpercapita_al12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am12
  r = spreadsheet.costpercapita_am12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an12
  r = spreadsheet.costpercapita_an12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao12
  r = spreadsheet.costpercapita_ao12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap12
  r = spreadsheet.costpercapita_ap12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq12
  r = spreadsheet.costpercapita_aq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as12
  r = spreadsheet.costpercapita_as12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at12
  r = spreadsheet.costpercapita_at12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av12
  r = spreadsheet.costpercapita_av12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw12
  r = spreadsheet.costpercapita_aw12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay12
  r = spreadsheet.costpercapita_ay12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az12
  r = spreadsheet.costpercapita_az12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba12
  r = spreadsheet.costpercapita_ba12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb12
  r = spreadsheet.costpercapita_bb12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc12
  r = spreadsheet.costpercapita_bc12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd12
  r = spreadsheet.costpercapita_bd12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be12
  r = spreadsheet.costpercapita_be12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf12
  r = spreadsheet.costpercapita_bf12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg12
  r = spreadsheet.costpercapita_bg12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi12
  r = spreadsheet.costpercapita_bi12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj12
  r = spreadsheet.costpercapita_bj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk12
  r = spreadsheet.costpercapita_bk12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl12
  r = spreadsheet.costpercapita_bl12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm12
  r = spreadsheet.costpercapita_bm12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn12
  r = spreadsheet.costpercapita_bn12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo12
  r = spreadsheet.costpercapita_bo12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp12
  r = spreadsheet.costpercapita_bp12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq12
  r = spreadsheet.costpercapita_bq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs12
  r = spreadsheet.costpercapita_bs12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt12
  r = spreadsheet.costpercapita_bt12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu12
  r = spreadsheet.costpercapita_bu12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv12
  r = spreadsheet.costpercapita_bv12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw12
  r = spreadsheet.costpercapita_bw12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx12
  r = spreadsheet.costpercapita_bx12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by12
  r = spreadsheet.costpercapita_by12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz12
  r = spreadsheet.costpercapita_bz12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca12
  r = spreadsheet.costpercapita_ca12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc12
  r = spreadsheet.costpercapita_cc12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd12
  r = spreadsheet.costpercapita_cd12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf12
  r = spreadsheet.costpercapita_cf12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg12
  r = spreadsheet.costpercapita_cg12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch12
  r = spreadsheet.costpercapita_ch12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci12
  r = spreadsheet.costpercapita_ci12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj12
  r = spreadsheet.costpercapita_cj12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck12
  r = spreadsheet.costpercapita_ck12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl12
  r = spreadsheet.costpercapita_cl12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm12
  r = spreadsheet.costpercapita_cm12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn12
  r = spreadsheet.costpercapita_cn12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp12
  r = spreadsheet.costpercapita_cp12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq12
  r = spreadsheet.costpercapita_cq12
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr12
  r = spreadsheet.costpercapita_cr12
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a13
  r = spreadsheet.costpercapita_a13
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b13
  r = spreadsheet.costpercapita_b13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c13
  r = spreadsheet.costpercapita_c13
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e13
  r = spreadsheet.costpercapita_e13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f13
  r = spreadsheet.costpercapita_f13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g13
  r = spreadsheet.costpercapita_g13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h13
  r = spreadsheet.costpercapita_h13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i13
  r = spreadsheet.costpercapita_i13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j13
  r = spreadsheet.costpercapita_j13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k13
  r = spreadsheet.costpercapita_k13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l13
  r = spreadsheet.costpercapita_l13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m13
  r = spreadsheet.costpercapita_m13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o13
  r = spreadsheet.costpercapita_o13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p13
  r = spreadsheet.costpercapita_p13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q13
  r = spreadsheet.costpercapita_q13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r13
  r = spreadsheet.costpercapita_r13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s13
  r = spreadsheet.costpercapita_s13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t13
  r = spreadsheet.costpercapita_t13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u13
  r = spreadsheet.costpercapita_u13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v13
  r = spreadsheet.costpercapita_v13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w13
  r = spreadsheet.costpercapita_w13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y13
  r = spreadsheet.costpercapita_y13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z13
  r = spreadsheet.costpercapita_z13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa13
  r = spreadsheet.costpercapita_aa13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab13
  r = spreadsheet.costpercapita_ab13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac13
  r = spreadsheet.costpercapita_ac13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad13
  r = spreadsheet.costpercapita_ad13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae13
  r = spreadsheet.costpercapita_ae13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af13
  r = spreadsheet.costpercapita_af13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag13
  r = spreadsheet.costpercapita_ag13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai13
  r = spreadsheet.costpercapita_ai13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj13
  r = spreadsheet.costpercapita_aj13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak13
  r = spreadsheet.costpercapita_ak13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al13
  r = spreadsheet.costpercapita_al13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am13
  r = spreadsheet.costpercapita_am13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an13
  r = spreadsheet.costpercapita_an13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao13
  r = spreadsheet.costpercapita_ao13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap13
  r = spreadsheet.costpercapita_ap13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq13
  r = spreadsheet.costpercapita_aq13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as13
  r = spreadsheet.costpercapita_as13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at13
  r = spreadsheet.costpercapita_at13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av13
  r = spreadsheet.costpercapita_av13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw13
  r = spreadsheet.costpercapita_aw13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay13
  r = spreadsheet.costpercapita_ay13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az13
  r = spreadsheet.costpercapita_az13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba13
  r = spreadsheet.costpercapita_ba13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb13
  r = spreadsheet.costpercapita_bb13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc13
  r = spreadsheet.costpercapita_bc13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd13
  r = spreadsheet.costpercapita_bd13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be13
  r = spreadsheet.costpercapita_be13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf13
  r = spreadsheet.costpercapita_bf13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg13
  r = spreadsheet.costpercapita_bg13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi13
  r = spreadsheet.costpercapita_bi13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj13
  r = spreadsheet.costpercapita_bj13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk13
  r = spreadsheet.costpercapita_bk13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl13
  r = spreadsheet.costpercapita_bl13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm13
  r = spreadsheet.costpercapita_bm13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn13
  r = spreadsheet.costpercapita_bn13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo13
  r = spreadsheet.costpercapita_bo13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp13
  r = spreadsheet.costpercapita_bp13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq13
  r = spreadsheet.costpercapita_bq13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs13
  r = spreadsheet.costpercapita_bs13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt13
  r = spreadsheet.costpercapita_bt13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu13
  r = spreadsheet.costpercapita_bu13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv13
  r = spreadsheet.costpercapita_bv13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw13
  r = spreadsheet.costpercapita_bw13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx13
  r = spreadsheet.costpercapita_bx13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by13
  r = spreadsheet.costpercapita_by13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz13
  r = spreadsheet.costpercapita_bz13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca13
  r = spreadsheet.costpercapita_ca13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc13
  r = spreadsheet.costpercapita_cc13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd13
  r = spreadsheet.costpercapita_cd13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf13
  r = spreadsheet.costpercapita_cf13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg13
  r = spreadsheet.costpercapita_cg13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch13
  r = spreadsheet.costpercapita_ch13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci13
  r = spreadsheet.costpercapita_ci13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj13
  r = spreadsheet.costpercapita_cj13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck13
  r = spreadsheet.costpercapita_ck13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl13
  r = spreadsheet.costpercapita_cl13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm13
  r = spreadsheet.costpercapita_cm13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn13
  r = spreadsheet.costpercapita_cn13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp13
  r = spreadsheet.costpercapita_cp13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq13
  r = spreadsheet.costpercapita_cq13
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr13
  r = spreadsheet.costpercapita_cr13
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a14
  r = spreadsheet.costpercapita_a14
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b14
  r = spreadsheet.costpercapita_b14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomatter to fuel conversion",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c14
  r = spreadsheet.costpercapita_c14
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e14
  r = spreadsheet.costpercapita_e14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9266738425531527,r[:number])
end

def test_costpercapita_f14
  r = spreadsheet.costpercapita_f14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3282229011529925,r[:number])
end

def test_costpercapita_g14
  r = spreadsheet.costpercapita_g14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9353571036695559,r[:number])
end

def test_costpercapita_h14
  r = spreadsheet.costpercapita_h14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7267620460285636,r[:number])
end

def test_costpercapita_i14
  r = spreadsheet.costpercapita_i14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6768015553144803,r[:number])
end

def test_costpercapita_j14
  r = spreadsheet.costpercapita_j14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6593697343923347,r[:number])
end

def test_costpercapita_k14
  r = spreadsheet.costpercapita_k14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6474148722707527,r[:number])
end

def test_costpercapita_l14
  r = spreadsheet.costpercapita_l14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6399122681144427,r[:number])
end

def test_costpercapita_m14
  r = spreadsheet.costpercapita_m14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.49377724952685453,r[:number])
end

def test_costpercapita_o14
  r = spreadsheet.costpercapita_o14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8326490256198267,r[:number])
end

def test_costpercapita_p14
  r = spreadsheet.costpercapita_p14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.524469300614852,r[:number])
end

def test_costpercapita_q14
  r = spreadsheet.costpercapita_q14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3029866405482067,r[:number])
end

def test_costpercapita_r14
  r = spreadsheet.costpercapita_r14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.206094784012336,r[:number])
end

def test_costpercapita_s14
  r = spreadsheet.costpercapita_s14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0606432763574514,r[:number])
end

def test_costpercapita_t14
  r = spreadsheet.costpercapita_t14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9773929902414875,r[:number])
end

def test_costpercapita_u14
  r = spreadsheet.costpercapita_u14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9134491104282723,r[:number])
end

def test_costpercapita_v14
  r = spreadsheet.costpercapita_v14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8657063083378267,r[:number])
end

def test_costpercapita_w14
  r = spreadsheet.costpercapita_w14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8328175903738055,r[:number])
end

def test_costpercapita_y14
  r = spreadsheet.costpercapita_y14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z14
  r = spreadsheet.costpercapita_z14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa14
  r = spreadsheet.costpercapita_aa14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab14
  r = spreadsheet.costpercapita_ab14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac14
  r = spreadsheet.costpercapita_ac14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad14
  r = spreadsheet.costpercapita_ad14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae14
  r = spreadsheet.costpercapita_ae14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af14
  r = spreadsheet.costpercapita_af14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag14
  r = spreadsheet.costpercapita_ag14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai14
  r = spreadsheet.costpercapita_ai14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7593228681729793,r[:number])
end

def test_costpercapita_aj14
  r = spreadsheet.costpercapita_aj14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8526922017678444,r[:number])
end

def test_costpercapita_ak14
  r = spreadsheet.costpercapita_ak14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.238343744217763,r[:number])
end

def test_costpercapita_al14
  r = spreadsheet.costpercapita_al14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9328568300409,r[:number])
end

def test_costpercapita_am14
  r = spreadsheet.costpercapita_am14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7374448316719318,r[:number])
end

def test_costpercapita_an14
  r = spreadsheet.costpercapita_an14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6367627246338223,r[:number])
end

def test_costpercapita_ao14
  r = spreadsheet.costpercapita_ao14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.560863982699025,r[:number])
end

def test_costpercapita_ap14
  r = spreadsheet.costpercapita_ap14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.505618576452269,r[:number])
end

def test_costpercapita_aq14
  r = spreadsheet.costpercapita_aq14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.32659483990066,r[:number])
end

def test_costpercapita_as14
  r = spreadsheet.costpercapita_as14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9500556221730223,r[:number])
end

def test_costpercapita_at14
  r = spreadsheet.costpercapita_at14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.16375328678183,r[:number])
end

def test_costpercapita_av14
  r = spreadsheet.costpercapita_av14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw14
  r = spreadsheet.costpercapita_aw14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay14
  r = spreadsheet.costpercapita_ay14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5560043055318916,r[:number])
end

def test_costpercapita_az14
  r = spreadsheet.costpercapita_az14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3282229011529925,r[:number])
end

def test_costpercapita_ba14
  r = spreadsheet.costpercapita_ba14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9353571036695559,r[:number])
end

def test_costpercapita_bb14
  r = spreadsheet.costpercapita_bb14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7267620460285636,r[:number])
end

def test_costpercapita_bc14
  r = spreadsheet.costpercapita_bc14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6768015553144803,r[:number])
end

def test_costpercapita_bd14
  r = spreadsheet.costpercapita_bd14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6593697343923347,r[:number])
end

def test_costpercapita_be14
  r = spreadsheet.costpercapita_be14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6474148722707527,r[:number])
end

def test_costpercapita_bf14
  r = spreadsheet.costpercapita_bf14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6399122681144427,r[:number])
end

def test_costpercapita_bg14
  r = spreadsheet.costpercapita_bg14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.49377724952685453,r[:number])
end

def test_costpercapita_bi14
  r = spreadsheet.costpercapita_bi14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5560043055318916,r[:number])
end

def test_costpercapita_bj14
  r = spreadsheet.costpercapita_bj14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3282229011529925,r[:number])
end

def test_costpercapita_bk14
  r = spreadsheet.costpercapita_bk14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9353571036695559,r[:number])
end

def test_costpercapita_bl14
  r = spreadsheet.costpercapita_bl14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7267620460285636,r[:number])
end

def test_costpercapita_bm14
  r = spreadsheet.costpercapita_bm14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6768015553144803,r[:number])
end

def test_costpercapita_bn14
  r = spreadsheet.costpercapita_bn14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6593697343923347,r[:number])
end

def test_costpercapita_bo14
  r = spreadsheet.costpercapita_bo14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6474148722707527,r[:number])
end

def test_costpercapita_bp14
  r = spreadsheet.costpercapita_bp14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6399122681144427,r[:number])
end

def test_costpercapita_bq14
  r = spreadsheet.costpercapita_bq14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.49377724952685453,r[:number])
end

def test_costpercapita_bs14
  r = spreadsheet.costpercapita_bs14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.388653331151718,r[:number])
end

def test_costpercapita_bt14
  r = spreadsheet.costpercapita_bt14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8526922017678444,r[:number])
end

def test_costpercapita_bu14
  r = spreadsheet.costpercapita_bu14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.238343744217763,r[:number])
end

def test_costpercapita_bv14
  r = spreadsheet.costpercapita_bv14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9328568300409,r[:number])
end

def test_costpercapita_bw14
  r = spreadsheet.costpercapita_bw14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7374448316719318,r[:number])
end

def test_costpercapita_bx14
  r = spreadsheet.costpercapita_bx14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6367627246338223,r[:number])
end

def test_costpercapita_by14
  r = spreadsheet.costpercapita_by14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.560863982699025,r[:number])
end

def test_costpercapita_bz14
  r = spreadsheet.costpercapita_bz14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.505618576452269,r[:number])
end

def test_costpercapita_ca14
  r = spreadsheet.costpercapita_ca14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.32659483990066,r[:number])
end

def test_costpercapita_cc14
  r = spreadsheet.costpercapita_cc14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.908870118059548,r[:number])
end

def test_costpercapita_cd14
  r = spreadsheet.costpercapita_cd14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.79308374976057,r[:number])
end

def test_costpercapita_cf14
  r = spreadsheet.costpercapita_cf14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.370669537021261,r[:number])
end

def test_costpercapita_cg14
  r = spreadsheet.costpercapita_cg14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch14
  r = spreadsheet.costpercapita_ch14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci14
  r = spreadsheet.costpercapita_ci14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj14
  r = spreadsheet.costpercapita_cj14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck14
  r = spreadsheet.costpercapita_ck14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl14
  r = spreadsheet.costpercapita_cl14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm14
  r = spreadsheet.costpercapita_cm14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn14
  r = spreadsheet.costpercapita_cn14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp14
  r = spreadsheet.costpercapita_cp14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.041185504113473444,r[:number])
end

def test_costpercapita_cq14
  r = spreadsheet.costpercapita_cq14
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.370669537021261,r[:number])
end

def test_costpercapita_cr14
  r = spreadsheet.costpercapita_cr14
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a15
  r = spreadsheet.costpercapita_a15
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b15
  r = spreadsheet.costpercapita_b15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c15
  r = spreadsheet.costpercapita_c15
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e15
  r = spreadsheet.costpercapita_e15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f15
  r = spreadsheet.costpercapita_f15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g15
  r = spreadsheet.costpercapita_g15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h15
  r = spreadsheet.costpercapita_h15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i15
  r = spreadsheet.costpercapita_i15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j15
  r = spreadsheet.costpercapita_j15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k15
  r = spreadsheet.costpercapita_k15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l15
  r = spreadsheet.costpercapita_l15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m15
  r = spreadsheet.costpercapita_m15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o15
  r = spreadsheet.costpercapita_o15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p15
  r = spreadsheet.costpercapita_p15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q15
  r = spreadsheet.costpercapita_q15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r15
  r = spreadsheet.costpercapita_r15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s15
  r = spreadsheet.costpercapita_s15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t15
  r = spreadsheet.costpercapita_t15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u15
  r = spreadsheet.costpercapita_u15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v15
  r = spreadsheet.costpercapita_v15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w15
  r = spreadsheet.costpercapita_w15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y15
  r = spreadsheet.costpercapita_y15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3144566461502731,r[:number])
end

def test_costpercapita_z15
  r = spreadsheet.costpercapita_z15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.112223303813976,r[:number])
end

def test_costpercapita_aa15
  r = spreadsheet.costpercapita_aa15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9221238599681264,r[:number])
end

def test_costpercapita_ab15
  r = spreadsheet.costpercapita_ab15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7446430842599925,r[:number])
end

def test_costpercapita_ac15
  r = spreadsheet.costpercapita_ac15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5794394569566704,r[:number])
end

def test_costpercapita_ad15
  r = spreadsheet.costpercapita_ad15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42434276802360144,r[:number])
end

def test_costpercapita_ae15
  r = spreadsheet.costpercapita_ae15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2768620468308644,r[:number])
end

def test_costpercapita_af15
  r = spreadsheet.costpercapita_af15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13566961169205746,r[:number])
end

def test_costpercapita_ag15
  r = spreadsheet.costpercapita_ag15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai15
  r = spreadsheet.costpercapita_ai15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3144566461502731,r[:number])
end

def test_costpercapita_aj15
  r = spreadsheet.costpercapita_aj15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.112223303813976,r[:number])
end

def test_costpercapita_ak15
  r = spreadsheet.costpercapita_ak15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9221238599681264,r[:number])
end

def test_costpercapita_al15
  r = spreadsheet.costpercapita_al15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7446430842599925,r[:number])
end

def test_costpercapita_am15
  r = spreadsheet.costpercapita_am15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5794394569566704,r[:number])
end

def test_costpercapita_an15
  r = spreadsheet.costpercapita_an15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42434276802360144,r[:number])
end

def test_costpercapita_ao15
  r = spreadsheet.costpercapita_ao15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2768620468308644,r[:number])
end

def test_costpercapita_ap15
  r = spreadsheet.costpercapita_ap15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13566961169205746,r[:number])
end

def test_costpercapita_aq15
  r = spreadsheet.costpercapita_aq15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as15
  r = spreadsheet.costpercapita_as15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6121956419661735,r[:number])
end

def test_costpercapita_at15
  r = spreadsheet.costpercapita_at15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.543179796510623,r[:number])
end

def test_costpercapita_av15
  r = spreadsheet.costpercapita_av15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw15
  r = spreadsheet.costpercapita_aw15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay15
  r = spreadsheet.costpercapita_ay15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az15
  r = spreadsheet.costpercapita_az15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba15
  r = spreadsheet.costpercapita_ba15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb15
  r = spreadsheet.costpercapita_bb15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc15
  r = spreadsheet.costpercapita_bc15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd15
  r = spreadsheet.costpercapita_bd15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be15
  r = spreadsheet.costpercapita_be15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf15
  r = spreadsheet.costpercapita_bf15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg15
  r = spreadsheet.costpercapita_bg15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi15
  r = spreadsheet.costpercapita_bi15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj15
  r = spreadsheet.costpercapita_bj15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk15
  r = spreadsheet.costpercapita_bk15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl15
  r = spreadsheet.costpercapita_bl15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm15
  r = spreadsheet.costpercapita_bm15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn15
  r = spreadsheet.costpercapita_bn15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo15
  r = spreadsheet.costpercapita_bo15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp15
  r = spreadsheet.costpercapita_bp15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq15
  r = spreadsheet.costpercapita_bq15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs15
  r = spreadsheet.costpercapita_bs15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3144566461502731,r[:number])
end

def test_costpercapita_bt15
  r = spreadsheet.costpercapita_bt15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.112223303813976,r[:number])
end

def test_costpercapita_bu15
  r = spreadsheet.costpercapita_bu15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9221238599681264,r[:number])
end

def test_costpercapita_bv15
  r = spreadsheet.costpercapita_bv15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7446430842599925,r[:number])
end

def test_costpercapita_bw15
  r = spreadsheet.costpercapita_bw15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5794394569566704,r[:number])
end

def test_costpercapita_bx15
  r = spreadsheet.costpercapita_bx15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.42434276802360144,r[:number])
end

def test_costpercapita_by15
  r = spreadsheet.costpercapita_by15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2768620468308644,r[:number])
end

def test_costpercapita_bz15
  r = spreadsheet.costpercapita_bz15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13566961169205746,r[:number])
end

def test_costpercapita_ca15
  r = spreadsheet.costpercapita_ca15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc15
  r = spreadsheet.costpercapita_cc15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6121956419661735,r[:number])
end

def test_costpercapita_cd15
  r = spreadsheet.costpercapita_cd15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.543179796510623,r[:number])
end

def test_costpercapita_cf15
  r = spreadsheet.costpercapita_cf15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg15
  r = spreadsheet.costpercapita_cg15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch15
  r = spreadsheet.costpercapita_ch15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci15
  r = spreadsheet.costpercapita_ci15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj15
  r = spreadsheet.costpercapita_cj15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck15
  r = spreadsheet.costpercapita_ck15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl15
  r = spreadsheet.costpercapita_cl15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm15
  r = spreadsheet.costpercapita_cm15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn15
  r = spreadsheet.costpercapita_cn15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp15
  r = spreadsheet.costpercapita_cp15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq15
  r = spreadsheet.costpercapita_cq15
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr15
  r = spreadsheet.costpercapita_cr15
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a16
  r = spreadsheet.costpercapita_a16
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b16
  r = spreadsheet.costpercapita_b16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c16
  r = spreadsheet.costpercapita_c16
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e16
  r = spreadsheet.costpercapita_e16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f16
  r = spreadsheet.costpercapita_f16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g16
  r = spreadsheet.costpercapita_g16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h16
  r = spreadsheet.costpercapita_h16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i16
  r = spreadsheet.costpercapita_i16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j16
  r = spreadsheet.costpercapita_j16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k16
  r = spreadsheet.costpercapita_k16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l16
  r = spreadsheet.costpercapita_l16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m16
  r = spreadsheet.costpercapita_m16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o16
  r = spreadsheet.costpercapita_o16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p16
  r = spreadsheet.costpercapita_p16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q16
  r = spreadsheet.costpercapita_q16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r16
  r = spreadsheet.costpercapita_r16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s16
  r = spreadsheet.costpercapita_s16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t16
  r = spreadsheet.costpercapita_t16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u16
  r = spreadsheet.costpercapita_u16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v16
  r = spreadsheet.costpercapita_v16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w16
  r = spreadsheet.costpercapita_w16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y16
  r = spreadsheet.costpercapita_y16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8832625911033889,r[:number])
end

def test_costpercapita_z16
  r = spreadsheet.costpercapita_z16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0480148329904861,r[:number])
end

def test_costpercapita_aa16
  r = spreadsheet.costpercapita_aa16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.206911122329135,r[:number])
end

def test_costpercapita_ab16
  r = spreadsheet.costpercapita_ab16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3624503548764788,r[:number])
end

def test_costpercapita_ac16
  r = spreadsheet.costpercapita_ac16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5185868169771914,r[:number])
end

def test_costpercapita_ad16
  r = spreadsheet.costpercapita_ad16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6773994775248677,r[:number])
end

def test_costpercapita_ae16
  r = spreadsheet.costpercapita_ae16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.837918417810972,r[:number])
end

def test_costpercapita_af16
  r = spreadsheet.costpercapita_af16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9995801801778652,r[:number])
end

def test_costpercapita_ag16
  r = spreadsheet.costpercapita_ag16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.162939903020301,r[:number])
end

def test_costpercapita_ai16
  r = spreadsheet.costpercapita_ai16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8832625911033889,r[:number])
end

def test_costpercapita_aj16
  r = spreadsheet.costpercapita_aj16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0480148329904861,r[:number])
end

def test_costpercapita_ak16
  r = spreadsheet.costpercapita_ak16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.206911122329135,r[:number])
end

def test_costpercapita_al16
  r = spreadsheet.costpercapita_al16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3624503548764788,r[:number])
end

def test_costpercapita_am16
  r = spreadsheet.costpercapita_am16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5185868169771914,r[:number])
end

def test_costpercapita_an16
  r = spreadsheet.costpercapita_an16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6773994775248677,r[:number])
end

def test_costpercapita_ao16
  r = spreadsheet.costpercapita_ao16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.837918417810972,r[:number])
end

def test_costpercapita_ap16
  r = spreadsheet.costpercapita_ap16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9995801801778652,r[:number])
end

def test_costpercapita_aq16
  r = spreadsheet.costpercapita_aq16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.162939903020301,r[:number])
end

def test_costpercapita_as16
  r = spreadsheet.costpercapita_as16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5218959663122986,r[:number])
end

def test_costpercapita_at16
  r = spreadsheet.costpercapita_at16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.218049515829204,r[:number])
end

def test_costpercapita_av16
  r = spreadsheet.costpercapita_av16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw16
  r = spreadsheet.costpercapita_aw16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay16
  r = spreadsheet.costpercapita_ay16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az16
  r = spreadsheet.costpercapita_az16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba16
  r = spreadsheet.costpercapita_ba16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb16
  r = spreadsheet.costpercapita_bb16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc16
  r = spreadsheet.costpercapita_bc16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd16
  r = spreadsheet.costpercapita_bd16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be16
  r = spreadsheet.costpercapita_be16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf16
  r = spreadsheet.costpercapita_bf16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg16
  r = spreadsheet.costpercapita_bg16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi16
  r = spreadsheet.costpercapita_bi16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj16
  r = spreadsheet.costpercapita_bj16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk16
  r = spreadsheet.costpercapita_bk16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl16
  r = spreadsheet.costpercapita_bl16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm16
  r = spreadsheet.costpercapita_bm16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn16
  r = spreadsheet.costpercapita_bn16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo16
  r = spreadsheet.costpercapita_bo16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp16
  r = spreadsheet.costpercapita_bp16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq16
  r = spreadsheet.costpercapita_bq16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs16
  r = spreadsheet.costpercapita_bs16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8832625911033889,r[:number])
end

def test_costpercapita_bt16
  r = spreadsheet.costpercapita_bt16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0480148329904861,r[:number])
end

def test_costpercapita_bu16
  r = spreadsheet.costpercapita_bu16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.206911122329135,r[:number])
end

def test_costpercapita_bv16
  r = spreadsheet.costpercapita_bv16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3624503548764788,r[:number])
end

def test_costpercapita_bw16
  r = spreadsheet.costpercapita_bw16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5185868169771914,r[:number])
end

def test_costpercapita_bx16
  r = spreadsheet.costpercapita_bx16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6773994775248677,r[:number])
end

def test_costpercapita_by16
  r = spreadsheet.costpercapita_by16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.837918417810972,r[:number])
end

def test_costpercapita_bz16
  r = spreadsheet.costpercapita_bz16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9995801801778652,r[:number])
end

def test_costpercapita_ca16
  r = spreadsheet.costpercapita_ca16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.162939903020301,r[:number])
end

def test_costpercapita_cc16
  r = spreadsheet.costpercapita_cc16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5218959663122986,r[:number])
end

def test_costpercapita_cd16
  r = spreadsheet.costpercapita_cd16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.218049515829204,r[:number])
end

def test_costpercapita_cf16
  r = spreadsheet.costpercapita_cf16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg16
  r = spreadsheet.costpercapita_cg16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch16
  r = spreadsheet.costpercapita_ch16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci16
  r = spreadsheet.costpercapita_ci16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj16
  r = spreadsheet.costpercapita_cj16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck16
  r = spreadsheet.costpercapita_ck16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl16
  r = spreadsheet.costpercapita_cl16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm16
  r = spreadsheet.costpercapita_cm16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn16
  r = spreadsheet.costpercapita_cn16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp16
  r = spreadsheet.costpercapita_cp16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq16
  r = spreadsheet.costpercapita_cq16
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr16
  r = spreadsheet.costpercapita_cr16
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a17
  r = spreadsheet.costpercapita_a17
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Emissions",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b17
  r = spreadsheet.costpercapita_b17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c17
  r = spreadsheet.costpercapita_c17
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e17
  r = spreadsheet.costpercapita_e17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f17
  r = spreadsheet.costpercapita_f17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g17
  r = spreadsheet.costpercapita_g17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h17
  r = spreadsheet.costpercapita_h17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i17
  r = spreadsheet.costpercapita_i17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j17
  r = spreadsheet.costpercapita_j17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k17
  r = spreadsheet.costpercapita_k17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l17
  r = spreadsheet.costpercapita_l17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m17
  r = spreadsheet.costpercapita_m17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o17
  r = spreadsheet.costpercapita_o17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7392361963065065e-07,r[:number])
end

def test_costpercapita_p17
  r = spreadsheet.costpercapita_p17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.245687591407266e-06,r[:number])
end

def test_costpercapita_q17
  r = spreadsheet.costpercapita_q17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9664368179411587e-05,r[:number])
end

def test_costpercapita_r17
  r = spreadsheet.costpercapita_r17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.13315981015922e-05,r[:number])
end

def test_costpercapita_s17
  r = spreadsheet.costpercapita_s17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.472478050202473e-05,r[:number])
end

def test_costpercapita_t17
  r = spreadsheet.costpercapita_t17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.9919959788806734e-05,r[:number])
end

def test_costpercapita_u17
  r = spreadsheet.costpercapita_u17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.691191875223806e-05,r[:number])
end

def test_costpercapita_v17
  r = spreadsheet.costpercapita_v17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568708999761658e-05,r[:number])
end

def test_costpercapita_w17
  r = spreadsheet.costpercapita_w17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8368886241673137e-06,r[:number])
end

def test_costpercapita_y17
  r = spreadsheet.costpercapita_y17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z17
  r = spreadsheet.costpercapita_z17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa17
  r = spreadsheet.costpercapita_aa17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab17
  r = spreadsheet.costpercapita_ab17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac17
  r = spreadsheet.costpercapita_ac17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad17
  r = spreadsheet.costpercapita_ad17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae17
  r = spreadsheet.costpercapita_ae17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af17
  r = spreadsheet.costpercapita_af17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag17
  r = spreadsheet.costpercapita_ag17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai17
  r = spreadsheet.costpercapita_ai17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7392361963065065e-07,r[:number])
end

def test_costpercapita_aj17
  r = spreadsheet.costpercapita_aj17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.245687591407266e-06,r[:number])
end

def test_costpercapita_ak17
  r = spreadsheet.costpercapita_ak17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9664368179411587e-05,r[:number])
end

def test_costpercapita_al17
  r = spreadsheet.costpercapita_al17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.13315981015922e-05,r[:number])
end

def test_costpercapita_am17
  r = spreadsheet.costpercapita_am17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.472478050202473e-05,r[:number])
end

def test_costpercapita_an17
  r = spreadsheet.costpercapita_an17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.9919959788806734e-05,r[:number])
end

def test_costpercapita_ao17
  r = spreadsheet.costpercapita_ao17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.691191875223806e-05,r[:number])
end

def test_costpercapita_ap17
  r = spreadsheet.costpercapita_ap17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568708999761658e-05,r[:number])
end

def test_costpercapita_aq17
  r = spreadsheet.costpercapita_aq17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8368886241673137e-06,r[:number])
end

def test_costpercapita_as17
  r = spreadsheet.costpercapita_as17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.764402390632168e-05,r[:number])
end

def test_costpercapita_at17
  r = spreadsheet.costpercapita_at17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0007211553573064599,r[:number])
end

def test_costpercapita_av17
  r = spreadsheet.costpercapita_av17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw17
  r = spreadsheet.costpercapita_aw17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay17
  r = spreadsheet.costpercapita_ay17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az17
  r = spreadsheet.costpercapita_az17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba17
  r = spreadsheet.costpercapita_ba17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb17
  r = spreadsheet.costpercapita_bb17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc17
  r = spreadsheet.costpercapita_bc17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd17
  r = spreadsheet.costpercapita_bd17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be17
  r = spreadsheet.costpercapita_be17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf17
  r = spreadsheet.costpercapita_bf17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg17
  r = spreadsheet.costpercapita_bg17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi17
  r = spreadsheet.costpercapita_bi17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj17
  r = spreadsheet.costpercapita_bj17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk17
  r = spreadsheet.costpercapita_bk17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl17
  r = spreadsheet.costpercapita_bl17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm17
  r = spreadsheet.costpercapita_bm17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn17
  r = spreadsheet.costpercapita_bn17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo17
  r = spreadsheet.costpercapita_bo17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp17
  r = spreadsheet.costpercapita_bp17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq17
  r = spreadsheet.costpercapita_bq17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs17
  r = spreadsheet.costpercapita_bs17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7392361963065065e-07,r[:number])
end

def test_costpercapita_bt17
  r = spreadsheet.costpercapita_bt17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.245687591407266e-06,r[:number])
end

def test_costpercapita_bu17
  r = spreadsheet.costpercapita_bu17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9664368179411587e-05,r[:number])
end

def test_costpercapita_bv17
  r = spreadsheet.costpercapita_bv17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.13315981015922e-05,r[:number])
end

def test_costpercapita_bw17
  r = spreadsheet.costpercapita_bw17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.472478050202473e-05,r[:number])
end

def test_costpercapita_bx17
  r = spreadsheet.costpercapita_bx17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.9919959788806734e-05,r[:number])
end

def test_costpercapita_by17
  r = spreadsheet.costpercapita_by17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.691191875223806e-05,r[:number])
end

def test_costpercapita_bz17
  r = spreadsheet.costpercapita_bz17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568708999761658e-05,r[:number])
end

def test_costpercapita_ca17
  r = spreadsheet.costpercapita_ca17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8368886241673137e-06,r[:number])
end

def test_costpercapita_cc17
  r = spreadsheet.costpercapita_cc17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.764402390632168e-05,r[:number])
end

def test_costpercapita_cd17
  r = spreadsheet.costpercapita_cd17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0007211553573064599,r[:number])
end

def test_costpercapita_cf17
  r = spreadsheet.costpercapita_cf17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg17
  r = spreadsheet.costpercapita_cg17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch17
  r = spreadsheet.costpercapita_ch17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci17
  r = spreadsheet.costpercapita_ci17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj17
  r = spreadsheet.costpercapita_cj17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck17
  r = spreadsheet.costpercapita_ck17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl17
  r = spreadsheet.costpercapita_cl17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm17
  r = spreadsheet.costpercapita_cm17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn17
  r = spreadsheet.costpercapita_cn17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp17
  r = spreadsheet.costpercapita_cp17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq17
  r = spreadsheet.costpercapita_cq17
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr17
  r = spreadsheet.costpercapita_cr17
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a18
  r = spreadsheet.costpercapita_a18
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b18
  r = spreadsheet.costpercapita_b18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy from waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c18
  r = spreadsheet.costpercapita_c18
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e18
  r = spreadsheet.costpercapita_e18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.610082127493534,r[:number])
end

def test_costpercapita_f18
  r = spreadsheet.costpercapita_f18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.52529637656604,r[:number])
end

def test_costpercapita_g18
  r = spreadsheet.costpercapita_g18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.438807021356345,r[:number])
end

def test_costpercapita_h18
  r = spreadsheet.costpercapita_h18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891769562335881,r[:number])
end

def test_costpercapita_i18
  r = spreadsheet.costpercapita_i18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.343588766133642,r[:number])
end

def test_costpercapita_j18
  r = spreadsheet.costpercapita_j18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.570537352671753,r[:number])
end

def test_costpercapita_k18
  r = spreadsheet.costpercapita_k18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.80394187917491,r[:number])
end

def test_costpercapita_l18
  r = spreadsheet.costpercapita_l18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.037155674169293,r[:number])
end

def test_costpercapita_m18
  r = spreadsheet.costpercapita_m18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.27062521048618,r[:number])
end

def test_costpercapita_o18
  r = spreadsheet.costpercapita_o18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9882725037154225,r[:number])
end

def test_costpercapita_p18
  r = spreadsheet.costpercapita_p18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.163751694170952,r[:number])
end

def test_costpercapita_q18
  r = spreadsheet.costpercapita_q18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3344820770620087,r[:number])
end

def test_costpercapita_r18
  r = spreadsheet.costpercapita_r18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.964655129646296,r[:number])
end

def test_costpercapita_s18
  r = spreadsheet.costpercapita_s18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.646815955274262,r[:number])
end

def test_costpercapita_t18
  r = spreadsheet.costpercapita_t18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.007082713263363,r[:number])
end

def test_costpercapita_u18
  r = spreadsheet.costpercapita_u18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.391435089854007,r[:number])
end

def test_costpercapita_v18
  r = spreadsheet.costpercapita_v18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.797192437203441,r[:number])
end

def test_costpercapita_w18
  r = spreadsheet.costpercapita_w18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.225248428797817,r[:number])
end

def test_costpercapita_y18
  r = spreadsheet.costpercapita_y18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z18
  r = spreadsheet.costpercapita_z18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa18
  r = spreadsheet.costpercapita_aa18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab18
  r = spreadsheet.costpercapita_ab18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac18
  r = spreadsheet.costpercapita_ac18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad18
  r = spreadsheet.costpercapita_ad18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae18
  r = spreadsheet.costpercapita_ae18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af18
  r = spreadsheet.costpercapita_af18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag18
  r = spreadsheet.costpercapita_ag18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai18
  r = spreadsheet.costpercapita_ai18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.598354631208956,r[:number])
end

def test_costpercapita_aj18
  r = spreadsheet.costpercapita_aj18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.689048070736993,r[:number])
end

def test_costpercapita_ak18
  r = spreadsheet.costpercapita_ak18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.773289098418353,r[:number])
end

def test_costpercapita_al18
  r = spreadsheet.costpercapita_al18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.856424691982175,r[:number])
end

def test_costpercapita_am18
  r = spreadsheet.costpercapita_am18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.990404721407906,r[:number])
end

def test_costpercapita_an18
  r = spreadsheet.costpercapita_an18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.577620065935115,r[:number])
end

def test_costpercapita_ao18
  r = spreadsheet.costpercapita_ao18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.195376969028917,r[:number])
end

def test_costpercapita_ap18
  r = spreadsheet.costpercapita_ap18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.834348111372734,r[:number])
end

def test_costpercapita_aq18
  r = spreadsheet.costpercapita_aq18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.495873639284,r[:number])
end

def test_costpercapita_as18
  r = spreadsheet.costpercapita_as18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.778971111041683,r[:number])
end

def test_costpercapita_at18
  r = spreadsheet.costpercapita_at18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(280.1728330544344,r[:number])
end

def test_costpercapita_av18
  r = spreadsheet.costpercapita_av18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw18
  r = spreadsheet.costpercapita_aw18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay18
  r = spreadsheet.costpercapita_ay18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.16604927649612,r[:number])
end

def test_costpercapita_az18
  r = spreadsheet.costpercapita_az18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.52529637656604,r[:number])
end

def test_costpercapita_ba18
  r = spreadsheet.costpercapita_ba18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.438807021356345,r[:number])
end

def test_costpercapita_bb18
  r = spreadsheet.costpercapita_bb18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891769562335881,r[:number])
end

def test_costpercapita_bc18
  r = spreadsheet.costpercapita_bc18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.343588766133642,r[:number])
end

def test_costpercapita_bd18
  r = spreadsheet.costpercapita_bd18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.570537352671753,r[:number])
end

def test_costpercapita_be18
  r = spreadsheet.costpercapita_be18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.80394187917491,r[:number])
end

def test_costpercapita_bf18
  r = spreadsheet.costpercapita_bf18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.037155674169293,r[:number])
end

def test_costpercapita_bg18
  r = spreadsheet.costpercapita_bg18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.27062521048618,r[:number])
end

def test_costpercapita_bi18
  r = spreadsheet.costpercapita_bi18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.16604927649612,r[:number])
end

def test_costpercapita_bj18
  r = spreadsheet.costpercapita_bj18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.52529637656604,r[:number])
end

def test_costpercapita_bk18
  r = spreadsheet.costpercapita_bk18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.438807021356345,r[:number])
end

def test_costpercapita_bl18
  r = spreadsheet.costpercapita_bl18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891769562335881,r[:number])
end

def test_costpercapita_bm18
  r = spreadsheet.costpercapita_bm18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.343588766133642,r[:number])
end

def test_costpercapita_bn18
  r = spreadsheet.costpercapita_bn18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.570537352671753,r[:number])
end

def test_costpercapita_bo18
  r = spreadsheet.costpercapita_bo18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.80394187917491,r[:number])
end

def test_costpercapita_bp18
  r = spreadsheet.costpercapita_bp18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.037155674169293,r[:number])
end

def test_costpercapita_bq18
  r = spreadsheet.costpercapita_bq18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.27062521048618,r[:number])
end

def test_costpercapita_bs18
  r = spreadsheet.costpercapita_bs18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.154321780211543,r[:number])
end

def test_costpercapita_bt18
  r = spreadsheet.costpercapita_bt18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.689048070736993,r[:number])
end

def test_costpercapita_bu18
  r = spreadsheet.costpercapita_bu18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.773289098418353,r[:number])
end

def test_costpercapita_bv18
  r = spreadsheet.costpercapita_bv18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.856424691982175,r[:number])
end

def test_costpercapita_bw18
  r = spreadsheet.costpercapita_bw18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.990404721407906,r[:number])
end

def test_costpercapita_bx18
  r = spreadsheet.costpercapita_bx18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.577620065935115,r[:number])
end

def test_costpercapita_by18
  r = spreadsheet.costpercapita_by18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.195376969028917,r[:number])
end

def test_costpercapita_bz18
  r = spreadsheet.costpercapita_bz18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.834348111372734,r[:number])
end

def test_costpercapita_ca18
  r = spreadsheet.costpercapita_ca18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.495873639284,r[:number])
end

def test_costpercapita_cc18
  r = spreadsheet.costpercapita_cc18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.396300794264192,r[:number])
end

def test_costpercapita_cd18
  r = spreadsheet.costpercapita_cd18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.728800203437,r[:number])
end

def test_costpercapita_cf18
  r = spreadsheet.costpercapita_cf18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.444032850997413,r[:number])
end

def test_costpercapita_cg18
  r = spreadsheet.costpercapita_cg18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch18
  r = spreadsheet.costpercapita_ch18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci18
  r = spreadsheet.costpercapita_ci18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj18
  r = spreadsheet.costpercapita_cj18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck18
  r = spreadsheet.costpercapita_ck18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl18
  r = spreadsheet.costpercapita_cl18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm18
  r = spreadsheet.costpercapita_cm18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn18
  r = spreadsheet.costpercapita_cn18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp18
  r = spreadsheet.costpercapita_cp18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.3826703167774903,r[:number])
end

def test_costpercapita_cq18
  r = spreadsheet.costpercapita_cq18
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.444032850997413,r[:number])
end

def test_costpercapita_cr18
  r = spreadsheet.costpercapita_cr18
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a19
  r = spreadsheet.costpercapita_a19
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b19
  r = spreadsheet.costpercapita_b19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste arising",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c19
  r = spreadsheet.costpercapita_c19
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e19
  r = spreadsheet.costpercapita_e19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.24809771490182,r[:number])
end

def test_costpercapita_f19
  r = spreadsheet.costpercapita_f19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.87941931732309,r[:number])
end

def test_costpercapita_g19
  r = spreadsheet.costpercapita_g19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.92609153961815,r[:number])
end

def test_costpercapita_h19
  r = spreadsheet.costpercapita_h19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.02233679443636,r[:number])
end

def test_costpercapita_i19
  r = spreadsheet.costpercapita_i19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.50547681411891,r[:number])
end

def test_costpercapita_j19
  r = spreadsheet.costpercapita_j19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.80182256077141,r[:number])
end

def test_costpercapita_k19
  r = spreadsheet.costpercapita_k19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.89902885286584,r[:number])
end

def test_costpercapita_l19
  r = spreadsheet.costpercapita_l19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.2198890565723,r[:number])
end

def test_costpercapita_m19
  r = spreadsheet.costpercapita_m19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.466432166134,r[:number])
end

def test_costpercapita_o19
  r = spreadsheet.costpercapita_o19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.24977042432771,r[:number])
end

def test_costpercapita_p19
  r = spreadsheet.costpercapita_p19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.666516687074896,r[:number])
end

def test_costpercapita_q19
  r = spreadsheet.costpercapita_q19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.0739217320289,r[:number])
end

def test_costpercapita_r19
  r = spreadsheet.costpercapita_r19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.251017492552684,r[:number])
end

def test_costpercapita_s19
  r = spreadsheet.costpercapita_s19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.45987610658892,r[:number])
end

def test_costpercapita_t19
  r = spreadsheet.costpercapita_t19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.74459137434952,r[:number])
end

def test_costpercapita_u19
  r = spreadsheet.costpercapita_u19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.111879113097444,r[:number])
end

def test_costpercapita_v19
  r = spreadsheet.costpercapita_v19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.52010150213336,r[:number])
end

def test_costpercapita_w19
  r = spreadsheet.costpercapita_w19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.97216164718807,r[:number])
end

def test_costpercapita_y19
  r = spreadsheet.costpercapita_y19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z19
  r = spreadsheet.costpercapita_z19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa19
  r = spreadsheet.costpercapita_aa19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab19
  r = spreadsheet.costpercapita_ab19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac19
  r = spreadsheet.costpercapita_ac19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad19
  r = spreadsheet.costpercapita_ad19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae19
  r = spreadsheet.costpercapita_ae19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af19
  r = spreadsheet.costpercapita_af19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag19
  r = spreadsheet.costpercapita_ag19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai19
  r = spreadsheet.costpercapita_ai19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.49786813922952,r[:number])
end

def test_costpercapita_aj19
  r = spreadsheet.costpercapita_aj19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.54593600439797,r[:number])
end

def test_costpercapita_ak19
  r = spreadsheet.costpercapita_ak19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.00001327164703,r[:number])
end

def test_costpercapita_al19
  r = spreadsheet.costpercapita_al19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.27335428698905,r[:number])
end

def test_costpercapita_am19
  r = spreadsheet.costpercapita_am19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.96535292070783,r[:number])
end

def test_costpercapita_an19
  r = spreadsheet.costpercapita_an19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.54641393512092,r[:number])
end

def test_costpercapita_ao19
  r = spreadsheet.costpercapita_ao19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.01090796596328,r[:number])
end

def test_costpercapita_ap19
  r = spreadsheet.costpercapita_ap19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.73999055870566,r[:number])
end

def test_costpercapita_aq19
  r = spreadsheet.costpercapita_aq19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.43859381332207,r[:number])
end

def test_costpercapita_as19
  r = spreadsheet.costpercapita_as19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.66871454400926,r[:number])
end

def test_costpercapita_at19
  r = spreadsheet.costpercapita_at19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2034.5977465856595,r[:number])
end

def test_costpercapita_av19
  r = spreadsheet.costpercapita_av19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw19
  r = spreadsheet.costpercapita_aw19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay19
  r = spreadsheet.costpercapita_ay19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.14885862894109,r[:number])
end

def test_costpercapita_az19
  r = spreadsheet.costpercapita_az19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.87941931732309,r[:number])
end

def test_costpercapita_ba19
  r = spreadsheet.costpercapita_ba19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.92609153961815,r[:number])
end

def test_costpercapita_bb19
  r = spreadsheet.costpercapita_bb19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.02233679443636,r[:number])
end

def test_costpercapita_bc19
  r = spreadsheet.costpercapita_bc19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.50547681411891,r[:number])
end

def test_costpercapita_bd19
  r = spreadsheet.costpercapita_bd19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.80182256077141,r[:number])
end

def test_costpercapita_be19
  r = spreadsheet.costpercapita_be19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.89902885286584,r[:number])
end

def test_costpercapita_bf19
  r = spreadsheet.costpercapita_bf19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.2198890565723,r[:number])
end

def test_costpercapita_bg19
  r = spreadsheet.costpercapita_bg19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.46643216613399,r[:number])
end

def test_costpercapita_bi19
  r = spreadsheet.costpercapita_bi19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.14885862894109,r[:number])
end

def test_costpercapita_bj19
  r = spreadsheet.costpercapita_bj19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.87941931732309,r[:number])
end

def test_costpercapita_bk19
  r = spreadsheet.costpercapita_bk19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.92609153961815,r[:number])
end

def test_costpercapita_bl19
  r = spreadsheet.costpercapita_bl19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.02233679443636,r[:number])
end

def test_costpercapita_bm19
  r = spreadsheet.costpercapita_bm19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.50547681411891,r[:number])
end

def test_costpercapita_bn19
  r = spreadsheet.costpercapita_bn19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.80182256077141,r[:number])
end

def test_costpercapita_bo19
  r = spreadsheet.costpercapita_bo19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.89902885286584,r[:number])
end

def test_costpercapita_bp19
  r = spreadsheet.costpercapita_bp19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.2198890565723,r[:number])
end

def test_costpercapita_bq19
  r = spreadsheet.costpercapita_bq19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.46643216613399,r[:number])
end

def test_costpercapita_bs19
  r = spreadsheet.costpercapita_bs19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.3986290532688,r[:number])
end

def test_costpercapita_bt19
  r = spreadsheet.costpercapita_bt19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.54593600439797,r[:number])
end

def test_costpercapita_bu19
  r = spreadsheet.costpercapita_bu19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.00001327164703,r[:number])
end

def test_costpercapita_bv19
  r = spreadsheet.costpercapita_bv19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.27335428698905,r[:number])
end

def test_costpercapita_bw19
  r = spreadsheet.costpercapita_bw19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.96535292070783,r[:number])
end

def test_costpercapita_bx19
  r = spreadsheet.costpercapita_bx19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.54641393512092,r[:number])
end

def test_costpercapita_by19
  r = spreadsheet.costpercapita_by19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.01090796596328,r[:number])
end

def test_costpercapita_bz19
  r = spreadsheet.costpercapita_bz19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.73999055870566,r[:number])
end

def test_costpercapita_ca19
  r = spreadsheet.costpercapita_ca19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.43859381332207,r[:number])
end

def test_costpercapita_cc19
  r = spreadsheet.costpercapita_cc19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.10213242334696,r[:number])
end

def test_costpercapita_cd19
  r = spreadsheet.costpercapita_cd19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.498507499699,r[:number])
end

def test_costpercapita_cf19
  r = spreadsheet.costpercapita_cf19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.099239085960729,r[:number])
end

def test_costpercapita_cg19
  r = spreadsheet.costpercapita_cg19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch19
  r = spreadsheet.costpercapita_ch19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci19
  r = spreadsheet.costpercapita_ci19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj19
  r = spreadsheet.costpercapita_cj19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck19
  r = spreadsheet.costpercapita_ck19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl19
  r = spreadsheet.costpercapita_cl19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm19
  r = spreadsheet.costpercapita_cm19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn19
  r = spreadsheet.costpercapita_cn19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp19
  r = spreadsheet.costpercapita_cp19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.5665821206623032,r[:number])
end

def test_costpercapita_cq19
  r = spreadsheet.costpercapita_cq19
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.099239085960729,r[:number])
end

def test_costpercapita_cr19
  r = spreadsheet.costpercapita_cr19
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a20
  r = spreadsheet.costpercapita_a20
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b20
  r = spreadsheet.costpercapita_b20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c20
  r = spreadsheet.costpercapita_c20
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e20
  r = spreadsheet.costpercapita_e20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f20
  r = spreadsheet.costpercapita_f20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g20
  r = spreadsheet.costpercapita_g20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h20
  r = spreadsheet.costpercapita_h20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i20
  r = spreadsheet.costpercapita_i20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j20
  r = spreadsheet.costpercapita_j20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k20
  r = spreadsheet.costpercapita_k20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l20
  r = spreadsheet.costpercapita_l20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m20
  r = spreadsheet.costpercapita_m20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o20
  r = spreadsheet.costpercapita_o20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p20
  r = spreadsheet.costpercapita_p20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q20
  r = spreadsheet.costpercapita_q20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r20
  r = spreadsheet.costpercapita_r20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s20
  r = spreadsheet.costpercapita_s20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t20
  r = spreadsheet.costpercapita_t20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u20
  r = spreadsheet.costpercapita_u20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v20
  r = spreadsheet.costpercapita_v20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w20
  r = spreadsheet.costpercapita_w20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y20
  r = spreadsheet.costpercapita_y20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z20
  r = spreadsheet.costpercapita_z20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa20
  r = spreadsheet.costpercapita_aa20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab20
  r = spreadsheet.costpercapita_ab20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac20
  r = spreadsheet.costpercapita_ac20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad20
  r = spreadsheet.costpercapita_ad20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae20
  r = spreadsheet.costpercapita_ae20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af20
  r = spreadsheet.costpercapita_af20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag20
  r = spreadsheet.costpercapita_ag20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai20
  r = spreadsheet.costpercapita_ai20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj20
  r = spreadsheet.costpercapita_aj20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak20
  r = spreadsheet.costpercapita_ak20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al20
  r = spreadsheet.costpercapita_al20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am20
  r = spreadsheet.costpercapita_am20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an20
  r = spreadsheet.costpercapita_an20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao20
  r = spreadsheet.costpercapita_ao20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap20
  r = spreadsheet.costpercapita_ap20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq20
  r = spreadsheet.costpercapita_aq20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as20
  r = spreadsheet.costpercapita_as20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at20
  r = spreadsheet.costpercapita_at20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av20
  r = spreadsheet.costpercapita_av20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw20
  r = spreadsheet.costpercapita_aw20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay20
  r = spreadsheet.costpercapita_ay20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az20
  r = spreadsheet.costpercapita_az20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba20
  r = spreadsheet.costpercapita_ba20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb20
  r = spreadsheet.costpercapita_bb20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc20
  r = spreadsheet.costpercapita_bc20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd20
  r = spreadsheet.costpercapita_bd20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be20
  r = spreadsheet.costpercapita_be20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf20
  r = spreadsheet.costpercapita_bf20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg20
  r = spreadsheet.costpercapita_bg20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi20
  r = spreadsheet.costpercapita_bi20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj20
  r = spreadsheet.costpercapita_bj20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk20
  r = spreadsheet.costpercapita_bk20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl20
  r = spreadsheet.costpercapita_bl20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm20
  r = spreadsheet.costpercapita_bm20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn20
  r = spreadsheet.costpercapita_bn20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo20
  r = spreadsheet.costpercapita_bo20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp20
  r = spreadsheet.costpercapita_bp20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq20
  r = spreadsheet.costpercapita_bq20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs20
  r = spreadsheet.costpercapita_bs20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt20
  r = spreadsheet.costpercapita_bt20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu20
  r = spreadsheet.costpercapita_bu20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv20
  r = spreadsheet.costpercapita_bv20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw20
  r = spreadsheet.costpercapita_bw20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx20
  r = spreadsheet.costpercapita_bx20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by20
  r = spreadsheet.costpercapita_by20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz20
  r = spreadsheet.costpercapita_bz20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca20
  r = spreadsheet.costpercapita_ca20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc20
  r = spreadsheet.costpercapita_cc20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd20
  r = spreadsheet.costpercapita_cd20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf20
  r = spreadsheet.costpercapita_cf20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg20
  r = spreadsheet.costpercapita_cg20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch20
  r = spreadsheet.costpercapita_ch20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci20
  r = spreadsheet.costpercapita_ci20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj20
  r = spreadsheet.costpercapita_cj20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck20
  r = spreadsheet.costpercapita_ck20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl20
  r = spreadsheet.costpercapita_cl20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm20
  r = spreadsheet.costpercapita_cm20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn20
  r = spreadsheet.costpercapita_cn20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp20
  r = spreadsheet.costpercapita_cp20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq20
  r = spreadsheet.costpercapita_cq20
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr20
  r = spreadsheet.costpercapita_cr20
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a21
  r = spreadsheet.costpercapita_a21
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b21
  r = spreadsheet.costpercapita_b21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c21
  r = spreadsheet.costpercapita_c21
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e21
  r = spreadsheet.costpercapita_e21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f21
  r = spreadsheet.costpercapita_f21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g21
  r = spreadsheet.costpercapita_g21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h21
  r = spreadsheet.costpercapita_h21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i21
  r = spreadsheet.costpercapita_i21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j21
  r = spreadsheet.costpercapita_j21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k21
  r = spreadsheet.costpercapita_k21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l21
  r = spreadsheet.costpercapita_l21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m21
  r = spreadsheet.costpercapita_m21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o21
  r = spreadsheet.costpercapita_o21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p21
  r = spreadsheet.costpercapita_p21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q21
  r = spreadsheet.costpercapita_q21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r21
  r = spreadsheet.costpercapita_r21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s21
  r = spreadsheet.costpercapita_s21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t21
  r = spreadsheet.costpercapita_t21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u21
  r = spreadsheet.costpercapita_u21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v21
  r = spreadsheet.costpercapita_v21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w21
  r = spreadsheet.costpercapita_w21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y21
  r = spreadsheet.costpercapita_y21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z21
  r = spreadsheet.costpercapita_z21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa21
  r = spreadsheet.costpercapita_aa21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab21
  r = spreadsheet.costpercapita_ab21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac21
  r = spreadsheet.costpercapita_ac21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad21
  r = spreadsheet.costpercapita_ad21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae21
  r = spreadsheet.costpercapita_ae21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af21
  r = spreadsheet.costpercapita_af21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag21
  r = spreadsheet.costpercapita_ag21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai21
  r = spreadsheet.costpercapita_ai21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj21
  r = spreadsheet.costpercapita_aj21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak21
  r = spreadsheet.costpercapita_ak21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al21
  r = spreadsheet.costpercapita_al21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am21
  r = spreadsheet.costpercapita_am21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an21
  r = spreadsheet.costpercapita_an21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao21
  r = spreadsheet.costpercapita_ao21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap21
  r = spreadsheet.costpercapita_ap21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq21
  r = spreadsheet.costpercapita_aq21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as21
  r = spreadsheet.costpercapita_as21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at21
  r = spreadsheet.costpercapita_at21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av21
  r = spreadsheet.costpercapita_av21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw21
  r = spreadsheet.costpercapita_aw21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay21
  r = spreadsheet.costpercapita_ay21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az21
  r = spreadsheet.costpercapita_az21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba21
  r = spreadsheet.costpercapita_ba21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb21
  r = spreadsheet.costpercapita_bb21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc21
  r = spreadsheet.costpercapita_bc21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd21
  r = spreadsheet.costpercapita_bd21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be21
  r = spreadsheet.costpercapita_be21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf21
  r = spreadsheet.costpercapita_bf21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg21
  r = spreadsheet.costpercapita_bg21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi21
  r = spreadsheet.costpercapita_bi21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj21
  r = spreadsheet.costpercapita_bj21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk21
  r = spreadsheet.costpercapita_bk21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl21
  r = spreadsheet.costpercapita_bl21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm21
  r = spreadsheet.costpercapita_bm21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn21
  r = spreadsheet.costpercapita_bn21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo21
  r = spreadsheet.costpercapita_bo21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp21
  r = spreadsheet.costpercapita_bp21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq21
  r = spreadsheet.costpercapita_bq21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs21
  r = spreadsheet.costpercapita_bs21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt21
  r = spreadsheet.costpercapita_bt21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu21
  r = spreadsheet.costpercapita_bu21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv21
  r = spreadsheet.costpercapita_bv21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw21
  r = spreadsheet.costpercapita_bw21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx21
  r = spreadsheet.costpercapita_bx21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by21
  r = spreadsheet.costpercapita_by21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz21
  r = spreadsheet.costpercapita_bz21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca21
  r = spreadsheet.costpercapita_ca21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc21
  r = spreadsheet.costpercapita_cc21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd21
  r = spreadsheet.costpercapita_cd21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf21
  r = spreadsheet.costpercapita_cf21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg21
  r = spreadsheet.costpercapita_cg21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch21
  r = spreadsheet.costpercapita_ch21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci21
  r = spreadsheet.costpercapita_ci21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj21
  r = spreadsheet.costpercapita_cj21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck21
  r = spreadsheet.costpercapita_ck21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl21
  r = spreadsheet.costpercapita_cl21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm21
  r = spreadsheet.costpercapita_cm21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn21
  r = spreadsheet.costpercapita_cn21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp21
  r = spreadsheet.costpercapita_cp21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq21
  r = spreadsheet.costpercapita_cq21
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr21
  r = spreadsheet.costpercapita_cr21
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a22
  r = spreadsheet.costpercapita_a22
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b22
  r = spreadsheet.costpercapita_b22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c22
  r = spreadsheet.costpercapita_c22
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e22
  r = spreadsheet.costpercapita_e22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f22
  r = spreadsheet.costpercapita_f22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g22
  r = spreadsheet.costpercapita_g22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h22
  r = spreadsheet.costpercapita_h22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i22
  r = spreadsheet.costpercapita_i22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j22
  r = spreadsheet.costpercapita_j22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k22
  r = spreadsheet.costpercapita_k22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l22
  r = spreadsheet.costpercapita_l22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m22
  r = spreadsheet.costpercapita_m22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o22
  r = spreadsheet.costpercapita_o22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p22
  r = spreadsheet.costpercapita_p22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q22
  r = spreadsheet.costpercapita_q22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r22
  r = spreadsheet.costpercapita_r22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s22
  r = spreadsheet.costpercapita_s22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t22
  r = spreadsheet.costpercapita_t22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u22
  r = spreadsheet.costpercapita_u22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v22
  r = spreadsheet.costpercapita_v22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w22
  r = spreadsheet.costpercapita_w22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y22
  r = spreadsheet.costpercapita_y22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.654209167126382e-14,r[:number])
end

def test_costpercapita_z22
  r = spreadsheet.costpercapita_z22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa22
  r = spreadsheet.costpercapita_aa22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab22
  r = spreadsheet.costpercapita_ab22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac22
  r = spreadsheet.costpercapita_ac22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad22
  r = spreadsheet.costpercapita_ad22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae22
  r = spreadsheet.costpercapita_ae22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af22
  r = spreadsheet.costpercapita_af22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag22
  r = spreadsheet.costpercapita_ag22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai22
  r = spreadsheet.costpercapita_ai22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.654209167126382e-14,r[:number])
end

def test_costpercapita_aj22
  r = spreadsheet.costpercapita_aj22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak22
  r = spreadsheet.costpercapita_ak22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al22
  r = spreadsheet.costpercapita_al22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am22
  r = spreadsheet.costpercapita_am22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an22
  r = spreadsheet.costpercapita_an22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao22
  r = spreadsheet.costpercapita_ao22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap22
  r = spreadsheet.costpercapita_ap22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq22
  r = spreadsheet.costpercapita_aq22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as22
  r = spreadsheet.costpercapita_as22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.060232407918202e-15,r[:number])
end

def test_costpercapita_at22
  r = spreadsheet.costpercapita_at22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.654209167126382e-14,r[:number])
end

def test_costpercapita_av22
  r = spreadsheet.costpercapita_av22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw22
  r = spreadsheet.costpercapita_aw22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay22
  r = spreadsheet.costpercapita_ay22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az22
  r = spreadsheet.costpercapita_az22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba22
  r = spreadsheet.costpercapita_ba22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb22
  r = spreadsheet.costpercapita_bb22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc22
  r = spreadsheet.costpercapita_bc22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd22
  r = spreadsheet.costpercapita_bd22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be22
  r = spreadsheet.costpercapita_be22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf22
  r = spreadsheet.costpercapita_bf22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg22
  r = spreadsheet.costpercapita_bg22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi22
  r = spreadsheet.costpercapita_bi22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj22
  r = spreadsheet.costpercapita_bj22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk22
  r = spreadsheet.costpercapita_bk22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl22
  r = spreadsheet.costpercapita_bl22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm22
  r = spreadsheet.costpercapita_bm22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn22
  r = spreadsheet.costpercapita_bn22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo22
  r = spreadsheet.costpercapita_bo22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp22
  r = spreadsheet.costpercapita_bp22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq22
  r = spreadsheet.costpercapita_bq22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs22
  r = spreadsheet.costpercapita_bs22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.654209167126382e-14,r[:number])
end

def test_costpercapita_bt22
  r = spreadsheet.costpercapita_bt22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu22
  r = spreadsheet.costpercapita_bu22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv22
  r = spreadsheet.costpercapita_bv22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw22
  r = spreadsheet.costpercapita_bw22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx22
  r = spreadsheet.costpercapita_bx22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by22
  r = spreadsheet.costpercapita_by22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz22
  r = spreadsheet.costpercapita_bz22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca22
  r = spreadsheet.costpercapita_ca22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc22
  r = spreadsheet.costpercapita_cc22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.060232407918202e-15,r[:number])
end

def test_costpercapita_cd22
  r = spreadsheet.costpercapita_cd22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.654209167126382e-14,r[:number])
end

def test_costpercapita_cf22
  r = spreadsheet.costpercapita_cf22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg22
  r = spreadsheet.costpercapita_cg22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch22
  r = spreadsheet.costpercapita_ch22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci22
  r = spreadsheet.costpercapita_ci22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj22
  r = spreadsheet.costpercapita_cj22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck22
  r = spreadsheet.costpercapita_ck22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl22
  r = spreadsheet.costpercapita_cl22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm22
  r = spreadsheet.costpercapita_cm22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn22
  r = spreadsheet.costpercapita_cn22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp22
  r = spreadsheet.costpercapita_cp22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq22
  r = spreadsheet.costpercapita_cq22
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr22
  r = spreadsheet.costpercapita_cr22
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a23
  r = spreadsheet.costpercapita_a23
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b23
  r = spreadsheet.costpercapita_b23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid distribution",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c23
  r = spreadsheet.costpercapita_c23
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e23
  r = spreadsheet.costpercapita_e23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.175057630825671,r[:number])
end

def test_costpercapita_f23
  r = spreadsheet.costpercapita_f23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.977646972327822,r[:number])
end

def test_costpercapita_g23
  r = spreadsheet.costpercapita_g23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.896731738807171,r[:number])
end

def test_costpercapita_h23
  r = spreadsheet.costpercapita_h23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.320205547455865,r[:number])
end

def test_costpercapita_i23
  r = spreadsheet.costpercapita_i23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.455102779638214,r[:number])
end

def test_costpercapita_j23
  r = spreadsheet.costpercapita_j23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.714839330983573,r[:number])
end

def test_costpercapita_k23
  r = spreadsheet.costpercapita_k23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.976714422383068,r[:number])
end

def test_costpercapita_l23
  r = spreadsheet.costpercapita_l23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.239820382811825,r[:number])
end

def test_costpercapita_m23
  r = spreadsheet.costpercapita_m23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.664898061835956,r[:number])
end

def test_costpercapita_o23
  r = spreadsheet.costpercapita_o23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.1490680193200955,r[:number])
end

def test_costpercapita_p23
  r = spreadsheet.costpercapita_p23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.786541313623712,r[:number])
end

def test_costpercapita_q23
  r = spreadsheet.costpercapita_q23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.912816412860669,r[:number])
end

def test_costpercapita_r23
  r = spreadsheet.costpercapita_r23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.068605232544829,r[:number])
end

def test_costpercapita_s23
  r = spreadsheet.costpercapita_s23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.950392450483419,r[:number])
end

def test_costpercapita_t23
  r = spreadsheet.costpercapita_t23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.915494491070593,r[:number])
end

def test_costpercapita_u23
  r = spreadsheet.costpercapita_u23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.934651972444307,r[:number])
end

def test_costpercapita_v23
  r = spreadsheet.costpercapita_v23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.98983667257408,r[:number])
end

def test_costpercapita_w23
  r = spreadsheet.costpercapita_w23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.225682644613283,r[:number])
end

def test_costpercapita_y23
  r = spreadsheet.costpercapita_y23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z23
  r = spreadsheet.costpercapita_z23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa23
  r = spreadsheet.costpercapita_aa23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab23
  r = spreadsheet.costpercapita_ab23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac23
  r = spreadsheet.costpercapita_ac23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad23
  r = spreadsheet.costpercapita_ad23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae23
  r = spreadsheet.costpercapita_ae23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af23
  r = spreadsheet.costpercapita_af23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag23
  r = spreadsheet.costpercapita_ag23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai23
  r = spreadsheet.costpercapita_ai23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.324125650145767,r[:number])
end

def test_costpercapita_aj23
  r = spreadsheet.costpercapita_aj23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.764188285951533,r[:number])
end

def test_costpercapita_ak23
  r = spreadsheet.costpercapita_ak23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.80954815166784,r[:number])
end

def test_costpercapita_al23
  r = spreadsheet.costpercapita_al23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.388810780000696,r[:number])
end

def test_costpercapita_am23
  r = spreadsheet.costpercapita_am23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.405495230121634,r[:number])
end

def test_costpercapita_an23
  r = spreadsheet.costpercapita_an23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.630333822054165,r[:number])
end

def test_costpercapita_ao23
  r = spreadsheet.costpercapita_ao23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.911366394827375,r[:number])
end

def test_costpercapita_ap23
  r = spreadsheet.costpercapita_ap23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.229657055385903,r[:number])
end

def test_costpercapita_aq23
  r = spreadsheet.costpercapita_aq23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.89058070644924,r[:number])
end

def test_costpercapita_as23
  r = spreadsheet.costpercapita_as23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.039345119622684,r[:number])
end

def test_costpercapita_at23
  r = spreadsheet.costpercapita_at23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.5496950755837,r[:number])
end

def test_costpercapita_av23
  r = spreadsheet.costpercapita_av23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw23
  r = spreadsheet.costpercapita_aw23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay23
  r = spreadsheet.costpercapita_ay23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.705034578495403,r[:number])
end

def test_costpercapita_az23
  r = spreadsheet.costpercapita_az23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.977646972327822,r[:number])
end

def test_costpercapita_ba23
  r = spreadsheet.costpercapita_ba23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.89673173880717,r[:number])
end

def test_costpercapita_bb23
  r = spreadsheet.costpercapita_bb23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.320205547455865,r[:number])
end

def test_costpercapita_bc23
  r = spreadsheet.costpercapita_bc23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.455102779638214,r[:number])
end

def test_costpercapita_bd23
  r = spreadsheet.costpercapita_bd23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.714839330983573,r[:number])
end

def test_costpercapita_be23
  r = spreadsheet.costpercapita_be23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.976714422383068,r[:number])
end

def test_costpercapita_bf23
  r = spreadsheet.costpercapita_bf23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.239820382811827,r[:number])
end

def test_costpercapita_bg23
  r = spreadsheet.costpercapita_bg23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.664898061835956,r[:number])
end

def test_costpercapita_bi23
  r = spreadsheet.costpercapita_bi23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.705034578495403,r[:number])
end

def test_costpercapita_bj23
  r = spreadsheet.costpercapita_bj23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.977646972327822,r[:number])
end

def test_costpercapita_bk23
  r = spreadsheet.costpercapita_bk23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.89673173880717,r[:number])
end

def test_costpercapita_bl23
  r = spreadsheet.costpercapita_bl23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.320205547455865,r[:number])
end

def test_costpercapita_bm23
  r = spreadsheet.costpercapita_bm23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.455102779638214,r[:number])
end

def test_costpercapita_bn23
  r = spreadsheet.costpercapita_bn23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.714839330983573,r[:number])
end

def test_costpercapita_bo23
  r = spreadsheet.costpercapita_bo23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.976714422383068,r[:number])
end

def test_costpercapita_bp23
  r = spreadsheet.costpercapita_bp23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.239820382811827,r[:number])
end

def test_costpercapita_bq23
  r = spreadsheet.costpercapita_bq23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.664898061835956,r[:number])
end

def test_costpercapita_bs23
  r = spreadsheet.costpercapita_bs23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.854102597815498,r[:number])
end

def test_costpercapita_bt23
  r = spreadsheet.costpercapita_bt23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.764188285951533,r[:number])
end

def test_costpercapita_bu23
  r = spreadsheet.costpercapita_bu23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.809548151667837,r[:number])
end

def test_costpercapita_bv23
  r = spreadsheet.costpercapita_bv23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.388810780000696,r[:number])
end

def test_costpercapita_bw23
  r = spreadsheet.costpercapita_bw23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.405495230121634,r[:number])
end

def test_costpercapita_bx23
  r = spreadsheet.costpercapita_bx23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.630333822054165,r[:number])
end

def test_costpercapita_by23
  r = spreadsheet.costpercapita_by23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.911366394827375,r[:number])
end

def test_costpercapita_bz23
  r = spreadsheet.costpercapita_bz23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.229657055385907,r[:number])
end

def test_costpercapita_ca23
  r = spreadsheet.costpercapita_ca23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.89058070644924,r[:number])
end

def test_costpercapita_cc23
  r = spreadsheet.costpercapita_cc23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.542675891585986,r[:number])
end

def test_costpercapita_cd23
  r = spreadsheet.costpercapita_cd23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(371.0796720232534,r[:number])
end

def test_costpercapita_cf23
  r = spreadsheet.costpercapita_cf23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.470023052330269,r[:number])
end

def test_costpercapita_cg23
  r = spreadsheet.costpercapita_cg23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch23
  r = spreadsheet.costpercapita_ch23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci23
  r = spreadsheet.costpercapita_ci23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj23
  r = spreadsheet.costpercapita_cj23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck23
  r = spreadsheet.costpercapita_ck23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl23
  r = spreadsheet.costpercapita_cl23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm23
  r = spreadsheet.costpercapita_cm23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn23
  r = spreadsheet.costpercapita_cn23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp23
  r = spreadsheet.costpercapita_cp23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4966692280366966,r[:number])
end

def test_costpercapita_cq23
  r = spreadsheet.costpercapita_cq23
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.470023052330269,r[:number])
end

def test_costpercapita_cr23
  r = spreadsheet.costpercapita_cr23
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a24
  r = spreadsheet.costpercapita_a24
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b24
  r = spreadsheet.costpercapita_b24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting, backup",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c24
  r = spreadsheet.costpercapita_c24
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e24
  r = spreadsheet.costpercapita_e24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f24
  r = spreadsheet.costpercapita_f24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2168937300226612,r[:number])
end

def test_costpercapita_g24
  r = spreadsheet.costpercapita_g24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h24
  r = spreadsheet.costpercapita_h24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i24
  r = spreadsheet.costpercapita_i24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j24
  r = spreadsheet.costpercapita_j24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k24
  r = spreadsheet.costpercapita_k24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l24
  r = spreadsheet.costpercapita_l24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m24
  r = spreadsheet.costpercapita_m24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o24
  r = spreadsheet.costpercapita_o24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4847419006024316,r[:number])
end

def test_costpercapita_p24
  r = spreadsheet.costpercapita_p24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3297395403393177,r[:number])
end

def test_costpercapita_q24
  r = spreadsheet.costpercapita_q24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1792834700414934,r[:number])
end

def test_costpercapita_r24
  r = spreadsheet.costpercapita_r24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0391566021094798,r[:number])
end

def test_costpercapita_s24
  r = spreadsheet.costpercapita_s24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9099852305759665,r[:number])
end

def test_costpercapita_t24
  r = spreadsheet.costpercapita_t24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7901424184907324,r[:number])
end

def test_costpercapita_u24
  r = spreadsheet.costpercapita_u24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6769827351382398,r[:number])
end

def test_costpercapita_v24
  r = spreadsheet.costpercapita_v24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5690906939012901,r[:number])
end

def test_costpercapita_w24
  r = spreadsheet.costpercapita_w24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4658442710381371,r[:number])
end

def test_costpercapita_y24
  r = spreadsheet.costpercapita_y24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z24
  r = spreadsheet.costpercapita_z24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa24
  r = spreadsheet.costpercapita_aa24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab24
  r = spreadsheet.costpercapita_ab24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac24
  r = spreadsheet.costpercapita_ac24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad24
  r = spreadsheet.costpercapita_ad24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae24
  r = spreadsheet.costpercapita_ae24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af24
  r = spreadsheet.costpercapita_af24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag24
  r = spreadsheet.costpercapita_ag24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai24
  r = spreadsheet.costpercapita_ai24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4847419006024316,r[:number])
end

def test_costpercapita_aj24
  r = spreadsheet.costpercapita_aj24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.546633270361979,r[:number])
end

def test_costpercapita_ak24
  r = spreadsheet.costpercapita_ak24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1792834700414934,r[:number])
end

def test_costpercapita_al24
  r = spreadsheet.costpercapita_al24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0391566021094798,r[:number])
end

def test_costpercapita_am24
  r = spreadsheet.costpercapita_am24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9099852305759665,r[:number])
end

def test_costpercapita_an24
  r = spreadsheet.costpercapita_an24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7901424184907324,r[:number])
end

def test_costpercapita_ao24
  r = spreadsheet.costpercapita_ao24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6769827351382398,r[:number])
end

def test_costpercapita_ap24
  r = spreadsheet.costpercapita_ap24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5690906939012901,r[:number])
end

def test_costpercapita_aq24
  r = spreadsheet.costpercapita_aq24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4658442710381371,r[:number])
end

def test_costpercapita_as24
  r = spreadsheet.costpercapita_as24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0735400658066387,r[:number])
end

def test_costpercapita_at24
  r = spreadsheet.costpercapita_at24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.143440215681103,r[:number])
end

def test_costpercapita_av24
  r = spreadsheet.costpercapita_av24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw24
  r = spreadsheet.costpercapita_aw24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay24
  r = spreadsheet.costpercapita_ay24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az24
  r = spreadsheet.costpercapita_az24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2168937300226612,r[:number])
end

def test_costpercapita_ba24
  r = spreadsheet.costpercapita_ba24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb24
  r = spreadsheet.costpercapita_bb24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc24
  r = spreadsheet.costpercapita_bc24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd24
  r = spreadsheet.costpercapita_bd24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be24
  r = spreadsheet.costpercapita_be24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf24
  r = spreadsheet.costpercapita_bf24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg24
  r = spreadsheet.costpercapita_bg24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi24
  r = spreadsheet.costpercapita_bi24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj24
  r = spreadsheet.costpercapita_bj24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2168937300226612,r[:number])
end

def test_costpercapita_bk24
  r = spreadsheet.costpercapita_bk24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl24
  r = spreadsheet.costpercapita_bl24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm24
  r = spreadsheet.costpercapita_bm24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn24
  r = spreadsheet.costpercapita_bn24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo24
  r = spreadsheet.costpercapita_bo24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp24
  r = spreadsheet.costpercapita_bp24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq24
  r = spreadsheet.costpercapita_bq24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs24
  r = spreadsheet.costpercapita_bs24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4847419006024316,r[:number])
end

def test_costpercapita_bt24
  r = spreadsheet.costpercapita_bt24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.546633270361979,r[:number])
end

def test_costpercapita_bu24
  r = spreadsheet.costpercapita_bu24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1792834700414934,r[:number])
end

def test_costpercapita_bv24
  r = spreadsheet.costpercapita_bv24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0391566021094798,r[:number])
end

def test_costpercapita_bw24
  r = spreadsheet.costpercapita_bw24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9099852305759665,r[:number])
end

def test_costpercapita_bx24
  r = spreadsheet.costpercapita_bx24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7901424184907324,r[:number])
end

def test_costpercapita_by24
  r = spreadsheet.costpercapita_by24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6769827351382398,r[:number])
end

def test_costpercapita_bz24
  r = spreadsheet.costpercapita_bz24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5690906939012901,r[:number])
end

def test_costpercapita_ca24
  r = spreadsheet.costpercapita_ca24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4658442710381371,r[:number])
end

def test_costpercapita_cc24
  r = spreadsheet.costpercapita_cc24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0735400658066387,r[:number])
end

def test_costpercapita_cd24
  r = spreadsheet.costpercapita_cd24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.143440215681103,r[:number])
end

def test_costpercapita_cf24
  r = spreadsheet.costpercapita_cf24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg24
  r = spreadsheet.costpercapita_cg24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch24
  r = spreadsheet.costpercapita_ch24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci24
  r = spreadsheet.costpercapita_ci24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj24
  r = spreadsheet.costpercapita_cj24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck24
  r = spreadsheet.costpercapita_ck24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl24
  r = spreadsheet.costpercapita_cl24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm24
  r = spreadsheet.costpercapita_cm24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn24
  r = spreadsheet.costpercapita_cn24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp24
  r = spreadsheet.costpercapita_cp24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq24
  r = spreadsheet.costpercapita_cq24
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr24
  r = spreadsheet.costpercapita_cr24
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a25
  r = spreadsheet.costpercapita_a25
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b25
  r = spreadsheet.costpercapita_b25
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c25
  r = spreadsheet.costpercapita_c25
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e25
  r = spreadsheet.costpercapita_e25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f25
  r = spreadsheet.costpercapita_f25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g25
  r = spreadsheet.costpercapita_g25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h25
  r = spreadsheet.costpercapita_h25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i25
  r = spreadsheet.costpercapita_i25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j25
  r = spreadsheet.costpercapita_j25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k25
  r = spreadsheet.costpercapita_k25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l25
  r = spreadsheet.costpercapita_l25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m25
  r = spreadsheet.costpercapita_m25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o25
  r = spreadsheet.costpercapita_o25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p25
  r = spreadsheet.costpercapita_p25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q25
  r = spreadsheet.costpercapita_q25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r25
  r = spreadsheet.costpercapita_r25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s25
  r = spreadsheet.costpercapita_s25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t25
  r = spreadsheet.costpercapita_t25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u25
  r = spreadsheet.costpercapita_u25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v25
  r = spreadsheet.costpercapita_v25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w25
  r = spreadsheet.costpercapita_w25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y25
  r = spreadsheet.costpercapita_y25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z25
  r = spreadsheet.costpercapita_z25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa25
  r = spreadsheet.costpercapita_aa25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab25
  r = spreadsheet.costpercapita_ab25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac25
  r = spreadsheet.costpercapita_ac25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad25
  r = spreadsheet.costpercapita_ad25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae25
  r = spreadsheet.costpercapita_ae25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af25
  r = spreadsheet.costpercapita_af25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag25
  r = spreadsheet.costpercapita_ag25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai25
  r = spreadsheet.costpercapita_ai25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj25
  r = spreadsheet.costpercapita_aj25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak25
  r = spreadsheet.costpercapita_ak25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al25
  r = spreadsheet.costpercapita_al25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am25
  r = spreadsheet.costpercapita_am25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an25
  r = spreadsheet.costpercapita_an25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao25
  r = spreadsheet.costpercapita_ao25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap25
  r = spreadsheet.costpercapita_ap25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq25
  r = spreadsheet.costpercapita_aq25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as25
  r = spreadsheet.costpercapita_as25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at25
  r = spreadsheet.costpercapita_at25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av25
  r = spreadsheet.costpercapita_av25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw25
  r = spreadsheet.costpercapita_aw25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay25
  r = spreadsheet.costpercapita_ay25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az25
  r = spreadsheet.costpercapita_az25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba25
  r = spreadsheet.costpercapita_ba25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb25
  r = spreadsheet.costpercapita_bb25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc25
  r = spreadsheet.costpercapita_bc25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd25
  r = spreadsheet.costpercapita_bd25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be25
  r = spreadsheet.costpercapita_be25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf25
  r = spreadsheet.costpercapita_bf25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg25
  r = spreadsheet.costpercapita_bg25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi25
  r = spreadsheet.costpercapita_bi25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj25
  r = spreadsheet.costpercapita_bj25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk25
  r = spreadsheet.costpercapita_bk25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl25
  r = spreadsheet.costpercapita_bl25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm25
  r = spreadsheet.costpercapita_bm25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn25
  r = spreadsheet.costpercapita_bn25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo25
  r = spreadsheet.costpercapita_bo25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp25
  r = spreadsheet.costpercapita_bp25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq25
  r = spreadsheet.costpercapita_bq25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs25
  r = spreadsheet.costpercapita_bs25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt25
  r = spreadsheet.costpercapita_bt25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu25
  r = spreadsheet.costpercapita_bu25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv25
  r = spreadsheet.costpercapita_bv25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw25
  r = spreadsheet.costpercapita_bw25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx25
  r = spreadsheet.costpercapita_bx25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by25
  r = spreadsheet.costpercapita_by25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz25
  r = spreadsheet.costpercapita_bz25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca25
  r = spreadsheet.costpercapita_ca25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc25
  r = spreadsheet.costpercapita_cc25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd25
  r = spreadsheet.costpercapita_cd25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf25
  r = spreadsheet.costpercapita_cf25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg25
  r = spreadsheet.costpercapita_cg25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch25
  r = spreadsheet.costpercapita_ch25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci25
  r = spreadsheet.costpercapita_ci25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj25
  r = spreadsheet.costpercapita_cj25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck25
  r = spreadsheet.costpercapita_ck25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl25
  r = spreadsheet.costpercapita_cl25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm25
  r = spreadsheet.costpercapita_cm25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn25
  r = spreadsheet.costpercapita_cn25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp25
  r = spreadsheet.costpercapita_cp25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq25
  r = spreadsheet.costpercapita_cq25
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr25
  r = spreadsheet.costpercapita_cr25
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a26
  r = spreadsheet.costpercapita_a26
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b26
  r = spreadsheet.costpercapita_b26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c26
  r = spreadsheet.costpercapita_c26
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e26
  r = spreadsheet.costpercapita_e26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.69350562330595,r[:number])
end

def test_costpercapita_f26
  r = spreadsheet.costpercapita_f26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.66809285687317,r[:number])
end

def test_costpercapita_g26
  r = spreadsheet.costpercapita_g26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.12400280409796,r[:number])
end

def test_costpercapita_h26
  r = spreadsheet.costpercapita_h26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.16994174454166,r[:number])
end

def test_costpercapita_i26
  r = spreadsheet.costpercapita_i26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.338821911803,r[:number])
end

def test_costpercapita_j26
  r = spreadsheet.costpercapita_j26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.44018386696627,r[:number])
end

def test_costpercapita_k26
  r = spreadsheet.costpercapita_k26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.90520535146752,r[:number])
end

def test_costpercapita_l26
  r = spreadsheet.costpercapita_l26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.7505047100408,r[:number])
end

def test_costpercapita_m26
  r = spreadsheet.costpercapita_m26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(201.60159740247005,r[:number])
end

def test_costpercapita_o26
  r = spreadsheet.costpercapita_o26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.98015520229907,r[:number])
end

def test_costpercapita_p26
  r = spreadsheet.costpercapita_p26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.94151967806035,r[:number])
end

def test_costpercapita_q26
  r = spreadsheet.costpercapita_q26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.68124857163484,r[:number])
end

def test_costpercapita_r26
  r = spreadsheet.costpercapita_r26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.11726300792796,r[:number])
end

def test_costpercapita_s26
  r = spreadsheet.costpercapita_s26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.4132378230336,r[:number])
end

def test_costpercapita_t26
  r = spreadsheet.costpercapita_t26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.8194063736814,r[:number])
end

def test_costpercapita_u26
  r = spreadsheet.costpercapita_u26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.49600709499136,r[:number])
end

def test_costpercapita_v26
  r = spreadsheet.costpercapita_v26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.38404397360709,r[:number])
end

def test_costpercapita_w26
  r = spreadsheet.costpercapita_w26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48957995625537,r[:number])
end

def test_costpercapita_y26
  r = spreadsheet.costpercapita_y26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z26
  r = spreadsheet.costpercapita_z26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa26
  r = spreadsheet.costpercapita_aa26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab26
  r = spreadsheet.costpercapita_ab26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac26
  r = spreadsheet.costpercapita_ac26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad26
  r = spreadsheet.costpercapita_ad26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae26
  r = spreadsheet.costpercapita_ae26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af26
  r = spreadsheet.costpercapita_af26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag26
  r = spreadsheet.costpercapita_ag26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai26
  r = spreadsheet.costpercapita_ai26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.67366082560503,r[:number])
end

def test_costpercapita_aj26
  r = spreadsheet.costpercapita_aj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.60961253493352,r[:number])
end

def test_costpercapita_ak26
  r = spreadsheet.costpercapita_ak26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.8052513757328,r[:number])
end

def test_costpercapita_al26
  r = spreadsheet.costpercapita_al26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.28720475246962,r[:number])
end

def test_costpercapita_am26
  r = spreadsheet.costpercapita_am26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.7520597348366,r[:number])
end

def test_costpercapita_an26
  r = spreadsheet.costpercapita_an26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.25959024064767,r[:number])
end

def test_costpercapita_ao26
  r = spreadsheet.costpercapita_ao26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(248.40121244645886,r[:number])
end

def test_costpercapita_ap26
  r = spreadsheet.costpercapita_ap26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271.1345486836479,r[:number])
end

def test_costpercapita_aq26
  r = spreadsheet.costpercapita_aq26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.0911773587254,r[:number])
end

def test_costpercapita_as26
  r = spreadsheet.costpercapita_as26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.89047977256192,r[:number])
end

def test_costpercapita_at26
  r = spreadsheet.costpercapita_at26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4484.061937982865,r[:number])
end

def test_costpercapita_av26
  r = spreadsheet.costpercapita_av26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw26
  r = spreadsheet.costpercapita_aw26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay26
  r = spreadsheet.costpercapita_ay26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.41610337398357,r[:number])
end

def test_costpercapita_az26
  r = spreadsheet.costpercapita_az26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.66809285687317,r[:number])
end

def test_costpercapita_ba26
  r = spreadsheet.costpercapita_ba26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.12400280409797,r[:number])
end

def test_costpercapita_bb26
  r = spreadsheet.costpercapita_bb26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.16994174454166,r[:number])
end

def test_costpercapita_bc26
  r = spreadsheet.costpercapita_bc26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.338821911803,r[:number])
end

def test_costpercapita_bd26
  r = spreadsheet.costpercapita_bd26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.44018386696627,r[:number])
end

def test_costpercapita_be26
  r = spreadsheet.costpercapita_be26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.90520535146752,r[:number])
end

def test_costpercapita_bf26
  r = spreadsheet.costpercapita_bf26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.7505047100408,r[:number])
end

def test_costpercapita_bg26
  r = spreadsheet.costpercapita_bg26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(201.60159740247005,r[:number])
end

def test_costpercapita_bi26
  r = spreadsheet.costpercapita_bi26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.41610337398357,r[:number])
end

def test_costpercapita_bj26
  r = spreadsheet.costpercapita_bj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.66809285687317,r[:number])
end

def test_costpercapita_bk26
  r = spreadsheet.costpercapita_bk26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.12400280409797,r[:number])
end

def test_costpercapita_bl26
  r = spreadsheet.costpercapita_bl26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.16994174454166,r[:number])
end

def test_costpercapita_bm26
  r = spreadsheet.costpercapita_bm26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.338821911803,r[:number])
end

def test_costpercapita_bn26
  r = spreadsheet.costpercapita_bn26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.44018386696627,r[:number])
end

def test_costpercapita_bo26
  r = spreadsheet.costpercapita_bo26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.90520535146752,r[:number])
end

def test_costpercapita_bp26
  r = spreadsheet.costpercapita_bp26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.7505047100408,r[:number])
end

def test_costpercapita_bq26
  r = spreadsheet.costpercapita_bq26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(201.60159740247005,r[:number])
end

def test_costpercapita_bs26
  r = spreadsheet.costpercapita_bs26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.39625857628266,r[:number])
end

def test_costpercapita_bt26
  r = spreadsheet.costpercapita_bt26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.60961253493352,r[:number])
end

def test_costpercapita_bu26
  r = spreadsheet.costpercapita_bu26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.8052513757328,r[:number])
end

def test_costpercapita_bv26
  r = spreadsheet.costpercapita_bv26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.28720475246962,r[:number])
end

def test_costpercapita_bw26
  r = spreadsheet.costpercapita_bw26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.7520597348366,r[:number])
end

def test_costpercapita_bx26
  r = spreadsheet.costpercapita_bx26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.25959024064767,r[:number])
end

def test_costpercapita_by26
  r = spreadsheet.costpercapita_by26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(248.40121244645886,r[:number])
end

def test_costpercapita_bz26
  r = spreadsheet.costpercapita_bz26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271.1345486836479,r[:number])
end

def test_costpercapita_ca26
  r = spreadsheet.costpercapita_ca26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(296.0911773587254,r[:number])
end

def test_costpercapita_cc26
  r = spreadsheet.costpercapita_cc26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.85965730041502,r[:number])
end

def test_costpercapita_cd26
  r = spreadsheet.costpercapita_cd26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4429.784535733543,r[:number])
end

def test_costpercapita_cf26
  r = spreadsheet.costpercapita_cf26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-54.27740224932238,r[:number])
end

def test_costpercapita_cg26
  r = spreadsheet.costpercapita_cg26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch26
  r = spreadsheet.costpercapita_ch26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci26
  r = spreadsheet.costpercapita_ci26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj26
  r = spreadsheet.costpercapita_cj26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck26
  r = spreadsheet.costpercapita_ck26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl26
  r = spreadsheet.costpercapita_cl26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm26
  r = spreadsheet.costpercapita_cm26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn26
  r = spreadsheet.costpercapita_cn26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp26
  r = spreadsheet.costpercapita_cp26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.030822472146931,r[:number])
end

def test_costpercapita_cq26
  r = spreadsheet.costpercapita_cq26
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-54.27740224932238,r[:number])
end

def test_costpercapita_cr26
  r = spreadsheet.costpercapita_cr26
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a27
  r = spreadsheet.costpercapita_a27
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b27
  r = spreadsheet.costpercapita_b27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c27
  r = spreadsheet.costpercapita_c27
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e27
  r = spreadsheet.costpercapita_e27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.00682164100754,r[:number])
end

def test_costpercapita_f27
  r = spreadsheet.costpercapita_f27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number])
end

def test_costpercapita_g27
  r = spreadsheet.costpercapita_g27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6803049897874783,r[:number])
end

def test_costpercapita_h27
  r = spreadsheet.costpercapita_h27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.659240383412685,r[:number])
end

def test_costpercapita_i27
  r = spreadsheet.costpercapita_i27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6412298352105243,r[:number])
end

def test_costpercapita_j27
  r = spreadsheet.costpercapita_j27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6261252202641515,r[:number])
end

def test_costpercapita_k27
  r = spreadsheet.costpercapita_k27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6127722319699723,r[:number])
end

def test_costpercapita_l27
  r = spreadsheet.costpercapita_l27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6005486972205223,r[:number])
end

def test_costpercapita_m27
  r = spreadsheet.costpercapita_m27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5893414164417934,r[:number])
end

def test_costpercapita_o27
  r = spreadsheet.costpercapita_o27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p27
  r = spreadsheet.costpercapita_p27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q27
  r = spreadsheet.costpercapita_q27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r27
  r = spreadsheet.costpercapita_r27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s27
  r = spreadsheet.costpercapita_s27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t27
  r = spreadsheet.costpercapita_t27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u27
  r = spreadsheet.costpercapita_u27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v27
  r = spreadsheet.costpercapita_v27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w27
  r = spreadsheet.costpercapita_w27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y27
  r = spreadsheet.costpercapita_y27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z27
  r = spreadsheet.costpercapita_z27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa27
  r = spreadsheet.costpercapita_aa27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab27
  r = spreadsheet.costpercapita_ab27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac27
  r = spreadsheet.costpercapita_ac27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad27
  r = spreadsheet.costpercapita_ad27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae27
  r = spreadsheet.costpercapita_ae27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af27
  r = spreadsheet.costpercapita_af27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag27
  r = spreadsheet.costpercapita_ag27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai27
  r = spreadsheet.costpercapita_ai27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.00682164100754,r[:number])
end

def test_costpercapita_aj27
  r = spreadsheet.costpercapita_aj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number])
end

def test_costpercapita_ak27
  r = spreadsheet.costpercapita_ak27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6803049897874783,r[:number])
end

def test_costpercapita_al27
  r = spreadsheet.costpercapita_al27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.659240383412685,r[:number])
end

def test_costpercapita_am27
  r = spreadsheet.costpercapita_am27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6412298352105243,r[:number])
end

def test_costpercapita_an27
  r = spreadsheet.costpercapita_an27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6261252202641515,r[:number])
end

def test_costpercapita_ao27
  r = spreadsheet.costpercapita_ao27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6127722319699723,r[:number])
end

def test_costpercapita_ap27
  r = spreadsheet.costpercapita_ap27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6005486972205223,r[:number])
end

def test_costpercapita_aq27
  r = spreadsheet.costpercapita_aq27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5893414164417934,r[:number])
end

def test_costpercapita_as27
  r = spreadsheet.costpercapita_as27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6165212602831227,r[:number])
end

def test_costpercapita_at27
  r = spreadsheet.costpercapita_at27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.303909786451165,r[:number])
end

def test_costpercapita_av27
  r = spreadsheet.costpercapita_av27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw27
  r = spreadsheet.costpercapita_aw27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay27
  r = spreadsheet.costpercapita_ay27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.204092984604524,r[:number])
end

def test_costpercapita_az27
  r = spreadsheet.costpercapita_az27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number])
end

def test_costpercapita_ba27
  r = spreadsheet.costpercapita_ba27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6803049897874783,r[:number])
end

def test_costpercapita_bb27
  r = spreadsheet.costpercapita_bb27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.659240383412685,r[:number])
end

def test_costpercapita_bc27
  r = spreadsheet.costpercapita_bc27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6412298352105243,r[:number])
end

def test_costpercapita_bd27
  r = spreadsheet.costpercapita_bd27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6261252202641515,r[:number])
end

def test_costpercapita_be27
  r = spreadsheet.costpercapita_be27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6127722319699723,r[:number])
end

def test_costpercapita_bf27
  r = spreadsheet.costpercapita_bf27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6005486972205223,r[:number])
end

def test_costpercapita_bg27
  r = spreadsheet.costpercapita_bg27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5893414164417934,r[:number])
end

def test_costpercapita_bi27
  r = spreadsheet.costpercapita_bi27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.204092984604524,r[:number])
end

def test_costpercapita_bj27
  r = spreadsheet.costpercapita_bj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number])
end

def test_costpercapita_bk27
  r = spreadsheet.costpercapita_bk27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6803049897874783,r[:number])
end

def test_costpercapita_bl27
  r = spreadsheet.costpercapita_bl27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.659240383412685,r[:number])
end

def test_costpercapita_bm27
  r = spreadsheet.costpercapita_bm27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6412298352105243,r[:number])
end

def test_costpercapita_bn27
  r = spreadsheet.costpercapita_bn27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6261252202641515,r[:number])
end

def test_costpercapita_bo27
  r = spreadsheet.costpercapita_bo27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6127722319699723,r[:number])
end

def test_costpercapita_bp27
  r = spreadsheet.costpercapita_bp27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6005486972205223,r[:number])
end

def test_costpercapita_bq27
  r = spreadsheet.costpercapita_bq27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5893414164417934,r[:number])
end

def test_costpercapita_bs27
  r = spreadsheet.costpercapita_bs27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.204092984604524,r[:number])
end

def test_costpercapita_bt27
  r = spreadsheet.costpercapita_bt27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1323069272334356,r[:number])
end

def test_costpercapita_bu27
  r = spreadsheet.costpercapita_bu27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6803049897874783,r[:number])
end

def test_costpercapita_bv27
  r = spreadsheet.costpercapita_bv27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.659240383412685,r[:number])
end

def test_costpercapita_bw27
  r = spreadsheet.costpercapita_bw27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6412298352105243,r[:number])
end

def test_costpercapita_bx27
  r = spreadsheet.costpercapita_bx27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6261252202641515,r[:number])
end

def test_costpercapita_by27
  r = spreadsheet.costpercapita_by27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6127722319699723,r[:number])
end

def test_costpercapita_bz27
  r = spreadsheet.costpercapita_bz27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6005486972205223,r[:number])
end

def test_costpercapita_ca27
  r = spreadsheet.costpercapita_ca27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5893414164417934,r[:number])
end

def test_costpercapita_cc27
  r = spreadsheet.costpercapita_cc27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.305106965127232,r[:number])
end

def test_costpercapita_cd27
  r = spreadsheet.costpercapita_cd27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.50118113004815,r[:number])
end

def test_costpercapita_cf27
  r = spreadsheet.costpercapita_cf27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.8027286564030156,r[:number])
end

def test_costpercapita_cg27
  r = spreadsheet.costpercapita_cg27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch27
  r = spreadsheet.costpercapita_ch27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci27
  r = spreadsheet.costpercapita_ci27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj27
  r = spreadsheet.costpercapita_cj27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck27
  r = spreadsheet.costpercapita_ck27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl27
  r = spreadsheet.costpercapita_cl27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm27
  r = spreadsheet.costpercapita_cm27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn27
  r = spreadsheet.costpercapita_cn27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp27
  r = spreadsheet.costpercapita_cp27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.31141429515589064,r[:number])
end

def test_costpercapita_cq27
  r = spreadsheet.costpercapita_cq27
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.8027286564030156,r[:number])
end

def test_costpercapita_cr27
  r = spreadsheet.costpercapita_cr27
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a28
  r = spreadsheet.costpercapita_a28
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b28
  r = spreadsheet.costpercapita_b28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c28
  r = spreadsheet.costpercapita_c28
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e28
  r = spreadsheet.costpercapita_e28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.11208181769604,r[:number])
end

def test_costpercapita_f28
  r = spreadsheet.costpercapita_f28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.70727799640565,r[:number])
end

def test_costpercapita_g28
  r = spreadsheet.costpercapita_g28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.57819102446868,r[:number])
end

def test_costpercapita_h28
  r = spreadsheet.costpercapita_h28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.64898466712944,r[:number])
end

def test_costpercapita_i28
  r = spreadsheet.costpercapita_i28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.38263632810052,r[:number])
end

def test_costpercapita_j28
  r = spreadsheet.costpercapita_j28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.0011706361743,r[:number])
end

def test_costpercapita_k28
  r = spreadsheet.costpercapita_k28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.6521941012258,r[:number])
end

def test_costpercapita_l28
  r = spreadsheet.costpercapita_l28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.43887448021573,r[:number])
end

def test_costpercapita_m28
  r = spreadsheet.costpercapita_m28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.10925448093604,r[:number])
end

def test_costpercapita_o28
  r = spreadsheet.costpercapita_o28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.856410347742039,r[:number])
end

def test_costpercapita_p28
  r = spreadsheet.costpercapita_p28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.040479229387764,r[:number])
end

def test_costpercapita_q28
  r = spreadsheet.costpercapita_q28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.347001312593689,r[:number])
end

def test_costpercapita_r28
  r = spreadsheet.costpercapita_r28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.689467738235032,r[:number])
end

def test_costpercapita_s28
  r = spreadsheet.costpercapita_s28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.08654229611378,r[:number])
end

def test_costpercapita_t28
  r = spreadsheet.costpercapita_t28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.545275016872004,r[:number])
end

def test_costpercapita_u28
  r = spreadsheet.costpercapita_u28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.058730477040784,r[:number])
end

def test_costpercapita_v28
  r = spreadsheet.costpercapita_v28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.624471072380468,r[:number])
end

def test_costpercapita_w28
  r = spreadsheet.costpercapita_w28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.246677138183504,r[:number])
end

def test_costpercapita_y28
  r = spreadsheet.costpercapita_y28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z28
  r = spreadsheet.costpercapita_z28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa28
  r = spreadsheet.costpercapita_aa28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab28
  r = spreadsheet.costpercapita_ab28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac28
  r = spreadsheet.costpercapita_ac28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad28
  r = spreadsheet.costpercapita_ad28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae28
  r = spreadsheet.costpercapita_ae28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af28
  r = spreadsheet.costpercapita_af28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag28
  r = spreadsheet.costpercapita_ag28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai28
  r = spreadsheet.costpercapita_ai28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.96849216543808,r[:number])
end

def test_costpercapita_aj28
  r = spreadsheet.costpercapita_aj28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.7477572257934,r[:number])
end

def test_costpercapita_ak28
  r = spreadsheet.costpercapita_ak28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.92519233706238,r[:number])
end

def test_costpercapita_al28
  r = spreadsheet.costpercapita_al28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.33845240536448,r[:number])
end

def test_costpercapita_am28
  r = spreadsheet.costpercapita_am28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.4691786242143,r[:number])
end

def test_costpercapita_an28
  r = spreadsheet.costpercapita_an28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.5464456530463,r[:number])
end

def test_costpercapita_ao28
  r = spreadsheet.costpercapita_ao28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.71092457826657,r[:number])
end

def test_costpercapita_ap28
  r = spreadsheet.costpercapita_ap28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.0633455525962,r[:number])
end

def test_costpercapita_aq28
  r = spreadsheet.costpercapita_aq28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218.35593161911956,r[:number])
end

def test_costpercapita_as28
  r = spreadsheet.costpercapita_as28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.1250800178779,r[:number])
end

def test_costpercapita_at28
  r = spreadsheet.costpercapita_at28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3563.3010644922088,r[:number])
end

def test_costpercapita_av28
  r = spreadsheet.costpercapita_av28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw28
  r = spreadsheet.costpercapita_aw28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay28
  r = spreadsheet.costpercapita_ay28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.86724909061762,r[:number])
end

def test_costpercapita_az28
  r = spreadsheet.costpercapita_az28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.70727799640565,r[:number])
end

def test_costpercapita_ba28
  r = spreadsheet.costpercapita_ba28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.57819102446868,r[:number])
end

def test_costpercapita_bb28
  r = spreadsheet.costpercapita_bb28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.64898466712944,r[:number])
end

def test_costpercapita_bc28
  r = spreadsheet.costpercapita_bc28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.38263632810052,r[:number])
end

def test_costpercapita_bd28
  r = spreadsheet.costpercapita_bd28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.0011706361743,r[:number])
end

def test_costpercapita_be28
  r = spreadsheet.costpercapita_be28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.6521941012258,r[:number])
end

def test_costpercapita_bf28
  r = spreadsheet.costpercapita_bf28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.4388744802157,r[:number])
end

def test_costpercapita_bg28
  r = spreadsheet.costpercapita_bg28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.10925448093607,r[:number])
end

def test_costpercapita_bi28
  r = spreadsheet.costpercapita_bi28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.86724909061762,r[:number])
end

def test_costpercapita_bj28
  r = spreadsheet.costpercapita_bj28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.70727799640565,r[:number])
end

def test_costpercapita_bk28
  r = spreadsheet.costpercapita_bk28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.57819102446868,r[:number])
end

def test_costpercapita_bl28
  r = spreadsheet.costpercapita_bl28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.64898466712944,r[:number])
end

def test_costpercapita_bm28
  r = spreadsheet.costpercapita_bm28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.38263632810052,r[:number])
end

def test_costpercapita_bn28
  r = spreadsheet.costpercapita_bn28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.0011706361743,r[:number])
end

def test_costpercapita_bo28
  r = spreadsheet.costpercapita_bo28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.6521941012258,r[:number])
end

def test_costpercapita_bp28
  r = spreadsheet.costpercapita_bp28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.4388744802157,r[:number])
end

def test_costpercapita_bq28
  r = spreadsheet.costpercapita_bq28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.10925448093607,r[:number])
end

def test_costpercapita_bs28
  r = spreadsheet.costpercapita_bs28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.723659438359654,r[:number])
end

def test_costpercapita_bt28
  r = spreadsheet.costpercapita_bt28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.7477572257934,r[:number])
end

def test_costpercapita_bu28
  r = spreadsheet.costpercapita_bu28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.92519233706238,r[:number])
end

def test_costpercapita_bv28
  r = spreadsheet.costpercapita_bv28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.33845240536448,r[:number])
end

def test_costpercapita_bw28
  r = spreadsheet.costpercapita_bw28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.4691786242143,r[:number])
end

def test_costpercapita_bx28
  r = spreadsheet.costpercapita_bx28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.5464456530463,r[:number])
end

def test_costpercapita_by28
  r = spreadsheet.costpercapita_by28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.71092457826657,r[:number])
end

def test_costpercapita_bz28
  r = spreadsheet.costpercapita_bz28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.0633455525962,r[:number])
end

def test_costpercapita_ca28
  r = spreadsheet.costpercapita_ca28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218.35593161911956,r[:number])
end

def test_costpercapita_cc28
  r = spreadsheet.costpercapita_cc28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.43120971486917,r[:number])
end

def test_costpercapita_cd28
  r = spreadsheet.costpercapita_cd28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3530.0562317651306,r[:number])
end

def test_costpercapita_cf28
  r = spreadsheet.costpercapita_cf28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-33.24483272707841,r[:number])
end

def test_costpercapita_cg28
  r = spreadsheet.costpercapita_cg28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch28
  r = spreadsheet.costpercapita_ch28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci28
  r = spreadsheet.costpercapita_ci28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj28
  r = spreadsheet.costpercapita_cj28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck28
  r = spreadsheet.costpercapita_ck28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl28
  r = spreadsheet.costpercapita_cl28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm28
  r = spreadsheet.costpercapita_cm28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn28
  r = spreadsheet.costpercapita_cn28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp28
  r = spreadsheet.costpercapita_cp28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.6938703030087123,r[:number])
end

def test_costpercapita_cq28
  r = spreadsheet.costpercapita_cq28
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-33.24483272707841,r[:number])
end

def test_costpercapita_cr28
  r = spreadsheet.costpercapita_cr28
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a29
  r = spreadsheet.costpercapita_a29
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b29
  r = spreadsheet.costpercapita_b29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c29
  r = spreadsheet.costpercapita_c29
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e29
  r = spreadsheet.costpercapita_e29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.25458564664322,r[:number])
end

def test_costpercapita_f29
  r = spreadsheet.costpercapita_f29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number])
end

def test_costpercapita_g29
  r = spreadsheet.costpercapita_g29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number])
end

def test_costpercapita_h29
  r = spreadsheet.costpercapita_h29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number])
end

def test_costpercapita_i29
  r = spreadsheet.costpercapita_i29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number])
end

def test_costpercapita_j29
  r = spreadsheet.costpercapita_j29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number])
end

def test_costpercapita_k29
  r = spreadsheet.costpercapita_k29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number])
end

def test_costpercapita_l29
  r = spreadsheet.costpercapita_l29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number])
end

def test_costpercapita_m29
  r = spreadsheet.costpercapita_m29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number])
end

def test_costpercapita_o29
  r = spreadsheet.costpercapita_o29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p29
  r = spreadsheet.costpercapita_p29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q29
  r = spreadsheet.costpercapita_q29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r29
  r = spreadsheet.costpercapita_r29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s29
  r = spreadsheet.costpercapita_s29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t29
  r = spreadsheet.costpercapita_t29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u29
  r = spreadsheet.costpercapita_u29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v29
  r = spreadsheet.costpercapita_v29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w29
  r = spreadsheet.costpercapita_w29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y29
  r = spreadsheet.costpercapita_y29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z29
  r = spreadsheet.costpercapita_z29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa29
  r = spreadsheet.costpercapita_aa29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab29
  r = spreadsheet.costpercapita_ab29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac29
  r = spreadsheet.costpercapita_ac29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad29
  r = spreadsheet.costpercapita_ad29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae29
  r = spreadsheet.costpercapita_ae29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af29
  r = spreadsheet.costpercapita_af29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag29
  r = spreadsheet.costpercapita_ag29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai29
  r = spreadsheet.costpercapita_ai29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.25458564664322,r[:number])
end

def test_costpercapita_aj29
  r = spreadsheet.costpercapita_aj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number])
end

def test_costpercapita_ak29
  r = spreadsheet.costpercapita_ak29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number])
end

def test_costpercapita_al29
  r = spreadsheet.costpercapita_al29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number])
end

def test_costpercapita_am29
  r = spreadsheet.costpercapita_am29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number])
end

def test_costpercapita_an29
  r = spreadsheet.costpercapita_an29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number])
end

def test_costpercapita_ao29
  r = spreadsheet.costpercapita_ao29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number])
end

def test_costpercapita_ap29
  r = spreadsheet.costpercapita_ap29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number])
end

def test_costpercapita_aq29
  r = spreadsheet.costpercapita_aq29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number])
end

def test_costpercapita_as29
  r = spreadsheet.costpercapita_as29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.64321700701357,r[:number])
end

def test_costpercapita_at29
  r = spreadsheet.costpercapita_at29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(866.2507209717971,r[:number])
end

def test_costpercapita_av29
  r = spreadsheet.costpercapita_av29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw29
  r = spreadsheet.costpercapita_aw29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay29
  r = spreadsheet.costpercapita_ay29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.352751387985933,r[:number])
end

def test_costpercapita_az29
  r = spreadsheet.costpercapita_az29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number])
end

def test_costpercapita_ba29
  r = spreadsheet.costpercapita_ba29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number])
end

def test_costpercapita_bb29
  r = spreadsheet.costpercapita_bb29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number])
end

def test_costpercapita_bc29
  r = spreadsheet.costpercapita_bc29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number])
end

def test_costpercapita_bd29
  r = spreadsheet.costpercapita_bd29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number])
end

def test_costpercapita_be29
  r = spreadsheet.costpercapita_be29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number])
end

def test_costpercapita_bf29
  r = spreadsheet.costpercapita_bf29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number])
end

def test_costpercapita_bg29
  r = spreadsheet.costpercapita_bg29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number])
end

def test_costpercapita_bi29
  r = spreadsheet.costpercapita_bi29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.352751387985933,r[:number])
end

def test_costpercapita_bj29
  r = spreadsheet.costpercapita_bj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number])
end

def test_costpercapita_bk29
  r = spreadsheet.costpercapita_bk29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number])
end

def test_costpercapita_bl29
  r = spreadsheet.costpercapita_bl29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number])
end

def test_costpercapita_bm29
  r = spreadsheet.costpercapita_bm29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number])
end

def test_costpercapita_bn29
  r = spreadsheet.costpercapita_bn29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number])
end

def test_costpercapita_bo29
  r = spreadsheet.costpercapita_bo29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number])
end

def test_costpercapita_bp29
  r = spreadsheet.costpercapita_bp29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number])
end

def test_costpercapita_bq29
  r = spreadsheet.costpercapita_bq29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number])
end

def test_costpercapita_bs29
  r = spreadsheet.costpercapita_bs29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.352751387985933,r[:number])
end

def test_costpercapita_bt29
  r = spreadsheet.costpercapita_bt29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.69948488703974,r[:number])
end

def test_costpercapita_bu29
  r = spreadsheet.costpercapita_bu29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.22598368362486,r[:number])
end

def test_costpercapita_bv29
  r = spreadsheet.costpercapita_bv29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.410538030184924,r[:number])
end

def test_costpercapita_bw29
  r = spreadsheet.costpercapita_bw29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.52717167637147,r[:number])
end

def test_costpercapita_bx29
  r = spreadsheet.costpercapita_bx29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.257147561807585,r[:number])
end

def test_costpercapita_by29
  r = spreadsheet.costpercapita_by29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.4655246630101,r[:number])
end

def test_costpercapita_bz29
  r = spreadsheet.costpercapita_bz29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.77142809868947,r[:number])
end

def test_costpercapita_ca29
  r = spreadsheet.costpercapita_ca29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.17708881575076,r[:number])
end

def test_costpercapita_cc29
  r = spreadsheet.costpercapita_cc29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.987457644940534,r[:number])
end

def test_costpercapita_cd29
  r = spreadsheet.costpercapita_cd29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(851.3488867131398,r[:number])
end

def test_costpercapita_cf29
  r = spreadsheet.costpercapita_cf29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.901834258657289,r[:number])
end

def test_costpercapita_cg29
  r = spreadsheet.costpercapita_cg29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch29
  r = spreadsheet.costpercapita_ch29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci29
  r = spreadsheet.costpercapita_ci29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj29
  r = spreadsheet.costpercapita_cj29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck29
  r = spreadsheet.costpercapita_ck29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl29
  r = spreadsheet.costpercapita_cl29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm29
  r = spreadsheet.costpercapita_cm29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn29
  r = spreadsheet.costpercapita_cn29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp29
  r = spreadsheet.costpercapita_cp29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.655759362073032,r[:number])
end

def test_costpercapita_cq29
  r = spreadsheet.costpercapita_cq29
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-14.901834258657289,r[:number])
end

def test_costpercapita_cr29
  r = spreadsheet.costpercapita_cr29
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a30
  r = spreadsheet.costpercapita_a30
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b30
  r = spreadsheet.costpercapita_b30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c30
  r = spreadsheet.costpercapita_c30
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e30
  r = spreadsheet.costpercapita_e30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f30
  r = spreadsheet.costpercapita_f30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g30
  r = spreadsheet.costpercapita_g30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h30
  r = spreadsheet.costpercapita_h30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i30
  r = spreadsheet.costpercapita_i30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j30
  r = spreadsheet.costpercapita_j30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k30
  r = spreadsheet.costpercapita_k30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l30
  r = spreadsheet.costpercapita_l30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m30
  r = spreadsheet.costpercapita_m30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o30
  r = spreadsheet.costpercapita_o30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p30
  r = spreadsheet.costpercapita_p30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q30
  r = spreadsheet.costpercapita_q30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r30
  r = spreadsheet.costpercapita_r30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s30
  r = spreadsheet.costpercapita_s30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t30
  r = spreadsheet.costpercapita_t30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u30
  r = spreadsheet.costpercapita_u30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v30
  r = spreadsheet.costpercapita_v30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w30
  r = spreadsheet.costpercapita_w30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y30
  r = spreadsheet.costpercapita_y30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z30
  r = spreadsheet.costpercapita_z30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa30
  r = spreadsheet.costpercapita_aa30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab30
  r = spreadsheet.costpercapita_ab30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac30
  r = spreadsheet.costpercapita_ac30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad30
  r = spreadsheet.costpercapita_ad30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae30
  r = spreadsheet.costpercapita_ae30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af30
  r = spreadsheet.costpercapita_af30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag30
  r = spreadsheet.costpercapita_ag30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai30
  r = spreadsheet.costpercapita_ai30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj30
  r = spreadsheet.costpercapita_aj30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak30
  r = spreadsheet.costpercapita_ak30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al30
  r = spreadsheet.costpercapita_al30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am30
  r = spreadsheet.costpercapita_am30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an30
  r = spreadsheet.costpercapita_an30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao30
  r = spreadsheet.costpercapita_ao30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap30
  r = spreadsheet.costpercapita_ap30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq30
  r = spreadsheet.costpercapita_aq30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as30
  r = spreadsheet.costpercapita_as30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at30
  r = spreadsheet.costpercapita_at30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av30
  r = spreadsheet.costpercapita_av30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw30
  r = spreadsheet.costpercapita_aw30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay30
  r = spreadsheet.costpercapita_ay30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az30
  r = spreadsheet.costpercapita_az30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba30
  r = spreadsheet.costpercapita_ba30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb30
  r = spreadsheet.costpercapita_bb30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc30
  r = spreadsheet.costpercapita_bc30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd30
  r = spreadsheet.costpercapita_bd30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be30
  r = spreadsheet.costpercapita_be30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf30
  r = spreadsheet.costpercapita_bf30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg30
  r = spreadsheet.costpercapita_bg30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi30
  r = spreadsheet.costpercapita_bi30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj30
  r = spreadsheet.costpercapita_bj30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk30
  r = spreadsheet.costpercapita_bk30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl30
  r = spreadsheet.costpercapita_bl30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm30
  r = spreadsheet.costpercapita_bm30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn30
  r = spreadsheet.costpercapita_bn30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo30
  r = spreadsheet.costpercapita_bo30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp30
  r = spreadsheet.costpercapita_bp30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq30
  r = spreadsheet.costpercapita_bq30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs30
  r = spreadsheet.costpercapita_bs30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt30
  r = spreadsheet.costpercapita_bt30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu30
  r = spreadsheet.costpercapita_bu30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv30
  r = spreadsheet.costpercapita_bv30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw30
  r = spreadsheet.costpercapita_bw30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx30
  r = spreadsheet.costpercapita_bx30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by30
  r = spreadsheet.costpercapita_by30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz30
  r = spreadsheet.costpercapita_bz30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca30
  r = spreadsheet.costpercapita_ca30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc30
  r = spreadsheet.costpercapita_cc30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd30
  r = spreadsheet.costpercapita_cd30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf30
  r = spreadsheet.costpercapita_cf30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg30
  r = spreadsheet.costpercapita_cg30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch30
  r = spreadsheet.costpercapita_ch30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci30
  r = spreadsheet.costpercapita_ci30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj30
  r = spreadsheet.costpercapita_cj30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck30
  r = spreadsheet.costpercapita_ck30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl30
  r = spreadsheet.costpercapita_cl30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm30
  r = spreadsheet.costpercapita_cm30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn30
  r = spreadsheet.costpercapita_cn30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp30
  r = spreadsheet.costpercapita_cp30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq30
  r = spreadsheet.costpercapita_cq30
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr30
  r = spreadsheet.costpercapita_cr30
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a31
  r = spreadsheet.costpercapita_a31
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b31
  r = spreadsheet.costpercapita_b31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c31
  r = spreadsheet.costpercapita_c31
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e31
  r = spreadsheet.costpercapita_e31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f31
  r = spreadsheet.costpercapita_f31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g31
  r = spreadsheet.costpercapita_g31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h31
  r = spreadsheet.costpercapita_h31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i31
  r = spreadsheet.costpercapita_i31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j31
  r = spreadsheet.costpercapita_j31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k31
  r = spreadsheet.costpercapita_k31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l31
  r = spreadsheet.costpercapita_l31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m31
  r = spreadsheet.costpercapita_m31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o31
  r = spreadsheet.costpercapita_o31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p31
  r = spreadsheet.costpercapita_p31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q31
  r = spreadsheet.costpercapita_q31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r31
  r = spreadsheet.costpercapita_r31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s31
  r = spreadsheet.costpercapita_s31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t31
  r = spreadsheet.costpercapita_t31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u31
  r = spreadsheet.costpercapita_u31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v31
  r = spreadsheet.costpercapita_v31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w31
  r = spreadsheet.costpercapita_w31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y31
  r = spreadsheet.costpercapita_y31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z31
  r = spreadsheet.costpercapita_z31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa31
  r = spreadsheet.costpercapita_aa31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab31
  r = spreadsheet.costpercapita_ab31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac31
  r = spreadsheet.costpercapita_ac31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad31
  r = spreadsheet.costpercapita_ad31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae31
  r = spreadsheet.costpercapita_ae31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af31
  r = spreadsheet.costpercapita_af31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag31
  r = spreadsheet.costpercapita_ag31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai31
  r = spreadsheet.costpercapita_ai31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj31
  r = spreadsheet.costpercapita_aj31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak31
  r = spreadsheet.costpercapita_ak31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al31
  r = spreadsheet.costpercapita_al31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am31
  r = spreadsheet.costpercapita_am31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an31
  r = spreadsheet.costpercapita_an31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao31
  r = spreadsheet.costpercapita_ao31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap31
  r = spreadsheet.costpercapita_ap31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq31
  r = spreadsheet.costpercapita_aq31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as31
  r = spreadsheet.costpercapita_as31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at31
  r = spreadsheet.costpercapita_at31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av31
  r = spreadsheet.costpercapita_av31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw31
  r = spreadsheet.costpercapita_aw31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay31
  r = spreadsheet.costpercapita_ay31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az31
  r = spreadsheet.costpercapita_az31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba31
  r = spreadsheet.costpercapita_ba31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb31
  r = spreadsheet.costpercapita_bb31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc31
  r = spreadsheet.costpercapita_bc31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd31
  r = spreadsheet.costpercapita_bd31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be31
  r = spreadsheet.costpercapita_be31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf31
  r = spreadsheet.costpercapita_bf31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg31
  r = spreadsheet.costpercapita_bg31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi31
  r = spreadsheet.costpercapita_bi31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj31
  r = spreadsheet.costpercapita_bj31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk31
  r = spreadsheet.costpercapita_bk31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl31
  r = spreadsheet.costpercapita_bl31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm31
  r = spreadsheet.costpercapita_bm31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn31
  r = spreadsheet.costpercapita_bn31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo31
  r = spreadsheet.costpercapita_bo31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp31
  r = spreadsheet.costpercapita_bp31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq31
  r = spreadsheet.costpercapita_bq31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs31
  r = spreadsheet.costpercapita_bs31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt31
  r = spreadsheet.costpercapita_bt31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu31
  r = spreadsheet.costpercapita_bu31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv31
  r = spreadsheet.costpercapita_bv31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw31
  r = spreadsheet.costpercapita_bw31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx31
  r = spreadsheet.costpercapita_bx31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by31
  r = spreadsheet.costpercapita_by31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz31
  r = spreadsheet.costpercapita_bz31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca31
  r = spreadsheet.costpercapita_ca31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc31
  r = spreadsheet.costpercapita_cc31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd31
  r = spreadsheet.costpercapita_cd31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf31
  r = spreadsheet.costpercapita_cf31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg31
  r = spreadsheet.costpercapita_cg31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch31
  r = spreadsheet.costpercapita_ch31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci31
  r = spreadsheet.costpercapita_ci31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj31
  r = spreadsheet.costpercapita_cj31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck31
  r = spreadsheet.costpercapita_ck31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl31
  r = spreadsheet.costpercapita_cl31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm31
  r = spreadsheet.costpercapita_cm31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn31
  r = spreadsheet.costpercapita_cn31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp31
  r = spreadsheet.costpercapita_cp31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq31
  r = spreadsheet.costpercapita_cq31
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr31
  r = spreadsheet.costpercapita_cr31
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a32
  r = spreadsheet.costpercapita_a32
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.ICE",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b32
  r = spreadsheet.costpercapita_b32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c32
  r = spreadsheet.costpercapita_c32
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e32
  r = spreadsheet.costpercapita_e32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(791.1581136576866,r[:number])
end

def test_costpercapita_f32
  r = spreadsheet.costpercapita_f32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(723.3010077781341,r[:number])
end

def test_costpercapita_g32
  r = spreadsheet.costpercapita_g32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(754.6567055757428,r[:number])
end

def test_costpercapita_h32
  r = spreadsheet.costpercapita_h32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(692.9608529994541,r[:number])
end

def test_costpercapita_i32
  r = spreadsheet.costpercapita_i32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(654.4283203980164,r[:number])
end

def test_costpercapita_j32
  r = spreadsheet.costpercapita_j32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(616.033729105639,r[:number])
end

def test_costpercapita_k32
  r = spreadsheet.costpercapita_k32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572.8155800812498,r[:number])
end

def test_costpercapita_l32
  r = spreadsheet.costpercapita_l32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(549.6185236743013,r[:number])
end

def test_costpercapita_m32
  r = spreadsheet.costpercapita_m32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.2354956227815,r[:number])
end

def test_costpercapita_o32
  r = spreadsheet.costpercapita_o32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.6199100558307,r[:number])
end

def test_costpercapita_p32
  r = spreadsheet.costpercapita_p32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(795.0695441040543,r[:number])
end

def test_costpercapita_q32
  r = spreadsheet.costpercapita_q32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(708.6280928828731,r[:number])
end

def test_costpercapita_r32
  r = spreadsheet.costpercapita_r32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(597.2000362077671,r[:number])
end

def test_costpercapita_s32
  r = spreadsheet.costpercapita_s32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(486.5854397634005,r[:number])
end

def test_costpercapita_t32
  r = spreadsheet.costpercapita_t32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(379.5703510649894,r[:number])
end

def test_costpercapita_u32
  r = spreadsheet.costpercapita_u32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(276.47769557479046,r[:number])
end

def test_costpercapita_v32
  r = spreadsheet.costpercapita_v32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.397340224721,r[:number])
end

def test_costpercapita_w32
  r = spreadsheet.costpercapita_w32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.25971018111616,r[:number])
end

def test_costpercapita_y32
  r = spreadsheet.costpercapita_y32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z32
  r = spreadsheet.costpercapita_z32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa32
  r = spreadsheet.costpercapita_aa32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab32
  r = spreadsheet.costpercapita_ab32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac32
  r = spreadsheet.costpercapita_ac32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad32
  r = spreadsheet.costpercapita_ad32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae32
  r = spreadsheet.costpercapita_ae32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af32
  r = spreadsheet.costpercapita_af32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag32
  r = spreadsheet.costpercapita_ag32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai32
  r = spreadsheet.costpercapita_ai32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1697.7780237135175,r[:number])
end

def test_costpercapita_aj32
  r = spreadsheet.costpercapita_aj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1518.3705518821885,r[:number])
end

def test_costpercapita_ak32
  r = spreadsheet.costpercapita_ak32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1463.2847984586158,r[:number])
end

def test_costpercapita_al32
  r = spreadsheet.costpercapita_al32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1290.160889207221,r[:number])
end

def test_costpercapita_am32
  r = spreadsheet.costpercapita_am32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1141.0137601614167,r[:number])
end

def test_costpercapita_an32
  r = spreadsheet.costpercapita_an32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(995.6040801706284,r[:number])
end

def test_costpercapita_ao32
  r = spreadsheet.costpercapita_ao32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.2932756560402,r[:number])
end

def test_costpercapita_ap32
  r = spreadsheet.costpercapita_ap32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(732.0158638990223,r[:number])
end

def test_costpercapita_aq32
  r = spreadsheet.costpercapita_aq32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.4952058038976,r[:number])
end

def test_costpercapita_as32
  r = spreadsheet.costpercapita_as32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1144.6684943280607,r[:number])
end

def test_costpercapita_at32
  r = spreadsheet.costpercapita_at32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25552.996815107334,r[:number])
end

def test_costpercapita_av32
  r = spreadsheet.costpercapita_av32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw32
  r = spreadsheet.costpercapita_aw32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay32
  r = spreadsheet.costpercapita_ay32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(474.69486819461207,r[:number])
end

def test_costpercapita_az32
  r = spreadsheet.costpercapita_az32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(723.3010077781341,r[:number])
end

def test_costpercapita_ba32
  r = spreadsheet.costpercapita_ba32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(754.6567055757428,r[:number])
end

def test_costpercapita_bb32
  r = spreadsheet.costpercapita_bb32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(692.9608529994541,r[:number])
end

def test_costpercapita_bc32
  r = spreadsheet.costpercapita_bc32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(654.4283203980164,r[:number])
end

def test_costpercapita_bd32
  r = spreadsheet.costpercapita_bd32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(616.033729105639,r[:number])
end

def test_costpercapita_be32
  r = spreadsheet.costpercapita_be32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572.8155800812498,r[:number])
end

def test_costpercapita_bf32
  r = spreadsheet.costpercapita_bf32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(549.6185236743013,r[:number])
end

def test_costpercapita_bg32
  r = spreadsheet.costpercapita_bg32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.2354956227815,r[:number])
end

def test_costpercapita_bi32
  r = spreadsheet.costpercapita_bi32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(474.69486819461207,r[:number])
end

def test_costpercapita_bj32
  r = spreadsheet.costpercapita_bj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(723.3010077781341,r[:number])
end

def test_costpercapita_bk32
  r = spreadsheet.costpercapita_bk32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(754.6567055757428,r[:number])
end

def test_costpercapita_bl32
  r = spreadsheet.costpercapita_bl32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(692.9608529994541,r[:number])
end

def test_costpercapita_bm32
  r = spreadsheet.costpercapita_bm32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(654.4283203980164,r[:number])
end

def test_costpercapita_bn32
  r = spreadsheet.costpercapita_bn32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(616.033729105639,r[:number])
end

def test_costpercapita_bo32
  r = spreadsheet.costpercapita_bo32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(572.8155800812498,r[:number])
end

def test_costpercapita_bp32
  r = spreadsheet.costpercapita_bp32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(549.6185236743013,r[:number])
end

def test_costpercapita_bq32
  r = spreadsheet.costpercapita_bq32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(520.2354956227815,r[:number])
end

def test_costpercapita_bs32
  r = spreadsheet.costpercapita_bs32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1381.3147782504427,r[:number])
end

def test_costpercapita_bt32
  r = spreadsheet.costpercapita_bt32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1518.3705518821885,r[:number])
end

def test_costpercapita_bu32
  r = spreadsheet.costpercapita_bu32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1463.2847984586158,r[:number])
end

def test_costpercapita_bv32
  r = spreadsheet.costpercapita_bv32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1290.160889207221,r[:number])
end

def test_costpercapita_bw32
  r = spreadsheet.costpercapita_bw32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1141.0137601614167,r[:number])
end

def test_costpercapita_bx32
  r = spreadsheet.costpercapita_bx32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(995.6040801706284,r[:number])
end

def test_costpercapita_by32
  r = spreadsheet.costpercapita_by32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(849.2932756560402,r[:number])
end

def test_costpercapita_bz32
  r = spreadsheet.costpercapita_bz32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(732.0158638990223,r[:number])
end

def test_costpercapita_ca32
  r = spreadsheet.costpercapita_ca32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.4952058038976,r[:number])
end

def test_costpercapita_cc32
  r = spreadsheet.costpercapita_cc32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1109.5059114988303,r[:number])
end

def test_costpercapita_cd32
  r = spreadsheet.costpercapita_cd32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25236.53356964426,r[:number])
end

def test_costpercapita_cf32
  r = spreadsheet.costpercapita_cf32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-316.4632454630746,r[:number])
end

def test_costpercapita_cg32
  r = spreadsheet.costpercapita_cg32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch32
  r = spreadsheet.costpercapita_ch32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci32
  r = spreadsheet.costpercapita_ci32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj32
  r = spreadsheet.costpercapita_cj32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck32
  r = spreadsheet.costpercapita_ck32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl32
  r = spreadsheet.costpercapita_cl32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm32
  r = spreadsheet.costpercapita_cm32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn32
  r = spreadsheet.costpercapita_cn32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp32
  r = spreadsheet.costpercapita_cp32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-35.16258282923051,r[:number])
end

def test_costpercapita_cq32
  r = spreadsheet.costpercapita_cq32
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-316.4632454630746,r[:number])
end

def test_costpercapita_cr32
  r = spreadsheet.costpercapita_cr32
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a33
  r = spreadsheet.costpercapita_a33
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.HEV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b33
  r = spreadsheet.costpercapita_b33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hybrid cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c33
  r = spreadsheet.costpercapita_c33
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e33
  r = spreadsheet.costpercapita_e33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.493996908618019,r[:number])
end

def test_costpercapita_f33
  r = spreadsheet.costpercapita_f33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.6546776733144,r[:number])
end

def test_costpercapita_g33
  r = spreadsheet.costpercapita_g33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.41308853666219,r[:number])
end

def test_costpercapita_h33
  r = spreadsheet.costpercapita_h33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.59635592654675,r[:number])
end

def test_costpercapita_i33
  r = spreadsheet.costpercapita_i33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.79113587041942,r[:number])
end

def test_costpercapita_j33
  r = spreadsheet.costpercapita_j33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.93237353039024,r[:number])
end

def test_costpercapita_k33
  r = spreadsheet.costpercapita_k33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.9617093826074,r[:number])
end

def test_costpercapita_l33
  r = spreadsheet.costpercapita_l33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.45623025702935,r[:number])
end

def test_costpercapita_m33
  r = spreadsheet.costpercapita_m33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.9445964005501,r[:number])
end

def test_costpercapita_o33
  r = spreadsheet.costpercapita_o33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4130168017123628,r[:number])
end

def test_costpercapita_p33
  r = spreadsheet.costpercapita_p33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.907359379065622,r[:number])
end

def test_costpercapita_q33
  r = spreadsheet.costpercapita_q33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.061206967480931,r[:number])
end

def test_costpercapita_r33
  r = spreadsheet.costpercapita_r33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.48941115284887,r[:number])
end

def test_costpercapita_s33
  r = spreadsheet.costpercapita_s33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.09666262538366,r[:number])
end

def test_costpercapita_t33
  r = spreadsheet.costpercapita_t33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.05335313215463,r[:number])
end

def test_costpercapita_u33
  r = spreadsheet.costpercapita_u33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.55793043029821,r[:number])
end

def test_costpercapita_v33
  r = spreadsheet.costpercapita_v33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.246130081547534,r[:number])
end

def test_costpercapita_w33
  r = spreadsheet.costpercapita_w33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.385479957419015,r[:number])
end

def test_costpercapita_y33
  r = spreadsheet.costpercapita_y33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z33
  r = spreadsheet.costpercapita_z33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa33
  r = spreadsheet.costpercapita_aa33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab33
  r = spreadsheet.costpercapita_ab33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac33
  r = spreadsheet.costpercapita_ac33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad33
  r = spreadsheet.costpercapita_ad33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae33
  r = spreadsheet.costpercapita_ae33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af33
  r = spreadsheet.costpercapita_af33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag33
  r = spreadsheet.costpercapita_ag33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai33
  r = spreadsheet.costpercapita_ai33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9070137103303817,r[:number])
end

def test_costpercapita_aj33
  r = spreadsheet.costpercapita_aj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.56203705238002,r[:number])
end

def test_costpercapita_ak33
  r = spreadsheet.costpercapita_ak33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.474295504143118,r[:number])
end

def test_costpercapita_al33
  r = spreadsheet.costpercapita_al33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.08576707939562,r[:number])
end

def test_costpercapita_am33
  r = spreadsheet.costpercapita_am33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88779849580308,r[:number])
end

def test_costpercapita_an33
  r = spreadsheet.costpercapita_an33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.98572666254483,r[:number])
end

def test_costpercapita_ao33
  r = spreadsheet.costpercapita_ao33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(241.5196398129056,r[:number])
end

def test_costpercapita_ap33
  r = spreadsheet.costpercapita_ap33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.70236033857688,r[:number])
end

def test_costpercapita_aq33
  r = spreadsheet.costpercapita_aq33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.33007635796912,r[:number])
end

def test_costpercapita_as33
  r = spreadsheet.costpercapita_as33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.05052389044985,r[:number])
end

def test_costpercapita_at33
  r = spreadsheet.costpercapita_at33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2570.168531585556,r[:number])
end

def test_costpercapita_av33
  r = spreadsheet.costpercapita_av33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw33
  r = spreadsheet.costpercapita_aw33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay33
  r = spreadsheet.costpercapita_ay33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8963981451708113,r[:number])
end

def test_costpercapita_az33
  r = spreadsheet.costpercapita_az33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.6546776733144,r[:number])
end

def test_costpercapita_ba33
  r = spreadsheet.costpercapita_ba33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.41308853666219,r[:number])
end

def test_costpercapita_bb33
  r = spreadsheet.costpercapita_bb33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.59635592654675,r[:number])
end

def test_costpercapita_bc33
  r = spreadsheet.costpercapita_bc33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.79113587041942,r[:number])
end

def test_costpercapita_bd33
  r = spreadsheet.costpercapita_bd33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.93237353039024,r[:number])
end

def test_costpercapita_be33
  r = spreadsheet.costpercapita_be33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.9617093826074,r[:number])
end

def test_costpercapita_bf33
  r = spreadsheet.costpercapita_bf33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.45623025702935,r[:number])
end

def test_costpercapita_bg33
  r = spreadsheet.costpercapita_bg33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.9445964005501,r[:number])
end

def test_costpercapita_bi33
  r = spreadsheet.costpercapita_bi33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8963981451708113,r[:number])
end

def test_costpercapita_bj33
  r = spreadsheet.costpercapita_bj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.6546776733144,r[:number])
end

def test_costpercapita_bk33
  r = spreadsheet.costpercapita_bk33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.41308853666219,r[:number])
end

def test_costpercapita_bl33
  r = spreadsheet.costpercapita_bl33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.59635592654675,r[:number])
end

def test_costpercapita_bm33
  r = spreadsheet.costpercapita_bm33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.79113587041942,r[:number])
end

def test_costpercapita_bn33
  r = spreadsheet.costpercapita_bn33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.93237353039024,r[:number])
end

def test_costpercapita_bo33
  r = spreadsheet.costpercapita_bo33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(164.9617093826074,r[:number])
end

def test_costpercapita_bp33
  r = spreadsheet.costpercapita_bp33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.45623025702935,r[:number])
end

def test_costpercapita_bq33
  r = spreadsheet.costpercapita_bq33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.9445964005501,r[:number])
end

def test_costpercapita_bs33
  r = spreadsheet.costpercapita_bs33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3094149468831742,r[:number])
end

def test_costpercapita_bt33
  r = spreadsheet.costpercapita_bt33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.56203705238002,r[:number])
end

def test_costpercapita_bu33
  r = spreadsheet.costpercapita_bu33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.474295504143118,r[:number])
end

def test_costpercapita_bv33
  r = spreadsheet.costpercapita_bv33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.08576707939562,r[:number])
end

def test_costpercapita_bw33
  r = spreadsheet.costpercapita_bw33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.88779849580308,r[:number])
end

def test_costpercapita_bx33
  r = spreadsheet.costpercapita_bx33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.98572666254483,r[:number])
end

def test_costpercapita_by33
  r = spreadsheet.costpercapita_by33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(241.5196398129056,r[:number])
end

def test_costpercapita_bz33
  r = spreadsheet.costpercapita_bz33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.70236033857688,r[:number])
end

def test_costpercapita_ca33
  r = spreadsheet.costpercapita_ca33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(211.33007635796912,r[:number])
end

def test_costpercapita_cc33
  r = spreadsheet.costpercapita_cc33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.9841240278446,r[:number])
end

def test_costpercapita_cd33
  r = spreadsheet.costpercapita_cd33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2569.5709328221087,r[:number])
end

def test_costpercapita_cf33
  r = spreadsheet.costpercapita_cf33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.5975987634472075,r[:number])
end

def test_costpercapita_cg33
  r = spreadsheet.costpercapita_cg33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch33
  r = spreadsheet.costpercapita_ch33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci33
  r = spreadsheet.costpercapita_ci33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj33
  r = spreadsheet.costpercapita_cj33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck33
  r = spreadsheet.costpercapita_ck33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl33
  r = spreadsheet.costpercapita_cl33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm33
  r = spreadsheet.costpercapita_cm33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn33
  r = spreadsheet.costpercapita_cn33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp33
  r = spreadsheet.costpercapita_cp33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06639986260524527,r[:number])
end

def test_costpercapita_cq33
  r = spreadsheet.costpercapita_cq33
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.5975987634472075,r[:number])
end

def test_costpercapita_cr33
  r = spreadsheet.costpercapita_cr33
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a34
  r = spreadsheet.costpercapita_a34
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.EV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b34
  r = spreadsheet.costpercapita_b34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electric cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c34
  r = spreadsheet.costpercapita_c34
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e34
  r = spreadsheet.costpercapita_e34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f34
  r = spreadsheet.costpercapita_f34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7615290358970346,r[:number])
end

def test_costpercapita_g34
  r = spreadsheet.costpercapita_g34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4163368918109516,r[:number])
end

def test_costpercapita_h34
  r = spreadsheet.costpercapita_h34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.557895759182223,r[:number])
end

def test_costpercapita_i34
  r = spreadsheet.costpercapita_i34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.577764829262936,r[:number])
end

def test_costpercapita_j34
  r = spreadsheet.costpercapita_j34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.974836812212967,r[:number])
end

def test_costpercapita_k34
  r = spreadsheet.costpercapita_k34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.474011707827053,r[:number])
end

def test_costpercapita_l34
  r = spreadsheet.costpercapita_l34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.372349751880815,r[:number])
end

def test_costpercapita_m34
  r = spreadsheet.costpercapita_m34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.80819232469555,r[:number])
end

def test_costpercapita_o34
  r = spreadsheet.costpercapita_o34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p34
  r = spreadsheet.costpercapita_p34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6316846770455633,r[:number])
end

def test_costpercapita_q34
  r = spreadsheet.costpercapita_q34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.161205749248365,r[:number])
end

def test_costpercapita_r34
  r = spreadsheet.costpercapita_r34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.64331799993319,r[:number])
end

def test_costpercapita_s34
  r = spreadsheet.costpercapita_s34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.95179161715909,r[:number])
end

def test_costpercapita_t34
  r = spreadsheet.costpercapita_t34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.32913004886365,r[:number])
end

def test_costpercapita_u34
  r = spreadsheet.costpercapita_u34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.269370997620452,r[:number])
end

def test_costpercapita_v34
  r = spreadsheet.costpercapita_v34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.148128655053297,r[:number])
end

def test_costpercapita_w34
  r = spreadsheet.costpercapita_w34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.295095462744201,r[:number])
end

def test_costpercapita_y34
  r = spreadsheet.costpercapita_y34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z34
  r = spreadsheet.costpercapita_z34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa34
  r = spreadsheet.costpercapita_aa34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab34
  r = spreadsheet.costpercapita_ab34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac34
  r = spreadsheet.costpercapita_ac34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad34
  r = spreadsheet.costpercapita_ad34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae34
  r = spreadsheet.costpercapita_ae34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af34
  r = spreadsheet.costpercapita_af34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag34
  r = spreadsheet.costpercapita_ag34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai34
  r = spreadsheet.costpercapita_ai34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj34
  r = spreadsheet.costpercapita_aj34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.393213712942598,r[:number])
end

def test_costpercapita_ak34
  r = spreadsheet.costpercapita_ak34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5775426410593165,r[:number])
end

def test_costpercapita_al34
  r = spreadsheet.costpercapita_al34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.201213759115415,r[:number])
end

def test_costpercapita_am34
  r = spreadsheet.costpercapita_am34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.529556446422024,r[:number])
end

def test_costpercapita_an34
  r = spreadsheet.costpercapita_an34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.303966861076617,r[:number])
end

def test_costpercapita_ao34
  r = spreadsheet.costpercapita_ao34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.74338270544751,r[:number])
end

def test_costpercapita_ap34
  r = spreadsheet.costpercapita_ap34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.520478406934114,r[:number])
end

def test_costpercapita_aq34
  r = spreadsheet.costpercapita_aq34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.10328778743975,r[:number])
end

def test_costpercapita_as34
  r = spreadsheet.costpercapita_as34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.152515813381925,r[:number])
end

def test_costpercapita_at34
  r = spreadsheet.costpercapita_at34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.3979203285349,r[:number])
end

def test_costpercapita_av34
  r = spreadsheet.costpercapita_av34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw34
  r = spreadsheet.costpercapita_aw34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay34
  r = spreadsheet.costpercapita_ay34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az34
  r = spreadsheet.costpercapita_az34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7615290358970346,r[:number])
end

def test_costpercapita_ba34
  r = spreadsheet.costpercapita_ba34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4163368918109516,r[:number])
end

def test_costpercapita_bb34
  r = spreadsheet.costpercapita_bb34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.557895759182223,r[:number])
end

def test_costpercapita_bc34
  r = spreadsheet.costpercapita_bc34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.577764829262936,r[:number])
end

def test_costpercapita_bd34
  r = spreadsheet.costpercapita_bd34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.974836812212967,r[:number])
end

def test_costpercapita_be34
  r = spreadsheet.costpercapita_be34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.474011707827053,r[:number])
end

def test_costpercapita_bf34
  r = spreadsheet.costpercapita_bf34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.372349751880815,r[:number])
end

def test_costpercapita_bg34
  r = spreadsheet.costpercapita_bg34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.80819232469555,r[:number])
end

def test_costpercapita_bi34
  r = spreadsheet.costpercapita_bi34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj34
  r = spreadsheet.costpercapita_bj34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7615290358970346,r[:number])
end

def test_costpercapita_bk34
  r = spreadsheet.costpercapita_bk34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4163368918109516,r[:number])
end

def test_costpercapita_bl34
  r = spreadsheet.costpercapita_bl34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.557895759182223,r[:number])
end

def test_costpercapita_bm34
  r = spreadsheet.costpercapita_bm34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.577764829262936,r[:number])
end

def test_costpercapita_bn34
  r = spreadsheet.costpercapita_bn34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.974836812212967,r[:number])
end

def test_costpercapita_bo34
  r = spreadsheet.costpercapita_bo34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.474011707827053,r[:number])
end

def test_costpercapita_bp34
  r = spreadsheet.costpercapita_bp34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.372349751880815,r[:number])
end

def test_costpercapita_bq34
  r = spreadsheet.costpercapita_bq34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.80819232469555,r[:number])
end

def test_costpercapita_bs34
  r = spreadsheet.costpercapita_bs34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt34
  r = spreadsheet.costpercapita_bt34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.393213712942598,r[:number])
end

def test_costpercapita_bu34
  r = spreadsheet.costpercapita_bu34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5775426410593165,r[:number])
end

def test_costpercapita_bv34
  r = spreadsheet.costpercapita_bv34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.201213759115415,r[:number])
end

def test_costpercapita_bw34
  r = spreadsheet.costpercapita_bw34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.529556446422024,r[:number])
end

def test_costpercapita_bx34
  r = spreadsheet.costpercapita_bx34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.303966861076617,r[:number])
end

def test_costpercapita_by34
  r = spreadsheet.costpercapita_by34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.74338270544751,r[:number])
end

def test_costpercapita_bz34
  r = spreadsheet.costpercapita_bz34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.520478406934114,r[:number])
end

def test_costpercapita_ca34
  r = spreadsheet.costpercapita_ca34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.10328778743975,r[:number])
end

def test_costpercapita_cc34
  r = spreadsheet.costpercapita_cc34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.152515813381925,r[:number])
end

def test_costpercapita_cd34
  r = spreadsheet.costpercapita_cd34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.3979203285349,r[:number])
end

def test_costpercapita_cf34
  r = spreadsheet.costpercapita_cf34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg34
  r = spreadsheet.costpercapita_cg34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch34
  r = spreadsheet.costpercapita_ch34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci34
  r = spreadsheet.costpercapita_ci34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj34
  r = spreadsheet.costpercapita_cj34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck34
  r = spreadsheet.costpercapita_ck34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl34
  r = spreadsheet.costpercapita_cl34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm34
  r = spreadsheet.costpercapita_cm34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn34
  r = spreadsheet.costpercapita_cn34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp34
  r = spreadsheet.costpercapita_cp34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq34
  r = spreadsheet.costpercapita_cq34
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr34
  r = spreadsheet.costpercapita_cr34
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a35
  r = spreadsheet.costpercapita_a35
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.FCV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b35
  r = spreadsheet.costpercapita_b35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel cell cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c35
  r = spreadsheet.costpercapita_c35
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e35
  r = spreadsheet.costpercapita_e35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f35
  r = spreadsheet.costpercapita_f35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g35
  r = spreadsheet.costpercapita_g35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h35
  r = spreadsheet.costpercapita_h35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i35
  r = spreadsheet.costpercapita_i35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j35
  r = spreadsheet.costpercapita_j35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k35
  r = spreadsheet.costpercapita_k35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l35
  r = spreadsheet.costpercapita_l35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m35
  r = spreadsheet.costpercapita_m35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o35
  r = spreadsheet.costpercapita_o35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p35
  r = spreadsheet.costpercapita_p35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q35
  r = spreadsheet.costpercapita_q35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r35
  r = spreadsheet.costpercapita_r35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s35
  r = spreadsheet.costpercapita_s35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t35
  r = spreadsheet.costpercapita_t35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u35
  r = spreadsheet.costpercapita_u35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v35
  r = spreadsheet.costpercapita_v35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w35
  r = spreadsheet.costpercapita_w35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y35
  r = spreadsheet.costpercapita_y35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z35
  r = spreadsheet.costpercapita_z35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa35
  r = spreadsheet.costpercapita_aa35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab35
  r = spreadsheet.costpercapita_ab35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac35
  r = spreadsheet.costpercapita_ac35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad35
  r = spreadsheet.costpercapita_ad35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae35
  r = spreadsheet.costpercapita_ae35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af35
  r = spreadsheet.costpercapita_af35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag35
  r = spreadsheet.costpercapita_ag35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai35
  r = spreadsheet.costpercapita_ai35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj35
  r = spreadsheet.costpercapita_aj35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak35
  r = spreadsheet.costpercapita_ak35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al35
  r = spreadsheet.costpercapita_al35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am35
  r = spreadsheet.costpercapita_am35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an35
  r = spreadsheet.costpercapita_an35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao35
  r = spreadsheet.costpercapita_ao35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap35
  r = spreadsheet.costpercapita_ap35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq35
  r = spreadsheet.costpercapita_aq35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as35
  r = spreadsheet.costpercapita_as35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at35
  r = spreadsheet.costpercapita_at35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av35
  r = spreadsheet.costpercapita_av35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw35
  r = spreadsheet.costpercapita_aw35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay35
  r = spreadsheet.costpercapita_ay35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az35
  r = spreadsheet.costpercapita_az35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba35
  r = spreadsheet.costpercapita_ba35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb35
  r = spreadsheet.costpercapita_bb35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc35
  r = spreadsheet.costpercapita_bc35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd35
  r = spreadsheet.costpercapita_bd35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be35
  r = spreadsheet.costpercapita_be35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf35
  r = spreadsheet.costpercapita_bf35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg35
  r = spreadsheet.costpercapita_bg35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi35
  r = spreadsheet.costpercapita_bi35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj35
  r = spreadsheet.costpercapita_bj35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk35
  r = spreadsheet.costpercapita_bk35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl35
  r = spreadsheet.costpercapita_bl35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm35
  r = spreadsheet.costpercapita_bm35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn35
  r = spreadsheet.costpercapita_bn35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo35
  r = spreadsheet.costpercapita_bo35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp35
  r = spreadsheet.costpercapita_bp35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq35
  r = spreadsheet.costpercapita_bq35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs35
  r = spreadsheet.costpercapita_bs35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt35
  r = spreadsheet.costpercapita_bt35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu35
  r = spreadsheet.costpercapita_bu35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv35
  r = spreadsheet.costpercapita_bv35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw35
  r = spreadsheet.costpercapita_bw35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx35
  r = spreadsheet.costpercapita_bx35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by35
  r = spreadsheet.costpercapita_by35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz35
  r = spreadsheet.costpercapita_bz35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca35
  r = spreadsheet.costpercapita_ca35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc35
  r = spreadsheet.costpercapita_cc35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd35
  r = spreadsheet.costpercapita_cd35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf35
  r = spreadsheet.costpercapita_cf35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg35
  r = spreadsheet.costpercapita_cg35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch35
  r = spreadsheet.costpercapita_ch35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci35
  r = spreadsheet.costpercapita_ci35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj35
  r = spreadsheet.costpercapita_cj35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck35
  r = spreadsheet.costpercapita_ck35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl35
  r = spreadsheet.costpercapita_cl35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm35
  r = spreadsheet.costpercapita_cm35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn35
  r = spreadsheet.costpercapita_cn35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp35
  r = spreadsheet.costpercapita_cp35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq35
  r = spreadsheet.costpercapita_cq35
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr35
  r = spreadsheet.costpercapita_cr35
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a36
  r = spreadsheet.costpercapita_a36
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Bike",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b36
  r = spreadsheet.costpercapita_b36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bikes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c36
  r = spreadsheet.costpercapita_c36
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e36
  r = spreadsheet.costpercapita_e36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.20482346514259,r[:number])
end

def test_costpercapita_f36
  r = spreadsheet.costpercapita_f36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.71019192095353,r[:number])
end

def test_costpercapita_g36
  r = spreadsheet.costpercapita_g36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.91647707232122,r[:number])
end

def test_costpercapita_h36
  r = spreadsheet.costpercapita_h36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.19719773859914,r[:number])
end

def test_costpercapita_i36
  r = spreadsheet.costpercapita_i36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.405771179450916,r[:number])
end

def test_costpercapita_j36
  r = spreadsheet.costpercapita_j36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.706235199126546,r[:number])
end

def test_costpercapita_k36
  r = spreadsheet.costpercapita_k36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.66806458733186,r[:number])
end

def test_costpercapita_l36
  r = spreadsheet.costpercapita_l36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.419029798891355,r[:number])
end

def test_costpercapita_m36
  r = spreadsheet.costpercapita_m36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.745915732453245,r[:number])
end

def test_costpercapita_o36
  r = spreadsheet.costpercapita_o36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.33060278324329,r[:number])
end

def test_costpercapita_p36
  r = spreadsheet.costpercapita_p36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.061217733863067,r[:number])
end

def test_costpercapita_q36
  r = spreadsheet.costpercapita_q36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.947798170200763,r[:number])
end

def test_costpercapita_r36
  r = spreadsheet.costpercapita_r36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.99799838471367,r[:number])
end

def test_costpercapita_s36
  r = spreadsheet.costpercapita_s36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.171475982875755,r[:number])
end

def test_costpercapita_t36
  r = spreadsheet.costpercapita_t36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.70623519912653,r[:number])
end

def test_costpercapita_u36
  r = spreadsheet.costpercapita_u36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.33508073416481,r[:number])
end

def test_costpercapita_v36
  r = spreadsheet.costpercapita_v36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.36504966481889,r[:number])
end

def test_costpercapita_w36
  r = spreadsheet.costpercapita_w36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.86478933113311,r[:number])
end

def test_costpercapita_y36
  r = spreadsheet.costpercapita_y36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z36
  r = spreadsheet.costpercapita_z36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa36
  r = spreadsheet.costpercapita_aa36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab36
  r = spreadsheet.costpercapita_ab36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac36
  r = spreadsheet.costpercapita_ac36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad36
  r = spreadsheet.costpercapita_ad36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae36
  r = spreadsheet.costpercapita_ae36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af36
  r = spreadsheet.costpercapita_af36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag36
  r = spreadsheet.costpercapita_ag36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai36
  r = spreadsheet.costpercapita_ai36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.53542624838589,r[:number])
end

def test_costpercapita_aj36
  r = spreadsheet.costpercapita_aj36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.77140965481658,r[:number])
end

def test_costpercapita_ak36
  r = spreadsheet.costpercapita_ak36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.86427524252198,r[:number])
end

def test_costpercapita_al36
  r = spreadsheet.costpercapita_al36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.1951961233128,r[:number])
end

def test_costpercapita_am36
  r = spreadsheet.costpercapita_am36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.57724716232667,r[:number])
end

def test_costpercapita_an36
  r = spreadsheet.costpercapita_an36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.41247039825308,r[:number])
end

def test_costpercapita_ao36
  r = spreadsheet.costpercapita_ao36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.00314532149666,r[:number])
end

def test_costpercapita_ap36
  r = spreadsheet.costpercapita_ap36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.78407946371024,r[:number])
end

def test_costpercapita_aq36
  r = spreadsheet.costpercapita_aq36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.61070506358637,r[:number])
end

def test_costpercapita_as36
  r = spreadsheet.costpercapita_as36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.41710607537891,r[:number])
end

def test_costpercapita_at36
  r = spreadsheet.costpercapita_at36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1629.5088036515695,r[:number])
end

def test_costpercapita_av36
  r = spreadsheet.costpercapita_av36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw36
  r = spreadsheet.costpercapita_aw36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay36
  r = spreadsheet.costpercapita_ay36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.922894079085555,r[:number])
end

def test_costpercapita_az36
  r = spreadsheet.costpercapita_az36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.71019192095353,r[:number])
end

def test_costpercapita_ba36
  r = spreadsheet.costpercapita_ba36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.91647707232122,r[:number])
end

def test_costpercapita_bb36
  r = spreadsheet.costpercapita_bb36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.19719773859914,r[:number])
end

def test_costpercapita_bc36
  r = spreadsheet.costpercapita_bc36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.405771179450916,r[:number])
end

def test_costpercapita_bd36
  r = spreadsheet.costpercapita_bd36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.706235199126546,r[:number])
end

def test_costpercapita_be36
  r = spreadsheet.costpercapita_be36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.66806458733186,r[:number])
end

def test_costpercapita_bf36
  r = spreadsheet.costpercapita_bf36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.419029798891355,r[:number])
end

def test_costpercapita_bg36
  r = spreadsheet.costpercapita_bg36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.745915732453245,r[:number])
end

def test_costpercapita_bi36
  r = spreadsheet.costpercapita_bi36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.922894079085555,r[:number])
end

def test_costpercapita_bj36
  r = spreadsheet.costpercapita_bj36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.71019192095353,r[:number])
end

def test_costpercapita_bk36
  r = spreadsheet.costpercapita_bk36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.91647707232122,r[:number])
end

def test_costpercapita_bl36
  r = spreadsheet.costpercapita_bl36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.19719773859914,r[:number])
end

def test_costpercapita_bm36
  r = spreadsheet.costpercapita_bm36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.405771179450916,r[:number])
end

def test_costpercapita_bn36
  r = spreadsheet.costpercapita_bn36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.706235199126546,r[:number])
end

def test_costpercapita_bo36
  r = spreadsheet.costpercapita_bo36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.66806458733186,r[:number])
end

def test_costpercapita_bp36
  r = spreadsheet.costpercapita_bp36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.419029798891355,r[:number])
end

def test_costpercapita_bq36
  r = spreadsheet.costpercapita_bq36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.745915732453245,r[:number])
end

def test_costpercapita_bs36
  r = spreadsheet.costpercapita_bs36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.253496862328845,r[:number])
end

def test_costpercapita_bt36
  r = spreadsheet.costpercapita_bt36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.77140965481658,r[:number])
end

def test_costpercapita_bu36
  r = spreadsheet.costpercapita_bu36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.86427524252198,r[:number])
end

def test_costpercapita_bv36
  r = spreadsheet.costpercapita_bv36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.1951961233128,r[:number])
end

def test_costpercapita_bw36
  r = spreadsheet.costpercapita_bw36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.57724716232667,r[:number])
end

def test_costpercapita_bx36
  r = spreadsheet.costpercapita_bx36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.41247039825308,r[:number])
end

def test_costpercapita_by36
  r = spreadsheet.costpercapita_by36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.00314532149666,r[:number])
end

def test_costpercapita_bz36
  r = spreadsheet.costpercapita_bz36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.78407946371024,r[:number])
end

def test_costpercapita_ca36
  r = spreadsheet.costpercapita_ca36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.61070506358637,r[:number])
end

def test_costpercapita_cc36
  r = spreadsheet.costpercapita_cc36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.0524472547059,r[:number])
end

def test_costpercapita_cd36
  r = spreadsheet.costpercapita_cd36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1608.2268742655124,r[:number])
end

def test_costpercapita_cf36
  r = spreadsheet.costpercapita_cf36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-21.281929386057033,r[:number])
end

def test_costpercapita_cg36
  r = spreadsheet.costpercapita_cg36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch36
  r = spreadsheet.costpercapita_ch36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci36
  r = spreadsheet.costpercapita_ci36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj36
  r = spreadsheet.costpercapita_cj36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck36
  r = spreadsheet.costpercapita_ck36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl36
  r = spreadsheet.costpercapita_cl36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm36
  r = spreadsheet.costpercapita_cm36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn36
  r = spreadsheet.costpercapita_cn36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp36
  r = spreadsheet.costpercapita_cp36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.3646588206730037,r[:number])
end

def test_costpercapita_cq36
  r = spreadsheet.costpercapita_cq36
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-21.281929386057033,r[:number])
end

def test_costpercapita_cr36
  r = spreadsheet.costpercapita_cr36
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a37
  r = spreadsheet.costpercapita_a37
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b37
  r = spreadsheet.costpercapita_b37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c37
  r = spreadsheet.costpercapita_c37
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e37
  r = spreadsheet.costpercapita_e37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.241582045011786,r[:number])
end

def test_costpercapita_f37
  r = spreadsheet.costpercapita_f37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.06016687400555,r[:number])
end

def test_costpercapita_g37
  r = spreadsheet.costpercapita_g37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2043154576026291,r[:number])
end

def test_costpercapita_h37
  r = spreadsheet.costpercapita_h37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.072946433337215,r[:number])
end

def test_costpercapita_i37
  r = spreadsheet.costpercapita_i37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9259176250325403,r[:number])
end

def test_costpercapita_j37
  r = spreadsheet.costpercapita_j37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8246749390492312,r[:number])
end

def test_costpercapita_k37
  r = spreadsheet.costpercapita_k37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6949089641115102,r[:number])
end

def test_costpercapita_l37
  r = spreadsheet.costpercapita_l37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6123614593407295,r[:number])
end

def test_costpercapita_m37
  r = spreadsheet.costpercapita_m37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5349416675056703,r[:number])
end

def test_costpercapita_o37
  r = spreadsheet.costpercapita_o37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.70395383068492,r[:number])
end

def test_costpercapita_p37
  r = spreadsheet.costpercapita_p37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.81817064547731,r[:number])
end

def test_costpercapita_q37
  r = spreadsheet.costpercapita_q37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.05108035790569,r[:number])
end

def test_costpercapita_r37
  r = spreadsheet.costpercapita_r37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.80567231108412,r[:number])
end

def test_costpercapita_s37
  r = spreadsheet.costpercapita_s37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.10012153286213,r[:number])
end

def test_costpercapita_t37
  r = spreadsheet.costpercapita_t37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.64587452758086,r[:number])
end

def test_costpercapita_u37
  r = spreadsheet.costpercapita_u37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.83411398716596,r[:number])
end

def test_costpercapita_v37
  r = spreadsheet.costpercapita_v37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.34091018853465,r[:number])
end

def test_costpercapita_w37
  r = spreadsheet.costpercapita_w37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.16793277069767,r[:number])
end

def test_costpercapita_y37
  r = spreadsheet.costpercapita_y37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z37
  r = spreadsheet.costpercapita_z37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa37
  r = spreadsheet.costpercapita_aa37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab37
  r = spreadsheet.costpercapita_ab37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac37
  r = spreadsheet.costpercapita_ac37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad37
  r = spreadsheet.costpercapita_ad37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae37
  r = spreadsheet.costpercapita_ae37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af37
  r = spreadsheet.costpercapita_af37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag37
  r = spreadsheet.costpercapita_ag37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai37
  r = spreadsheet.costpercapita_ai37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.94553587569672,r[:number])
end

def test_costpercapita_aj37
  r = spreadsheet.costpercapita_aj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.87833751948287,r[:number])
end

def test_costpercapita_ak37
  r = spreadsheet.costpercapita_ak37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.25539581550832,r[:number])
end

def test_costpercapita_al37
  r = spreadsheet.costpercapita_al37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.87861874442133,r[:number])
end

def test_costpercapita_am37
  r = spreadsheet.costpercapita_am37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.02603915789469,r[:number])
end

def test_costpercapita_an37
  r = spreadsheet.costpercapita_an37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.4705494666301,r[:number])
end

def test_costpercapita_ao37
  r = spreadsheet.costpercapita_ao37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.52902295127748,r[:number])
end

def test_costpercapita_ap37
  r = spreadsheet.costpercapita_ap37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.95327164787538,r[:number])
end

def test_costpercapita_aq37
  r = spreadsheet.costpercapita_aq37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.702874438203345,r[:number])
end

def test_costpercapita_as37
  r = spreadsheet.costpercapita_as37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.18218284633225,r[:number])
end

def test_costpercapita_at37
  r = spreadsheet.costpercapita_at37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2153.8333312075147,r[:number])
end

def test_costpercapita_av37
  r = spreadsheet.costpercapita_av37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw37
  r = spreadsheet.costpercapita_aw37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay37
  r = spreadsheet.costpercapita_ay37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7449492270070717,r[:number])
end

def test_costpercapita_az37
  r = spreadsheet.costpercapita_az37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.06016687400555,r[:number])
end

def test_costpercapita_ba37
  r = spreadsheet.costpercapita_ba37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2043154576026291,r[:number])
end

def test_costpercapita_bb37
  r = spreadsheet.costpercapita_bb37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.072946433337215,r[:number])
end

def test_costpercapita_bc37
  r = spreadsheet.costpercapita_bc37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9259176250325403,r[:number])
end

def test_costpercapita_bd37
  r = spreadsheet.costpercapita_bd37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8246749390492312,r[:number])
end

def test_costpercapita_be37
  r = spreadsheet.costpercapita_be37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6949089641115102,r[:number])
end

def test_costpercapita_bf37
  r = spreadsheet.costpercapita_bf37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6123614593407295,r[:number])
end

def test_costpercapita_bg37
  r = spreadsheet.costpercapita_bg37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5349416675056703,r[:number])
end

def test_costpercapita_bi37
  r = spreadsheet.costpercapita_bi37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7449492270070717,r[:number])
end

def test_costpercapita_bj37
  r = spreadsheet.costpercapita_bj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.06016687400555,r[:number])
end

def test_costpercapita_bk37
  r = spreadsheet.costpercapita_bk37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2043154576026291,r[:number])
end

def test_costpercapita_bl37
  r = spreadsheet.costpercapita_bl37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.072946433337215,r[:number])
end

def test_costpercapita_bm37
  r = spreadsheet.costpercapita_bm37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9259176250325403,r[:number])
end

def test_costpercapita_bn37
  r = spreadsheet.costpercapita_bn37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8246749390492312,r[:number])
end

def test_costpercapita_bo37
  r = spreadsheet.costpercapita_bo37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6949089641115102,r[:number])
end

def test_costpercapita_bp37
  r = spreadsheet.costpercapita_bp37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6123614593407295,r[:number])
end

def test_costpercapita_bq37
  r = spreadsheet.costpercapita_bq37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5349416675056703,r[:number])
end

def test_costpercapita_bs37
  r = spreadsheet.costpercapita_bs37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.44890305769198,r[:number])
end

def test_costpercapita_bt37
  r = spreadsheet.costpercapita_bt37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.87833751948287,r[:number])
end

def test_costpercapita_bu37
  r = spreadsheet.costpercapita_bu37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.25539581550832,r[:number])
end

def test_costpercapita_bv37
  r = spreadsheet.costpercapita_bv37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.87861874442133,r[:number])
end

def test_costpercapita_bw37
  r = spreadsheet.costpercapita_bw37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.02603915789469,r[:number])
end

def test_costpercapita_bx37
  r = spreadsheet.costpercapita_bx37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.4705494666301,r[:number])
end

def test_costpercapita_by37
  r = spreadsheet.costpercapita_by37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.52902295127748,r[:number])
end

def test_costpercapita_bz37
  r = spreadsheet.costpercapita_bz37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.95327164787538,r[:number])
end

def test_costpercapita_ca37
  r = spreadsheet.costpercapita_ca37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.702874438203345,r[:number])
end

def test_costpercapita_cc37
  r = spreadsheet.costpercapita_cc37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.1270014221095,r[:number])
end

def test_costpercapita_cd37
  r = spreadsheet.costpercapita_cd37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2153.33669838951,r[:number])
end

def test_costpercapita_cf37
  r = spreadsheet.costpercapita_cf37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4966328180047143,r[:number])
end

def test_costpercapita_cg37
  r = spreadsheet.costpercapita_cg37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch37
  r = spreadsheet.costpercapita_ch37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci37
  r = spreadsheet.costpercapita_ci37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj37
  r = spreadsheet.costpercapita_cj37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck37
  r = spreadsheet.costpercapita_ck37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl37
  r = spreadsheet.costpercapita_cl37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm37
  r = spreadsheet.costpercapita_cm37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn37
  r = spreadsheet.costpercapita_cn37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp37
  r = spreadsheet.costpercapita_cp37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.05518142422274604,r[:number])
end

def test_costpercapita_cq37
  r = spreadsheet.costpercapita_cq37
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4966328180047143,r[:number])
end

def test_costpercapita_cr37
  r = spreadsheet.costpercapita_cr37
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a38
  r = spreadsheet.costpercapita_a38
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Air",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b38
  r = spreadsheet.costpercapita_b38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c38
  r = spreadsheet.costpercapita_c38
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e38
  r = spreadsheet.costpercapita_e38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.896398734813296,r[:number])
end

def test_costpercapita_f38
  r = spreadsheet.costpercapita_f38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.8032685895966845,r[:number])
end

def test_costpercapita_g38
  r = spreadsheet.costpercapita_g38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.530394651621563,r[:number])
end

def test_costpercapita_h38
  r = spreadsheet.costpercapita_h38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.284822778622354,r[:number])
end

def test_costpercapita_i38
  r = spreadsheet.costpercapita_i38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.83114804601581,r[:number])
end

def test_costpercapita_j38
  r = spreadsheet.costpercapita_j38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.437503926271562,r[:number])
end

def test_costpercapita_k38
  r = spreadsheet.costpercapita_k38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.779439968327338,r[:number])
end

def test_costpercapita_l38
  r = spreadsheet.costpercapita_l38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.215576948426715,r[:number])
end

def test_costpercapita_m38
  r = spreadsheet.costpercapita_m38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.570002457215742,r[:number])
end

def test_costpercapita_o38
  r = spreadsheet.costpercapita_o38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.996006703994697,r[:number])
end

def test_costpercapita_p38
  r = spreadsheet.costpercapita_p38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.324014827298457,r[:number])
end

def test_costpercapita_q38
  r = spreadsheet.costpercapita_q38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793946375544617,r[:number])
end

def test_costpercapita_r38
  r = spreadsheet.costpercapita_r38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.259370767991622,r[:number])
end

def test_costpercapita_s38
  r = spreadsheet.costpercapita_s38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.708482707833969,r[:number])
end

def test_costpercapita_t38
  r = spreadsheet.costpercapita_t38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.173018575666719,r[:number])
end

def test_costpercapita_u38
  r = spreadsheet.costpercapita_u38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.604886414724205,r[:number])
end

def test_costpercapita_v38
  r = spreadsheet.costpercapita_v38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.044498828535568,r[:number])
end

def test_costpercapita_w38
  r = spreadsheet.costpercapita_w38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.492809818930669,r[:number])
end

def test_costpercapita_y38
  r = spreadsheet.costpercapita_y38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z38
  r = spreadsheet.costpercapita_z38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa38
  r = spreadsheet.costpercapita_aa38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab38
  r = spreadsheet.costpercapita_ab38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac38
  r = spreadsheet.costpercapita_ac38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad38
  r = spreadsheet.costpercapita_ad38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae38
  r = spreadsheet.costpercapita_ae38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af38
  r = spreadsheet.costpercapita_af38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag38
  r = spreadsheet.costpercapita_ag38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai38
  r = spreadsheet.costpercapita_ai38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.892405438807991,r[:number])
end

def test_costpercapita_aj38
  r = spreadsheet.costpercapita_aj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.127283416895143,r[:number])
end

def test_costpercapita_ak38
  r = spreadsheet.costpercapita_ak38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.32434102716618,r[:number])
end

def test_costpercapita_al38
  r = spreadsheet.costpercapita_al38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.544193546613977,r[:number])
end

def test_costpercapita_am38
  r = spreadsheet.costpercapita_am38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.53963075384978,r[:number])
end

def test_costpercapita_an38
  r = spreadsheet.costpercapita_an38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.61052250193828,r[:number])
end

def test_costpercapita_ao38
  r = spreadsheet.costpercapita_ao38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.384326383051544,r[:number])
end

def test_costpercapita_ap38
  r = spreadsheet.costpercapita_ap38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.260075776962283,r[:number])
end

def test_costpercapita_aq38
  r = spreadsheet.costpercapita_aq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.062812276146412,r[:number])
end

def test_costpercapita_as38
  r = spreadsheet.costpercapita_as38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.193954569047953,r[:number])
end

def test_costpercapita_at38
  r = spreadsheet.costpercapita_at38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275.9508848986674,r[:number])
end

def test_costpercapita_av38
  r = spreadsheet.costpercapita_av38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw38
  r = spreadsheet.costpercapita_aw38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay38
  r = spreadsheet.costpercapita_ay38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.337839240887977,r[:number])
end

def test_costpercapita_az38
  r = spreadsheet.costpercapita_az38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.803268589596684,r[:number])
end

def test_costpercapita_ba38
  r = spreadsheet.costpercapita_ba38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.530394651621563,r[:number])
end

def test_costpercapita_bb38
  r = spreadsheet.costpercapita_bb38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.284822778622354,r[:number])
end

def test_costpercapita_bc38
  r = spreadsheet.costpercapita_bc38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.83114804601581,r[:number])
end

def test_costpercapita_bd38
  r = spreadsheet.costpercapita_bd38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.437503926271562,r[:number])
end

def test_costpercapita_be38
  r = spreadsheet.costpercapita_be38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.779439968327339,r[:number])
end

def test_costpercapita_bf38
  r = spreadsheet.costpercapita_bf38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.215576948426715,r[:number])
end

def test_costpercapita_bg38
  r = spreadsheet.costpercapita_bg38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.570002457215743,r[:number])
end

def test_costpercapita_bi38
  r = spreadsheet.costpercapita_bi38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.337839240887977,r[:number])
end

def test_costpercapita_bj38
  r = spreadsheet.costpercapita_bj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.803268589596684,r[:number])
end

def test_costpercapita_bk38
  r = spreadsheet.costpercapita_bk38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.530394651621563,r[:number])
end

def test_costpercapita_bl38
  r = spreadsheet.costpercapita_bl38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.284822778622354,r[:number])
end

def test_costpercapita_bm38
  r = spreadsheet.costpercapita_bm38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.83114804601581,r[:number])
end

def test_costpercapita_bn38
  r = spreadsheet.costpercapita_bn38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.437503926271562,r[:number])
end

def test_costpercapita_bo38
  r = spreadsheet.costpercapita_bo38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.779439968327339,r[:number])
end

def test_costpercapita_bp38
  r = spreadsheet.costpercapita_bp38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.215576948426715,r[:number])
end

def test_costpercapita_bq38
  r = spreadsheet.costpercapita_bq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.570002457215743,r[:number])
end

def test_costpercapita_bs38
  r = spreadsheet.costpercapita_bs38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.333845944882674,r[:number])
end

def test_costpercapita_bt38
  r = spreadsheet.costpercapita_bt38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.127283416895141,r[:number])
end

def test_costpercapita_bu38
  r = spreadsheet.costpercapita_bu38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.32434102716618,r[:number])
end

def test_costpercapita_bv38
  r = spreadsheet.costpercapita_bv38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.544193546613977,r[:number])
end

def test_costpercapita_bw38
  r = spreadsheet.costpercapita_bw38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.53963075384978,r[:number])
end

def test_costpercapita_bx38
  r = spreadsheet.costpercapita_bx38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.61052250193828,r[:number])
end

def test_costpercapita_by38
  r = spreadsheet.costpercapita_by38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.384326383051544,r[:number])
end

def test_costpercapita_bz38
  r = spreadsheet.costpercapita_bz38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.260075776962283,r[:number])
end

def test_costpercapita_ca38
  r = spreadsheet.costpercapita_ca38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.062812276146412,r[:number])
end

def test_costpercapita_cc38
  r = spreadsheet.costpercapita_cc38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.79855906972292,r[:number])
end

def test_costpercapita_cd38
  r = spreadsheet.costpercapita_cd38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.3923254047421,r[:number])
end

def test_costpercapita_cf38
  r = spreadsheet.costpercapita_cf38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.5585594939253182,r[:number])
end

def test_costpercapita_cg38
  r = spreadsheet.costpercapita_cg38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch38
  r = spreadsheet.costpercapita_ch38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci38
  r = spreadsheet.costpercapita_ci38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj38
  r = spreadsheet.costpercapita_cj38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck38
  r = spreadsheet.costpercapita_ck38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl38
  r = spreadsheet.costpercapita_cl38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm38
  r = spreadsheet.costpercapita_cm38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn38
  r = spreadsheet.costpercapita_cn38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp38
  r = spreadsheet.costpercapita_cp38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.39539549932503537,r[:number])
end

def test_costpercapita_cq38
  r = spreadsheet.costpercapita_cq38
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.5585594939253182,r[:number])
end

def test_costpercapita_cr38
  r = spreadsheet.costpercapita_cr38
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a39
  r = spreadsheet.costpercapita_a39
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b39
  r = spreadsheet.costpercapita_b39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c39
  r = spreadsheet.costpercapita_c39
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e39
  r = spreadsheet.costpercapita_e39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.85673025861972,r[:number])
end

def test_costpercapita_f39
  r = spreadsheet.costpercapita_f39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.78421071843833,r[:number])
end

def test_costpercapita_g39
  r = spreadsheet.costpercapita_g39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.8258298125078,r[:number])
end

def test_costpercapita_h39
  r = spreadsheet.costpercapita_h39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92138251002677,r[:number])
end

def test_costpercapita_i39
  r = spreadsheet.costpercapita_i39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.09661926487527,r[:number])
end

def test_costpercapita_j39
  r = spreadsheet.costpercapita_j39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.34590646920652,r[:number])
end

def test_costpercapita_k39
  r = spreadsheet.costpercapita_k39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.56104013149109,r[:number])
end

def test_costpercapita_l39
  r = spreadsheet.costpercapita_l39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.68880266731881,r[:number])
end

def test_costpercapita_m39
  r = spreadsheet.costpercapita_m39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72514149922843,r[:number])
end

def test_costpercapita_o39
  r = spreadsheet.costpercapita_o39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.33805341280801,r[:number])
end

def test_costpercapita_p39
  r = spreadsheet.costpercapita_p39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.026886244722,r[:number])
end

def test_costpercapita_q39
  r = spreadsheet.costpercapita_q39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.10695824626555,r[:number])
end

def test_costpercapita_r39
  r = spreadsheet.costpercapita_r39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.20387391171141,r[:number])
end

def test_costpercapita_s39
  r = spreadsheet.costpercapita_s39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55166379487936,r[:number])
end

def test_costpercapita_t39
  r = spreadsheet.costpercapita_t39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18613584478634,r[:number])
end

def test_costpercapita_u39
  r = spreadsheet.costpercapita_u39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.94699136772934,r[:number])
end

def test_costpercapita_v39
  r = spreadsheet.costpercapita_v39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.74737348640706,r[:number])
end

def test_costpercapita_w39
  r = spreadsheet.costpercapita_w39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.58744013692298,r[:number])
end

def test_costpercapita_y39
  r = spreadsheet.costpercapita_y39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z39
  r = spreadsheet.costpercapita_z39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa39
  r = spreadsheet.costpercapita_aa39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab39
  r = spreadsheet.costpercapita_ab39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac39
  r = spreadsheet.costpercapita_ac39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad39
  r = spreadsheet.costpercapita_ad39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae39
  r = spreadsheet.costpercapita_ae39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af39
  r = spreadsheet.costpercapita_af39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag39
  r = spreadsheet.costpercapita_ag39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai39
  r = spreadsheet.costpercapita_ai39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.19478367142776,r[:number])
end

def test_costpercapita_aj39
  r = spreadsheet.costpercapita_aj39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.81109696316034,r[:number])
end

def test_costpercapita_ak39
  r = spreadsheet.costpercapita_ak39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.93278805877335,r[:number])
end

def test_costpercapita_al39
  r = spreadsheet.costpercapita_al39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.1252564217382,r[:number])
end

def test_costpercapita_am39
  r = spreadsheet.costpercapita_am39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.64828305975462,r[:number])
end

def test_costpercapita_an39
  r = spreadsheet.costpercapita_an39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.53204231399283,r[:number])
end

def test_costpercapita_ao39
  r = spreadsheet.costpercapita_ao39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.50803149922044,r[:number])
end

def test_costpercapita_ap39
  r = spreadsheet.costpercapita_ap39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.43617615372588,r[:number])
end

def test_costpercapita_aq39
  r = spreadsheet.costpercapita_aq39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.3125816361514,r[:number])
end

def test_costpercapita_as39
  r = spreadsheet.costpercapita_as39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.0556710864383,r[:number])
end

def test_costpercapita_at39
  r = spreadsheet.costpercapita_at39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3752.2586996839523,r[:number])
end

def test_costpercapita_av39
  r = spreadsheet.costpercapita_av39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw39
  r = spreadsheet.costpercapita_aw39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay39
  r = spreadsheet.costpercapita_ay39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.71403815517183,r[:number])
end

def test_costpercapita_az39
  r = spreadsheet.costpercapita_az39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.78421071843833,r[:number])
end

def test_costpercapita_ba39
  r = spreadsheet.costpercapita_ba39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.8258298125078,r[:number])
end

def test_costpercapita_bb39
  r = spreadsheet.costpercapita_bb39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92138251002677,r[:number])
end

def test_costpercapita_bc39
  r = spreadsheet.costpercapita_bc39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.09661926487527,r[:number])
end

def test_costpercapita_bd39
  r = spreadsheet.costpercapita_bd39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.34590646920652,r[:number])
end

def test_costpercapita_be39
  r = spreadsheet.costpercapita_be39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.56104013149109,r[:number])
end

def test_costpercapita_bf39
  r = spreadsheet.costpercapita_bf39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.68880266731881,r[:number])
end

def test_costpercapita_bg39
  r = spreadsheet.costpercapita_bg39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72514149922843,r[:number])
end

def test_costpercapita_bi39
  r = spreadsheet.costpercapita_bi39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.71403815517183,r[:number])
end

def test_costpercapita_bj39
  r = spreadsheet.costpercapita_bj39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.78421071843833,r[:number])
end

def test_costpercapita_bk39
  r = spreadsheet.costpercapita_bk39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.8258298125078,r[:number])
end

def test_costpercapita_bl39
  r = spreadsheet.costpercapita_bl39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.92138251002677,r[:number])
end

def test_costpercapita_bm39
  r = spreadsheet.costpercapita_bm39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.09661926487527,r[:number])
end

def test_costpercapita_bn39
  r = spreadsheet.costpercapita_bn39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.34590646920652,r[:number])
end

def test_costpercapita_bo39
  r = spreadsheet.costpercapita_bo39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.56104013149109,r[:number])
end

def test_costpercapita_bp39
  r = spreadsheet.costpercapita_bp39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.68880266731881,r[:number])
end

def test_costpercapita_bq39
  r = spreadsheet.costpercapita_bq39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.72514149922843,r[:number])
end

def test_costpercapita_bs39
  r = spreadsheet.costpercapita_bs39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.05209156797986,r[:number])
end

def test_costpercapita_bt39
  r = spreadsheet.costpercapita_bt39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.81109696316034,r[:number])
end

def test_costpercapita_bu39
  r = spreadsheet.costpercapita_bu39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.93278805877335,r[:number])
end

def test_costpercapita_bv39
  r = spreadsheet.costpercapita_bv39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.1252564217382,r[:number])
end

def test_costpercapita_bw39
  r = spreadsheet.costpercapita_bw39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.64828305975462,r[:number])
end

def test_costpercapita_bx39
  r = spreadsheet.costpercapita_bx39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.53204231399283,r[:number])
end

def test_costpercapita_by39
  r = spreadsheet.costpercapita_by39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.50803149922044,r[:number])
end

def test_costpercapita_bz39
  r = spreadsheet.costpercapita_bz39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.43617615372588,r[:number])
end

def test_costpercapita_ca39
  r = spreadsheet.costpercapita_ca39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.3125816361514,r[:number])
end

def test_costpercapita_cc39
  r = spreadsheet.costpercapita_cc39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.03981640827743,r[:number])
end

def test_costpercapita_cd39
  r = spreadsheet.costpercapita_cd39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3725.1160075805046,r[:number])
end

def test_costpercapita_cf39
  r = spreadsheet.costpercapita_cf39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-27.142692103447896,r[:number])
end

def test_costpercapita_cg39
  r = spreadsheet.costpercapita_cg39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch39
  r = spreadsheet.costpercapita_ch39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci39
  r = spreadsheet.costpercapita_ci39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj39
  r = spreadsheet.costpercapita_cj39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck39
  r = spreadsheet.costpercapita_ck39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl39
  r = spreadsheet.costpercapita_cl39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm39
  r = spreadsheet.costpercapita_cm39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn39
  r = spreadsheet.costpercapita_cn39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp39
  r = spreadsheet.costpercapita_cp39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.0158546781608773,r[:number])
end

def test_costpercapita_cq39
  r = spreadsheet.costpercapita_cq39
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-27.142692103447896,r[:number])
end

def test_costpercapita_cr39
  r = spreadsheet.costpercapita_cr39
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a40
  r = spreadsheet.costpercapita_a40
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b40
  r = spreadsheet.costpercapita_b40
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c40
  r = spreadsheet.costpercapita_c40
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e40
  r = spreadsheet.costpercapita_e40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f40
  r = spreadsheet.costpercapita_f40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g40
  r = spreadsheet.costpercapita_g40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h40
  r = spreadsheet.costpercapita_h40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i40
  r = spreadsheet.costpercapita_i40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j40
  r = spreadsheet.costpercapita_j40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k40
  r = spreadsheet.costpercapita_k40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l40
  r = spreadsheet.costpercapita_l40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m40
  r = spreadsheet.costpercapita_m40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o40
  r = spreadsheet.costpercapita_o40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p40
  r = spreadsheet.costpercapita_p40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q40
  r = spreadsheet.costpercapita_q40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r40
  r = spreadsheet.costpercapita_r40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s40
  r = spreadsheet.costpercapita_s40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t40
  r = spreadsheet.costpercapita_t40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u40
  r = spreadsheet.costpercapita_u40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v40
  r = spreadsheet.costpercapita_v40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w40
  r = spreadsheet.costpercapita_w40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y40
  r = spreadsheet.costpercapita_y40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z40
  r = spreadsheet.costpercapita_z40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa40
  r = spreadsheet.costpercapita_aa40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab40
  r = spreadsheet.costpercapita_ab40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac40
  r = spreadsheet.costpercapita_ac40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad40
  r = spreadsheet.costpercapita_ad40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae40
  r = spreadsheet.costpercapita_ae40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af40
  r = spreadsheet.costpercapita_af40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag40
  r = spreadsheet.costpercapita_ag40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai40
  r = spreadsheet.costpercapita_ai40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj40
  r = spreadsheet.costpercapita_aj40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak40
  r = spreadsheet.costpercapita_ak40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al40
  r = spreadsheet.costpercapita_al40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am40
  r = spreadsheet.costpercapita_am40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an40
  r = spreadsheet.costpercapita_an40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao40
  r = spreadsheet.costpercapita_ao40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap40
  r = spreadsheet.costpercapita_ap40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq40
  r = spreadsheet.costpercapita_aq40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as40
  r = spreadsheet.costpercapita_as40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at40
  r = spreadsheet.costpercapita_at40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av40
  r = spreadsheet.costpercapita_av40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw40
  r = spreadsheet.costpercapita_aw40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay40
  r = spreadsheet.costpercapita_ay40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az40
  r = spreadsheet.costpercapita_az40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba40
  r = spreadsheet.costpercapita_ba40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb40
  r = spreadsheet.costpercapita_bb40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc40
  r = spreadsheet.costpercapita_bc40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd40
  r = spreadsheet.costpercapita_bd40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be40
  r = spreadsheet.costpercapita_be40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf40
  r = spreadsheet.costpercapita_bf40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg40
  r = spreadsheet.costpercapita_bg40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi40
  r = spreadsheet.costpercapita_bi40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj40
  r = spreadsheet.costpercapita_bj40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk40
  r = spreadsheet.costpercapita_bk40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl40
  r = spreadsheet.costpercapita_bl40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm40
  r = spreadsheet.costpercapita_bm40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn40
  r = spreadsheet.costpercapita_bn40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo40
  r = spreadsheet.costpercapita_bo40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp40
  r = spreadsheet.costpercapita_bp40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq40
  r = spreadsheet.costpercapita_bq40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs40
  r = spreadsheet.costpercapita_bs40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt40
  r = spreadsheet.costpercapita_bt40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu40
  r = spreadsheet.costpercapita_bu40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv40
  r = spreadsheet.costpercapita_bv40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw40
  r = spreadsheet.costpercapita_bw40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx40
  r = spreadsheet.costpercapita_bx40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by40
  r = spreadsheet.costpercapita_by40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz40
  r = spreadsheet.costpercapita_bz40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca40
  r = spreadsheet.costpercapita_ca40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc40
  r = spreadsheet.costpercapita_cc40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd40
  r = spreadsheet.costpercapita_cd40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf40
  r = spreadsheet.costpercapita_cf40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg40
  r = spreadsheet.costpercapita_cg40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch40
  r = spreadsheet.costpercapita_ch40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci40
  r = spreadsheet.costpercapita_ci40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj40
  r = spreadsheet.costpercapita_cj40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck40
  r = spreadsheet.costpercapita_ck40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl40
  r = spreadsheet.costpercapita_cl40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm40
  r = spreadsheet.costpercapita_cm40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn40
  r = spreadsheet.costpercapita_cn40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp40
  r = spreadsheet.costpercapita_cp40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq40
  r = spreadsheet.costpercapita_cq40
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr40
  r = spreadsheet.costpercapita_cr40
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a41
  r = spreadsheet.costpercapita_a41
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.e",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b41
  r = spreadsheet.costpercapita_b41
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping (maritime bunkers)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c41
  r = spreadsheet.costpercapita_c41
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e41
  r = spreadsheet.costpercapita_e41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f41
  r = spreadsheet.costpercapita_f41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g41
  r = spreadsheet.costpercapita_g41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h41
  r = spreadsheet.costpercapita_h41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i41
  r = spreadsheet.costpercapita_i41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j41
  r = spreadsheet.costpercapita_j41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k41
  r = spreadsheet.costpercapita_k41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l41
  r = spreadsheet.costpercapita_l41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m41
  r = spreadsheet.costpercapita_m41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o41
  r = spreadsheet.costpercapita_o41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p41
  r = spreadsheet.costpercapita_p41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q41
  r = spreadsheet.costpercapita_q41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r41
  r = spreadsheet.costpercapita_r41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s41
  r = spreadsheet.costpercapita_s41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t41
  r = spreadsheet.costpercapita_t41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u41
  r = spreadsheet.costpercapita_u41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v41
  r = spreadsheet.costpercapita_v41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w41
  r = spreadsheet.costpercapita_w41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y41
  r = spreadsheet.costpercapita_y41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z41
  r = spreadsheet.costpercapita_z41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa41
  r = spreadsheet.costpercapita_aa41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab41
  r = spreadsheet.costpercapita_ab41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac41
  r = spreadsheet.costpercapita_ac41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad41
  r = spreadsheet.costpercapita_ad41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae41
  r = spreadsheet.costpercapita_ae41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af41
  r = spreadsheet.costpercapita_af41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag41
  r = spreadsheet.costpercapita_ag41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai41
  r = spreadsheet.costpercapita_ai41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj41
  r = spreadsheet.costpercapita_aj41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak41
  r = spreadsheet.costpercapita_ak41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al41
  r = spreadsheet.costpercapita_al41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am41
  r = spreadsheet.costpercapita_am41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an41
  r = spreadsheet.costpercapita_an41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao41
  r = spreadsheet.costpercapita_ao41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap41
  r = spreadsheet.costpercapita_ap41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq41
  r = spreadsheet.costpercapita_aq41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as41
  r = spreadsheet.costpercapita_as41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at41
  r = spreadsheet.costpercapita_at41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av41
  r = spreadsheet.costpercapita_av41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw41
  r = spreadsheet.costpercapita_aw41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay41
  r = spreadsheet.costpercapita_ay41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az41
  r = spreadsheet.costpercapita_az41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba41
  r = spreadsheet.costpercapita_ba41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb41
  r = spreadsheet.costpercapita_bb41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc41
  r = spreadsheet.costpercapita_bc41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd41
  r = spreadsheet.costpercapita_bd41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be41
  r = spreadsheet.costpercapita_be41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf41
  r = spreadsheet.costpercapita_bf41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg41
  r = spreadsheet.costpercapita_bg41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi41
  r = spreadsheet.costpercapita_bi41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj41
  r = spreadsheet.costpercapita_bj41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk41
  r = spreadsheet.costpercapita_bk41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl41
  r = spreadsheet.costpercapita_bl41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm41
  r = spreadsheet.costpercapita_bm41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn41
  r = spreadsheet.costpercapita_bn41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo41
  r = spreadsheet.costpercapita_bo41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp41
  r = spreadsheet.costpercapita_bp41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq41
  r = spreadsheet.costpercapita_bq41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs41
  r = spreadsheet.costpercapita_bs41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt41
  r = spreadsheet.costpercapita_bt41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu41
  r = spreadsheet.costpercapita_bu41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv41
  r = spreadsheet.costpercapita_bv41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw41
  r = spreadsheet.costpercapita_bw41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx41
  r = spreadsheet.costpercapita_bx41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by41
  r = spreadsheet.costpercapita_by41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz41
  r = spreadsheet.costpercapita_bz41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca41
  r = spreadsheet.costpercapita_ca41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc41
  r = spreadsheet.costpercapita_cc41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd41
  r = spreadsheet.costpercapita_cd41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf41
  r = spreadsheet.costpercapita_cf41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg41
  r = spreadsheet.costpercapita_cg41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch41
  r = spreadsheet.costpercapita_ch41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci41
  r = spreadsheet.costpercapita_ci41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj41
  r = spreadsheet.costpercapita_cj41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck41
  r = spreadsheet.costpercapita_ck41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl41
  r = spreadsheet.costpercapita_cl41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm41
  r = spreadsheet.costpercapita_cm41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn41
  r = spreadsheet.costpercapita_cn41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp41
  r = spreadsheet.costpercapita_cp41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq41
  r = spreadsheet.costpercapita_cq41
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr41
  r = spreadsheet.costpercapita_cr41
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a42
  r = spreadsheet.costpercapita_a42
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b42
  r = spreadsheet.costpercapita_b42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c42
  r = spreadsheet.costpercapita_c42
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e42
  r = spreadsheet.costpercapita_e42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f42
  r = spreadsheet.costpercapita_f42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g42
  r = spreadsheet.costpercapita_g42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h42
  r = spreadsheet.costpercapita_h42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i42
  r = spreadsheet.costpercapita_i42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j42
  r = spreadsheet.costpercapita_j42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k42
  r = spreadsheet.costpercapita_k42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l42
  r = spreadsheet.costpercapita_l42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m42
  r = spreadsheet.costpercapita_m42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o42
  r = spreadsheet.costpercapita_o42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p42
  r = spreadsheet.costpercapita_p42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q42
  r = spreadsheet.costpercapita_q42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r42
  r = spreadsheet.costpercapita_r42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s42
  r = spreadsheet.costpercapita_s42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t42
  r = spreadsheet.costpercapita_t42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u42
  r = spreadsheet.costpercapita_u42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v42
  r = spreadsheet.costpercapita_v42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w42
  r = spreadsheet.costpercapita_w42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y42
  r = spreadsheet.costpercapita_y42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z42
  r = spreadsheet.costpercapita_z42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa42
  r = spreadsheet.costpercapita_aa42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab42
  r = spreadsheet.costpercapita_ab42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac42
  r = spreadsheet.costpercapita_ac42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad42
  r = spreadsheet.costpercapita_ad42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae42
  r = spreadsheet.costpercapita_ae42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af42
  r = spreadsheet.costpercapita_af42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag42
  r = spreadsheet.costpercapita_ag42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai42
  r = spreadsheet.costpercapita_ai42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj42
  r = spreadsheet.costpercapita_aj42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak42
  r = spreadsheet.costpercapita_ak42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al42
  r = spreadsheet.costpercapita_al42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am42
  r = spreadsheet.costpercapita_am42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an42
  r = spreadsheet.costpercapita_an42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao42
  r = spreadsheet.costpercapita_ao42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap42
  r = spreadsheet.costpercapita_ap42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq42
  r = spreadsheet.costpercapita_aq42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as42
  r = spreadsheet.costpercapita_as42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at42
  r = spreadsheet.costpercapita_at42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av42
  r = spreadsheet.costpercapita_av42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw42
  r = spreadsheet.costpercapita_aw42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay42
  r = spreadsheet.costpercapita_ay42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az42
  r = spreadsheet.costpercapita_az42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba42
  r = spreadsheet.costpercapita_ba42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb42
  r = spreadsheet.costpercapita_bb42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc42
  r = spreadsheet.costpercapita_bc42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd42
  r = spreadsheet.costpercapita_bd42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be42
  r = spreadsheet.costpercapita_be42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf42
  r = spreadsheet.costpercapita_bf42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg42
  r = spreadsheet.costpercapita_bg42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi42
  r = spreadsheet.costpercapita_bi42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj42
  r = spreadsheet.costpercapita_bj42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk42
  r = spreadsheet.costpercapita_bk42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl42
  r = spreadsheet.costpercapita_bl42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm42
  r = spreadsheet.costpercapita_bm42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn42
  r = spreadsheet.costpercapita_bn42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo42
  r = spreadsheet.costpercapita_bo42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp42
  r = spreadsheet.costpercapita_bp42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq42
  r = spreadsheet.costpercapita_bq42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs42
  r = spreadsheet.costpercapita_bs42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt42
  r = spreadsheet.costpercapita_bt42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu42
  r = spreadsheet.costpercapita_bu42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv42
  r = spreadsheet.costpercapita_bv42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw42
  r = spreadsheet.costpercapita_bw42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx42
  r = spreadsheet.costpercapita_bx42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by42
  r = spreadsheet.costpercapita_by42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz42
  r = spreadsheet.costpercapita_bz42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca42
  r = spreadsheet.costpercapita_ca42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc42
  r = spreadsheet.costpercapita_cc42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd42
  r = spreadsheet.costpercapita_cd42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf42
  r = spreadsheet.costpercapita_cf42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg42
  r = spreadsheet.costpercapita_cg42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch42
  r = spreadsheet.costpercapita_ch42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci42
  r = spreadsheet.costpercapita_ci42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj42
  r = spreadsheet.costpercapita_cj42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck42
  r = spreadsheet.costpercapita_ck42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl42
  r = spreadsheet.costpercapita_cl42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm42
  r = spreadsheet.costpercapita_cm42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn42
  r = spreadsheet.costpercapita_cn42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp42
  r = spreadsheet.costpercapita_cp42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq42
  r = spreadsheet.costpercapita_cq42
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr42
  r = spreadsheet.costpercapita_cr42
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a43
  r = spreadsheet.costpercapita_a43
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b43
  r = spreadsheet.costpercapita_b43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c43
  r = spreadsheet.costpercapita_c43
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e43
  r = spreadsheet.costpercapita_e43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number])
end

def test_costpercapita_f43
  r = spreadsheet.costpercapita_f43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_g43
  r = spreadsheet.costpercapita_g43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number])
end

def test_costpercapita_h43
  r = spreadsheet.costpercapita_h43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_i43
  r = spreadsheet.costpercapita_i43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_j43
  r = spreadsheet.costpercapita_j43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number])
end

def test_costpercapita_k43
  r = spreadsheet.costpercapita_k43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_l43
  r = spreadsheet.costpercapita_l43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number])
end

def test_costpercapita_m43
  r = spreadsheet.costpercapita_m43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number])
end

def test_costpercapita_o43
  r = spreadsheet.costpercapita_o43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number])
end

def test_costpercapita_p43
  r = spreadsheet.costpercapita_p43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number])
end

def test_costpercapita_q43
  r = spreadsheet.costpercapita_q43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number])
end

def test_costpercapita_r43
  r = spreadsheet.costpercapita_r43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number])
end

def test_costpercapita_s43
  r = spreadsheet.costpercapita_s43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number])
end

def test_costpercapita_t43
  r = spreadsheet.costpercapita_t43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number])
end

def test_costpercapita_u43
  r = spreadsheet.costpercapita_u43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number])
end

def test_costpercapita_v43
  r = spreadsheet.costpercapita_v43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number])
end

def test_costpercapita_w43
  r = spreadsheet.costpercapita_w43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number])
end

def test_costpercapita_y43
  r = spreadsheet.costpercapita_y43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z43
  r = spreadsheet.costpercapita_z43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa43
  r = spreadsheet.costpercapita_aa43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab43
  r = spreadsheet.costpercapita_ab43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac43
  r = spreadsheet.costpercapita_ac43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad43
  r = spreadsheet.costpercapita_ad43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae43
  r = spreadsheet.costpercapita_ae43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af43
  r = spreadsheet.costpercapita_af43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag43
  r = spreadsheet.costpercapita_ag43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai43
  r = spreadsheet.costpercapita_ai43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number])
end

def test_costpercapita_aj43
  r = spreadsheet.costpercapita_aj43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number])
end

def test_costpercapita_ak43
  r = spreadsheet.costpercapita_ak43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number])
end

def test_costpercapita_al43
  r = spreadsheet.costpercapita_al43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number])
end

def test_costpercapita_am43
  r = spreadsheet.costpercapita_am43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number])
end

def test_costpercapita_an43
  r = spreadsheet.costpercapita_an43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number])
end

def test_costpercapita_ao43
  r = spreadsheet.costpercapita_ao43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number])
end

def test_costpercapita_ap43
  r = spreadsheet.costpercapita_ap43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number])
end

def test_costpercapita_aq43
  r = spreadsheet.costpercapita_aq43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number])
end

def test_costpercapita_as43
  r = spreadsheet.costpercapita_as43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number])
end

def test_costpercapita_at43
  r = spreadsheet.costpercapita_at43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number])
end

def test_costpercapita_av43
  r = spreadsheet.costpercapita_av43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw43
  r = spreadsheet.costpercapita_aw43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay43
  r = spreadsheet.costpercapita_ay43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number])
end

def test_costpercapita_az43
  r = spreadsheet.costpercapita_az43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_ba43
  r = spreadsheet.costpercapita_ba43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number])
end

def test_costpercapita_bb43
  r = spreadsheet.costpercapita_bb43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_bc43
  r = spreadsheet.costpercapita_bc43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_bd43
  r = spreadsheet.costpercapita_bd43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number])
end

def test_costpercapita_be43
  r = spreadsheet.costpercapita_be43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_bf43
  r = spreadsheet.costpercapita_bf43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number])
end

def test_costpercapita_bg43
  r = spreadsheet.costpercapita_bg43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number])
end

def test_costpercapita_bi43
  r = spreadsheet.costpercapita_bi43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number])
end

def test_costpercapita_bj43
  r = spreadsheet.costpercapita_bj43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_bk43
  r = spreadsheet.costpercapita_bk43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number])
end

def test_costpercapita_bl43
  r = spreadsheet.costpercapita_bl43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_bm43
  r = spreadsheet.costpercapita_bm43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_bn43
  r = spreadsheet.costpercapita_bn43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number])
end

def test_costpercapita_bo43
  r = spreadsheet.costpercapita_bo43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_bp43
  r = spreadsheet.costpercapita_bp43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number])
end

def test_costpercapita_bq43
  r = spreadsheet.costpercapita_bq43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number])
end

def test_costpercapita_bs43
  r = spreadsheet.costpercapita_bs43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.893309368875432,r[:number])
end

def test_costpercapita_bt43
  r = spreadsheet.costpercapita_bt43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number])
end

def test_costpercapita_bu43
  r = spreadsheet.costpercapita_bu43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number])
end

def test_costpercapita_bv43
  r = spreadsheet.costpercapita_bv43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number])
end

def test_costpercapita_bw43
  r = spreadsheet.costpercapita_bw43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number])
end

def test_costpercapita_bx43
  r = spreadsheet.costpercapita_bx43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number])
end

def test_costpercapita_by43
  r = spreadsheet.costpercapita_by43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number])
end

def test_costpercapita_bz43
  r = spreadsheet.costpercapita_bz43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number])
end

def test_costpercapita_ca43
  r = spreadsheet.costpercapita_ca43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number])
end

def test_costpercapita_cc43
  r = spreadsheet.costpercapita_cc43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.528436409641897,r[:number])
end

def test_costpercapita_cd43
  r = spreadsheet.costpercapita_cd43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.19160492603066,r[:number])
end

def test_costpercapita_cf43
  r = spreadsheet.costpercapita_cf43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8209189795268315,r[:number])
end

def test_costpercapita_cg43
  r = spreadsheet.costpercapita_cg43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch43
  r = spreadsheet.costpercapita_ch43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci43
  r = spreadsheet.costpercapita_ci43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj43
  r = spreadsheet.costpercapita_cj43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck43
  r = spreadsheet.costpercapita_ck43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl43
  r = spreadsheet.costpercapita_cl43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm43
  r = spreadsheet.costpercapita_cm43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn43
  r = spreadsheet.costpercapita_cn43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp43
  r = spreadsheet.costpercapita_cp43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.20232433105853684,r[:number])
end

def test_costpercapita_cq43
  r = spreadsheet.costpercapita_cq43
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8209189795268315,r[:number])
end

def test_costpercapita_cr43
  r = spreadsheet.costpercapita_cr43
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a44
  r = spreadsheet.costpercapita_a44
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b44
  r = spreadsheet.costpercapita_b44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c44
  r = spreadsheet.costpercapita_c44
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e44
  r = spreadsheet.costpercapita_e44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f44
  r = spreadsheet.costpercapita_f44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g44
  r = spreadsheet.costpercapita_g44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h44
  r = spreadsheet.costpercapita_h44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i44
  r = spreadsheet.costpercapita_i44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j44
  r = spreadsheet.costpercapita_j44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k44
  r = spreadsheet.costpercapita_k44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l44
  r = spreadsheet.costpercapita_l44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m44
  r = spreadsheet.costpercapita_m44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o44
  r = spreadsheet.costpercapita_o44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p44
  r = spreadsheet.costpercapita_p44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q44
  r = spreadsheet.costpercapita_q44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r44
  r = spreadsheet.costpercapita_r44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s44
  r = spreadsheet.costpercapita_s44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t44
  r = spreadsheet.costpercapita_t44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u44
  r = spreadsheet.costpercapita_u44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v44
  r = spreadsheet.costpercapita_v44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w44
  r = spreadsheet.costpercapita_w44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y44
  r = spreadsheet.costpercapita_y44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_z44
  r = spreadsheet.costpercapita_z44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.45656653285251,r[:number])
end

def test_costpercapita_aa44
  r = spreadsheet.costpercapita_aa44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.409162417205268,r[:number])
end

def test_costpercapita_ab44
  r = spreadsheet.costpercapita_ab44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.438383117365467,r[:number])
end

def test_costpercapita_ac44
  r = spreadsheet.costpercapita_ac44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.280477805756656,r[:number])
end

def test_costpercapita_ad44
  r = spreadsheet.costpercapita_ad44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.132536780985016,r[:number])
end

def test_costpercapita_ae44
  r = spreadsheet.costpercapita_ae44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.001751932843022,r[:number])
end

def test_costpercapita_af44
  r = spreadsheet.costpercapita_af44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.8820294332238205,r[:number])
end

def test_costpercapita_ag44
  r = spreadsheet.costpercapita_ag44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.772260557340837,r[:number])
end

def test_costpercapita_ai44
  r = spreadsheet.costpercapita_ai44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_aj44
  r = spreadsheet.costpercapita_aj44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.45656653285251,r[:number])
end

def test_costpercapita_ak44
  r = spreadsheet.costpercapita_ak44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.409162417205268,r[:number])
end

def test_costpercapita_al44
  r = spreadsheet.costpercapita_al44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.438383117365467,r[:number])
end

def test_costpercapita_am44
  r = spreadsheet.costpercapita_am44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.280477805756656,r[:number])
end

def test_costpercapita_an44
  r = spreadsheet.costpercapita_an44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.132536780985016,r[:number])
end

def test_costpercapita_ao44
  r = spreadsheet.costpercapita_ao44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.001751932843022,r[:number])
end

def test_costpercapita_ap44
  r = spreadsheet.costpercapita_ap44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.8820294332238205,r[:number])
end

def test_costpercapita_aq44
  r = spreadsheet.costpercapita_aq44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.772260557340837,r[:number])
end

def test_costpercapita_as44
  r = spreadsheet.costpercapita_as44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.992843407006715,r[:number])
end

def test_costpercapita_at44
  r = spreadsheet.costpercapita_at44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.95126597509048,r[:number])
end

def test_costpercapita_av44
  r = spreadsheet.costpercapita_av44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw44
  r = spreadsheet.costpercapita_aw44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay44
  r = spreadsheet.costpercapita_ay44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az44
  r = spreadsheet.costpercapita_az44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba44
  r = spreadsheet.costpercapita_ba44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb44
  r = spreadsheet.costpercapita_bb44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc44
  r = spreadsheet.costpercapita_bc44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd44
  r = spreadsheet.costpercapita_bd44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be44
  r = spreadsheet.costpercapita_be44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf44
  r = spreadsheet.costpercapita_bf44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg44
  r = spreadsheet.costpercapita_bg44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi44
  r = spreadsheet.costpercapita_bi44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj44
  r = spreadsheet.costpercapita_bj44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk44
  r = spreadsheet.costpercapita_bk44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl44
  r = spreadsheet.costpercapita_bl44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm44
  r = spreadsheet.costpercapita_bm44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn44
  r = spreadsheet.costpercapita_bn44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo44
  r = spreadsheet.costpercapita_bo44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp44
  r = spreadsheet.costpercapita_bp44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq44
  r = spreadsheet.costpercapita_bq44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs44
  r = spreadsheet.costpercapita_bs44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_bt44
  r = spreadsheet.costpercapita_bt44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.45656653285251,r[:number])
end

def test_costpercapita_bu44
  r = spreadsheet.costpercapita_bu44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.409162417205268,r[:number])
end

def test_costpercapita_bv44
  r = spreadsheet.costpercapita_bv44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.438383117365467,r[:number])
end

def test_costpercapita_bw44
  r = spreadsheet.costpercapita_bw44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.280477805756656,r[:number])
end

def test_costpercapita_bx44
  r = spreadsheet.costpercapita_bx44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.132536780985016,r[:number])
end

def test_costpercapita_by44
  r = spreadsheet.costpercapita_by44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.001751932843022,r[:number])
end

def test_costpercapita_bz44
  r = spreadsheet.costpercapita_bz44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.8820294332238205,r[:number])
end

def test_costpercapita_ca44
  r = spreadsheet.costpercapita_ca44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.772260557340837,r[:number])
end

def test_costpercapita_cc44
  r = spreadsheet.costpercapita_cc44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.992843407006715,r[:number])
end

def test_costpercapita_cd44
  r = spreadsheet.costpercapita_cd44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.95126597509048,r[:number])
end

def test_costpercapita_cf44
  r = spreadsheet.costpercapita_cf44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg44
  r = spreadsheet.costpercapita_cg44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch44
  r = spreadsheet.costpercapita_ch44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci44
  r = spreadsheet.costpercapita_ci44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj44
  r = spreadsheet.costpercapita_cj44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck44
  r = spreadsheet.costpercapita_ck44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl44
  r = spreadsheet.costpercapita_cl44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm44
  r = spreadsheet.costpercapita_cm44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn44
  r = spreadsheet.costpercapita_cn44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp44
  r = spreadsheet.costpercapita_cp44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq44
  r = spreadsheet.costpercapita_cq44
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr44
  r = spreadsheet.costpercapita_cr44
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a45
  r = spreadsheet.costpercapita_a45
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b45
  r = spreadsheet.costpercapita_b45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c45
  r = spreadsheet.costpercapita_c45
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e45
  r = spreadsheet.costpercapita_e45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f45
  r = spreadsheet.costpercapita_f45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g45
  r = spreadsheet.costpercapita_g45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h45
  r = spreadsheet.costpercapita_h45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i45
  r = spreadsheet.costpercapita_i45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j45
  r = spreadsheet.costpercapita_j45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k45
  r = spreadsheet.costpercapita_k45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l45
  r = spreadsheet.costpercapita_l45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m45
  r = spreadsheet.costpercapita_m45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o45
  r = spreadsheet.costpercapita_o45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p45
  r = spreadsheet.costpercapita_p45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q45
  r = spreadsheet.costpercapita_q45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r45
  r = spreadsheet.costpercapita_r45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s45
  r = spreadsheet.costpercapita_s45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t45
  r = spreadsheet.costpercapita_t45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u45
  r = spreadsheet.costpercapita_u45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v45
  r = spreadsheet.costpercapita_v45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w45
  r = spreadsheet.costpercapita_w45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y45
  r = spreadsheet.costpercapita_y45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(432.41627381141154,r[:number])
end

def test_costpercapita_z45
  r = spreadsheet.costpercapita_z45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.82933264456,r[:number])
end

def test_costpercapita_aa45
  r = spreadsheet.costpercapita_aa45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.0971440096586,r[:number])
end

def test_costpercapita_ab45
  r = spreadsheet.costpercapita_ab45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.48292069161127,r[:number])
end

def test_costpercapita_ac45
  r = spreadsheet.costpercapita_ac45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.53512529867376,r[:number])
end

def test_costpercapita_ad45
  r = spreadsheet.costpercapita_ad45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.62633463812799,r[:number])
end

def test_costpercapita_ae45
  r = spreadsheet.costpercapita_ae45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.6876507218443,r[:number])
end

def test_costpercapita_af45
  r = spreadsheet.costpercapita_af45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.63905227835964,r[:number])
end

def test_costpercapita_ag45
  r = spreadsheet.costpercapita_ag45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.008345676601735,r[:number])
end

def test_costpercapita_ai45
  r = spreadsheet.costpercapita_ai45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(432.41627381141154,r[:number])
end

def test_costpercapita_aj45
  r = spreadsheet.costpercapita_aj45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.82933264456,r[:number])
end

def test_costpercapita_ak45
  r = spreadsheet.costpercapita_ak45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.0971440096586,r[:number])
end

def test_costpercapita_al45
  r = spreadsheet.costpercapita_al45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.48292069161127,r[:number])
end

def test_costpercapita_am45
  r = spreadsheet.costpercapita_am45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.53512529867376,r[:number])
end

def test_costpercapita_an45
  r = spreadsheet.costpercapita_an45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.62633463812799,r[:number])
end

def test_costpercapita_ao45
  r = spreadsheet.costpercapita_ao45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.6876507218443,r[:number])
end

def test_costpercapita_ap45
  r = spreadsheet.costpercapita_ap45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.63905227835964,r[:number])
end

def test_costpercapita_aq45
  r = spreadsheet.costpercapita_aq45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.008345676601735,r[:number])
end

def test_costpercapita_as45
  r = spreadsheet.costpercapita_as45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.14690886342765,r[:number])
end

def test_costpercapita_at45
  r = spreadsheet.costpercapita_at45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4022.5493737254387,r[:number])
end

def test_costpercapita_av45
  r = spreadsheet.costpercapita_av45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw45
  r = spreadsheet.costpercapita_aw45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay45
  r = spreadsheet.costpercapita_ay45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az45
  r = spreadsheet.costpercapita_az45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba45
  r = spreadsheet.costpercapita_ba45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb45
  r = spreadsheet.costpercapita_bb45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc45
  r = spreadsheet.costpercapita_bc45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd45
  r = spreadsheet.costpercapita_bd45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be45
  r = spreadsheet.costpercapita_be45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf45
  r = spreadsheet.costpercapita_bf45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg45
  r = spreadsheet.costpercapita_bg45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi45
  r = spreadsheet.costpercapita_bi45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj45
  r = spreadsheet.costpercapita_bj45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk45
  r = spreadsheet.costpercapita_bk45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl45
  r = spreadsheet.costpercapita_bl45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm45
  r = spreadsheet.costpercapita_bm45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn45
  r = spreadsheet.costpercapita_bn45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo45
  r = spreadsheet.costpercapita_bo45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp45
  r = spreadsheet.costpercapita_bp45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq45
  r = spreadsheet.costpercapita_bq45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs45
  r = spreadsheet.costpercapita_bs45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(432.41627381141154,r[:number])
end

def test_costpercapita_bt45
  r = spreadsheet.costpercapita_bt45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.82933264456,r[:number])
end

def test_costpercapita_bu45
  r = spreadsheet.costpercapita_bu45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.0971440096586,r[:number])
end

def test_costpercapita_bv45
  r = spreadsheet.costpercapita_bv45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.48292069161127,r[:number])
end

def test_costpercapita_bw45
  r = spreadsheet.costpercapita_bw45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.53512529867376,r[:number])
end

def test_costpercapita_bx45
  r = spreadsheet.costpercapita_bx45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.62633463812799,r[:number])
end

def test_costpercapita_by45
  r = spreadsheet.costpercapita_by45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.6876507218443,r[:number])
end

def test_costpercapita_bz45
  r = spreadsheet.costpercapita_bz45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.63905227835964,r[:number])
end

def test_costpercapita_ca45
  r = spreadsheet.costpercapita_ca45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.008345676601735,r[:number])
end

def test_costpercapita_cc45
  r = spreadsheet.costpercapita_cc45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.14690886342765,r[:number])
end

def test_costpercapita_cd45
  r = spreadsheet.costpercapita_cd45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4022.5493737254387,r[:number])
end

def test_costpercapita_cf45
  r = spreadsheet.costpercapita_cf45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg45
  r = spreadsheet.costpercapita_cg45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch45
  r = spreadsheet.costpercapita_ch45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci45
  r = spreadsheet.costpercapita_ci45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj45
  r = spreadsheet.costpercapita_cj45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck45
  r = spreadsheet.costpercapita_ck45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl45
  r = spreadsheet.costpercapita_cl45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm45
  r = spreadsheet.costpercapita_cm45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn45
  r = spreadsheet.costpercapita_cn45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp45
  r = spreadsheet.costpercapita_cp45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq45
  r = spreadsheet.costpercapita_cq45
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr45
  r = spreadsheet.costpercapita_cr45
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a46
  r = spreadsheet.costpercapita_a46
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b46
  r = spreadsheet.costpercapita_b46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c46
  r = spreadsheet.costpercapita_c46
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e46
  r = spreadsheet.costpercapita_e46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f46
  r = spreadsheet.costpercapita_f46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g46
  r = spreadsheet.costpercapita_g46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h46
  r = spreadsheet.costpercapita_h46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i46
  r = spreadsheet.costpercapita_i46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j46
  r = spreadsheet.costpercapita_j46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k46
  r = spreadsheet.costpercapita_k46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l46
  r = spreadsheet.costpercapita_l46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m46
  r = spreadsheet.costpercapita_m46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o46
  r = spreadsheet.costpercapita_o46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p46
  r = spreadsheet.costpercapita_p46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q46
  r = spreadsheet.costpercapita_q46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r46
  r = spreadsheet.costpercapita_r46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s46
  r = spreadsheet.costpercapita_s46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t46
  r = spreadsheet.costpercapita_t46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u46
  r = spreadsheet.costpercapita_u46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v46
  r = spreadsheet.costpercapita_v46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w46
  r = spreadsheet.costpercapita_w46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y46
  r = spreadsheet.costpercapita_y46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_z46
  r = spreadsheet.costpercapita_z46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.97307704951542,r[:number])
end

def test_costpercapita_aa46
  r = spreadsheet.costpercapita_aa46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.90203013066096,r[:number])
end

def test_costpercapita_ab46
  r = spreadsheet.costpercapita_ab46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.01905763736195,r[:number])
end

def test_costpercapita_ac46
  r = spreadsheet.costpercapita_ac46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.45255635500386,r[:number])
end

def test_costpercapita_ad46
  r = spreadsheet.costpercapita_ad46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.60852223650423,r[:number])
end

def test_costpercapita_ae46
  r = spreadsheet.costpercapita_ae46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.72286461090769,r[:number])
end

def test_costpercapita_af46
  r = spreadsheet.costpercapita_af46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.023512760508385,r[:number])
end

def test_costpercapita_ag46
  r = spreadsheet.costpercapita_ag46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.964011892301023,r[:number])
end

def test_costpercapita_ai46
  r = spreadsheet.costpercapita_ai46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_aj46
  r = spreadsheet.costpercapita_aj46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.97307704951542,r[:number])
end

def test_costpercapita_ak46
  r = spreadsheet.costpercapita_ak46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.90203013066096,r[:number])
end

def test_costpercapita_al46
  r = spreadsheet.costpercapita_al46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.01905763736195,r[:number])
end

def test_costpercapita_am46
  r = spreadsheet.costpercapita_am46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.45255635500386,r[:number])
end

def test_costpercapita_an46
  r = spreadsheet.costpercapita_an46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.60852223650423,r[:number])
end

def test_costpercapita_ao46
  r = spreadsheet.costpercapita_ao46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.72286461090769,r[:number])
end

def test_costpercapita_ap46
  r = spreadsheet.costpercapita_ap46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.023512760508385,r[:number])
end

def test_costpercapita_aq46
  r = spreadsheet.costpercapita_aq46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.964011892301023,r[:number])
end

def test_costpercapita_as46
  r = spreadsheet.costpercapita_as46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.54919551116479,r[:number])
end

def test_costpercapita_at46
  r = spreadsheet.costpercapita_at46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1420.9422894853783,r[:number])
end

def test_costpercapita_av46
  r = spreadsheet.costpercapita_av46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw46
  r = spreadsheet.costpercapita_aw46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay46
  r = spreadsheet.costpercapita_ay46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az46
  r = spreadsheet.costpercapita_az46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba46
  r = spreadsheet.costpercapita_ba46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb46
  r = spreadsheet.costpercapita_bb46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc46
  r = spreadsheet.costpercapita_bc46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd46
  r = spreadsheet.costpercapita_bd46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be46
  r = spreadsheet.costpercapita_be46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf46
  r = spreadsheet.costpercapita_bf46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg46
  r = spreadsheet.costpercapita_bg46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi46
  r = spreadsheet.costpercapita_bi46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj46
  r = spreadsheet.costpercapita_bj46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk46
  r = spreadsheet.costpercapita_bk46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl46
  r = spreadsheet.costpercapita_bl46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm46
  r = spreadsheet.costpercapita_bm46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn46
  r = spreadsheet.costpercapita_bn46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo46
  r = spreadsheet.costpercapita_bo46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp46
  r = spreadsheet.costpercapita_bp46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq46
  r = spreadsheet.costpercapita_bq46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs46
  r = spreadsheet.costpercapita_bs46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_bt46
  r = spreadsheet.costpercapita_bt46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.97307704951542,r[:number])
end

def test_costpercapita_bu46
  r = spreadsheet.costpercapita_bu46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.90203013066096,r[:number])
end

def test_costpercapita_bv46
  r = spreadsheet.costpercapita_bv46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.01905763736195,r[:number])
end

def test_costpercapita_bw46
  r = spreadsheet.costpercapita_bw46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.45255635500386,r[:number])
end

def test_costpercapita_bx46
  r = spreadsheet.costpercapita_bx46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.60852223650423,r[:number])
end

def test_costpercapita_by46
  r = spreadsheet.costpercapita_by46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.72286461090769,r[:number])
end

def test_costpercapita_bz46
  r = spreadsheet.costpercapita_bz46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.023512760508385,r[:number])
end

def test_costpercapita_ca46
  r = spreadsheet.costpercapita_ca46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.964011892301023,r[:number])
end

def test_costpercapita_cc46
  r = spreadsheet.costpercapita_cc46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.54919551116479,r[:number])
end

def test_costpercapita_cd46
  r = spreadsheet.costpercapita_cd46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1420.9422894853783,r[:number])
end

def test_costpercapita_cf46
  r = spreadsheet.costpercapita_cf46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg46
  r = spreadsheet.costpercapita_cg46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch46
  r = spreadsheet.costpercapita_ch46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci46
  r = spreadsheet.costpercapita_ci46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj46
  r = spreadsheet.costpercapita_cj46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck46
  r = spreadsheet.costpercapita_ck46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl46
  r = spreadsheet.costpercapita_cl46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm46
  r = spreadsheet.costpercapita_cm46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn46
  r = spreadsheet.costpercapita_cn46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp46
  r = spreadsheet.costpercapita_cp46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq46
  r = spreadsheet.costpercapita_cq46
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr46
  r = spreadsheet.costpercapita_cr46
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a47
  r = spreadsheet.costpercapita_a47
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b47
  r = spreadsheet.costpercapita_b47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel transfers",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c47
  r = spreadsheet.costpercapita_c47
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e47
  r = spreadsheet.costpercapita_e47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.315878170689789,r[:number])
end

def test_costpercapita_f47
  r = spreadsheet.costpercapita_f47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_g47
  r = spreadsheet.costpercapita_g47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.06513418904686,r[:number])
end

def test_costpercapita_h47
  r = spreadsheet.costpercapita_h47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.86243719461344,r[:number])
end

def test_costpercapita_i47
  r = spreadsheet.costpercapita_i47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.09848608548116,r[:number])
end

def test_costpercapita_j47
  r = spreadsheet.costpercapita_j47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.377038948057052,r[:number])
end

def test_costpercapita_k47
  r = spreadsheet.costpercapita_k47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.13251525451907,r[:number])
end

def test_costpercapita_l47
  r = spreadsheet.costpercapita_l47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21865938129346,r[:number])
end

def test_costpercapita_m47
  r = spreadsheet.costpercapita_m47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.902606070026803,r[:number])
end

def test_costpercapita_o47
  r = spreadsheet.costpercapita_o47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03709437458421908,r[:number])
end

def test_costpercapita_p47
  r = spreadsheet.costpercapita_p47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03869169294796451,r[:number])
end

def test_costpercapita_q47
  r = spreadsheet.costpercapita_q47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04167084993192971,r[:number])
end

def test_costpercapita_r47
  r = spreadsheet.costpercapita_r47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04664025878369184,r[:number])
end

def test_costpercapita_s47
  r = spreadsheet.costpercapita_s47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.051440605811828785,r[:number])
end

def test_costpercapita_t47
  r = spreadsheet.costpercapita_t47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05511604649597045,r[:number])
end

def test_costpercapita_u47
  r = spreadsheet.costpercapita_u47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05808140271233135,r[:number])
end

def test_costpercapita_v47
  r = spreadsheet.costpercapita_v47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.061134025154962475,r[:number])
end

def test_costpercapita_w47
  r = spreadsheet.costpercapita_w47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0635275304816177,r[:number])
end

def test_costpercapita_y47
  r = spreadsheet.costpercapita_y47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z47
  r = spreadsheet.costpercapita_z47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa47
  r = spreadsheet.costpercapita_aa47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab47
  r = spreadsheet.costpercapita_ab47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac47
  r = spreadsheet.costpercapita_ac47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad47
  r = spreadsheet.costpercapita_ad47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae47
  r = spreadsheet.costpercapita_ae47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af47
  r = spreadsheet.costpercapita_af47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag47
  r = spreadsheet.costpercapita_ag47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai47
  r = spreadsheet.costpercapita_ai47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.352972545274008,r[:number])
end

def test_costpercapita_aj47
  r = spreadsheet.costpercapita_aj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880051898850994,r[:number])
end

def test_costpercapita_ak47
  r = spreadsheet.costpercapita_ak47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.10680503897879,r[:number])
end

def test_costpercapita_al47
  r = spreadsheet.costpercapita_al47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.909077453397135,r[:number])
end

def test_costpercapita_am47
  r = spreadsheet.costpercapita_am47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.14992669129299,r[:number])
end

def test_costpercapita_an47
  r = spreadsheet.costpercapita_an47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.432154994553024,r[:number])
end

def test_costpercapita_ao47
  r = spreadsheet.costpercapita_ao47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.1905966572314,r[:number])
end

def test_costpercapita_ap47
  r = spreadsheet.costpercapita_ap47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.279793406448423,r[:number])
end

def test_costpercapita_aq47
  r = spreadsheet.costpercapita_aq47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.966133600508417,r[:number])
end

def test_costpercapita_as47
  r = spreadsheet.costpercapita_as47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.807501365170577,r[:number])
end

def test_costpercapita_at47
  r = spreadsheet.costpercapita_at47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(470.21989961339847,r[:number])
end

def test_costpercapita_av47
  r = spreadsheet.costpercapita_av47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw47
  r = spreadsheet.costpercapita_aw47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay47
  r = spreadsheet.costpercapita_ay47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.589526902413873,r[:number])
end

def test_costpercapita_az47
  r = spreadsheet.costpercapita_az47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_ba47
  r = spreadsheet.costpercapita_ba47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.06513418904686,r[:number])
end

def test_costpercapita_bb47
  r = spreadsheet.costpercapita_bb47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.86243719461344,r[:number])
end

def test_costpercapita_bc47
  r = spreadsheet.costpercapita_bc47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.09848608548116,r[:number])
end

def test_costpercapita_bd47
  r = spreadsheet.costpercapita_bd47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.377038948057052,r[:number])
end

def test_costpercapita_be47
  r = spreadsheet.costpercapita_be47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.13251525451907,r[:number])
end

def test_costpercapita_bf47
  r = spreadsheet.costpercapita_bf47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21865938129346,r[:number])
end

def test_costpercapita_bg47
  r = spreadsheet.costpercapita_bg47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.902606070026803,r[:number])
end

def test_costpercapita_bi47
  r = spreadsheet.costpercapita_bi47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.589526902413873,r[:number])
end

def test_costpercapita_bj47
  r = spreadsheet.costpercapita_bj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_bk47
  r = spreadsheet.costpercapita_bk47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.06513418904686,r[:number])
end

def test_costpercapita_bl47
  r = spreadsheet.costpercapita_bl47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.86243719461344,r[:number])
end

def test_costpercapita_bm47
  r = spreadsheet.costpercapita_bm47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.09848608548116,r[:number])
end

def test_costpercapita_bn47
  r = spreadsheet.costpercapita_bn47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.377038948057052,r[:number])
end

def test_costpercapita_bo47
  r = spreadsheet.costpercapita_bo47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.13251525451907,r[:number])
end

def test_costpercapita_bp47
  r = spreadsheet.costpercapita_bp47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21865938129346,r[:number])
end

def test_costpercapita_bq47
  r = spreadsheet.costpercapita_bq47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.902606070026803,r[:number])
end

def test_costpercapita_bs47
  r = spreadsheet.costpercapita_bs47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.626621276998092,r[:number])
end

def test_costpercapita_bt47
  r = spreadsheet.costpercapita_bt47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.880051898850994,r[:number])
end

def test_costpercapita_bu47
  r = spreadsheet.costpercapita_bu47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.10680503897879,r[:number])
end

def test_costpercapita_bv47
  r = spreadsheet.costpercapita_bv47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.909077453397135,r[:number])
end

def test_costpercapita_bw47
  r = spreadsheet.costpercapita_bw47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.14992669129299,r[:number])
end

def test_costpercapita_bx47
  r = spreadsheet.costpercapita_bx47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.432154994553024,r[:number])
end

def test_costpercapita_by47
  r = spreadsheet.costpercapita_by47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.1905966572314,r[:number])
end

def test_costpercapita_bz47
  r = spreadsheet.costpercapita_bz47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.279793406448423,r[:number])
end

def test_costpercapita_ca47
  r = spreadsheet.costpercapita_ca47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.966133600508417,r[:number])
end

def test_costpercapita_cc47
  r = spreadsheet.costpercapita_cc47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.171240113139916,r[:number])
end

def test_costpercapita_cd47
  r = spreadsheet.costpercapita_cd47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464.4935483451226,r[:number])
end

def test_costpercapita_cf47
  r = spreadsheet.costpercapita_cf47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.726351268275916,r[:number])
end

def test_costpercapita_cg47
  r = spreadsheet.costpercapita_cg47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch47
  r = spreadsheet.costpercapita_ch47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci47
  r = spreadsheet.costpercapita_ci47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj47
  r = spreadsheet.costpercapita_cj47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck47
  r = spreadsheet.costpercapita_ck47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl47
  r = spreadsheet.costpercapita_cl47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm47
  r = spreadsheet.costpercapita_cm47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn47
  r = spreadsheet.costpercapita_cn47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp47
  r = spreadsheet.costpercapita_cp47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.6362612520306574,r[:number])
end

def test_costpercapita_cq47
  r = spreadsheet.costpercapita_cq47
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.726351268275916,r[:number])
end

def test_costpercapita_cr47
  r = spreadsheet.costpercapita_cr47
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a48
  r = spreadsheet.costpercapita_a48
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b48
  r = spreadsheet.costpercapita_b48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c48
  r = spreadsheet.costpercapita_c48
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e48
  r = spreadsheet.costpercapita_e48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f48
  r = spreadsheet.costpercapita_f48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g48
  r = spreadsheet.costpercapita_g48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h48
  r = spreadsheet.costpercapita_h48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i48
  r = spreadsheet.costpercapita_i48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j48
  r = spreadsheet.costpercapita_j48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k48
  r = spreadsheet.costpercapita_k48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l48
  r = spreadsheet.costpercapita_l48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m48
  r = spreadsheet.costpercapita_m48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o48
  r = spreadsheet.costpercapita_o48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p48
  r = spreadsheet.costpercapita_p48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q48
  r = spreadsheet.costpercapita_q48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r48
  r = spreadsheet.costpercapita_r48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s48
  r = spreadsheet.costpercapita_s48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t48
  r = spreadsheet.costpercapita_t48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u48
  r = spreadsheet.costpercapita_u48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v48
  r = spreadsheet.costpercapita_v48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w48
  r = spreadsheet.costpercapita_w48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y48
  r = spreadsheet.costpercapita_y48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_z48
  r = spreadsheet.costpercapita_z48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.806752174871015,r[:number])
end

def test_costpercapita_aa48
  r = spreadsheet.costpercapita_aa48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.789942621031074,r[:number])
end

def test_costpercapita_ab48
  r = spreadsheet.costpercapita_ab48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.175197926518802,r[:number])
end

def test_costpercapita_ac48
  r = spreadsheet.costpercapita_ac48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4567797724551492,r[:number])
end

def test_costpercapita_ad48
  r = spreadsheet.costpercapita_ad48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8319884144507597,r[:number])
end

def test_costpercapita_ae48
  r = spreadsheet.costpercapita_ae48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.145486101656619,r[:number])
end

def test_costpercapita_af48
  r = spreadsheet.costpercapita_af48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4641752879422354,r[:number])
end

def test_costpercapita_ag48
  r = spreadsheet.costpercapita_ag48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8314717569526837,r[:number])
end

def test_costpercapita_ai48
  r = spreadsheet.costpercapita_ai48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_aj48
  r = spreadsheet.costpercapita_aj48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.806752174871015,r[:number])
end

def test_costpercapita_ak48
  r = spreadsheet.costpercapita_ak48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.789942621031074,r[:number])
end

def test_costpercapita_al48
  r = spreadsheet.costpercapita_al48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.175197926518802,r[:number])
end

def test_costpercapita_am48
  r = spreadsheet.costpercapita_am48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4567797724551492,r[:number])
end

def test_costpercapita_an48
  r = spreadsheet.costpercapita_an48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8319884144507597,r[:number])
end

def test_costpercapita_ao48
  r = spreadsheet.costpercapita_ao48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.145486101656619,r[:number])
end

def test_costpercapita_ap48
  r = spreadsheet.costpercapita_ap48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4641752879422354,r[:number])
end

def test_costpercapita_aq48
  r = spreadsheet.costpercapita_aq48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8314717569526837,r[:number])
end

def test_costpercapita_as48
  r = spreadsheet.costpercapita_as48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.976332999954979,r[:number])
end

def test_costpercapita_at48
  r = spreadsheet.costpercapita_at48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(328.67500366430744,r[:number])
end

def test_costpercapita_av48
  r = spreadsheet.costpercapita_av48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw48
  r = spreadsheet.costpercapita_aw48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay48
  r = spreadsheet.costpercapita_ay48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az48
  r = spreadsheet.costpercapita_az48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba48
  r = spreadsheet.costpercapita_ba48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb48
  r = spreadsheet.costpercapita_bb48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc48
  r = spreadsheet.costpercapita_bc48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd48
  r = spreadsheet.costpercapita_bd48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be48
  r = spreadsheet.costpercapita_be48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf48
  r = spreadsheet.costpercapita_bf48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg48
  r = spreadsheet.costpercapita_bg48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi48
  r = spreadsheet.costpercapita_bi48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj48
  r = spreadsheet.costpercapita_bj48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk48
  r = spreadsheet.costpercapita_bk48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl48
  r = spreadsheet.costpercapita_bl48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm48
  r = spreadsheet.costpercapita_bm48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn48
  r = spreadsheet.costpercapita_bn48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo48
  r = spreadsheet.costpercapita_bo48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp48
  r = spreadsheet.costpercapita_bp48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq48
  r = spreadsheet.costpercapita_bq48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs48
  r = spreadsheet.costpercapita_bs48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_bt48
  r = spreadsheet.costpercapita_bt48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.806752174871015,r[:number])
end

def test_costpercapita_bu48
  r = spreadsheet.costpercapita_bu48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.789942621031074,r[:number])
end

def test_costpercapita_bv48
  r = spreadsheet.costpercapita_bv48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.175197926518802,r[:number])
end

def test_costpercapita_bw48
  r = spreadsheet.costpercapita_bw48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4567797724551492,r[:number])
end

def test_costpercapita_bx48
  r = spreadsheet.costpercapita_bx48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8319884144507597,r[:number])
end

def test_costpercapita_by48
  r = spreadsheet.costpercapita_by48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.145486101656619,r[:number])
end

def test_costpercapita_bz48
  r = spreadsheet.costpercapita_bz48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4641752879422354,r[:number])
end

def test_costpercapita_ca48
  r = spreadsheet.costpercapita_ca48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8314717569526837,r[:number])
end

def test_costpercapita_cc48
  r = spreadsheet.costpercapita_cc48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.976332999954979,r[:number])
end

def test_costpercapita_cd48
  r = spreadsheet.costpercapita_cd48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(328.67500366430744,r[:number])
end

def test_costpercapita_cf48
  r = spreadsheet.costpercapita_cf48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg48
  r = spreadsheet.costpercapita_cg48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch48
  r = spreadsheet.costpercapita_ch48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci48
  r = spreadsheet.costpercapita_ci48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj48
  r = spreadsheet.costpercapita_cj48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck48
  r = spreadsheet.costpercapita_ck48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl48
  r = spreadsheet.costpercapita_cl48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm48
  r = spreadsheet.costpercapita_cm48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn48
  r = spreadsheet.costpercapita_cn48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp48
  r = spreadsheet.costpercapita_cp48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq48
  r = spreadsheet.costpercapita_cq48
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr48
  r = spreadsheet.costpercapita_cr48
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a49
  r = spreadsheet.costpercapita_a49
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b49
  r = spreadsheet.costpercapita_b49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c49
  r = spreadsheet.costpercapita_c49
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e49
  r = spreadsheet.costpercapita_e49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f49
  r = spreadsheet.costpercapita_f49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g49
  r = spreadsheet.costpercapita_g49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h49
  r = spreadsheet.costpercapita_h49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i49
  r = spreadsheet.costpercapita_i49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j49
  r = spreadsheet.costpercapita_j49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k49
  r = spreadsheet.costpercapita_k49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l49
  r = spreadsheet.costpercapita_l49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m49
  r = spreadsheet.costpercapita_m49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o49
  r = spreadsheet.costpercapita_o49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p49
  r = spreadsheet.costpercapita_p49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q49
  r = spreadsheet.costpercapita_q49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r49
  r = spreadsheet.costpercapita_r49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s49
  r = spreadsheet.costpercapita_s49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t49
  r = spreadsheet.costpercapita_t49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u49
  r = spreadsheet.costpercapita_u49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v49
  r = spreadsheet.costpercapita_v49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w49
  r = spreadsheet.costpercapita_w49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y49
  r = spreadsheet.costpercapita_y49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_z49
  r = spreadsheet.costpercapita_z49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.22868283828595,r[:number])
end

def test_costpercapita_aa49
  r = spreadsheet.costpercapita_aa49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.85330049390853,r[:number])
end

def test_costpercapita_ab49
  r = spreadsheet.costpercapita_ab49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.29339563133786,r[:number])
end

def test_costpercapita_ac49
  r = spreadsheet.costpercapita_ac49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.4347503539412,r[:number])
end

def test_costpercapita_ad49
  r = spreadsheet.costpercapita_ad49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246.11473284361242,r[:number])
end

def test_costpercapita_ae49
  r = spreadsheet.costpercapita_ae49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.72809658636646,r[:number])
end

def test_costpercapita_af49
  r = spreadsheet.costpercapita_af49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(281.64130369963175,r[:number])
end

def test_costpercapita_ag49
  r = spreadsheet.costpercapita_ag49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.9612828110369,r[:number])
end

def test_costpercapita_ai49
  r = spreadsheet.costpercapita_ai49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_aj49
  r = spreadsheet.costpercapita_aj49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.22868283828595,r[:number])
end

def test_costpercapita_ak49
  r = spreadsheet.costpercapita_ak49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.85330049390853,r[:number])
end

def test_costpercapita_al49
  r = spreadsheet.costpercapita_al49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.29339563133786,r[:number])
end

def test_costpercapita_am49
  r = spreadsheet.costpercapita_am49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.4347503539412,r[:number])
end

def test_costpercapita_an49
  r = spreadsheet.costpercapita_an49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246.11473284361242,r[:number])
end

def test_costpercapita_ao49
  r = spreadsheet.costpercapita_ao49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.72809658636646,r[:number])
end

def test_costpercapita_ap49
  r = spreadsheet.costpercapita_ap49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(281.64130369963175,r[:number])
end

def test_costpercapita_aq49
  r = spreadsheet.costpercapita_aq49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.9612828110369,r[:number])
end

def test_costpercapita_as49
  r = spreadsheet.costpercapita_as49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199.40237608533428,r[:number])
end

def test_costpercapita_at49
  r = spreadsheet.costpercapita_at49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3977.7783542401207,r[:number])
end

def test_costpercapita_av49
  r = spreadsheet.costpercapita_av49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw49
  r = spreadsheet.costpercapita_aw49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay49
  r = spreadsheet.costpercapita_ay49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az49
  r = spreadsheet.costpercapita_az49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba49
  r = spreadsheet.costpercapita_ba49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb49
  r = spreadsheet.costpercapita_bb49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc49
  r = spreadsheet.costpercapita_bc49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd49
  r = spreadsheet.costpercapita_bd49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be49
  r = spreadsheet.costpercapita_be49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf49
  r = spreadsheet.costpercapita_bf49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg49
  r = spreadsheet.costpercapita_bg49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi49
  r = spreadsheet.costpercapita_bi49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj49
  r = spreadsheet.costpercapita_bj49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk49
  r = spreadsheet.costpercapita_bk49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl49
  r = spreadsheet.costpercapita_bl49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm49
  r = spreadsheet.costpercapita_bm49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn49
  r = spreadsheet.costpercapita_bn49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo49
  r = spreadsheet.costpercapita_bo49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp49
  r = spreadsheet.costpercapita_bp49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq49
  r = spreadsheet.costpercapita_bq49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs49
  r = spreadsheet.costpercapita_bs49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_bt49
  r = spreadsheet.costpercapita_bt49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.22868283828595,r[:number])
end

def test_costpercapita_bu49
  r = spreadsheet.costpercapita_bu49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.85330049390853,r[:number])
end

def test_costpercapita_bv49
  r = spreadsheet.costpercapita_bv49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.29339563133786,r[:number])
end

def test_costpercapita_bw49
  r = spreadsheet.costpercapita_bw49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.4347503539412,r[:number])
end

def test_costpercapita_bx49
  r = spreadsheet.costpercapita_bx49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246.11473284361242,r[:number])
end

def test_costpercapita_by49
  r = spreadsheet.costpercapita_by49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.72809658636646,r[:number])
end

def test_costpercapita_bz49
  r = spreadsheet.costpercapita_bz49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(281.64130369963175,r[:number])
end

def test_costpercapita_ca49
  r = spreadsheet.costpercapita_ca49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(290.9612828110369,r[:number])
end

def test_costpercapita_cc49
  r = spreadsheet.costpercapita_cc49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(199.40237608533428,r[:number])
end

def test_costpercapita_cd49
  r = spreadsheet.costpercapita_cd49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3977.7783542401207,r[:number])
end

def test_costpercapita_cf49
  r = spreadsheet.costpercapita_cf49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg49
  r = spreadsheet.costpercapita_cg49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch49
  r = spreadsheet.costpercapita_ch49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci49
  r = spreadsheet.costpercapita_ci49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj49
  r = spreadsheet.costpercapita_cj49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck49
  r = spreadsheet.costpercapita_ck49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl49
  r = spreadsheet.costpercapita_cl49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm49
  r = spreadsheet.costpercapita_cm49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn49
  r = spreadsheet.costpercapita_cn49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp49
  r = spreadsheet.costpercapita_cp49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq49
  r = spreadsheet.costpercapita_cq49
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr49
  r = spreadsheet.costpercapita_cr49
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a50
  r = spreadsheet.costpercapita_a50
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b50
  r = spreadsheet.costpercapita_b50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c50
  r = spreadsheet.costpercapita_c50
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e50
  r = spreadsheet.costpercapita_e50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f50
  r = spreadsheet.costpercapita_f50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g50
  r = spreadsheet.costpercapita_g50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h50
  r = spreadsheet.costpercapita_h50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i50
  r = spreadsheet.costpercapita_i50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j50
  r = spreadsheet.costpercapita_j50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k50
  r = spreadsheet.costpercapita_k50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l50
  r = spreadsheet.costpercapita_l50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m50
  r = spreadsheet.costpercapita_m50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o50
  r = spreadsheet.costpercapita_o50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p50
  r = spreadsheet.costpercapita_p50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q50
  r = spreadsheet.costpercapita_q50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r50
  r = spreadsheet.costpercapita_r50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s50
  r = spreadsheet.costpercapita_s50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t50
  r = spreadsheet.costpercapita_t50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u50
  r = spreadsheet.costpercapita_u50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v50
  r = spreadsheet.costpercapita_v50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w50
  r = spreadsheet.costpercapita_w50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y50
  r = spreadsheet.costpercapita_y50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_z50
  r = spreadsheet.costpercapita_z50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.1119206996099,r[:number])
end

def test_costpercapita_aa50
  r = spreadsheet.costpercapita_aa50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.62821590992309,r[:number])
end

def test_costpercapita_ab50
  r = spreadsheet.costpercapita_ab50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.97187057344536,r[:number])
end

def test_costpercapita_ac50
  r = spreadsheet.costpercapita_ac50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.26270270875665,r[:number])
end

def test_costpercapita_ad50
  r = spreadsheet.costpercapita_ad50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(319.8793028788886,r[:number])
end

def test_costpercapita_ae50
  r = spreadsheet.costpercapita_ae50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(347.94473582346046,r[:number])
end

def test_costpercapita_af50
  r = spreadsheet.costpercapita_af50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(374.3882965686608,r[:number])
end

def test_costpercapita_ag50
  r = spreadsheet.costpercapita_ag50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(394.92886987488873,r[:number])
end

def test_costpercapita_ai50
  r = spreadsheet.costpercapita_ai50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_aj50
  r = spreadsheet.costpercapita_aj50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.1119206996099,r[:number])
end

def test_costpercapita_ak50
  r = spreadsheet.costpercapita_ak50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.62821590992309,r[:number])
end

def test_costpercapita_al50
  r = spreadsheet.costpercapita_al50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.97187057344536,r[:number])
end

def test_costpercapita_am50
  r = spreadsheet.costpercapita_am50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.26270270875665,r[:number])
end

def test_costpercapita_an50
  r = spreadsheet.costpercapita_an50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(319.8793028788886,r[:number])
end

def test_costpercapita_ao50
  r = spreadsheet.costpercapita_ao50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(347.94473582346046,r[:number])
end

def test_costpercapita_ap50
  r = spreadsheet.costpercapita_ap50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(374.3882965686608,r[:number])
end

def test_costpercapita_aq50
  r = spreadsheet.costpercapita_aq50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(394.92886987488873,r[:number])
end

def test_costpercapita_as50
  r = spreadsheet.costpercapita_as50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.7146317962298,r[:number])
end

def test_costpercapita_at50
  r = spreadsheet.costpercapita_at50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5101.442850988718,r[:number])
end

def test_costpercapita_av50
  r = spreadsheet.costpercapita_av50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw50
  r = spreadsheet.costpercapita_aw50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay50
  r = spreadsheet.costpercapita_ay50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az50
  r = spreadsheet.costpercapita_az50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba50
  r = spreadsheet.costpercapita_ba50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb50
  r = spreadsheet.costpercapita_bb50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc50
  r = spreadsheet.costpercapita_bc50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd50
  r = spreadsheet.costpercapita_bd50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be50
  r = spreadsheet.costpercapita_be50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf50
  r = spreadsheet.costpercapita_bf50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg50
  r = spreadsheet.costpercapita_bg50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi50
  r = spreadsheet.costpercapita_bi50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj50
  r = spreadsheet.costpercapita_bj50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk50
  r = spreadsheet.costpercapita_bk50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl50
  r = spreadsheet.costpercapita_bl50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm50
  r = spreadsheet.costpercapita_bm50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn50
  r = spreadsheet.costpercapita_bn50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo50
  r = spreadsheet.costpercapita_bo50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp50
  r = spreadsheet.costpercapita_bp50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq50
  r = spreadsheet.costpercapita_bq50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs50
  r = spreadsheet.costpercapita_bs50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_bt50
  r = spreadsheet.costpercapita_bt50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.1119206996099,r[:number])
end

def test_costpercapita_bu50
  r = spreadsheet.costpercapita_bu50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.62821590992309,r[:number])
end

def test_costpercapita_bv50
  r = spreadsheet.costpercapita_bv50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.97187057344536,r[:number])
end

def test_costpercapita_bw50
  r = spreadsheet.costpercapita_bw50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.26270270875665,r[:number])
end

def test_costpercapita_bx50
  r = spreadsheet.costpercapita_bx50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(319.8793028788886,r[:number])
end

def test_costpercapita_by50
  r = spreadsheet.costpercapita_by50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(347.94473582346046,r[:number])
end

def test_costpercapita_bz50
  r = spreadsheet.costpercapita_bz50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(374.3882965686608,r[:number])
end

def test_costpercapita_ca50
  r = spreadsheet.costpercapita_ca50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(394.92886987488873,r[:number])
end

def test_costpercapita_cc50
  r = spreadsheet.costpercapita_cc50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.7146317962298,r[:number])
end

def test_costpercapita_cd50
  r = spreadsheet.costpercapita_cd50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5101.442850988718,r[:number])
end

def test_costpercapita_cf50
  r = spreadsheet.costpercapita_cf50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg50
  r = spreadsheet.costpercapita_cg50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch50
  r = spreadsheet.costpercapita_ch50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci50
  r = spreadsheet.costpercapita_ci50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj50
  r = spreadsheet.costpercapita_cj50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck50
  r = spreadsheet.costpercapita_ck50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl50
  r = spreadsheet.costpercapita_cl50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm50
  r = spreadsheet.costpercapita_cm50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn50
  r = spreadsheet.costpercapita_cn50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp50
  r = spreadsheet.costpercapita_cp50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq50
  r = spreadsheet.costpercapita_cq50
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr50
  r = spreadsheet.costpercapita_cr50
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a51
  r = spreadsheet.costpercapita_a51
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b51
  r = spreadsheet.costpercapita_b51
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c51
  r = spreadsheet.costpercapita_c51
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e51
  r = spreadsheet.costpercapita_e51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5253715046833248,r[:number])
end

def test_costpercapita_f51
  r = spreadsheet.costpercapita_f51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3504949107810618,r[:number])
end

def test_costpercapita_g51
  r = spreadsheet.costpercapita_g51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.358213572628712,r[:number])
end

def test_costpercapita_h51
  r = spreadsheet.costpercapita_h51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.40898521002714755,r[:number])
end

def test_costpercapita_i51
  r = spreadsheet.costpercapita_i51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4338321901096749,r[:number])
end

def test_costpercapita_j51
  r = spreadsheet.costpercapita_j51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46253289372533507,r[:number])
end

def test_costpercapita_k51
  r = spreadsheet.costpercapita_k51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4948642184051349,r[:number])
end

def test_costpercapita_l51
  r = spreadsheet.costpercapita_l51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5308440147768441,r[:number])
end

def test_costpercapita_m51
  r = spreadsheet.costpercapita_m51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.570862139961467,r[:number])
end

def test_costpercapita_o51
  r = spreadsheet.costpercapita_o51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0839400630931334,r[:number])
end

def test_costpercapita_p51
  r = spreadsheet.costpercapita_p51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08516819028880335,r[:number])
end

def test_costpercapita_q51
  r = spreadsheet.costpercapita_q51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08656062968294506,r[:number])
end

def test_costpercapita_r51
  r = spreadsheet.costpercapita_r51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09034960367740669,r[:number])
end

def test_costpercapita_s51
  r = spreadsheet.costpercapita_s51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09492597506610154,r[:number])
end

def test_costpercapita_t51
  r = spreadsheet.costpercapita_t51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10036825107993824,r[:number])
end

def test_costpercapita_u51
  r = spreadsheet.costpercapita_u51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10659967674460265,r[:number])
end

def test_costpercapita_v51
  r = spreadsheet.costpercapita_v51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11360322936292902,r[:number])
end

def test_costpercapita_w51
  r = spreadsheet.costpercapita_w51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12144577031105082,r[:number])
end

def test_costpercapita_y51
  r = spreadsheet.costpercapita_y51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z51
  r = spreadsheet.costpercapita_z51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa51
  r = spreadsheet.costpercapita_aa51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab51
  r = spreadsheet.costpercapita_ab51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac51
  r = spreadsheet.costpercapita_ac51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad51
  r = spreadsheet.costpercapita_ad51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae51
  r = spreadsheet.costpercapita_ae51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af51
  r = spreadsheet.costpercapita_af51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag51
  r = spreadsheet.costpercapita_ag51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai51
  r = spreadsheet.costpercapita_ai51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6093115677764582,r[:number])
end

def test_costpercapita_aj51
  r = spreadsheet.costpercapita_aj51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4356631010698651,r[:number])
end

def test_costpercapita_ak51
  r = spreadsheet.costpercapita_ak51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.44477420231165704,r[:number])
end

def test_costpercapita_al51
  r = spreadsheet.costpercapita_al51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4993348137045543,r[:number])
end

def test_costpercapita_am51
  r = spreadsheet.costpercapita_am51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5287581651757763,r[:number])
end

def test_costpercapita_an51
  r = spreadsheet.costpercapita_an51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5629011448052733,r[:number])
end

def test_costpercapita_ao51
  r = spreadsheet.costpercapita_ao51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6014638951497375,r[:number])
end

def test_costpercapita_ap51
  r = spreadsheet.costpercapita_ap51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6444472441397732,r[:number])
end

def test_costpercapita_aq51
  r = spreadsheet.costpercapita_aq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6923079102725178,r[:number])
end

def test_costpercapita_as51
  r = spreadsheet.costpercapita_as51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5576624493784013,r[:number])
end

def test_costpercapita_at51
  r = spreadsheet.costpercapita_at51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.009208121149028,r[:number])
end

def test_costpercapita_av51
  r = spreadsheet.costpercapita_av51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw51
  r = spreadsheet.costpercapita_aw51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay51
  r = spreadsheet.costpercapita_ay51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.31522290280999493,r[:number])
end

def test_costpercapita_az51
  r = spreadsheet.costpercapita_az51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3504949107810618,r[:number])
end

def test_costpercapita_ba51
  r = spreadsheet.costpercapita_ba51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.358213572628712,r[:number])
end

def test_costpercapita_bb51
  r = spreadsheet.costpercapita_bb51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.40898521002714755,r[:number])
end

def test_costpercapita_bc51
  r = spreadsheet.costpercapita_bc51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4338321901096749,r[:number])
end

def test_costpercapita_bd51
  r = spreadsheet.costpercapita_bd51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46253289372533507,r[:number])
end

def test_costpercapita_be51
  r = spreadsheet.costpercapita_be51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4948642184051349,r[:number])
end

def test_costpercapita_bf51
  r = spreadsheet.costpercapita_bf51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5308440147768441,r[:number])
end

def test_costpercapita_bg51
  r = spreadsheet.costpercapita_bg51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.570862139961467,r[:number])
end

def test_costpercapita_bi51
  r = spreadsheet.costpercapita_bi51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.31522290280999493,r[:number])
end

def test_costpercapita_bj51
  r = spreadsheet.costpercapita_bj51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3504949107810618,r[:number])
end

def test_costpercapita_bk51
  r = spreadsheet.costpercapita_bk51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.358213572628712,r[:number])
end

def test_costpercapita_bl51
  r = spreadsheet.costpercapita_bl51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.40898521002714755,r[:number])
end

def test_costpercapita_bm51
  r = spreadsheet.costpercapita_bm51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4338321901096749,r[:number])
end

def test_costpercapita_bn51
  r = spreadsheet.costpercapita_bn51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46253289372533507,r[:number])
end

def test_costpercapita_bo51
  r = spreadsheet.costpercapita_bo51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4948642184051349,r[:number])
end

def test_costpercapita_bp51
  r = spreadsheet.costpercapita_bp51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5308440147768441,r[:number])
end

def test_costpercapita_bq51
  r = spreadsheet.costpercapita_bq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.570862139961467,r[:number])
end

def test_costpercapita_bs51
  r = spreadsheet.costpercapita_bs51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39916296590312833,r[:number])
end

def test_costpercapita_bt51
  r = spreadsheet.costpercapita_bt51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4356631010698651,r[:number])
end

def test_costpercapita_bu51
  r = spreadsheet.costpercapita_bu51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.44477420231165704,r[:number])
end

def test_costpercapita_bv51
  r = spreadsheet.costpercapita_bv51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4993348137045543,r[:number])
end

def test_costpercapita_bw51
  r = spreadsheet.costpercapita_bw51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5287581651757763,r[:number])
end

def test_costpercapita_bx51
  r = spreadsheet.costpercapita_bx51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5629011448052733,r[:number])
end

def test_costpercapita_by51
  r = spreadsheet.costpercapita_by51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6014638951497375,r[:number])
end

def test_costpercapita_bz51
  r = spreadsheet.costpercapita_bz51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6444472441397732,r[:number])
end

def test_costpercapita_ca51
  r = spreadsheet.costpercapita_ca51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6923079102725178,r[:number])
end

def test_costpercapita_cc51
  r = spreadsheet.costpercapita_cc51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5343126047258091,r[:number])
end

def test_costpercapita_cd51
  r = spreadsheet.costpercapita_cd51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.799059519275698,r[:number])
end

def test_costpercapita_cf51
  r = spreadsheet.costpercapita_cf51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.2101486018733299,r[:number])
end

def test_costpercapita_cg51
  r = spreadsheet.costpercapita_cg51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch51
  r = spreadsheet.costpercapita_ch51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci51
  r = spreadsheet.costpercapita_ci51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj51
  r = spreadsheet.costpercapita_cj51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck51
  r = spreadsheet.costpercapita_ck51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl51
  r = spreadsheet.costpercapita_cl51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm51
  r = spreadsheet.costpercapita_cm51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn51
  r = spreadsheet.costpercapita_cn51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp51
  r = spreadsheet.costpercapita_cp51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.02334984465259221,r[:number])
end

def test_costpercapita_cq51
  r = spreadsheet.costpercapita_cq51
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.2101486018733299,r[:number])
end

def test_costpercapita_cr51
  r = spreadsheet.costpercapita_cr51
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a52
  r = spreadsheet.costpercapita_a52
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b52
  r = spreadsheet.costpercapita_b52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage of captured CO2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c52
  r = spreadsheet.costpercapita_c52
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e52
  r = spreadsheet.costpercapita_e52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f52
  r = spreadsheet.costpercapita_f52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number])
end

def test_costpercapita_g52
  r = spreadsheet.costpercapita_g52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063097,r[:number])
end

def test_costpercapita_h52
  r = spreadsheet.costpercapita_h52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number])
end

def test_costpercapita_i52
  r = spreadsheet.costpercapita_i52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number])
end

def test_costpercapita_j52
  r = spreadsheet.costpercapita_j52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number])
end

def test_costpercapita_k52
  r = spreadsheet.costpercapita_k52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number])
end

def test_costpercapita_l52
  r = spreadsheet.costpercapita_l52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number])
end

def test_costpercapita_m52
  r = spreadsheet.costpercapita_m52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number])
end

def test_costpercapita_o52
  r = spreadsheet.costpercapita_o52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p52
  r = spreadsheet.costpercapita_p52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04679482364530887,r[:number])
end

def test_costpercapita_q52
  r = spreadsheet.costpercapita_q52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10662591036335284,r[:number])
end

def test_costpercapita_r52
  r = spreadsheet.costpercapita_r52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10115207521230941,r[:number])
end

def test_costpercapita_s52
  r = spreadsheet.costpercapita_s52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09636321557658548,r[:number])
end

def test_costpercapita_t52
  r = spreadsheet.costpercapita_t52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09219595763383641,r[:number])
end

def test_costpercapita_u52
  r = spreadsheet.costpercapita_u52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09002532183418638,r[:number])
end

def test_costpercapita_v52
  r = spreadsheet.costpercapita_v52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08648831671431914,r[:number])
end

def test_costpercapita_w52
  r = spreadsheet.costpercapita_w52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08323219105211166,r[:number])
end

def test_costpercapita_y52
  r = spreadsheet.costpercapita_y52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z52
  r = spreadsheet.costpercapita_z52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa52
  r = spreadsheet.costpercapita_aa52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab52
  r = spreadsheet.costpercapita_ab52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac52
  r = spreadsheet.costpercapita_ac52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad52
  r = spreadsheet.costpercapita_ad52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae52
  r = spreadsheet.costpercapita_ae52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af52
  r = spreadsheet.costpercapita_af52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag52
  r = spreadsheet.costpercapita_ag52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai52
  r = spreadsheet.costpercapita_ai52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj52
  r = spreadsheet.costpercapita_aj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number])
end

def test_costpercapita_ak52
  r = spreadsheet.costpercapita_ak52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.487447458469662,r[:number])
end

def test_costpercapita_al52
  r = spreadsheet.costpercapita_al52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number])
end

def test_costpercapita_am52
  r = spreadsheet.costpercapita_am52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number])
end

def test_costpercapita_an52
  r = spreadsheet.costpercapita_an52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number])
end

def test_costpercapita_ao52
  r = spreadsheet.costpercapita_ao52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number])
end

def test_costpercapita_ap52
  r = spreadsheet.costpercapita_ap52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.828800797900048,r[:number])
end

def test_costpercapita_aq52
  r = spreadsheet.costpercapita_aq52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number])
end

def test_costpercapita_as52
  r = spreadsheet.costpercapita_as52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number])
end

def test_costpercapita_at52
  r = spreadsheet.costpercapita_at52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number])
end

def test_costpercapita_av52
  r = spreadsheet.costpercapita_av52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw52
  r = spreadsheet.costpercapita_aw52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay52
  r = spreadsheet.costpercapita_ay52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az52
  r = spreadsheet.costpercapita_az52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number])
end

def test_costpercapita_ba52
  r = spreadsheet.costpercapita_ba52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.38082154810631,r[:number])
end

def test_costpercapita_bb52
  r = spreadsheet.costpercapita_bb52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number])
end

def test_costpercapita_bc52
  r = spreadsheet.costpercapita_bc52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number])
end

def test_costpercapita_bd52
  r = spreadsheet.costpercapita_bd52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number])
end

def test_costpercapita_be52
  r = spreadsheet.costpercapita_be52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number])
end

def test_costpercapita_bf52
  r = spreadsheet.costpercapita_bf52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number])
end

def test_costpercapita_bg52
  r = spreadsheet.costpercapita_bg52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number])
end

def test_costpercapita_bi52
  r = spreadsheet.costpercapita_bi52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj52
  r = spreadsheet.costpercapita_bj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number])
end

def test_costpercapita_bk52
  r = spreadsheet.costpercapita_bk52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.38082154810631,r[:number])
end

def test_costpercapita_bl52
  r = spreadsheet.costpercapita_bl52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number])
end

def test_costpercapita_bm52
  r = spreadsheet.costpercapita_bm52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number])
end

def test_costpercapita_bn52
  r = spreadsheet.costpercapita_bn52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number])
end

def test_costpercapita_bo52
  r = spreadsheet.costpercapita_bo52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number])
end

def test_costpercapita_bp52
  r = spreadsheet.costpercapita_bp52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number])
end

def test_costpercapita_bq52
  r = spreadsheet.costpercapita_bq52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number])
end

def test_costpercapita_bs52
  r = spreadsheet.costpercapita_bs52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt52
  r = spreadsheet.costpercapita_bt52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number])
end

def test_costpercapita_bu52
  r = spreadsheet.costpercapita_bu52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.487447458469663,r[:number])
end

def test_costpercapita_bv52
  r = spreadsheet.costpercapita_bv52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number])
end

def test_costpercapita_bw52
  r = spreadsheet.costpercapita_bw52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number])
end

def test_costpercapita_bx52
  r = spreadsheet.costpercapita_bx52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number])
end

def test_costpercapita_by52
  r = spreadsheet.costpercapita_by52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number])
end

def test_costpercapita_bz52
  r = spreadsheet.costpercapita_bz52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8288007979000485,r[:number])
end

def test_costpercapita_ca52
  r = spreadsheet.costpercapita_ca52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number])
end

def test_costpercapita_cc52
  r = spreadsheet.costpercapita_cc52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number])
end

def test_costpercapita_cd52
  r = spreadsheet.costpercapita_cd52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number])
end

def test_costpercapita_cf52
  r = spreadsheet.costpercapita_cf52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg52
  r = spreadsheet.costpercapita_cg52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch52
  r = spreadsheet.costpercapita_ch52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci52
  r = spreadsheet.costpercapita_ci52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj52
  r = spreadsheet.costpercapita_cj52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck52
  r = spreadsheet.costpercapita_ck52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl52
  r = spreadsheet.costpercapita_cl52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm52
  r = spreadsheet.costpercapita_cm52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn52
  r = spreadsheet.costpercapita_cn52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp52
  r = spreadsheet.costpercapita_cp52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq52
  r = spreadsheet.costpercapita_cq52
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr52
  r = spreadsheet.costpercapita_cr52
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a53
  r = spreadsheet.costpercapita_a53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b53
  r = spreadsheet.costpercapita_b53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c53
  r = spreadsheet.costpercapita_c53
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e53
  r = spreadsheet.costpercapita_e53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1289.0192122108263,r[:number])
end

def test_costpercapita_f53
  r = spreadsheet.costpercapita_f53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.522547749294,r[:number])
end

def test_costpercapita_g53
  r = spreadsheet.costpercapita_g53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5412789085985,r[:number])
end

def test_costpercapita_h53
  r = spreadsheet.costpercapita_h53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.6552271942226,r[:number])
end

def test_costpercapita_i53
  r = spreadsheet.costpercapita_i53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.6493453745625,r[:number])
end

def test_costpercapita_j53
  r = spreadsheet.costpercapita_j53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1388.7743958360304,r[:number])
end

def test_costpercapita_k53
  r = spreadsheet.costpercapita_k53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1386.8528197663031,r[:number])
end

def test_costpercapita_l53
  r = spreadsheet.costpercapita_l53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.0046438025076,r[:number])
end

def test_costpercapita_m53
  r = spreadsheet.costpercapita_m53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1401.064982057998,r[:number])
end

def test_costpercapita_o53
  r = spreadsheet.costpercapita_o53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1364.4098972030306,r[:number])
end

def test_costpercapita_p53
  r = spreadsheet.costpercapita_p53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1253.6151748253565,r[:number])
end

def test_costpercapita_q53
  r = spreadsheet.costpercapita_q53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1169.3775048489142,r[:number])
end

def test_costpercapita_r53
  r = spreadsheet.costpercapita_r53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1095.1835228353489,r[:number])
end

def test_costpercapita_s53
  r = spreadsheet.costpercapita_s53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1008.2494849251838,r[:number])
end

def test_costpercapita_t53
  r = spreadsheet.costpercapita_t53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(915.8244724300774,r[:number])
end

def test_costpercapita_u53
  r = spreadsheet.costpercapita_u53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(812.379811264823,r[:number])
end

def test_costpercapita_v53
  r = spreadsheet.costpercapita_v53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(701.5053065161292,r[:number])
end

def test_costpercapita_w53
  r = spreadsheet.costpercapita_w53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.3770787985842,r[:number])
end

def test_costpercapita_y53
  r = spreadsheet.costpercapita_y53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(764.697345685774,r[:number])
end

def test_costpercapita_z53
  r = spreadsheet.costpercapita_z53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(729.7915693483822,r[:number])
end

def test_costpercapita_aa53
  r = spreadsheet.costpercapita_aa53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.9331924000388,r[:number])
end

def test_costpercapita_ab53
  r = spreadsheet.costpercapita_ab53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(698.5280894037122,r[:number])
end

def test_costpercapita_ac53
  r = spreadsheet.costpercapita_ac53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(691.5594914943351,r[:number])
end

def test_costpercapita_ad53
  r = spreadsheet.costpercapita_ad53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.2951600381174,r[:number])
end

def test_costpercapita_ae53
  r = spreadsheet.costpercapita_ae53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(726.3453662417204,r[:number])
end

def test_costpercapita_af53
  r = spreadsheet.costpercapita_af53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(744.1736198201966,r[:number])
end

def test_costpercapita_ag53
  r = spreadsheet.costpercapita_ag53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(755.6291824721422,r[:number])
end

def test_costpercapita_ai53
  r = spreadsheet.costpercapita_ai53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3418.1264550996307,r[:number])
end

def test_costpercapita_aj53
  r = spreadsheet.costpercapita_aj53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3255.929291923033,r[:number])
end

def test_costpercapita_ak53
  r = spreadsheet.costpercapita_ak53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.851976157551,r[:number])
end

def test_costpercapita_al53
  r = spreadsheet.costpercapita_al53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3166.3668394332844,r[:number])
end

def test_costpercapita_am53
  r = spreadsheet.costpercapita_am53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3067.458321794082,r[:number])
end

def test_costpercapita_an53
  r = spreadsheet.costpercapita_an53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3015.8940283042257,r[:number])
end

def test_costpercapita_ao53
  r = spreadsheet.costpercapita_ao53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.577997272847,r[:number])
end

def test_costpercapita_ap53
  r = spreadsheet.costpercapita_ap53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2840.683570138833,r[:number])
end

def test_costpercapita_aq53
  r = spreadsheet.costpercapita_aq53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2742.071243328724,r[:number])
end

def test_costpercapita_as53
  r = spreadsheet.costpercapita_as53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3071.439969272468,r[:number])
end

def test_costpercapita_at53
  r = spreadsheet.costpercapita_at53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65256.42448402257,r[:number])
end

def test_costpercapita_ay53
  r = spreadsheet.costpercapita_ay53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.411527326496,r[:number])
end

def test_costpercapita_az53
  r = spreadsheet.costpercapita_az53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.522547749294,r[:number])
end

def test_costpercapita_ba53
  r = spreadsheet.costpercapita_ba53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5412789085985,r[:number])
end

def test_costpercapita_bb53
  r = spreadsheet.costpercapita_bb53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.6552271942226,r[:number])
end

def test_costpercapita_bc53
  r = spreadsheet.costpercapita_bc53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.6493453745625,r[:number])
end

def test_costpercapita_bd53
  r = spreadsheet.costpercapita_bd53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1388.7743958360304,r[:number])
end

def test_costpercapita_be53
  r = spreadsheet.costpercapita_be53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1386.8528197663031,r[:number])
end

def test_costpercapita_bf53
  r = spreadsheet.costpercapita_bf53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.0046438025076,r[:number])
end

def test_costpercapita_bg53
  r = spreadsheet.costpercapita_bg53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1401.064982057998,r[:number])
end

def test_costpercapita_bi53
  r = spreadsheet.costpercapita_bi53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.411527326496,r[:number])
end

def test_costpercapita_bj53
  r = spreadsheet.costpercapita_bj53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.522547749294,r[:number])
end

def test_costpercapita_bk53
  r = spreadsheet.costpercapita_bk53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5412789085985,r[:number])
end

def test_costpercapita_bl53
  r = spreadsheet.costpercapita_bl53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.6552271942226,r[:number])
end

def test_costpercapita_bm53
  r = spreadsheet.costpercapita_bm53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.6493453745625,r[:number])
end

def test_costpercapita_bn53
  r = spreadsheet.costpercapita_bn53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1388.7743958360304,r[:number])
end

def test_costpercapita_bo53
  r = spreadsheet.costpercapita_bo53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1386.8528197663031,r[:number])
end

def test_costpercapita_bp53
  r = spreadsheet.costpercapita_bp53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.0046438025076,r[:number])
end

def test_costpercapita_bq53
  r = spreadsheet.costpercapita_bq53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1401.064982057998,r[:number])
end

def test_costpercapita_bs53
  r = spreadsheet.costpercapita_bs53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2902.5187702153,r[:number])
end

def test_costpercapita_bt53
  r = spreadsheet.costpercapita_bt53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3255.929291923033,r[:number])
end

def test_costpercapita_bu53
  r = spreadsheet.costpercapita_bu53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.851976157551,r[:number])
end

def test_costpercapita_bv53
  r = spreadsheet.costpercapita_bv53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3166.3668394332844,r[:number])
end

def test_costpercapita_bw53
  r = spreadsheet.costpercapita_bw53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3067.458321794082,r[:number])
end

def test_costpercapita_bx53
  r = spreadsheet.costpercapita_bx53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3015.8940283042257,r[:number])
end

def test_costpercapita_by53
  r = spreadsheet.costpercapita_by53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.577997272847,r[:number])
end

def test_costpercapita_bz53
  r = spreadsheet.costpercapita_bz53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2840.683570138833,r[:number])
end

def test_costpercapita_ca53
  r = spreadsheet.costpercapita_ca53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2742.071243328724,r[:number])
end

def test_costpercapita_cc53
  r = spreadsheet.costpercapita_cc53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3014.1502265075414,r[:number])
end

def test_costpercapita_cd53
  r = spreadsheet.costpercapita_cd53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64740.81679913824,r[:number])
end

def test_costpercapita_cf53
  r = spreadsheet.costpercapita_cf53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-515.6076848843304,r[:number])
end

def test_costpercapita_cg53
  r = spreadsheet.costpercapita_cg53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch53
  r = spreadsheet.costpercapita_ch53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci53
  r = spreadsheet.costpercapita_ci53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj53
  r = spreadsheet.costpercapita_cj53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck53
  r = spreadsheet.costpercapita_ck53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl53
  r = spreadsheet.costpercapita_cl53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm53
  r = spreadsheet.costpercapita_cm53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn53
  r = spreadsheet.costpercapita_cn53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp53
  r = spreadsheet.costpercapita_cp53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-57.2897427649256,r[:number])
end

def test_costpercapita_cq53
  r = spreadsheet.costpercapita_cq53
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-515.6076848843304,r[:number])
end

def test_costpercapita_cr53
  r = spreadsheet.costpercapita_cr53
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b55
  r = spreadsheet.costpercapita_b55
  assert_equal(:ExcelString,r[:type])
  assert_equal("£/Capita/yr",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e55
  r = spreadsheet.costpercapita_e55
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f55
  r = spreadsheet.costpercapita_f55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o55
  r = spreadsheet.costpercapita_o55
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p55
  r = spreadsheet.costpercapita_p55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y55
  r = spreadsheet.costpercapita_y55
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z55
  r = spreadsheet.costpercapita_z55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai55
  r = spreadsheet.costpercapita_ai55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as55
  r = spreadsheet.costpercapita_as55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av55
  r = spreadsheet.costpercapita_av55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay55
  r = spreadsheet.costpercapita_ay55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi55
  r = spreadsheet.costpercapita_bi55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br55
  r = spreadsheet.costpercapita_br55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc55
  r = spreadsheet.costpercapita_cc55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf55
  r = spreadsheet.costpercapita_cf55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp55
  r = spreadsheet.costpercapita_cp55
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a56
  r = spreadsheet.costpercapita_a56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Code",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b56
  r = spreadsheet.costpercapita_b56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Description",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c56
  r = spreadsheet.costpercapita_c56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e56
  r = spreadsheet.costpercapita_e56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f56
  r = spreadsheet.costpercapita_f56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g56
  r = spreadsheet.costpercapita_g56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h56
  r = spreadsheet.costpercapita_h56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i56
  r = spreadsheet.costpercapita_i56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j56
  r = spreadsheet.costpercapita_j56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k56
  r = spreadsheet.costpercapita_k56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l56
  r = spreadsheet.costpercapita_l56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m56
  r = spreadsheet.costpercapita_m56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o56
  r = spreadsheet.costpercapita_o56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p56
  r = spreadsheet.costpercapita_p56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q56
  r = spreadsheet.costpercapita_q56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r56
  r = spreadsheet.costpercapita_r56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s56
  r = spreadsheet.costpercapita_s56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t56
  r = spreadsheet.costpercapita_t56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u56
  r = spreadsheet.costpercapita_u56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v56
  r = spreadsheet.costpercapita_v56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w56
  r = spreadsheet.costpercapita_w56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y56
  r = spreadsheet.costpercapita_y56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z56
  r = spreadsheet.costpercapita_z56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa56
  r = spreadsheet.costpercapita_aa56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab56
  r = spreadsheet.costpercapita_ab56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac56
  r = spreadsheet.costpercapita_ac56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad56
  r = spreadsheet.costpercapita_ad56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae56
  r = spreadsheet.costpercapita_ae56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af56
  r = spreadsheet.costpercapita_af56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag56
  r = spreadsheet.costpercapita_ag56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai56
  r = spreadsheet.costpercapita_ai56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj56
  r = spreadsheet.costpercapita_aj56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak56
  r = spreadsheet.costpercapita_ak56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al56
  r = spreadsheet.costpercapita_al56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am56
  r = spreadsheet.costpercapita_am56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an56
  r = spreadsheet.costpercapita_an56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao56
  r = spreadsheet.costpercapita_ao56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap56
  r = spreadsheet.costpercapita_ap56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq56
  r = spreadsheet.costpercapita_aq56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as56
  r = spreadsheet.costpercapita_as56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at56
  r = spreadsheet.costpercapita_at56
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av56
  r = spreadsheet.costpercapita_av56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw56
  r = spreadsheet.costpercapita_aw56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay56
  r = spreadsheet.costpercapita_ay56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_az56
  r = spreadsheet.costpercapita_az56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_ba56
  r = spreadsheet.costpercapita_ba56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bb56
  r = spreadsheet.costpercapita_bb56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bc56
  r = spreadsheet.costpercapita_bc56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bd56
  r = spreadsheet.costpercapita_bd56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_be56
  r = spreadsheet.costpercapita_be56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bf56
  r = spreadsheet.costpercapita_bf56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bg56
  r = spreadsheet.costpercapita_bg56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bi56
  r = spreadsheet.costpercapita_bi56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_bj56
  r = spreadsheet.costpercapita_bj56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_bk56
  r = spreadsheet.costpercapita_bk56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bl56
  r = spreadsheet.costpercapita_bl56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bm56
  r = spreadsheet.costpercapita_bm56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bn56
  r = spreadsheet.costpercapita_bn56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_bo56
  r = spreadsheet.costpercapita_bo56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bp56
  r = spreadsheet.costpercapita_bp56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bq56
  r = spreadsheet.costpercapita_bq56
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bs56
  r = spreadsheet.costpercapita_bs56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt56
  r = spreadsheet.costpercapita_bt56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu56
  r = spreadsheet.costpercapita_bu56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv56
  r = spreadsheet.costpercapita_bv56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw56
  r = spreadsheet.costpercapita_bw56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx56
  r = spreadsheet.costpercapita_bx56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by56
  r = spreadsheet.costpercapita_by56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz56
  r = spreadsheet.costpercapita_bz56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca56
  r = spreadsheet.costpercapita_ca56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc56
  r = spreadsheet.costpercapita_cc56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd56
  r = spreadsheet.costpercapita_cd56
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf56
  r = spreadsheet.costpercapita_cf56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg56
  r = spreadsheet.costpercapita_cg56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch56
  r = spreadsheet.costpercapita_ch56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci56
  r = spreadsheet.costpercapita_ci56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj56
  r = spreadsheet.costpercapita_cj56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck56
  r = spreadsheet.costpercapita_ck56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl56
  r = spreadsheet.costpercapita_cl56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm56
  r = spreadsheet.costpercapita_cm56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn56
  r = spreadsheet.costpercapita_cn56
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp56
  r = spreadsheet.costpercapita_cp56
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq56
  r = spreadsheet.costpercapita_cq56
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a57
  r = spreadsheet.costpercapita_a57
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b57
  r = spreadsheet.costpercapita_b57
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional thermal plant",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c57
  r = spreadsheet.costpercapita_c57
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e57
  r = spreadsheet.costpercapita_e57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.362815745089527,r[:number])
end

def test_costpercapita_f57
  r = spreadsheet.costpercapita_f57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.12940727269075,r[:number])
end

def test_costpercapita_g57
  r = spreadsheet.costpercapita_g57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.090986856077194,r[:number])
end

def test_costpercapita_h57
  r = spreadsheet.costpercapita_h57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.30034498458158,r[:number])
end

def test_costpercapita_i57
  r = spreadsheet.costpercapita_i57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.575371485570024,r[:number])
end

def test_costpercapita_j57
  r = spreadsheet.costpercapita_j57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.927586182861294,r[:number])
end

def test_costpercapita_k57
  r = spreadsheet.costpercapita_k57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.62093550002423,r[:number])
end

def test_costpercapita_l57
  r = spreadsheet.costpercapita_l57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.564596047612724,r[:number])
end

def test_costpercapita_m57
  r = spreadsheet.costpercapita_m57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.15389280312326,r[:number])
end

def test_costpercapita_o57
  r = spreadsheet.costpercapita_o57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.03487986589885,r[:number])
end

def test_costpercapita_p57
  r = spreadsheet.costpercapita_p57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.23694660581587,r[:number])
end

def test_costpercapita_q57
  r = spreadsheet.costpercapita_q57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.32245220123212,r[:number])
end

def test_costpercapita_r57
  r = spreadsheet.costpercapita_r57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.19243871379865,r[:number])
end

def test_costpercapita_s57
  r = spreadsheet.costpercapita_s57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.27850010234271,r[:number])
end

def test_costpercapita_t57
  r = spreadsheet.costpercapita_t57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.72329647114965,r[:number])
end

def test_costpercapita_u57
  r = spreadsheet.costpercapita_u57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.14680060845675,r[:number])
end

def test_costpercapita_v57
  r = spreadsheet.costpercapita_v57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.175810667679144,r[:number])
end

def test_costpercapita_w57
  r = spreadsheet.costpercapita_w57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.138096208799226,r[:number])
end

def test_costpercapita_y57
  r = spreadsheet.costpercapita_y57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z57
  r = spreadsheet.costpercapita_z57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa57
  r = spreadsheet.costpercapita_aa57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab57
  r = spreadsheet.costpercapita_ab57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac57
  r = spreadsheet.costpercapita_ac57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad57
  r = spreadsheet.costpercapita_ad57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae57
  r = spreadsheet.costpercapita_ae57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af57
  r = spreadsheet.costpercapita_af57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag57
  r = spreadsheet.costpercapita_ag57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai57
  r = spreadsheet.costpercapita_ai57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.397695610988386,r[:number])
end

def test_costpercapita_aj57
  r = spreadsheet.costpercapita_aj57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.36635387850662,r[:number])
end

def test_costpercapita_ak57
  r = spreadsheet.costpercapita_ak57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.41343905730932,r[:number])
end

def test_costpercapita_al57
  r = spreadsheet.costpercapita_al57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.49278369838024,r[:number])
end

def test_costpercapita_am57
  r = spreadsheet.costpercapita_am57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.85387158791274,r[:number])
end

def test_costpercapita_an57
  r = spreadsheet.costpercapita_an57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.65088265401096,r[:number])
end

def test_costpercapita_ao57
  r = spreadsheet.costpercapita_ao57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.76773610848097,r[:number])
end

def test_costpercapita_ap57
  r = spreadsheet.costpercapita_ap57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.74040671529185,r[:number])
end

def test_costpercapita_aq57
  r = spreadsheet.costpercapita_aq57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.29198901192248,r[:number])
end

def test_costpercapita_as57
  r = spreadsheet.costpercapita_as57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.88612870253374,r[:number])
end

def test_costpercapita_at57
  r = spreadsheet.costpercapita_at57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1714.0233927922366,r[:number])
end

def test_costpercapita_av57
  r = spreadsheet.costpercapita_av57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw57
  r = spreadsheet.costpercapita_aw57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay57
  r = spreadsheet.costpercapita_ay57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.095808900321279,r[:number])
end

def test_costpercapita_az57
  r = spreadsheet.costpercapita_az57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.59947670829899,r[:number])
end

def test_costpercapita_ba57
  r = spreadsheet.costpercapita_ba57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.421196796719514,r[:number])
end

def test_costpercapita_bb57
  r = spreadsheet.costpercapita_bb57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.280994399980894,r[:number])
end

def test_costpercapita_bc57
  r = spreadsheet.costpercapita_bc57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.334030310265117,r[:number])
end

def test_costpercapita_bd57
  r = spreadsheet.costpercapita_bd57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.527386712781485,r[:number])
end

def test_costpercapita_be57
  r = spreadsheet.costpercapita_be57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.377210558255484,r[:number])
end

def test_costpercapita_bf57
  r = spreadsheet.costpercapita_bf57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.34628171308857,r[:number])
end

def test_costpercapita_bg57
  r = spreadsheet.costpercapita_bg57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.02287042311748,r[:number])
end

def test_costpercapita_bi57
  r = spreadsheet.costpercapita_bi57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.095808900321279,r[:number])
end

def test_costpercapita_bj57
  r = spreadsheet.costpercapita_bj57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.62617616499522,r[:number])
end

def test_costpercapita_bk57
  r = spreadsheet.costpercapita_bk57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.60127715640485,r[:number])
end

def test_costpercapita_bl57
  r = spreadsheet.costpercapita_bl57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.097026787091096,r[:number])
end

def test_costpercapita_bm57
  r = spreadsheet.costpercapita_bm57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.651023850877664,r[:number])
end

def test_costpercapita_bn57
  r = spreadsheet.costpercapita_bn57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.815799815200826,r[:number])
end

def test_costpercapita_bo57
  r = spreadsheet.costpercapita_bo57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.09555227756351,r[:number])
end

def test_costpercapita_bp57
  r = spreadsheet.costpercapita_bp57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.84915058357711,r[:number])
end

def test_costpercapita_bq57
  r = spreadsheet.costpercapita_bq57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.79090640744155,r[:number])
end

def test_costpercapita_bs57
  r = spreadsheet.costpercapita_bs57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.13068876622013,r[:number])
end

def test_costpercapita_bt57
  r = spreadsheet.costpercapita_bt57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.86312277081109,r[:number])
end

def test_costpercapita_bu57
  r = spreadsheet.costpercapita_bu57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.92372935763697,r[:number])
end

def test_costpercapita_bv57
  r = spreadsheet.costpercapita_bv57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.28946550088975,r[:number])
end

def test_costpercapita_bw57
  r = spreadsheet.costpercapita_bw57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.92952395322037,r[:number])
end

def test_costpercapita_bx57
  r = spreadsheet.costpercapita_bx57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.53909628635047,r[:number])
end

def test_costpercapita_by57
  r = spreadsheet.costpercapita_by57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.24235288602027,r[:number])
end

def test_costpercapita_bz57
  r = spreadsheet.costpercapita_bz57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.02496125125626,r[:number])
end

def test_costpercapita_ca57
  r = spreadsheet.costpercapita_ca57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.92900261624078,r[:number])
end

def test_costpercapita_cc57
  r = spreadsheet.costpercapita_cc57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.54132704318289,r[:number])
end

def test_costpercapita_cd57
  r = spreadsheet.costpercapita_cd57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1896.2346198785033,r[:number])
end

def test_costpercapita_cf57
  r = spreadsheet.costpercapita_cf57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.2670068447682485,r[:number])
end

def test_costpercapita_cg57
  r = spreadsheet.costpercapita_cg57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-7.503231107695527,r[:number])
end

def test_costpercapita_ch57
  r = spreadsheet.costpercapita_ch57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5102903003276582,r[:number])
end

def test_costpercapita_ci57
  r = spreadsheet.costpercapita_ci57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.79668180250952,r[:number])
end

def test_costpercapita_cj57
  r = spreadsheet.costpercapita_cj57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.07565236530764,r[:number])
end

def test_costpercapita_ck57
  r = spreadsheet.costpercapita_ck57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.88821363233953,r[:number])
end

def test_costpercapita_cl57
  r = spreadsheet.costpercapita_cl57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.474616777539283,r[:number])
end

def test_costpercapita_cm57
  r = spreadsheet.costpercapita_cm57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.28455453596439,r[:number])
end

def test_costpercapita_cn57
  r = spreadsheet.costpercapita_cn57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.637013604318284,r[:number])
end

def test_costpercapita_cp57
  r = spreadsheet.costpercapita_cp57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.655198340649171,r[:number])
end

def test_costpercapita_cq57
  r = spreadsheet.costpercapita_cq57
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.2112270862668,r[:number])
end

def test_costpercapita_cr57
  r = spreadsheet.costpercapita_cr57
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a58
  r = spreadsheet.costpercapita_a58
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b58
  r = spreadsheet.costpercapita_b58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Combustion + CCS",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c58
  r = spreadsheet.costpercapita_c58
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e58
  r = spreadsheet.costpercapita_e58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f58
  r = spreadsheet.costpercapita_f58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.681101831095091,r[:number])
end

def test_costpercapita_g58
  r = spreadsheet.costpercapita_g58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6927279142049256,r[:number])
end

def test_costpercapita_h58
  r = spreadsheet.costpercapita_h58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.3137721246290163e-16,r[:number])
end

def test_costpercapita_i58
  r = spreadsheet.costpercapita_i58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j58
  r = spreadsheet.costpercapita_j58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k58
  r = spreadsheet.costpercapita_k58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l58
  r = spreadsheet.costpercapita_l58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m58
  r = spreadsheet.costpercapita_m58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o58
  r = spreadsheet.costpercapita_o58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p58
  r = spreadsheet.costpercapita_p58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9209458388949089,r[:number])
end

def test_costpercapita_q58
  r = spreadsheet.costpercapita_q58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6881657416213902,r[:number])
end

def test_costpercapita_r58
  r = spreadsheet.costpercapita_r58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6385468513915973,r[:number])
end

def test_costpercapita_s58
  r = spreadsheet.costpercapita_s58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5965108140565025,r[:number])
end

def test_costpercapita_t58
  r = spreadsheet.costpercapita_t58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.559619870932544,r[:number])
end

def test_costpercapita_u58
  r = spreadsheet.costpercapita_u58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.527059525860367,r[:number])
end

def test_costpercapita_v58
  r = spreadsheet.costpercapita_v58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.49742431958075,r[:number])
end

def test_costpercapita_w58
  r = spreadsheet.costpercapita_w58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4717523896007523,r[:number])
end

def test_costpercapita_y58
  r = spreadsheet.costpercapita_y58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z58
  r = spreadsheet.costpercapita_z58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa58
  r = spreadsheet.costpercapita_aa58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab58
  r = spreadsheet.costpercapita_ab58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac58
  r = spreadsheet.costpercapita_ac58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad58
  r = spreadsheet.costpercapita_ad58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae58
  r = spreadsheet.costpercapita_ae58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af58
  r = spreadsheet.costpercapita_af58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag58
  r = spreadsheet.costpercapita_ag58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai58
  r = spreadsheet.costpercapita_ai58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj58
  r = spreadsheet.costpercapita_aj58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.60204766999,r[:number])
end

def test_costpercapita_ak58
  r = spreadsheet.costpercapita_ak58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.380893655826316,r[:number])
end

def test_costpercapita_al58
  r = spreadsheet.costpercapita_al58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6385468513915968,r[:number])
end

def test_costpercapita_am58
  r = spreadsheet.costpercapita_am58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5965108140565025,r[:number])
end

def test_costpercapita_an58
  r = spreadsheet.costpercapita_an58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.559619870932544,r[:number])
end

def test_costpercapita_ao58
  r = spreadsheet.costpercapita_ao58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.527059525860367,r[:number])
end

def test_costpercapita_ap58
  r = spreadsheet.costpercapita_ap58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.49742431958075,r[:number])
end

def test_costpercapita_aq58
  r = spreadsheet.costpercapita_aq58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4717523896007523,r[:number])
end

def test_costpercapita_as58
  r = spreadsheet.costpercapita_as58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.141539455248759,r[:number])
end

def test_costpercapita_at58
  r = spreadsheet.costpercapita_at58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.286168656566204,r[:number])
end

def test_costpercapita_av58
  r = spreadsheet.costpercapita_av58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw58
  r = spreadsheet.costpercapita_aw58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay58
  r = spreadsheet.costpercapita_ay58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az58
  r = spreadsheet.costpercapita_az58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5697990936613997,r[:number])
end

def test_costpercapita_ba58
  r = spreadsheet.costpercapita_ba58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4782352538102697,r[:number])
end

def test_costpercapita_bb58
  r = spreadsheet.costpercapita_bb58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8191718338414992e-16,r[:number])
end

def test_costpercapita_bc58
  r = spreadsheet.costpercapita_bc58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd58
  r = spreadsheet.costpercapita_bd58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be58
  r = spreadsheet.costpercapita_be58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf58
  r = spreadsheet.costpercapita_bf58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg58
  r = spreadsheet.costpercapita_bg58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi58
  r = spreadsheet.costpercapita_bi58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj58
  r = spreadsheet.costpercapita_bj58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5697990936613997,r[:number])
end

def test_costpercapita_bk58
  r = spreadsheet.costpercapita_bk58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9639038781242624,r[:number])
end

def test_costpercapita_bl58
  r = spreadsheet.costpercapita_bl58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8411676404754855,r[:number])
end

def test_costpercapita_bm58
  r = spreadsheet.costpercapita_bm58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3933288193274307,r[:number])
end

def test_costpercapita_bn58
  r = spreadsheet.costpercapita_bn58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.7277906418079917e-16,r[:number])
end

def test_costpercapita_bo58
  r = spreadsheet.costpercapita_bo58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp58
  r = spreadsheet.costpercapita_bp58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq58
  r = spreadsheet.costpercapita_bq58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs58
  r = spreadsheet.costpercapita_bs58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt58
  r = spreadsheet.costpercapita_bt58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4907449325563085,r[:number])
end

def test_costpercapita_bu58
  r = spreadsheet.costpercapita_bu58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.652069619745653,r[:number])
end

def test_costpercapita_bv58
  r = spreadsheet.costpercapita_bv58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.4797144918670835,r[:number])
end

def test_costpercapita_bw58
  r = spreadsheet.costpercapita_bw58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.989839633383933,r[:number])
end

def test_costpercapita_bx58
  r = spreadsheet.costpercapita_bx58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5596198709325437,r[:number])
end

def test_costpercapita_by58
  r = spreadsheet.costpercapita_by58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.527059525860367,r[:number])
end

def test_costpercapita_bz58
  r = spreadsheet.costpercapita_bz58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.49742431958075,r[:number])
end

def test_costpercapita_ca58
  r = spreadsheet.costpercapita_ca58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4717523896007523,r[:number])
end

def test_costpercapita_cc58
  r = spreadsheet.costpercapita_cc58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.629802753725266,r[:number])
end

def test_costpercapita_cd58
  r = spreadsheet.costpercapita_cd58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.8686524759581,r[:number])
end

def test_costpercapita_cf58
  r = spreadsheet.costpercapita_cf58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg58
  r = spreadsheet.costpercapita_cg58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.1113027374336917,r[:number])
end

def test_costpercapita_ch58
  r = spreadsheet.costpercapita_ch58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2711759639193365,r[:number])
end

def test_costpercapita_ci58
  r = spreadsheet.costpercapita_ci58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8411676404754855,r[:number])
end

def test_costpercapita_cj58
  r = spreadsheet.costpercapita_cj58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3933288193274307,r[:number])
end

def test_costpercapita_ck58
  r = spreadsheet.costpercapita_ck58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.7277906418079917e-16,r[:number])
end

def test_costpercapita_cl58
  r = spreadsheet.costpercapita_cl58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm58
  r = spreadsheet.costpercapita_cm58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn58
  r = spreadsheet.costpercapita_cn58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp58
  r = spreadsheet.costpercapita_cp58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4882632984765068,r[:number])
end

def test_costpercapita_cq58
  r = spreadsheet.costpercapita_cq58
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.582483819391882,r[:number])
end

def test_costpercapita_cr58
  r = spreadsheet.costpercapita_cr58
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a59
  r = spreadsheet.costpercapita_a59
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b59
  r = spreadsheet.costpercapita_b59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c59
  r = spreadsheet.costpercapita_c59
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e59
  r = spreadsheet.costpercapita_e59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f59
  r = spreadsheet.costpercapita_f59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g59
  r = spreadsheet.costpercapita_g59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h59
  r = spreadsheet.costpercapita_h59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i59
  r = spreadsheet.costpercapita_i59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j59
  r = spreadsheet.costpercapita_j59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k59
  r = spreadsheet.costpercapita_k59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l59
  r = spreadsheet.costpercapita_l59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m59
  r = spreadsheet.costpercapita_m59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o59
  r = spreadsheet.costpercapita_o59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.53940128645524,r[:number])
end

def test_costpercapita_p59
  r = spreadsheet.costpercapita_p59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.964227768093629,r[:number])
end

def test_costpercapita_q59
  r = spreadsheet.costpercapita_q59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.505946521757337,r[:number])
end

def test_costpercapita_r59
  r = spreadsheet.costpercapita_r59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7784877618820878,r[:number])
end

def test_costpercapita_s59
  r = spreadsheet.costpercapita_s59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.729899203947405,r[:number])
end

def test_costpercapita_t59
  r = spreadsheet.costpercapita_t59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u59
  r = spreadsheet.costpercapita_u59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v59
  r = spreadsheet.costpercapita_v59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w59
  r = spreadsheet.costpercapita_w59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y59
  r = spreadsheet.costpercapita_y59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0513578545511342,r[:number])
end

def test_costpercapita_z59
  r = spreadsheet.costpercapita_z59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8540189754513322,r[:number])
end

def test_costpercapita_aa59
  r = spreadsheet.costpercapita_aa59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4720342707132738,r[:number])
end

def test_costpercapita_ab59
  r = spreadsheet.costpercapita_ab59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1524728164966898,r[:number])
end

def test_costpercapita_ac59
  r = spreadsheet.costpercapita_ac59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14830723580696178,r[:number])
end

def test_costpercapita_ad59
  r = spreadsheet.costpercapita_ad59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae59
  r = spreadsheet.costpercapita_ae59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af59
  r = spreadsheet.costpercapita_af59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag59
  r = spreadsheet.costpercapita_ag59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai59
  r = spreadsheet.costpercapita_ai59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.590759141006375,r[:number])
end

def test_costpercapita_aj59
  r = spreadsheet.costpercapita_aj59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.81824674354496,r[:number])
end

def test_costpercapita_ak59
  r = spreadsheet.costpercapita_ak59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.97798079247061,r[:number])
end

def test_costpercapita_al59
  r = spreadsheet.costpercapita_al59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9309605783787778,r[:number])
end

def test_costpercapita_am59
  r = spreadsheet.costpercapita_am59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.878206439754367,r[:number])
end

def test_costpercapita_an59
  r = spreadsheet.costpercapita_an59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao59
  r = spreadsheet.costpercapita_ao59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap59
  r = spreadsheet.costpercapita_ap59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq59
  r = spreadsheet.costpercapita_aq59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as59
  r = spreadsheet.costpercapita_as59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9106837439061213,r[:number])
end

def test_costpercapita_at59
  r = spreadsheet.costpercapita_at59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.80611542603921,r[:number])
end

def test_costpercapita_av59
  r = spreadsheet.costpercapita_av59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw59
  r = spreadsheet.costpercapita_aw59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay59
  r = spreadsheet.costpercapita_ay59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az59
  r = spreadsheet.costpercapita_az59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba59
  r = spreadsheet.costpercapita_ba59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb59
  r = spreadsheet.costpercapita_bb59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc59
  r = spreadsheet.costpercapita_bc59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd59
  r = spreadsheet.costpercapita_bd59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be59
  r = spreadsheet.costpercapita_be59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf59
  r = spreadsheet.costpercapita_bf59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg59
  r = spreadsheet.costpercapita_bg59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi59
  r = spreadsheet.costpercapita_bi59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj59
  r = spreadsheet.costpercapita_bj59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk59
  r = spreadsheet.costpercapita_bk59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl59
  r = spreadsheet.costpercapita_bl59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm59
  r = spreadsheet.costpercapita_bm59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn59
  r = spreadsheet.costpercapita_bn59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo59
  r = spreadsheet.costpercapita_bo59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp59
  r = spreadsheet.costpercapita_bp59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq59
  r = spreadsheet.costpercapita_bq59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs59
  r = spreadsheet.costpercapita_bs59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.590759141006375,r[:number])
end

def test_costpercapita_bt59
  r = spreadsheet.costpercapita_bt59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.81824674354496,r[:number])
end

def test_costpercapita_bu59
  r = spreadsheet.costpercapita_bu59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.97798079247061,r[:number])
end

def test_costpercapita_bv59
  r = spreadsheet.costpercapita_bv59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9309605783787778,r[:number])
end

def test_costpercapita_bw59
  r = spreadsheet.costpercapita_bw59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.878206439754367,r[:number])
end

def test_costpercapita_bx59
  r = spreadsheet.costpercapita_bx59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by59
  r = spreadsheet.costpercapita_by59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz59
  r = spreadsheet.costpercapita_bz59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca59
  r = spreadsheet.costpercapita_ca59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc59
  r = spreadsheet.costpercapita_cc59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9106837439061213,r[:number])
end

def test_costpercapita_cd59
  r = spreadsheet.costpercapita_cd59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.80611542603921,r[:number])
end

def test_costpercapita_cf59
  r = spreadsheet.costpercapita_cf59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg59
  r = spreadsheet.costpercapita_cg59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch59
  r = spreadsheet.costpercapita_ch59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci59
  r = spreadsheet.costpercapita_ci59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj59
  r = spreadsheet.costpercapita_cj59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck59
  r = spreadsheet.costpercapita_ck59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl59
  r = spreadsheet.costpercapita_cl59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm59
  r = spreadsheet.costpercapita_cm59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn59
  r = spreadsheet.costpercapita_cn59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp59
  r = spreadsheet.costpercapita_cp59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq59
  r = spreadsheet.costpercapita_cq59
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr59
  r = spreadsheet.costpercapita_cr59
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a60
  r = spreadsheet.costpercapita_a60
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b60
  r = spreadsheet.costpercapita_b60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c60
  r = spreadsheet.costpercapita_c60
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e60
  r = spreadsheet.costpercapita_e60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.422487276184361,r[:number])
end

def test_costpercapita_f60
  r = spreadsheet.costpercapita_f60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.160785419116324,r[:number])
end

def test_costpercapita_g60
  r = spreadsheet.costpercapita_g60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.523783842750143,r[:number])
end

def test_costpercapita_h60
  r = spreadsheet.costpercapita_h60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.936245041148924,r[:number])
end

def test_costpercapita_i60
  r = spreadsheet.costpercapita_i60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j60
  r = spreadsheet.costpercapita_j60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k60
  r = spreadsheet.costpercapita_k60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l60
  r = spreadsheet.costpercapita_l60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m60
  r = spreadsheet.costpercapita_m60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o60
  r = spreadsheet.costpercapita_o60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.869767375652915,r[:number])
end

def test_costpercapita_p60
  r = spreadsheet.costpercapita_p60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.430623496307678,r[:number])
end

def test_costpercapita_q60
  r = spreadsheet.costpercapita_q60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9540239460051594,r[:number])
end

def test_costpercapita_r60
  r = spreadsheet.costpercapita_r60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.21301223544355,r[:number])
end

def test_costpercapita_s60
  r = spreadsheet.costpercapita_s60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.618978024022293,r[:number])
end

def test_costpercapita_t60
  r = spreadsheet.costpercapita_t60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.056019316261324,r[:number])
end

def test_costpercapita_u60
  r = spreadsheet.costpercapita_u60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5198682550329926,r[:number])
end

def test_costpercapita_v60
  r = spreadsheet.costpercapita_v60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.006113829103559086,r[:number])
end

def test_costpercapita_w60
  r = spreadsheet.costpercapita_w60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.005999734443602492,r[:number])
end

def test_costpercapita_y60
  r = spreadsheet.costpercapita_y60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z60
  r = spreadsheet.costpercapita_z60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa60
  r = spreadsheet.costpercapita_aa60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab60
  r = spreadsheet.costpercapita_ab60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac60
  r = spreadsheet.costpercapita_ac60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad60
  r = spreadsheet.costpercapita_ad60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae60
  r = spreadsheet.costpercapita_ae60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af60
  r = spreadsheet.costpercapita_af60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag60
  r = spreadsheet.costpercapita_ag60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai60
  r = spreadsheet.costpercapita_ai60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.292254651837276,r[:number])
end

def test_costpercapita_aj60
  r = spreadsheet.costpercapita_aj60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.591408915424003,r[:number])
end

def test_costpercapita_ak60
  r = spreadsheet.costpercapita_ak60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.477807788755303,r[:number])
end

def test_costpercapita_al60
  r = spreadsheet.costpercapita_al60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.149257276592472,r[:number])
end

def test_costpercapita_am60
  r = spreadsheet.costpercapita_am60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.618978024022293,r[:number])
end

def test_costpercapita_an60
  r = spreadsheet.costpercapita_an60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.056019316261324,r[:number])
end

def test_costpercapita_ao60
  r = spreadsheet.costpercapita_ao60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5198682550329926,r[:number])
end

def test_costpercapita_ap60
  r = spreadsheet.costpercapita_ap60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.006113829103559086,r[:number])
end

def test_costpercapita_aq60
  r = spreadsheet.costpercapita_aq60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.005999734443602492,r[:number])
end

def test_costpercapita_as60
  r = spreadsheet.costpercapita_as60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.968634199052536,r[:number])
end

def test_costpercapita_at60
  r = spreadsheet.costpercapita_at60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.51178410675206,r[:number])
end

def test_costpercapita_av60
  r = spreadsheet.costpercapita_av60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw60
  r = spreadsheet.costpercapita_aw60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay60
  r = spreadsheet.costpercapita_ay60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.079918607334131,r[:number])
end

def test_costpercapita_az60
  r = spreadsheet.costpercapita_az60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.224917479311777,r[:number])
end

def test_costpercapita_ba60
  r = spreadsheet.costpercapita_ba60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8752207342564065,r[:number])
end

def test_costpercapita_bb60
  r = spreadsheet.costpercapita_bb60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.552677723160982,r[:number])
end

def test_costpercapita_bc60
  r = spreadsheet.costpercapita_bc60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd60
  r = spreadsheet.costpercapita_bd60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be60
  r = spreadsheet.costpercapita_be60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf60
  r = spreadsheet.costpercapita_bf60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg60
  r = spreadsheet.costpercapita_bg60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi60
  r = spreadsheet.costpercapita_bi60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.079918607334131,r[:number])
end

def test_costpercapita_bj60
  r = spreadsheet.costpercapita_bj60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.137325418779398,r[:number])
end

def test_costpercapita_bk60
  r = spreadsheet.costpercapita_bk60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.615192567448982,r[:number])
end

def test_costpercapita_bl60
  r = spreadsheet.costpercapita_bl60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.98702003191507,r[:number])
end

def test_costpercapita_bm60
  r = spreadsheet.costpercapita_bm60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.853981426140372,r[:number])
end

def test_costpercapita_bn60
  r = spreadsheet.costpercapita_bn60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.223521625746365,r[:number])
end

def test_costpercapita_bo60
  r = spreadsheet.costpercapita_bo60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp60
  r = spreadsheet.costpercapita_bp60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq60
  r = spreadsheet.costpercapita_bq60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs60
  r = spreadsheet.costpercapita_bs60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.949685982987046,r[:number])
end

def test_costpercapita_bt60
  r = spreadsheet.costpercapita_bt60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.567948915087076,r[:number])
end

def test_costpercapita_bu60
  r = spreadsheet.costpercapita_bu60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.569216513454137,r[:number])
end

def test_costpercapita_bv60
  r = spreadsheet.costpercapita_bv60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.20003226735862,r[:number])
end

def test_costpercapita_bw60
  r = spreadsheet.costpercapita_bw60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.472959450162664,r[:number])
end

def test_costpercapita_bx60
  r = spreadsheet.costpercapita_bx60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.279540942007688,r[:number])
end

def test_costpercapita_by60
  r = spreadsheet.costpercapita_by60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5198682550329926,r[:number])
end

def test_costpercapita_bz60
  r = spreadsheet.costpercapita_bz60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.006113829103559086,r[:number])
end

def test_costpercapita_ca60
  r = spreadsheet.costpercapita_ca60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.005999734443602492,r[:number])
end

def test_costpercapita_cc60
  r = spreadsheet.costpercapita_cc60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.39681843218193,r[:number])
end

def test_costpercapita_cd60
  r = spreadsheet.costpercapita_cd60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(254.94650262006883,r[:number])
end

def test_costpercapita_cf60
  r = spreadsheet.costpercapita_cf60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.34256866885023,r[:number])
end

def test_costpercapita_cg60
  r = spreadsheet.costpercapita_cg60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.0234600003369272,r[:number])
end

def test_costpercapita_ch60
  r = spreadsheet.costpercapita_ch60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.091408724698837,r[:number])
end

def test_costpercapita_ci60
  r = spreadsheet.costpercapita_ci60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.050774990766143,r[:number])
end

def test_costpercapita_cj60
  r = spreadsheet.costpercapita_cj60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.853981426140372,r[:number])
end

def test_costpercapita_ck60
  r = spreadsheet.costpercapita_ck60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.223521625746365,r[:number])
end

def test_costpercapita_cl60
  r = spreadsheet.costpercapita_cl60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm60
  r = spreadsheet.costpercapita_cm60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn60
  r = spreadsheet.costpercapita_cn60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp60
  r = spreadsheet.costpercapita_cp60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4281842331293952,r[:number])
end

def test_costpercapita_cq60
  r = spreadsheet.costpercapita_cq60
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.43471851331677,r[:number])
end

def test_costpercapita_cr60
  r = spreadsheet.costpercapita_cr60
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a61
  r = spreadsheet.costpercapita_a61
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b61
  r = spreadsheet.costpercapita_b61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c61
  r = spreadsheet.costpercapita_c61
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e61
  r = spreadsheet.costpercapita_e61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.667094284370203,r[:number])
end

def test_costpercapita_f61
  r = spreadsheet.costpercapita_f61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.70060774960606,r[:number])
end

def test_costpercapita_g61
  r = spreadsheet.costpercapita_g61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.71074678410653,r[:number])
end

def test_costpercapita_h61
  r = spreadsheet.costpercapita_h61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.44017662855918,r[:number])
end

def test_costpercapita_i61
  r = spreadsheet.costpercapita_i61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j61
  r = spreadsheet.costpercapita_j61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k61
  r = spreadsheet.costpercapita_k61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l61
  r = spreadsheet.costpercapita_l61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m61
  r = spreadsheet.costpercapita_m61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o61
  r = spreadsheet.costpercapita_o61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.583222619409944,r[:number])
end

def test_costpercapita_p61
  r = spreadsheet.costpercapita_p61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.3793111448012425,r[:number])
end

def test_costpercapita_q61
  r = spreadsheet.costpercapita_q61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.990988075240749,r[:number])
end

def test_costpercapita_r61
  r = spreadsheet.costpercapita_r61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.75013160204414,r[:number])
end

def test_costpercapita_s61
  r = spreadsheet.costpercapita_s61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2710508762038195,r[:number])
end

def test_costpercapita_t61
  r = spreadsheet.costpercapita_t61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.564141851536479,r[:number])
end

def test_costpercapita_u61
  r = spreadsheet.costpercapita_u61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9852467553188333,r[:number])
end

def test_costpercapita_v61
  r = spreadsheet.costpercapita_v61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w61
  r = spreadsheet.costpercapita_w61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y61
  r = spreadsheet.costpercapita_y61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z61
  r = spreadsheet.costpercapita_z61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa61
  r = spreadsheet.costpercapita_aa61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab61
  r = spreadsheet.costpercapita_ab61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac61
  r = spreadsheet.costpercapita_ac61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad61
  r = spreadsheet.costpercapita_ad61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae61
  r = spreadsheet.costpercapita_ae61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af61
  r = spreadsheet.costpercapita_af61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag61
  r = spreadsheet.costpercapita_ag61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai61
  r = spreadsheet.costpercapita_ai61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.250316903780146,r[:number])
end

def test_costpercapita_aj61
  r = spreadsheet.costpercapita_aj61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.0799188944073,r[:number])
end

def test_costpercapita_ak61
  r = spreadsheet.costpercapita_ak61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.701734859347276,r[:number])
end

def test_costpercapita_al61
  r = spreadsheet.costpercapita_al61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.190308230603318,r[:number])
end

def test_costpercapita_am61
  r = spreadsheet.costpercapita_am61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2710508762038195,r[:number])
end

def test_costpercapita_an61
  r = spreadsheet.costpercapita_an61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.564141851536479,r[:number])
end

def test_costpercapita_ao61
  r = spreadsheet.costpercapita_ao61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9852467553188333,r[:number])
end

def test_costpercapita_ap61
  r = spreadsheet.costpercapita_ap61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq61
  r = spreadsheet.costpercapita_aq61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as61
  r = spreadsheet.costpercapita_as61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.782524263466351,r[:number])
end

def test_costpercapita_at61
  r = spreadsheet.costpercapita_at61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.3712754841233,r[:number])
end

def test_costpercapita_av61
  r = spreadsheet.costpercapita_av61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw61
  r = spreadsheet.costpercapita_aw61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay61
  r = spreadsheet.costpercapita_ay61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.160488211323131,r[:number])
end

def test_costpercapita_az61
  r = spreadsheet.costpercapita_az61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.01099666526882,r[:number])
end

def test_costpercapita_ba61
  r = spreadsheet.costpercapita_ba61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.467589599202835,r[:number])
end

def test_costpercapita_bb61
  r = spreadsheet.costpercapita_bb61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.574188238259602,r[:number])
end

def test_costpercapita_bc61
  r = spreadsheet.costpercapita_bc61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd61
  r = spreadsheet.costpercapita_bd61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be61
  r = spreadsheet.costpercapita_be61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf61
  r = spreadsheet.costpercapita_bf61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg61
  r = spreadsheet.costpercapita_bg61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi61
  r = spreadsheet.costpercapita_bi61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.160488211323131,r[:number])
end

def test_costpercapita_bj61
  r = spreadsheet.costpercapita_bj61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.00131742045437,r[:number])
end

def test_costpercapita_bk61
  r = spreadsheet.costpercapita_bk61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.879577181698277,r[:number])
end

def test_costpercapita_bl61
  r = spreadsheet.costpercapita_bl61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.85110205073225,r[:number])
end

def test_costpercapita_bm61
  r = spreadsheet.costpercapita_bm61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.06409986570956,r[:number])
end

def test_costpercapita_bn61
  r = spreadsheet.costpercapita_bn61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.09325470702861,r[:number])
end

def test_costpercapita_bo61
  r = spreadsheet.costpercapita_bo61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp61
  r = spreadsheet.costpercapita_bp61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq61
  r = spreadsheet.costpercapita_bq61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs61
  r = spreadsheet.costpercapita_bs61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.743710830733075,r[:number])
end

def test_costpercapita_bt61
  r = spreadsheet.costpercapita_bt61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.380628565255613,r[:number])
end

def test_costpercapita_bu61
  r = spreadsheet.costpercapita_bu61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.87056525693903,r[:number])
end

def test_costpercapita_bv61
  r = spreadsheet.costpercapita_bv61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.601233652776386,r[:number])
end

def test_costpercapita_bw61
  r = spreadsheet.costpercapita_bw61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.33515074191338,r[:number])
end

def test_costpercapita_bx61
  r = spreadsheet.costpercapita_bx61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.65739655856509,r[:number])
end

def test_costpercapita_by61
  r = spreadsheet.costpercapita_by61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9852467553188333,r[:number])
end

def test_costpercapita_bz61
  r = spreadsheet.costpercapita_bz61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca61
  r = spreadsheet.costpercapita_ca61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc61
  r = spreadsheet.costpercapita_cc61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.952659151277935,r[:number])
end

def test_costpercapita_cd61
  r = spreadsheet.costpercapita_cd61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(462.42905927119324,r[:number])
end

def test_costpercapita_cf61
  r = spreadsheet.costpercapita_cf61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.50660607304707,r[:number])
end

def test_costpercapita_cg61
  r = spreadsheet.costpercapita_cg61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.6992903291516885,r[:number])
end

def test_costpercapita_ch61
  r = spreadsheet.costpercapita_ch61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.1688303975917504,r[:number])
end

def test_costpercapita_ci61
  r = spreadsheet.costpercapita_ci61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.410925422173072,r[:number])
end

def test_costpercapita_cj61
  r = spreadsheet.costpercapita_cj61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.06409986570956,r[:number])
end

def test_costpercapita_ck61
  r = spreadsheet.costpercapita_ck61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.09325470702861,r[:number])
end

def test_costpercapita_cl61
  r = spreadsheet.costpercapita_cl61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm61
  r = spreadsheet.costpercapita_cm61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn61
  r = spreadsheet.costpercapita_cn61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp61
  r = spreadsheet.costpercapita_cp61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.170134887811582,r[:number])
end

def test_costpercapita_cq61
  r = spreadsheet.costpercapita_cq61
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.05778378706987,r[:number])
end

def test_costpercapita_cr61
  r = spreadsheet.costpercapita_cr61
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a62
  r = spreadsheet.costpercapita_a62
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b62
  r = spreadsheet.costpercapita_b62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c62
  r = spreadsheet.costpercapita_c62
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e62
  r = spreadsheet.costpercapita_e62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7041115727715976,r[:number])
end

def test_costpercapita_f62
  r = spreadsheet.costpercapita_f62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g62
  r = spreadsheet.costpercapita_g62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h62
  r = spreadsheet.costpercapita_h62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i62
  r = spreadsheet.costpercapita_i62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j62
  r = spreadsheet.costpercapita_j62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k62
  r = spreadsheet.costpercapita_k62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l62
  r = spreadsheet.costpercapita_l62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m62
  r = spreadsheet.costpercapita_m62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o62
  r = spreadsheet.costpercapita_o62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6644089737145475,r[:number])
end

def test_costpercapita_p62
  r = spreadsheet.costpercapita_p62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5765499032932064,r[:number])
end

def test_costpercapita_q62
  r = spreadsheet.costpercapita_q62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4921984249244327,r[:number])
end

def test_costpercapita_r62
  r = spreadsheet.costpercapita_r62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4150313019178635,r[:number])
end

def test_costpercapita_s62
  r = spreadsheet.costpercapita_s62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3490522770168827,r[:number])
end

def test_costpercapita_t62
  r = spreadsheet.costpercapita_t62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2937187161235544,r[:number])
end

def test_costpercapita_u62
  r = spreadsheet.costpercapita_u62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.244801984812815,r[:number])
end

def test_costpercapita_v62
  r = spreadsheet.costpercapita_v62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.200022842359217,r[:number])
end

def test_costpercapita_w62
  r = spreadsheet.costpercapita_w62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.158966598580733,r[:number])
end

def test_costpercapita_y62
  r = spreadsheet.costpercapita_y62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z62
  r = spreadsheet.costpercapita_z62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa62
  r = spreadsheet.costpercapita_aa62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab62
  r = spreadsheet.costpercapita_ab62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac62
  r = spreadsheet.costpercapita_ac62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad62
  r = spreadsheet.costpercapita_ad62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae62
  r = spreadsheet.costpercapita_ae62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af62
  r = spreadsheet.costpercapita_af62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag62
  r = spreadsheet.costpercapita_ag62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai62
  r = spreadsheet.costpercapita_ai62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.368520546486145,r[:number])
end

def test_costpercapita_aj62
  r = spreadsheet.costpercapita_aj62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5765499032932064,r[:number])
end

def test_costpercapita_ak62
  r = spreadsheet.costpercapita_ak62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4921984249244327,r[:number])
end

def test_costpercapita_al62
  r = spreadsheet.costpercapita_al62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4150313019178635,r[:number])
end

def test_costpercapita_am62
  r = spreadsheet.costpercapita_am62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3490522770168827,r[:number])
end

def test_costpercapita_an62
  r = spreadsheet.costpercapita_an62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2937187161235544,r[:number])
end

def test_costpercapita_ao62
  r = spreadsheet.costpercapita_ao62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.244801984812815,r[:number])
end

def test_costpercapita_ap62
  r = spreadsheet.costpercapita_ap62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.200022842359217,r[:number])
end

def test_costpercapita_aq62
  r = spreadsheet.costpercapita_aq62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.158966598580733,r[:number])
end

def test_costpercapita_as62
  r = spreadsheet.costpercapita_as62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5665402883905393,r[:number])
end

def test_costpercapita_at62
  r = spreadsheet.costpercapita_at62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.253782993243114,r[:number])
end

def test_costpercapita_av62
  r = spreadsheet.costpercapita_av62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw62
  r = spreadsheet.costpercapita_aw62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay62
  r = spreadsheet.costpercapita_ay62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5613068717432985,r[:number])
end

def test_costpercapita_az62
  r = spreadsheet.costpercapita_az62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba62
  r = spreadsheet.costpercapita_ba62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb62
  r = spreadsheet.costpercapita_bb62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc62
  r = spreadsheet.costpercapita_bc62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd62
  r = spreadsheet.costpercapita_bd62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be62
  r = spreadsheet.costpercapita_be62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf62
  r = spreadsheet.costpercapita_bf62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg62
  r = spreadsheet.costpercapita_bg62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi62
  r = spreadsheet.costpercapita_bi62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5613068717432985,r[:number])
end

def test_costpercapita_bj62
  r = spreadsheet.costpercapita_bj62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5427977387764762,r[:number])
end

def test_costpercapita_bk62
  r = spreadsheet.costpercapita_bk62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5250275447420031,r[:number])
end

def test_costpercapita_bl62
  r = spreadsheet.costpercapita_bl62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm62
  r = spreadsheet.costpercapita_bm62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn62
  r = spreadsheet.costpercapita_bn62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo62
  r = spreadsheet.costpercapita_bo62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp62
  r = spreadsheet.costpercapita_bp62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq62
  r = spreadsheet.costpercapita_bq62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs62
  r = spreadsheet.costpercapita_bs62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2257158454578456,r[:number])
end

def test_costpercapita_bt62
  r = spreadsheet.costpercapita_bt62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.119347642069682,r[:number])
end

def test_costpercapita_bu62
  r = spreadsheet.costpercapita_bu62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.017225969666436,r[:number])
end

def test_costpercapita_bv62
  r = spreadsheet.costpercapita_bv62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4150313019178635,r[:number])
end

def test_costpercapita_bw62
  r = spreadsheet.costpercapita_bw62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3490522770168827,r[:number])
end

def test_costpercapita_bx62
  r = spreadsheet.costpercapita_bx62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2937187161235544,r[:number])
end

def test_costpercapita_by62
  r = spreadsheet.costpercapita_by62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.244801984812815,r[:number])
end

def test_costpercapita_bz62
  r = spreadsheet.costpercapita_bz62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.200022842359217,r[:number])
end

def test_costpercapita_ca62
  r = spreadsheet.costpercapita_ca62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.158966598580733,r[:number])
end

def test_costpercapita_cc62
  r = spreadsheet.costpercapita_cc62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.558209242000559,r[:number])
end

def test_costpercapita_cd62
  r = spreadsheet.costpercapita_cd62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.25709346853848,r[:number])
end

def test_costpercapita_cf62
  r = spreadsheet.costpercapita_cf62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1428047010282991,r[:number])
end

def test_costpercapita_cg62
  r = spreadsheet.costpercapita_cg62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5427977387764762,r[:number])
end

def test_costpercapita_ch62
  r = spreadsheet.costpercapita_ch62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5250275447420031,r[:number])
end

def test_costpercapita_ci62
  r = spreadsheet.costpercapita_ci62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj62
  r = spreadsheet.costpercapita_cj62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck62
  r = spreadsheet.costpercapita_ck62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl62
  r = spreadsheet.costpercapita_cl62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm62
  r = spreadsheet.costpercapita_cm62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn62
  r = spreadsheet.costpercapita_cn62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp62
  r = spreadsheet.costpercapita_cp62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.008331046389979982,r[:number])
end

def test_costpercapita_cq62
  r = spreadsheet.costpercapita_cq62
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.003310475295354,r[:number])
end

def test_costpercapita_cr62
  r = spreadsheet.costpercapita_cr62
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a63
  r = spreadsheet.costpercapita_a63
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b63
  r = spreadsheet.costpercapita_b63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave and Tidal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c63
  r = spreadsheet.costpercapita_c63
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e63
  r = spreadsheet.costpercapita_e63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09788709996161818,r[:number])
end

def test_costpercapita_f63
  r = spreadsheet.costpercapita_f63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09087212946418462,r[:number])
end

def test_costpercapita_g63
  r = spreadsheet.costpercapita_g63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2474291490722402,r[:number])
end

def test_costpercapita_h63
  r = spreadsheet.costpercapita_h63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7206762646175648,r[:number])
end

def test_costpercapita_i63
  r = spreadsheet.costpercapita_i63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j63
  r = spreadsheet.costpercapita_j63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k63
  r = spreadsheet.costpercapita_k63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0420332185631323,r[:number])
end

def test_costpercapita_l63
  r = spreadsheet.costpercapita_l63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.47926002432709647,r[:number])
end

def test_costpercapita_m63
  r = spreadsheet.costpercapita_m63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5354618060929118,r[:number])
end

def test_costpercapita_o63
  r = spreadsheet.costpercapita_o63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.01240915360268659,r[:number])
end

def test_costpercapita_p63
  r = spreadsheet.costpercapita_p63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04921962687306831,r[:number])
end

def test_costpercapita_q63
  r = spreadsheet.costpercapita_q63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.38735550365423194,r[:number])
end

def test_costpercapita_r63
  r = spreadsheet.costpercapita_r63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8412748981201826,r[:number])
end

def test_costpercapita_s63
  r = spreadsheet.costpercapita_s63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7238155430564502,r[:number])
end

def test_costpercapita_t63
  r = spreadsheet.costpercapita_t63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u63
  r = spreadsheet.costpercapita_u63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v63
  r = spreadsheet.costpercapita_v63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w63
  r = spreadsheet.costpercapita_w63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y63
  r = spreadsheet.costpercapita_y63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z63
  r = spreadsheet.costpercapita_z63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa63
  r = spreadsheet.costpercapita_aa63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab63
  r = spreadsheet.costpercapita_ab63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac63
  r = spreadsheet.costpercapita_ac63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad63
  r = spreadsheet.costpercapita_ad63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae63
  r = spreadsheet.costpercapita_ae63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af63
  r = spreadsheet.costpercapita_af63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag63
  r = spreadsheet.costpercapita_ag63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai63
  r = spreadsheet.costpercapita_ai63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11029625356430478,r[:number])
end

def test_costpercapita_aj63
  r = spreadsheet.costpercapita_aj63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14009175633725293,r[:number])
end

def test_costpercapita_ak63
  r = spreadsheet.costpercapita_ak63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6347846527264722,r[:number])
end

def test_costpercapita_al63
  r = spreadsheet.costpercapita_al63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.561951162737748,r[:number])
end

def test_costpercapita_am63
  r = spreadsheet.costpercapita_am63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7238155430564502,r[:number])
end

def test_costpercapita_an63
  r = spreadsheet.costpercapita_an63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao63
  r = spreadsheet.costpercapita_ao63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0420332185631323,r[:number])
end

def test_costpercapita_ap63
  r = spreadsheet.costpercapita_ap63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.47926002432709647,r[:number])
end

def test_costpercapita_aq63
  r = spreadsheet.costpercapita_aq63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5354618060929118,r[:number])
end

def test_costpercapita_as63
  r = spreadsheet.costpercapita_as63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6919660463783743,r[:number])
end

def test_costpercapita_at63
  r = spreadsheet.costpercapita_at63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.48065662301303,r[:number])
end

def test_costpercapita_av63
  r = spreadsheet.costpercapita_av63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw63
  r = spreadsheet.costpercapita_aw63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay63
  r = spreadsheet.costpercapita_ay63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03224243221006734,r[:number])
end

def test_costpercapita_az63
  r = spreadsheet.costpercapita_az63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04988635675150713,r[:number])
end

def test_costpercapita_ba63
  r = spreadsheet.costpercapita_ba63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6848050763174126,r[:number])
end

def test_costpercapita_bb63
  r = spreadsheet.costpercapita_bb63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9446050235280767,r[:number])
end

def test_costpercapita_bc63
  r = spreadsheet.costpercapita_bc63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd63
  r = spreadsheet.costpercapita_bd63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be63
  r = spreadsheet.costpercapita_be63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.023075107285572456,r[:number])
end

def test_costpercapita_bf63
  r = spreadsheet.costpercapita_bf63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.263100872525944,r[:number])
end

def test_costpercapita_bg63
  r = spreadsheet.costpercapita_bg63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2939541402084719,r[:number])
end

def test_costpercapita_bi63
  r = spreadsheet.costpercapita_bi63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03224243221006734,r[:number])
end

def test_costpercapita_bj63
  r = spreadsheet.costpercapita_bj63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08106559252662539,r[:number])
end

def test_costpercapita_bk63
  r = spreadsheet.costpercapita_bk63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7632167312798087,r[:number])
end

def test_costpercapita_bl63
  r = spreadsheet.costpercapita_bl63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6549652390522929,r[:number])
end

def test_costpercapita_bm63
  r = spreadsheet.costpercapita_bm63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5642697167856456,r[:number])
end

def test_costpercapita_bn63
  r = spreadsheet.costpercapita_bn63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8971553371130463,r[:number])
end

def test_costpercapita_bo63
  r = spreadsheet.costpercapita_bo63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.023075107285572456,r[:number])
end

def test_costpercapita_bp63
  r = spreadsheet.costpercapita_bp63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.28571567929358066,r[:number])
end

def test_costpercapita_bq63
  r = spreadsheet.costpercapita_bq63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5743378691447402,r[:number])
end

def test_costpercapita_bs63
  r = spreadsheet.costpercapita_bs63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04465158581275393,r[:number])
end

def test_costpercapita_bt63
  r = spreadsheet.costpercapita_bt63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1302852193996937,r[:number])
end

def test_costpercapita_bu63
  r = spreadsheet.costpercapita_bu63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1505722349340406,r[:number])
end

def test_costpercapita_bv63
  r = spreadsheet.costpercapita_bv63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4962401371724754,r[:number])
end

def test_costpercapita_bw63
  r = spreadsheet.costpercapita_bw63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.288085259842096,r[:number])
end

def test_costpercapita_bx63
  r = spreadsheet.costpercapita_bx63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8971553371130463,r[:number])
end

def test_costpercapita_by63
  r = spreadsheet.costpercapita_by63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.023075107285572456,r[:number])
end

def test_costpercapita_bz63
  r = spreadsheet.costpercapita_bz63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.28571567929358066,r[:number])
end

def test_costpercapita_ca63
  r = spreadsheet.costpercapita_ca63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5743378691447402,r[:number])
end

def test_costpercapita_cc63
  r = spreadsheet.costpercapita_cc63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8766798255553332,r[:number])
end

def test_costpercapita_cd63
  r = spreadsheet.costpercapita_cd63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.010516126527925,r[:number])
end

def test_costpercapita_cf63
  r = spreadsheet.costpercapita_cf63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06564466775155085,r[:number])
end

def test_costpercapita_cg63
  r = spreadsheet.costpercapita_cg63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.009806536937559222,r[:number])
end

def test_costpercapita_ch63
  r = spreadsheet.costpercapita_ch63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4842124177924316,r[:number])
end

def test_costpercapita_ci63
  r = spreadsheet.costpercapita_ci63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.06571102556527213,r[:number])
end

def test_costpercapita_cj63
  r = spreadsheet.costpercapita_cj63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5642697167856456,r[:number])
end

def test_costpercapita_ck63
  r = spreadsheet.costpercapita_ck63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8971553371130463,r[:number])
end

def test_costpercapita_cl63
  r = spreadsheet.costpercapita_cl63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.018958111277559846,r[:number])
end

def test_costpercapita_cm63
  r = spreadsheet.costpercapita_cm63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.1935443450335158,r[:number])
end

def test_costpercapita_cn63
  r = spreadsheet.costpercapita_cn63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.038876063051828315,r[:number])
end

def test_costpercapita_cp63
  r = spreadsheet.costpercapita_cp63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.18471377917695897,r[:number])
end

def test_costpercapita_cq63
  r = spreadsheet.costpercapita_cq63
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.529859503514897,r[:number])
end

def test_costpercapita_cr63
  r = spreadsheet.costpercapita_cr63
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a64
  r = spreadsheet.costpercapita_a64
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b64
  r = spreadsheet.costpercapita_b64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c64
  r = spreadsheet.costpercapita_c64
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e64
  r = spreadsheet.costpercapita_e64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f64
  r = spreadsheet.costpercapita_f64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g64
  r = spreadsheet.costpercapita_g64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h64
  r = spreadsheet.costpercapita_h64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i64
  r = spreadsheet.costpercapita_i64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j64
  r = spreadsheet.costpercapita_j64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k64
  r = spreadsheet.costpercapita_k64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l64
  r = spreadsheet.costpercapita_l64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m64
  r = spreadsheet.costpercapita_m64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o64
  r = spreadsheet.costpercapita_o64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p64
  r = spreadsheet.costpercapita_p64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q64
  r = spreadsheet.costpercapita_q64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r64
  r = spreadsheet.costpercapita_r64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s64
  r = spreadsheet.costpercapita_s64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t64
  r = spreadsheet.costpercapita_t64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u64
  r = spreadsheet.costpercapita_u64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v64
  r = spreadsheet.costpercapita_v64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w64
  r = spreadsheet.costpercapita_w64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y64
  r = spreadsheet.costpercapita_y64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z64
  r = spreadsheet.costpercapita_z64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa64
  r = spreadsheet.costpercapita_aa64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab64
  r = spreadsheet.costpercapita_ab64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac64
  r = spreadsheet.costpercapita_ac64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad64
  r = spreadsheet.costpercapita_ad64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae64
  r = spreadsheet.costpercapita_ae64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af64
  r = spreadsheet.costpercapita_af64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag64
  r = spreadsheet.costpercapita_ag64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai64
  r = spreadsheet.costpercapita_ai64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj64
  r = spreadsheet.costpercapita_aj64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak64
  r = spreadsheet.costpercapita_ak64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al64
  r = spreadsheet.costpercapita_al64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am64
  r = spreadsheet.costpercapita_am64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an64
  r = spreadsheet.costpercapita_an64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao64
  r = spreadsheet.costpercapita_ao64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap64
  r = spreadsheet.costpercapita_ap64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq64
  r = spreadsheet.costpercapita_aq64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as64
  r = spreadsheet.costpercapita_as64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at64
  r = spreadsheet.costpercapita_at64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av64
  r = spreadsheet.costpercapita_av64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw64
  r = spreadsheet.costpercapita_aw64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay64
  r = spreadsheet.costpercapita_ay64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az64
  r = spreadsheet.costpercapita_az64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba64
  r = spreadsheet.costpercapita_ba64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb64
  r = spreadsheet.costpercapita_bb64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc64
  r = spreadsheet.costpercapita_bc64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd64
  r = spreadsheet.costpercapita_bd64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be64
  r = spreadsheet.costpercapita_be64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf64
  r = spreadsheet.costpercapita_bf64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg64
  r = spreadsheet.costpercapita_bg64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi64
  r = spreadsheet.costpercapita_bi64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj64
  r = spreadsheet.costpercapita_bj64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk64
  r = spreadsheet.costpercapita_bk64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl64
  r = spreadsheet.costpercapita_bl64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm64
  r = spreadsheet.costpercapita_bm64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn64
  r = spreadsheet.costpercapita_bn64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo64
  r = spreadsheet.costpercapita_bo64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp64
  r = spreadsheet.costpercapita_bp64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq64
  r = spreadsheet.costpercapita_bq64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs64
  r = spreadsheet.costpercapita_bs64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt64
  r = spreadsheet.costpercapita_bt64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu64
  r = spreadsheet.costpercapita_bu64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv64
  r = spreadsheet.costpercapita_bv64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw64
  r = spreadsheet.costpercapita_bw64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx64
  r = spreadsheet.costpercapita_bx64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by64
  r = spreadsheet.costpercapita_by64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz64
  r = spreadsheet.costpercapita_bz64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca64
  r = spreadsheet.costpercapita_ca64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc64
  r = spreadsheet.costpercapita_cc64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd64
  r = spreadsheet.costpercapita_cd64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf64
  r = spreadsheet.costpercapita_cf64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg64
  r = spreadsheet.costpercapita_cg64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch64
  r = spreadsheet.costpercapita_ch64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci64
  r = spreadsheet.costpercapita_ci64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj64
  r = spreadsheet.costpercapita_cj64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck64
  r = spreadsheet.costpercapita_ck64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl64
  r = spreadsheet.costpercapita_cl64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm64
  r = spreadsheet.costpercapita_cm64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn64
  r = spreadsheet.costpercapita_cn64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp64
  r = spreadsheet.costpercapita_cp64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq64
  r = spreadsheet.costpercapita_cq64
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr64
  r = spreadsheet.costpercapita_cr64
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a65
  r = spreadsheet.costpercapita_a65
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b65
  r = spreadsheet.costpercapita_b65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar PV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c65
  r = spreadsheet.costpercapita_c65
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e65
  r = spreadsheet.costpercapita_e65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3619779993482142,r[:number])
end

def test_costpercapita_f65
  r = spreadsheet.costpercapita_f65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g65
  r = spreadsheet.costpercapita_g65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h65
  r = spreadsheet.costpercapita_h65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i65
  r = spreadsheet.costpercapita_i65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j65
  r = spreadsheet.costpercapita_j65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k65
  r = spreadsheet.costpercapita_k65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l65
  r = spreadsheet.costpercapita_l65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m65
  r = spreadsheet.costpercapita_m65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o65
  r = spreadsheet.costpercapita_o65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p65
  r = spreadsheet.costpercapita_p65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q65
  r = spreadsheet.costpercapita_q65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r65
  r = spreadsheet.costpercapita_r65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s65
  r = spreadsheet.costpercapita_s65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t65
  r = spreadsheet.costpercapita_t65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u65
  r = spreadsheet.costpercapita_u65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v65
  r = spreadsheet.costpercapita_v65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w65
  r = spreadsheet.costpercapita_w65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y65
  r = spreadsheet.costpercapita_y65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z65
  r = spreadsheet.costpercapita_z65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa65
  r = spreadsheet.costpercapita_aa65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab65
  r = spreadsheet.costpercapita_ab65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac65
  r = spreadsheet.costpercapita_ac65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad65
  r = spreadsheet.costpercapita_ad65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae65
  r = spreadsheet.costpercapita_ae65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af65
  r = spreadsheet.costpercapita_af65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag65
  r = spreadsheet.costpercapita_ag65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai65
  r = spreadsheet.costpercapita_ai65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3619779993482142,r[:number])
end

def test_costpercapita_aj65
  r = spreadsheet.costpercapita_aj65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak65
  r = spreadsheet.costpercapita_ak65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al65
  r = spreadsheet.costpercapita_al65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am65
  r = spreadsheet.costpercapita_am65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an65
  r = spreadsheet.costpercapita_an65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao65
  r = spreadsheet.costpercapita_ao65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap65
  r = spreadsheet.costpercapita_ap65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq65
  r = spreadsheet.costpercapita_aq65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as65
  r = spreadsheet.costpercapita_as65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04021977770535713,r[:number])
end

def test_costpercapita_at65
  r = spreadsheet.costpercapita_at65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3619779993482142,r[:number])
end

def test_costpercapita_av65
  r = spreadsheet.costpercapita_av65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw65
  r = spreadsheet.costpercapita_aw65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay65
  r = spreadsheet.costpercapita_ay65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1192297157653751,r[:number])
end

def test_costpercapita_az65
  r = spreadsheet.costpercapita_az65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba65
  r = spreadsheet.costpercapita_ba65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb65
  r = spreadsheet.costpercapita_bb65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc65
  r = spreadsheet.costpercapita_bc65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd65
  r = spreadsheet.costpercapita_bd65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be65
  r = spreadsheet.costpercapita_be65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf65
  r = spreadsheet.costpercapita_bf65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg65
  r = spreadsheet.costpercapita_bg65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi65
  r = spreadsheet.costpercapita_bi65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1192297157653751,r[:number])
end

def test_costpercapita_bj65
  r = spreadsheet.costpercapita_bj65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11529810763122952,r[:number])
end

def test_costpercapita_bk65
  r = spreadsheet.costpercapita_bk65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.111523460837319,r[:number])
end

def test_costpercapita_bl65
  r = spreadsheet.costpercapita_bl65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm65
  r = spreadsheet.costpercapita_bm65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn65
  r = spreadsheet.costpercapita_bn65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo65
  r = spreadsheet.costpercapita_bo65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp65
  r = spreadsheet.costpercapita_bp65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq65
  r = spreadsheet.costpercapita_bq65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs65
  r = spreadsheet.costpercapita_bs65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1192297157653751,r[:number])
end

def test_costpercapita_bt65
  r = spreadsheet.costpercapita_bt65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11529810763122952,r[:number])
end

def test_costpercapita_bu65
  r = spreadsheet.costpercapita_bu65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.111523460837319,r[:number])
end

def test_costpercapita_bv65
  r = spreadsheet.costpercapita_bv65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw65
  r = spreadsheet.costpercapita_bw65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx65
  r = spreadsheet.costpercapita_bx65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by65
  r = spreadsheet.costpercapita_by65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz65
  r = spreadsheet.costpercapita_bz65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca65
  r = spreadsheet.costpercapita_ca65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc65
  r = spreadsheet.costpercapita_cc65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03845014269265818,r[:number])
end

def test_costpercapita_cd65
  r = spreadsheet.costpercapita_cd65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9999246776286838,r[:number])
end

def test_costpercapita_cf65
  r = spreadsheet.costpercapita_cf65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.24274828358283906,r[:number])
end

def test_costpercapita_cg65
  r = spreadsheet.costpercapita_cg65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11529810763122952,r[:number])
end

def test_costpercapita_ch65
  r = spreadsheet.costpercapita_ch65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.111523460837319,r[:number])
end

def test_costpercapita_ci65
  r = spreadsheet.costpercapita_ci65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj65
  r = spreadsheet.costpercapita_cj65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck65
  r = spreadsheet.costpercapita_ck65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl65
  r = spreadsheet.costpercapita_cl65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm65
  r = spreadsheet.costpercapita_cm65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn65
  r = spreadsheet.costpercapita_cn65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp65
  r = spreadsheet.costpercapita_cp65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.0017696350126989492,r[:number])
end

def test_costpercapita_cq65
  r = spreadsheet.costpercapita_cq65
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6379466782804696,r[:number])
end

def test_costpercapita_cr65
  r = spreadsheet.costpercapita_cr65
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a66
  r = spreadsheet.costpercapita_a66
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b66
  r = spreadsheet.costpercapita_b66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar thermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c66
  r = spreadsheet.costpercapita_c66
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e66
  r = spreadsheet.costpercapita_e66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f66
  r = spreadsheet.costpercapita_f66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g66
  r = spreadsheet.costpercapita_g66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h66
  r = spreadsheet.costpercapita_h66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i66
  r = spreadsheet.costpercapita_i66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j66
  r = spreadsheet.costpercapita_j66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k66
  r = spreadsheet.costpercapita_k66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l66
  r = spreadsheet.costpercapita_l66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m66
  r = spreadsheet.costpercapita_m66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o66
  r = spreadsheet.costpercapita_o66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p66
  r = spreadsheet.costpercapita_p66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q66
  r = spreadsheet.costpercapita_q66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r66
  r = spreadsheet.costpercapita_r66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s66
  r = spreadsheet.costpercapita_s66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t66
  r = spreadsheet.costpercapita_t66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u66
  r = spreadsheet.costpercapita_u66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v66
  r = spreadsheet.costpercapita_v66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w66
  r = spreadsheet.costpercapita_w66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y66
  r = spreadsheet.costpercapita_y66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z66
  r = spreadsheet.costpercapita_z66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa66
  r = spreadsheet.costpercapita_aa66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab66
  r = spreadsheet.costpercapita_ab66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac66
  r = spreadsheet.costpercapita_ac66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad66
  r = spreadsheet.costpercapita_ad66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae66
  r = spreadsheet.costpercapita_ae66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af66
  r = spreadsheet.costpercapita_af66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag66
  r = spreadsheet.costpercapita_ag66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai66
  r = spreadsheet.costpercapita_ai66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj66
  r = spreadsheet.costpercapita_aj66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak66
  r = spreadsheet.costpercapita_ak66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al66
  r = spreadsheet.costpercapita_al66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am66
  r = spreadsheet.costpercapita_am66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an66
  r = spreadsheet.costpercapita_an66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao66
  r = spreadsheet.costpercapita_ao66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap66
  r = spreadsheet.costpercapita_ap66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq66
  r = spreadsheet.costpercapita_aq66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as66
  r = spreadsheet.costpercapita_as66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at66
  r = spreadsheet.costpercapita_at66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av66
  r = spreadsheet.costpercapita_av66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw66
  r = spreadsheet.costpercapita_aw66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay66
  r = spreadsheet.costpercapita_ay66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az66
  r = spreadsheet.costpercapita_az66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba66
  r = spreadsheet.costpercapita_ba66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb66
  r = spreadsheet.costpercapita_bb66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc66
  r = spreadsheet.costpercapita_bc66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd66
  r = spreadsheet.costpercapita_bd66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be66
  r = spreadsheet.costpercapita_be66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf66
  r = spreadsheet.costpercapita_bf66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg66
  r = spreadsheet.costpercapita_bg66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi66
  r = spreadsheet.costpercapita_bi66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj66
  r = spreadsheet.costpercapita_bj66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk66
  r = spreadsheet.costpercapita_bk66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl66
  r = spreadsheet.costpercapita_bl66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm66
  r = spreadsheet.costpercapita_bm66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn66
  r = spreadsheet.costpercapita_bn66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo66
  r = spreadsheet.costpercapita_bo66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp66
  r = spreadsheet.costpercapita_bp66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq66
  r = spreadsheet.costpercapita_bq66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs66
  r = spreadsheet.costpercapita_bs66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt66
  r = spreadsheet.costpercapita_bt66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu66
  r = spreadsheet.costpercapita_bu66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv66
  r = spreadsheet.costpercapita_bv66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw66
  r = spreadsheet.costpercapita_bw66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx66
  r = spreadsheet.costpercapita_bx66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by66
  r = spreadsheet.costpercapita_by66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz66
  r = spreadsheet.costpercapita_bz66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca66
  r = spreadsheet.costpercapita_ca66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc66
  r = spreadsheet.costpercapita_cc66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd66
  r = spreadsheet.costpercapita_cd66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf66
  r = spreadsheet.costpercapita_cf66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg66
  r = spreadsheet.costpercapita_cg66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch66
  r = spreadsheet.costpercapita_ch66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci66
  r = spreadsheet.costpercapita_ci66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj66
  r = spreadsheet.costpercapita_cj66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck66
  r = spreadsheet.costpercapita_ck66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl66
  r = spreadsheet.costpercapita_cl66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm66
  r = spreadsheet.costpercapita_cm66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn66
  r = spreadsheet.costpercapita_cn66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp66
  r = spreadsheet.costpercapita_cp66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq66
  r = spreadsheet.costpercapita_cq66
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr66
  r = spreadsheet.costpercapita_cr66
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a67
  r = spreadsheet.costpercapita_a67
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b67
  r = spreadsheet.costpercapita_b67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c67
  r = spreadsheet.costpercapita_c67
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e67
  r = spreadsheet.costpercapita_e67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f67
  r = spreadsheet.costpercapita_f67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g67
  r = spreadsheet.costpercapita_g67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h67
  r = spreadsheet.costpercapita_h67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i67
  r = spreadsheet.costpercapita_i67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j67
  r = spreadsheet.costpercapita_j67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k67
  r = spreadsheet.costpercapita_k67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l67
  r = spreadsheet.costpercapita_l67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m67
  r = spreadsheet.costpercapita_m67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o67
  r = spreadsheet.costpercapita_o67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p67
  r = spreadsheet.costpercapita_p67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q67
  r = spreadsheet.costpercapita_q67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r67
  r = spreadsheet.costpercapita_r67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s67
  r = spreadsheet.costpercapita_s67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t67
  r = spreadsheet.costpercapita_t67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u67
  r = spreadsheet.costpercapita_u67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v67
  r = spreadsheet.costpercapita_v67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w67
  r = spreadsheet.costpercapita_w67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y67
  r = spreadsheet.costpercapita_y67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z67
  r = spreadsheet.costpercapita_z67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa67
  r = spreadsheet.costpercapita_aa67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab67
  r = spreadsheet.costpercapita_ab67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac67
  r = spreadsheet.costpercapita_ac67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad67
  r = spreadsheet.costpercapita_ad67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae67
  r = spreadsheet.costpercapita_ae67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af67
  r = spreadsheet.costpercapita_af67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag67
  r = spreadsheet.costpercapita_ag67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai67
  r = spreadsheet.costpercapita_ai67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj67
  r = spreadsheet.costpercapita_aj67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak67
  r = spreadsheet.costpercapita_ak67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al67
  r = spreadsheet.costpercapita_al67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am67
  r = spreadsheet.costpercapita_am67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an67
  r = spreadsheet.costpercapita_an67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao67
  r = spreadsheet.costpercapita_ao67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap67
  r = spreadsheet.costpercapita_ap67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq67
  r = spreadsheet.costpercapita_aq67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as67
  r = spreadsheet.costpercapita_as67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at67
  r = spreadsheet.costpercapita_at67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av67
  r = spreadsheet.costpercapita_av67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw67
  r = spreadsheet.costpercapita_aw67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay67
  r = spreadsheet.costpercapita_ay67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az67
  r = spreadsheet.costpercapita_az67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba67
  r = spreadsheet.costpercapita_ba67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb67
  r = spreadsheet.costpercapita_bb67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc67
  r = spreadsheet.costpercapita_bc67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd67
  r = spreadsheet.costpercapita_bd67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be67
  r = spreadsheet.costpercapita_be67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf67
  r = spreadsheet.costpercapita_bf67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg67
  r = spreadsheet.costpercapita_bg67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi67
  r = spreadsheet.costpercapita_bi67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj67
  r = spreadsheet.costpercapita_bj67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk67
  r = spreadsheet.costpercapita_bk67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl67
  r = spreadsheet.costpercapita_bl67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm67
  r = spreadsheet.costpercapita_bm67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn67
  r = spreadsheet.costpercapita_bn67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo67
  r = spreadsheet.costpercapita_bo67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp67
  r = spreadsheet.costpercapita_bp67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq67
  r = spreadsheet.costpercapita_bq67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs67
  r = spreadsheet.costpercapita_bs67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt67
  r = spreadsheet.costpercapita_bt67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu67
  r = spreadsheet.costpercapita_bu67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv67
  r = spreadsheet.costpercapita_bv67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw67
  r = spreadsheet.costpercapita_bw67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx67
  r = spreadsheet.costpercapita_bx67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by67
  r = spreadsheet.costpercapita_by67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz67
  r = spreadsheet.costpercapita_bz67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca67
  r = spreadsheet.costpercapita_ca67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc67
  r = spreadsheet.costpercapita_cc67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd67
  r = spreadsheet.costpercapita_cd67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf67
  r = spreadsheet.costpercapita_cf67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg67
  r = spreadsheet.costpercapita_cg67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch67
  r = spreadsheet.costpercapita_ch67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci67
  r = spreadsheet.costpercapita_ci67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj67
  r = spreadsheet.costpercapita_cj67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck67
  r = spreadsheet.costpercapita_ck67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl67
  r = spreadsheet.costpercapita_cl67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm67
  r = spreadsheet.costpercapita_cm67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn67
  r = spreadsheet.costpercapita_cn67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp67
  r = spreadsheet.costpercapita_cp67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq67
  r = spreadsheet.costpercapita_cq67
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr67
  r = spreadsheet.costpercapita_cr67
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a68
  r = spreadsheet.costpercapita_a68
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b68
  r = spreadsheet.costpercapita_b68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomatter to fuel conversion",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c68
  r = spreadsheet.costpercapita_c68
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e68
  r = spreadsheet.costpercapita_e68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.837305121361291,r[:number])
end

def test_costpercapita_f68
  r = spreadsheet.costpercapita_f68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.13187373869311,r[:number])
end

def test_costpercapita_g68
  r = spreadsheet.costpercapita_g68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.509493416109793,r[:number])
end

def test_costpercapita_h68
  r = spreadsheet.costpercapita_h68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.385883296981334,r[:number])
end

def test_costpercapita_i68
  r = spreadsheet.costpercapita_i68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.262228583384037,r[:number])
end

def test_costpercapita_j68
  r = spreadsheet.costpercapita_j68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.477342027863205,r[:number])
end

def test_costpercapita_k68
  r = spreadsheet.costpercapita_k68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.728391390881963,r[:number])
end

def test_costpercapita_l68
  r = spreadsheet.costpercapita_l68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.005932524673305,r[:number])
end

def test_costpercapita_m68
  r = spreadsheet.costpercapita_m68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.002931137249619,r[:number])
end

def test_costpercapita_o68
  r = spreadsheet.costpercapita_o68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.358939981441136,r[:number])
end

def test_costpercapita_p68
  r = spreadsheet.costpercapita_p68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.68685913297867,r[:number])
end

def test_costpercapita_q68
  r = spreadsheet.costpercapita_q68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.229204380457073,r[:number])
end

def test_costpercapita_r68
  r = spreadsheet.costpercapita_r68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.144007052728025,r[:number])
end

def test_costpercapita_s68
  r = spreadsheet.costpercapita_s68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.673719599244137,r[:number])
end

def test_costpercapita_t68
  r = spreadsheet.costpercapita_t68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.106511469899967,r[:number])
end

def test_costpercapita_u68
  r = spreadsheet.costpercapita_u68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.606895707881886,r[:number])
end

def test_costpercapita_v68
  r = spreadsheet.costpercapita_v68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.162415226992465,r[:number])
end

def test_costpercapita_w68
  r = spreadsheet.costpercapita_w68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.785771152809943,r[:number])
end

def test_costpercapita_y68
  r = spreadsheet.costpercapita_y68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z68
  r = spreadsheet.costpercapita_z68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa68
  r = spreadsheet.costpercapita_aa68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab68
  r = spreadsheet.costpercapita_ab68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac68
  r = spreadsheet.costpercapita_ac68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad68
  r = spreadsheet.costpercapita_ad68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae68
  r = spreadsheet.costpercapita_ae68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af68
  r = spreadsheet.costpercapita_af68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag68
  r = spreadsheet.costpercapita_ag68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai68
  r = spreadsheet.costpercapita_ai68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.19624510280243,r[:number])
end

def test_costpercapita_aj68
  r = spreadsheet.costpercapita_aj68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.81873287167178,r[:number])
end

def test_costpercapita_ak68
  r = spreadsheet.costpercapita_ak68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.738697796566868,r[:number])
end

def test_costpercapita_al68
  r = spreadsheet.costpercapita_al68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.52989034970936,r[:number])
end

def test_costpercapita_am68
  r = spreadsheet.costpercapita_am68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.935948182628174,r[:number])
end

def test_costpercapita_an68
  r = spreadsheet.costpercapita_an68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.58385349776317,r[:number])
end

def test_costpercapita_ao68
  r = spreadsheet.costpercapita_ao68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.33528709876385,r[:number])
end

def test_costpercapita_ap68
  r = spreadsheet.costpercapita_ap68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.16834775166577,r[:number])
end

def test_costpercapita_aq68
  r = spreadsheet.costpercapita_aq68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.78870229005956,r[:number])
end

def test_costpercapita_as68
  r = spreadsheet.costpercapita_as68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.01063388240344,r[:number])
end

def test_costpercapita_at68
  r = spreadsheet.costpercapita_at68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(541.5943030172721,r[:number])
end

def test_costpercapita_av68
  r = spreadsheet.costpercapita_av68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw68
  r = spreadsheet.costpercapita_aw68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay68
  r = spreadsheet.costpercapita_ay68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.581481923401418,r[:number])
end

def test_costpercapita_az68
  r = spreadsheet.costpercapita_az68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.502884484834262,r[:number])
end

def test_costpercapita_ba68
  r = spreadsheet.costpercapita_ba68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.318402550602401,r[:number])
end

def test_costpercapita_bb68
  r = spreadsheet.costpercapita_bb68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.603624546892523,r[:number])
end

def test_costpercapita_bc68
  r = spreadsheet.costpercapita_bc68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.5357414325328955,r[:number])
end

def test_costpercapita_bd68
  r = spreadsheet.costpercapita_bd68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.653832932056551,r[:number])
end

def test_costpercapita_be68
  r = spreadsheet.costpercapita_be68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.791652285026907,r[:number])
end

def test_costpercapita_bf68
  r = spreadsheet.costpercapita_bf68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.944014908145468,r[:number])
end

def test_costpercapita_bg68
  r = spreadsheet.costpercapita_bg68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.844420980106573,r[:number])
end

def test_costpercapita_bi68
  r = spreadsheet.costpercapita_bi68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.581481923401418,r[:number])
end

def test_costpercapita_bj68
  r = spreadsheet.costpercapita_bj68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.9992418630412,r[:number])
end

def test_costpercapita_bk68
  r = spreadsheet.costpercapita_bk68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.892073277831607,r[:number])
end

def test_costpercapita_bl68
  r = spreadsheet.costpercapita_bl68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.570867709880584,r[:number])
end

def test_costpercapita_bm68
  r = spreadsheet.costpercapita_bm68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.969082286251059,r[:number])
end

def test_costpercapita_bn68
  r = spreadsheet.costpercapita_bn68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.455105699653306,r[:number])
end

def test_costpercapita_bo68
  r = spreadsheet.costpercapita_bo68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.68068225706566,r[:number])
end

def test_costpercapita_bp68
  r = spreadsheet.costpercapita_bp68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.103812672776046,r[:number])
end

def test_costpercapita_bq68
  r = spreadsheet.costpercapita_bq68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.304603962080266,r[:number])
end

def test_costpercapita_bs68
  r = spreadsheet.costpercapita_bs68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.940421904842554,r[:number])
end

def test_costpercapita_bt68
  r = spreadsheet.costpercapita_bt68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.68610099601987,r[:number])
end

def test_costpercapita_bu68
  r = spreadsheet.costpercapita_bu68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.121277658288676,r[:number])
end

def test_costpercapita_bv68
  r = spreadsheet.costpercapita_bv68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.71487476260861,r[:number])
end

def test_costpercapita_bw68
  r = spreadsheet.costpercapita_bw68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.642801885495192,r[:number])
end

def test_costpercapita_bx68
  r = spreadsheet.costpercapita_bx68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.561617169553273,r[:number])
end

def test_costpercapita_by68
  r = spreadsheet.costpercapita_by68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.287577964947545,r[:number])
end

def test_costpercapita_bz68
  r = spreadsheet.costpercapita_bz68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.26622789976851,r[:number])
end

def test_costpercapita_ca68
  r = spreadsheet.costpercapita_ca68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.09037511489021,r[:number])
end

def test_costpercapita_cc68
  r = spreadsheet.costpercapita_cc68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.034586150712716,r[:number])
end

def test_costpercapita_cd68
  r = spreadsheet.costpercapita_cd68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(625.448106419317,r[:number])
end

def test_costpercapita_cf68
  r = spreadsheet.costpercapita_cf68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.255823197959874,r[:number])
end

def test_costpercapita_cg68
  r = spreadsheet.costpercapita_cg68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.13263187565191,r[:number])
end

def test_costpercapita_ch68
  r = spreadsheet.costpercapita_ch68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.382579861721813,r[:number])
end

def test_costpercapita_ci68
  r = spreadsheet.costpercapita_ci68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.184984412899249,r[:number])
end

def test_costpercapita_cj68
  r = spreadsheet.costpercapita_cj68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.70685370286702,r[:number])
end

def test_costpercapita_ck68
  r = spreadsheet.costpercapita_ck68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.977763671790101,r[:number])
end

def test_costpercapita_cl68
  r = spreadsheet.costpercapita_cl68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.952290866183697,r[:number])
end

def test_costpercapita_cm68
  r = spreadsheet.costpercapita_cm68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.097880148102741,r[:number])
end

def test_costpercapita_cn68
  r = spreadsheet.costpercapita_cn68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.301672824830647,r[:number])
end

def test_costpercapita_cp68
  r = spreadsheet.costpercapita_cp68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.0239522683092765,r[:number])
end

def test_costpercapita_cq68
  r = spreadsheet.costpercapita_cq68
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.85380340204497,r[:number])
end

def test_costpercapita_cr68
  r = spreadsheet.costpercapita_cr68
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a69
  r = spreadsheet.costpercapita_a69
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b69
  r = spreadsheet.costpercapita_b69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c69
  r = spreadsheet.costpercapita_c69
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e69
  r = spreadsheet.costpercapita_e69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f69
  r = spreadsheet.costpercapita_f69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g69
  r = spreadsheet.costpercapita_g69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h69
  r = spreadsheet.costpercapita_h69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i69
  r = spreadsheet.costpercapita_i69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j69
  r = spreadsheet.costpercapita_j69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k69
  r = spreadsheet.costpercapita_k69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l69
  r = spreadsheet.costpercapita_l69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m69
  r = spreadsheet.costpercapita_m69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o69
  r = spreadsheet.costpercapita_o69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p69
  r = spreadsheet.costpercapita_p69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q69
  r = spreadsheet.costpercapita_q69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r69
  r = spreadsheet.costpercapita_r69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s69
  r = spreadsheet.costpercapita_s69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t69
  r = spreadsheet.costpercapita_t69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u69
  r = spreadsheet.costpercapita_u69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v69
  r = spreadsheet.costpercapita_v69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w69
  r = spreadsheet.costpercapita_w69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y69
  r = spreadsheet.costpercapita_y69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3035069891591418,r[:number])
end

def test_costpercapita_z69
  r = spreadsheet.costpercapita_z69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.820209521628868,r[:number])
end

def test_costpercapita_aa69
  r = spreadsheet.costpercapita_aa69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3588756730261733,r[:number])
end

def test_costpercapita_ab69
  r = spreadsheet.costpercapita_ab69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9215732372325443,r[:number])
end

def test_costpercapita_ac69
  r = spreadsheet.costpercapita_ac69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5082627145448928,r[:number])
end

def test_costpercapita_ad69
  r = spreadsheet.costpercapita_ad69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1140728931626787,r[:number])
end

def test_costpercapita_ae69
  r = spreadsheet.costpercapita_ae69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7330884434756474,r[:number])
end

def test_costpercapita_af69
  r = spreadsheet.costpercapita_af69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3622767675438072,r[:number])
end

def test_costpercapita_ag69
  r = spreadsheet.costpercapita_ag69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai69
  r = spreadsheet.costpercapita_ai69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3035069891591418,r[:number])
end

def test_costpercapita_aj69
  r = spreadsheet.costpercapita_aj69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.820209521628868,r[:number])
end

def test_costpercapita_ak69
  r = spreadsheet.costpercapita_ak69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3588756730261733,r[:number])
end

def test_costpercapita_al69
  r = spreadsheet.costpercapita_al69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9215732372325443,r[:number])
end

def test_costpercapita_am69
  r = spreadsheet.costpercapita_am69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5082627145448928,r[:number])
end

def test_costpercapita_an69
  r = spreadsheet.costpercapita_an69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1140728931626787,r[:number])
end

def test_costpercapita_ao69
  r = spreadsheet.costpercapita_ao69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7330884434756474,r[:number])
end

def test_costpercapita_ap69
  r = spreadsheet.costpercapita_ap69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3622767675438072,r[:number])
end

def test_costpercapita_aq69
  r = spreadsheet.costpercapita_aq69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as69
  r = spreadsheet.costpercapita_as69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5690962488637503,r[:number])
end

def test_costpercapita_at69
  r = spreadsheet.costpercapita_at69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.28201099422924,r[:number])
end

def test_costpercapita_av69
  r = spreadsheet.costpercapita_av69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw69
  r = spreadsheet.costpercapita_aw69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay69
  r = spreadsheet.costpercapita_ay69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az69
  r = spreadsheet.costpercapita_az69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba69
  r = spreadsheet.costpercapita_ba69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb69
  r = spreadsheet.costpercapita_bb69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc69
  r = spreadsheet.costpercapita_bc69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd69
  r = spreadsheet.costpercapita_bd69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be69
  r = spreadsheet.costpercapita_be69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf69
  r = spreadsheet.costpercapita_bf69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg69
  r = spreadsheet.costpercapita_bg69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi69
  r = spreadsheet.costpercapita_bi69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj69
  r = spreadsheet.costpercapita_bj69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk69
  r = spreadsheet.costpercapita_bk69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl69
  r = spreadsheet.costpercapita_bl69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm69
  r = spreadsheet.costpercapita_bm69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn69
  r = spreadsheet.costpercapita_bn69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo69
  r = spreadsheet.costpercapita_bo69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp69
  r = spreadsheet.costpercapita_bp69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq69
  r = spreadsheet.costpercapita_bq69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs69
  r = spreadsheet.costpercapita_bs69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3035069891591418,r[:number])
end

def test_costpercapita_bt69
  r = spreadsheet.costpercapita_bt69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.820209521628868,r[:number])
end

def test_costpercapita_bu69
  r = spreadsheet.costpercapita_bu69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3588756730261733,r[:number])
end

def test_costpercapita_bv69
  r = spreadsheet.costpercapita_bv69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9215732372325443,r[:number])
end

def test_costpercapita_bw69
  r = spreadsheet.costpercapita_bw69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5082627145448928,r[:number])
end

def test_costpercapita_bx69
  r = spreadsheet.costpercapita_bx69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1140728931626787,r[:number])
end

def test_costpercapita_by69
  r = spreadsheet.costpercapita_by69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7330884434756474,r[:number])
end

def test_costpercapita_bz69
  r = spreadsheet.costpercapita_bz69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3622767675438072,r[:number])
end

def test_costpercapita_ca69
  r = spreadsheet.costpercapita_ca69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc69
  r = spreadsheet.costpercapita_cc69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5690962488637503,r[:number])
end

def test_costpercapita_cd69
  r = spreadsheet.costpercapita_cd69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.28201099422924,r[:number])
end

def test_costpercapita_cf69
  r = spreadsheet.costpercapita_cf69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg69
  r = spreadsheet.costpercapita_cg69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch69
  r = spreadsheet.costpercapita_ch69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci69
  r = spreadsheet.costpercapita_ci69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj69
  r = spreadsheet.costpercapita_cj69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck69
  r = spreadsheet.costpercapita_ck69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl69
  r = spreadsheet.costpercapita_cl69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm69
  r = spreadsheet.costpercapita_cm69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn69
  r = spreadsheet.costpercapita_cn69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp69
  r = spreadsheet.costpercapita_cp69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq69
  r = spreadsheet.costpercapita_cq69
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr69
  r = spreadsheet.costpercapita_cr69
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a70
  r = spreadsheet.costpercapita_a70
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b70
  r = spreadsheet.costpercapita_b70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c70
  r = spreadsheet.costpercapita_c70
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e70
  r = spreadsheet.costpercapita_e70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f70
  r = spreadsheet.costpercapita_f70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g70
  r = spreadsheet.costpercapita_g70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h70
  r = spreadsheet.costpercapita_h70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i70
  r = spreadsheet.costpercapita_i70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j70
  r = spreadsheet.costpercapita_j70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k70
  r = spreadsheet.costpercapita_k70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l70
  r = spreadsheet.costpercapita_l70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m70
  r = spreadsheet.costpercapita_m70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o70
  r = spreadsheet.costpercapita_o70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p70
  r = spreadsheet.costpercapita_p70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q70
  r = spreadsheet.costpercapita_q70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r70
  r = spreadsheet.costpercapita_r70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s70
  r = spreadsheet.costpercapita_s70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t70
  r = spreadsheet.costpercapita_t70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u70
  r = spreadsheet.costpercapita_u70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v70
  r = spreadsheet.costpercapita_v70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w70
  r = spreadsheet.costpercapita_w70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y70
  r = spreadsheet.costpercapita_y70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.261715332251098,r[:number])
end

def test_costpercapita_z70
  r = spreadsheet.costpercapita_z70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.571114975637427,r[:number])
end

def test_costpercapita_aa70
  r = spreadsheet.costpercapita_aa70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.446240392791303,r[:number])
end

def test_costpercapita_ab70
  r = spreadsheet.costpercapita_ab70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.98429272578636,r[:number])
end

def test_costpercapita_ac70
  r = spreadsheet.costpercapita_ac70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.561785765485338,r[:number])
end

def test_costpercapita_ad70
  r = spreadsheet.costpercapita_ad70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.187358335766367,r[:number])
end

def test_costpercapita_ae70
  r = spreadsheet.costpercapita_ae70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.843547354038474,r[:number])
end

def test_costpercapita_af70
  r = spreadsheet.costpercapita_af70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.520760152773093,r[:number])
end

def test_costpercapita_ag70
  r = spreadsheet.costpercapita_ag70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.220551901899274,r[:number])
end

def test_costpercapita_ai70
  r = spreadsheet.costpercapita_ai70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.261715332251098,r[:number])
end

def test_costpercapita_aj70
  r = spreadsheet.costpercapita_aj70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.571114975637427,r[:number])
end

def test_costpercapita_ak70
  r = spreadsheet.costpercapita_ak70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.446240392791303,r[:number])
end

def test_costpercapita_al70
  r = spreadsheet.costpercapita_al70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.98429272578636,r[:number])
end

def test_costpercapita_am70
  r = spreadsheet.costpercapita_am70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.561785765485338,r[:number])
end

def test_costpercapita_an70
  r = spreadsheet.costpercapita_an70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.187358335766367,r[:number])
end

def test_costpercapita_ao70
  r = spreadsheet.costpercapita_ao70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.843547354038474,r[:number])
end

def test_costpercapita_ap70
  r = spreadsheet.costpercapita_ap70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.520760152773093,r[:number])
end

def test_costpercapita_aq70
  r = spreadsheet.costpercapita_aq70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.220551901899274,r[:number])
end

def test_costpercapita_as70
  r = spreadsheet.costpercapita_as70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.28859632626986,r[:number])
end

def test_costpercapita_at70
  r = spreadsheet.costpercapita_at70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271.69207256238695,r[:number])
end

def test_costpercapita_av70
  r = spreadsheet.costpercapita_av70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw70
  r = spreadsheet.costpercapita_aw70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay70
  r = spreadsheet.costpercapita_ay70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az70
  r = spreadsheet.costpercapita_az70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba70
  r = spreadsheet.costpercapita_ba70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb70
  r = spreadsheet.costpercapita_bb70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc70
  r = spreadsheet.costpercapita_bc70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd70
  r = spreadsheet.costpercapita_bd70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be70
  r = spreadsheet.costpercapita_be70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf70
  r = spreadsheet.costpercapita_bf70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg70
  r = spreadsheet.costpercapita_bg70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi70
  r = spreadsheet.costpercapita_bi70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj70
  r = spreadsheet.costpercapita_bj70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk70
  r = spreadsheet.costpercapita_bk70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl70
  r = spreadsheet.costpercapita_bl70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm70
  r = spreadsheet.costpercapita_bm70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn70
  r = spreadsheet.costpercapita_bn70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo70
  r = spreadsheet.costpercapita_bo70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp70
  r = spreadsheet.costpercapita_bp70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq70
  r = spreadsheet.costpercapita_bq70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs70
  r = spreadsheet.costpercapita_bs70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.261715332251098,r[:number])
end

def test_costpercapita_bt70
  r = spreadsheet.costpercapita_bt70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.571114975637427,r[:number])
end

def test_costpercapita_bu70
  r = spreadsheet.costpercapita_bu70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.446240392791303,r[:number])
end

def test_costpercapita_bv70
  r = spreadsheet.costpercapita_bv70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.98429272578636,r[:number])
end

def test_costpercapita_bw70
  r = spreadsheet.costpercapita_bw70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.561785765485338,r[:number])
end

def test_costpercapita_bx70
  r = spreadsheet.costpercapita_bx70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.187358335766367,r[:number])
end

def test_costpercapita_by70
  r = spreadsheet.costpercapita_by70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.843547354038474,r[:number])
end

def test_costpercapita_bz70
  r = spreadsheet.costpercapita_bz70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.520760152773093,r[:number])
end

def test_costpercapita_ca70
  r = spreadsheet.costpercapita_ca70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.220551901899274,r[:number])
end

def test_costpercapita_cc70
  r = spreadsheet.costpercapita_cc70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.28859632626986,r[:number])
end

def test_costpercapita_cd70
  r = spreadsheet.costpercapita_cd70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271.69207256238695,r[:number])
end

def test_costpercapita_cf70
  r = spreadsheet.costpercapita_cf70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg70
  r = spreadsheet.costpercapita_cg70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch70
  r = spreadsheet.costpercapita_ch70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci70
  r = spreadsheet.costpercapita_ci70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj70
  r = spreadsheet.costpercapita_cj70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck70
  r = spreadsheet.costpercapita_ck70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl70
  r = spreadsheet.costpercapita_cl70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm70
  r = spreadsheet.costpercapita_cm70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn70
  r = spreadsheet.costpercapita_cn70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp70
  r = spreadsheet.costpercapita_cp70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq70
  r = spreadsheet.costpercapita_cq70
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr70
  r = spreadsheet.costpercapita_cr70
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a71
  r = spreadsheet.costpercapita_a71
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Emissions",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b71
  r = spreadsheet.costpercapita_b71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c71
  r = spreadsheet.costpercapita_c71
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e71
  r = spreadsheet.costpercapita_e71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f71
  r = spreadsheet.costpercapita_f71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g71
  r = spreadsheet.costpercapita_g71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h71
  r = spreadsheet.costpercapita_h71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i71
  r = spreadsheet.costpercapita_i71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j71
  r = spreadsheet.costpercapita_j71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k71
  r = spreadsheet.costpercapita_k71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l71
  r = spreadsheet.costpercapita_l71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m71
  r = spreadsheet.costpercapita_m71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o71
  r = spreadsheet.costpercapita_o71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3456920160395821e-07,r[:number])
end

def test_costpercapita_p71
  r = spreadsheet.costpercapita_p71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874728689075726e-07,r[:number])
end

def test_costpercapita_q71
  r = spreadsheet.costpercapita_q71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.508995943824567e-07,r[:number])
end

def test_costpercapita_r71
  r = spreadsheet.costpercapita_r71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.016656735781708e-07,r[:number])
end

def test_costpercapita_s71
  r = spreadsheet.costpercapita_s71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.523790898562707e-07,r[:number])
end

def test_costpercapita_t71
  r = spreadsheet.costpercapita_t71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.037494546507406e-07,r[:number])
end

def test_costpercapita_u71
  r = spreadsheet.costpercapita_u71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.552147328468237e-07,r[:number])
end

def test_costpercapita_v71
  r = spreadsheet.costpercapita_v71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.064495005481148e-07,r[:number])
end

def test_costpercapita_w71
  r = spreadsheet.costpercapita_w71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.576084474434369e-07,r[:number])
end

def test_costpercapita_y71
  r = spreadsheet.costpercapita_y71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z71
  r = spreadsheet.costpercapita_z71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa71
  r = spreadsheet.costpercapita_aa71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab71
  r = spreadsheet.costpercapita_ab71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac71
  r = spreadsheet.costpercapita_ac71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad71
  r = spreadsheet.costpercapita_ad71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae71
  r = spreadsheet.costpercapita_ae71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af71
  r = spreadsheet.costpercapita_af71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag71
  r = spreadsheet.costpercapita_ag71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai71
  r = spreadsheet.costpercapita_ai71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3456920160395821e-07,r[:number])
end

def test_costpercapita_aj71
  r = spreadsheet.costpercapita_aj71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874728689075726e-07,r[:number])
end

def test_costpercapita_ak71
  r = spreadsheet.costpercapita_ak71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.508995943824567e-07,r[:number])
end

def test_costpercapita_al71
  r = spreadsheet.costpercapita_al71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.016656735781708e-07,r[:number])
end

def test_costpercapita_am71
  r = spreadsheet.costpercapita_am71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.523790898562707e-07,r[:number])
end

def test_costpercapita_an71
  r = spreadsheet.costpercapita_an71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.037494546507406e-07,r[:number])
end

def test_costpercapita_ao71
  r = spreadsheet.costpercapita_ao71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.552147328468237e-07,r[:number])
end

def test_costpercapita_ap71
  r = spreadsheet.costpercapita_ap71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.064495005481148e-07,r[:number])
end

def test_costpercapita_aq71
  r = spreadsheet.costpercapita_aq71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.576084474434369e-07,r[:number])
end

def test_costpercapita_as71
  r = spreadsheet.costpercapita_as71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.012536646445256e-07,r[:number])
end

def test_costpercapita_at71
  r = spreadsheet.costpercapita_at71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2200710960590093e-05,r[:number])
end

def test_costpercapita_av71
  r = spreadsheet.costpercapita_av71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw71
  r = spreadsheet.costpercapita_aw71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay71
  r = spreadsheet.costpercapita_ay71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az71
  r = spreadsheet.costpercapita_az71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba71
  r = spreadsheet.costpercapita_ba71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb71
  r = spreadsheet.costpercapita_bb71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc71
  r = spreadsheet.costpercapita_bc71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd71
  r = spreadsheet.costpercapita_bd71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be71
  r = spreadsheet.costpercapita_be71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf71
  r = spreadsheet.costpercapita_bf71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg71
  r = spreadsheet.costpercapita_bg71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi71
  r = spreadsheet.costpercapita_bi71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj71
  r = spreadsheet.costpercapita_bj71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk71
  r = spreadsheet.costpercapita_bk71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl71
  r = spreadsheet.costpercapita_bl71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm71
  r = spreadsheet.costpercapita_bm71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn71
  r = spreadsheet.costpercapita_bn71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo71
  r = spreadsheet.costpercapita_bo71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp71
  r = spreadsheet.costpercapita_bp71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq71
  r = spreadsheet.costpercapita_bq71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs71
  r = spreadsheet.costpercapita_bs71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3456920160395821e-07,r[:number])
end

def test_costpercapita_bt71
  r = spreadsheet.costpercapita_bt71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4874728689075726e-07,r[:number])
end

def test_costpercapita_bu71
  r = spreadsheet.costpercapita_bu71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.508995943824567e-07,r[:number])
end

def test_costpercapita_bv71
  r = spreadsheet.costpercapita_bv71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.016656735781708e-07,r[:number])
end

def test_costpercapita_bw71
  r = spreadsheet.costpercapita_bw71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.523790898562707e-07,r[:number])
end

def test_costpercapita_bx71
  r = spreadsheet.costpercapita_bx71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.037494546507406e-07,r[:number])
end

def test_costpercapita_by71
  r = spreadsheet.costpercapita_by71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.552147328468237e-07,r[:number])
end

def test_costpercapita_bz71
  r = spreadsheet.costpercapita_bz71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.064495005481148e-07,r[:number])
end

def test_costpercapita_ca71
  r = spreadsheet.costpercapita_ca71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.576084474434369e-07,r[:number])
end

def test_costpercapita_cc71
  r = spreadsheet.costpercapita_cc71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.012536646445256e-07,r[:number])
end

def test_costpercapita_cd71
  r = spreadsheet.costpercapita_cd71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2200710960590093e-05,r[:number])
end

def test_costpercapita_cf71
  r = spreadsheet.costpercapita_cf71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg71
  r = spreadsheet.costpercapita_cg71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch71
  r = spreadsheet.costpercapita_ch71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci71
  r = spreadsheet.costpercapita_ci71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj71
  r = spreadsheet.costpercapita_cj71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck71
  r = spreadsheet.costpercapita_ck71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl71
  r = spreadsheet.costpercapita_cl71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm71
  r = spreadsheet.costpercapita_cm71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn71
  r = spreadsheet.costpercapita_cn71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp71
  r = spreadsheet.costpercapita_cp71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq71
  r = spreadsheet.costpercapita_cq71
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr71
  r = spreadsheet.costpercapita_cr71
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a72
  r = spreadsheet.costpercapita_a72
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b72
  r = spreadsheet.costpercapita_b72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy from waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c72
  r = spreadsheet.costpercapita_c72
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e72
  r = spreadsheet.costpercapita_e72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9882725037154225,r[:number])
end

def test_costpercapita_f72
  r = spreadsheet.costpercapita_f72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.163751694170952,r[:number])
end

def test_costpercapita_g72
  r = spreadsheet.costpercapita_g72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3344820770620087,r[:number])
end

def test_costpercapita_h72
  r = spreadsheet.costpercapita_h72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.10486233002682,r[:number])
end

def test_costpercapita_i72
  r = spreadsheet.costpercapita_i72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.946292422698839,r[:number])
end

def test_costpercapita_j72
  r = spreadsheet.costpercapita_j72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.413123221570472,r[:number])
end

def test_costpercapita_k72
  r = spreadsheet.costpercapita_k72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.915526003929274,r[:number])
end

def test_costpercapita_l72
  r = spreadsheet.costpercapita_l72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.4510686303048175,r[:number])
end

def test_costpercapita_m72
  r = spreadsheet.costpercapita_m72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.021139555613964,r[:number])
end

def test_costpercapita_o72
  r = spreadsheet.costpercapita_o72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9882725037154225,r[:number])
end

def test_costpercapita_p72
  r = spreadsheet.costpercapita_p72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.163751694170952,r[:number])
end

def test_costpercapita_q72
  r = spreadsheet.costpercapita_q72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3344820770620087,r[:number])
end

def test_costpercapita_r72
  r = spreadsheet.costpercapita_r72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.013727649779479,r[:number])
end

def test_costpercapita_s72
  r = spreadsheet.costpercapita_s72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.751632718872863,r[:number])
end

def test_costpercapita_t72
  r = spreadsheet.costpercapita_t72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.149196891170851,r[:number])
end

def test_costpercapita_u72
  r = spreadsheet.costpercapita_u72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.574866909780351,r[:number])
end

def test_costpercapita_v72
  r = spreadsheet.costpercapita_v72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.026049104788923,r[:number])
end

def test_costpercapita_w72
  r = spreadsheet.costpercapita_w72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.503810323183469,r[:number])
end

def test_costpercapita_y72
  r = spreadsheet.costpercapita_y72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z72
  r = spreadsheet.costpercapita_z72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa72
  r = spreadsheet.costpercapita_aa72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab72
  r = spreadsheet.costpercapita_ab72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac72
  r = spreadsheet.costpercapita_ac72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad72
  r = spreadsheet.costpercapita_ad72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae72
  r = spreadsheet.costpercapita_ae72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af72
  r = spreadsheet.costpercapita_af72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag72
  r = spreadsheet.costpercapita_ag72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai72
  r = spreadsheet.costpercapita_ai72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.976545007430845,r[:number])
end

def test_costpercapita_aj72
  r = spreadsheet.costpercapita_aj72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.327503388341904,r[:number])
end

def test_costpercapita_ak72
  r = spreadsheet.costpercapita_ak72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.668964154124017,r[:number])
end

def test_costpercapita_al72
  r = spreadsheet.costpercapita_al72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.118589979806298,r[:number])
end

def test_costpercapita_am72
  r = spreadsheet.costpercapita_am72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.697925141571702,r[:number])
end

def test_costpercapita_an72
  r = spreadsheet.costpercapita_an72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.562320112741324,r[:number])
end

def test_costpercapita_ao72
  r = spreadsheet.costpercapita_ao72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.490392913709625,r[:number])
end

def test_costpercapita_ap72
  r = spreadsheet.costpercapita_ap72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.47711773509374,r[:number])
end

def test_costpercapita_aq72
  r = spreadsheet.costpercapita_aq72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.524949878797434,r[:number])
end

def test_costpercapita_as72
  r = spreadsheet.costpercapita_as72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.427145367957431,r[:number])
end

def test_costpercapita_at72
  r = spreadsheet.costpercapita_at72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.76852859884877,r[:number])
end

def test_costpercapita_av72
  r = spreadsheet.costpercapita_av72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw72
  r = spreadsheet.costpercapita_aw72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay72
  r = spreadsheet.costpercapita_ay72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9842887741493158,r[:number])
end

def test_costpercapita_az72
  r = spreadsheet.costpercapita_az72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.736814649543366,r[:number])
end

def test_costpercapita_ba72
  r = spreadsheet.costpercapita_ba72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.83054104111628,r[:number])
end

def test_costpercapita_bb72
  r = spreadsheet.costpercapita_bb72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2534590948729694,r[:number])
end

def test_costpercapita_bc72
  r = spreadsheet.costpercapita_bc72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7153816010582568,r[:number])
end

def test_costpercapita_bd72
  r = spreadsheet.costpercapita_bd72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.971659162863167,r[:number])
end

def test_costpercapita_be72
  r = spreadsheet.costpercapita_be72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.247464787552297,r[:number])
end

def test_costpercapita_bf72
  r = spreadsheet.costpercapita_bf72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5414632959237675,r[:number])
end

def test_costpercapita_bg72
  r = spreadsheet.costpercapita_bg72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.854416912410135,r[:number])
end

def test_costpercapita_bi72
  r = spreadsheet.costpercapita_bi72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9842887741493158,r[:number])
end

def test_costpercapita_bj72
  r = spreadsheet.costpercapita_bj72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6886464332020825,r[:number])
end

def test_costpercapita_bk72
  r = spreadsheet.costpercapita_bk72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.431166162888821,r[:number])
end

def test_costpercapita_bl72
  r = spreadsheet.costpercapita_bl72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.655257544627507,r[:number])
end

def test_costpercapita_bm72
  r = spreadsheet.costpercapita_bm72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.632674820632329,r[:number])
end

def test_costpercapita_bn72
  r = spreadsheet.costpercapita_bn72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.76334071415433,r[:number])
end

def test_costpercapita_bo72
  r = spreadsheet.costpercapita_bo72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.750622913760553,r[:number])
end

def test_costpercapita_bp72
  r = spreadsheet.costpercapita_bp72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.574418069603848,r[:number])
end

def test_costpercapita_bq72
  r = spreadsheet.costpercapita_bq72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.45308054296892,r[:number])
end

def test_costpercapita_bs72
  r = spreadsheet.costpercapita_bs72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.972561277864738,r[:number])
end

def test_costpercapita_bt72
  r = spreadsheet.costpercapita_bt72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.852398127373035,r[:number])
end

def test_costpercapita_bu72
  r = spreadsheet.costpercapita_bu72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.7656482399508295,r[:number])
end

def test_costpercapita_bv72
  r = spreadsheet.costpercapita_bv72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.668985194406988,r[:number])
end

def test_costpercapita_bw72
  r = spreadsheet.costpercapita_bw72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.384307539505192,r[:number])
end

def test_costpercapita_bx72
  r = spreadsheet.costpercapita_bx72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.91253760532518,r[:number])
end

def test_costpercapita_by72
  r = spreadsheet.costpercapita_by72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.325489823540906,r[:number])
end

def test_costpercapita_bz72
  r = spreadsheet.costpercapita_bz72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.60046717439277,r[:number])
end

def test_costpercapita_ca72
  r = spreadsheet.costpercapita_ca72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.95689086615239,r[:number])
end

def test_costpercapita_cc72
  r = spreadsheet.costpercapita_cc72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.93769842761245,r[:number])
end

def test_costpercapita_cd72
  r = spreadsheet.costpercapita_cd72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.8878390517647,r[:number])
end

def test_costpercapita_cf72
  r = spreadsheet.costpercapita_cf72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.0039837295661065,r[:number])
end

def test_costpercapita_cg72
  r = spreadsheet.costpercapita_cg72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4751052609688693,r[:number])
end

def test_costpercapita_ch72
  r = spreadsheet.costpercapita_ch72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0966840858268125,r[:number])
end

def test_costpercapita_ci72
  r = spreadsheet.costpercapita_ci72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5503952146006879,r[:number])
end

def test_costpercapita_cj72
  r = spreadsheet.costpercapita_cj72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6863823979334904,r[:number])
end

def test_costpercapita_ck72
  r = spreadsheet.costpercapita_ck72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.350217492583858,r[:number])
end

def test_costpercapita_cl72
  r = spreadsheet.costpercapita_cl72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8350969098312797,r[:number])
end

def test_costpercapita_cm72
  r = spreadsheet.costpercapita_cm72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.12334943929903,r[:number])
end

def test_costpercapita_cn72
  r = spreadsheet.costpercapita_cn72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4319409873549547,r[:number])
end

def test_costpercapita_cp72
  r = spreadsheet.costpercapita_cp72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5105530596550154,r[:number])
end

def test_costpercapita_cq72
  r = spreadsheet.costpercapita_cq72
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.119310452915897,r[:number])
end

def test_costpercapita_cr72
  r = spreadsheet.costpercapita_cr72
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a73
  r = spreadsheet.costpercapita_a73
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b73
  r = spreadsheet.costpercapita_b73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste arising",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c73
  r = spreadsheet.costpercapita_c73
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e73
  r = spreadsheet.costpercapita_e73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.270645622606374,r[:number])
end

def test_costpercapita_f73
  r = spreadsheet.costpercapita_f73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.852508870319944,r[:number])
end

def test_costpercapita_g73
  r = spreadsheet.costpercapita_g73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.73324421444755,r[:number])
end

def test_costpercapita_h73
  r = spreadsheet.costpercapita_h73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.233974724262474,r[:number])
end

def test_costpercapita_i73
  r = spreadsheet.costpercapita_i73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.97217134539262,r[:number])
end

def test_costpercapita_j73
  r = spreadsheet.costpercapita_j73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.17539007815597,r[:number])
end

def test_costpercapita_k73
  r = spreadsheet.costpercapita_k73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.6179949490512,r[:number])
end

def test_costpercapita_l73
  r = spreadsheet.costpercapita_l73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.07489653317105,r[:number])
end

def test_costpercapita_m73
  r = spreadsheet.costpercapita_m73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.13881504379448,r[:number])
end

def test_costpercapita_o73
  r = spreadsheet.costpercapita_o73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.84680545526342,r[:number])
end

def test_costpercapita_p73
  r = spreadsheet.costpercapita_p73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.01638681551846,r[:number])
end

def test_costpercapita_q73
  r = spreadsheet.costpercapita_q73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.17225827763093,r[:number])
end

def test_costpercapita_r73
  r = spreadsheet.costpercapita_r73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.88999961742068,r[:number])
end

def test_costpercapita_s73
  r = spreadsheet.costpercapita_s73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.66694517696794,r[:number])
end

def test_costpercapita_t73
  r = spreadsheet.costpercapita_t73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.20793997855102,r[:number])
end

def test_costpercapita_u73
  r = spreadsheet.costpercapita_u73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.87984271413711,r[:number])
end

def test_costpercapita_v73
  r = spreadsheet.costpercapita_v73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.62233580517288,r[:number])
end

def test_costpercapita_w73
  r = spreadsheet.costpercapita_w73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.43965322421822,r[:number])
end

def test_costpercapita_y73
  r = spreadsheet.costpercapita_y73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z73
  r = spreadsheet.costpercapita_z73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa73
  r = spreadsheet.costpercapita_aa73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab73
  r = spreadsheet.costpercapita_ab73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac73
  r = spreadsheet.costpercapita_ac73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad73
  r = spreadsheet.costpercapita_ad73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae73
  r = spreadsheet.costpercapita_ae73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af73
  r = spreadsheet.costpercapita_af73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag73
  r = spreadsheet.costpercapita_ag73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai73
  r = spreadsheet.costpercapita_ai73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.1174510778698,r[:number])
end

def test_costpercapita_aj73
  r = spreadsheet.costpercapita_aj73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.86889568583841,r[:number])
end

def test_costpercapita_ak73
  r = spreadsheet.costpercapita_ak73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.90550249207848,r[:number])
end

def test_costpercapita_al73
  r = spreadsheet.costpercapita_al73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.12397434168314,r[:number])
end

def test_costpercapita_am73
  r = spreadsheet.costpercapita_am73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.63911652236055,r[:number])
end

def test_costpercapita_an73
  r = spreadsheet.costpercapita_an73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.383330056707,r[:number])
end

def test_costpercapita_ao73
  r = spreadsheet.costpercapita_ao73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.49783766318834,r[:number])
end

def test_costpercapita_ap73
  r = spreadsheet.costpercapita_ap73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.69723233834392,r[:number])
end

def test_costpercapita_aq73
  r = spreadsheet.costpercapita_aq73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.5784682680127,r[:number])
end

def test_costpercapita_as73
  r = spreadsheet.costpercapita_as73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.86797871623136,r[:number])
end

def test_costpercapita_at73
  r = spreadsheet.costpercapita_at73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2692.4234200245314,r[:number])
end

def test_costpercapita_av73
  r = spreadsheet.costpercapita_av73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw73
  r = spreadsheet.costpercapita_aw73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay73
  r = spreadsheet.costpercapita_ay73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.264501267803894,r[:number])
end

def test_costpercapita_az73
  r = spreadsheet.costpercapita_az73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.877956274051556,r[:number])
end

def test_costpercapita_ba73
  r = spreadsheet.costpercapita_ba73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.45940255390864,r[:number])
end

def test_costpercapita_bb73
  r = spreadsheet.costpercapita_bb73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.185317022410967,r[:number])
end

def test_costpercapita_bc73
  r = spreadsheet.costpercapita_bc73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.68851337428371,r[:number])
end

def test_costpercapita_bd73
  r = spreadsheet.costpercapita_bd73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.544940614288706,r[:number])
end

def test_costpercapita_be73
  r = spreadsheet.costpercapita_be73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.23894566923757,r[:number])
end

def test_costpercapita_bf73
  r = spreadsheet.costpercapita_bf73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.587718606016306,r[:number])
end

def test_costpercapita_bg73
  r = spreadsheet.costpercapita_bg73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.3676737679682,r[:number])
end

def test_costpercapita_bi73
  r = spreadsheet.costpercapita_bi73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.264501267803894,r[:number])
end

def test_costpercapita_bj73
  r = spreadsheet.costpercapita_bj73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.70505969396905,r[:number])
end

def test_costpercapita_bk73
  r = spreadsheet.costpercapita_bk73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.0282827823369,r[:number])
end

def test_costpercapita_bl73
  r = spreadsheet.costpercapita_bl73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.42480725857165,r[:number])
end

def test_costpercapita_bm73
  r = spreadsheet.costpercapita_bm73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.35235239095906,r[:number])
end

def test_costpercapita_bn73
  r = spreadsheet.costpercapita_bn73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.6725640138215,r[:number])
end

def test_costpercapita_bo73
  r = spreadsheet.costpercapita_bo73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.78929620011914,r[:number])
end

def test_costpercapita_bp73
  r = spreadsheet.costpercapita_bp73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.70306406213311,r[:number])
end

def test_costpercapita_bq73
  r = spreadsheet.costpercapita_bq73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.61929520958597,r[:number])
end

def test_costpercapita_bs73
  r = spreadsheet.costpercapita_bs73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.11130672306733,r[:number])
end

def test_costpercapita_bt73
  r = spreadsheet.costpercapita_bt73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.7214465094875,r[:number])
end

def test_costpercapita_bu73
  r = spreadsheet.costpercapita_bu73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.20054105996783,r[:number])
end

def test_costpercapita_bv73
  r = spreadsheet.costpercapita_bv73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.31480687599233,r[:number])
end

def test_costpercapita_bw73
  r = spreadsheet.costpercapita_bw73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.019297567927,r[:number])
end

def test_costpercapita_bx73
  r = spreadsheet.costpercapita_bx73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.88050399237252,r[:number])
end

def test_costpercapita_by73
  r = spreadsheet.costpercapita_by73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(169.66913891425625,r[:number])
end

def test_costpercapita_bz73
  r = spreadsheet.costpercapita_bz73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.32539986730598,r[:number])
end

def test_costpercapita_ca73
  r = spreadsheet.costpercapita_ca73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.05894843380418,r[:number])
end

def test_costpercapita_cc73
  r = spreadsheet.costpercapita_cc73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.4779322160201,r[:number])
end

def test_costpercapita_cd73
  r = spreadsheet.costpercapita_cd73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3011.054369440571,r[:number])
end

def test_costpercapita_cf73
  r = spreadsheet.costpercapita_cf73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-27.006144354802483,r[:number])
end

def test_costpercapita_cg73
  r = spreadsheet.costpercapita_cg73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.147449176350898,r[:number])
end

def test_costpercapita_ch73
  r = spreadsheet.costpercapita_ch73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.295038567889351,r[:number])
end

def test_costpercapita_ci73
  r = spreadsheet.costpercapita_ci73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.19083253430917,r[:number])
end

def test_costpercapita_cj73
  r = spreadsheet.costpercapita_cj73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.38018104556643,r[:number])
end

def test_costpercapita_ck73
  r = spreadsheet.costpercapita_ck73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.497173935665522,r[:number])
end

def test_costpercapita_cl73
  r = spreadsheet.costpercapita_cl73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.171301251067934,r[:number])
end

def test_costpercapita_cm73
  r = spreadsheet.costpercapita_cm73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.62816752896205,r[:number])
end

def test_costpercapita_cn73
  r = spreadsheet.costpercapita_cn73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.48048016579149,r[:number])
end

def test_costpercapita_cp73
  r = spreadsheet.costpercapita_cp73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.60995349978873,r[:number])
end

def test_costpercapita_cq73
  r = spreadsheet.costpercapita_cq73
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(318.63094941603936,r[:number])
end

def test_costpercapita_cr73
  r = spreadsheet.costpercapita_cr73
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a74
  r = spreadsheet.costpercapita_a74
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b74
  r = spreadsheet.costpercapita_b74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c74
  r = spreadsheet.costpercapita_c74
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e74
  r = spreadsheet.costpercapita_e74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f74
  r = spreadsheet.costpercapita_f74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g74
  r = spreadsheet.costpercapita_g74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h74
  r = spreadsheet.costpercapita_h74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i74
  r = spreadsheet.costpercapita_i74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j74
  r = spreadsheet.costpercapita_j74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k74
  r = spreadsheet.costpercapita_k74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l74
  r = spreadsheet.costpercapita_l74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m74
  r = spreadsheet.costpercapita_m74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o74
  r = spreadsheet.costpercapita_o74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p74
  r = spreadsheet.costpercapita_p74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q74
  r = spreadsheet.costpercapita_q74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r74
  r = spreadsheet.costpercapita_r74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s74
  r = spreadsheet.costpercapita_s74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t74
  r = spreadsheet.costpercapita_t74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u74
  r = spreadsheet.costpercapita_u74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v74
  r = spreadsheet.costpercapita_v74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w74
  r = spreadsheet.costpercapita_w74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y74
  r = spreadsheet.costpercapita_y74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z74
  r = spreadsheet.costpercapita_z74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa74
  r = spreadsheet.costpercapita_aa74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab74
  r = spreadsheet.costpercapita_ab74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac74
  r = spreadsheet.costpercapita_ac74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad74
  r = spreadsheet.costpercapita_ad74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae74
  r = spreadsheet.costpercapita_ae74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af74
  r = spreadsheet.costpercapita_af74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag74
  r = spreadsheet.costpercapita_ag74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai74
  r = spreadsheet.costpercapita_ai74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj74
  r = spreadsheet.costpercapita_aj74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak74
  r = spreadsheet.costpercapita_ak74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al74
  r = spreadsheet.costpercapita_al74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am74
  r = spreadsheet.costpercapita_am74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an74
  r = spreadsheet.costpercapita_an74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao74
  r = spreadsheet.costpercapita_ao74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap74
  r = spreadsheet.costpercapita_ap74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq74
  r = spreadsheet.costpercapita_aq74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as74
  r = spreadsheet.costpercapita_as74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at74
  r = spreadsheet.costpercapita_at74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av74
  r = spreadsheet.costpercapita_av74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw74
  r = spreadsheet.costpercapita_aw74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay74
  r = spreadsheet.costpercapita_ay74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az74
  r = spreadsheet.costpercapita_az74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba74
  r = spreadsheet.costpercapita_ba74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb74
  r = spreadsheet.costpercapita_bb74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc74
  r = spreadsheet.costpercapita_bc74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd74
  r = spreadsheet.costpercapita_bd74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be74
  r = spreadsheet.costpercapita_be74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf74
  r = spreadsheet.costpercapita_bf74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg74
  r = spreadsheet.costpercapita_bg74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi74
  r = spreadsheet.costpercapita_bi74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj74
  r = spreadsheet.costpercapita_bj74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk74
  r = spreadsheet.costpercapita_bk74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl74
  r = spreadsheet.costpercapita_bl74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm74
  r = spreadsheet.costpercapita_bm74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn74
  r = spreadsheet.costpercapita_bn74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo74
  r = spreadsheet.costpercapita_bo74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp74
  r = spreadsheet.costpercapita_bp74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq74
  r = spreadsheet.costpercapita_bq74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs74
  r = spreadsheet.costpercapita_bs74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt74
  r = spreadsheet.costpercapita_bt74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu74
  r = spreadsheet.costpercapita_bu74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv74
  r = spreadsheet.costpercapita_bv74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw74
  r = spreadsheet.costpercapita_bw74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx74
  r = spreadsheet.costpercapita_bx74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by74
  r = spreadsheet.costpercapita_by74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz74
  r = spreadsheet.costpercapita_bz74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca74
  r = spreadsheet.costpercapita_ca74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc74
  r = spreadsheet.costpercapita_cc74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd74
  r = spreadsheet.costpercapita_cd74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf74
  r = spreadsheet.costpercapita_cf74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg74
  r = spreadsheet.costpercapita_cg74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch74
  r = spreadsheet.costpercapita_ch74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci74
  r = spreadsheet.costpercapita_ci74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj74
  r = spreadsheet.costpercapita_cj74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck74
  r = spreadsheet.costpercapita_ck74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl74
  r = spreadsheet.costpercapita_cl74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm74
  r = spreadsheet.costpercapita_cm74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn74
  r = spreadsheet.costpercapita_cn74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp74
  r = spreadsheet.costpercapita_cp74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq74
  r = spreadsheet.costpercapita_cq74
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr74
  r = spreadsheet.costpercapita_cr74
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a75
  r = spreadsheet.costpercapita_a75
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b75
  r = spreadsheet.costpercapita_b75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c75
  r = spreadsheet.costpercapita_c75
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e75
  r = spreadsheet.costpercapita_e75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f75
  r = spreadsheet.costpercapita_f75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g75
  r = spreadsheet.costpercapita_g75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h75
  r = spreadsheet.costpercapita_h75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i75
  r = spreadsheet.costpercapita_i75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j75
  r = spreadsheet.costpercapita_j75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k75
  r = spreadsheet.costpercapita_k75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l75
  r = spreadsheet.costpercapita_l75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m75
  r = spreadsheet.costpercapita_m75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o75
  r = spreadsheet.costpercapita_o75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p75
  r = spreadsheet.costpercapita_p75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q75
  r = spreadsheet.costpercapita_q75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r75
  r = spreadsheet.costpercapita_r75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s75
  r = spreadsheet.costpercapita_s75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t75
  r = spreadsheet.costpercapita_t75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u75
  r = spreadsheet.costpercapita_u75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v75
  r = spreadsheet.costpercapita_v75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w75
  r = spreadsheet.costpercapita_w75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y75
  r = spreadsheet.costpercapita_y75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z75
  r = spreadsheet.costpercapita_z75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa75
  r = spreadsheet.costpercapita_aa75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab75
  r = spreadsheet.costpercapita_ab75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac75
  r = spreadsheet.costpercapita_ac75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad75
  r = spreadsheet.costpercapita_ad75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae75
  r = spreadsheet.costpercapita_ae75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af75
  r = spreadsheet.costpercapita_af75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag75
  r = spreadsheet.costpercapita_ag75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai75
  r = spreadsheet.costpercapita_ai75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj75
  r = spreadsheet.costpercapita_aj75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak75
  r = spreadsheet.costpercapita_ak75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al75
  r = spreadsheet.costpercapita_al75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am75
  r = spreadsheet.costpercapita_am75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an75
  r = spreadsheet.costpercapita_an75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao75
  r = spreadsheet.costpercapita_ao75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap75
  r = spreadsheet.costpercapita_ap75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq75
  r = spreadsheet.costpercapita_aq75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as75
  r = spreadsheet.costpercapita_as75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at75
  r = spreadsheet.costpercapita_at75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av75
  r = spreadsheet.costpercapita_av75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw75
  r = spreadsheet.costpercapita_aw75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay75
  r = spreadsheet.costpercapita_ay75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az75
  r = spreadsheet.costpercapita_az75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba75
  r = spreadsheet.costpercapita_ba75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb75
  r = spreadsheet.costpercapita_bb75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc75
  r = spreadsheet.costpercapita_bc75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd75
  r = spreadsheet.costpercapita_bd75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be75
  r = spreadsheet.costpercapita_be75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf75
  r = spreadsheet.costpercapita_bf75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg75
  r = spreadsheet.costpercapita_bg75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi75
  r = spreadsheet.costpercapita_bi75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj75
  r = spreadsheet.costpercapita_bj75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk75
  r = spreadsheet.costpercapita_bk75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl75
  r = spreadsheet.costpercapita_bl75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm75
  r = spreadsheet.costpercapita_bm75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn75
  r = spreadsheet.costpercapita_bn75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo75
  r = spreadsheet.costpercapita_bo75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp75
  r = spreadsheet.costpercapita_bp75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq75
  r = spreadsheet.costpercapita_bq75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs75
  r = spreadsheet.costpercapita_bs75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt75
  r = spreadsheet.costpercapita_bt75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu75
  r = spreadsheet.costpercapita_bu75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv75
  r = spreadsheet.costpercapita_bv75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw75
  r = spreadsheet.costpercapita_bw75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx75
  r = spreadsheet.costpercapita_bx75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by75
  r = spreadsheet.costpercapita_by75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz75
  r = spreadsheet.costpercapita_bz75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca75
  r = spreadsheet.costpercapita_ca75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc75
  r = spreadsheet.costpercapita_cc75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd75
  r = spreadsheet.costpercapita_cd75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf75
  r = spreadsheet.costpercapita_cf75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg75
  r = spreadsheet.costpercapita_cg75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch75
  r = spreadsheet.costpercapita_ch75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci75
  r = spreadsheet.costpercapita_ci75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj75
  r = spreadsheet.costpercapita_cj75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck75
  r = spreadsheet.costpercapita_ck75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl75
  r = spreadsheet.costpercapita_cl75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm75
  r = spreadsheet.costpercapita_cm75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn75
  r = spreadsheet.costpercapita_cn75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp75
  r = spreadsheet.costpercapita_cp75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq75
  r = spreadsheet.costpercapita_cq75
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr75
  r = spreadsheet.costpercapita_cr75
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a76
  r = spreadsheet.costpercapita_a76
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b76
  r = spreadsheet.costpercapita_b76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c76
  r = spreadsheet.costpercapita_c76
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e76
  r = spreadsheet.costpercapita_e76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f76
  r = spreadsheet.costpercapita_f76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g76
  r = spreadsheet.costpercapita_g76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h76
  r = spreadsheet.costpercapita_h76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i76
  r = spreadsheet.costpercapita_i76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j76
  r = spreadsheet.costpercapita_j76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k76
  r = spreadsheet.costpercapita_k76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l76
  r = spreadsheet.costpercapita_l76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m76
  r = spreadsheet.costpercapita_m76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o76
  r = spreadsheet.costpercapita_o76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p76
  r = spreadsheet.costpercapita_p76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q76
  r = spreadsheet.costpercapita_q76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r76
  r = spreadsheet.costpercapita_r76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s76
  r = spreadsheet.costpercapita_s76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t76
  r = spreadsheet.costpercapita_t76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u76
  r = spreadsheet.costpercapita_u76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v76
  r = spreadsheet.costpercapita_v76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w76
  r = spreadsheet.costpercapita_w76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y76
  r = spreadsheet.costpercapita_y76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3374405551682554e-13,r[:number])
end

def test_costpercapita_z76
  r = spreadsheet.costpercapita_z76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa76
  r = spreadsheet.costpercapita_aa76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab76
  r = spreadsheet.costpercapita_ab76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac76
  r = spreadsheet.costpercapita_ac76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad76
  r = spreadsheet.costpercapita_ad76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae76
  r = spreadsheet.costpercapita_ae76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af76
  r = spreadsheet.costpercapita_af76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag76
  r = spreadsheet.costpercapita_ag76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai76
  r = spreadsheet.costpercapita_ai76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3374405551682554e-13,r[:number])
end

def test_costpercapita_aj76
  r = spreadsheet.costpercapita_aj76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak76
  r = spreadsheet.costpercapita_ak76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al76
  r = spreadsheet.costpercapita_al76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am76
  r = spreadsheet.costpercapita_am76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an76
  r = spreadsheet.costpercapita_an76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao76
  r = spreadsheet.costpercapita_ao76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap76
  r = spreadsheet.costpercapita_ap76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq76
  r = spreadsheet.costpercapita_aq76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as76
  r = spreadsheet.costpercapita_as76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.4860450612980615e-14,r[:number])
end

def test_costpercapita_at76
  r = spreadsheet.costpercapita_at76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3374405551682554e-13,r[:number])
end

def test_costpercapita_av76
  r = spreadsheet.costpercapita_av76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw76
  r = spreadsheet.costpercapita_aw76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay76
  r = spreadsheet.costpercapita_ay76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az76
  r = spreadsheet.costpercapita_az76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba76
  r = spreadsheet.costpercapita_ba76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb76
  r = spreadsheet.costpercapita_bb76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc76
  r = spreadsheet.costpercapita_bc76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd76
  r = spreadsheet.costpercapita_bd76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be76
  r = spreadsheet.costpercapita_be76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf76
  r = spreadsheet.costpercapita_bf76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg76
  r = spreadsheet.costpercapita_bg76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi76
  r = spreadsheet.costpercapita_bi76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj76
  r = spreadsheet.costpercapita_bj76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk76
  r = spreadsheet.costpercapita_bk76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl76
  r = spreadsheet.costpercapita_bl76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm76
  r = spreadsheet.costpercapita_bm76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn76
  r = spreadsheet.costpercapita_bn76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo76
  r = spreadsheet.costpercapita_bo76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp76
  r = spreadsheet.costpercapita_bp76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq76
  r = spreadsheet.costpercapita_bq76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs76
  r = spreadsheet.costpercapita_bs76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3374405551682554e-13,r[:number])
end

def test_costpercapita_bt76
  r = spreadsheet.costpercapita_bt76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu76
  r = spreadsheet.costpercapita_bu76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv76
  r = spreadsheet.costpercapita_bv76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw76
  r = spreadsheet.costpercapita_bw76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx76
  r = spreadsheet.costpercapita_bx76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by76
  r = spreadsheet.costpercapita_by76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz76
  r = spreadsheet.costpercapita_bz76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca76
  r = spreadsheet.costpercapita_ca76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc76
  r = spreadsheet.costpercapita_cc76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.4860450612980615e-14,r[:number])
end

def test_costpercapita_cd76
  r = spreadsheet.costpercapita_cd76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3374405551682554e-13,r[:number])
end

def test_costpercapita_cf76
  r = spreadsheet.costpercapita_cf76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg76
  r = spreadsheet.costpercapita_cg76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch76
  r = spreadsheet.costpercapita_ch76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci76
  r = spreadsheet.costpercapita_ci76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj76
  r = spreadsheet.costpercapita_cj76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck76
  r = spreadsheet.costpercapita_ck76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl76
  r = spreadsheet.costpercapita_cl76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm76
  r = spreadsheet.costpercapita_cm76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn76
  r = spreadsheet.costpercapita_cn76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp76
  r = spreadsheet.costpercapita_cp76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq76
  r = spreadsheet.costpercapita_cq76
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr76
  r = spreadsheet.costpercapita_cr76
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a77
  r = spreadsheet.costpercapita_a77
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b77
  r = spreadsheet.costpercapita_b77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid distribution",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c77
  r = spreadsheet.costpercapita_c77
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e77
  r = spreadsheet.costpercapita_e77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.861486699313737,r[:number])
end

def test_costpercapita_f77
  r = spreadsheet.costpercapita_f77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.947623231497717,r[:number])
end

def test_costpercapita_g77
  r = spreadsheet.costpercapita_g77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.613298832741837,r[:number])
end

def test_costpercapita_h77
  r = spreadsheet.costpercapita_h77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.290151879103046,r[:number])
end

def test_costpercapita_i77
  r = spreadsheet.costpercapita_i77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.30909268632223,r[:number])
end

def test_costpercapita_j77
  r = spreadsheet.costpercapita_j77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.724238729451674,r[:number])
end

def test_costpercapita_k77
  r = spreadsheet.costpercapita_k77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.142802876182433,r[:number])
end

def test_costpercapita_l77
  r = spreadsheet.costpercapita_l77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.563334364068933,r[:number])
end

def test_costpercapita_m77
  r = spreadsheet.costpercapita_m77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.841086018715007,r[:number])
end

def test_costpercapita_o77
  r = spreadsheet.costpercapita_o77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.86999980610826,r[:number])
end

def test_costpercapita_p77
  r = spreadsheet.costpercapita_p77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.69853682191888,r[:number])
end

def test_costpercapita_q77
  r = spreadsheet.costpercapita_q77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.10658015295233,r[:number])
end

def test_costpercapita_r77
  r = spreadsheet.costpercapita_r77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.609993647028524,r[:number])
end

def test_costpercapita_s77
  r = spreadsheet.costpercapita_s77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.228002758448394,r[:number])
end

def test_costpercapita_t77
  r = spreadsheet.costpercapita_t77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.115234051940718,r[:number])
end

def test_costpercapita_u77
  r = spreadsheet.costpercapita_u77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.177139230088887,r[:number])
end

def test_costpercapita_v77
  r = spreadsheet.costpercapita_v77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.355462185280395,r[:number])
end

def test_costpercapita_w77
  r = spreadsheet.costpercapita_w77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.988960785320238,r[:number])
end

def test_costpercapita_y77
  r = spreadsheet.costpercapita_y77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z77
  r = spreadsheet.costpercapita_z77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa77
  r = spreadsheet.costpercapita_aa77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab77
  r = spreadsheet.costpercapita_ab77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac77
  r = spreadsheet.costpercapita_ac77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad77
  r = spreadsheet.costpercapita_ad77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae77
  r = spreadsheet.costpercapita_ae77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af77
  r = spreadsheet.costpercapita_af77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag77
  r = spreadsheet.costpercapita_ag77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai77
  r = spreadsheet.costpercapita_ai77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.731486505422,r[:number])
end

def test_costpercapita_aj77
  r = spreadsheet.costpercapita_aj77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.646160053416594,r[:number])
end

def test_costpercapita_ak77
  r = spreadsheet.costpercapita_ak77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.719878985694166,r[:number])
end

def test_costpercapita_al77
  r = spreadsheet.costpercapita_al77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.900145526131574,r[:number])
end

def test_costpercapita_am77
  r = spreadsheet.costpercapita_am77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.53709544477063,r[:number])
end

def test_costpercapita_an77
  r = spreadsheet.costpercapita_an77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.839472781392395,r[:number])
end

def test_costpercapita_ao77
  r = spreadsheet.costpercapita_ao77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.31994210627132,r[:number])
end

def test_costpercapita_ap77
  r = spreadsheet.costpercapita_ap77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.91879654934933,r[:number])
end

def test_costpercapita_aq77
  r = spreadsheet.costpercapita_aq77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.83004680403525,r[:number])
end

def test_costpercapita_as77
  r = spreadsheet.costpercapita_as77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.49366941738703,r[:number])
end

def test_costpercapita_at77
  r = spreadsheet.costpercapita_at77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(803.0135560526502,r[:number])
end

def test_costpercapita_av77
  r = spreadsheet.costpercapita_av77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw77
  r = spreadsheet.costpercapita_aw77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay77
  r = spreadsheet.costpercapita_ay77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.883285686259515,r[:number])
end

def test_costpercapita_az77
  r = spreadsheet.costpercapita_az77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.754816537876723,r[:number])
end

def test_costpercapita_ba77
  r = spreadsheet.costpercapita_ba77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.31614704595293,r[:number])
end

def test_costpercapita_bb77
  r = spreadsheet.costpercapita_bb77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.687721176967738,r[:number])
end

def test_costpercapita_bc77
  r = spreadsheet.costpercapita_bc77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.051199800553464,r[:number])
end

def test_costpercapita_bd77
  r = spreadsheet.costpercapita_bd77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.279103820560989,r[:number])
end

def test_costpercapita_be77
  r = spreadsheet.costpercapita_be77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.508884287578992,r[:number])
end

def test_costpercapita_bf77
  r = spreadsheet.costpercapita_bf77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.739744772016262,r[:number])
end

def test_costpercapita_bg77
  r = spreadsheet.costpercapita_bg77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.990169212436076,r[:number])
end

def test_costpercapita_bi77
  r = spreadsheet.costpercapita_bi77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.883285686259515,r[:number])
end

def test_costpercapita_bj77
  r = spreadsheet.costpercapita_bj77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.444100471208152,r[:number])
end

def test_costpercapita_bk77
  r = spreadsheet.costpercapita_bk77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.28737438285996,r[:number])
end

def test_costpercapita_bl77
  r = spreadsheet.costpercapita_bl77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.859476128461594,r[:number])
end

def test_costpercapita_bm77
  r = spreadsheet.costpercapita_bm77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.085784221327884,r[:number])
end

def test_costpercapita_bn77
  r = spreadsheet.costpercapita_bn77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.19416063331378,r[:number])
end

def test_costpercapita_bo77
  r = spreadsheet.costpercapita_bo77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.173902295106892,r[:number])
end

def test_costpercapita_bp77
  r = spreadsheet.costpercapita_bp77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.89821241356441,r[:number])
end

def test_costpercapita_bq77
  r = spreadsheet.costpercapita_bq77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.6365436108867,r[:number])
end

def test_costpercapita_bs77
  r = spreadsheet.costpercapita_bs77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.753285492367773,r[:number])
end

def test_costpercapita_bt77
  r = spreadsheet.costpercapita_bt77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.14263729312703,r[:number])
end

def test_costpercapita_bu77
  r = spreadsheet.costpercapita_bu77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.39395453581229,r[:number])
end

def test_costpercapita_bv77
  r = spreadsheet.costpercapita_bv77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.46946977549011,r[:number])
end

def test_costpercapita_bw77
  r = spreadsheet.costpercapita_bw77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.313786979776275,r[:number])
end

def test_costpercapita_bx77
  r = spreadsheet.costpercapita_bx77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.309394685254496,r[:number])
end

def test_costpercapita_by77
  r = spreadsheet.costpercapita_by77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.35104152519578,r[:number])
end

def test_costpercapita_bz77
  r = spreadsheet.costpercapita_bz77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.2536745988448,r[:number])
end

def test_costpercapita_ca77
  r = spreadsheet.costpercapita_ca77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.625504396206935,r[:number])
end

def test_costpercapita_cc77
  r = spreadsheet.costpercapita_cc77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.179194364675055,r[:number])
end

def test_costpercapita_cd77
  r = spreadsheet.costpercapita_cd77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(942.2121684340885,r[:number])
end

def test_costpercapita_cf77
  r = spreadsheet.costpercapita_cf77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-11.978201013054221,r[:number])
end

def test_costpercapita_cg77
  r = spreadsheet.costpercapita_cg77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.5035227602895644,r[:number])
end

def test_costpercapita_ch77
  r = spreadsheet.costpercapita_ch77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.674075550118123,r[:number])
end

def test_costpercapita_ci77
  r = spreadsheet.costpercapita_ci77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.569324249358546,r[:number])
end

def test_costpercapita_cj77
  r = spreadsheet.costpercapita_cj77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.776691535005652,r[:number])
end

def test_costpercapita_ck77
  r = spreadsheet.costpercapita_ck77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.469921903862105,r[:number])
end

def test_costpercapita_cl77
  r = spreadsheet.costpercapita_cl77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.03109941892446,r[:number])
end

def test_costpercapita_cm77
  r = spreadsheet.costpercapita_cm77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.334878049495474,r[:number])
end

def test_costpercapita_cn77
  r = spreadsheet.costpercapita_cn77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.79545759217169,r[:number])
end

def test_costpercapita_cp77
  r = spreadsheet.costpercapita_cp77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.6855249472880285,r[:number])
end

def test_costpercapita_cq77
  r = spreadsheet.costpercapita_cq77
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.19861238143835,r[:number])
end

def test_costpercapita_cr77
  r = spreadsheet.costpercapita_cr77
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a78
  r = spreadsheet.costpercapita_a78
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b78
  r = spreadsheet.costpercapita_b78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting, backup",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c78
  r = spreadsheet.costpercapita_c78
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e78
  r = spreadsheet.costpercapita_e78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f78
  r = spreadsheet.costpercapita_f78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.068719341038524,r[:number])
end

def test_costpercapita_g78
  r = spreadsheet.costpercapita_g78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h78
  r = spreadsheet.costpercapita_h78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i78
  r = spreadsheet.costpercapita_i78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j78
  r = spreadsheet.costpercapita_j78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k78
  r = spreadsheet.costpercapita_k78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l78
  r = spreadsheet.costpercapita_l78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m78
  r = spreadsheet.costpercapita_m78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o78
  r = spreadsheet.costpercapita_o78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.523464297425498,r[:number])
end

def test_costpercapita_p78
  r = spreadsheet.costpercapita_p78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4808760827769942,r[:number])
end

def test_costpercapita_q78
  r = spreadsheet.costpercapita_q78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4323949387853567,r[:number])
end

def test_costpercapita_r78
  r = spreadsheet.costpercapita_r78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3880430142637012,r[:number])
end

def test_costpercapita_s78
  r = spreadsheet.costpercapita_s78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.350121466609636,r[:number])
end

def test_costpercapita_t78
  r = spreadsheet.costpercapita_t78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3183184160275068,r[:number])
end

def test_costpercapita_u78
  r = spreadsheet.costpercapita_u78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2902034482742666,r[:number])
end

def test_costpercapita_v78
  r = spreadsheet.costpercapita_v78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2644665661816512,r[:number])
end

def test_costpercapita_w78
  r = spreadsheet.costpercapita_w78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2408694259195863,r[:number])
end

def test_costpercapita_y78
  r = spreadsheet.costpercapita_y78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z78
  r = spreadsheet.costpercapita_z78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa78
  r = spreadsheet.costpercapita_aa78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab78
  r = spreadsheet.costpercapita_ab78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac78
  r = spreadsheet.costpercapita_ac78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad78
  r = spreadsheet.costpercapita_ad78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae78
  r = spreadsheet.costpercapita_ae78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af78
  r = spreadsheet.costpercapita_af78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag78
  r = spreadsheet.costpercapita_ag78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai78
  r = spreadsheet.costpercapita_ai78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.523464297425498,r[:number])
end

def test_costpercapita_aj78
  r = spreadsheet.costpercapita_aj78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5495954238155183,r[:number])
end

def test_costpercapita_ak78
  r = spreadsheet.costpercapita_ak78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4323949387853567,r[:number])
end

def test_costpercapita_al78
  r = spreadsheet.costpercapita_al78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3880430142637012,r[:number])
end

def test_costpercapita_am78
  r = spreadsheet.costpercapita_am78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.350121466609636,r[:number])
end

def test_costpercapita_an78
  r = spreadsheet.costpercapita_an78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3183184160275068,r[:number])
end

def test_costpercapita_ao78
  r = spreadsheet.costpercapita_ao78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2902034482742666,r[:number])
end

def test_costpercapita_ap78
  r = spreadsheet.costpercapita_ap78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2644665661816512,r[:number])
end

def test_costpercapita_aq78
  r = spreadsheet.costpercapita_aq78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2408694259195863,r[:number])
end

def test_costpercapita_as78
  r = spreadsheet.costpercapita_as78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5952752219225248,r[:number])
end

def test_costpercapita_at78
  r = spreadsheet.costpercapita_at78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.75462458400007,r[:number])
end

def test_costpercapita_av78
  r = spreadsheet.costpercapita_av78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw78
  r = spreadsheet.costpercapita_aw78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay78
  r = spreadsheet.costpercapita_ay78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az78
  r = spreadsheet.costpercapita_az78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1356713183051914,r[:number])
end

def test_costpercapita_ba78
  r = spreadsheet.costpercapita_ba78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb78
  r = spreadsheet.costpercapita_bb78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc78
  r = spreadsheet.costpercapita_bc78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd78
  r = spreadsheet.costpercapita_bd78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be78
  r = spreadsheet.costpercapita_be78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf78
  r = spreadsheet.costpercapita_bf78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg78
  r = spreadsheet.costpercapita_bg78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi78
  r = spreadsheet.costpercapita_bi78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj78
  r = spreadsheet.costpercapita_bj78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1356713183051914,r[:number])
end

def test_costpercapita_bk78
  r = spreadsheet.costpercapita_bk78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0984915398279276,r[:number])
end

def test_costpercapita_bl78
  r = spreadsheet.costpercapita_bl78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0644784247694234,r[:number])
end

def test_costpercapita_bm78
  r = spreadsheet.costpercapita_bm78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn78
  r = spreadsheet.costpercapita_bn78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo78
  r = spreadsheet.costpercapita_bo78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp78
  r = spreadsheet.costpercapita_bp78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq78
  r = spreadsheet.costpercapita_bq78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs78
  r = spreadsheet.costpercapita_bs78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.523464297425498,r[:number])
end

def test_costpercapita_bt78
  r = spreadsheet.costpercapita_bt78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6165474010821854,r[:number])
end

def test_costpercapita_bu78
  r = spreadsheet.costpercapita_bu78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.530886478613284,r[:number])
end

def test_costpercapita_bv78
  r = spreadsheet.costpercapita_bv78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4525214390331245,r[:number])
end

def test_costpercapita_bw78
  r = spreadsheet.costpercapita_bw78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.350121466609636,r[:number])
end

def test_costpercapita_bx78
  r = spreadsheet.costpercapita_bx78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3183184160275068,r[:number])
end

def test_costpercapita_by78
  r = spreadsheet.costpercapita_by78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2902034482742666,r[:number])
end

def test_costpercapita_bz78
  r = spreadsheet.costpercapita_bz78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2644665661816512,r[:number])
end

def test_costpercapita_ca78
  r = spreadsheet.costpercapita_ca78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2408694259195863,r[:number])
end

def test_costpercapita_cc78
  r = spreadsheet.costpercapita_cc78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.731933215462971,r[:number])
end

def test_costpercapita_cd78
  r = spreadsheet.costpercapita_cd78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.89721011513279,r[:number])
end

def test_costpercapita_cf78
  r = spreadsheet.costpercapita_cf78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg78
  r = spreadsheet.costpercapita_cg78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9330480227333326,r[:number])
end

def test_costpercapita_ch78
  r = spreadsheet.costpercapita_ch78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0984915398279276,r[:number])
end

def test_costpercapita_ci78
  r = spreadsheet.costpercapita_ci78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0644784247694234,r[:number])
end

def test_costpercapita_cj78
  r = spreadsheet.costpercapita_cj78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck78
  r = spreadsheet.costpercapita_ck78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl78
  r = spreadsheet.costpercapita_cl78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm78
  r = spreadsheet.costpercapita_cm78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn78
  r = spreadsheet.costpercapita_cn78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp78
  r = spreadsheet.costpercapita_cp78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1366579935404465,r[:number])
end

def test_costpercapita_cq78
  r = spreadsheet.costpercapita_cq78
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.14258553113273,r[:number])
end

def test_costpercapita_cr78
  r = spreadsheet.costpercapita_cr78
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a79
  r = spreadsheet.costpercapita_a79
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b79
  r = spreadsheet.costpercapita_b79
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c79
  r = spreadsheet.costpercapita_c79
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e79
  r = spreadsheet.costpercapita_e79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f79
  r = spreadsheet.costpercapita_f79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g79
  r = spreadsheet.costpercapita_g79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h79
  r = spreadsheet.costpercapita_h79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i79
  r = spreadsheet.costpercapita_i79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j79
  r = spreadsheet.costpercapita_j79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k79
  r = spreadsheet.costpercapita_k79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l79
  r = spreadsheet.costpercapita_l79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m79
  r = spreadsheet.costpercapita_m79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o79
  r = spreadsheet.costpercapita_o79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p79
  r = spreadsheet.costpercapita_p79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q79
  r = spreadsheet.costpercapita_q79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r79
  r = spreadsheet.costpercapita_r79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s79
  r = spreadsheet.costpercapita_s79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t79
  r = spreadsheet.costpercapita_t79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u79
  r = spreadsheet.costpercapita_u79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v79
  r = spreadsheet.costpercapita_v79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w79
  r = spreadsheet.costpercapita_w79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y79
  r = spreadsheet.costpercapita_y79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z79
  r = spreadsheet.costpercapita_z79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa79
  r = spreadsheet.costpercapita_aa79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab79
  r = spreadsheet.costpercapita_ab79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac79
  r = spreadsheet.costpercapita_ac79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad79
  r = spreadsheet.costpercapita_ad79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae79
  r = spreadsheet.costpercapita_ae79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af79
  r = spreadsheet.costpercapita_af79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag79
  r = spreadsheet.costpercapita_ag79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai79
  r = spreadsheet.costpercapita_ai79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj79
  r = spreadsheet.costpercapita_aj79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak79
  r = spreadsheet.costpercapita_ak79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al79
  r = spreadsheet.costpercapita_al79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am79
  r = spreadsheet.costpercapita_am79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an79
  r = spreadsheet.costpercapita_an79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao79
  r = spreadsheet.costpercapita_ao79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap79
  r = spreadsheet.costpercapita_ap79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq79
  r = spreadsheet.costpercapita_aq79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as79
  r = spreadsheet.costpercapita_as79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at79
  r = spreadsheet.costpercapita_at79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av79
  r = spreadsheet.costpercapita_av79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw79
  r = spreadsheet.costpercapita_aw79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay79
  r = spreadsheet.costpercapita_ay79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az79
  r = spreadsheet.costpercapita_az79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba79
  r = spreadsheet.costpercapita_ba79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb79
  r = spreadsheet.costpercapita_bb79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc79
  r = spreadsheet.costpercapita_bc79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd79
  r = spreadsheet.costpercapita_bd79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be79
  r = spreadsheet.costpercapita_be79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf79
  r = spreadsheet.costpercapita_bf79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg79
  r = spreadsheet.costpercapita_bg79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi79
  r = spreadsheet.costpercapita_bi79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj79
  r = spreadsheet.costpercapita_bj79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk79
  r = spreadsheet.costpercapita_bk79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl79
  r = spreadsheet.costpercapita_bl79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm79
  r = spreadsheet.costpercapita_bm79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn79
  r = spreadsheet.costpercapita_bn79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo79
  r = spreadsheet.costpercapita_bo79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp79
  r = spreadsheet.costpercapita_bp79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq79
  r = spreadsheet.costpercapita_bq79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs79
  r = spreadsheet.costpercapita_bs79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt79
  r = spreadsheet.costpercapita_bt79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu79
  r = spreadsheet.costpercapita_bu79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv79
  r = spreadsheet.costpercapita_bv79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw79
  r = spreadsheet.costpercapita_bw79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx79
  r = spreadsheet.costpercapita_bx79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by79
  r = spreadsheet.costpercapita_by79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz79
  r = spreadsheet.costpercapita_bz79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca79
  r = spreadsheet.costpercapita_ca79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc79
  r = spreadsheet.costpercapita_cc79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd79
  r = spreadsheet.costpercapita_cd79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf79
  r = spreadsheet.costpercapita_cf79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg79
  r = spreadsheet.costpercapita_cg79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch79
  r = spreadsheet.costpercapita_ch79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci79
  r = spreadsheet.costpercapita_ci79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj79
  r = spreadsheet.costpercapita_cj79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck79
  r = spreadsheet.costpercapita_ck79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl79
  r = spreadsheet.costpercapita_cl79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm79
  r = spreadsheet.costpercapita_cm79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn79
  r = spreadsheet.costpercapita_cn79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp79
  r = spreadsheet.costpercapita_cp79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq79
  r = spreadsheet.costpercapita_cq79
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr79
  r = spreadsheet.costpercapita_cr79
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a80
  r = spreadsheet.costpercapita_a80
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b80
  r = spreadsheet.costpercapita_b80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c80
  r = spreadsheet.costpercapita_c80
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e80
  r = spreadsheet.costpercapita_e80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.0328812205539,r[:number])
end

def test_costpercapita_f80
  r = spreadsheet.costpercapita_f80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.56835907033512,r[:number])
end

def test_costpercapita_g80
  r = spreadsheet.costpercapita_g80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.60074463900256,r[:number])
end

def test_costpercapita_h80
  r = spreadsheet.costpercapita_h80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.06909791036918,r[:number])
end

def test_costpercapita_i80
  r = spreadsheet.costpercapita_i80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.14493443387622,r[:number])
end

def test_costpercapita_j80
  r = spreadsheet.costpercapita_j80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.09498899249968,r[:number])
end

def test_costpercapita_k80
  r = spreadsheet.costpercapita_k80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.95503717051812,r[:number])
end

def test_costpercapita_l80
  r = spreadsheet.costpercapita_l80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.54407620341144,r[:number])
end

def test_costpercapita_m80
  r = spreadsheet.costpercapita_m80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(273.1283640403973,r[:number])
end

def test_costpercapita_o80
  r = spreadsheet.costpercapita_o80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.6053851697113,r[:number])
end

def test_costpercapita_p80
  r = spreadsheet.costpercapita_p80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.77389658728958,r[:number])
end

def test_costpercapita_q80
  r = spreadsheet.costpercapita_q80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.15620090041844,r[:number])
end

def test_costpercapita_r80
  r = spreadsheet.costpercapita_r80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.21111367349611,r[:number])
end

def test_costpercapita_s80
  r = spreadsheet.costpercapita_s80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.11045434057436,r[:number])
end

def test_costpercapita_t80
  r = spreadsheet.costpercapita_t80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.12573624698048,r[:number])
end

def test_costpercapita_u80
  r = spreadsheet.costpercapita_u80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.39179737903514,r[:number])
end

def test_costpercapita_v80
  r = spreadsheet.costpercapita_v80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.84539593708288,r[:number])
end

def test_costpercapita_w80
  r = spreadsheet.costpercapita_w80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48957995625537,r[:number])
end

def test_costpercapita_y80
  r = spreadsheet.costpercapita_y80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z80
  r = spreadsheet.costpercapita_z80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa80
  r = spreadsheet.costpercapita_aa80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab80
  r = spreadsheet.costpercapita_ab80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac80
  r = spreadsheet.costpercapita_ac80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad80
  r = spreadsheet.costpercapita_ad80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae80
  r = spreadsheet.costpercapita_ae80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af80
  r = spreadsheet.costpercapita_af80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag80
  r = spreadsheet.costpercapita_ag80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai80
  r = spreadsheet.costpercapita_ai80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(229.6382663902652,r[:number])
end

def test_costpercapita_aj80
  r = spreadsheet.costpercapita_aj80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.3422556576247,r[:number])
end

def test_costpercapita_ak80
  r = spreadsheet.costpercapita_ak80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.756945539421,r[:number])
end

def test_costpercapita_al80
  r = spreadsheet.costpercapita_al80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.2802115838653,r[:number])
end

def test_costpercapita_am80
  r = spreadsheet.costpercapita_am80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.25538877445055,r[:number])
end

def test_costpercapita_an80
  r = spreadsheet.costpercapita_an80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(278.22072523948015,r[:number])
end

def test_costpercapita_ao80
  r = spreadsheet.costpercapita_ao80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.34683454955325,r[:number])
end

def test_costpercapita_ap80
  r = spreadsheet.costpercapita_ap80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.3894721404943,r[:number])
end

def test_costpercapita_aq80
  r = spreadsheet.costpercapita_aq80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(367.6179439966527,r[:number])
end

def test_costpercapita_as80
  r = spreadsheet.costpercapita_as80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.31644931908966,r[:number])
end

def test_costpercapita_at80
  r = spreadsheet.costpercapita_at80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5238.086168769172,r[:number])
end

def test_costpercapita_av80
  r = spreadsheet.costpercapita_av80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw80
  r = spreadsheet.costpercapita_aw80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay80
  r = spreadsheet.costpercapita_ay80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.089027785161186,r[:number])
end

def test_costpercapita_az80
  r = spreadsheet.costpercapita_az80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.09084242770814,r[:number])
end

def test_costpercapita_ba80
  r = spreadsheet.costpercapita_ba80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.20656748150606,r[:number])
end

def test_costpercapita_bb80
  r = spreadsheet.costpercapita_bb80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.09006268040774,r[:number])
end

def test_costpercapita_bc80
  r = spreadsheet.costpercapita_bc80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.20910361070388,r[:number])
end

def test_costpercapita_bd80
  r = spreadsheet.costpercapita_bd80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.90601299337239,r[:number])
end

def test_costpercapita_be80
  r = spreadsheet.costpercapita_be80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.45556504513469,r[:number])
end

def test_costpercapita_bf80
  r = spreadsheet.costpercapita_bf80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.15017910102944,r[:number])
end

def test_costpercapita_bg80
  r = spreadsheet.costpercapita_bg80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.94013112507653,r[:number])
end

def test_costpercapita_bi80
  r = spreadsheet.costpercapita_bi80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.089027785161186,r[:number])
end

def test_costpercapita_bj80
  r = spreadsheet.costpercapita_bj80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.56115612218719,r[:number])
end

def test_costpercapita_bk80
  r = spreadsheet.costpercapita_bk80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.0826795400525,r[:number])
end

def test_costpercapita_bl80
  r = spreadsheet.costpercapita_bl80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.25707649472972,r[:number])
end

def test_costpercapita_bm80
  r = spreadsheet.costpercapita_bm80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(230.54222812603223,r[:number])
end

def test_costpercapita_bn80
  r = spreadsheet.costpercapita_bn80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.0838093362473,r[:number])
end

def test_costpercapita_bo80
  r = spreadsheet.costpercapita_bo80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(307.28558063167077,r[:number])
end

def test_costpercapita_bp80
  r = spreadsheet.costpercapita_bp80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(348.8834676408683,r[:number])
end

def test_costpercapita_bq80
  r = spreadsheet.costpercapita_bq80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.56986673165034,r[:number])
end

def test_costpercapita_bs80
  r = spreadsheet.costpercapita_bs80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.6944129548725,r[:number])
end

def test_costpercapita_bt80
  r = spreadsheet.costpercapita_bt80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.33505270947677,r[:number])
end

def test_costpercapita_bu80
  r = spreadsheet.costpercapita_bu80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(258.23888044047095,r[:number])
end

def test_costpercapita_bv80
  r = spreadsheet.costpercapita_bv80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(288.4681901682258,r[:number])
end

def test_costpercapita_bw80
  r = spreadsheet.costpercapita_bw80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(315.6526824666066,r[:number])
end

def test_costpercapita_bx80
  r = spreadsheet.costpercapita_bx80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(356.2095455832278,r[:number])
end

def test_costpercapita_by80
  r = spreadsheet.costpercapita_by80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(396.6773780107059,r[:number])
end

def test_costpercapita_bz80
  r = spreadsheet.costpercapita_bz80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(440.7288635779512,r[:number])
end

def test_costpercapita_ca80
  r = spreadsheet.costpercapita_ca80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(488.0594466879057,r[:number])
end

def test_costpercapita_cc80
  r = spreadsheet.costpercapita_cc80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(318.67382806660476,r[:number])
end

def test_costpercapita_cd80
  r = spreadsheet.costpercapita_cd80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6301.73252864699,r[:number])
end

def test_costpercapita_cf80
  r = spreadsheet.costpercapita_cf80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-99.9438534353927,r[:number])
end

def test_costpercapita_cg80
  r = spreadsheet.costpercapita_cg80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.007202948147936,r[:number])
end

def test_costpercapita_ch80
  r = spreadsheet.costpercapita_ch80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.48193490104994,r[:number])
end

def test_costpercapita_ci80
  r = spreadsheet.costpercapita_ci80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.18797858436052,r[:number])
end

def test_costpercapita_cj80
  r = spreadsheet.costpercapita_cj80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.39729369215601,r[:number])
end

def test_costpercapita_ck80
  r = spreadsheet.costpercapita_ck80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.98882034374765,r[:number])
end

def test_costpercapita_cl80
  r = spreadsheet.costpercapita_cl80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.33054346115262,r[:number])
end

def test_costpercapita_cm80
  r = spreadsheet.costpercapita_cm80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.33939143745684,r[:number])
end

def test_costpercapita_cn80
  r = spreadsheet.costpercapita_cn80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.44150269125302,r[:number])
end

def test_costpercapita_cp80
  r = spreadsheet.costpercapita_cp80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.357378747515114,r[:number])
end

def test_costpercapita_cq80
  r = spreadsheet.costpercapita_cq80
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1063.6463598778173,r[:number])
end

def test_costpercapita_cr80
  r = spreadsheet.costpercapita_cr80
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a81
  r = spreadsheet.costpercapita_a81
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b81
  r = spreadsheet.costpercapita_b81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c81
  r = spreadsheet.costpercapita_c81
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e81
  r = spreadsheet.costpercapita_e81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.848341600878902,r[:number])
end

def test_costpercapita_f81
  r = spreadsheet.costpercapita_f81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.03660058092714,r[:number])
end

def test_costpercapita_g81
  r = spreadsheet.costpercapita_g81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.685261645876832,r[:number])
end

def test_costpercapita_h81
  r = spreadsheet.costpercapita_h81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.540189665199249,r[:number])
end

def test_costpercapita_i81
  r = spreadsheet.costpercapita_i81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.416150988459336,r[:number])
end

def test_costpercapita_j81
  r = spreadsheet.costpercapita_j81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.312125479097593,r[:number])
end

def test_costpercapita_k81
  r = spreadsheet.costpercapita_k81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.220163425530844,r[:number])
end

def test_costpercapita_l81
  r = spreadsheet.costpercapita_l81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.135979920487718,r[:number])
end

def test_costpercapita_m81
  r = spreadsheet.costpercapita_m81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.05879535830546,r[:number])
end

def test_costpercapita_o81
  r = spreadsheet.costpercapita_o81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p81
  r = spreadsheet.costpercapita_p81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q81
  r = spreadsheet.costpercapita_q81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r81
  r = spreadsheet.costpercapita_r81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s81
  r = spreadsheet.costpercapita_s81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t81
  r = spreadsheet.costpercapita_t81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u81
  r = spreadsheet.costpercapita_u81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v81
  r = spreadsheet.costpercapita_v81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w81
  r = spreadsheet.costpercapita_w81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y81
  r = spreadsheet.costpercapita_y81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z81
  r = spreadsheet.costpercapita_z81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa81
  r = spreadsheet.costpercapita_aa81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab81
  r = spreadsheet.costpercapita_ab81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac81
  r = spreadsheet.costpercapita_ac81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad81
  r = spreadsheet.costpercapita_ad81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae81
  r = spreadsheet.costpercapita_ae81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af81
  r = spreadsheet.costpercapita_af81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag81
  r = spreadsheet.costpercapita_ag81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai81
  r = spreadsheet.costpercapita_ai81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.848341600878902,r[:number])
end

def test_costpercapita_aj81
  r = spreadsheet.costpercapita_aj81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.03660058092714,r[:number])
end

def test_costpercapita_ak81
  r = spreadsheet.costpercapita_ak81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.685261645876832,r[:number])
end

def test_costpercapita_al81
  r = spreadsheet.costpercapita_al81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.540189665199249,r[:number])
end

def test_costpercapita_am81
  r = spreadsheet.costpercapita_am81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.416150988459336,r[:number])
end

def test_costpercapita_an81
  r = spreadsheet.costpercapita_an81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.312125479097593,r[:number])
end

def test_costpercapita_ao81
  r = spreadsheet.costpercapita_ao81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.220163425530844,r[:number])
end

def test_costpercapita_ap81
  r = spreadsheet.costpercapita_ap81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.135979920487718,r[:number])
end

def test_costpercapita_aq81
  r = spreadsheet.costpercapita_aq81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.05879535830546,r[:number])
end

def test_costpercapita_as81
  r = spreadsheet.costpercapita_as81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.139289851640341,r[:number])
end

def test_costpercapita_at81
  r = spreadsheet.costpercapita_at81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.52222273525388,r[:number])
end

def test_costpercapita_av81
  r = spreadsheet.costpercapita_av81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw81
  r = spreadsheet.costpercapita_aw81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay81
  r = spreadsheet.costpercapita_ay81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.220188154605544,r[:number])
end

def test_costpercapita_az81
  r = spreadsheet.costpercapita_az81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.960850846778965,r[:number])
end

def test_costpercapita_ba81
  r = spreadsheet.costpercapita_ba81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.572082720175334,r[:number])
end

def test_costpercapita_bb81
  r = spreadsheet.costpercapita_bb81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4924421018097003,r[:number])
end

def test_costpercapita_bc81
  r = spreadsheet.costpercapita_bc81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4243482020043587,r[:number])
end

def test_costpercapita_bd81
  r = spreadsheet.costpercapita_bd81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.367240993205841,r[:number])
end

def test_costpercapita_be81
  r = spreadsheet.costpercapita_be81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3167562974153655,r[:number])
end

def test_costpercapita_bf81
  r = spreadsheet.costpercapita_bf81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.270541815704239,r[:number])
end

def test_costpercapita_bg81
  r = spreadsheet.costpercapita_bg81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2281695655166764,r[:number])
end

def test_costpercapita_bi81
  r = spreadsheet.costpercapita_bi81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.220188154605544,r[:number])
end

def test_costpercapita_bj81
  r = spreadsheet.costpercapita_bj81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.00890293548291,r[:number])
end

def test_costpercapita_bk81
  r = spreadsheet.costpercapita_bk81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.253312685544818,r[:number])
end

def test_costpercapita_bl81
  r = spreadsheet.costpercapita_bl81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.634749538579136,r[:number])
end

def test_costpercapita_bm81
  r = spreadsheet.costpercapita_bm81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2730446060130785,r[:number])
end

def test_costpercapita_bn81
  r = spreadsheet.costpercapita_bn81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.101722979617522,r[:number])
end

def test_costpercapita_bo81
  r = spreadsheet.costpercapita_bo81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.950268892246096,r[:number])
end

def test_costpercapita_bp81
  r = spreadsheet.costpercapita_bp81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.811625447112716,r[:number])
end

def test_costpercapita_bq81
  r = spreadsheet.costpercapita_bq81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.68450869655003,r[:number])
end

def test_costpercapita_bs81
  r = spreadsheet.costpercapita_bs81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.220188154605544,r[:number])
end

def test_costpercapita_bt81
  r = spreadsheet.costpercapita_bt81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.00890293548291,r[:number])
end

def test_costpercapita_bu81
  r = spreadsheet.costpercapita_bu81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.253312685544818,r[:number])
end

def test_costpercapita_bv81
  r = spreadsheet.costpercapita_bv81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.634749538579136,r[:number])
end

def test_costpercapita_bw81
  r = spreadsheet.costpercapita_bw81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2730446060130785,r[:number])
end

def test_costpercapita_bx81
  r = spreadsheet.costpercapita_bx81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.101722979617522,r[:number])
end

def test_costpercapita_by81
  r = spreadsheet.costpercapita_by81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.950268892246096,r[:number])
end

def test_costpercapita_bz81
  r = spreadsheet.costpercapita_bz81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.811625447112716,r[:number])
end

def test_costpercapita_ca81
  r = spreadsheet.costpercapita_ca81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.68450869655003,r[:number])
end

def test_costpercapita_cc81
  r = spreadsheet.costpercapita_cc81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.993147103972427,r[:number])
end

def test_costpercapita_cd81
  r = spreadsheet.costpercapita_cd81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.55375817891678,r[:number])
end

def test_costpercapita_cf81
  r = spreadsheet.costpercapita_cf81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-10.628153446273359,r[:number])
end

def test_costpercapita_cg81
  r = spreadsheet.costpercapita_cg81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9723023545557697,r[:number])
end

def test_costpercapita_ch81
  r = spreadsheet.costpercapita_ch81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.568051039667988,r[:number])
end

def test_costpercapita_ci81
  r = spreadsheet.costpercapita_ci81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.094559873379886,r[:number])
end

def test_costpercapita_cj81
  r = spreadsheet.costpercapita_cj81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8568936175537427,r[:number])
end

def test_costpercapita_ck81
  r = spreadsheet.costpercapita_ck81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7895975005199287,r[:number])
end

def test_costpercapita_cl81
  r = spreadsheet.costpercapita_cl81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.730105466715252,r[:number])
end

def test_costpercapita_cm81
  r = spreadsheet.costpercapita_cm81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.675645526624998,r[:number])
end

def test_costpercapita_cn81
  r = spreadsheet.costpercapita_cn81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.62571333824457,r[:number])
end

def test_costpercapita_cp81
  r = spreadsheet.costpercapita_cp81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8538572523320862,r[:number])
end

def test_costpercapita_cq81
  r = spreadsheet.costpercapita_cq81
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.031535443662875,r[:number])
end

def test_costpercapita_cr81
  r = spreadsheet.costpercapita_cr81
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a82
  r = spreadsheet.costpercapita_a82
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b82
  r = spreadsheet.costpercapita_b82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c82
  r = spreadsheet.costpercapita_c82
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e82
  r = spreadsheet.costpercapita_e82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.33993094912718,r[:number])
end

def test_costpercapita_f82
  r = spreadsheet.costpercapita_f82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.66139630547684,r[:number])
end

def test_costpercapita_g82
  r = spreadsheet.costpercapita_g82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.82608451209538,r[:number])
end

def test_costpercapita_h82
  r = spreadsheet.costpercapita_h82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.24127264849938,r[:number])
end

def test_costpercapita_i82
  r = spreadsheet.costpercapita_i82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.27110668406775,r[:number])
end

def test_costpercapita_j82
  r = spreadsheet.costpercapita_j82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.16748500028476,r[:number])
end

def test_costpercapita_k82
  r = spreadsheet.costpercapita_k82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.1110924876329,r[:number])
end

def test_costpercapita_l82
  r = spreadsheet.costpercapita_l82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.22597851539916,r[:number])
end

def test_costpercapita_m82
  r = spreadsheet.costpercapita_m82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(238.20319146193754,r[:number])
end

def test_costpercapita_o82
  r = spreadsheet.costpercapita_o82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.800347720140973,r[:number])
end

def test_costpercapita_p82
  r = spreadsheet.costpercapita_p82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.183444433689148,r[:number])
end

def test_costpercapita_q82
  r = spreadsheet.costpercapita_q82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.835571809878175,r[:number])
end

def test_costpercapita_r82
  r = spreadsheet.costpercapita_r82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.561751519132722,r[:number])
end

def test_costpercapita_s82
  r = spreadsheet.costpercapita_s82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.400216250037403,r[:number])
end

def test_costpercapita_t82
  r = spreadsheet.costpercapita_t82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.365873474418752,r[:number])
end

def test_costpercapita_u82
  r = spreadsheet.costpercapita_u82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.445217770407602,r[:number])
end

def test_costpercapita_v82
  r = spreadsheet.costpercapita_v82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.633764062219754,r[:number])
end

def test_costpercapita_w82
  r = spreadsheet.costpercapita_w82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.940477821523046,r[:number])
end

def test_costpercapita_y82
  r = spreadsheet.costpercapita_y82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z82
  r = spreadsheet.costpercapita_z82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa82
  r = spreadsheet.costpercapita_aa82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab82
  r = spreadsheet.costpercapita_ab82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac82
  r = spreadsheet.costpercapita_ac82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad82
  r = spreadsheet.costpercapita_ad82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae82
  r = spreadsheet.costpercapita_ae82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af82
  r = spreadsheet.costpercapita_af82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag82
  r = spreadsheet.costpercapita_ag82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai82
  r = spreadsheet.costpercapita_ai82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.14027866926814,r[:number])
end

def test_costpercapita_aj82
  r = spreadsheet.costpercapita_aj82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.844840739166,r[:number])
end

def test_costpercapita_ak82
  r = spreadsheet.costpercapita_ak82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.66165632197357,r[:number])
end

def test_costpercapita_al82
  r = spreadsheet.costpercapita_al82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.8030241676321,r[:number])
end

def test_costpercapita_am82
  r = spreadsheet.costpercapita_am82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.67132293410515,r[:number])
end

def test_costpercapita_an82
  r = spreadsheet.costpercapita_an82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.5333584747035,r[:number])
end

def test_costpercapita_ao82
  r = spreadsheet.costpercapita_ao82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.55631025804053,r[:number])
end

def test_costpercapita_ap82
  r = spreadsheet.costpercapita_ap82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(246.85974257761893,r[:number])
end

def test_costpercapita_aq82
  r = spreadsheet.costpercapita_aq82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.14366928346055,r[:number])
end

def test_costpercapita_as82
  r = spreadsheet.costpercapita_as82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.80157815844092,r[:number])
end

def test_costpercapita_at82
  r = spreadsheet.costpercapita_at82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4237.837823137058,r[:number])
end

def test_costpercapita_av82
  r = spreadsheet.costpercapita_av82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw82
  r = spreadsheet.costpercapita_aw82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay82
  r = spreadsheet.costpercapita_ay82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.732819686840905,r[:number])
end

def test_costpercapita_az82
  r = spreadsheet.costpercapita_az82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.6498154329925,r[:number])
end

def test_costpercapita_ba82
  r = spreadsheet.costpercapita_ba82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.32790231424471,r[:number])
end

def test_costpercapita_bb82
  r = spreadsheet.costpercapita_bb82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.59453380088401,r[:number])
end

def test_costpercapita_bc82
  r = spreadsheet.costpercapita_bc82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.64961624313209,r[:number])
end

def test_costpercapita_bd82
  r = spreadsheet.costpercapita_bd82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.63143508227824,r[:number])
end

def test_costpercapita_be82
  r = spreadsheet.costpercapita_be82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.63918146702082,r[:number])
end

def test_costpercapita_bf82
  r = spreadsheet.costpercapita_bf82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.74095516708611,r[:number])
end

def test_costpercapita_bg82
  r = spreadsheet.costpercapita_bg82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.76715004572716,r[:number])
end

def test_costpercapita_bi82
  r = spreadsheet.costpercapita_bi82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.732819686840905,r[:number])
end

def test_costpercapita_bj82
  r = spreadsheet.costpercapita_bj82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.33624319312891,r[:number])
end

def test_costpercapita_bk82
  r = spreadsheet.costpercapita_bk82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.7900357743586,r[:number])
end

def test_costpercapita_bl82
  r = spreadsheet.costpercapita_bl82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.1569457041877,r[:number])
end

def test_costpercapita_bm82
  r = spreadsheet.costpercapita_bm82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.40581644719435,r[:number])
end

def test_costpercapita_bn82
  r = spreadsheet.costpercapita_bn82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.3102840350901,r[:number])
end

def test_costpercapita_bo82
  r = spreadsheet.costpercapita_bo82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(330.78513074714857,r[:number])
end

def test_costpercapita_bp82
  r = spreadsheet.costpercapita_bp82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.04409657407444,r[:number])
end

def test_costpercapita_bq82
  r = spreadsheet.costpercapita_bq82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(367.28295043892956,r[:number])
end

def test_costpercapita_bs82
  r = spreadsheet.costpercapita_bs82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.533167406981875,r[:number])
end

def test_costpercapita_bt82
  r = spreadsheet.costpercapita_bt82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.51968762681807,r[:number])
end

def test_costpercapita_bu82
  r = spreadsheet.costpercapita_bu82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(223.6256075842368,r[:number])
end

def test_costpercapita_bv82
  r = spreadsheet.costpercapita_bv82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(289.7186972233204,r[:number])
end

def test_costpercapita_bw82
  r = spreadsheet.costpercapita_bw82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(309.80603269723173,r[:number])
end

def test_costpercapita_bx82
  r = spreadsheet.costpercapita_bx82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.67615750950887,r[:number])
end

def test_costpercapita_by82
  r = spreadsheet.costpercapita_by82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.23034851755614,r[:number])
end

def test_costpercapita_bz82
  r = spreadsheet.costpercapita_bz82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.67786063629416,r[:number])
end

def test_costpercapita_ca82
  r = spreadsheet.costpercapita_ca82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(388.22342826045264,r[:number])
end

def test_costpercapita_cc82
  r = spreadsheet.costpercapita_cc82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.77899860693344,r[:number])
end

def test_costpercapita_cd82
  r = spreadsheet.costpercapita_cd82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5439.976246446684,r[:number])
end

def test_costpercapita_cf82
  r = spreadsheet.costpercapita_cf82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-64.60711126228627,r[:number])
end

def test_costpercapita_cg82
  r = spreadsheet.costpercapita_cg82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-41.325153112347934,r[:number])
end

def test_costpercapita_ch82
  r = spreadsheet.costpercapita_ch82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.96395126226324,r[:number])
end

def test_costpercapita_ci82
  r = spreadsheet.costpercapita_ci82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.91567305568833,r[:number])
end

def test_costpercapita_cj82
  r = spreadsheet.costpercapita_cj82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.13470976312658,r[:number])
end

def test_costpercapita_ck82
  r = spreadsheet.costpercapita_ck82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.14279903480535,r[:number])
end

def test_costpercapita_cl82
  r = spreadsheet.costpercapita_cl82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.67403825951564,r[:number])
end

def test_costpercapita_cm82
  r = spreadsheet.costpercapita_cm82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.81811805867524,r[:number])
end

def test_costpercapita_cn82
  r = spreadsheet.costpercapita_cn82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.079758976992,r[:number])
end

def test_costpercapita_cp82
  r = spreadsheet.costpercapita_cp82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.97742044849245,r[:number])
end

def test_costpercapita_cq82
  r = spreadsheet.costpercapita_cq82
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1202.1384233096253,r[:number])
end

def test_costpercapita_cr82
  r = spreadsheet.costpercapita_cr82
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a83
  r = spreadsheet.costpercapita_a83
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b83
  r = spreadsheet.costpercapita_b83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c83
  r = spreadsheet.costpercapita_c83
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e83
  r = spreadsheet.costpercapita_e83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.77413813480579,r[:number])
end

def test_costpercapita_f83
  r = spreadsheet.costpercapita_f83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.26247852696957,r[:number])
end

def test_costpercapita_g83
  r = spreadsheet.costpercapita_g83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.87601644416925,r[:number])
end

def test_costpercapita_h83
  r = spreadsheet.costpercapita_h83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.09108073326739,r[:number])
end

def test_costpercapita_i83
  r = spreadsheet.costpercapita_i83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.22699588601007,r[:number])
end

def test_costpercapita_j83
  r = spreadsheet.costpercapita_j83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.242965928943576,r[:number])
end

def test_costpercapita_k83
  r = spreadsheet.costpercapita_k83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.65110812161755,r[:number])
end

def test_costpercapita_l83
  r = spreadsheet.costpercapita_l83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.172899394812006,r[:number])
end

def test_costpercapita_m83
  r = spreadsheet.costpercapita_m83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.258079358507125,r[:number])
end

def test_costpercapita_o83
  r = spreadsheet.costpercapita_o83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p83
  r = spreadsheet.costpercapita_p83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q83
  r = spreadsheet.costpercapita_q83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r83
  r = spreadsheet.costpercapita_r83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s83
  r = spreadsheet.costpercapita_s83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t83
  r = spreadsheet.costpercapita_t83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u83
  r = spreadsheet.costpercapita_u83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v83
  r = spreadsheet.costpercapita_v83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w83
  r = spreadsheet.costpercapita_w83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y83
  r = spreadsheet.costpercapita_y83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z83
  r = spreadsheet.costpercapita_z83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa83
  r = spreadsheet.costpercapita_aa83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab83
  r = spreadsheet.costpercapita_ab83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac83
  r = spreadsheet.costpercapita_ac83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad83
  r = spreadsheet.costpercapita_ad83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae83
  r = spreadsheet.costpercapita_ae83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af83
  r = spreadsheet.costpercapita_af83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag83
  r = spreadsheet.costpercapita_ag83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai83
  r = spreadsheet.costpercapita_ai83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.77413813480579,r[:number])
end

def test_costpercapita_aj83
  r = spreadsheet.costpercapita_aj83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.26247852696957,r[:number])
end

def test_costpercapita_ak83
  r = spreadsheet.costpercapita_ak83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.87601644416925,r[:number])
end

def test_costpercapita_al83
  r = spreadsheet.costpercapita_al83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.09108073326739,r[:number])
end

def test_costpercapita_am83
  r = spreadsheet.costpercapita_am83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.22699588601007,r[:number])
end

def test_costpercapita_an83
  r = spreadsheet.costpercapita_an83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.242965928943576,r[:number])
end

def test_costpercapita_ao83
  r = spreadsheet.costpercapita_ao83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.65110812161755,r[:number])
end

def test_costpercapita_ap83
  r = spreadsheet.costpercapita_ap83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.172899394812006,r[:number])
end

def test_costpercapita_aq83
  r = spreadsheet.costpercapita_aq83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.258079358507125,r[:number])
end

def test_costpercapita_as83
  r = spreadsheet.costpercapita_as83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.61730694767804,r[:number])
end

def test_costpercapita_at83
  r = spreadsheet.costpercapita_at83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1010.4099942684265,r[:number])
end

def test_costpercapita_av83
  r = spreadsheet.costpercapita_av83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw83
  r = spreadsheet.costpercapita_aw83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay83
  r = spreadsheet.costpercapita_ay83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.418495204363058,r[:number])
end

def test_costpercapita_az83
  r = spreadsheet.costpercapita_az83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.396857338034987,r[:number])
end

def test_costpercapita_ba83
  r = spreadsheet.costpercapita_ba83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.73367316482887,r[:number])
end

def test_costpercapita_bb83
  r = spreadsheet.costpercapita_bb83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.85173767936946,r[:number])
end

def test_costpercapita_bc83
  r = spreadsheet.costpercapita_bc83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.92635144530227,r[:number])
end

def test_costpercapita_bd83
  r = spreadsheet.costpercapita_bd83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.03306481666405,r[:number])
end

def test_costpercapita_be83
  r = spreadsheet.costpercapita_be83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.80609703451551,r[:number])
end

def test_costpercapita_bf83
  r = spreadsheet.costpercapita_bf83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.64151954308377,r[:number])
end

def test_costpercapita_bg83
  r = spreadsheet.costpercapita_bg83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.786227300823594,r[:number])
end

def test_costpercapita_bi83
  r = spreadsheet.costpercapita_bi83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.418495204363058,r[:number])
end

def test_costpercapita_bj83
  r = spreadsheet.costpercapita_bj83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.33990166453832,r[:number])
end

def test_costpercapita_bk83
  r = spreadsheet.costpercapita_bk83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.785659210094835,r[:number])
end

def test_costpercapita_bl83
  r = spreadsheet.costpercapita_bl83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.59338761699627,r[:number])
end

def test_costpercapita_bm83
  r = spreadsheet.costpercapita_bm83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.32740583399675,r[:number])
end

def test_costpercapita_bn83
  r = spreadsheet.costpercapita_bn83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.90184835488074,r[:number])
end

def test_costpercapita_bo83
  r = spreadsheet.costpercapita_bo83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.03839138756213,r[:number])
end

def test_costpercapita_bp83
  r = spreadsheet.costpercapita_bp83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.82173663418398,r[:number])
end

def test_costpercapita_bq83
  r = spreadsheet.costpercapita_bq83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.63611063363878,r[:number])
end

def test_costpercapita_bs83
  r = spreadsheet.costpercapita_bs83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.418495204363058,r[:number])
end

def test_costpercapita_bt83
  r = spreadsheet.costpercapita_bt83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.33990166453832,r[:number])
end

def test_costpercapita_bu83
  r = spreadsheet.costpercapita_bu83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.785659210094835,r[:number])
end

def test_costpercapita_bv83
  r = spreadsheet.costpercapita_bv83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.59338761699627,r[:number])
end

def test_costpercapita_bw83
  r = spreadsheet.costpercapita_bw83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.32740583399675,r[:number])
end

def test_costpercapita_bx83
  r = spreadsheet.costpercapita_bx83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.90184835488074,r[:number])
end

def test_costpercapita_by83
  r = spreadsheet.costpercapita_by83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.03839138756213,r[:number])
end

def test_costpercapita_bz83
  r = spreadsheet.costpercapita_bz83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.82173663418398,r[:number])
end

def test_costpercapita_ca83
  r = spreadsheet.costpercapita_ca83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.63611063363878,r[:number])
end

def test_costpercapita_cc83
  r = spreadsheet.costpercapita_cc83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.54032628225053,r[:number])
end

def test_costpercapita_cd83
  r = spreadsheet.costpercapita_cd83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1359.4541770953194,r[:number])
end

def test_costpercapita_cf83
  r = spreadsheet.costpercapita_cf83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-29.355642930442734,r[:number])
end

def test_costpercapita_cg83
  r = spreadsheet.costpercapita_cg83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.922576862431251,r[:number])
end

def test_costpercapita_ch83
  r = spreadsheet.costpercapita_ch83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.909642765925582,r[:number])
end

def test_costpercapita_ci83
  r = spreadsheet.costpercapita_ci83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.502306883728867,r[:number])
end

def test_costpercapita_cj83
  r = spreadsheet.costpercapita_cj83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.10040994798668,r[:number])
end

def test_costpercapita_ck83
  r = spreadsheet.costpercapita_ck83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.658882425937175,r[:number])
end

def test_costpercapita_cl83
  r = spreadsheet.costpercapita_cl83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.38728326594458,r[:number])
end

def test_costpercapita_cm83
  r = spreadsheet.costpercapita_cm83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.64883723937198,r[:number])
end

def test_costpercapita_cn83
  r = spreadsheet.costpercapita_cn83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.37803127513165,r[:number])
end

def test_costpercapita_cp83
  r = spreadsheet.costpercapita_cp83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.923019334572505,r[:number])
end

def test_costpercapita_cq83
  r = spreadsheet.costpercapita_cq83
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(349.0441828268928,r[:number])
end

def test_costpercapita_cr83
  r = spreadsheet.costpercapita_cr83
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a84
  r = spreadsheet.costpercapita_a84
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b84
  r = spreadsheet.costpercapita_b84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c84
  r = spreadsheet.costpercapita_c84
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e84
  r = spreadsheet.costpercapita_e84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f84
  r = spreadsheet.costpercapita_f84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g84
  r = spreadsheet.costpercapita_g84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h84
  r = spreadsheet.costpercapita_h84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i84
  r = spreadsheet.costpercapita_i84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j84
  r = spreadsheet.costpercapita_j84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k84
  r = spreadsheet.costpercapita_k84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l84
  r = spreadsheet.costpercapita_l84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m84
  r = spreadsheet.costpercapita_m84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o84
  r = spreadsheet.costpercapita_o84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p84
  r = spreadsheet.costpercapita_p84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q84
  r = spreadsheet.costpercapita_q84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r84
  r = spreadsheet.costpercapita_r84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s84
  r = spreadsheet.costpercapita_s84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t84
  r = spreadsheet.costpercapita_t84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u84
  r = spreadsheet.costpercapita_u84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v84
  r = spreadsheet.costpercapita_v84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w84
  r = spreadsheet.costpercapita_w84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y84
  r = spreadsheet.costpercapita_y84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z84
  r = spreadsheet.costpercapita_z84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa84
  r = spreadsheet.costpercapita_aa84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab84
  r = spreadsheet.costpercapita_ab84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac84
  r = spreadsheet.costpercapita_ac84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad84
  r = spreadsheet.costpercapita_ad84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae84
  r = spreadsheet.costpercapita_ae84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af84
  r = spreadsheet.costpercapita_af84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag84
  r = spreadsheet.costpercapita_ag84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai84
  r = spreadsheet.costpercapita_ai84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj84
  r = spreadsheet.costpercapita_aj84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak84
  r = spreadsheet.costpercapita_ak84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al84
  r = spreadsheet.costpercapita_al84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am84
  r = spreadsheet.costpercapita_am84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an84
  r = spreadsheet.costpercapita_an84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao84
  r = spreadsheet.costpercapita_ao84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap84
  r = spreadsheet.costpercapita_ap84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq84
  r = spreadsheet.costpercapita_aq84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as84
  r = spreadsheet.costpercapita_as84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at84
  r = spreadsheet.costpercapita_at84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av84
  r = spreadsheet.costpercapita_av84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw84
  r = spreadsheet.costpercapita_aw84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay84
  r = spreadsheet.costpercapita_ay84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az84
  r = spreadsheet.costpercapita_az84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba84
  r = spreadsheet.costpercapita_ba84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb84
  r = spreadsheet.costpercapita_bb84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc84
  r = spreadsheet.costpercapita_bc84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd84
  r = spreadsheet.costpercapita_bd84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be84
  r = spreadsheet.costpercapita_be84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf84
  r = spreadsheet.costpercapita_bf84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg84
  r = spreadsheet.costpercapita_bg84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi84
  r = spreadsheet.costpercapita_bi84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj84
  r = spreadsheet.costpercapita_bj84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk84
  r = spreadsheet.costpercapita_bk84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl84
  r = spreadsheet.costpercapita_bl84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm84
  r = spreadsheet.costpercapita_bm84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn84
  r = spreadsheet.costpercapita_bn84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo84
  r = spreadsheet.costpercapita_bo84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp84
  r = spreadsheet.costpercapita_bp84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq84
  r = spreadsheet.costpercapita_bq84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs84
  r = spreadsheet.costpercapita_bs84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt84
  r = spreadsheet.costpercapita_bt84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu84
  r = spreadsheet.costpercapita_bu84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv84
  r = spreadsheet.costpercapita_bv84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw84
  r = spreadsheet.costpercapita_bw84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx84
  r = spreadsheet.costpercapita_bx84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by84
  r = spreadsheet.costpercapita_by84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz84
  r = spreadsheet.costpercapita_bz84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca84
  r = spreadsheet.costpercapita_ca84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc84
  r = spreadsheet.costpercapita_cc84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd84
  r = spreadsheet.costpercapita_cd84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf84
  r = spreadsheet.costpercapita_cf84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg84
  r = spreadsheet.costpercapita_cg84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch84
  r = spreadsheet.costpercapita_ch84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci84
  r = spreadsheet.costpercapita_ci84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj84
  r = spreadsheet.costpercapita_cj84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck84
  r = spreadsheet.costpercapita_ck84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl84
  r = spreadsheet.costpercapita_cl84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm84
  r = spreadsheet.costpercapita_cm84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn84
  r = spreadsheet.costpercapita_cn84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp84
  r = spreadsheet.costpercapita_cp84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq84
  r = spreadsheet.costpercapita_cq84
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr84
  r = spreadsheet.costpercapita_cr84
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a85
  r = spreadsheet.costpercapita_a85
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b85
  r = spreadsheet.costpercapita_b85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c85
  r = spreadsheet.costpercapita_c85
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e85
  r = spreadsheet.costpercapita_e85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f85
  r = spreadsheet.costpercapita_f85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g85
  r = spreadsheet.costpercapita_g85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h85
  r = spreadsheet.costpercapita_h85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i85
  r = spreadsheet.costpercapita_i85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j85
  r = spreadsheet.costpercapita_j85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k85
  r = spreadsheet.costpercapita_k85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l85
  r = spreadsheet.costpercapita_l85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m85
  r = spreadsheet.costpercapita_m85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o85
  r = spreadsheet.costpercapita_o85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p85
  r = spreadsheet.costpercapita_p85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q85
  r = spreadsheet.costpercapita_q85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r85
  r = spreadsheet.costpercapita_r85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s85
  r = spreadsheet.costpercapita_s85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t85
  r = spreadsheet.costpercapita_t85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u85
  r = spreadsheet.costpercapita_u85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v85
  r = spreadsheet.costpercapita_v85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w85
  r = spreadsheet.costpercapita_w85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y85
  r = spreadsheet.costpercapita_y85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z85
  r = spreadsheet.costpercapita_z85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa85
  r = spreadsheet.costpercapita_aa85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab85
  r = spreadsheet.costpercapita_ab85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac85
  r = spreadsheet.costpercapita_ac85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad85
  r = spreadsheet.costpercapita_ad85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae85
  r = spreadsheet.costpercapita_ae85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af85
  r = spreadsheet.costpercapita_af85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag85
  r = spreadsheet.costpercapita_ag85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai85
  r = spreadsheet.costpercapita_ai85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj85
  r = spreadsheet.costpercapita_aj85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak85
  r = spreadsheet.costpercapita_ak85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al85
  r = spreadsheet.costpercapita_al85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am85
  r = spreadsheet.costpercapita_am85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an85
  r = spreadsheet.costpercapita_an85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao85
  r = spreadsheet.costpercapita_ao85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap85
  r = spreadsheet.costpercapita_ap85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq85
  r = spreadsheet.costpercapita_aq85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as85
  r = spreadsheet.costpercapita_as85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at85
  r = spreadsheet.costpercapita_at85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av85
  r = spreadsheet.costpercapita_av85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw85
  r = spreadsheet.costpercapita_aw85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay85
  r = spreadsheet.costpercapita_ay85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az85
  r = spreadsheet.costpercapita_az85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba85
  r = spreadsheet.costpercapita_ba85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb85
  r = spreadsheet.costpercapita_bb85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc85
  r = spreadsheet.costpercapita_bc85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd85
  r = spreadsheet.costpercapita_bd85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be85
  r = spreadsheet.costpercapita_be85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf85
  r = spreadsheet.costpercapita_bf85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg85
  r = spreadsheet.costpercapita_bg85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi85
  r = spreadsheet.costpercapita_bi85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj85
  r = spreadsheet.costpercapita_bj85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk85
  r = spreadsheet.costpercapita_bk85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl85
  r = spreadsheet.costpercapita_bl85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm85
  r = spreadsheet.costpercapita_bm85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn85
  r = spreadsheet.costpercapita_bn85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo85
  r = spreadsheet.costpercapita_bo85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp85
  r = spreadsheet.costpercapita_bp85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq85
  r = spreadsheet.costpercapita_bq85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs85
  r = spreadsheet.costpercapita_bs85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt85
  r = spreadsheet.costpercapita_bt85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu85
  r = spreadsheet.costpercapita_bu85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv85
  r = spreadsheet.costpercapita_bv85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw85
  r = spreadsheet.costpercapita_bw85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx85
  r = spreadsheet.costpercapita_bx85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by85
  r = spreadsheet.costpercapita_by85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz85
  r = spreadsheet.costpercapita_bz85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca85
  r = spreadsheet.costpercapita_ca85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc85
  r = spreadsheet.costpercapita_cc85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd85
  r = spreadsheet.costpercapita_cd85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf85
  r = spreadsheet.costpercapita_cf85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg85
  r = spreadsheet.costpercapita_cg85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch85
  r = spreadsheet.costpercapita_ch85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci85
  r = spreadsheet.costpercapita_ci85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj85
  r = spreadsheet.costpercapita_cj85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck85
  r = spreadsheet.costpercapita_ck85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl85
  r = spreadsheet.costpercapita_cl85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm85
  r = spreadsheet.costpercapita_cm85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn85
  r = spreadsheet.costpercapita_cn85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp85
  r = spreadsheet.costpercapita_cp85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq85
  r = spreadsheet.costpercapita_cq85
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr85
  r = spreadsheet.costpercapita_cr85
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a86
  r = spreadsheet.costpercapita_a86
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.ICE",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b86
  r = spreadsheet.costpercapita_b86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c86
  r = spreadsheet.costpercapita_c86
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e86
  r = spreadsheet.costpercapita_e86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(858.0023650833957,r[:number])
end

def test_costpercapita_f86
  r = spreadsheet.costpercapita_f86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(782.6792401027626,r[:number])
end

def test_costpercapita_g86
  r = spreadsheet.costpercapita_g86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(814.5766250947166,r[:number])
end

def test_costpercapita_h86
  r = spreadsheet.costpercapita_h86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(746.0615423524774,r[:number])
end

def test_costpercapita_i86
  r = spreadsheet.costpercapita_i86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.7144254150844,r[:number])
end

def test_costpercapita_j86
  r = spreadsheet.costpercapita_j86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(659.6913960726374,r[:number])
end

def test_costpercapita_k86
  r = spreadsheet.costpercapita_k86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(611.6647878635345,r[:number])
end

def test_costpercapita_l86
  r = spreadsheet.costpercapita_l86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.0914425387606,r[:number])
end

def test_costpercapita_m86
  r = spreadsheet.costpercapita_m86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.0401772885167,r[:number])
end

def test_costpercapita_o86
  r = spreadsheet.costpercapita_o86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.6199100558307,r[:number])
end

def test_costpercapita_p86
  r = spreadsheet.costpercapita_p86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(891.8734238915283,r[:number])
end

def test_costpercapita_q86
  r = spreadsheet.costpercapita_q86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(905.2911988694716,r[:number])
end

def test_costpercapita_r86
  r = spreadsheet.costpercapita_r86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(886.2230243570231,r[:number])
end

def test_costpercapita_s86
  r = spreadsheet.costpercapita_s86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.5167150626362,r[:number])
end

def test_costpercapita_t86
  r = spreadsheet.costpercapita_t86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(833.2234605867573,r[:number])
end

def test_costpercapita_u86
  r = spreadsheet.costpercapita_u86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(798.8126865241238,r[:number])
end

def test_costpercapita_v86
  r = spreadsheet.costpercapita_v86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.1263508435745,r[:number])
end

def test_costpercapita_w86
  r = spreadsheet.costpercapita_w86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743.3751367660244,r[:number])
end

def test_costpercapita_y86
  r = spreadsheet.costpercapita_y86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z86
  r = spreadsheet.costpercapita_z86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa86
  r = spreadsheet.costpercapita_aa86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab86
  r = spreadsheet.costpercapita_ab86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac86
  r = spreadsheet.costpercapita_ac86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad86
  r = spreadsheet.costpercapita_ad86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae86
  r = spreadsheet.costpercapita_ae86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af86
  r = spreadsheet.costpercapita_af86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag86
  r = spreadsheet.costpercapita_ag86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai86
  r = spreadsheet.costpercapita_ai86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1764.6222751392265,r[:number])
end

def test_costpercapita_aj86
  r = spreadsheet.costpercapita_aj86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1674.552663994291,r[:number])
end

def test_costpercapita_ak86
  r = spreadsheet.costpercapita_ak86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1719.8678239641881,r[:number])
end

def test_costpercapita_al86
  r = spreadsheet.costpercapita_al86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1632.2845667095005,r[:number])
end

def test_costpercapita_am86
  r = spreadsheet.costpercapita_am86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1564.2311404777204,r[:number])
end

def test_costpercapita_an86
  r = spreadsheet.costpercapita_an86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1492.9148566593944,r[:number])
end

def test_costpercapita_ao86
  r = spreadsheet.costpercapita_ao86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1410.4774743876583,r[:number])
end

def test_costpercapita_ap86
  r = spreadsheet.costpercapita_ap86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1356.217793382335,r[:number])
end

def test_costpercapita_aq86
  r = spreadsheet.costpercapita_aq86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1295.415314054541,r[:number])
end

def test_costpercapita_as86
  r = spreadsheet.costpercapita_as86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1545.6204343076506,r[:number])
end

def test_costpercapita_at86
  r = spreadsheet.costpercapita_at86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33184.97316404844,r[:number])
end

def test_costpercapita_av86
  r = spreadsheet.costpercapita_av86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw86
  r = spreadsheet.costpercapita_aw86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay86
  r = spreadsheet.costpercapita_ay86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.6121430007222,r[:number])
end

def test_costpercapita_az86
  r = spreadsheet.costpercapita_az86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(429.66986714175897,r[:number])
end

def test_costpercapita_ba86
  r = spreadsheet.costpercapita_ba86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(447.18067421243455,r[:number])
end

def test_costpercapita_bb86
  r = spreadsheet.costpercapita_bb86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(409.5677352322217,r[:number])
end

def test_costpercapita_bc86
  r = spreadsheet.costpercapita_bc86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(385.77133305216313,r[:number])
end

def test_costpercapita_bd86
  r = spreadsheet.costpercapita_bd86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(362.1528462513914,r[:number])
end

def test_costpercapita_be86
  r = spreadsheet.costpercapita_be86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(335.7875291314877,r[:number])
end

def test_costpercapita_bf86
  r = spreadsheet.costpercapita_bf86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(321.1994767465687,r[:number])
end

def test_costpercapita_bg86
  r = spreadsheet.costpercapita_bg86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.0552204263489,r[:number])
end

def test_costpercapita_bi86
  r = spreadsheet.costpercapita_bi86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.6121430007222,r[:number])
end

def test_costpercapita_bj86
  r = spreadsheet.costpercapita_bj86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(702.9628551558462,r[:number])
end

def test_costpercapita_bk86
  r = spreadsheet.costpercapita_bk86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1127.1298256573841,r[:number])
end

def test_costpercapita_bl86
  r = spreadsheet.costpercapita_bl86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1245.6368909483979,r[:number])
end

def test_costpercapita_bm86
  r = spreadsheet.costpercapita_bm86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1205.645259418575,r[:number])
end

def test_costpercapita_bn86
  r = spreadsheet.costpercapita_bn86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1127.8312714994188,r[:number])
end

def test_costpercapita_bo86
  r = spreadsheet.costpercapita_bo86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1058.8678715827125,r[:number])
end

def test_costpercapita_bp86
  r = spreadsheet.costpercapita_bp86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(997.648044163383,r[:number])
end

def test_costpercapita_bq86
  r = spreadsheet.costpercapita_bq86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(941.2084454228947,r[:number])
end

def test_costpercapita_bs86
  r = spreadsheet.costpercapita_bs86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1189.2320530565528,r[:number])
end

def test_costpercapita_bt86
  r = spreadsheet.costpercapita_bt86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1594.8362790473745,r[:number])
end

def test_costpercapita_bu86
  r = spreadsheet.costpercapita_bu86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2032.4210245268557,r[:number])
end

def test_costpercapita_bv86
  r = spreadsheet.costpercapita_bv86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2131.859915305421,r[:number])
end

def test_costpercapita_bw86
  r = spreadsheet.costpercapita_bw86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2067.1619744812115,r[:number])
end

def test_costpercapita_bx86
  r = spreadsheet.costpercapita_bx86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1961.054732086176,r[:number])
end

def test_costpercapita_by86
  r = spreadsheet.costpercapita_by86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1857.6805581068363,r[:number])
end

def test_costpercapita_bz86
  r = spreadsheet.costpercapita_bz86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1768.7743950069573,r[:number])
end

def test_costpercapita_ca86
  r = spreadsheet.costpercapita_ca86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1684.5835821889189,r[:number])
end

def test_costpercapita_cc86
  r = spreadsheet.costpercapita_cc86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1809.7338348673675,r[:number])
end

def test_costpercapita_cd86
  r = spreadsheet.costpercapita_cd86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39073.508672800264,r[:number])
end

def test_costpercapita_cf86
  r = spreadsheet.costpercapita_cf86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-575.3902220826735,r[:number])
end

def test_costpercapita_cg86
  r = spreadsheet.costpercapita_cg86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-79.71638494691642,r[:number])
end

def test_costpercapita_ch86
  r = spreadsheet.costpercapita_ch86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(312.5532005626674,r[:number])
end

def test_costpercapita_ci86
  r = spreadsheet.costpercapita_ci86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(499.5753485959205,r[:number])
end

def test_costpercapita_cj86
  r = spreadsheet.costpercapita_cj86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(502.9308340034907,r[:number])
end

def test_costpercapita_ck86
  r = spreadsheet.costpercapita_ck86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(468.1398754267815,r[:number])
end

def test_costpercapita_cl86
  r = spreadsheet.costpercapita_cl86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(447.20308371917787,r[:number])
end

def test_costpercapita_cm86
  r = spreadsheet.costpercapita_cm86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(412.55660162462243,r[:number])
end

def test_costpercapita_cn86
  r = spreadsheet.costpercapita_cn86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(389.1682681343779,r[:number])
end

def test_costpercapita_cp86
  r = spreadsheet.costpercapita_cp86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(264.11340055971647,r[:number])
end

def test_costpercapita_cq86
  r = spreadsheet.costpercapita_cq86
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5888.535508751816,r[:number])
end

def test_costpercapita_cr86
  r = spreadsheet.costpercapita_cr86
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a87
  r = spreadsheet.costpercapita_a87
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.HEV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b87
  r = spreadsheet.costpercapita_b87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hybrid cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c87
  r = spreadsheet.costpercapita_c87
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e87
  r = spreadsheet.costpercapita_e87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.493996908618019,r[:number])
end

def test_costpercapita_f87
  r = spreadsheet.costpercapita_f87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.55732304912126,r[:number])
end

def test_costpercapita_g87
  r = spreadsheet.costpercapita_g87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.45667028028749,r[:number])
end

def test_costpercapita_h87
  r = spreadsheet.costpercapita_h87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.61754616373935,r[:number])
end

def test_costpercapita_i87
  r = spreadsheet.costpercapita_i87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.13361261756754,r[:number])
end

def test_costpercapita_j87
  r = spreadsheet.costpercapita_j87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.54214927132804,r[:number])
end

def test_costpercapita_k87
  r = spreadsheet.costpercapita_k87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.95265683579777,r[:number])
end

def test_costpercapita_l87
  r = spreadsheet.costpercapita_l87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.81720526098184,r[:number])
end

def test_costpercapita_m87
  r = spreadsheet.costpercapita_m87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.0554017436353,r[:number])
end

def test_costpercapita_o87
  r = spreadsheet.costpercapita_o87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4130168017123628,r[:number])
end

def test_costpercapita_p87
  r = spreadsheet.costpercapita_p87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.4421329378611585,r[:number])
end

def test_costpercapita_q87
  r = spreadsheet.costpercapita_q87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.17916508127264,r[:number])
end

def test_costpercapita_r87
  r = spreadsheet.costpercapita_r87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.89300308261074,r[:number])
end

def test_costpercapita_s87
  r = spreadsheet.costpercapita_s87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.21938948540799,r[:number])
end

def test_costpercapita_t87
  r = spreadsheet.costpercapita_t87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.24950108528367,r[:number])
end

def test_costpercapita_u87
  r = spreadsheet.costpercapita_u87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.92765824760394,r[:number])
end

def test_costpercapita_v87
  r = spreadsheet.costpercapita_v87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.98255554839218,r[:number])
end

def test_costpercapita_w87
  r = spreadsheet.costpercapita_w87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.18436731793616,r[:number])
end

def test_costpercapita_y87
  r = spreadsheet.costpercapita_y87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z87
  r = spreadsheet.costpercapita_z87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa87
  r = spreadsheet.costpercapita_aa87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab87
  r = spreadsheet.costpercapita_ab87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac87
  r = spreadsheet.costpercapita_ac87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad87
  r = spreadsheet.costpercapita_ad87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae87
  r = spreadsheet.costpercapita_ae87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af87
  r = spreadsheet.costpercapita_af87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag87
  r = spreadsheet.costpercapita_ag87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai87
  r = spreadsheet.costpercapita_ai87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9070137103303817,r[:number])
end

def test_costpercapita_aj87
  r = spreadsheet.costpercapita_aj87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.99945598698242,r[:number])
end

def test_costpercapita_ak87
  r = spreadsheet.costpercapita_ak87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.635835361560126,r[:number])
end

def test_costpercapita_al87
  r = spreadsheet.costpercapita_al87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.5105492463501,r[:number])
end

def test_costpercapita_am87
  r = spreadsheet.costpercapita_am87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.35300210297555,r[:number])
end

def test_costpercapita_an87
  r = spreadsheet.costpercapita_an87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313.79165035661174,r[:number])
end

def test_costpercapita_ao87
  r = spreadsheet.costpercapita_ao87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.88031508340174,r[:number])
end

def test_costpercapita_ap87
  r = spreadsheet.costpercapita_ap87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(391.799760809374,r[:number])
end

def test_costpercapita_aq87
  r = spreadsheet.costpercapita_aq87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(412.23976906157145,r[:number])
end

def test_costpercapita_as87
  r = spreadsheet.costpercapita_as87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(216.9019279687953,r[:number])
end

def test_costpercapita_at87
  r = spreadsheet.costpercapita_at87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3792.3747007101715,r[:number])
end

def test_costpercapita_av87
  r = spreadsheet.costpercapita_av87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw87
  r = spreadsheet.costpercapita_aw87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay87
  r = spreadsheet.costpercapita_ay87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4920984896585379,r[:number])
end

def test_costpercapita_az87
  r = spreadsheet.costpercapita_az87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.540552227652935,r[:number])
end

def test_costpercapita_ba87
  r = spreadsheet.costpercapita_ba87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.779135303787026,r[:number])
end

def test_costpercapita_bb87
  r = spreadsheet.costpercapita_bb87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.17708670846509,r[:number])
end

def test_costpercapita_bc87
  r = spreadsheet.costpercapita_bc87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.57650639722539,r[:number])
end

def test_costpercapita_bd87
  r = spreadsheet.costpercapita_bd87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.1127876097928,r[:number])
end

def test_costpercapita_be87
  r = spreadsheet.costpercapita_be87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.96452707029793,r[:number])
end

def test_costpercapita_bf87
  r = spreadsheet.costpercapita_bf87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.73297966072279,r[:number])
end

def test_costpercapita_bg87
  r = spreadsheet.costpercapita_bg87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.25552811585322,r[:number])
end

def test_costpercapita_bi87
  r = spreadsheet.costpercapita_bi87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4920984896585379,r[:number])
end

def test_costpercapita_bj87
  r = spreadsheet.costpercapita_bj87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.016423735536648,r[:number])
end

def test_costpercapita_bk87
  r = spreadsheet.costpercapita_bk87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.500378002573825,r[:number])
end

def test_costpercapita_bl87
  r = spreadsheet.costpercapita_bl87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.59666167019755,r[:number])
end

def test_costpercapita_bm87
  r = spreadsheet.costpercapita_bm87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.21211473635412,r[:number])
end

def test_costpercapita_bn87
  r = spreadsheet.costpercapita_bn87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.99262273739936,r[:number])
end

def test_costpercapita_bo87
  r = spreadsheet.costpercapita_bo87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.05289980235887,r[:number])
end

def test_costpercapita_bp87
  r = spreadsheet.costpercapita_bp87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(320.52818651014525,r[:number])
end

def test_costpercapita_bq87
  r = spreadsheet.costpercapita_bq87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.51202447442586,r[:number])
end

def test_costpercapita_bs87
  r = spreadsheet.costpercapita_bs87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9051152913709007,r[:number])
end

def test_costpercapita_bt87
  r = spreadsheet.costpercapita_bt87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.458556673397805,r[:number])
end

def test_costpercapita_bu87
  r = spreadsheet.costpercapita_bu87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.67954308384646,r[:number])
end

def test_costpercapita_bv87
  r = spreadsheet.costpercapita_bv87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.4896647528083,r[:number])
end

def test_costpercapita_bw87
  r = spreadsheet.costpercapita_bw87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(244.4315042217621,r[:number])
end

def test_costpercapita_bx87
  r = spreadsheet.costpercapita_bx87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.2421238226831,r[:number])
end

def test_costpercapita_by87
  r = spreadsheet.costpercapita_by87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(446.98055804996284,r[:number])
end

def test_costpercapita_bz87
  r = spreadsheet.costpercapita_bz87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.5107420585374,r[:number])
end

def test_costpercapita_ca87
  r = spreadsheet.costpercapita_ca87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(534.6963917923621,r[:number])
end

def test_costpercapita_cc87
  r = spreadsheet.costpercapita_cc87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(253.71046663852565,r[:number])
end

def test_costpercapita_cd87
  r = spreadsheet.costpercapita_cd87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4268.179386616441,r[:number])
end

def test_costpercapita_cf87
  r = spreadsheet.costpercapita_cf87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.001898418959481,r[:number])
end

def test_costpercapita_cg87
  r = spreadsheet.costpercapita_cg87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.540899313584613,r[:number])
end

def test_costpercapita_ch87
  r = spreadsheet.costpercapita_ch87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9562922777136649,r[:number])
end

def test_costpercapita_ci87
  r = spreadsheet.costpercapita_ci87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-30.020884493541804,r[:number])
end

def test_costpercapita_cj87
  r = spreadsheet.costpercapita_cj87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.078502118786573,r[:number])
end

def test_costpercapita_ck87
  r = spreadsheet.costpercapita_ck87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.45047346607132,r[:number])
end

def test_costpercapita_cl87
  r = spreadsheet.costpercapita_cl87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.1002429665611,r[:number])
end

def test_costpercapita_cm87
  r = spreadsheet.costpercapita_cm87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.71098124916342,r[:number])
end

def test_costpercapita_cn87
  r = spreadsheet.costpercapita_cn87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.4566227307906,r[:number])
end

def test_costpercapita_cp87
  r = spreadsheet.costpercapita_cp87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.80853866973038,r[:number])
end

def test_costpercapita_cq87
  r = spreadsheet.costpercapita_cq87
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(475.8046859062684,r[:number])
end

def test_costpercapita_cr87
  r = spreadsheet.costpercapita_cr87
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a88
  r = spreadsheet.costpercapita_a88
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.EV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b88
  r = spreadsheet.costpercapita_b88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electric cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c88
  r = spreadsheet.costpercapita_c88
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e88
  r = spreadsheet.costpercapita_e88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f88
  r = spreadsheet.costpercapita_f88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2233603282704837,r[:number])
end

def test_costpercapita_g88
  r = spreadsheet.costpercapita_g88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.104925116731775,r[:number])
end

def test_costpercapita_h88
  r = spreadsheet.costpercapita_h88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.382245563148654,r[:number])
end

def test_costpercapita_i88
  r = spreadsheet.costpercapita_i88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.45757594588979,r[:number])
end

def test_costpercapita_j88
  r = spreadsheet.costpercapita_j88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.492736126349104,r[:number])
end

def test_costpercapita_k88
  r = spreadsheet.costpercapita_k88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.29626286538868,r[:number])
end

def test_costpercapita_l88
  r = spreadsheet.costpercapita_l88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.99395152152085,r[:number])
end

def test_costpercapita_m88
  r = spreadsheet.costpercapita_m88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.714093881279474,r[:number])
end

def test_costpercapita_o88
  r = spreadsheet.costpercapita_o88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p88
  r = spreadsheet.costpercapita_p88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6577018946423273,r[:number])
end

def test_costpercapita_q88
  r = spreadsheet.costpercapita_q88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2667680604842828,r[:number])
end

def test_costpercapita_r88
  r = spreadsheet.costpercapita_r88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.724119751836131,r[:number])
end

def test_costpercapita_s88
  r = spreadsheet.costpercapita_s88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.648398714644232,r[:number])
end

def test_costpercapita_t88
  r = spreadsheet.costpercapita_t88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.481951597035543,r[:number])
end

def test_costpercapita_u88
  r = spreadsheet.costpercapita_u88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.585759718718446,r[:number])
end

def test_costpercapita_v88
  r = spreadsheet.costpercapita_v88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.13465781644193,r[:number])
end

def test_costpercapita_w88
  r = spreadsheet.costpercapita_w88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.34002403280608,r[:number])
end

def test_costpercapita_y88
  r = spreadsheet.costpercapita_y88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z88
  r = spreadsheet.costpercapita_z88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa88
  r = spreadsheet.costpercapita_aa88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab88
  r = spreadsheet.costpercapita_ab88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac88
  r = spreadsheet.costpercapita_ac88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad88
  r = spreadsheet.costpercapita_ad88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae88
  r = spreadsheet.costpercapita_ae88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af88
  r = spreadsheet.costpercapita_af88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag88
  r = spreadsheet.costpercapita_ag88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai88
  r = spreadsheet.costpercapita_ai88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj88
  r = spreadsheet.costpercapita_aj88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.881062222912811,r[:number])
end

def test_costpercapita_ak88
  r = spreadsheet.costpercapita_ak88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.371693177216058,r[:number])
end

def test_costpercapita_al88
  r = spreadsheet.costpercapita_al88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.106365314984785,r[:number])
end

def test_costpercapita_am88
  r = spreadsheet.costpercapita_am88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.105974660534024,r[:number])
end

def test_costpercapita_an88
  r = spreadsheet.costpercapita_an88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.97468772338464,r[:number])
end

def test_costpercapita_ao88
  r = spreadsheet.costpercapita_ao88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.88202258410712,r[:number])
end

def test_costpercapita_ap88
  r = spreadsheet.costpercapita_ap88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.12860933796278,r[:number])
end

def test_costpercapita_aq88
  r = spreadsheet.costpercapita_aq88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.05411791408556,r[:number])
end

def test_costpercapita_as88
  r = spreadsheet.costpercapita_as88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.3893925483542,r[:number])
end

def test_costpercapita_at88
  r = spreadsheet.costpercapita_at88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(519.3329648985111,r[:number])
end

def test_costpercapita_av88
  r = spreadsheet.costpercapita_av88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw88
  r = spreadsheet.costpercapita_aw88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay88
  r = spreadsheet.costpercapita_ay88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az88
  r = spreadsheet.costpercapita_az88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.220565064087822,r[:number])
end

def test_costpercapita_ba88
  r = spreadsheet.costpercapita_ba88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7045204395814706,r[:number])
end

def test_costpercapita_bb88
  r = spreadsheet.costpercapita_bb88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.091358763838244,r[:number])
end

def test_costpercapita_bc88
  r = spreadsheet.costpercapita_bc88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.42655186037667,r[:number])
end

def test_costpercapita_bd88
  r = spreadsheet.costpercapita_bd88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.28866571900165,r[:number])
end

def test_costpercapita_be88
  r = spreadsheet.costpercapita_be88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.925672796772147,r[:number])
end

def test_costpercapita_bf88
  r = spreadsheet.costpercapita_bf88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.112792623542923,r[:number])
end

def test_costpercapita_bg88
  r = spreadsheet.costpercapita_bg88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.508131424147905,r[:number])
end

def test_costpercapita_bi88
  r = spreadsheet.costpercapita_bi88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj88
  r = spreadsheet.costpercapita_bj88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.220565064087822,r[:number])
end

def test_costpercapita_bk88
  r = spreadsheet.costpercapita_bk88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8851264609705694,r[:number])
end

def test_costpercapita_bl88
  r = spreadsheet.costpercapita_bl88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.887151684478864,r[:number])
end

def test_costpercapita_bm88
  r = spreadsheet.costpercapita_bm88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.848829862098864,r[:number])
end

def test_costpercapita_bn88
  r = spreadsheet.costpercapita_bn88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.98339237360087,r[:number])
end

def test_costpercapita_bo88
  r = spreadsheet.costpercapita_bo88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.67631894448807,r[:number])
end

def test_costpercapita_bp88
  r = spreadsheet.costpercapita_bp88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.2234324241337,r[:number])
end

def test_costpercapita_bq88
  r = spreadsheet.costpercapita_bq88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.446674829290416,r[:number])
end

def test_costpercapita_bs88
  r = spreadsheet.costpercapita_bs88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt88
  r = spreadsheet.costpercapita_bt88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8782669587301493,r[:number])
end

def test_costpercapita_bu88
  r = spreadsheet.costpercapita_bu88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.151894521454852,r[:number])
end

def test_costpercapita_bv88
  r = spreadsheet.costpercapita_bv88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.611271436314993,r[:number])
end

def test_costpercapita_bw88
  r = spreadsheet.costpercapita_bw88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.49722857674309,r[:number])
end

def test_costpercapita_bx88
  r = spreadsheet.costpercapita_bx88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.46534397063641,r[:number])
end

def test_costpercapita_by88
  r = spreadsheet.costpercapita_by88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.26207866320651,r[:number])
end

def test_costpercapita_bz88
  r = spreadsheet.costpercapita_bz88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.35809024057563,r[:number])
end

def test_costpercapita_ca88
  r = spreadsheet.costpercapita_ca88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.7866988620965,r[:number])
end

def test_costpercapita_cc88
  r = spreadsheet.costpercapita_cc88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.89009702552868,r[:number])
end

def test_costpercapita_cd88
  r = spreadsheet.costpercapita_cd88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(602.1438417612814,r[:number])
end

def test_costpercapita_cf88
  r = spreadsheet.costpercapita_cf88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg88
  r = spreadsheet.costpercapita_cg88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.0027952641826616,r[:number])
end

def test_costpercapita_ch88
  r = spreadsheet.costpercapita_ch88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.21979865576120544,r[:number])
end

def test_costpercapita_ci88
  r = spreadsheet.costpercapita_ci88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.495093878669791,r[:number])
end

def test_costpercapita_cj88
  r = spreadsheet.costpercapita_cj88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39125391620907374,r[:number])
end

def test_costpercapita_ck88
  r = spreadsheet.costpercapita_ck88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.49065624725177,r[:number])
end

def test_costpercapita_cl88
  r = spreadsheet.costpercapita_cl88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.380056079099385,r[:number])
end

def test_costpercapita_cm88
  r = spreadsheet.costpercapita_cm88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.22948090261285,r[:number])
end

def test_costpercapita_cn88
  r = spreadsheet.costpercapita_cn88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.732580948010938,r[:number])
end

def test_costpercapita_cp88
  r = spreadsheet.costpercapita_cp88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.500704477174484,r[:number])
end

def test_costpercapita_cq88
  r = spreadsheet.costpercapita_cq88
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.8108768627703,r[:number])
end

def test_costpercapita_cr88
  r = spreadsheet.costpercapita_cr88
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a89
  r = spreadsheet.costpercapita_a89
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.FCV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b89
  r = spreadsheet.costpercapita_b89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel cell cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c89
  r = spreadsheet.costpercapita_c89
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e89
  r = spreadsheet.costpercapita_e89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f89
  r = spreadsheet.costpercapita_f89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g89
  r = spreadsheet.costpercapita_g89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h89
  r = spreadsheet.costpercapita_h89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i89
  r = spreadsheet.costpercapita_i89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j89
  r = spreadsheet.costpercapita_j89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k89
  r = spreadsheet.costpercapita_k89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l89
  r = spreadsheet.costpercapita_l89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m89
  r = spreadsheet.costpercapita_m89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o89
  r = spreadsheet.costpercapita_o89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p89
  r = spreadsheet.costpercapita_p89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q89
  r = spreadsheet.costpercapita_q89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r89
  r = spreadsheet.costpercapita_r89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s89
  r = spreadsheet.costpercapita_s89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t89
  r = spreadsheet.costpercapita_t89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u89
  r = spreadsheet.costpercapita_u89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v89
  r = spreadsheet.costpercapita_v89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w89
  r = spreadsheet.costpercapita_w89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y89
  r = spreadsheet.costpercapita_y89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z89
  r = spreadsheet.costpercapita_z89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa89
  r = spreadsheet.costpercapita_aa89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab89
  r = spreadsheet.costpercapita_ab89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac89
  r = spreadsheet.costpercapita_ac89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad89
  r = spreadsheet.costpercapita_ad89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae89
  r = spreadsheet.costpercapita_ae89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af89
  r = spreadsheet.costpercapita_af89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag89
  r = spreadsheet.costpercapita_ag89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai89
  r = spreadsheet.costpercapita_ai89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj89
  r = spreadsheet.costpercapita_aj89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak89
  r = spreadsheet.costpercapita_ak89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al89
  r = spreadsheet.costpercapita_al89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am89
  r = spreadsheet.costpercapita_am89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an89
  r = spreadsheet.costpercapita_an89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao89
  r = spreadsheet.costpercapita_ao89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap89
  r = spreadsheet.costpercapita_ap89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq89
  r = spreadsheet.costpercapita_aq89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as89
  r = spreadsheet.costpercapita_as89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at89
  r = spreadsheet.costpercapita_at89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av89
  r = spreadsheet.costpercapita_av89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw89
  r = spreadsheet.costpercapita_aw89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay89
  r = spreadsheet.costpercapita_ay89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az89
  r = spreadsheet.costpercapita_az89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba89
  r = spreadsheet.costpercapita_ba89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb89
  r = spreadsheet.costpercapita_bb89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc89
  r = spreadsheet.costpercapita_bc89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd89
  r = spreadsheet.costpercapita_bd89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be89
  r = spreadsheet.costpercapita_be89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf89
  r = spreadsheet.costpercapita_bf89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg89
  r = spreadsheet.costpercapita_bg89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi89
  r = spreadsheet.costpercapita_bi89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj89
  r = spreadsheet.costpercapita_bj89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk89
  r = spreadsheet.costpercapita_bk89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl89
  r = spreadsheet.costpercapita_bl89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm89
  r = spreadsheet.costpercapita_bm89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn89
  r = spreadsheet.costpercapita_bn89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo89
  r = spreadsheet.costpercapita_bo89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp89
  r = spreadsheet.costpercapita_bp89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq89
  r = spreadsheet.costpercapita_bq89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs89
  r = spreadsheet.costpercapita_bs89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt89
  r = spreadsheet.costpercapita_bt89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu89
  r = spreadsheet.costpercapita_bu89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv89
  r = spreadsheet.costpercapita_bv89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw89
  r = spreadsheet.costpercapita_bw89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx89
  r = spreadsheet.costpercapita_bx89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by89
  r = spreadsheet.costpercapita_by89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz89
  r = spreadsheet.costpercapita_bz89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca89
  r = spreadsheet.costpercapita_ca89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc89
  r = spreadsheet.costpercapita_cc89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd89
  r = spreadsheet.costpercapita_cd89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf89
  r = spreadsheet.costpercapita_cf89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg89
  r = spreadsheet.costpercapita_cg89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch89
  r = spreadsheet.costpercapita_ch89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci89
  r = spreadsheet.costpercapita_ci89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj89
  r = spreadsheet.costpercapita_cj89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck89
  r = spreadsheet.costpercapita_ck89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl89
  r = spreadsheet.costpercapita_cl89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm89
  r = spreadsheet.costpercapita_cm89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn89
  r = spreadsheet.costpercapita_cn89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp89
  r = spreadsheet.costpercapita_cp89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq89
  r = spreadsheet.costpercapita_cq89
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr89
  r = spreadsheet.costpercapita_cr89
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a90
  r = spreadsheet.costpercapita_a90
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Bike",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b90
  r = spreadsheet.costpercapita_b90
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bikes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c90
  r = spreadsheet.costpercapita_c90
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e90
  r = spreadsheet.costpercapita_e90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.20482346514259,r[:number])
end

def test_costpercapita_f90
  r = spreadsheet.costpercapita_f90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.604477162323946,r[:number])
end

def test_costpercapita_g90
  r = spreadsheet.costpercapita_g90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.109168816149335,r[:number])
end

def test_costpercapita_h90
  r = spreadsheet.costpercapita_h90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.12677739938901,r[:number])
end

def test_costpercapita_i90
  r = spreadsheet.costpercapita_i90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.533784454656136,r[:number])
end

def test_costpercapita_j90
  r = spreadsheet.costpercapita_j90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.60341751882085,r[:number])
end

def test_costpercapita_k90
  r = spreadsheet.costpercapita_k90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.868798495681105,r[:number])
end

def test_costpercapita_l90
  r = spreadsheet.costpercapita_l90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.62790413465263,r[:number])
end

def test_costpercapita_m90
  r = spreadsheet.costpercapita_m90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.79019775788779,r[:number])
end

def test_costpercapita_o90
  r = spreadsheet.costpercapita_o90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.33060278324329,r[:number])
end

def test_costpercapita_p90
  r = spreadsheet.costpercapita_p90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.061217733863067,r[:number])
end

def test_costpercapita_q90
  r = spreadsheet.costpercapita_q90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.947798170200763,r[:number])
end

def test_costpercapita_r90
  r = spreadsheet.costpercapita_r90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.99799838471367,r[:number])
end

def test_costpercapita_s90
  r = spreadsheet.costpercapita_s90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.171475982875755,r[:number])
end

def test_costpercapita_t90
  r = spreadsheet.costpercapita_t90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.70623519912653,r[:number])
end

def test_costpercapita_u90
  r = spreadsheet.costpercapita_u90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.33508073416481,r[:number])
end

def test_costpercapita_v90
  r = spreadsheet.costpercapita_v90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.36504966481889,r[:number])
end

def test_costpercapita_w90
  r = spreadsheet.costpercapita_w90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.86478933113311,r[:number])
end

def test_costpercapita_y90
  r = spreadsheet.costpercapita_y90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z90
  r = spreadsheet.costpercapita_z90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa90
  r = spreadsheet.costpercapita_aa90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab90
  r = spreadsheet.costpercapita_ab90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac90
  r = spreadsheet.costpercapita_ac90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad90
  r = spreadsheet.costpercapita_ad90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae90
  r = spreadsheet.costpercapita_ae90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af90
  r = spreadsheet.costpercapita_af90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag90
  r = spreadsheet.costpercapita_ag90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai90
  r = spreadsheet.costpercapita_ai90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.53542624838589,r[:number])
end

def test_costpercapita_aj90
  r = spreadsheet.costpercapita_aj90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.66569489618702,r[:number])
end

def test_costpercapita_ak90
  r = spreadsheet.costpercapita_ak90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.05696698635009,r[:number])
end

def test_costpercapita_al90
  r = spreadsheet.costpercapita_al90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.12477578410268,r[:number])
end

def test_costpercapita_am90
  r = spreadsheet.costpercapita_am90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.7052604375319,r[:number])
end

def test_costpercapita_an90
  r = spreadsheet.costpercapita_an90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.30965271794739,r[:number])
end

def test_costpercapita_ao90
  r = spreadsheet.costpercapita_ao90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.20387922984591,r[:number])
end

def test_costpercapita_ap90
  r = spreadsheet.costpercapita_ap90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.99295379947152,r[:number])
end

def test_costpercapita_aq90
  r = spreadsheet.costpercapita_aq90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.6549870890209,r[:number])
end

def test_costpercapita_as90
  r = spreadsheet.costpercapita_as90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.36106635431592,r[:number])
end

def test_costpercapita_at90
  r = spreadsheet.costpercapita_at90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1834.4639038968241,r[:number])
end

def test_costpercapita_av90
  r = spreadsheet.costpercapita_av90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw90
  r = spreadsheet.costpercapita_aw90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay90
  r = spreadsheet.costpercapita_ay90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.524810873915907,r[:number])
end

def test_costpercapita_az90
  r = spreadsheet.costpercapita_az90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.78049789114007,r[:number])
end

def test_costpercapita_ba90
  r = spreadsheet.costpercapita_ba90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.606533168252547,r[:number])
end

def test_costpercapita_bb90
  r = spreadsheet.costpercapita_bb90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.165172930699153,r[:number])
end

def test_costpercapita_bc90
  r = spreadsheet.costpercapita_bc90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.38860886511774,r[:number])
end

def test_costpercapita_bd90
  r = spreadsheet.costpercapita_bd90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.426835545851464,r[:number])
end

def test_costpercapita_be90
  r = spreadsheet.costpercapita_be90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.023549446132222,r[:number])
end

def test_costpercapita_bf90
  r = spreadsheet.costpercapita_bf90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.342331792818644,r[:number])
end

def test_costpercapita_bg90
  r = spreadsheet.costpercapita_bg90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.33348038308093,r[:number])
end

def test_costpercapita_bi90
  r = spreadsheet.costpercapita_bi90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.524810873915907,r[:number])
end

def test_costpercapita_bj90
  r = spreadsheet.costpercapita_bj90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.72742691287714,r[:number])
end

def test_costpercapita_bk90
  r = spreadsheet.costpercapita_bk90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.86966684973905,r[:number])
end

def test_costpercapita_bl90
  r = spreadsheet.costpercapita_bl90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.92494418474087,r[:number])
end

def test_costpercapita_bm90
  r = spreadsheet.costpercapita_bm90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.72042447639724,r[:number])
end

def test_costpercapita_bn90
  r = spreadsheet.costpercapita_bn90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.82331438677217,r[:number])
end

def test_costpercapita_bo90
  r = spreadsheet.costpercapita_bo90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.90716743956601,r[:number])
end

def test_costpercapita_bp90
  r = spreadsheet.costpercapita_bp90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.01170348699303,r[:number])
end

def test_costpercapita_bq90
  r = spreadsheet.costpercapita_bq90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.06065952779292,r[:number])
end

def test_costpercapita_bs90
  r = spreadsheet.costpercapita_bs90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.8554136571592,r[:number])
end

def test_costpercapita_bt90
  r = spreadsheet.costpercapita_bt90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.78864464674021,r[:number])
end

def test_costpercapita_bu90
  r = spreadsheet.costpercapita_bu90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.8174650199398,r[:number])
end

def test_costpercapita_bv90
  r = spreadsheet.costpercapita_bv90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.92294256945453,r[:number])
end

def test_costpercapita_bw90
  r = spreadsheet.costpercapita_bw90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.89190045927299,r[:number])
end

def test_costpercapita_bx90
  r = spreadsheet.costpercapita_bx90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.52954958589869,r[:number])
end

def test_costpercapita_by90
  r = spreadsheet.costpercapita_by90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.24224817373081,r[:number])
end

def test_costpercapita_bz90
  r = spreadsheet.costpercapita_bz90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.37675315181193,r[:number])
end

def test_costpercapita_ca90
  r = spreadsheet.costpercapita_ca90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.92544885892605,r[:number])
end

def test_costpercapita_cc90
  r = spreadsheet.costpercapita_cc90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.37226290254824,r[:number])
end

def test_costpercapita_cd90
  r = spreadsheet.costpercapita_cd90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2233.8060209777586,r[:number])
end

def test_costpercapita_cf90
  r = spreadsheet.costpercapita_cf90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-35.680012591226685,r[:number])
end

def test_costpercapita_cg90
  r = spreadsheet.costpercapita_cg90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.877050249446804,r[:number])
end

def test_costpercapita_ch90
  r = spreadsheet.costpercapita_ch90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.760498033589716,r[:number])
end

def test_costpercapita_ci90
  r = spreadsheet.costpercapita_ci90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.79816678535186,r[:number])
end

def test_costpercapita_cj90
  r = spreadsheet.costpercapita_cj90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.186640021741105,r[:number])
end

def test_costpercapita_ck90
  r = spreadsheet.costpercapita_ck90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.21989686795131,r[:number])
end

def test_costpercapita_cl90
  r = spreadsheet.costpercapita_cl90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.038368943884905,r[:number])
end

def test_costpercapita_cm90
  r = spreadsheet.costpercapita_cm90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.383799352340404,r[:number])
end

def test_costpercapita_cn90
  r = spreadsheet.costpercapita_cn90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.270461769905125,r[:number])
end

def test_costpercapita_cp90
  r = spreadsheet.costpercapita_cp90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.011196548232324,r[:number])
end

def test_costpercapita_cq90
  r = spreadsheet.costpercapita_cq90
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(399.342117080934,r[:number])
end

def test_costpercapita_cr90
  r = spreadsheet.costpercapita_cr90
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a91
  r = spreadsheet.costpercapita_a91
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b91
  r = spreadsheet.costpercapita_b91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c91
  r = spreadsheet.costpercapita_c91
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e91
  r = spreadsheet.costpercapita_e91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8097265724431506,r[:number])
end

def test_costpercapita_f91
  r = spreadsheet.costpercapita_f91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0822829379334806,r[:number])
end

def test_costpercapita_g91
  r = spreadsheet.costpercapita_g91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2577463546652814,r[:number])
end

def test_costpercapita_h91
  r = spreadsheet.costpercapita_h91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1491821009690701,r[:number])
end

def test_costpercapita_i91
  r = spreadsheet.costpercapita_i91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.020002803060041,r[:number])
end

def test_costpercapita_j91
  r = spreadsheet.costpercapita_j91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.937619550266844,r[:number])
end

def test_costpercapita_k91
  r = spreadsheet.costpercapita_k91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8188125435615818,r[:number])
end

def test_costpercapita_l91
  r = spreadsheet.costpercapita_l91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7515632137578752,r[:number])
end

def test_costpercapita_m91
  r = spreadsheet.costpercapita_m91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8914821757344452,r[:number])
end

def test_costpercapita_o91
  r = spreadsheet.costpercapita_o91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.70395383068492,r[:number])
end

def test_costpercapita_p91
  r = spreadsheet.costpercapita_p91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.35941062914124,r[:number])
end

def test_costpercapita_q91
  r = spreadsheet.costpercapita_q91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.11109307800993,r[:number])
end

def test_costpercapita_r91
  r = spreadsheet.costpercapita_r91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.32344376476637,r[:number])
end

def test_costpercapita_s91
  r = spreadsheet.costpercapita_s91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.96674678539485,r[:number])
end

def test_costpercapita_t91
  r = spreadsheet.costpercapita_t91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.78650516940166,r[:number])
end

def test_costpercapita_u91
  r = spreadsheet.costpercapita_u91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.06868714148133,r[:number])
end

def test_costpercapita_v91
  r = spreadsheet.costpercapita_v91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.55809647366024,r[:number])
end

def test_costpercapita_w91
  r = spreadsheet.costpercapita_w91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.25693170048837,r[:number])
end

def test_costpercapita_y91
  r = spreadsheet.costpercapita_y91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z91
  r = spreadsheet.costpercapita_z91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa91
  r = spreadsheet.costpercapita_aa91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab91
  r = spreadsheet.costpercapita_ab91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac91
  r = spreadsheet.costpercapita_ac91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad91
  r = spreadsheet.costpercapita_ad91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae91
  r = spreadsheet.costpercapita_ae91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af91
  r = spreadsheet.costpercapita_af91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag91
  r = spreadsheet.costpercapita_ag91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai91
  r = spreadsheet.costpercapita_ai91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.51368040312806,r[:number])
end

def test_costpercapita_aj91
  r = spreadsheet.costpercapita_aj91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.44169356707474,r[:number])
end

def test_costpercapita_ak91
  r = spreadsheet.costpercapita_ak91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.3688394326752,r[:number])
end

def test_costpercapita_al91
  r = spreadsheet.costpercapita_al91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.47262586573542,r[:number])
end

def test_costpercapita_am91
  r = spreadsheet.costpercapita_am91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.98674958845488,r[:number])
end

def test_costpercapita_an91
  r = spreadsheet.costpercapita_an91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.72412471966851,r[:number])
end

def test_costpercapita_ao91
  r = spreadsheet.costpercapita_ao91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.88749968504293,r[:number])
end

def test_costpercapita_ap91
  r = spreadsheet.costpercapita_ap91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.30965968741812,r[:number])
end

def test_costpercapita_aq91
  r = spreadsheet.costpercapita_aq91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.14841387622282,r[:number])
end

def test_costpercapita_as91
  r = spreadsheet.costpercapita_as91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.87258742504676,r[:number])
end

def test_costpercapita_at91
  r = spreadsheet.costpercapita_at91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2332.098799859337,r[:number])
end

def test_costpercapita_av91
  r = spreadsheet.costpercapita_av91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw91
  r = spreadsheet.costpercapita_aw91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay91
  r = spreadsheet.costpercapita_ay91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5960947494985038,r[:number])
end

def test_costpercapita_az91
  r = spreadsheet.costpercapita_az91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5941442449535461,r[:number])
end

def test_costpercapita_ba91
  r = spreadsheet.costpercapita_ba91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.690468944897668,r[:number])
end

def test_costpercapita_bb91
  r = spreadsheet.costpercapita_bb91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6308700874450662,r[:number])
end

def test_costpercapita_bc91
  r = spreadsheet.costpercapita_bc91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5599541247797593,r[:number])
end

def test_costpercapita_bd91
  r = spreadsheet.costpercapita_bd91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5147279331693733,r[:number])
end

def test_costpercapita_be91
  r = spreadsheet.costpercapita_be91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4495060796041022,r[:number])
end

def test_costpercapita_bf91
  r = spreadsheet.costpercapita_bf91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4125880049681412,r[:number])
end

def test_costpercapita_bg91
  r = spreadsheet.costpercapita_bg91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.48939975456200085,r[:number])
end

def test_costpercapita_bi91
  r = spreadsheet.costpercapita_bi91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5960947494985038,r[:number])
end

def test_costpercapita_bj91
  r = spreadsheet.costpercapita_bj91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.170582728807153,r[:number])
end

def test_costpercapita_bk91
  r = spreadsheet.costpercapita_bk91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8227289602182193,r[:number])
end

def test_costpercapita_bl91
  r = spreadsheet.costpercapita_bl91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8568582817826098,r[:number])
end

def test_costpercapita_bm91
  r = spreadsheet.costpercapita_bm91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8243987409582363,r[:number])
end

def test_costpercapita_bn91
  r = spreadsheet.costpercapita_bn91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.660671978534433,r[:number])
end

def test_costpercapita_bo91
  r = spreadsheet.costpercapita_bo91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4883602412050707,r[:number])
end

def test_costpercapita_bp91
  r = spreadsheet.costpercapita_bp91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3468292369947379,r[:number])
end

def test_costpercapita_bq91
  r = spreadsheet.costpercapita_bq91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.326606288296906,r[:number])
end

def test_costpercapita_bs91
  r = spreadsheet.costpercapita_bs91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.30004858018344,r[:number])
end

def test_costpercapita_bt91
  r = spreadsheet.costpercapita_bt91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.5299933579484,r[:number])
end

def test_costpercapita_bu91
  r = spreadsheet.costpercapita_bu91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.93382203822814,r[:number])
end

def test_costpercapita_bv91
  r = spreadsheet.costpercapita_bv91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18030204654896,r[:number])
end

def test_costpercapita_bw91
  r = spreadsheet.costpercapita_bw91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.79114552635308,r[:number])
end

def test_costpercapita_bx91
  r = spreadsheet.costpercapita_bx91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.4471771479361,r[:number])
end

def test_costpercapita_by91
  r = spreadsheet.costpercapita_by91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.5570473826864,r[:number])
end

def test_costpercapita_bz91
  r = spreadsheet.costpercapita_bz91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.90492571065498,r[:number])
end

def test_costpercapita_ca91
  r = spreadsheet.costpercapita_ca91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.58353798878527,r[:number])
end

def test_costpercapita_cc91
  r = spreadsheet.costpercapita_cc91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.24755553103608,r[:number])
end

def test_costpercapita_cd91
  r = spreadsheet.costpercapita_cd91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2341.6068619206803,r[:number])
end

def test_costpercapita_cf91
  r = spreadsheet.costpercapita_cf91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.2136318229446468,r[:number])
end

def test_costpercapita_cg91
  r = spreadsheet.costpercapita_cg91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08829979087367251,r[:number])
end

def test_costpercapita_ch91
  r = spreadsheet.costpercapita_ch91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5649826055529379,r[:number])
end

def test_costpercapita_ci91
  r = spreadsheet.costpercapita_ci91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7076761808135397,r[:number])
end

def test_costpercapita_cj91
  r = spreadsheet.costpercapita_cj91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8043959378981954,r[:number])
end

def test_costpercapita_ck91
  r = spreadsheet.costpercapita_ck91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7230524282675891,r[:number])
end

def test_costpercapita_cl91
  r = spreadsheet.costpercapita_cl91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6695476976434889,r[:number])
end

def test_costpercapita_cm91
  r = spreadsheet.costpercapita_cm91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5952660232368627,r[:number])
end

def test_costpercapita_cn91
  r = spreadsheet.costpercapita_cn91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.43512411256246075,r[:number])
end

def test_costpercapita_cp91
  r = spreadsheet.costpercapita_cp91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3749681059893445,r[:number])
end

def test_costpercapita_cq91
  r = spreadsheet.costpercapita_cq91
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.508062061343805,r[:number])
end

def test_costpercapita_cr91
  r = spreadsheet.costpercapita_cr91
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a92
  r = spreadsheet.costpercapita_a92
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Air",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b92
  r = spreadsheet.costpercapita_b92
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c92
  r = spreadsheet.costpercapita_c92
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e92
  r = spreadsheet.costpercapita_e92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.896398734813296,r[:number])
end

def test_costpercapita_f92
  r = spreadsheet.costpercapita_f92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.015936325620542,r[:number])
end

def test_costpercapita_g92
  r = spreadsheet.costpercapita_g92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.03462723761943,r[:number])
end

def test_costpercapita_h92
  r = spreadsheet.costpercapita_h92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.087148817989553,r[:number])
end

def test_costpercapita_i92
  r = spreadsheet.costpercapita_i92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.945074800244306,r[:number])
end

def test_costpercapita_j92
  r = spreadsheet.costpercapita_j92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.909476600843458,r[:number])
end

def test_costpercapita_k92
  r = spreadsheet.costpercapita_k92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.594827571706515,r[:number])
end

def test_costpercapita_l92
  r = spreadsheet.costpercapita_l92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.441166529886658,r[:number])
end

def test_costpercapita_m92
  r = spreadsheet.costpercapita_m92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.239497787855287,r[:number])
end

def test_costpercapita_o92
  r = spreadsheet.costpercapita_o92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.996006703994697,r[:number])
end

def test_costpercapita_p92
  r = spreadsheet.costpercapita_p92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.324014827298457,r[:number])
end

def test_costpercapita_q92
  r = spreadsheet.costpercapita_q92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793946375544617,r[:number])
end

def test_costpercapita_r92
  r = spreadsheet.costpercapita_r92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.259370767991622,r[:number])
end

def test_costpercapita_s92
  r = spreadsheet.costpercapita_s92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.708482707833969,r[:number])
end

def test_costpercapita_t92
  r = spreadsheet.costpercapita_t92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.173018575666719,r[:number])
end

def test_costpercapita_u92
  r = spreadsheet.costpercapita_u92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.604886414724205,r[:number])
end

def test_costpercapita_v92
  r = spreadsheet.costpercapita_v92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.044498828535568,r[:number])
end

def test_costpercapita_w92
  r = spreadsheet.costpercapita_w92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.492809818930669,r[:number])
end

def test_costpercapita_y92
  r = spreadsheet.costpercapita_y92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z92
  r = spreadsheet.costpercapita_z92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa92
  r = spreadsheet.costpercapita_aa92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab92
  r = spreadsheet.costpercapita_ab92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac92
  r = spreadsheet.costpercapita_ac92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad92
  r = spreadsheet.costpercapita_ad92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae92
  r = spreadsheet.costpercapita_ae92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af92
  r = spreadsheet.costpercapita_af92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag92
  r = spreadsheet.costpercapita_ag92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai92
  r = spreadsheet.costpercapita_ai92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.892405438807991,r[:number])
end

def test_costpercapita_aj92
  r = spreadsheet.costpercapita_aj92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.339951152919,r[:number])
end

def test_costpercapita_ak92
  r = spreadsheet.costpercapita_ak92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.828573613164046,r[:number])
end

def test_costpercapita_al92
  r = spreadsheet.costpercapita_al92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.346519585981175,r[:number])
end

def test_costpercapita_am92
  r = spreadsheet.costpercapita_am92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.653557508078276,r[:number])
end

def test_costpercapita_an92
  r = spreadsheet.costpercapita_an92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.082495176510177,r[:number])
end

def test_costpercapita_ao92
  r = spreadsheet.costpercapita_ao92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.19971398643072,r[:number])
end

def test_costpercapita_ap92
  r = spreadsheet.costpercapita_ap92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.485665358422226,r[:number])
end

def test_costpercapita_aq92
  r = spreadsheet.costpercapita_aq92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.732307606785955,r[:number])
end

def test_costpercapita_as92
  r = spreadsheet.costpercapita_as92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.395687714122175,r[:number])
end

def test_costpercapita_at92
  r = spreadsheet.costpercapita_at92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(297.1337380625269,r[:number])
end

def test_costpercapita_av92
  r = spreadsheet.costpercapita_av92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw92
  r = spreadsheet.costpercapita_aw92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay92
  r = spreadsheet.costpercapita_ay92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.930330280838005,r[:number])
end

def test_costpercapita_az92
  r = spreadsheet.costpercapita_az92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.400533602493363,r[:number])
end

def test_costpercapita_ba92
  r = spreadsheet.costpercapita_ba92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.959767534339583,r[:number])
end

def test_costpercapita_bb92
  r = spreadsheet.costpercapita_bb92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.98860047036679,r[:number])
end

def test_costpercapita_bc92
  r = spreadsheet.costpercapita_bc92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.9106056530762725,r[:number])
end

def test_costpercapita_bd92
  r = spreadsheet.costpercapita_bd92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.891063198360034,r[:number])
end

def test_costpercapita_be92
  r = spreadsheet.costpercapita_be92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7183293380269,r[:number])
end

def test_costpercapita_bf92
  r = spreadsheet.costpercapita_bf92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.633973555938016,r[:number])
end

def test_costpercapita_bg92
  r = spreadsheet.costpercapita_bg92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.523262836711723,r[:number])
end

def test_costpercapita_bi92
  r = spreadsheet.costpercapita_bi92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.930330280838005,r[:number])
end

def test_costpercapita_bj92
  r = spreadsheet.costpercapita_bj92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.234236039392303,r[:number])
end

def test_costpercapita_bk92
  r = spreadsheet.costpercapita_bk92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.957168065903588,r[:number])
end

def test_costpercapita_bl92
  r = spreadsheet.costpercapita_bl92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.919469591396851,r[:number])
end

def test_costpercapita_bm92
  r = spreadsheet.costpercapita_bm92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.437806684639883,r[:number])
end

def test_costpercapita_bn92
  r = spreadsheet.costpercapita_bn92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.424007694919236,r[:number])
end

def test_costpercapita_bo92
  r = spreadsheet.costpercapita_bo92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.197758161897733,r[:number])
end

def test_costpercapita_bp92
  r = spreadsheet.costpercapita_bp92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.949450686434584,r[:number])
end

def test_costpercapita_bq92
  r = spreadsheet.costpercapita_bq92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.608671107786774,r[:number])
end

def test_costpercapita_bs92
  r = spreadsheet.costpercapita_bs92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.926336984832702,r[:number])
end

def test_costpercapita_bt92
  r = spreadsheet.costpercapita_bt92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.558250866690761,r[:number])
end

def test_costpercapita_bu92
  r = spreadsheet.costpercapita_bu92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.751114441448205,r[:number])
end

def test_costpercapita_bv92
  r = spreadsheet.costpercapita_bv92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.17884035938847,r[:number])
end

def test_costpercapita_bw92
  r = spreadsheet.costpercapita_bw92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.14628939247385,r[:number])
end

def test_costpercapita_bx92
  r = spreadsheet.costpercapita_bx92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.597026270585957,r[:number])
end

def test_costpercapita_by92
  r = spreadsheet.costpercapita_by92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.80264457662194,r[:number])
end

def test_costpercapita_bz92
  r = spreadsheet.costpercapita_bz92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.993949514970154,r[:number])
end

def test_costpercapita_ca92
  r = spreadsheet.costpercapita_ca92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.101480926717446,r[:number])
end

def test_costpercapita_cc92
  r = spreadsheet.costpercapita_cc92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.561770370414386,r[:number])
end

def test_costpercapita_cd92
  r = spreadsheet.costpercapita_cd92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(363.6897091492634,r[:number])
end

def test_costpercapita_cf92
  r = spreadsheet.costpercapita_cf92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.96606845397529,r[:number])
end

def test_costpercapita_cg92
  r = spreadsheet.costpercapita_cg92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.7817002862282396,r[:number])
end

def test_costpercapita_ch92
  r = spreadsheet.costpercapita_ch92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9225408282841583,r[:number])
end

def test_costpercapita_ci92
  r = spreadsheet.costpercapita_ci92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.8323207734072975,r[:number])
end

def test_costpercapita_cj92
  r = spreadsheet.costpercapita_cj92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.492731884395577,r[:number])
end

def test_costpercapita_ck92
  r = spreadsheet.costpercapita_ck92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.514531094075778,r[:number])
end

def test_costpercapita_cl92
  r = spreadsheet.costpercapita_cl92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.602930590191218,r[:number])
end

def test_costpercapita_cm92
  r = spreadsheet.costpercapita_cm92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.508284156547928,r[:number])
end

def test_costpercapita_cn92
  r = spreadsheet.costpercapita_cn92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.369173319931488,r[:number])
end

def test_costpercapita_cp92
  r = spreadsheet.costpercapita_cp92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.166082656292213,r[:number])
end

def test_costpercapita_cq92
  r = spreadsheet.costpercapita_cq92
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.55597108673653,r[:number])
end

def test_costpercapita_cr92
  r = spreadsheet.costpercapita_cr92
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a93
  r = spreadsheet.costpercapita_a93
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b93
  r = spreadsheet.costpercapita_b93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c93
  r = spreadsheet.costpercapita_c93
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e93
  r = spreadsheet.costpercapita_e93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.58318032317311,r[:number])
end

def test_costpercapita_f93
  r = spreadsheet.costpercapita_f93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.98887295633718,r[:number])
end

def test_costpercapita_g93
  r = spreadsheet.costpercapita_g93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.51977098254152,r[:number])
end

def test_costpercapita_h93
  r = spreadsheet.costpercapita_h93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.18853614187321,r[:number])
end

def test_costpercapita_i93
  r = spreadsheet.costpercapita_i93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.00527539404861,r[:number])
end

def test_costpercapita_j93
  r = spreadsheet.costpercapita_j93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.98544945912127,r[:number])
end

def test_costpercapita_k93
  r = spreadsheet.costpercapita_k93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.0191744121591,r[:number])
end

def test_costpercapita_l93
  r = spreadsheet.costpercapita_l93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.04846502480378,r[:number])
end

def test_costpercapita_m93
  r = spreadsheet.costpercapita_m93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.07208383394236,r[:number])
end

def test_costpercapita_o93
  r = spreadsheet.costpercapita_o93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.33805341280801,r[:number])
end

def test_costpercapita_p93
  r = spreadsheet.costpercapita_p93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.026886244722,r[:number])
end

def test_costpercapita_q93
  r = spreadsheet.costpercapita_q93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.10695824626555,r[:number])
end

def test_costpercapita_r93
  r = spreadsheet.costpercapita_r93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.20387391171141,r[:number])
end

def test_costpercapita_s93
  r = spreadsheet.costpercapita_s93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55166379487936,r[:number])
end

def test_costpercapita_t93
  r = spreadsheet.costpercapita_t93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18613584478634,r[:number])
end

def test_costpercapita_u93
  r = spreadsheet.costpercapita_u93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.94699136772934,r[:number])
end

def test_costpercapita_v93
  r = spreadsheet.costpercapita_v93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.74737348640706,r[:number])
end

def test_costpercapita_w93
  r = spreadsheet.costpercapita_w93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.58744013692298,r[:number])
end

def test_costpercapita_y93
  r = spreadsheet.costpercapita_y93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z93
  r = spreadsheet.costpercapita_z93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa93
  r = spreadsheet.costpercapita_aa93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab93
  r = spreadsheet.costpercapita_ab93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac93
  r = spreadsheet.costpercapita_ac93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad93
  r = spreadsheet.costpercapita_ad93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae93
  r = spreadsheet.costpercapita_ae93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af93
  r = spreadsheet.costpercapita_af93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag93
  r = spreadsheet.costpercapita_ag93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai93
  r = spreadsheet.costpercapita_ai93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.92123373598113,r[:number])
end

def test_costpercapita_aj93
  r = spreadsheet.costpercapita_aj93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.01575920105915,r[:number])
end

def test_costpercapita_ak93
  r = spreadsheet.costpercapita_ak93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(185.62672922880705,r[:number])
end

def test_costpercapita_al93
  r = spreadsheet.costpercapita_al93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.39241005358463,r[:number])
end

def test_costpercapita_am93
  r = spreadsheet.costpercapita_am93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.55693918892797,r[:number])
end

def test_costpercapita_an93
  r = spreadsheet.costpercapita_an93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.17158530390762,r[:number])
end

def test_costpercapita_ao93
  r = spreadsheet.costpercapita_ao93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.96616577988843,r[:number])
end

def test_costpercapita_ap93
  r = spreadsheet.costpercapita_ap93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.7958385112108,r[:number])
end

def test_costpercapita_aq93
  r = spreadsheet.costpercapita_aq93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.6595239708653,r[:number])
end

def test_costpercapita_as93
  r = spreadsheet.costpercapita_as93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.23402055269247,r[:number])
end

def test_costpercapita_at93
  r = spreadsheet.costpercapita_at93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3935.278895891472,r[:number])
end

def test_costpercapita_av93
  r = spreadsheet.costpercapita_av93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw93
  r = spreadsheet.costpercapita_aw93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay93
  r = spreadsheet.costpercapita_ay93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.26080975904972,r[:number])
end

def test_costpercapita_az93
  r = spreadsheet.costpercapita_az93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.715848938467516,r[:number])
end

def test_costpercapita_ba93
  r = spreadsheet.costpercapita_ba93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.909351439165505,r[:number])
end

def test_costpercapita_bb93
  r = spreadsheet.costpercapita_bb93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.72751241407014,r[:number])
end

def test_costpercapita_bc93
  r = spreadsheet.costpercapita_bc93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.62690718892099,r[:number])
end

def test_costpercapita_bd93
  r = spreadsheet.costpercapita_bd93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.61602328349753,r[:number])
end

def test_costpercapita_be93
  r = spreadsheet.costpercapita_be93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.634537376306774,r[:number])
end

def test_costpercapita_bf93
  r = spreadsheet.costpercapita_bf93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.65061713541969,r[:number])
end

def test_costpercapita_bg93
  r = spreadsheet.costpercapita_bg93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.66358322684598,r[:number])
end

def test_costpercapita_bi93
  r = spreadsheet.costpercapita_bi93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.26080975904972,r[:number])
end

def test_costpercapita_bj93
  r = spreadsheet.costpercapita_bj93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.24260695412825,r[:number])
end

def test_costpercapita_bk93
  r = spreadsheet.costpercapita_bk93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.08151241215533,r[:number])
end

def test_costpercapita_bl93
  r = spreadsheet.costpercapita_bl93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.47093655674286,r[:number])
end

def test_costpercapita_bm93
  r = spreadsheet.costpercapita_bm93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.80135007262031,r[:number])
end

def test_costpercapita_bn93
  r = spreadsheet.costpercapita_bn93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.96761104641747,r[:number])
end

def test_costpercapita_bo93
  r = spreadsheet.costpercapita_bo93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.2082639113895,r[:number])
end

def test_costpercapita_bp93
  r = spreadsheet.costpercapita_bp93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.43148342773307,r[:number])
end

def test_costpercapita_bq93
  r = spreadsheet.costpercapita_bq93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.6363677190879,r[:number])
end

def test_costpercapita_bs93
  r = spreadsheet.costpercapita_bs93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.59886317185773,r[:number])
end

def test_costpercapita_bt93
  r = spreadsheet.costpercapita_bt93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.26949319885023,r[:number])
end

def test_costpercapita_bu93
  r = spreadsheet.costpercapita_bu93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.1884706584209,r[:number])
end

def test_costpercapita_bv93
  r = spreadsheet.costpercapita_bv93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.6748104684543,r[:number])
end

def test_costpercapita_bw93
  r = spreadsheet.costpercapita_bw93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.35301386749967,r[:number])
end

def test_costpercapita_bx93
  r = spreadsheet.costpercapita_bx93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.15374689120378,r[:number])
end

def test_costpercapita_by93
  r = spreadsheet.costpercapita_by93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236.15525527911882,r[:number])
end

def test_costpercapita_bz93
  r = spreadsheet.costpercapita_bz93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(238.1788569141401,r[:number])
end

def test_costpercapita_ca93
  r = spreadsheet.costpercapita_ca93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.2238078560109,r[:number])
end

def test_costpercapita_cc93
  r = spreadsheet.costpercapita_cc93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.97736870061738,r[:number])
end

def test_costpercapita_cd93
  r = spreadsheet.costpercapita_cd93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4487.503619601061,r[:number])
end

def test_costpercapita_cf93
  r = spreadsheet.costpercapita_cf93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-45.32237056412339,r[:number])
end

def test_costpercapita_cg93
  r = spreadsheet.costpercapita_cg93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-12.746266002208923,r[:number])
end

def test_costpercapita_ch93
  r = spreadsheet.costpercapita_ch93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.561741429613825,r[:number])
end

def test_costpercapita_ci93
  r = spreadsheet.costpercapita_ci93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28240041486964,r[:number])
end

def test_costpercapita_cj93
  r = spreadsheet.costpercapita_cj93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.7960746785717,r[:number])
end

def test_costpercapita_ck93
  r = spreadsheet.costpercapita_ck93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.9821615872962,r[:number])
end

def test_costpercapita_cl93
  r = spreadsheet.costpercapita_cl93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.189089499230384,r[:number])
end

def test_costpercapita_cm93
  r = spreadsheet.costpercapita_cm93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.383018402929295,r[:number])
end

def test_costpercapita_cn93
  r = spreadsheet.costpercapita_cn93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.56428388514554,r[:number])
end

def test_costpercapita_cp93
  r = spreadsheet.costpercapita_cp93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.74334814792492,r[:number])
end

def test_costpercapita_cq93
  r = spreadsheet.costpercapita_cq93
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(552.2247237095879,r[:number])
end

def test_costpercapita_cr93
  r = spreadsheet.costpercapita_cr93
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a94
  r = spreadsheet.costpercapita_a94
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b94
  r = spreadsheet.costpercapita_b94
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c94
  r = spreadsheet.costpercapita_c94
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e94
  r = spreadsheet.costpercapita_e94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f94
  r = spreadsheet.costpercapita_f94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g94
  r = spreadsheet.costpercapita_g94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h94
  r = spreadsheet.costpercapita_h94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i94
  r = spreadsheet.costpercapita_i94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j94
  r = spreadsheet.costpercapita_j94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k94
  r = spreadsheet.costpercapita_k94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l94
  r = spreadsheet.costpercapita_l94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m94
  r = spreadsheet.costpercapita_m94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o94
  r = spreadsheet.costpercapita_o94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p94
  r = spreadsheet.costpercapita_p94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q94
  r = spreadsheet.costpercapita_q94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r94
  r = spreadsheet.costpercapita_r94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s94
  r = spreadsheet.costpercapita_s94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t94
  r = spreadsheet.costpercapita_t94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u94
  r = spreadsheet.costpercapita_u94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v94
  r = spreadsheet.costpercapita_v94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w94
  r = spreadsheet.costpercapita_w94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y94
  r = spreadsheet.costpercapita_y94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z94
  r = spreadsheet.costpercapita_z94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa94
  r = spreadsheet.costpercapita_aa94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab94
  r = spreadsheet.costpercapita_ab94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac94
  r = spreadsheet.costpercapita_ac94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad94
  r = spreadsheet.costpercapita_ad94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae94
  r = spreadsheet.costpercapita_ae94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af94
  r = spreadsheet.costpercapita_af94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag94
  r = spreadsheet.costpercapita_ag94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai94
  r = spreadsheet.costpercapita_ai94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj94
  r = spreadsheet.costpercapita_aj94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak94
  r = spreadsheet.costpercapita_ak94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al94
  r = spreadsheet.costpercapita_al94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am94
  r = spreadsheet.costpercapita_am94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an94
  r = spreadsheet.costpercapita_an94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao94
  r = spreadsheet.costpercapita_ao94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap94
  r = spreadsheet.costpercapita_ap94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq94
  r = spreadsheet.costpercapita_aq94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as94
  r = spreadsheet.costpercapita_as94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at94
  r = spreadsheet.costpercapita_at94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av94
  r = spreadsheet.costpercapita_av94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw94
  r = spreadsheet.costpercapita_aw94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay94
  r = spreadsheet.costpercapita_ay94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az94
  r = spreadsheet.costpercapita_az94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba94
  r = spreadsheet.costpercapita_ba94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb94
  r = spreadsheet.costpercapita_bb94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc94
  r = spreadsheet.costpercapita_bc94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd94
  r = spreadsheet.costpercapita_bd94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be94
  r = spreadsheet.costpercapita_be94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf94
  r = spreadsheet.costpercapita_bf94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg94
  r = spreadsheet.costpercapita_bg94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi94
  r = spreadsheet.costpercapita_bi94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj94
  r = spreadsheet.costpercapita_bj94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk94
  r = spreadsheet.costpercapita_bk94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl94
  r = spreadsheet.costpercapita_bl94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm94
  r = spreadsheet.costpercapita_bm94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn94
  r = spreadsheet.costpercapita_bn94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo94
  r = spreadsheet.costpercapita_bo94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp94
  r = spreadsheet.costpercapita_bp94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq94
  r = spreadsheet.costpercapita_bq94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs94
  r = spreadsheet.costpercapita_bs94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt94
  r = spreadsheet.costpercapita_bt94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu94
  r = spreadsheet.costpercapita_bu94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv94
  r = spreadsheet.costpercapita_bv94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw94
  r = spreadsheet.costpercapita_bw94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx94
  r = spreadsheet.costpercapita_bx94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by94
  r = spreadsheet.costpercapita_by94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz94
  r = spreadsheet.costpercapita_bz94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca94
  r = spreadsheet.costpercapita_ca94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc94
  r = spreadsheet.costpercapita_cc94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd94
  r = spreadsheet.costpercapita_cd94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf94
  r = spreadsheet.costpercapita_cf94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg94
  r = spreadsheet.costpercapita_cg94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch94
  r = spreadsheet.costpercapita_ch94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci94
  r = spreadsheet.costpercapita_ci94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj94
  r = spreadsheet.costpercapita_cj94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck94
  r = spreadsheet.costpercapita_ck94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl94
  r = spreadsheet.costpercapita_cl94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm94
  r = spreadsheet.costpercapita_cm94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn94
  r = spreadsheet.costpercapita_cn94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp94
  r = spreadsheet.costpercapita_cp94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq94
  r = spreadsheet.costpercapita_cq94
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr94
  r = spreadsheet.costpercapita_cr94
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a95
  r = spreadsheet.costpercapita_a95
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.e",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b95
  r = spreadsheet.costpercapita_b95
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping (maritime bunkers)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c95
  r = spreadsheet.costpercapita_c95
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e95
  r = spreadsheet.costpercapita_e95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f95
  r = spreadsheet.costpercapita_f95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g95
  r = spreadsheet.costpercapita_g95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h95
  r = spreadsheet.costpercapita_h95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i95
  r = spreadsheet.costpercapita_i95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j95
  r = spreadsheet.costpercapita_j95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k95
  r = spreadsheet.costpercapita_k95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l95
  r = spreadsheet.costpercapita_l95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m95
  r = spreadsheet.costpercapita_m95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o95
  r = spreadsheet.costpercapita_o95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p95
  r = spreadsheet.costpercapita_p95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q95
  r = spreadsheet.costpercapita_q95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r95
  r = spreadsheet.costpercapita_r95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s95
  r = spreadsheet.costpercapita_s95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t95
  r = spreadsheet.costpercapita_t95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u95
  r = spreadsheet.costpercapita_u95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v95
  r = spreadsheet.costpercapita_v95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w95
  r = spreadsheet.costpercapita_w95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y95
  r = spreadsheet.costpercapita_y95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z95
  r = spreadsheet.costpercapita_z95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa95
  r = spreadsheet.costpercapita_aa95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab95
  r = spreadsheet.costpercapita_ab95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac95
  r = spreadsheet.costpercapita_ac95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad95
  r = spreadsheet.costpercapita_ad95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae95
  r = spreadsheet.costpercapita_ae95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af95
  r = spreadsheet.costpercapita_af95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag95
  r = spreadsheet.costpercapita_ag95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai95
  r = spreadsheet.costpercapita_ai95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj95
  r = spreadsheet.costpercapita_aj95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak95
  r = spreadsheet.costpercapita_ak95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al95
  r = spreadsheet.costpercapita_al95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am95
  r = spreadsheet.costpercapita_am95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an95
  r = spreadsheet.costpercapita_an95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao95
  r = spreadsheet.costpercapita_ao95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap95
  r = spreadsheet.costpercapita_ap95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq95
  r = spreadsheet.costpercapita_aq95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as95
  r = spreadsheet.costpercapita_as95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at95
  r = spreadsheet.costpercapita_at95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av95
  r = spreadsheet.costpercapita_av95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw95
  r = spreadsheet.costpercapita_aw95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay95
  r = spreadsheet.costpercapita_ay95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az95
  r = spreadsheet.costpercapita_az95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba95
  r = spreadsheet.costpercapita_ba95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb95
  r = spreadsheet.costpercapita_bb95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc95
  r = spreadsheet.costpercapita_bc95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd95
  r = spreadsheet.costpercapita_bd95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be95
  r = spreadsheet.costpercapita_be95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf95
  r = spreadsheet.costpercapita_bf95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg95
  r = spreadsheet.costpercapita_bg95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi95
  r = spreadsheet.costpercapita_bi95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj95
  r = spreadsheet.costpercapita_bj95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk95
  r = spreadsheet.costpercapita_bk95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl95
  r = spreadsheet.costpercapita_bl95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm95
  r = spreadsheet.costpercapita_bm95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn95
  r = spreadsheet.costpercapita_bn95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo95
  r = spreadsheet.costpercapita_bo95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp95
  r = spreadsheet.costpercapita_bp95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq95
  r = spreadsheet.costpercapita_bq95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs95
  r = spreadsheet.costpercapita_bs95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt95
  r = spreadsheet.costpercapita_bt95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu95
  r = spreadsheet.costpercapita_bu95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv95
  r = spreadsheet.costpercapita_bv95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw95
  r = spreadsheet.costpercapita_bw95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx95
  r = spreadsheet.costpercapita_bx95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by95
  r = spreadsheet.costpercapita_by95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz95
  r = spreadsheet.costpercapita_bz95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca95
  r = spreadsheet.costpercapita_ca95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc95
  r = spreadsheet.costpercapita_cc95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd95
  r = spreadsheet.costpercapita_cd95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf95
  r = spreadsheet.costpercapita_cf95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg95
  r = spreadsheet.costpercapita_cg95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch95
  r = spreadsheet.costpercapita_ch95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci95
  r = spreadsheet.costpercapita_ci95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj95
  r = spreadsheet.costpercapita_cj95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck95
  r = spreadsheet.costpercapita_ck95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl95
  r = spreadsheet.costpercapita_cl95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm95
  r = spreadsheet.costpercapita_cm95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn95
  r = spreadsheet.costpercapita_cn95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp95
  r = spreadsheet.costpercapita_cp95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq95
  r = spreadsheet.costpercapita_cq95
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr95
  r = spreadsheet.costpercapita_cr95
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a96
  r = spreadsheet.costpercapita_a96
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b96
  r = spreadsheet.costpercapita_b96
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c96
  r = spreadsheet.costpercapita_c96
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e96
  r = spreadsheet.costpercapita_e96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f96
  r = spreadsheet.costpercapita_f96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g96
  r = spreadsheet.costpercapita_g96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h96
  r = spreadsheet.costpercapita_h96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i96
  r = spreadsheet.costpercapita_i96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j96
  r = spreadsheet.costpercapita_j96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k96
  r = spreadsheet.costpercapita_k96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l96
  r = spreadsheet.costpercapita_l96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m96
  r = spreadsheet.costpercapita_m96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o96
  r = spreadsheet.costpercapita_o96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p96
  r = spreadsheet.costpercapita_p96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q96
  r = spreadsheet.costpercapita_q96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r96
  r = spreadsheet.costpercapita_r96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s96
  r = spreadsheet.costpercapita_s96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t96
  r = spreadsheet.costpercapita_t96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u96
  r = spreadsheet.costpercapita_u96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v96
  r = spreadsheet.costpercapita_v96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w96
  r = spreadsheet.costpercapita_w96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y96
  r = spreadsheet.costpercapita_y96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z96
  r = spreadsheet.costpercapita_z96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa96
  r = spreadsheet.costpercapita_aa96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab96
  r = spreadsheet.costpercapita_ab96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac96
  r = spreadsheet.costpercapita_ac96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad96
  r = spreadsheet.costpercapita_ad96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae96
  r = spreadsheet.costpercapita_ae96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af96
  r = spreadsheet.costpercapita_af96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag96
  r = spreadsheet.costpercapita_ag96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai96
  r = spreadsheet.costpercapita_ai96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj96
  r = spreadsheet.costpercapita_aj96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak96
  r = spreadsheet.costpercapita_ak96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al96
  r = spreadsheet.costpercapita_al96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am96
  r = spreadsheet.costpercapita_am96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an96
  r = spreadsheet.costpercapita_an96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao96
  r = spreadsheet.costpercapita_ao96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap96
  r = spreadsheet.costpercapita_ap96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq96
  r = spreadsheet.costpercapita_aq96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as96
  r = spreadsheet.costpercapita_as96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at96
  r = spreadsheet.costpercapita_at96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av96
  r = spreadsheet.costpercapita_av96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw96
  r = spreadsheet.costpercapita_aw96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay96
  r = spreadsheet.costpercapita_ay96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az96
  r = spreadsheet.costpercapita_az96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba96
  r = spreadsheet.costpercapita_ba96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb96
  r = spreadsheet.costpercapita_bb96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc96
  r = spreadsheet.costpercapita_bc96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd96
  r = spreadsheet.costpercapita_bd96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be96
  r = spreadsheet.costpercapita_be96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf96
  r = spreadsheet.costpercapita_bf96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg96
  r = spreadsheet.costpercapita_bg96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi96
  r = spreadsheet.costpercapita_bi96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj96
  r = spreadsheet.costpercapita_bj96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk96
  r = spreadsheet.costpercapita_bk96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl96
  r = spreadsheet.costpercapita_bl96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm96
  r = spreadsheet.costpercapita_bm96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn96
  r = spreadsheet.costpercapita_bn96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo96
  r = spreadsheet.costpercapita_bo96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp96
  r = spreadsheet.costpercapita_bp96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq96
  r = spreadsheet.costpercapita_bq96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs96
  r = spreadsheet.costpercapita_bs96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt96
  r = spreadsheet.costpercapita_bt96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu96
  r = spreadsheet.costpercapita_bu96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv96
  r = spreadsheet.costpercapita_bv96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw96
  r = spreadsheet.costpercapita_bw96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx96
  r = spreadsheet.costpercapita_bx96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by96
  r = spreadsheet.costpercapita_by96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz96
  r = spreadsheet.costpercapita_bz96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca96
  r = spreadsheet.costpercapita_ca96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc96
  r = spreadsheet.costpercapita_cc96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd96
  r = spreadsheet.costpercapita_cd96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf96
  r = spreadsheet.costpercapita_cf96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg96
  r = spreadsheet.costpercapita_cg96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch96
  r = spreadsheet.costpercapita_ch96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci96
  r = spreadsheet.costpercapita_ci96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj96
  r = spreadsheet.costpercapita_cj96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck96
  r = spreadsheet.costpercapita_ck96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl96
  r = spreadsheet.costpercapita_cl96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm96
  r = spreadsheet.costpercapita_cm96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn96
  r = spreadsheet.costpercapita_cn96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp96
  r = spreadsheet.costpercapita_cp96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq96
  r = spreadsheet.costpercapita_cq96
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr96
  r = spreadsheet.costpercapita_cr96
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a97
  r = spreadsheet.costpercapita_a97
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b97
  r = spreadsheet.costpercapita_b97
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c97
  r = spreadsheet.costpercapita_c97
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e97
  r = spreadsheet.costpercapita_e97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number])
end

def test_costpercapita_f97
  r = spreadsheet.costpercapita_f97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_g97
  r = spreadsheet.costpercapita_g97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number])
end

def test_costpercapita_h97
  r = spreadsheet.costpercapita_h97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_i97
  r = spreadsheet.costpercapita_i97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_j97
  r = spreadsheet.costpercapita_j97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number])
end

def test_costpercapita_k97
  r = spreadsheet.costpercapita_k97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_l97
  r = spreadsheet.costpercapita_l97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number])
end

def test_costpercapita_m97
  r = spreadsheet.costpercapita_m97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number])
end

def test_costpercapita_o97
  r = spreadsheet.costpercapita_o97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number])
end

def test_costpercapita_p97
  r = spreadsheet.costpercapita_p97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number])
end

def test_costpercapita_q97
  r = spreadsheet.costpercapita_q97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number])
end

def test_costpercapita_r97
  r = spreadsheet.costpercapita_r97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number])
end

def test_costpercapita_s97
  r = spreadsheet.costpercapita_s97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number])
end

def test_costpercapita_t97
  r = spreadsheet.costpercapita_t97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number])
end

def test_costpercapita_u97
  r = spreadsheet.costpercapita_u97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number])
end

def test_costpercapita_v97
  r = spreadsheet.costpercapita_v97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number])
end

def test_costpercapita_w97
  r = spreadsheet.costpercapita_w97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number])
end

def test_costpercapita_y97
  r = spreadsheet.costpercapita_y97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z97
  r = spreadsheet.costpercapita_z97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa97
  r = spreadsheet.costpercapita_aa97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab97
  r = spreadsheet.costpercapita_ab97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac97
  r = spreadsheet.costpercapita_ac97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad97
  r = spreadsheet.costpercapita_ad97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae97
  r = spreadsheet.costpercapita_ae97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af97
  r = spreadsheet.costpercapita_af97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag97
  r = spreadsheet.costpercapita_ag97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai97
  r = spreadsheet.costpercapita_ai97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number])
end

def test_costpercapita_aj97
  r = spreadsheet.costpercapita_aj97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number])
end

def test_costpercapita_ak97
  r = spreadsheet.costpercapita_ak97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number])
end

def test_costpercapita_al97
  r = spreadsheet.costpercapita_al97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number])
end

def test_costpercapita_am97
  r = spreadsheet.costpercapita_am97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number])
end

def test_costpercapita_an97
  r = spreadsheet.costpercapita_an97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number])
end

def test_costpercapita_ao97
  r = spreadsheet.costpercapita_ao97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number])
end

def test_costpercapita_ap97
  r = spreadsheet.costpercapita_ap97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number])
end

def test_costpercapita_aq97
  r = spreadsheet.costpercapita_aq97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number])
end

def test_costpercapita_as97
  r = spreadsheet.costpercapita_as97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number])
end

def test_costpercapita_at97
  r = spreadsheet.costpercapita_at97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number])
end

def test_costpercapita_av97
  r = spreadsheet.costpercapita_av97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw97
  r = spreadsheet.costpercapita_aw97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay97
  r = spreadsheet.costpercapita_ay97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606618,r[:number])
end

def test_costpercapita_az97
  r = spreadsheet.costpercapita_az97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2763512888766306,r[:number])
end

def test_costpercapita_ba97
  r = spreadsheet.costpercapita_ba97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0864822453746497,r[:number])
end

def test_costpercapita_bb97
  r = spreadsheet.costpercapita_bb97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9177689518223227,r[:number])
end

def test_costpercapita_bc97
  r = spreadsheet.costpercapita_bc97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7861215830875206,r[:number])
end

def test_costpercapita_bd97
  r = spreadsheet.costpercapita_bd97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6841678520770926,r[:number])
end

def test_costpercapita_be97
  r = spreadsheet.costpercapita_be97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.602904473633629,r[:number])
end

def test_costpercapita_bf97
  r = spreadsheet.costpercapita_bf97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5365417900539668,r[:number])
end

def test_costpercapita_bg97
  r = spreadsheet.costpercapita_bg97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4817549919258615,r[:number])
end

def test_costpercapita_bi97
  r = spreadsheet.costpercapita_bi97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606618,r[:number])
end

def test_costpercapita_bj97
  r = spreadsheet.costpercapita_bj97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.726360079930723,r[:number])
end

def test_costpercapita_bk97
  r = spreadsheet.costpercapita_bk97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6908481883881,r[:number])
end

def test_costpercapita_bl97
  r = spreadsheet.costpercapita_bl97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.073297976593122,r[:number])
end

def test_costpercapita_bm97
  r = spreadsheet.costpercapita_bm97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.618136295612382,r[:number])
end

def test_costpercapita_bn97
  r = spreadsheet.costpercapita_bn97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.249651097877794,r[:number])
end

def test_costpercapita_bo97
  r = spreadsheet.costpercapita_bo97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.958009111399689,r[:number])
end

def test_costpercapita_bp97
  r = spreadsheet.costpercapita_bp97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.722843102107809,r[:number])
end

def test_costpercapita_bq97
  r = spreadsheet.costpercapita_bq97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.53123582374163,r[:number])
end

def test_costpercapita_bs97
  r = spreadsheet.costpercapita_bs97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.661384269345847,r[:number])
end

def test_costpercapita_bt97
  r = spreadsheet.costpercapita_bt97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.87114145163831,r[:number])
end

def test_costpercapita_bu97
  r = spreadsheet.costpercapita_bu97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.915700762742697,r[:number])
end

def test_costpercapita_bv97
  r = spreadsheet.costpercapita_bv97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.560584553723462,r[:number])
end

def test_costpercapita_bw97
  r = spreadsheet.costpercapita_bw97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.529390145121367,r[:number])
end

def test_costpercapita_bx97
  r = spreadsheet.costpercapita_bx97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.711605489803887,r[:number])
end

def test_costpercapita_by97
  r = spreadsheet.costpercapita_by97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.058216584150578,r[:number])
end

def test_costpercapita_bz97
  r = spreadsheet.costpercapita_bz97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.523992306048212,r[:number])
end

def test_costpercapita_ca97
  r = spreadsheet.costpercapita_ca97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.082410954688166,r[:number])
end

def test_costpercapita_cc97
  r = spreadsheet.costpercapita_cc97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.990491835251394,r[:number])
end

def test_costpercapita_cd97
  r = spreadsheet.costpercapita_cd97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.16366951927455,r[:number])
end

def test_costpercapita_cf97
  r = spreadsheet.costpercapita_cf97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.0528440790564164,r[:number])
end

def test_costpercapita_cg97
  r = spreadsheet.costpercapita_cg97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.42020227697082163,r[:number])
end

def test_costpercapita_ch97
  r = spreadsheet.costpercapita_ch97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8901480155762285,r[:number])
end

def test_costpercapita_ci97
  r = spreadsheet.costpercapita_ci97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.579923037619917,r[:number])
end

def test_costpercapita_cj97
  r = spreadsheet.costpercapita_cj97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3645679393262724,r[:number])
end

def test_costpercapita_ck97
  r = spreadsheet.costpercapita_ck97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1817999045002856,r[:number])
end

def test_costpercapita_cl97
  r = spreadsheet.costpercapita_cl97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.038185890547722,r[:number])
end

def test_costpercapita_cm97
  r = spreadsheet.costpercapita_cm97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9239050042942083,r[:number])
end

def test_costpercapita_cn97
  r = spreadsheet.costpercapita_cn97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.832096415121241,r[:number])
end

def test_costpercapita_cp97
  r = spreadsheet.costpercapita_cp97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2597310945509597,r[:number])
end

def test_costpercapita_cq97
  r = spreadsheet.costpercapita_cq97
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.151145613717016,r[:number])
end

def test_costpercapita_cr97
  r = spreadsheet.costpercapita_cr97
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a98
  r = spreadsheet.costpercapita_a98
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b98
  r = spreadsheet.costpercapita_b98
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c98
  r = spreadsheet.costpercapita_c98
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e98
  r = spreadsheet.costpercapita_e98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f98
  r = spreadsheet.costpercapita_f98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g98
  r = spreadsheet.costpercapita_g98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h98
  r = spreadsheet.costpercapita_h98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i98
  r = spreadsheet.costpercapita_i98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j98
  r = spreadsheet.costpercapita_j98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k98
  r = spreadsheet.costpercapita_k98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l98
  r = spreadsheet.costpercapita_l98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m98
  r = spreadsheet.costpercapita_m98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o98
  r = spreadsheet.costpercapita_o98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p98
  r = spreadsheet.costpercapita_p98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q98
  r = spreadsheet.costpercapita_q98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r98
  r = spreadsheet.costpercapita_r98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s98
  r = spreadsheet.costpercapita_s98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t98
  r = spreadsheet.costpercapita_t98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u98
  r = spreadsheet.costpercapita_u98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v98
  r = spreadsheet.costpercapita_v98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w98
  r = spreadsheet.costpercapita_w98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y98
  r = spreadsheet.costpercapita_y98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_z98
  r = spreadsheet.costpercapita_z98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.748201619163304,r[:number])
end

def test_costpercapita_aa98
  r = spreadsheet.costpercapita_aa98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.907861102269763,r[:number])
end

def test_costpercapita_ab98
  r = spreadsheet.costpercapita_ab98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.070378554491267,r[:number])
end

def test_costpercapita_ac98
  r = spreadsheet.costpercapita_ac98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.635656982915402,r[:number])
end

def test_costpercapita_ad98
  r = spreadsheet.costpercapita_ad98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.432238073854396,r[:number])
end

def test_costpercapita_ae98
  r = spreadsheet.costpercapita_ae98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.252408907659154,r[:number])
end

def test_costpercapita_af98
  r = spreadsheet.costpercapita_af98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.087790470682751,r[:number])
end

def test_costpercapita_ag98
  r = spreadsheet.costpercapita_ag98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.936858266343649,r[:number])
end

def test_costpercapita_ai98
  r = spreadsheet.costpercapita_ai98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_aj98
  r = spreadsheet.costpercapita_aj98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.748201619163304,r[:number])
end

def test_costpercapita_ak98
  r = spreadsheet.costpercapita_ak98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.907861102269763,r[:number])
end

def test_costpercapita_al98
  r = spreadsheet.costpercapita_al98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.070378554491267,r[:number])
end

def test_costpercapita_am98
  r = spreadsheet.costpercapita_am98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.635656982915402,r[:number])
end

def test_costpercapita_an98
  r = spreadsheet.costpercapita_an98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.432238073854396,r[:number])
end

def test_costpercapita_ao98
  r = spreadsheet.costpercapita_ao98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.252408907659154,r[:number])
end

def test_costpercapita_ap98
  r = spreadsheet.costpercapita_ap98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.087790470682751,r[:number])
end

def test_costpercapita_aq98
  r = spreadsheet.costpercapita_aq98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.936858266343649,r[:number])
end

def test_costpercapita_as98
  r = spreadsheet.costpercapita_as98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.07042400698528,r[:number])
end

def test_costpercapita_at98
  r = spreadsheet.costpercapita_at98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275.13698776109413,r[:number])
end

def test_costpercapita_av98
  r = spreadsheet.costpercapita_av98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw98
  r = spreadsheet.costpercapita_aw98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay98
  r = spreadsheet.costpercapita_ay98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az98
  r = spreadsheet.costpercapita_az98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba98
  r = spreadsheet.costpercapita_ba98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb98
  r = spreadsheet.costpercapita_bb98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc98
  r = spreadsheet.costpercapita_bc98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd98
  r = spreadsheet.costpercapita_bd98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be98
  r = spreadsheet.costpercapita_be98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf98
  r = spreadsheet.costpercapita_bf98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg98
  r = spreadsheet.costpercapita_bg98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi98
  r = spreadsheet.costpercapita_bi98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj98
  r = spreadsheet.costpercapita_bj98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk98
  r = spreadsheet.costpercapita_bk98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl98
  r = spreadsheet.costpercapita_bl98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm98
  r = spreadsheet.costpercapita_bm98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn98
  r = spreadsheet.costpercapita_bn98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo98
  r = spreadsheet.costpercapita_bo98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp98
  r = spreadsheet.costpercapita_bp98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq98
  r = spreadsheet.costpercapita_bq98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs98
  r = spreadsheet.costpercapita_bs98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_bt98
  r = spreadsheet.costpercapita_bt98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.748201619163304,r[:number])
end

def test_costpercapita_bu98
  r = spreadsheet.costpercapita_bu98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.907861102269763,r[:number])
end

def test_costpercapita_bv98
  r = spreadsheet.costpercapita_bv98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.070378554491267,r[:number])
end

def test_costpercapita_bw98
  r = spreadsheet.costpercapita_bw98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.635656982915402,r[:number])
end

def test_costpercapita_bx98
  r = spreadsheet.costpercapita_bx98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.432238073854396,r[:number])
end

def test_costpercapita_by98
  r = spreadsheet.costpercapita_by98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.252408907659154,r[:number])
end

def test_costpercapita_bz98
  r = spreadsheet.costpercapita_bz98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.087790470682751,r[:number])
end

def test_costpercapita_ca98
  r = spreadsheet.costpercapita_ca98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.936858266343649,r[:number])
end

def test_costpercapita_cc98
  r = spreadsheet.costpercapita_cc98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.07042400698528,r[:number])
end

def test_costpercapita_cd98
  r = spreadsheet.costpercapita_cd98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275.13698776109413,r[:number])
end

def test_costpercapita_cf98
  r = spreadsheet.costpercapita_cf98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg98
  r = spreadsheet.costpercapita_cg98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch98
  r = spreadsheet.costpercapita_ch98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci98
  r = spreadsheet.costpercapita_ci98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj98
  r = spreadsheet.costpercapita_cj98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck98
  r = spreadsheet.costpercapita_ck98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl98
  r = spreadsheet.costpercapita_cl98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm98
  r = spreadsheet.costpercapita_cm98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn98
  r = spreadsheet.costpercapita_cn98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp98
  r = spreadsheet.costpercapita_cp98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq98
  r = spreadsheet.costpercapita_cq98
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr98
  r = spreadsheet.costpercapita_cr98
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a99
  r = spreadsheet.costpercapita_a99
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b99
  r = spreadsheet.costpercapita_b99
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c99
  r = spreadsheet.costpercapita_c99
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e99
  r = spreadsheet.costpercapita_e99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f99
  r = spreadsheet.costpercapita_f99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g99
  r = spreadsheet.costpercapita_g99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h99
  r = spreadsheet.costpercapita_h99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i99
  r = spreadsheet.costpercapita_i99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j99
  r = spreadsheet.costpercapita_j99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k99
  r = spreadsheet.costpercapita_k99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l99
  r = spreadsheet.costpercapita_l99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m99
  r = spreadsheet.costpercapita_m99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o99
  r = spreadsheet.costpercapita_o99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p99
  r = spreadsheet.costpercapita_p99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q99
  r = spreadsheet.costpercapita_q99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r99
  r = spreadsheet.costpercapita_r99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s99
  r = spreadsheet.costpercapita_s99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t99
  r = spreadsheet.costpercapita_t99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u99
  r = spreadsheet.costpercapita_u99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v99
  r = spreadsheet.costpercapita_v99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w99
  r = spreadsheet.costpercapita_w99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y99
  r = spreadsheet.costpercapita_y99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.9280784216838,r[:number])
end

def test_costpercapita_z99
  r = spreadsheet.costpercapita_z99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(364.4631782859332,r[:number])
end

def test_costpercapita_aa99
  r = spreadsheet.costpercapita_aa99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308.39508235119274,r[:number])
end

def test_costpercapita_ab99
  r = spreadsheet.costpercapita_ab99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.4196880138303,r[:number])
end

def test_costpercapita_ac99
  r = spreadsheet.costpercapita_ac99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.44748836071335,r[:number])
end

def test_costpercapita_ad99
  r = spreadsheet.costpercapita_ad99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.2711012960243,r[:number])
end

def test_costpercapita_ae99
  r = spreadsheet.costpercapita_ae99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.12721611645668,r[:number])
end

def test_costpercapita_af99
  r = spreadsheet.costpercapita_af99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.61463858318164,r[:number])
end

def test_costpercapita_ag99
  r = spreadsheet.costpercapita_ag99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.32607769146757,r[:number])
end

def test_costpercapita_ai99
  r = spreadsheet.costpercapita_ai99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.9280784216838,r[:number])
end

def test_costpercapita_aj99
  r = spreadsheet.costpercapita_aj99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(364.4631782859332,r[:number])
end

def test_costpercapita_ak99
  r = spreadsheet.costpercapita_ak99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308.39508235119274,r[:number])
end

def test_costpercapita_al99
  r = spreadsheet.costpercapita_al99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.4196880138303,r[:number])
end

def test_costpercapita_am99
  r = spreadsheet.costpercapita_am99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.44748836071335,r[:number])
end

def test_costpercapita_an99
  r = spreadsheet.costpercapita_an99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.2711012960243,r[:number])
end

def test_costpercapita_ao99
  r = spreadsheet.costpercapita_ao99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.12721611645668,r[:number])
end

def test_costpercapita_ap99
  r = spreadsheet.costpercapita_ap99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.61463858318164,r[:number])
end

def test_costpercapita_aq99
  r = spreadsheet.costpercapita_aq99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.32607769146757,r[:number])
end

def test_costpercapita_as99
  r = spreadsheet.costpercapita_as99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.99917212449816,r[:number])
end

def test_costpercapita_at99
  r = spreadsheet.costpercapita_at99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5134.316611644483,r[:number])
end

def test_costpercapita_av99
  r = spreadsheet.costpercapita_av99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw99
  r = spreadsheet.costpercapita_aw99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay99
  r = spreadsheet.costpercapita_ay99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az99
  r = spreadsheet.costpercapita_az99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba99
  r = spreadsheet.costpercapita_ba99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb99
  r = spreadsheet.costpercapita_bb99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc99
  r = spreadsheet.costpercapita_bc99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd99
  r = spreadsheet.costpercapita_bd99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be99
  r = spreadsheet.costpercapita_be99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf99
  r = spreadsheet.costpercapita_bf99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg99
  r = spreadsheet.costpercapita_bg99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi99
  r = spreadsheet.costpercapita_bi99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj99
  r = spreadsheet.costpercapita_bj99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk99
  r = spreadsheet.costpercapita_bk99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl99
  r = spreadsheet.costpercapita_bl99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm99
  r = spreadsheet.costpercapita_bm99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn99
  r = spreadsheet.costpercapita_bn99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo99
  r = spreadsheet.costpercapita_bo99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp99
  r = spreadsheet.costpercapita_bp99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq99
  r = spreadsheet.costpercapita_bq99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs99
  r = spreadsheet.costpercapita_bs99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.9280784216838,r[:number])
end

def test_costpercapita_bt99
  r = spreadsheet.costpercapita_bt99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(364.4631782859332,r[:number])
end

def test_costpercapita_bu99
  r = spreadsheet.costpercapita_bu99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308.39508235119274,r[:number])
end

def test_costpercapita_bv99
  r = spreadsheet.costpercapita_bv99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.4196880138303,r[:number])
end

def test_costpercapita_bw99
  r = spreadsheet.costpercapita_bw99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.44748836071335,r[:number])
end

def test_costpercapita_bx99
  r = spreadsheet.costpercapita_bx99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.2711012960243,r[:number])
end

def test_costpercapita_by99
  r = spreadsheet.costpercapita_by99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.12721611645668,r[:number])
end

def test_costpercapita_bz99
  r = spreadsheet.costpercapita_bz99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.61463858318164,r[:number])
end

def test_costpercapita_ca99
  r = spreadsheet.costpercapita_ca99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.32607769146757,r[:number])
end

def test_costpercapita_cc99
  r = spreadsheet.costpercapita_cc99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.99917212449816,r[:number])
end

def test_costpercapita_cd99
  r = spreadsheet.costpercapita_cd99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5134.316611644483,r[:number])
end

def test_costpercapita_cf99
  r = spreadsheet.costpercapita_cf99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg99
  r = spreadsheet.costpercapita_cg99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch99
  r = spreadsheet.costpercapita_ch99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci99
  r = spreadsheet.costpercapita_ci99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj99
  r = spreadsheet.costpercapita_cj99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck99
  r = spreadsheet.costpercapita_ck99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl99
  r = spreadsheet.costpercapita_cl99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm99
  r = spreadsheet.costpercapita_cm99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn99
  r = spreadsheet.costpercapita_cn99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp99
  r = spreadsheet.costpercapita_cp99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq99
  r = spreadsheet.costpercapita_cq99
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr99
  r = spreadsheet.costpercapita_cr99
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a100
  r = spreadsheet.costpercapita_a100
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b100
  r = spreadsheet.costpercapita_b100
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c100
  r = spreadsheet.costpercapita_c100
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e100
  r = spreadsheet.costpercapita_e100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f100
  r = spreadsheet.costpercapita_f100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g100
  r = spreadsheet.costpercapita_g100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h100
  r = spreadsheet.costpercapita_h100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i100
  r = spreadsheet.costpercapita_i100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j100
  r = spreadsheet.costpercapita_j100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k100
  r = spreadsheet.costpercapita_k100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l100
  r = spreadsheet.costpercapita_l100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m100
  r = spreadsheet.costpercapita_m100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o100
  r = spreadsheet.costpercapita_o100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p100
  r = spreadsheet.costpercapita_p100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q100
  r = spreadsheet.costpercapita_q100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r100
  r = spreadsheet.costpercapita_r100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s100
  r = spreadsheet.costpercapita_s100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t100
  r = spreadsheet.costpercapita_t100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u100
  r = spreadsheet.costpercapita_u100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v100
  r = spreadsheet.costpercapita_v100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w100
  r = spreadsheet.costpercapita_w100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y100
  r = spreadsheet.costpercapita_y100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_z100
  r = spreadsheet.costpercapita_z100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.92972635029443,r[:number])
end

def test_costpercapita_aa100
  r = spreadsheet.costpercapita_aa100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.75091499882414,r[:number])
end

def test_costpercapita_ab100
  r = spreadsheet.costpercapita_ab100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.8426851390499,r[:number])
end

def test_costpercapita_ac100
  r = spreadsheet.costpercapita_ac100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.37064321889488,r[:number])
end

def test_costpercapita_ad100
  r = spreadsheet.costpercapita_ad100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.94659014567325,r[:number])
end

def test_costpercapita_ae100
  r = spreadsheet.costpercapita_ae100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.124456061411955,r[:number])
end

def test_costpercapita_af100
  r = spreadsheet.costpercapita_af100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.70324207190193,r[:number])
end

def test_costpercapita_ag100
  r = spreadsheet.costpercapita_ag100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.83290738802381,r[:number])
end

def test_costpercapita_ai100
  r = spreadsheet.costpercapita_ai100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_aj100
  r = spreadsheet.costpercapita_aj100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.92972635029443,r[:number])
end

def test_costpercapita_ak100
  r = spreadsheet.costpercapita_ak100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.75091499882414,r[:number])
end

def test_costpercapita_al100
  r = spreadsheet.costpercapita_al100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.8426851390499,r[:number])
end

def test_costpercapita_am100
  r = spreadsheet.costpercapita_am100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.37064321889488,r[:number])
end

def test_costpercapita_an100
  r = spreadsheet.costpercapita_an100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.94659014567325,r[:number])
end

def test_costpercapita_ao100
  r = spreadsheet.costpercapita_ao100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.124456061411955,r[:number])
end

def test_costpercapita_ap100
  r = spreadsheet.costpercapita_ap100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.70324207190193,r[:number])
end

def test_costpercapita_aq100
  r = spreadsheet.costpercapita_aq100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.83290738802381,r[:number])
end

def test_costpercapita_as100
  r = spreadsheet.costpercapita_as100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.19758803353265,r[:number])
end

def test_costpercapita_at100
  r = spreadsheet.costpercapita_at100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1820.5164262837036,r[:number])
end

def test_costpercapita_av100
  r = spreadsheet.costpercapita_av100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw100
  r = spreadsheet.costpercapita_aw100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay100
  r = spreadsheet.costpercapita_ay100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az100
  r = spreadsheet.costpercapita_az100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba100
  r = spreadsheet.costpercapita_ba100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb100
  r = spreadsheet.costpercapita_bb100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc100
  r = spreadsheet.costpercapita_bc100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd100
  r = spreadsheet.costpercapita_bd100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be100
  r = spreadsheet.costpercapita_be100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf100
  r = spreadsheet.costpercapita_bf100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg100
  r = spreadsheet.costpercapita_bg100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi100
  r = spreadsheet.costpercapita_bi100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj100
  r = spreadsheet.costpercapita_bj100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk100
  r = spreadsheet.costpercapita_bk100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl100
  r = spreadsheet.costpercapita_bl100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm100
  r = spreadsheet.costpercapita_bm100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn100
  r = spreadsheet.costpercapita_bn100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo100
  r = spreadsheet.costpercapita_bo100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp100
  r = spreadsheet.costpercapita_bp100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq100
  r = spreadsheet.costpercapita_bq100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs100
  r = spreadsheet.costpercapita_bs100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_bt100
  r = spreadsheet.costpercapita_bt100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.92972635029443,r[:number])
end

def test_costpercapita_bu100
  r = spreadsheet.costpercapita_bu100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.75091499882414,r[:number])
end

def test_costpercapita_bv100
  r = spreadsheet.costpercapita_bv100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.8426851390499,r[:number])
end

def test_costpercapita_bw100
  r = spreadsheet.costpercapita_bw100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.37064321889488,r[:number])
end

def test_costpercapita_bx100
  r = spreadsheet.costpercapita_bx100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.94659014567325,r[:number])
end

def test_costpercapita_by100
  r = spreadsheet.costpercapita_by100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.124456061411955,r[:number])
end

def test_costpercapita_bz100
  r = spreadsheet.costpercapita_bz100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.70324207190193,r[:number])
end

def test_costpercapita_ca100
  r = spreadsheet.costpercapita_ca100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.83290738802381,r[:number])
end

def test_costpercapita_cc100
  r = spreadsheet.costpercapita_cc100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.19758803353265,r[:number])
end

def test_costpercapita_cd100
  r = spreadsheet.costpercapita_cd100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1820.5164262837036,r[:number])
end

def test_costpercapita_cf100
  r = spreadsheet.costpercapita_cf100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg100
  r = spreadsheet.costpercapita_cg100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch100
  r = spreadsheet.costpercapita_ch100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci100
  r = spreadsheet.costpercapita_ci100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj100
  r = spreadsheet.costpercapita_cj100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck100
  r = spreadsheet.costpercapita_ck100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl100
  r = spreadsheet.costpercapita_cl100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm100
  r = spreadsheet.costpercapita_cm100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn100
  r = spreadsheet.costpercapita_cn100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp100
  r = spreadsheet.costpercapita_cp100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq100
  r = spreadsheet.costpercapita_cq100
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr100
  r = spreadsheet.costpercapita_cr100
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a101
  r = spreadsheet.costpercapita_a101
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b101
  r = spreadsheet.costpercapita_b101
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel transfers",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c101
  r = spreadsheet.costpercapita_c101
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e101
  r = spreadsheet.costpercapita_e101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.33699289017264,r[:number])
end

def test_costpercapita_f101
  r = spreadsheet.costpercapita_f101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_g101
  r = spreadsheet.costpercapita_g101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.820833430588458,r[:number])
end

def test_costpercapita_h101
  r = spreadsheet.costpercapita_h101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.21336370367079,r[:number])
end

def test_costpercapita_i101
  r = spreadsheet.costpercapita_i101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.949338682919965,r[:number])
end

def test_costpercapita_j101
  r = spreadsheet.costpercapita_j101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.25900257987702,r[:number])
end

def test_costpercapita_k101
  r = spreadsheet.costpercapita_k101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.12799067837116,r[:number])
end

def test_costpercapita_l101
  r = spreadsheet.costpercapita_l101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.98345555647253,r[:number])
end

def test_costpercapita_m101
  r = spreadsheet.costpercapita_m101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.76795228791822,r[:number])
end

def test_costpercapita_o101
  r = spreadsheet.costpercapita_o101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06306043679317243,r[:number])
end

def test_costpercapita_p101
  r = spreadsheet.costpercapita_p101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06577587801153967,r[:number])
end

def test_costpercapita_q101
  r = spreadsheet.costpercapita_q101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07084044488428051,r[:number])
end

def test_costpercapita_r101
  r = spreadsheet.costpercapita_r101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0792884399322761,r[:number])
end

def test_costpercapita_s101
  r = spreadsheet.costpercapita_s101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08744902988010893,r[:number])
end

def test_costpercapita_t101
  r = spreadsheet.costpercapita_t101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09369727904314976,r[:number])
end

def test_costpercapita_u101
  r = spreadsheet.costpercapita_u101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09873838461096329,r[:number])
end

def test_costpercapita_v101
  r = spreadsheet.costpercapita_v101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10392784276343621,r[:number])
end

def test_costpercapita_w101
  r = spreadsheet.costpercapita_w101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1079968018187501,r[:number])
end

def test_costpercapita_y101
  r = spreadsheet.costpercapita_y101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z101
  r = spreadsheet.costpercapita_z101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa101
  r = spreadsheet.costpercapita_aa101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab101
  r = spreadsheet.costpercapita_ab101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac101
  r = spreadsheet.costpercapita_ac101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad101
  r = spreadsheet.costpercapita_ad101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae101
  r = spreadsheet.costpercapita_ae101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af101
  r = spreadsheet.costpercapita_af101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag101
  r = spreadsheet.costpercapita_ag101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai101
  r = spreadsheet.costpercapita_ai101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.40005332696581,r[:number])
end

def test_costpercapita_aj101
  r = spreadsheet.costpercapita_aj101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.907136083914565,r[:number])
end

def test_costpercapita_ak101
  r = spreadsheet.costpercapita_ak101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.891673875472737,r[:number])
end

def test_costpercapita_al101
  r = spreadsheet.costpercapita_al101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.292652143603068,r[:number])
end

def test_costpercapita_am101
  r = spreadsheet.costpercapita_am101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.03678771280007,r[:number])
end

def test_costpercapita_an101
  r = spreadsheet.costpercapita_an101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.35269985892017,r[:number])
end

def test_costpercapita_ao101
  r = spreadsheet.costpercapita_ao101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.22672906298212,r[:number])
end

def test_costpercapita_ap101
  r = spreadsheet.costpercapita_ap101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.08738339923597,r[:number])
end

def test_costpercapita_aq101
  r = spreadsheet.costpercapita_aq101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.87594908973697,r[:number])
end

def test_costpercapita_as101
  r = spreadsheet.costpercapita_as101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.896784950403497,r[:number])
end

def test_costpercapita_at101
  r = spreadsheet.costpercapita_at101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(597.9350862348297,r[:number])
end

def test_costpercapita_av101
  r = spreadsheet.costpercapita_av101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw101
  r = spreadsheet.costpercapita_aw101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay101
  r = spreadsheet.costpercapita_ay101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.016213002182706,r[:number])
end

def test_costpercapita_az101
  r = spreadsheet.costpercapita_az101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.245454116307945,r[:number])
end

def test_costpercapita_ba101
  r = spreadsheet.costpercapita_ba101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.979051085873182,r[:number])
end

def test_costpercapita_bb101
  r = spreadsheet.costpercapita_bb101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.037351520492702,r[:number])
end

def test_costpercapita_bc101
  r = spreadsheet.costpercapita_bc101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.08830137418777,r[:number])
end

def test_costpercapita_bd101
  r = spreadsheet.costpercapita_bd101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.807271654442054,r[:number])
end

def test_costpercapita_be101
  r = spreadsheet.costpercapita_be101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.83329588866612,r[:number])
end

def test_costpercapita_bf101
  r = spreadsheet.costpercapita_bf101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.949842485361376,r[:number])
end

def test_costpercapita_bg101
  r = spreadsheet.costpercapita_bg101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.92948322990764,r[:number])
end

def test_costpercapita_bi101
  r = spreadsheet.costpercapita_bi101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.016213002182706,r[:number])
end

def test_costpercapita_bj101
  r = spreadsheet.costpercapita_bj101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.997331939612554,r[:number])
end

def test_costpercapita_bk101
  r = spreadsheet.costpercapita_bk101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.419921815245424,r[:number])
end

def test_costpercapita_bl101
  r = spreadsheet.costpercapita_bl101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.31136521958869,r[:number])
end

def test_costpercapita_bm101
  r = spreadsheet.costpercapita_bm101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.97851192748783,r[:number])
end

def test_costpercapita_bn101
  r = spreadsheet.costpercapita_bn101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.701248912060045,r[:number])
end

def test_costpercapita_bo101
  r = spreadsheet.costpercapita_bo101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.52502395112886,r[:number])
end

def test_costpercapita_bp101
  r = spreadsheet.costpercapita_bp101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.426520667366184,r[:number])
end

def test_costpercapita_bq101
  r = spreadsheet.costpercapita_bq101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.544625832759515,r[:number])
end

def test_costpercapita_bs101
  r = spreadsheet.costpercapita_bs101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.079273438975878,r[:number])
end

def test_costpercapita_bt101
  r = spreadsheet.costpercapita_bt101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.063107817624093,r[:number])
end

def test_costpercapita_bu101
  r = spreadsheet.costpercapita_bu101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.490762260129706,r[:number])
end

def test_costpercapita_bv101
  r = spreadsheet.costpercapita_bv101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.390653659520964,r[:number])
end

def test_costpercapita_bw101
  r = spreadsheet.costpercapita_bw101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.065960957367935,r[:number])
end

def test_costpercapita_bx101
  r = spreadsheet.costpercapita_bx101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.79494619110319,r[:number])
end

def test_costpercapita_by101
  r = spreadsheet.costpercapita_by101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.623762335739826,r[:number])
end

def test_costpercapita_bz101
  r = spreadsheet.costpercapita_bz101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.530448510129624,r[:number])
end

def test_costpercapita_ca101
  r = spreadsheet.costpercapita_ca101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.65262263457827,r[:number])
end

def test_costpercapita_cc101
  r = spreadsheet.costpercapita_cc101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.63239308946328,r[:number])
end

def test_costpercapita_cd101
  r = spreadsheet.costpercapita_cd101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(787.2723791575551,r[:number])
end

def test_costpercapita_cf101
  r = spreadsheet.costpercapita_cf101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-16.320779887989932,r[:number])
end

def test_costpercapita_cg101
  r = spreadsheet.costpercapita_cg101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.15597173370952752,r[:number])
end

def test_costpercapita_ch101
  r = spreadsheet.costpercapita_ch101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.599088384656968,r[:number])
end

def test_costpercapita_ci101
  r = spreadsheet.costpercapita_ci101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.098001515917896,r[:number])
end

def test_costpercapita_cj101
  r = spreadsheet.costpercapita_cj101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.029173244567865,r[:number])
end

def test_costpercapita_ck101
  r = spreadsheet.costpercapita_ck101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.442246332183025,r[:number])
end

def test_costpercapita_cl101
  r = spreadsheet.costpercapita_cl101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.397033272757692,r[:number])
end

def test_costpercapita_cm101
  r = spreadsheet.costpercapita_cm101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.443065110893652,r[:number])
end

def test_costpercapita_cn101
  r = spreadsheet.costpercapita_cn101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.776673544841294,r[:number])
end

def test_costpercapita_cp101
  r = spreadsheet.costpercapita_cp101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.735608139059776,r[:number])
end

def test_costpercapita_cq101
  r = spreadsheet.costpercapita_cq101
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.3372929227252,r[:number])
end

def test_costpercapita_cr101
  r = spreadsheet.costpercapita_cr101
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a102
  r = spreadsheet.costpercapita_a102
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b102
  r = spreadsheet.costpercapita_b102
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c102
  r = spreadsheet.costpercapita_c102
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e102
  r = spreadsheet.costpercapita_e102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f102
  r = spreadsheet.costpercapita_f102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g102
  r = spreadsheet.costpercapita_g102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h102
  r = spreadsheet.costpercapita_h102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i102
  r = spreadsheet.costpercapita_i102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j102
  r = spreadsheet.costpercapita_j102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k102
  r = spreadsheet.costpercapita_k102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l102
  r = spreadsheet.costpercapita_l102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m102
  r = spreadsheet.costpercapita_m102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o102
  r = spreadsheet.costpercapita_o102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p102
  r = spreadsheet.costpercapita_p102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q102
  r = spreadsheet.costpercapita_q102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r102
  r = spreadsheet.costpercapita_r102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s102
  r = spreadsheet.costpercapita_s102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t102
  r = spreadsheet.costpercapita_t102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u102
  r = spreadsheet.costpercapita_u102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v102
  r = spreadsheet.costpercapita_v102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w102
  r = spreadsheet.costpercapita_w102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y102
  r = spreadsheet.costpercapita_y102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_z102
  r = spreadsheet.costpercapita_z102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.798959877506476,r[:number])
end

def test_costpercapita_aa102
  r = spreadsheet.costpercapita_aa102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.91536619693241,r[:number])
end

def test_costpercapita_ab102
  r = spreadsheet.costpercapita_ab102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.384710879631987,r[:number])
end

def test_costpercapita_ac102
  r = spreadsheet.costpercapita_ac102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.753072187125829,r[:number])
end

def test_costpercapita_ad102
  r = spreadsheet.costpercapita_ad102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5189840698697945,r[:number])
end

def test_costpercapita_ae102
  r = spreadsheet.costpercapita_ae102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9500433897778513,r[:number])
end

def test_costpercapita_af102
  r = spreadsheet.costpercapita_af102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.388241020920573,r[:number])
end

def test_costpercapita_ag102
  r = spreadsheet.costpercapita_ag102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8932736658099394,r[:number])
end

def test_costpercapita_ai102
  r = spreadsheet.costpercapita_ai102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_aj102
  r = spreadsheet.costpercapita_aj102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.798959877506476,r[:number])
end

def test_costpercapita_ak102
  r = spreadsheet.costpercapita_ak102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.91536619693241,r[:number])
end

def test_costpercapita_al102
  r = spreadsheet.costpercapita_al102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.384710879631987,r[:number])
end

def test_costpercapita_am102
  r = spreadsheet.costpercapita_am102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.753072187125829,r[:number])
end

def test_costpercapita_an102
  r = spreadsheet.costpercapita_an102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5189840698697945,r[:number])
end

def test_costpercapita_ao102
  r = spreadsheet.costpercapita_ao102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9500433897778513,r[:number])
end

def test_costpercapita_ap102
  r = spreadsheet.costpercapita_ap102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.388241020920573,r[:number])
end

def test_costpercapita_aq102
  r = spreadsheet.costpercapita_aq102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8932736658099394,r[:number])
end

def test_costpercapita_as102
  r = spreadsheet.costpercapita_as102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.543094914587922,r[:number])
end

def test_costpercapita_at102
  r = spreadsheet.costpercapita_at102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(371.46043404220757,r[:number])
end

def test_costpercapita_av102
  r = spreadsheet.costpercapita_av102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw102
  r = spreadsheet.costpercapita_aw102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay102
  r = spreadsheet.costpercapita_ay102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az102
  r = spreadsheet.costpercapita_az102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba102
  r = spreadsheet.costpercapita_ba102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb102
  r = spreadsheet.costpercapita_bb102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc102
  r = spreadsheet.costpercapita_bc102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd102
  r = spreadsheet.costpercapita_bd102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be102
  r = spreadsheet.costpercapita_be102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf102
  r = spreadsheet.costpercapita_bf102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg102
  r = spreadsheet.costpercapita_bg102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi102
  r = spreadsheet.costpercapita_bi102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj102
  r = spreadsheet.costpercapita_bj102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk102
  r = spreadsheet.costpercapita_bk102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl102
  r = spreadsheet.costpercapita_bl102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm102
  r = spreadsheet.costpercapita_bm102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn102
  r = spreadsheet.costpercapita_bn102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo102
  r = spreadsheet.costpercapita_bo102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp102
  r = spreadsheet.costpercapita_bp102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq102
  r = spreadsheet.costpercapita_bq102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs102
  r = spreadsheet.costpercapita_bs102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_bt102
  r = spreadsheet.costpercapita_bt102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.798959877506476,r[:number])
end

def test_costpercapita_bu102
  r = spreadsheet.costpercapita_bu102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.91536619693241,r[:number])
end

def test_costpercapita_bv102
  r = spreadsheet.costpercapita_bv102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.384710879631987,r[:number])
end

def test_costpercapita_bw102
  r = spreadsheet.costpercapita_bw102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.753072187125829,r[:number])
end

def test_costpercapita_bx102
  r = spreadsheet.costpercapita_bx102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5189840698697945,r[:number])
end

def test_costpercapita_by102
  r = spreadsheet.costpercapita_by102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9500433897778513,r[:number])
end

def test_costpercapita_bz102
  r = spreadsheet.costpercapita_bz102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.388241020920573,r[:number])
end

def test_costpercapita_ca102
  r = spreadsheet.costpercapita_ca102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8932736658099394,r[:number])
end

def test_costpercapita_cc102
  r = spreadsheet.costpercapita_cc102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.543094914587922,r[:number])
end

def test_costpercapita_cd102
  r = spreadsheet.costpercapita_cd102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(371.46043404220757,r[:number])
end

def test_costpercapita_cf102
  r = spreadsheet.costpercapita_cf102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg102
  r = spreadsheet.costpercapita_cg102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch102
  r = spreadsheet.costpercapita_ch102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci102
  r = spreadsheet.costpercapita_ci102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj102
  r = spreadsheet.costpercapita_cj102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck102
  r = spreadsheet.costpercapita_ck102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl102
  r = spreadsheet.costpercapita_cl102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm102
  r = spreadsheet.costpercapita_cm102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn102
  r = spreadsheet.costpercapita_cn102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp102
  r = spreadsheet.costpercapita_cp102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq102
  r = spreadsheet.costpercapita_cq102
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr102
  r = spreadsheet.costpercapita_cr102
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a103
  r = spreadsheet.costpercapita_a103
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b103
  r = spreadsheet.costpercapita_b103
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c103
  r = spreadsheet.costpercapita_c103
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e103
  r = spreadsheet.costpercapita_e103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f103
  r = spreadsheet.costpercapita_f103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g103
  r = spreadsheet.costpercapita_g103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h103
  r = spreadsheet.costpercapita_h103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i103
  r = spreadsheet.costpercapita_i103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j103
  r = spreadsheet.costpercapita_j103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k103
  r = spreadsheet.costpercapita_k103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l103
  r = spreadsheet.costpercapita_l103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m103
  r = spreadsheet.costpercapita_m103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o103
  r = spreadsheet.costpercapita_o103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p103
  r = spreadsheet.costpercapita_p103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q103
  r = spreadsheet.costpercapita_q103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r103
  r = spreadsheet.costpercapita_r103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s103
  r = spreadsheet.costpercapita_s103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t103
  r = spreadsheet.costpercapita_t103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u103
  r = spreadsheet.costpercapita_u103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v103
  r = spreadsheet.costpercapita_v103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w103
  r = spreadsheet.costpercapita_w103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y103
  r = spreadsheet.costpercapita_y103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_z103
  r = spreadsheet.costpercapita_z103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.40182164235362,r[:number])
end

def test_costpercapita_aa103
  r = spreadsheet.costpercapita_aa103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.9038197752141,r[:number])
end

def test_costpercapita_ab103
  r = spreadsheet.costpercapita_ab103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.3305626644674,r[:number])
end

def test_costpercapita_ac103
  r = spreadsheet.costpercapita_ac103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.1535672801648,r[:number])
end

def test_costpercapita_ad103
  r = spreadsheet.costpercapita_ad103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.5988702622615,r[:number])
end

def test_costpercapita_ae103
  r = spreadsheet.costpercapita_ae103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460.59536741636845,r[:number])
end

def test_costpercapita_af103
  r = spreadsheet.costpercapita_af103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(488.17825974602835,r[:number])
end

def test_costpercapita_ag103
  r = spreadsheet.costpercapita_ag103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.33289020579724,r[:number])
end

def test_costpercapita_ai103
  r = spreadsheet.costpercapita_ai103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_aj103
  r = spreadsheet.costpercapita_aj103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.40182164235362,r[:number])
end

def test_costpercapita_ak103
  r = spreadsheet.costpercapita_ak103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.9038197752141,r[:number])
end

def test_costpercapita_al103
  r = spreadsheet.costpercapita_al103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.3305626644674,r[:number])
end

def test_costpercapita_am103
  r = spreadsheet.costpercapita_am103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.1535672801648,r[:number])
end

def test_costpercapita_an103
  r = spreadsheet.costpercapita_an103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.5988702622615,r[:number])
end

def test_costpercapita_ao103
  r = spreadsheet.costpercapita_ao103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460.59536741636845,r[:number])
end

def test_costpercapita_ap103
  r = spreadsheet.costpercapita_ap103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(488.17825974602835,r[:number])
end

def test_costpercapita_aq103
  r = spreadsheet.costpercapita_aq103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.33289020579724,r[:number])
end

def test_costpercapita_as103
  r = spreadsheet.costpercapita_as103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(325.4289998336159,r[:number])
end

def test_costpercapita_at103
  r = spreadsheet.costpercapita_at103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6296.7865995194625,r[:number])
end

def test_costpercapita_av103
  r = spreadsheet.costpercapita_av103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw103
  r = spreadsheet.costpercapita_aw103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay103
  r = spreadsheet.costpercapita_ay103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az103
  r = spreadsheet.costpercapita_az103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba103
  r = spreadsheet.costpercapita_ba103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb103
  r = spreadsheet.costpercapita_bb103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc103
  r = spreadsheet.costpercapita_bc103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd103
  r = spreadsheet.costpercapita_bd103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be103
  r = spreadsheet.costpercapita_be103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf103
  r = spreadsheet.costpercapita_bf103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg103
  r = spreadsheet.costpercapita_bg103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi103
  r = spreadsheet.costpercapita_bi103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj103
  r = spreadsheet.costpercapita_bj103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk103
  r = spreadsheet.costpercapita_bk103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl103
  r = spreadsheet.costpercapita_bl103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm103
  r = spreadsheet.costpercapita_bm103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn103
  r = spreadsheet.costpercapita_bn103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo103
  r = spreadsheet.costpercapita_bo103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp103
  r = spreadsheet.costpercapita_bp103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq103
  r = spreadsheet.costpercapita_bq103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs103
  r = spreadsheet.costpercapita_bs103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_bt103
  r = spreadsheet.costpercapita_bt103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.40182164235362,r[:number])
end

def test_costpercapita_bu103
  r = spreadsheet.costpercapita_bu103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(219.9038197752141,r[:number])
end

def test_costpercapita_bv103
  r = spreadsheet.costpercapita_bv103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.3305626644674,r[:number])
end

def test_costpercapita_bw103
  r = spreadsheet.costpercapita_bw103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.1535672801648,r[:number])
end

def test_costpercapita_bx103
  r = spreadsheet.costpercapita_bx103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(426.5988702622615,r[:number])
end

def test_costpercapita_by103
  r = spreadsheet.costpercapita_by103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460.59536741636845,r[:number])
end

def test_costpercapita_bz103
  r = spreadsheet.costpercapita_bz103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(488.17825974602835,r[:number])
end

def test_costpercapita_ca103
  r = spreadsheet.costpercapita_ca103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(504.33289020579724,r[:number])
end

def test_costpercapita_cc103
  r = spreadsheet.costpercapita_cc103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(325.4289998336159,r[:number])
end

def test_costpercapita_cd103
  r = spreadsheet.costpercapita_cd103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6296.7865995194625,r[:number])
end

def test_costpercapita_cf103
  r = spreadsheet.costpercapita_cf103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg103
  r = spreadsheet.costpercapita_cg103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch103
  r = spreadsheet.costpercapita_ch103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci103
  r = spreadsheet.costpercapita_ci103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj103
  r = spreadsheet.costpercapita_cj103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck103
  r = spreadsheet.costpercapita_ck103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl103
  r = spreadsheet.costpercapita_cl103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm103
  r = spreadsheet.costpercapita_cm103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn103
  r = spreadsheet.costpercapita_cn103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp103
  r = spreadsheet.costpercapita_cp103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq103
  r = spreadsheet.costpercapita_cq103
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr103
  r = spreadsheet.costpercapita_cr103
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a104
  r = spreadsheet.costpercapita_a104
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b104
  r = spreadsheet.costpercapita_b104
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c104
  r = spreadsheet.costpercapita_c104
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e104
  r = spreadsheet.costpercapita_e104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f104
  r = spreadsheet.costpercapita_f104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g104
  r = spreadsheet.costpercapita_g104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h104
  r = spreadsheet.costpercapita_h104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i104
  r = spreadsheet.costpercapita_i104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j104
  r = spreadsheet.costpercapita_j104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k104
  r = spreadsheet.costpercapita_k104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l104
  r = spreadsheet.costpercapita_l104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m104
  r = spreadsheet.costpercapita_m104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o104
  r = spreadsheet.costpercapita_o104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p104
  r = spreadsheet.costpercapita_p104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q104
  r = spreadsheet.costpercapita_q104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r104
  r = spreadsheet.costpercapita_r104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s104
  r = spreadsheet.costpercapita_s104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t104
  r = spreadsheet.costpercapita_t104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u104
  r = spreadsheet.costpercapita_u104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v104
  r = spreadsheet.costpercapita_v104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w104
  r = spreadsheet.costpercapita_w104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y104
  r = spreadsheet.costpercapita_y104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_z104
  r = spreadsheet.costpercapita_z104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.91303944249267,r[:number])
end

def test_costpercapita_aa104
  r = spreadsheet.costpercapita_aa104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.64737768237336,r[:number])
end

def test_costpercapita_ab104
  r = spreadsheet.costpercapita_ab104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.84276606511236,r[:number])
end

def test_costpercapita_ac104
  r = spreadsheet.costpercapita_ac104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.18642643584366,r[:number])
end

def test_costpercapita_ad104
  r = spreadsheet.costpercapita_ad104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(497.59002670049335,r[:number])
end

def test_costpercapita_ae104
  r = spreadsheet.costpercapita_ae104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(541.2473668364939,r[:number])
end

def test_costpercapita_af104
  r = spreadsheet.costpercapita_af104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.3817946623611,r[:number])
end

def test_costpercapita_ag104
  r = spreadsheet.costpercapita_ag104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.3337975831602,r[:number])
end

def test_costpercapita_ai104
  r = spreadsheet.costpercapita_ai104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_aj104
  r = spreadsheet.costpercapita_aj104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.91303944249267,r[:number])
end

def test_costpercapita_ak104
  r = spreadsheet.costpercapita_ak104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.64737768237336,r[:number])
end

def test_costpercapita_al104
  r = spreadsheet.costpercapita_al104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.84276606511236,r[:number])
end

def test_costpercapita_am104
  r = spreadsheet.costpercapita_am104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.18642643584366,r[:number])
end

def test_costpercapita_an104
  r = spreadsheet.costpercapita_an104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(497.59002670049335,r[:number])
end

def test_costpercapita_ao104
  r = spreadsheet.costpercapita_ao104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(541.2473668364939,r[:number])
end

def test_costpercapita_ap104
  r = spreadsheet.costpercapita_ap104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.3817946623611,r[:number])
end

def test_costpercapita_aq104
  r = spreadsheet.costpercapita_aq104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.3337975831602,r[:number])
end

def test_costpercapita_as104
  r = spreadsheet.costpercapita_as104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.71759628186277,r[:number])
end

def test_costpercapita_at104
  r = spreadsheet.costpercapita_at104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7384.121071474825,r[:number])
end

def test_costpercapita_av104
  r = spreadsheet.costpercapita_av104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw104
  r = spreadsheet.costpercapita_aw104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay104
  r = spreadsheet.costpercapita_ay104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az104
  r = spreadsheet.costpercapita_az104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba104
  r = spreadsheet.costpercapita_ba104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb104
  r = spreadsheet.costpercapita_bb104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc104
  r = spreadsheet.costpercapita_bc104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd104
  r = spreadsheet.costpercapita_bd104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be104
  r = spreadsheet.costpercapita_be104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf104
  r = spreadsheet.costpercapita_bf104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg104
  r = spreadsheet.costpercapita_bg104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi104
  r = spreadsheet.costpercapita_bi104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj104
  r = spreadsheet.costpercapita_bj104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk104
  r = spreadsheet.costpercapita_bk104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl104
  r = spreadsheet.costpercapita_bl104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm104
  r = spreadsheet.costpercapita_bm104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn104
  r = spreadsheet.costpercapita_bn104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo104
  r = spreadsheet.costpercapita_bo104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp104
  r = spreadsheet.costpercapita_bp104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq104
  r = spreadsheet.costpercapita_bq104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs104
  r = spreadsheet.costpercapita_bs104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_bt104
  r = spreadsheet.costpercapita_bt104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.91303944249267,r[:number])
end

def test_costpercapita_bu104
  r = spreadsheet.costpercapita_bu104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(232.64737768237336,r[:number])
end

def test_costpercapita_bv104
  r = spreadsheet.costpercapita_bv104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.84276606511236,r[:number])
end

def test_costpercapita_bw104
  r = spreadsheet.costpercapita_bw104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.18642643584366,r[:number])
end

def test_costpercapita_bx104
  r = spreadsheet.costpercapita_bx104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(497.59002670049335,r[:number])
end

def test_costpercapita_by104
  r = spreadsheet.costpercapita_by104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(541.2473668364939,r[:number])
end

def test_costpercapita_bz104
  r = spreadsheet.costpercapita_bz104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(582.3817946623611,r[:number])
end

def test_costpercapita_ca104
  r = spreadsheet.costpercapita_ca104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(614.3337975831602,r[:number])
end

def test_costpercapita_cc104
  r = spreadsheet.costpercapita_cc104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(386.71759628186277,r[:number])
end

def test_costpercapita_cd104
  r = spreadsheet.costpercapita_cd104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7384.121071474825,r[:number])
end

def test_costpercapita_cf104
  r = spreadsheet.costpercapita_cf104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg104
  r = spreadsheet.costpercapita_cg104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch104
  r = spreadsheet.costpercapita_ch104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci104
  r = spreadsheet.costpercapita_ci104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj104
  r = spreadsheet.costpercapita_cj104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck104
  r = spreadsheet.costpercapita_ck104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl104
  r = spreadsheet.costpercapita_cl104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm104
  r = spreadsheet.costpercapita_cm104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn104
  r = spreadsheet.costpercapita_cn104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp104
  r = spreadsheet.costpercapita_cp104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq104
  r = spreadsheet.costpercapita_cq104
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr104
  r = spreadsheet.costpercapita_cr104
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a105
  r = spreadsheet.costpercapita_a105
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b105
  r = spreadsheet.costpercapita_b105
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c105
  r = spreadsheet.costpercapita_c105
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e105
  r = spreadsheet.costpercapita_e105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7092515313224886,r[:number])
end

def test_costpercapita_f105
  r = spreadsheet.costpercapita_f105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4731681295544335,r[:number])
end

def test_costpercapita_g105
  r = spreadsheet.costpercapita_g105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.48358832304876126,r[:number])
end

def test_costpercapita_h105
  r = spreadsheet.costpercapita_h105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5521300335366492,r[:number])
end

def test_costpercapita_i105
  r = spreadsheet.costpercapita_i105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5856734566480611,r[:number])
end

def test_costpercapita_j105
  r = spreadsheet.costpercapita_j105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6244194065292024,r[:number])
end

def test_costpercapita_k105
  r = spreadsheet.costpercapita_k105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6680666948469322,r[:number])
end

def test_costpercapita_l105
  r = spreadsheet.costpercapita_l105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7166394199487396,r[:number])
end

def test_costpercapita_m105
  r = spreadsheet.costpercapita_m105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7706638889479804,r[:number])
end

def test_costpercapita_o105
  r = spreadsheet.costpercapita_o105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11331908517573011,r[:number])
end

def test_costpercapita_p105
  r = spreadsheet.costpercapita_p105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11497705688988452,r[:number])
end

def test_costpercapita_q105
  r = spreadsheet.costpercapita_q105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11685685007197585,r[:number])
end

def test_costpercapita_r105
  r = spreadsheet.costpercapita_r105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12197196496449902,r[:number])
end

def test_costpercapita_s105
  r = spreadsheet.costpercapita_s105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1281500663392371,r[:number])
end

def test_costpercapita_t105
  r = spreadsheet.costpercapita_t105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13549713895791662,r[:number])
end

def test_costpercapita_u105
  r = spreadsheet.costpercapita_u105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1439095636052136,r[:number])
end

def test_costpercapita_v105
  r = spreadsheet.costpercapita_v105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.15336435963995418,r[:number])
end

def test_costpercapita_w105
  r = spreadsheet.costpercapita_w105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1639517899199186,r[:number])
end

def test_costpercapita_y105
  r = spreadsheet.costpercapita_y105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z105
  r = spreadsheet.costpercapita_z105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa105
  r = spreadsheet.costpercapita_aa105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab105
  r = spreadsheet.costpercapita_ab105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac105
  r = spreadsheet.costpercapita_ac105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad105
  r = spreadsheet.costpercapita_ad105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae105
  r = spreadsheet.costpercapita_ae105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af105
  r = spreadsheet.costpercapita_af105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag105
  r = spreadsheet.costpercapita_ag105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai105
  r = spreadsheet.costpercapita_ai105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8225706164982187,r[:number])
end

def test_costpercapita_aj105
  r = spreadsheet.costpercapita_aj105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5881451864443179,r[:number])
end

def test_costpercapita_ak105
  r = spreadsheet.costpercapita_ak105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6004451731207371,r[:number])
end

def test_costpercapita_al105
  r = spreadsheet.costpercapita_al105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6741019985011483,r[:number])
end

def test_costpercapita_am105
  r = spreadsheet.costpercapita_am105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7138235229872982,r[:number])
end

def test_costpercapita_an105
  r = spreadsheet.costpercapita_an105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7599165454871191,r[:number])
end

def test_costpercapita_ao105
  r = spreadsheet.costpercapita_ao105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8119762584521457,r[:number])
end

def test_costpercapita_ap105
  r = spreadsheet.costpercapita_ap105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8700037795886938,r[:number])
end

def test_costpercapita_aq105
  r = spreadsheet.costpercapita_aq105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9346156788678991,r[:number])
end

def test_costpercapita_as105
  r = spreadsheet.costpercapita_as105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7528443066608419,r[:number])
end

def test_costpercapita_at105
  r = spreadsheet.costpercapita_at105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.862430963551189,r[:number])
end

def test_costpercapita_av105
  r = spreadsheet.costpercapita_av105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw105
  r = spreadsheet.costpercapita_aw105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay105
  r = spreadsheet.costpercapita_ay105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2336160171005004,r[:number])
end

def test_costpercapita_az105
  r = spreadsheet.costpercapita_az105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2597565860245313,r[:number])
end

def test_costpercapita_ba105
  r = spreadsheet.costpercapita_ba105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.26547699219463916,r[:number])
end

def test_costpercapita_bb105
  r = spreadsheet.costpercapita_bb105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.30310454909155277,r[:number])
end

def test_costpercapita_bc105
  r = spreadsheet.costpercapita_bc105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.32151898685007546,r[:number])
end

def test_costpercapita_bd105
  r = spreadsheet.costpercapita_bd105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.342789471979495,r[:number])
end

def test_costpercapita_be105
  r = spreadsheet.costpercapita_be105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.36675066017980384,r[:number])
end

def test_costpercapita_bf105
  r = spreadsheet.costpercapita_bf105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39341578079609424,r[:number])
end

def test_costpercapita_bg105
  r = spreadsheet.costpercapita_bg105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4230737622883084,r[:number])
end

def test_costpercapita_bi105
  r = spreadsheet.costpercapita_bi105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2336160171005004,r[:number])
end

def test_costpercapita_bj105
  r = spreadsheet.costpercapita_bj105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.48566909878298953,r[:number])
end

def test_costpercapita_bk105
  r = spreadsheet.costpercapita_bk105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7352461829541073,r[:number])
end

def test_costpercapita_bl105
  r = spreadsheet.costpercapita_bl105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8038344323269104,r[:number])
end

def test_costpercapita_bm105
  r = spreadsheet.costpercapita_bm105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8665712773567754,r[:number])
end

def test_costpercapita_bn105
  r = spreadsheet.costpercapita_bn105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9446137647060746,r[:number])
end

def test_costpercapita_bo105
  r = spreadsheet.costpercapita_bo105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0094797343602169,r[:number])
end

def test_costpercapita_bp105
  r = spreadsheet.costpercapita_bp105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0816374271941849,r[:number])
end

def test_costpercapita_bq105
  r = spreadsheet.costpercapita_bq105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.161874791281747,r[:number])
end

def test_costpercapita_bs105
  r = spreadsheet.costpercapita_bs105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3469351022762305,r[:number])
end

def test_costpercapita_bt105
  r = spreadsheet.costpercapita_bt105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.600646155672874,r[:number])
end

def test_costpercapita_bu105
  r = spreadsheet.costpercapita_bu105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8521030330260831,r[:number])
end

def test_costpercapita_bv105
  r = spreadsheet.costpercapita_bv105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9258063972914095,r[:number])
end

def test_costpercapita_bw105
  r = spreadsheet.costpercapita_bw105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9947213436960125,r[:number])
end

def test_costpercapita_bx105
  r = spreadsheet.costpercapita_bx105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.080110903663991,r[:number])
end

def test_costpercapita_by105
  r = spreadsheet.costpercapita_by105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1533892979654303,r[:number])
end

def test_costpercapita_bz105
  r = spreadsheet.costpercapita_bz105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.235001786834139,r[:number])
end

def test_costpercapita_ca105
  r = spreadsheet.costpercapita_ca105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3258265812016656,r[:number])
end

def test_costpercapita_cc105
  r = spreadsheet.costpercapita_cc105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9460600668475373,r[:number])
end

def test_costpercapita_cd105
  r = spreadsheet.costpercapita_cd105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.15356415843493,r[:number])
end

def test_costpercapita_cf105
  r = spreadsheet.costpercapita_cf105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4756355142219882,r[:number])
end

def test_costpercapita_cg105
  r = spreadsheet.costpercapita_cg105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.012500969228556055,r[:number])
end

def test_costpercapita_ch105
  r = spreadsheet.costpercapita_ch105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.251657859905346,r[:number])
end

def test_costpercapita_ci105
  r = spreadsheet.costpercapita_ci105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.25170439879026113,r[:number])
end

def test_costpercapita_cj105
  r = spreadsheet.costpercapita_cj105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2808978207087142,r[:number])
end

def test_costpercapita_ck105
  r = spreadsheet.costpercapita_ck105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.32019435817687225,r[:number])
end

def test_costpercapita_cl105
  r = spreadsheet.costpercapita_cl105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.34141303951328467,r[:number])
end

def test_costpercapita_cm105
  r = spreadsheet.costpercapita_cm105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.36499800724544534,r[:number])
end

def test_costpercapita_cn105
  r = spreadsheet.costpercapita_cn105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39121090233376665,r[:number])
end

def test_costpercapita_cp105
  r = spreadsheet.costpercapita_cp105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.19321576018669534,r[:number])
end

def test_costpercapita_cq105
  r = spreadsheet.costpercapita_cq105
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.291133194883743,r[:number])
end

def test_costpercapita_cr105
  r = spreadsheet.costpercapita_cr105
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a106
  r = spreadsheet.costpercapita_a106
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b106
  r = spreadsheet.costpercapita_b106
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage of captured CO2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c106
  r = spreadsheet.costpercapita_c106
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e106
  r = spreadsheet.costpercapita_e106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f106
  r = spreadsheet.costpercapita_f106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9973400336412321,r[:number])
end

def test_costpercapita_g106
  r = spreadsheet.costpercapita_g106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.55110593014311,r[:number])
end

def test_costpercapita_h106
  r = spreadsheet.costpercapita_h106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.317466624915646,r[:number])
end

def test_costpercapita_i106
  r = spreadsheet.costpercapita_i106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.113064079488405,r[:number])
end

def test_costpercapita_j106
  r = spreadsheet.costpercapita_j106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9351933136393593,r[:number])
end

def test_costpercapita_k106
  r = spreadsheet.costpercapita_k106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8425442246299073,r[:number])
end

def test_costpercapita_l106
  r = spreadsheet.costpercapita_l106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.691574493903866,r[:number])
end

def test_costpercapita_m106
  r = spreadsheet.costpercapita_m106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5525935205169614,r[:number])
end

def test_costpercapita_o106
  r = spreadsheet.costpercapita_o106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p106
  r = spreadsheet.costpercapita_p106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06106153817131767,r[:number])
end

def test_costpercapita_q106
  r = spreadsheet.costpercapita_q106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13913380986437507,r[:number])
end

def test_costpercapita_r106
  r = spreadsheet.costpercapita_r106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13199112253313547,r[:number])
end

def test_costpercapita_s106
  r = spreadsheet.costpercapita_s106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12574224471578838,r[:number])
end

def test_costpercapita_t106
  r = spreadsheet.costpercapita_t106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12030448130268898,r[:number])
end

def test_costpercapita_u106
  r = spreadsheet.costpercapita_u106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11747206629582857,r[:number])
end

def test_costpercapita_v106
  r = spreadsheet.costpercapita_v106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11285670595648963,r[:number])
end

def test_costpercapita_w106
  r = spreadsheet.costpercapita_w106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10860785905580425,r[:number])
end

def test_costpercapita_y106
  r = spreadsheet.costpercapita_y106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z106
  r = spreadsheet.costpercapita_z106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa106
  r = spreadsheet.costpercapita_aa106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab106
  r = spreadsheet.costpercapita_ab106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac106
  r = spreadsheet.costpercapita_ac106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad106
  r = spreadsheet.costpercapita_ad106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae106
  r = spreadsheet.costpercapita_ae106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af106
  r = spreadsheet.costpercapita_af106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag106
  r = spreadsheet.costpercapita_ag106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai106
  r = spreadsheet.costpercapita_ai106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj106
  r = spreadsheet.costpercapita_aj106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.05840157181255,r[:number])
end

def test_costpercapita_ak106
  r = spreadsheet.costpercapita_ak106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.690239740007485,r[:number])
end

def test_costpercapita_al106
  r = spreadsheet.costpercapita_al106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.449457747448781,r[:number])
end

def test_costpercapita_am106
  r = spreadsheet.costpercapita_am106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.238806324204194,r[:number])
end

def test_costpercapita_an106
  r = spreadsheet.costpercapita_an106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.055497794942049,r[:number])
end

def test_costpercapita_ao106
  r = spreadsheet.costpercapita_ao106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.960016290925736,r[:number])
end

def test_costpercapita_ap106
  r = spreadsheet.costpercapita_ap106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8044311998603555,r[:number])
end

def test_costpercapita_aq106
  r = spreadsheet.costpercapita_aq106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.661201379572766,r[:number])
end

def test_costpercapita_as106
  r = spreadsheet.costpercapita_as106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4353391165304354,r[:number])
end

def test_costpercapita_at106
  r = spreadsheet.costpercapita_at106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.55495016927064,r[:number])
end

def test_costpercapita_av106
  r = spreadsheet.costpercapita_av106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw106
  r = spreadsheet.costpercapita_aw106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay106
  r = spreadsheet.costpercapita_ay106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az106
  r = spreadsheet.costpercapita_az106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.096485996969674,r[:number])
end

def test_costpercapita_ba106
  r = spreadsheet.costpercapita_ba106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4984348378729395,r[:number])
end

def test_costpercapita_bb106
  r = spreadsheet.costpercapita_bb106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3701731387086733,r[:number])
end

def test_costpercapita_bc106
  r = spreadsheet.costpercapita_bc106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2579616348931015,r[:number])
end

def test_costpercapita_bd106
  r = spreadsheet.costpercapita_bd106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.160315364984718,r[:number])
end

def test_costpercapita_be106
  r = spreadsheet.costpercapita_be106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1094535052013037,r[:number])
end

def test_costpercapita_bf106
  r = spreadsheet.costpercapita_bf106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0265751805699153,r[:number])
end

def test_costpercapita_bg106
  r = spreadsheet.costpercapita_bg106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9502783615019366,r[:number])
end

def test_costpercapita_bi106
  r = spreadsheet.costpercapita_bi106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj106
  r = spreadsheet.costpercapita_bj106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.096485996969674,r[:number])
end

def test_costpercapita_bk106
  r = spreadsheet.costpercapita_bk106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5590239113105544,r[:number])
end

def test_costpercapita_bl106
  r = spreadsheet.costpercapita_bl106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.818997303000389,r[:number])
end

def test_costpercapita_bm106
  r = spreadsheet.costpercapita_bm106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.918311765330572,r[:number])
end

def test_costpercapita_bn106
  r = spreadsheet.costpercapita_bn106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.616203024233996,r[:number])
end

def test_costpercapita_bo106
  r = spreadsheet.costpercapita_bo106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.381451070534397,r[:number])
end

def test_costpercapita_bp106
  r = spreadsheet.costpercapita_bp106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.166018335319414,r[:number])
end

def test_costpercapita_bq106
  r = spreadsheet.costpercapita_bq106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.967827625244577,r[:number])
end

def test_costpercapita_bs106
  r = spreadsheet.costpercapita_bs106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt106
  r = spreadsheet.costpercapita_bt106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1575475351409916,r[:number])
end

def test_costpercapita_bu106
  r = spreadsheet.costpercapita_bu106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6981577211749297,r[:number])
end

def test_costpercapita_bv106
  r = spreadsheet.costpercapita_bv106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.950988425533524,r[:number])
end

def test_costpercapita_bw106
  r = spreadsheet.costpercapita_bw106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.04405401004636,r[:number])
end

def test_costpercapita_bx106
  r = spreadsheet.costpercapita_bx106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.736507505536685,r[:number])
end

def test_costpercapita_by106
  r = spreadsheet.costpercapita_by106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.498923136830226,r[:number])
end

def test_costpercapita_bz106
  r = spreadsheet.costpercapita_bz106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.278875041275904,r[:number])
end

def test_costpercapita_ca106
  r = spreadsheet.costpercapita_ca106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.076435484300382,r[:number])
end

def test_costpercapita_cc106
  r = spreadsheet.costpercapita_cc106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.826832095537667,r[:number])
end

def test_costpercapita_cd106
  r = spreadsheet.costpercapita_cd106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.97518739066041,r[:number])
end

def test_costpercapita_cf106
  r = spreadsheet.costpercapita_cf106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg106
  r = spreadsheet.costpercapita_cg106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9008540366715582,r[:number])
end

def test_costpercapita_ch106
  r = spreadsheet.costpercapita_ch106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9920820188325553,r[:number])
end

def test_costpercapita_ci106
  r = spreadsheet.costpercapita_ci106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5015306780847428,r[:number])
end

def test_costpercapita_cj106
  r = spreadsheet.costpercapita_cj106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8052476858421675,r[:number])
end

def test_costpercapita_ck106
  r = spreadsheet.costpercapita_ck106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6810097105946364,r[:number])
end

def test_costpercapita_cl106
  r = spreadsheet.costpercapita_cl106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5389068459044903,r[:number])
end

def test_costpercapita_cm106
  r = spreadsheet.costpercapita_cm106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4744438414155483,r[:number])
end

def test_costpercapita_cn106
  r = spreadsheet.costpercapita_cn106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.415234104727616,r[:number])
end

def test_costpercapita_cp106
  r = spreadsheet.costpercapita_cp106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3914929790072321,r[:number])
end

def test_costpercapita_cq106
  r = spreadsheet.costpercapita_cq106
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.42023722138976,r[:number])
end

def test_costpercapita_cr106
  r = spreadsheet.costpercapita_cr106
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a107
  r = spreadsheet.costpercapita_a107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b107
  r = spreadsheet.costpercapita_b107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c107
  r = spreadsheet.costpercapita_c107
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e107
  r = spreadsheet.costpercapita_e107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1434.158408787986,r[:number])
end

def test_costpercapita_f107
  r = spreadsheet.costpercapita_f107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1436.066009349771,r[:number])
end

def test_costpercapita_g107
  r = spreadsheet.costpercapita_g107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1496.1600620670197,r[:number])
end

def test_costpercapita_h107
  r = spreadsheet.costpercapita_h107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1568.5432699472988,r[:number])
end

def test_costpercapita_i107
  r = spreadsheet.costpercapita_i107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1568.8357405216743,r[:number])
end

def test_costpercapita_j107
  r = spreadsheet.costpercapita_j107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1615.5839567335179,r[:number])
end

def test_costpercapita_k107
  r = spreadsheet.costpercapita_k107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1662.778830550461,r[:number])
end

def test_costpercapita_l107
  r = spreadsheet.costpercapita_l107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1687.1803279507715,r[:number])
end

def test_costpercapita_m107
  r = spreadsheet.costpercapita_m107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1709.9350401585916,r[:number])
end

def test_costpercapita_o107
  r = spreadsheet.costpercapita_o107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1462.4371583529373,r[:number])
end

def test_costpercapita_p107
  r = spreadsheet.costpercapita_p107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1447.6929603050062,r[:number])
end

def test_costpercapita_q107
  r = spreadsheet.costpercapita_q107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1470.856435062944,r[:number])
end

def test_costpercapita_r107
  r = spreadsheet.costpercapita_r107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1505.0929322653262,r[:number])
end

def test_costpercapita_s107
  r = spreadsheet.costpercapita_s107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1525.784367527896,r[:number])
end

def test_costpercapita_t107
  r = spreadsheet.costpercapita_t107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1542.20386880803,r[:number])
end

def test_costpercapita_u107
  r = spreadsheet.costpercapita_u107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1547.5318186801107,r[:number])
end

def test_costpercapita_v107
  r = spreadsheet.costpercapita_v107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1546.919142127022,r[:number])
end

def test_costpercapita_w107
  r = spreadsheet.costpercapita_w107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1542.1971691642455,r[:number])
end

def test_costpercapita_y107
  r = spreadsheet.costpercapita_y107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(747.3510211928905,r[:number])
end

def test_costpercapita_z107
  r = spreadsheet.costpercapita_z107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(829.5002706904614,r[:number])
end

def test_costpercapita_aa107
  r = spreadsheet.costpercapita_aa107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(930.7975724433372,r[:number])
end

def test_costpercapita_ab107
  r = spreadsheet.costpercapita_ab107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1029.9491300960988,r[:number])
end

def test_costpercapita_ac107
  r = spreadsheet.costpercapita_ac107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1135.7652101814951,r[:number])
end

def test_costpercapita_ad107
  r = spreadsheet.costpercapita_ad107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1169.6592417771058,r[:number])
end

def test_costpercapita_ae107
  r = spreadsheet.costpercapita_ae107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1194.873494525682,r[:number])
end

def test_costpercapita_af107
  r = spreadsheet.costpercapita_af107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1224.237003475393,r[:number])
end

def test_costpercapita_ag107
  r = spreadsheet.costpercapita_ag107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1242.8763567025017,r[:number])
end

def test_costpercapita_ai107
  r = spreadsheet.costpercapita_ai107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3643.9465883338135,r[:number])
end

def test_costpercapita_aj107
  r = spreadsheet.costpercapita_aj107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3713.2592403452386,r[:number])
end

def test_costpercapita_ak107
  r = spreadsheet.costpercapita_ak107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3897.814069573301,r[:number])
end

def test_costpercapita_al107
  r = spreadsheet.costpercapita_al107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4103.585332308724,r[:number])
end

def test_costpercapita_am107
  r = spreadsheet.costpercapita_am107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4230.385318231067,r[:number])
end

def test_costpercapita_an107
  r = spreadsheet.costpercapita_an107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4327.447067318653,r[:number])
end

def test_costpercapita_ao107
  r = spreadsheet.costpercapita_ao107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4405.184143756253,r[:number])
end

def test_costpercapita_ap107
  r = spreadsheet.costpercapita_ap107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4458.336473553186,r[:number])
end

def test_costpercapita_aq107
  r = spreadsheet.costpercapita_aq107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4495.008566025339,r[:number])
end

def test_costpercapita_as107
  r = spreadsheet.costpercapita_as107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4141.662977716176,r[:number])
end

def test_costpercapita_at107
  r = spreadsheet.costpercapita_at107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85781.83918039214,r[:number])
end

def test_costpercapita_ay107
  r = spreadsheet.costpercapita_ay107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.3886527640088,r[:number])
end

def test_costpercapita_az107
  r = spreadsheet.costpercapita_az107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(788.3616427121513,r[:number])
end

def test_costpercapita_ba107
  r = spreadsheet.costpercapita_ba107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(821.3516625364155,r[:number])
end

def test_costpercapita_bb107
  r = spreadsheet.costpercapita_bb107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.0880982557662,r[:number])
end

def test_costpercapita_bc107
  r = spreadsheet.costpercapita_bc107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.2486567405145,r[:number])
end

def test_costpercapita_bd107
  r = spreadsheet.costpercapita_bd107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(886.912171012619,r[:number])
end

def test_costpercapita_be107
  r = spreadsheet.costpercapita_be107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(912.8208883053319,r[:number])
end

def test_costpercapita_bf107
  r = spreadsheet.costpercapita_bf107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(926.2166545513799,r[:number])
end

def test_costpercapita_bg107
  r = spreadsheet.costpercapita_bg107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(938.708379986565,r[:number])
end

def test_costpercapita_bi107
  r = spreadsheet.costpercapita_bi107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.3886527640088,r[:number])
end

def test_costpercapita_bj107
  r = spreadsheet.costpercapita_bj107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1245.1732469378592,r[:number])
end

def test_costpercapita_bk107
  r = spreadsheet.costpercapita_bk107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.7602403831743,r[:number])
end

def test_costpercapita_bl107
  r = spreadsheet.costpercapita_bl107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2395.948736019316,r[:number])
end

def test_costpercapita_bm107
  r = spreadsheet.costpercapita_bm107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2472.986807668679,r[:number])
end

def test_costpercapita_bn107
  r = spreadsheet.costpercapita_bn107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2545.707175767808,r[:number])
end

def test_costpercapita_bo107
  r = spreadsheet.costpercapita_bo107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2603.84510666057,r[:number])
end

def test_costpercapita_bp107
  r = spreadsheet.costpercapita_bp107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2671.511449244993,r[:number])
end

def test_costpercapita_bq107
  r = spreadsheet.costpercapita_bq107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2725.55721754548,r[:number])
end

def test_costpercapita_bs107
  r = spreadsheet.costpercapita_bs107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2682.1768323098363,r[:number])
end

def test_costpercapita_bt107
  r = spreadsheet.costpercapita_bt107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3522.3664779333267,r[:number])
end

def test_costpercapita_bu107
  r = spreadsheet.costpercapita_bu107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4427.4142478894555,r[:number])
end

def test_costpercapita_bv107
  r = spreadsheet.costpercapita_bv107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4930.99079838074,r[:number])
end

def test_costpercapita_bw107
  r = spreadsheet.costpercapita_bw107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5134.536385378072,r[:number])
end

def test_costpercapita_bx107
  r = spreadsheet.costpercapita_bx107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5257.570286352942,r[:number])
end

def test_costpercapita_by107
  r = spreadsheet.costpercapita_by107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5346.250419866364,r[:number])
end

def test_costpercapita_bz107
  r = spreadsheet.costpercapita_bz107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5442.6675948474085,r[:number])
end

def test_costpercapita_ca107
  r = spreadsheet.costpercapita_ca107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5510.630743412227,r[:number])
end

def test_costpercapita_cc107
  r = spreadsheet.costpercapita_cc107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4694.955976263375,r[:number])
end

def test_costpercapita_cd107
  r = spreadsheet.costpercapita_cd107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97138.084027309,r[:number])
end

def test_costpercapita_cf107
  r = spreadsheet.costpercapita_cf107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-961.7697560239772,r[:number])
end

def test_costpercapita_cg107
  r = spreadsheet.costpercapita_cg107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-190.8927624119119,r[:number])
end

def test_costpercapita_ch107
  r = spreadsheet.costpercapita_ch107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.6001783161546,r[:number])
end

def test_costpercapita_ci107
  r = spreadsheet.costpercapita_ci107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827.4054660720174,r[:number])
end

def test_costpercapita_cj107
  r = spreadsheet.costpercapita_cj107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(904.1510671470045,r[:number])
end

def test_costpercapita_ck107
  r = spreadsheet.costpercapita_ck107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(930.1232190342901,r[:number])
end

def test_costpercapita_cl107
  r = spreadsheet.costpercapita_cl107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(941.0662761101087,r[:number])
end

def test_costpercapita_cm107
  r = spreadsheet.costpercapita_cm107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(984.3311212942217,r[:number])
end

def test_costpercapita_cn107
  r = spreadsheet.costpercapita_cn107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1015.6221773868882,r[:number])
end

def test_costpercapita_cp107
  r = spreadsheet.costpercapita_cp107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(553.2929985471995,r[:number])
end

def test_costpercapita_cq107
  r = spreadsheet.costpercapita_cq107
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11356.244846916878,r[:number])
end

def test_costpercapita_cr107
  r = spreadsheet.costpercapita_cr107
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf108
  r = spreadsheet.costpercapita_cf108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg108
  r = spreadsheet.costpercapita_cg108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch108
  r = spreadsheet.costpercapita_ch108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci108
  r = spreadsheet.costpercapita_ci108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj108
  r = spreadsheet.costpercapita_cj108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck108
  r = spreadsheet.costpercapita_ck108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl108
  r = spreadsheet.costpercapita_cl108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm108
  r = spreadsheet.costpercapita_cm108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn108
  r = spreadsheet.costpercapita_cn108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp108
  r = spreadsheet.costpercapita_cp108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq108
  r = spreadsheet.costpercapita_cq108
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b110
  r = spreadsheet.costpercapita_b110
  assert_equal(:ExcelString,r[:type])
  assert_equal("£/Capita/yr",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e110
  r = spreadsheet.costpercapita_e110
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f110
  r = spreadsheet.costpercapita_f110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o110
  r = spreadsheet.costpercapita_o110
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p110
  r = spreadsheet.costpercapita_p110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y110
  r = spreadsheet.costpercapita_y110
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z110
  r = spreadsheet.costpercapita_z110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai110
  r = spreadsheet.costpercapita_ai110
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as110
  r = spreadsheet.costpercapita_as110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av110
  r = spreadsheet.costpercapita_av110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay110
  r = spreadsheet.costpercapita_ay110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi110
  r = spreadsheet.costpercapita_bi110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Finance cost for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br110
  r = spreadsheet.costpercapita_br110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc110
  r = spreadsheet.costpercapita_cc110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf110
  r = spreadsheet.costpercapita_cf110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp110
  r = spreadsheet.costpercapita_cp110
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a111
  r = spreadsheet.costpercapita_a111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Code",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b111
  r = spreadsheet.costpercapita_b111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Description",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c111
  r = spreadsheet.costpercapita_c111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e111
  r = spreadsheet.costpercapita_e111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f111
  r = spreadsheet.costpercapita_f111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g111
  r = spreadsheet.costpercapita_g111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h111
  r = spreadsheet.costpercapita_h111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i111
  r = spreadsheet.costpercapita_i111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j111
  r = spreadsheet.costpercapita_j111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k111
  r = spreadsheet.costpercapita_k111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l111
  r = spreadsheet.costpercapita_l111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m111
  r = spreadsheet.costpercapita_m111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o111
  r = spreadsheet.costpercapita_o111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p111
  r = spreadsheet.costpercapita_p111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q111
  r = spreadsheet.costpercapita_q111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r111
  r = spreadsheet.costpercapita_r111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s111
  r = spreadsheet.costpercapita_s111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t111
  r = spreadsheet.costpercapita_t111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u111
  r = spreadsheet.costpercapita_u111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v111
  r = spreadsheet.costpercapita_v111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w111
  r = spreadsheet.costpercapita_w111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y111
  r = spreadsheet.costpercapita_y111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z111
  r = spreadsheet.costpercapita_z111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa111
  r = spreadsheet.costpercapita_aa111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab111
  r = spreadsheet.costpercapita_ab111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac111
  r = spreadsheet.costpercapita_ac111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad111
  r = spreadsheet.costpercapita_ad111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae111
  r = spreadsheet.costpercapita_ae111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af111
  r = spreadsheet.costpercapita_af111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag111
  r = spreadsheet.costpercapita_ag111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai111
  r = spreadsheet.costpercapita_ai111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj111
  r = spreadsheet.costpercapita_aj111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak111
  r = spreadsheet.costpercapita_ak111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al111
  r = spreadsheet.costpercapita_al111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am111
  r = spreadsheet.costpercapita_am111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an111
  r = spreadsheet.costpercapita_an111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao111
  r = spreadsheet.costpercapita_ao111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap111
  r = spreadsheet.costpercapita_ap111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq111
  r = spreadsheet.costpercapita_aq111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as111
  r = spreadsheet.costpercapita_as111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at111
  r = spreadsheet.costpercapita_at111
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av111
  r = spreadsheet.costpercapita_av111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw111
  r = spreadsheet.costpercapita_aw111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay111
  r = spreadsheet.costpercapita_ay111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_az111
  r = spreadsheet.costpercapita_az111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_ba111
  r = spreadsheet.costpercapita_ba111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bb111
  r = spreadsheet.costpercapita_bb111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bc111
  r = spreadsheet.costpercapita_bc111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bd111
  r = spreadsheet.costpercapita_bd111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_be111
  r = spreadsheet.costpercapita_be111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bf111
  r = spreadsheet.costpercapita_bf111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bg111
  r = spreadsheet.costpercapita_bg111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bi111
  r = spreadsheet.costpercapita_bi111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_bj111
  r = spreadsheet.costpercapita_bj111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_bk111
  r = spreadsheet.costpercapita_bk111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bl111
  r = spreadsheet.costpercapita_bl111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bm111
  r = spreadsheet.costpercapita_bm111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bn111
  r = spreadsheet.costpercapita_bn111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_bo111
  r = spreadsheet.costpercapita_bo111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bp111
  r = spreadsheet.costpercapita_bp111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bq111
  r = spreadsheet.costpercapita_bq111
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bs111
  r = spreadsheet.costpercapita_bs111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt111
  r = spreadsheet.costpercapita_bt111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu111
  r = spreadsheet.costpercapita_bu111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv111
  r = spreadsheet.costpercapita_bv111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw111
  r = spreadsheet.costpercapita_bw111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx111
  r = spreadsheet.costpercapita_bx111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by111
  r = spreadsheet.costpercapita_by111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz111
  r = spreadsheet.costpercapita_bz111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca111
  r = spreadsheet.costpercapita_ca111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc111
  r = spreadsheet.costpercapita_cc111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd111
  r = spreadsheet.costpercapita_cd111
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf111
  r = spreadsheet.costpercapita_cf111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg111
  r = spreadsheet.costpercapita_cg111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch111
  r = spreadsheet.costpercapita_ch111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci111
  r = spreadsheet.costpercapita_ci111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj111
  r = spreadsheet.costpercapita_cj111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck111
  r = spreadsheet.costpercapita_ck111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl111
  r = spreadsheet.costpercapita_cl111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm111
  r = spreadsheet.costpercapita_cm111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn111
  r = spreadsheet.costpercapita_cn111
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp111
  r = spreadsheet.costpercapita_cp111
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq111
  r = spreadsheet.costpercapita_cq111
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a112
  r = spreadsheet.costpercapita_a112
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b112
  r = spreadsheet.costpercapita_b112
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional thermal plant",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c112
  r = spreadsheet.costpercapita_c112
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e112
  r = spreadsheet.costpercapita_e112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.16588391737368,r[:number])
end

def test_costpercapita_f112
  r = spreadsheet.costpercapita_f112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.179654476063103,r[:number])
end

def test_costpercapita_g112
  r = spreadsheet.costpercapita_g112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.6793078459415,r[:number])
end

def test_costpercapita_h112
  r = spreadsheet.costpercapita_h112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.595281408259076,r[:number])
end

def test_costpercapita_i112
  r = spreadsheet.costpercapita_i112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.92763528509278,r[:number])
end

def test_costpercapita_j112
  r = spreadsheet.costpercapita_j112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.55149287426343,r[:number])
end

def test_costpercapita_k112
  r = spreadsheet.costpercapita_k112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.93536860865123,r[:number])
end

def test_costpercapita_l112
  r = spreadsheet.costpercapita_l112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.0970308401844,r[:number])
end

def test_costpercapita_m112
  r = spreadsheet.costpercapita_m112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.0679832147547,r[:number])
end

def test_costpercapita_o112
  r = spreadsheet.costpercapita_o112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.16598414786196,r[:number])
end

def test_costpercapita_p112
  r = spreadsheet.costpercapita_p112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.00241793521941,r[:number])
end

def test_costpercapita_q112
  r = spreadsheet.costpercapita_q112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.20171495362622,r[:number])
end

def test_costpercapita_r112
  r = spreadsheet.costpercapita_r112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.2014721536162,r[:number])
end

def test_costpercapita_s112
  r = spreadsheet.costpercapita_s112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.38369032427333,r[:number])
end

def test_costpercapita_t112
  r = spreadsheet.costpercapita_t112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.53367748267216,r[:number])
end

def test_costpercapita_u112
  r = spreadsheet.costpercapita_u112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.58869360706176,r[:number])
end

def test_costpercapita_v112
  r = spreadsheet.costpercapita_v112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.53277520472164,r[:number])
end

def test_costpercapita_w112
  r = spreadsheet.costpercapita_w112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.89952978667618,r[:number])
end

def test_costpercapita_y112
  r = spreadsheet.costpercapita_y112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z112
  r = spreadsheet.costpercapita_z112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa112
  r = spreadsheet.costpercapita_aa112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab112
  r = spreadsheet.costpercapita_ab112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac112
  r = spreadsheet.costpercapita_ac112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad112
  r = spreadsheet.costpercapita_ad112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae112
  r = spreadsheet.costpercapita_ae112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af112
  r = spreadsheet.costpercapita_af112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag112
  r = spreadsheet.costpercapita_ag112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai112
  r = spreadsheet.costpercapita_ai112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.33186806523565,r[:number])
end

def test_costpercapita_aj112
  r = spreadsheet.costpercapita_aj112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.18207241128252,r[:number])
end

def test_costpercapita_ak112
  r = spreadsheet.costpercapita_ak112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.88102279956773,r[:number])
end

def test_costpercapita_al112
  r = spreadsheet.costpercapita_al112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.79675356187528,r[:number])
end

def test_costpercapita_am112
  r = spreadsheet.costpercapita_am112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.31132560936612,r[:number])
end

def test_costpercapita_an112
  r = spreadsheet.costpercapita_an112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.0851703569356,r[:number])
end

def test_costpercapita_ao112
  r = spreadsheet.costpercapita_ao112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.524062215713,r[:number])
end

def test_costpercapita_ap112
  r = spreadsheet.costpercapita_ap112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(226.62980604490605,r[:number])
end

def test_costpercapita_aq112
  r = spreadsheet.costpercapita_aq112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.9675130014309,r[:number])
end

def test_costpercapita_as112
  r = spreadsheet.costpercapita_as112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.85662156292364,r[:number])
end

def test_costpercapita_at112
  r = spreadsheet.costpercapita_at112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3012.4646987607434,r[:number])
end

def test_costpercapita_av112
  r = spreadsheet.costpercapita_av112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw112
  r = spreadsheet.costpercapita_aw112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay112
  r = spreadsheet.costpercapita_ay112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8263774700607867,r[:number])
end

def test_costpercapita_az112
  r = spreadsheet.costpercapita_az112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.209690257872072,r[:number])
end

def test_costpercapita_ba112
  r = spreadsheet.costpercapita_ba112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.426573449476486,r[:number])
end

def test_costpercapita_bb112
  r = spreadsheet.costpercapita_bb112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.917132581553176,r[:number])
end

def test_costpercapita_bc112
  r = spreadsheet.costpercapita_bc112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.765087216553056,r[:number])
end

def test_costpercapita_bd112
  r = spreadsheet.costpercapita_bd112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.17519178399364,r[:number])
end

def test_costpercapita_be112
  r = spreadsheet.costpercapita_be112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.98915715552997,r[:number])
end

def test_costpercapita_bf112
  r = spreadsheet.costpercapita_bf112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.75279776076538,r[:number])
end

def test_costpercapita_bg112
  r = spreadsheet.costpercapita_bg112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.76159610233051,r[:number])
end

def test_costpercapita_bi112
  r = spreadsheet.costpercapita_bi112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8263774700607867,r[:number])
end

def test_costpercapita_bj112
  r = spreadsheet.costpercapita_bj112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.942867735128015,r[:number])
end

def test_costpercapita_bk112
  r = spreadsheet.costpercapita_bk112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.71654858034294,r[:number])
end

def test_costpercapita_bl112
  r = spreadsheet.costpercapita_bl112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.68726122275473,r[:number])
end

def test_costpercapita_bm112
  r = spreadsheet.costpercapita_bm112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.72172807018903,r[:number])
end

def test_costpercapita_bn112
  r = spreadsheet.costpercapita_bn112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.28764866662898,r[:number])
end

def test_costpercapita_bo112
  r = spreadsheet.costpercapita_bo112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.50499922566766,r[:number])
end

def test_costpercapita_bp112
  r = spreadsheet.costpercapita_bp112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218.56358837305393,r[:number])
end

def test_costpercapita_bq112
  r = spreadsheet.costpercapita_bq112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.2551968797407,r[:number])
end

def test_costpercapita_bs112
  r = spreadsheet.costpercapita_bs112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.99236161792275,r[:number])
end

def test_costpercapita_bt112
  r = spreadsheet.costpercapita_bt112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.94528567034743,r[:number])
end

def test_costpercapita_bu112
  r = spreadsheet.costpercapita_bu112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.91826353396918,r[:number])
end

def test_costpercapita_bv112
  r = spreadsheet.costpercapita_bv112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.8887333763709,r[:number])
end

def test_costpercapita_bw112
  r = spreadsheet.costpercapita_bw112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.1054183944624,r[:number])
end

def test_costpercapita_bx112
  r = spreadsheet.costpercapita_bx112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.82132614930111,r[:number])
end

def test_costpercapita_by112
  r = spreadsheet.costpercapita_by112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.0936928327294,r[:number])
end

def test_costpercapita_bz112
  r = spreadsheet.costpercapita_bz112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(304.0963635777756,r[:number])
end

def test_costpercapita_ca112
  r = spreadsheet.costpercapita_ca112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(358.1547266664169,r[:number])
end

def test_costpercapita_cc112
  r = spreadsheet.costpercapita_cc112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.4462413132551,r[:number])
end

def test_costpercapita_cd112
  r = spreadsheet.costpercapita_cd112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3606.511048810736,r[:number])
end

def test_costpercapita_cf112
  r = spreadsheet.costpercapita_cf112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.339506447312893,r[:number])
end

def test_costpercapita_cg112
  r = spreadsheet.costpercapita_cg112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.236786740935091,r[:number])
end

def test_costpercapita_ch112
  r = spreadsheet.costpercapita_ch112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.037240734401436,r[:number])
end

def test_costpercapita_ci112
  r = spreadsheet.costpercapita_ci112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.09197981449565,r[:number])
end

def test_costpercapita_cj112
  r = spreadsheet.costpercapita_cj112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.794092785096254,r[:number])
end

def test_costpercapita_ck112
  r = spreadsheet.costpercapita_ck112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.736155792365544,r[:number])
end

def test_costpercapita_cl112
  r = spreadsheet.costpercapita_cl112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.56963061701643,r[:number])
end

def test_costpercapita_cm112
  r = spreadsheet.costpercapita_cm112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.46655753286954,r[:number])
end

def test_costpercapita_cn112
  r = spreadsheet.costpercapita_cn112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.187213664986,r[:number])
end

def test_costpercapita_cp112
  r = spreadsheet.costpercapita_cp112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.58961975033143,r[:number])
end

def test_costpercapita_cq112
  r = spreadsheet.costpercapita_cq112
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(594.0463500499936,r[:number])
end

def test_costpercapita_cr112
  r = spreadsheet.costpercapita_cr112
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a113
  r = spreadsheet.costpercapita_a113
  assert_equal(:ExcelString,r[:type])
  assert_equal("I.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b113
  r = spreadsheet.costpercapita_b113
  assert_equal(:ExcelString,r[:type])
  assert_equal("Combustion + CCS",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c113
  r = spreadsheet.costpercapita_c113
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e113
  r = spreadsheet.costpercapita_e113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f113
  r = spreadsheet.costpercapita_f113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.360730631077048,r[:number])
end

def test_costpercapita_g113
  r = spreadsheet.costpercapita_g113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.615742211572174,r[:number])
end

def test_costpercapita_h113
  r = spreadsheet.costpercapita_h113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3436365674501494e-15,r[:number])
end

def test_costpercapita_i113
  r = spreadsheet.costpercapita_i113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j113
  r = spreadsheet.costpercapita_j113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k113
  r = spreadsheet.costpercapita_k113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l113
  r = spreadsheet.costpercapita_l113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m113
  r = spreadsheet.costpercapita_m113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o113
  r = spreadsheet.costpercapita_o113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p113
  r = spreadsheet.costpercapita_p113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9434554398382349,r[:number])
end

def test_costpercapita_q113
  r = spreadsheet.costpercapita_q113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9626011030763046,r[:number])
end

def test_costpercapita_r113
  r = spreadsheet.costpercapita_r113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8399052038698325,r[:number])
end

def test_costpercapita_s113
  r = spreadsheet.costpercapita_s113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.734998405824467,r[:number])
end

def test_costpercapita_t113
  r = spreadsheet.costpercapita_t113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6470179195035626,r[:number])
end

def test_costpercapita_u113
  r = spreadsheet.costpercapita_u113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.569240206656842,r[:number])
end

def test_costpercapita_v113
  r = spreadsheet.costpercapita_v113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4980412694025507,r[:number])
end

def test_costpercapita_w113
  r = spreadsheet.costpercapita_w113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.432761749418212,r[:number])
end

def test_costpercapita_y113
  r = spreadsheet.costpercapita_y113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z113
  r = spreadsheet.costpercapita_z113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa113
  r = spreadsheet.costpercapita_aa113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab113
  r = spreadsheet.costpercapita_ab113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac113
  r = spreadsheet.costpercapita_ac113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad113
  r = spreadsheet.costpercapita_ad113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae113
  r = spreadsheet.costpercapita_ae113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af113
  r = spreadsheet.costpercapita_af113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag113
  r = spreadsheet.costpercapita_ag113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai113
  r = spreadsheet.costpercapita_ai113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj113
  r = spreadsheet.costpercapita_aj113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.304186070915282,r[:number])
end

def test_costpercapita_ak113
  r = spreadsheet.costpercapita_ak113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.57834331464848,r[:number])
end

def test_costpercapita_al113
  r = spreadsheet.costpercapita_al113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.839905203869831,r[:number])
end

def test_costpercapita_am113
  r = spreadsheet.costpercapita_am113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.734998405824467,r[:number])
end

def test_costpercapita_an113
  r = spreadsheet.costpercapita_an113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6470179195035626,r[:number])
end

def test_costpercapita_ao113
  r = spreadsheet.costpercapita_ao113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.569240206656842,r[:number])
end

def test_costpercapita_ap113
  r = spreadsheet.costpercapita_ap113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4980412694025507,r[:number])
end

def test_costpercapita_aq113
  r = spreadsheet.costpercapita_aq113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.432761749418212,r[:number])
end

def test_costpercapita_as113
  r = spreadsheet.costpercapita_as113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.067166015582137,r[:number])
end

def test_costpercapita_at113
  r = spreadsheet.costpercapita_at113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.68890479974675,r[:number])
end

def test_costpercapita_av113
  r = spreadsheet.costpercapita_av113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw113
  r = spreadsheet.costpercapita_aw113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay113
  r = spreadsheet.costpercapita_ay113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az113
  r = spreadsheet.costpercapita_az113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.838715283591349,r[:number])
end

def test_costpercapita_ba113
  r = spreadsheet.costpercapita_ba113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.978458615090494,r[:number])
end

def test_costpercapita_bb113
  r = spreadsheet.costpercapita_bb113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-8.832648714332777e-16,r[:number])
end

def test_costpercapita_bc113
  r = spreadsheet.costpercapita_bc113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd113
  r = spreadsheet.costpercapita_bd113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be113
  r = spreadsheet.costpercapita_be113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf113
  r = spreadsheet.costpercapita_bf113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg113
  r = spreadsheet.costpercapita_bg113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi113
  r = spreadsheet.costpercapita_bi113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj113
  r = spreadsheet.costpercapita_bj113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.838715283591349,r[:number])
end

def test_costpercapita_bk113
  r = spreadsheet.costpercapita_bk113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.658763309756385,r[:number])
end

def test_costpercapita_bl113
  r = spreadsheet.costpercapita_bl113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.297767486377785,r[:number])
end

def test_costpercapita_bm113
  r = spreadsheet.costpercapita_bm113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.577631995872663,r[:number])
end

def test_costpercapita_bn113
  r = spreadsheet.costpercapita_bn113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-8.38896442167058e-16,r[:number])
end

def test_costpercapita_bo113
  r = spreadsheet.costpercapita_bo113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp113
  r = spreadsheet.costpercapita_bp113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq113
  r = spreadsheet.costpercapita_bq113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs113
  r = spreadsheet.costpercapita_bs113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt113
  r = spreadsheet.costpercapita_bt113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.782170723429584,r[:number])
end

def test_costpercapita_bu113
  r = spreadsheet.costpercapita_bu113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.62136441283269,r[:number])
end

def test_costpercapita_bv113
  r = spreadsheet.costpercapita_bv113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.137672690247618,r[:number])
end

def test_costpercapita_bw113
  r = spreadsheet.costpercapita_bw113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.31263040169713,r[:number])
end

def test_costpercapita_bx113
  r = spreadsheet.costpercapita_bx113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.647017919503562,r[:number])
end

def test_costpercapita_by113
  r = spreadsheet.costpercapita_by113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.569240206656842,r[:number])
end

def test_costpercapita_bz113
  r = spreadsheet.costpercapita_bz113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4980412694025507,r[:number])
end

def test_costpercapita_ca113
  r = spreadsheet.costpercapita_ca113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.432761749418212,r[:number])
end

def test_costpercapita_cc113
  r = spreadsheet.costpercapita_cc113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8889888192431314,r[:number])
end

def test_costpercapita_cd113
  r = spreadsheet.costpercapita_cd113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.01476928027537,r[:number])
end

def test_costpercapita_cf113
  r = spreadsheet.costpercapita_cf113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg113
  r = spreadsheet.costpercapita_cg113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.522015347485699,r[:number])
end

def test_costpercapita_ch113
  r = spreadsheet.costpercapita_ch113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.04302109818421,r[:number])
end

def test_costpercapita_ci113
  r = spreadsheet.costpercapita_ci113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.297767486377785,r[:number])
end

def test_costpercapita_cj113
  r = spreadsheet.costpercapita_cj113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.577631995872663,r[:number])
end

def test_costpercapita_ck113
  r = spreadsheet.costpercapita_ck113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-8.38896442167058e-16,r[:number])
end

def test_costpercapita_cl113
  r = spreadsheet.costpercapita_cl113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm113
  r = spreadsheet.costpercapita_cm113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn113
  r = spreadsheet.costpercapita_cn113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp113
  r = spreadsheet.costpercapita_cp113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8218228036609954,r[:number])
end

def test_costpercapita_cq113
  r = spreadsheet.costpercapita_cq113
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.325864480528615,r[:number])
end

def test_costpercapita_cr113
  r = spreadsheet.costpercapita_cr113
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a114
  r = spreadsheet.costpercapita_a114
  assert_equal(:ExcelString,r[:type])
  assert_equal("II.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b114
  r = spreadsheet.costpercapita_b114
  assert_equal(:ExcelString,r[:type])
  assert_equal("Nuclear power",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c114
  r = spreadsheet.costpercapita_c114
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e114
  r = spreadsheet.costpercapita_e114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f114
  r = spreadsheet.costpercapita_f114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g114
  r = spreadsheet.costpercapita_g114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h114
  r = spreadsheet.costpercapita_h114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i114
  r = spreadsheet.costpercapita_i114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j114
  r = spreadsheet.costpercapita_j114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k114
  r = spreadsheet.costpercapita_k114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l114
  r = spreadsheet.costpercapita_l114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m114
  r = spreadsheet.costpercapita_m114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o114
  r = spreadsheet.costpercapita_o114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.874058512683277,r[:number])
end

def test_costpercapita_p114
  r = spreadsheet.costpercapita_p114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.154954734634767,r[:number])
end

def test_costpercapita_q114
  r = spreadsheet.costpercapita_q114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.554176727536158,r[:number])
end

def test_costpercapita_r114
  r = spreadsheet.costpercapita_r114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7631032308036145,r[:number])
end

def test_costpercapita_s114
  r = spreadsheet.costpercapita_s114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6876148275169176,r[:number])
end

def test_costpercapita_t114
  r = spreadsheet.costpercapita_t114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u114
  r = spreadsheet.costpercapita_u114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v114
  r = spreadsheet.costpercapita_v114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w114
  r = spreadsheet.costpercapita_w114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y114
  r = spreadsheet.costpercapita_y114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6735560562468708,r[:number])
end

def test_costpercapita_z114
  r = spreadsheet.costpercapita_z114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1717321025222884,r[:number])
end

def test_costpercapita_aa114
  r = spreadsheet.costpercapita_aa114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2003620629822087,r[:number])
end

def test_costpercapita_ab114
  r = spreadsheet.costpercapita_ab114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.38773156085068894,r[:number])
end

def test_costpercapita_ac114
  r = spreadsheet.costpercapita_ac114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.37713867524794414,r[:number])
end

def test_costpercapita_ad114
  r = spreadsheet.costpercapita_ad114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae114
  r = spreadsheet.costpercapita_ae114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af114
  r = spreadsheet.costpercapita_af114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag114
  r = spreadsheet.costpercapita_ag114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai114
  r = spreadsheet.costpercapita_ai114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.547614568930147,r[:number])
end

def test_costpercapita_aj114
  r = spreadsheet.costpercapita_aj114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.326686837157055,r[:number])
end

def test_costpercapita_ak114
  r = spreadsheet.costpercapita_ak114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.754538790518367,r[:number])
end

def test_costpercapita_al114
  r = spreadsheet.costpercapita_al114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1508347916543036,r[:number])
end

def test_costpercapita_am114
  r = spreadsheet.costpercapita_am114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0647535027648614,r[:number])
end

def test_costpercapita_an114
  r = spreadsheet.costpercapita_an114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao114
  r = spreadsheet.costpercapita_ao114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap114
  r = spreadsheet.costpercapita_ap114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq114
  r = spreadsheet.costpercapita_aq114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as114
  r = spreadsheet.costpercapita_as114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8716031656694145,r[:number])
end

def test_costpercapita_at114
  r = spreadsheet.costpercapita_at114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.59097492633765,r[:number])
end

def test_costpercapita_av114
  r = spreadsheet.costpercapita_av114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw114
  r = spreadsheet.costpercapita_aw114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay114
  r = spreadsheet.costpercapita_ay114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az114
  r = spreadsheet.costpercapita_az114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba114
  r = spreadsheet.costpercapita_ba114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb114
  r = spreadsheet.costpercapita_bb114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc114
  r = spreadsheet.costpercapita_bc114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd114
  r = spreadsheet.costpercapita_bd114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be114
  r = spreadsheet.costpercapita_be114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf114
  r = spreadsheet.costpercapita_bf114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg114
  r = spreadsheet.costpercapita_bg114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi114
  r = spreadsheet.costpercapita_bi114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj114
  r = spreadsheet.costpercapita_bj114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk114
  r = spreadsheet.costpercapita_bk114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl114
  r = spreadsheet.costpercapita_bl114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm114
  r = spreadsheet.costpercapita_bm114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn114
  r = spreadsheet.costpercapita_bn114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo114
  r = spreadsheet.costpercapita_bo114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp114
  r = spreadsheet.costpercapita_bp114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq114
  r = spreadsheet.costpercapita_bq114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs114
  r = spreadsheet.costpercapita_bs114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.547614568930147,r[:number])
end

def test_costpercapita_bt114
  r = spreadsheet.costpercapita_bt114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.326686837157055,r[:number])
end

def test_costpercapita_bu114
  r = spreadsheet.costpercapita_bu114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.754538790518367,r[:number])
end

def test_costpercapita_bv114
  r = spreadsheet.costpercapita_bv114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1508347916543036,r[:number])
end

def test_costpercapita_bw114
  r = spreadsheet.costpercapita_bw114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0647535027648614,r[:number])
end

def test_costpercapita_bx114
  r = spreadsheet.costpercapita_bx114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by114
  r = spreadsheet.costpercapita_by114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz114
  r = spreadsheet.costpercapita_bz114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca114
  r = spreadsheet.costpercapita_ca114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc114
  r = spreadsheet.costpercapita_cc114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.8716031656694145,r[:number])
end

def test_costpercapita_cd114
  r = spreadsheet.costpercapita_cd114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.59097492633765,r[:number])
end

def test_costpercapita_cf114
  r = spreadsheet.costpercapita_cf114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg114
  r = spreadsheet.costpercapita_cg114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch114
  r = spreadsheet.costpercapita_ch114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci114
  r = spreadsheet.costpercapita_ci114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj114
  r = spreadsheet.costpercapita_cj114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck114
  r = spreadsheet.costpercapita_ck114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl114
  r = spreadsheet.costpercapita_cl114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm114
  r = spreadsheet.costpercapita_cm114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn114
  r = spreadsheet.costpercapita_cn114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp114
  r = spreadsheet.costpercapita_cp114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq114
  r = spreadsheet.costpercapita_cq114
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr114
  r = spreadsheet.costpercapita_cr114
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a115
  r = spreadsheet.costpercapita_a115
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.1",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b115
  r = spreadsheet.costpercapita_b115
  assert_equal(:ExcelString,r[:type])
  assert_equal("Onshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c115
  r = spreadsheet.costpercapita_c115
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e115
  r = spreadsheet.costpercapita_e115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.314518218355097,r[:number])
end

def test_costpercapita_f115
  r = spreadsheet.costpercapita_f115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.881784198086304,r[:number])
end

def test_costpercapita_g115
  r = spreadsheet.costpercapita_g115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.361843957639133,r[:number])
end

def test_costpercapita_h115
  r = spreadsheet.costpercapita_h115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.886187890116016,r[:number])
end

def test_costpercapita_i115
  r = spreadsheet.costpercapita_i115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j115
  r = spreadsheet.costpercapita_j115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k115
  r = spreadsheet.costpercapita_k115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l115
  r = spreadsheet.costpercapita_l115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m115
  r = spreadsheet.costpercapita_m115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o115
  r = spreadsheet.costpercapita_o115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.729084474606355,r[:number])
end

def test_costpercapita_p115
  r = spreadsheet.costpercapita_p115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.778561894572056,r[:number])
end

def test_costpercapita_q115
  r = spreadsheet.costpercapita_q115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.624385973462417,r[:number])
end

def test_costpercapita_r115
  r = spreadsheet.costpercapita_r115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.032552723529971,r[:number])
end

def test_costpercapita_s115
  r = spreadsheet.costpercapita_s115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.802679949205153,r[:number])
end

def test_costpercapita_t115
  r = spreadsheet.costpercapita_t115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.741770378162275,r[:number])
end

def test_costpercapita_u115
  r = spreadsheet.costpercapita_u115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8266188897596685,r[:number])
end

def test_costpercapita_v115
  r = spreadsheet.costpercapita_v115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03324200826954858,r[:number])
end

def test_costpercapita_w115
  r = spreadsheet.costpercapita_w115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03262165471279304,r[:number])
end

def test_costpercapita_y115
  r = spreadsheet.costpercapita_y115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z115
  r = spreadsheet.costpercapita_z115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa115
  r = spreadsheet.costpercapita_aa115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab115
  r = spreadsheet.costpercapita_ab115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac115
  r = spreadsheet.costpercapita_ac115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad115
  r = spreadsheet.costpercapita_ad115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae115
  r = spreadsheet.costpercapita_ae115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af115
  r = spreadsheet.costpercapita_af115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag115
  r = spreadsheet.costpercapita_ag115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai115
  r = spreadsheet.costpercapita_ai115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.04360269296145,r[:number])
end

def test_costpercapita_aj115
  r = spreadsheet.costpercapita_aj115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.66034609265836,r[:number])
end

def test_costpercapita_ak115
  r = spreadsheet.costpercapita_ak115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.98622993110155,r[:number])
end

def test_costpercapita_al115
  r = spreadsheet.costpercapita_al115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.918740613645987,r[:number])
end

def test_costpercapita_am115
  r = spreadsheet.costpercapita_am115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.802679949205153,r[:number])
end

def test_costpercapita_an115
  r = spreadsheet.costpercapita_an115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.741770378162275,r[:number])
end

def test_costpercapita_ao115
  r = spreadsheet.costpercapita_ao115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8266188897596685,r[:number])
end

def test_costpercapita_ap115
  r = spreadsheet.costpercapita_ap115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03324200826954858,r[:number])
end

def test_costpercapita_aq115
  r = spreadsheet.costpercapita_aq115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03262165471279304,r[:number])
end

def test_costpercapita_as115
  r = spreadsheet.costpercapita_as115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.005094690052978,r[:number])
end

def test_costpercapita_at115
  r = spreadsheet.costpercapita_at115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.49617624156923,r[:number])
end

def test_costpercapita_av115
  r = spreadsheet.costpercapita_av115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw115
  r = spreadsheet.costpercapita_aw115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay115
  r = spreadsheet.costpercapita_ay115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.223636646119193,r[:number])
end

def test_costpercapita_az115
  r = spreadsheet.costpercapita_az115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.440190761162956,r[:number])
end

def test_costpercapita_ba115
  r = spreadsheet.costpercapita_ba115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.098398225326367,r[:number])
end

def test_costpercapita_bb115
  r = spreadsheet.costpercapita_bb115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.785716726843072,r[:number])
end

def test_costpercapita_bc115
  r = spreadsheet.costpercapita_bc115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd115
  r = spreadsheet.costpercapita_bd115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be115
  r = spreadsheet.costpercapita_be115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf115
  r = spreadsheet.costpercapita_bf115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg115
  r = spreadsheet.costpercapita_bg115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi115
  r = spreadsheet.costpercapita_bi115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.223636646119193,r[:number])
end

def test_costpercapita_bj115
  r = spreadsheet.costpercapita_bj115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.42562748863199,r[:number])
end

def test_costpercapita_bk115
  r = spreadsheet.costpercapita_bk115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.95354289959837,r[:number])
end

def test_costpercapita_bl115
  r = spreadsheet.costpercapita_bl115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.357150180529214,r[:number])
end

def test_costpercapita_bm115
  r = spreadsheet.costpercapita_bm115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.03673889541554,r[:number])
end

def test_costpercapita_bn115
  r = spreadsheet.costpercapita_bn115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.29415763233311,r[:number])
end

def test_costpercapita_bo115
  r = spreadsheet.costpercapita_bo115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp115
  r = spreadsheet.costpercapita_bp115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq115
  r = spreadsheet.costpercapita_bq115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs115
  r = spreadsheet.costpercapita_bs115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.952721120725549,r[:number])
end

def test_costpercapita_bt115
  r = spreadsheet.costpercapita_bt115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.204189383204042,r[:number])
end

def test_costpercapita_bu115
  r = spreadsheet.costpercapita_bu115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.577928873060785,r[:number])
end

def test_costpercapita_bv115
  r = spreadsheet.costpercapita_bv115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.38970290405919,r[:number])
end

def test_costpercapita_bw115
  r = spreadsheet.costpercapita_bw115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.839418844620695,r[:number])
end

def test_costpercapita_bx115
  r = spreadsheet.costpercapita_bx115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.035928010495386,r[:number])
end

def test_costpercapita_by115
  r = spreadsheet.costpercapita_by115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8266188897596685,r[:number])
end

def test_costpercapita_bz115
  r = spreadsheet.costpercapita_bz115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03324200826954858,r[:number])
end

def test_costpercapita_ca115
  r = spreadsheet.costpercapita_ca115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03262165471279304,r[:number])
end

def test_costpercapita_cc115
  r = spreadsheet.costpercapita_cc115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.988041298767516,r[:number])
end

def test_costpercapita_cd115
  r = spreadsheet.costpercapita_cd115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(481.6804949718397,r[:number])
end

def test_costpercapita_cf115
  r = spreadsheet.costpercapita_cf115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-11.090881572235903,r[:number])
end

def test_costpercapita_cg115
  r = spreadsheet.costpercapita_cg115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5438432905456818,r[:number])
end

def test_costpercapita_ch115
  r = spreadsheet.costpercapita_ch115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.591698941959237,r[:number])
end

def test_costpercapita_ci115
  r = spreadsheet.costpercapita_ci115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.470962290413198,r[:number])
end

def test_costpercapita_cj115
  r = spreadsheet.costpercapita_cj115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.03673889541554,r[:number])
end

def test_costpercapita_ck115
  r = spreadsheet.costpercapita_ck115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.29415763233311,r[:number])
end

def test_costpercapita_cl115
  r = spreadsheet.costpercapita_cl115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm115
  r = spreadsheet.costpercapita_cm115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn115
  r = spreadsheet.costpercapita_cn115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp115
  r = spreadsheet.costpercapita_cp115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.98294660871454,r[:number])
end

def test_costpercapita_cq115
  r = spreadsheet.costpercapita_cq115
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.18431873027055,r[:number])
end

def test_costpercapita_cr115
  r = spreadsheet.costpercapita_cr115
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a116
  r = spreadsheet.costpercapita_a116
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.a.2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b116
  r = spreadsheet.costpercapita_b116
  assert_equal(:ExcelString,r[:type])
  assert_equal("Offshore wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c116
  r = spreadsheet.costpercapita_c116
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e116
  r = spreadsheet.costpercapita_e116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.761722488709864,r[:number])
end

def test_costpercapita_f116
  r = spreadsheet.costpercapita_f116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.2275708146673,r[:number])
end

def test_costpercapita_g116
  r = spreadsheet.costpercapita_g116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.139761602341196,r[:number])
end

def test_costpercapita_h116
  r = spreadsheet.costpercapita_h116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.915682324351145,r[:number])
end

def test_costpercapita_i116
  r = spreadsheet.costpercapita_i116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j116
  r = spreadsheet.costpercapita_j116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k116
  r = spreadsheet.costpercapita_k116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l116
  r = spreadsheet.costpercapita_l116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m116
  r = spreadsheet.costpercapita_m116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o116
  r = spreadsheet.costpercapita_o116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.621698715171772,r[:number])
end

def test_costpercapita_p116
  r = spreadsheet.costpercapita_p116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.783961297122309,r[:number])
end

def test_costpercapita_q116
  r = spreadsheet.costpercapita_q116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.407894764138195,r[:number])
end

def test_costpercapita_r116
  r = spreadsheet.costpercapita_r116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.543136819143736,r[:number])
end

def test_costpercapita_s116
  r = spreadsheet.costpercapita_s116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.225446175739947,r[:number])
end

def test_costpercapita_t116
  r = spreadsheet.costpercapita_t116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.323513871327506,r[:number])
end

def test_costpercapita_u116
  r = spreadsheet.costpercapita_u116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.795276208077118,r[:number])
end

def test_costpercapita_v116
  r = spreadsheet.costpercapita_v116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w116
  r = spreadsheet.costpercapita_w116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y116
  r = spreadsheet.costpercapita_y116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z116
  r = spreadsheet.costpercapita_z116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa116
  r = spreadsheet.costpercapita_aa116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab116
  r = spreadsheet.costpercapita_ab116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac116
  r = spreadsheet.costpercapita_ac116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad116
  r = spreadsheet.costpercapita_ad116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae116
  r = spreadsheet.costpercapita_ae116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af116
  r = spreadsheet.costpercapita_af116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag116
  r = spreadsheet.costpercapita_ag116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai116
  r = spreadsheet.costpercapita_ai116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.38342120388164,r[:number])
end

def test_costpercapita_aj116
  r = spreadsheet.costpercapita_aj116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.01153211178961,r[:number])
end

def test_costpercapita_ak116
  r = spreadsheet.costpercapita_ak116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.54765636647939,r[:number])
end

def test_costpercapita_al116
  r = spreadsheet.costpercapita_al116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.45881914349488,r[:number])
end

def test_costpercapita_am116
  r = spreadsheet.costpercapita_am116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.225446175739947,r[:number])
end

def test_costpercapita_an116
  r = spreadsheet.costpercapita_an116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.323513871327506,r[:number])
end

def test_costpercapita_ao116
  r = spreadsheet.costpercapita_ao116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.795276208077118,r[:number])
end

def test_costpercapita_ap116
  r = spreadsheet.costpercapita_ap116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq116
  r = spreadsheet.costpercapita_aq116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as116
  r = spreadsheet.costpercapita_as116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.97174056453223,r[:number])
end

def test_costpercapita_at116
  r = spreadsheet.costpercapita_at116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(648.7864967023772,r[:number])
end

def test_costpercapita_av116
  r = spreadsheet.costpercapita_av116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw116
  r = spreadsheet.costpercapita_aw116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay116
  r = spreadsheet.costpercapita_ay116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.58328754149665,r[:number])
end

def test_costpercapita_az116
  r = spreadsheet.costpercapita_az116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.84277115898464,r[:number])
end

def test_costpercapita_ba116
  r = spreadsheet.costpercapita_ba116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.127679230597685,r[:number])
end

def test_costpercapita_bb116
  r = spreadsheet.costpercapita_bb116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.378794294541926,r[:number])
end

def test_costpercapita_bc116
  r = spreadsheet.costpercapita_bc116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd116
  r = spreadsheet.costpercapita_bd116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be116
  r = spreadsheet.costpercapita_be116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf116
  r = spreadsheet.costpercapita_bf116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg116
  r = spreadsheet.costpercapita_bg116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi116
  r = spreadsheet.costpercapita_bi116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.58328754149665,r[:number])
end

def test_costpercapita_bj116
  r = spreadsheet.costpercapita_bj116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.143024199398813,r[:number])
end

def test_costpercapita_bk116
  r = spreadsheet.costpercapita_bk116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.2838765688225,r[:number])
end

def test_costpercapita_bl116
  r = spreadsheet.costpercapita_bl116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.32578003089673,r[:number])
end

def test_costpercapita_bm116
  r = spreadsheet.costpercapita_bm116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.84547703548154,r[:number])
end

def test_costpercapita_bn116
  r = spreadsheet.costpercapita_bn116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.556049725357232,r[:number])
end

def test_costpercapita_bo116
  r = spreadsheet.costpercapita_bo116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp116
  r = spreadsheet.costpercapita_bp116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq116
  r = spreadsheet.costpercapita_bq116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs116
  r = spreadsheet.costpercapita_bs116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.204986256668423,r[:number])
end

def test_costpercapita_bt116
  r = spreadsheet.costpercapita_bt116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.92698549652112,r[:number])
end

def test_costpercapita_bu116
  r = spreadsheet.costpercapita_bu116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.6917713329607,r[:number])
end

def test_costpercapita_bv116
  r = spreadsheet.costpercapita_bv116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.86891685004045,r[:number])
end

def test_costpercapita_bw116
  r = spreadsheet.costpercapita_bw116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.07092321122149,r[:number])
end

def test_costpercapita_bx116
  r = spreadsheet.costpercapita_bx116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.87956359668474,r[:number])
end

def test_costpercapita_by116
  r = spreadsheet.costpercapita_by116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.795276208077118,r[:number])
end

def test_costpercapita_bz116
  r = spreadsheet.costpercapita_bz116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca116
  r = spreadsheet.costpercapita_ca116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc116
  r = spreadsheet.costpercapita_cc116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.493158105797114,r[:number])
end

def test_costpercapita_cd116
  r = spreadsheet.costpercapita_cd116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.6485203604276,r[:number])
end

def test_costpercapita_cf116
  r = spreadsheet.costpercapita_cf116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-13.178434947213216,r[:number])
end

def test_costpercapita_cg116
  r = spreadsheet.costpercapita_cg116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.0845466152684904,r[:number])
end

def test_costpercapita_ch116
  r = spreadsheet.costpercapita_ch116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.144114966481308,r[:number])
end

def test_costpercapita_ci116
  r = spreadsheet.costpercapita_ci116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.410097706545585,r[:number])
end

def test_costpercapita_cj116
  r = spreadsheet.costpercapita_cj116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.84547703548154,r[:number])
end

def test_costpercapita_ck116
  r = spreadsheet.costpercapita_ck116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.556049725357232,r[:number])
end

def test_costpercapita_cl116
  r = spreadsheet.costpercapita_cl116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm116
  r = spreadsheet.costpercapita_cm116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn116
  r = spreadsheet.costpercapita_cn116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp116
  r = spreadsheet.costpercapita_cp116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.521417541264883,r[:number])
end

def test_costpercapita_cq116
  r = spreadsheet.costpercapita_cq116
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.8620236580505,r[:number])
end

def test_costpercapita_cr116
  r = spreadsheet.costpercapita_cr116
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a117
  r = spreadsheet.costpercapita_a117
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b117
  r = spreadsheet.costpercapita_b117
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hydroelectric",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c117
  r = spreadsheet.costpercapita_c117
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e117
  r = spreadsheet.costpercapita_e117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.635574215929923,r[:number])
end

def test_costpercapita_f117
  r = spreadsheet.costpercapita_f117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g117
  r = spreadsheet.costpercapita_g117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h117
  r = spreadsheet.costpercapita_h117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i117
  r = spreadsheet.costpercapita_i117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j117
  r = spreadsheet.costpercapita_j117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k117
  r = spreadsheet.costpercapita_k117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l117
  r = spreadsheet.costpercapita_l117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m117
  r = spreadsheet.costpercapita_m117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o117
  r = spreadsheet.costpercapita_o117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.834271668999991,r[:number])
end

def test_costpercapita_p117
  r = spreadsheet.costpercapita_p117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.674861225936354,r[:number])
end

def test_costpercapita_q117
  r = spreadsheet.costpercapita_q117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.521814915801792,r[:number])
end

def test_costpercapita_r117
  r = spreadsheet.costpercapita_r117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.381803813824149,r[:number])
end

def test_costpercapita_s117
  r = spreadsheet.costpercapita_s117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.262092262792108,r[:number])
end

def test_costpercapita_t117
  r = spreadsheet.costpercapita_t117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1616957139099835,r[:number])
end

def test_costpercapita_u117
  r = spreadsheet.costpercapita_u117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.072941783620554,r[:number])
end

def test_costpercapita_v117
  r = spreadsheet.costpercapita_v117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9916950449024555,r[:number])
end

def test_costpercapita_w117
  r = spreadsheet.costpercapita_w117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9172030888656986,r[:number])
end

def test_costpercapita_y117
  r = spreadsheet.costpercapita_y117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z117
  r = spreadsheet.costpercapita_z117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa117
  r = spreadsheet.costpercapita_aa117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab117
  r = spreadsheet.costpercapita_ab117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac117
  r = spreadsheet.costpercapita_ac117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad117
  r = spreadsheet.costpercapita_ad117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae117
  r = spreadsheet.costpercapita_ae117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af117
  r = spreadsheet.costpercapita_af117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag117
  r = spreadsheet.costpercapita_ag117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai117
  r = spreadsheet.costpercapita_ai117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.469845884929914,r[:number])
end

def test_costpercapita_aj117
  r = spreadsheet.costpercapita_aj117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.674861225936354,r[:number])
end

def test_costpercapita_ak117
  r = spreadsheet.costpercapita_ak117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.521814915801792,r[:number])
end

def test_costpercapita_al117
  r = spreadsheet.costpercapita_al117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.381803813824149,r[:number])
end

def test_costpercapita_am117
  r = spreadsheet.costpercapita_am117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.262092262792108,r[:number])
end

def test_costpercapita_an117
  r = spreadsheet.costpercapita_an117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1616957139099835,r[:number])
end

def test_costpercapita_ao117
  r = spreadsheet.costpercapita_ao117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.072941783620554,r[:number])
end

def test_costpercapita_ap117
  r = spreadsheet.costpercapita_ap117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9916950449024555,r[:number])
end

def test_costpercapita_aq117
  r = spreadsheet.costpercapita_aq117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9172030888656986,r[:number])
end

def test_costpercapita_as117
  r = spreadsheet.costpercapita_as117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.050439303842557,r[:number])
end

def test_costpercapita_at117
  r = spreadsheet.costpercapita_at117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.3522914451764,r[:number])
end

def test_costpercapita_av117
  r = spreadsheet.costpercapita_av117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw117
  r = spreadsheet.costpercapita_aw117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay117
  r = spreadsheet.costpercapita_ay117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.167003987913359,r[:number])
end

def test_costpercapita_az117
  r = spreadsheet.costpercapita_az117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba117
  r = spreadsheet.costpercapita_ba117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb117
  r = spreadsheet.costpercapita_bb117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc117
  r = spreadsheet.costpercapita_bc117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd117
  r = spreadsheet.costpercapita_bd117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be117
  r = spreadsheet.costpercapita_be117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf117
  r = spreadsheet.costpercapita_bf117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg117
  r = spreadsheet.costpercapita_bg117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi117
  r = spreadsheet.costpercapita_bi117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.167003987913359,r[:number])
end

def test_costpercapita_bj117
  r = spreadsheet.costpercapita_bj117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.96364660434045,r[:number])
end

def test_costpercapita_bk117
  r = spreadsheet.costpercapita_bk117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.768407844593522,r[:number])
end

def test_costpercapita_bl117
  r = spreadsheet.costpercapita_bl117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm117
  r = spreadsheet.costpercapita_bm117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn117
  r = spreadsheet.costpercapita_bn117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo117
  r = spreadsheet.costpercapita_bo117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp117
  r = spreadsheet.costpercapita_bp117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq117
  r = spreadsheet.costpercapita_bq117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs117
  r = spreadsheet.costpercapita_bs117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.00127565691335,r[:number])
end

def test_costpercapita_bt117
  r = spreadsheet.costpercapita_bt117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.638507830276804,r[:number])
end

def test_costpercapita_bu117
  r = spreadsheet.costpercapita_bu117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.290222760395315,r[:number])
end

def test_costpercapita_bv117
  r = spreadsheet.costpercapita_bv117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.381803813824149,r[:number])
end

def test_costpercapita_bw117
  r = spreadsheet.costpercapita_bw117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.262092262792108,r[:number])
end

def test_costpercapita_bx117
  r = spreadsheet.costpercapita_bx117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1616957139099835,r[:number])
end

def test_costpercapita_by117
  r = spreadsheet.costpercapita_by117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.072941783620554,r[:number])
end

def test_costpercapita_bz117
  r = spreadsheet.costpercapita_bz117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9916950449024555,r[:number])
end

def test_costpercapita_ca117
  r = spreadsheet.costpercapita_ca117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9172030888656986,r[:number])
end

def test_costpercapita_cc117
  r = spreadsheet.costpercapita_cc117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.301937550611158,r[:number])
end

def test_costpercapita_cd117
  r = spreadsheet.costpercapita_cd117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.43653753548483,r[:number])
end

def test_costpercapita_cf117
  r = spreadsheet.costpercapita_cf117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-9.468570228016564,r[:number])
end

def test_costpercapita_cg117
  r = spreadsheet.costpercapita_cg117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.96364660434045,r[:number])
end

def test_costpercapita_ch117
  r = spreadsheet.costpercapita_ch117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.768407844593522,r[:number])
end

def test_costpercapita_ci117
  r = spreadsheet.costpercapita_ci117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj117
  r = spreadsheet.costpercapita_cj117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck117
  r = spreadsheet.costpercapita_ck117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl117
  r = spreadsheet.costpercapita_cl117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm117
  r = spreadsheet.costpercapita_cm117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn117
  r = spreadsheet.costpercapita_cn117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp117
  r = spreadsheet.costpercapita_cp117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.251498246768601,r[:number])
end

def test_costpercapita_cq117
  r = spreadsheet.costpercapita_cq117
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.084246090308426,r[:number])
end

def test_costpercapita_cr117
  r = spreadsheet.costpercapita_cr117
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a118
  r = spreadsheet.costpercapita_a118
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b118
  r = spreadsheet.costpercapita_b118
  assert_equal(:ExcelString,r[:type])
  assert_equal("Wave and Tidal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c118
  r = spreadsheet.costpercapita_c118
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e118
  r = spreadsheet.costpercapita_e118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04756454978364245,r[:number])
end

def test_costpercapita_f118
  r = spreadsheet.costpercapita_f118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11326081008626043,r[:number])
end

def test_costpercapita_g118
  r = spreadsheet.costpercapita_g118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6860747610515785,r[:number])
end

def test_costpercapita_h118
  r = spreadsheet.costpercapita_h118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.648844560749503,r[:number])
end

def test_costpercapita_i118
  r = spreadsheet.costpercapita_i118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j118
  r = spreadsheet.costpercapita_j118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k118
  r = spreadsheet.costpercapita_k118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12272200906258705,r[:number])
end

def test_costpercapita_l118
  r = spreadsheet.costpercapita_l118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6086799192154135,r[:number])
end

def test_costpercapita_m118
  r = spreadsheet.costpercapita_m118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.946647901243181,r[:number])
end

def test_costpercapita_o118
  r = spreadsheet.costpercapita_o118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.002522619872453894,r[:number])
end

def test_costpercapita_p118
  r = spreadsheet.costpercapita_p118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018351759783155848,r[:number])
end

def test_costpercapita_q118
  r = spreadsheet.costpercapita_q118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4623195862632992,r[:number])
end

def test_costpercapita_r118
  r = spreadsheet.costpercapita_r118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1200114135669559,r[:number])
end

def test_costpercapita_s118
  r = spreadsheet.costpercapita_s118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0894125302785975,r[:number])
end

def test_costpercapita_t118
  r = spreadsheet.costpercapita_t118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u118
  r = spreadsheet.costpercapita_u118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v118
  r = spreadsheet.costpercapita_v118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w118
  r = spreadsheet.costpercapita_w118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y118
  r = spreadsheet.costpercapita_y118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z118
  r = spreadsheet.costpercapita_z118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa118
  r = spreadsheet.costpercapita_aa118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab118
  r = spreadsheet.costpercapita_ab118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac118
  r = spreadsheet.costpercapita_ac118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad118
  r = spreadsheet.costpercapita_ad118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae118
  r = spreadsheet.costpercapita_ae118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af118
  r = spreadsheet.costpercapita_af118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag118
  r = spreadsheet.costpercapita_ag118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai118
  r = spreadsheet.costpercapita_ai118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.050087169656096345,r[:number])
end

def test_costpercapita_aj118
  r = spreadsheet.costpercapita_aj118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13161256986941627,r[:number])
end

def test_costpercapita_ak118
  r = spreadsheet.costpercapita_ak118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.148394347314878,r[:number])
end

def test_costpercapita_al118
  r = spreadsheet.costpercapita_al118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.768855974316459,r[:number])
end

def test_costpercapita_am118
  r = spreadsheet.costpercapita_am118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0894125302785975,r[:number])
end

def test_costpercapita_an118
  r = spreadsheet.costpercapita_an118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao118
  r = spreadsheet.costpercapita_ao118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12272200906258705,r[:number])
end

def test_costpercapita_ap118
  r = spreadsheet.costpercapita_ap118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6086799192154135,r[:number])
end

def test_costpercapita_aq118
  r = spreadsheet.costpercapita_aq118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.946647901243181,r[:number])
end

def test_costpercapita_as118
  r = spreadsheet.costpercapita_as118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4296013801062921,r[:number])
end

def test_costpercapita_at118
  r = spreadsheet.costpercapita_at118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.126783588417258,r[:number])
end

def test_costpercapita_av118
  r = spreadsheet.costpercapita_av118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw118
  r = spreadsheet.costpercapita_aw118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay118
  r = spreadsheet.costpercapita_ay118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018760473018008744,r[:number])
end

def test_costpercapita_az118
  r = spreadsheet.costpercapita_az118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07445413237682019,r[:number])
end

def test_costpercapita_ba118
  r = spreadsheet.costpercapita_ba118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.108373084749623,r[:number])
end

def test_costpercapita_bb118
  r = spreadsheet.costpercapita_bb118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7412679939465472,r[:number])
end

def test_costpercapita_bc118
  r = spreadsheet.costpercapita_bc118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd118
  r = spreadsheet.costpercapita_bd118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be118
  r = spreadsheet.costpercapita_be118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08067363019332317,r[:number])
end

def test_costpercapita_bf118
  r = spreadsheet.costpercapita_bf118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0574961239106158,r[:number])
end

def test_costpercapita_bg118
  r = spreadsheet.costpercapita_bg118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.594403528105308,r[:number])
end

def test_costpercapita_bi118
  r = spreadsheet.costpercapita_bi118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.018760473018008744,r[:number])
end

def test_costpercapita_bj118
  r = spreadsheet.costpercapita_bj118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09259597749787775,r[:number])
end

def test_costpercapita_bk118
  r = spreadsheet.costpercapita_bk118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1979376412053684,r[:number])
end

def test_costpercapita_bl118
  r = spreadsheet.costpercapita_bl118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8851087529908637,r[:number])
end

def test_costpercapita_bm118
  r = spreadsheet.costpercapita_bm118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7384069687062764,r[:number])
end

def test_costpercapita_bn118
  r = spreadsheet.costpercapita_bn118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6538000912577606,r[:number])
end

def test_costpercapita_bo118
  r = spreadsheet.costpercapita_bo118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08067363019332317,r[:number])
end

def test_costpercapita_bp118
  r = spreadsheet.costpercapita_bp118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1365604825498705,r[:number])
end

def test_costpercapita_bq118
  r = spreadsheet.costpercapita_bq118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7097538198598325,r[:number])
end

def test_costpercapita_bs118
  r = spreadsheet.costpercapita_bs118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.021283092890462634,r[:number])
end

def test_costpercapita_bt118
  r = spreadsheet.costpercapita_bt118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1109477372810336,r[:number])
end

def test_costpercapita_bu118
  r = spreadsheet.costpercapita_bu118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6602572274686676,r[:number])
end

def test_costpercapita_bv118
  r = spreadsheet.costpercapita_bv118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.00512016655782,r[:number])
end

def test_costpercapita_bw118
  r = spreadsheet.costpercapita_bw118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.827819498984874,r[:number])
end

def test_costpercapita_bx118
  r = spreadsheet.costpercapita_bx118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6538000912577606,r[:number])
end

def test_costpercapita_by118
  r = spreadsheet.costpercapita_by118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08067363019332317,r[:number])
end

def test_costpercapita_bz118
  r = spreadsheet.costpercapita_bz118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1365604825498705,r[:number])
end

def test_costpercapita_ca118
  r = spreadsheet.costpercapita_ca118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7097538198598325,r[:number])
end

def test_costpercapita_cc118
  r = spreadsheet.costpercapita_cc118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.800690638560405,r[:number])
end

def test_costpercapita_cd118
  r = spreadsheet.costpercapita_cd118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.25161414433201,r[:number])
end

def test_costpercapita_cf118
  r = spreadsheet.costpercapita_cf118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.028804076765633707,r[:number])
end

def test_costpercapita_cg118
  r = spreadsheet.costpercapita_cg118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.020664832588382687,r[:number])
end

def test_costpercapita_ch118
  r = spreadsheet.costpercapita_ch118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.48813711984621017,r[:number])
end

def test_costpercapita_ci118
  r = spreadsheet.costpercapita_ci118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.23626419224136105,r[:number])
end

def test_costpercapita_cj118
  r = spreadsheet.costpercapita_cj118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7384069687062764,r[:number])
end

def test_costpercapita_ck118
  r = spreadsheet.costpercapita_ck118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6538000912577606,r[:number])
end

def test_costpercapita_cl118
  r = spreadsheet.costpercapita_cl118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.04204837886926388,r[:number])
end

def test_costpercapita_cm118
  r = spreadsheet.costpercapita_cm118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.4721194366655432,r[:number])
end

def test_costpercapita_cn118
  r = spreadsheet.costpercapita_cn118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.2368940813833485,r[:number])
end

def test_costpercapita_cp118
  r = spreadsheet.costpercapita_cp118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.3710892584541129,r[:number])
end

def test_costpercapita_cq118
  r = spreadsheet.costpercapita_cq118
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.12483055591474,r[:number])
end

def test_costpercapita_cr118
  r = spreadsheet.costpercapita_cr118
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a119
  r = spreadsheet.costpercapita_a119
  assert_equal(:ExcelString,r[:type])
  assert_equal("III.d",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b119
  r = spreadsheet.costpercapita_b119
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geothermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c119
  r = spreadsheet.costpercapita_c119
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e119
  r = spreadsheet.costpercapita_e119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f119
  r = spreadsheet.costpercapita_f119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g119
  r = spreadsheet.costpercapita_g119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h119
  r = spreadsheet.costpercapita_h119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i119
  r = spreadsheet.costpercapita_i119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j119
  r = spreadsheet.costpercapita_j119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k119
  r = spreadsheet.costpercapita_k119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l119
  r = spreadsheet.costpercapita_l119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m119
  r = spreadsheet.costpercapita_m119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o119
  r = spreadsheet.costpercapita_o119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p119
  r = spreadsheet.costpercapita_p119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q119
  r = spreadsheet.costpercapita_q119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r119
  r = spreadsheet.costpercapita_r119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s119
  r = spreadsheet.costpercapita_s119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t119
  r = spreadsheet.costpercapita_t119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u119
  r = spreadsheet.costpercapita_u119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v119
  r = spreadsheet.costpercapita_v119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w119
  r = spreadsheet.costpercapita_w119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y119
  r = spreadsheet.costpercapita_y119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z119
  r = spreadsheet.costpercapita_z119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa119
  r = spreadsheet.costpercapita_aa119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab119
  r = spreadsheet.costpercapita_ab119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac119
  r = spreadsheet.costpercapita_ac119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad119
  r = spreadsheet.costpercapita_ad119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae119
  r = spreadsheet.costpercapita_ae119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af119
  r = spreadsheet.costpercapita_af119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag119
  r = spreadsheet.costpercapita_ag119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai119
  r = spreadsheet.costpercapita_ai119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj119
  r = spreadsheet.costpercapita_aj119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak119
  r = spreadsheet.costpercapita_ak119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al119
  r = spreadsheet.costpercapita_al119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am119
  r = spreadsheet.costpercapita_am119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an119
  r = spreadsheet.costpercapita_an119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao119
  r = spreadsheet.costpercapita_ao119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap119
  r = spreadsheet.costpercapita_ap119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq119
  r = spreadsheet.costpercapita_aq119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as119
  r = spreadsheet.costpercapita_as119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at119
  r = spreadsheet.costpercapita_at119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av119
  r = spreadsheet.costpercapita_av119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw119
  r = spreadsheet.costpercapita_aw119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay119
  r = spreadsheet.costpercapita_ay119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az119
  r = spreadsheet.costpercapita_az119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba119
  r = spreadsheet.costpercapita_ba119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb119
  r = spreadsheet.costpercapita_bb119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc119
  r = spreadsheet.costpercapita_bc119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd119
  r = spreadsheet.costpercapita_bd119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be119
  r = spreadsheet.costpercapita_be119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf119
  r = spreadsheet.costpercapita_bf119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg119
  r = spreadsheet.costpercapita_bg119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi119
  r = spreadsheet.costpercapita_bi119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj119
  r = spreadsheet.costpercapita_bj119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk119
  r = spreadsheet.costpercapita_bk119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl119
  r = spreadsheet.costpercapita_bl119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm119
  r = spreadsheet.costpercapita_bm119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn119
  r = spreadsheet.costpercapita_bn119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo119
  r = spreadsheet.costpercapita_bo119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp119
  r = spreadsheet.costpercapita_bp119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq119
  r = spreadsheet.costpercapita_bq119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs119
  r = spreadsheet.costpercapita_bs119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt119
  r = spreadsheet.costpercapita_bt119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu119
  r = spreadsheet.costpercapita_bu119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv119
  r = spreadsheet.costpercapita_bv119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw119
  r = spreadsheet.costpercapita_bw119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx119
  r = spreadsheet.costpercapita_bx119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by119
  r = spreadsheet.costpercapita_by119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz119
  r = spreadsheet.costpercapita_bz119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca119
  r = spreadsheet.costpercapita_ca119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc119
  r = spreadsheet.costpercapita_cc119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd119
  r = spreadsheet.costpercapita_cd119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf119
  r = spreadsheet.costpercapita_cf119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg119
  r = spreadsheet.costpercapita_cg119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch119
  r = spreadsheet.costpercapita_ch119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci119
  r = spreadsheet.costpercapita_ci119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj119
  r = spreadsheet.costpercapita_cj119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck119
  r = spreadsheet.costpercapita_ck119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl119
  r = spreadsheet.costpercapita_cl119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm119
  r = spreadsheet.costpercapita_cm119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn119
  r = spreadsheet.costpercapita_cn119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp119
  r = spreadsheet.costpercapita_cp119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq119
  r = spreadsheet.costpercapita_cq119
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr119
  r = spreadsheet.costpercapita_cr119
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a120
  r = spreadsheet.costpercapita_a120
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b120
  r = spreadsheet.costpercapita_b120
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar PV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c120
  r = spreadsheet.costpercapita_c120
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e120
  r = spreadsheet.costpercapita_e120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.35378468641484867,r[:number])
end

def test_costpercapita_f120
  r = spreadsheet.costpercapita_f120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g120
  r = spreadsheet.costpercapita_g120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h120
  r = spreadsheet.costpercapita_h120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i120
  r = spreadsheet.costpercapita_i120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j120
  r = spreadsheet.costpercapita_j120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k120
  r = spreadsheet.costpercapita_k120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l120
  r = spreadsheet.costpercapita_l120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m120
  r = spreadsheet.costpercapita_m120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o120
  r = spreadsheet.costpercapita_o120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03765524774091415,r[:number])
end

def test_costpercapita_p120
  r = spreadsheet.costpercapita_p120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.017655061012844742,r[:number])
end

def test_costpercapita_q120
  r = spreadsheet.costpercapita_q120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r120
  r = spreadsheet.costpercapita_r120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s120
  r = spreadsheet.costpercapita_s120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t120
  r = spreadsheet.costpercapita_t120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u120
  r = spreadsheet.costpercapita_u120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v120
  r = spreadsheet.costpercapita_v120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w120
  r = spreadsheet.costpercapita_w120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y120
  r = spreadsheet.costpercapita_y120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z120
  r = spreadsheet.costpercapita_z120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa120
  r = spreadsheet.costpercapita_aa120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab120
  r = spreadsheet.costpercapita_ab120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac120
  r = spreadsheet.costpercapita_ac120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad120
  r = spreadsheet.costpercapita_ad120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae120
  r = spreadsheet.costpercapita_ae120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af120
  r = spreadsheet.costpercapita_af120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag120
  r = spreadsheet.costpercapita_ag120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai120
  r = spreadsheet.costpercapita_ai120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.39143993415576284,r[:number])
end

def test_costpercapita_aj120
  r = spreadsheet.costpercapita_aj120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.017655061012844742,r[:number])
end

def test_costpercapita_ak120
  r = spreadsheet.costpercapita_ak120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al120
  r = spreadsheet.costpercapita_al120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am120
  r = spreadsheet.costpercapita_am120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an120
  r = spreadsheet.costpercapita_an120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao120
  r = spreadsheet.costpercapita_ao120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap120
  r = spreadsheet.costpercapita_ap120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq120
  r = spreadsheet.costpercapita_aq120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as120
  r = spreadsheet.costpercapita_as120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04545499946317862,r[:number])
end

def test_costpercapita_at120
  r = spreadsheet.costpercapita_at120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4657653723160896,r[:number])
end

def test_costpercapita_av120
  r = spreadsheet.costpercapita_av120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw120
  r = spreadsheet.costpercapita_aw120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay120
  r = spreadsheet.costpercapita_ay120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13954022678362424,r[:number])
end

def test_costpercapita_az120
  r = spreadsheet.costpercapita_az120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba120
  r = spreadsheet.costpercapita_ba120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb120
  r = spreadsheet.costpercapita_bb120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc120
  r = spreadsheet.costpercapita_bc120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd120
  r = spreadsheet.costpercapita_bd120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be120
  r = spreadsheet.costpercapita_be120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf120
  r = spreadsheet.costpercapita_bf120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg120
  r = spreadsheet.costpercapita_bg120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi120
  r = spreadsheet.costpercapita_bi120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13954022678362424,r[:number])
end

def test_costpercapita_bj120
  r = spreadsheet.costpercapita_bj120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1349388781421278,r[:number])
end

def test_costpercapita_bk120
  r = spreadsheet.costpercapita_bk120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13052122884833223,r[:number])
end

def test_costpercapita_bl120
  r = spreadsheet.costpercapita_bl120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm120
  r = spreadsheet.costpercapita_bm120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn120
  r = spreadsheet.costpercapita_bn120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo120
  r = spreadsheet.costpercapita_bo120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp120
  r = spreadsheet.costpercapita_bp120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq120
  r = spreadsheet.costpercapita_bq120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs120
  r = spreadsheet.costpercapita_bs120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.17719547452453838,r[:number])
end

def test_costpercapita_bt120
  r = spreadsheet.costpercapita_bt120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.15259393915497255,r[:number])
end

def test_costpercapita_bu120
  r = spreadsheet.costpercapita_bu120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13052122884833223,r[:number])
end

def test_costpercapita_bv120
  r = spreadsheet.costpercapita_bv120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw120
  r = spreadsheet.costpercapita_bw120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx120
  r = spreadsheet.costpercapita_bx120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by120
  r = spreadsheet.costpercapita_by120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz120
  r = spreadsheet.costpercapita_bz120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca120
  r = spreadsheet.costpercapita_ca120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc120
  r = spreadsheet.costpercapita_cc120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05114562694753813,r[:number])
end

def test_costpercapita_cd120
  r = spreadsheet.costpercapita_cd120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2822402590886912,r[:number])
end

def test_costpercapita_cf120
  r = spreadsheet.costpercapita_cf120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.21424445963122443,r[:number])
end

def test_costpercapita_cg120
  r = spreadsheet.costpercapita_cg120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1349388781421278,r[:number])
end

def test_costpercapita_ch120
  r = spreadsheet.costpercapita_ch120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13052122884833223,r[:number])
end

def test_costpercapita_ci120
  r = spreadsheet.costpercapita_ci120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj120
  r = spreadsheet.costpercapita_cj120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck120
  r = spreadsheet.costpercapita_ck120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl120
  r = spreadsheet.costpercapita_cl120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm120
  r = spreadsheet.costpercapita_cm120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn120
  r = spreadsheet.costpercapita_cn120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp120
  r = spreadsheet.costpercapita_cp120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.00569062748435951,r[:number])
end

def test_costpercapita_cq120
  r = spreadsheet.costpercapita_cq120
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8164748867726016,r[:number])
end

def test_costpercapita_cr120
  r = spreadsheet.costpercapita_cr120
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a121
  r = spreadsheet.costpercapita_a121
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b121
  r = spreadsheet.costpercapita_b121
  assert_equal(:ExcelString,r[:type])
  assert_equal("Distributed solar thermal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c121
  r = spreadsheet.costpercapita_c121
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e121
  r = spreadsheet.costpercapita_e121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f121
  r = spreadsheet.costpercapita_f121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g121
  r = spreadsheet.costpercapita_g121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h121
  r = spreadsheet.costpercapita_h121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i121
  r = spreadsheet.costpercapita_i121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j121
  r = spreadsheet.costpercapita_j121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k121
  r = spreadsheet.costpercapita_k121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l121
  r = spreadsheet.costpercapita_l121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m121
  r = spreadsheet.costpercapita_m121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o121
  r = spreadsheet.costpercapita_o121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p121
  r = spreadsheet.costpercapita_p121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q121
  r = spreadsheet.costpercapita_q121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r121
  r = spreadsheet.costpercapita_r121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s121
  r = spreadsheet.costpercapita_s121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t121
  r = spreadsheet.costpercapita_t121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u121
  r = spreadsheet.costpercapita_u121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v121
  r = spreadsheet.costpercapita_v121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w121
  r = spreadsheet.costpercapita_w121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y121
  r = spreadsheet.costpercapita_y121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z121
  r = spreadsheet.costpercapita_z121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa121
  r = spreadsheet.costpercapita_aa121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab121
  r = spreadsheet.costpercapita_ab121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac121
  r = spreadsheet.costpercapita_ac121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad121
  r = spreadsheet.costpercapita_ad121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae121
  r = spreadsheet.costpercapita_ae121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af121
  r = spreadsheet.costpercapita_af121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag121
  r = spreadsheet.costpercapita_ag121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai121
  r = spreadsheet.costpercapita_ai121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj121
  r = spreadsheet.costpercapita_aj121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak121
  r = spreadsheet.costpercapita_ak121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al121
  r = spreadsheet.costpercapita_al121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am121
  r = spreadsheet.costpercapita_am121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an121
  r = spreadsheet.costpercapita_an121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao121
  r = spreadsheet.costpercapita_ao121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap121
  r = spreadsheet.costpercapita_ap121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq121
  r = spreadsheet.costpercapita_aq121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as121
  r = spreadsheet.costpercapita_as121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at121
  r = spreadsheet.costpercapita_at121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av121
  r = spreadsheet.costpercapita_av121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw121
  r = spreadsheet.costpercapita_aw121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay121
  r = spreadsheet.costpercapita_ay121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az121
  r = spreadsheet.costpercapita_az121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba121
  r = spreadsheet.costpercapita_ba121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb121
  r = spreadsheet.costpercapita_bb121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc121
  r = spreadsheet.costpercapita_bc121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd121
  r = spreadsheet.costpercapita_bd121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be121
  r = spreadsheet.costpercapita_be121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf121
  r = spreadsheet.costpercapita_bf121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg121
  r = spreadsheet.costpercapita_bg121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi121
  r = spreadsheet.costpercapita_bi121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj121
  r = spreadsheet.costpercapita_bj121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk121
  r = spreadsheet.costpercapita_bk121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl121
  r = spreadsheet.costpercapita_bl121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm121
  r = spreadsheet.costpercapita_bm121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn121
  r = spreadsheet.costpercapita_bn121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo121
  r = spreadsheet.costpercapita_bo121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp121
  r = spreadsheet.costpercapita_bp121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq121
  r = spreadsheet.costpercapita_bq121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs121
  r = spreadsheet.costpercapita_bs121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt121
  r = spreadsheet.costpercapita_bt121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu121
  r = spreadsheet.costpercapita_bu121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv121
  r = spreadsheet.costpercapita_bv121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw121
  r = spreadsheet.costpercapita_bw121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx121
  r = spreadsheet.costpercapita_bx121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by121
  r = spreadsheet.costpercapita_by121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz121
  r = spreadsheet.costpercapita_bz121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca121
  r = spreadsheet.costpercapita_ca121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc121
  r = spreadsheet.costpercapita_cc121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd121
  r = spreadsheet.costpercapita_cd121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf121
  r = spreadsheet.costpercapita_cf121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg121
  r = spreadsheet.costpercapita_cg121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch121
  r = spreadsheet.costpercapita_ch121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci121
  r = spreadsheet.costpercapita_ci121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj121
  r = spreadsheet.costpercapita_cj121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck121
  r = spreadsheet.costpercapita_ck121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl121
  r = spreadsheet.costpercapita_cl121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm121
  r = spreadsheet.costpercapita_cm121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn121
  r = spreadsheet.costpercapita_cn121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp121
  r = spreadsheet.costpercapita_cp121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq121
  r = spreadsheet.costpercapita_cq121
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr121
  r = spreadsheet.costpercapita_cr121
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a122
  r = spreadsheet.costpercapita_a122
  assert_equal(:ExcelString,r[:type])
  assert_equal("IV.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b122
  r = spreadsheet.costpercapita_b122
  assert_equal(:ExcelString,r[:type])
  assert_equal("Micro wind",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c122
  r = spreadsheet.costpercapita_c122
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e122
  r = spreadsheet.costpercapita_e122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f122
  r = spreadsheet.costpercapita_f122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g122
  r = spreadsheet.costpercapita_g122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h122
  r = spreadsheet.costpercapita_h122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i122
  r = spreadsheet.costpercapita_i122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j122
  r = spreadsheet.costpercapita_j122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k122
  r = spreadsheet.costpercapita_k122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l122
  r = spreadsheet.costpercapita_l122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m122
  r = spreadsheet.costpercapita_m122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o122
  r = spreadsheet.costpercapita_o122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p122
  r = spreadsheet.costpercapita_p122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q122
  r = spreadsheet.costpercapita_q122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r122
  r = spreadsheet.costpercapita_r122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s122
  r = spreadsheet.costpercapita_s122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t122
  r = spreadsheet.costpercapita_t122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u122
  r = spreadsheet.costpercapita_u122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v122
  r = spreadsheet.costpercapita_v122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w122
  r = spreadsheet.costpercapita_w122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y122
  r = spreadsheet.costpercapita_y122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z122
  r = spreadsheet.costpercapita_z122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa122
  r = spreadsheet.costpercapita_aa122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab122
  r = spreadsheet.costpercapita_ab122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac122
  r = spreadsheet.costpercapita_ac122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad122
  r = spreadsheet.costpercapita_ad122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae122
  r = spreadsheet.costpercapita_ae122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af122
  r = spreadsheet.costpercapita_af122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag122
  r = spreadsheet.costpercapita_ag122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai122
  r = spreadsheet.costpercapita_ai122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj122
  r = spreadsheet.costpercapita_aj122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak122
  r = spreadsheet.costpercapita_ak122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al122
  r = spreadsheet.costpercapita_al122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am122
  r = spreadsheet.costpercapita_am122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an122
  r = spreadsheet.costpercapita_an122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao122
  r = spreadsheet.costpercapita_ao122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap122
  r = spreadsheet.costpercapita_ap122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq122
  r = spreadsheet.costpercapita_aq122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as122
  r = spreadsheet.costpercapita_as122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at122
  r = spreadsheet.costpercapita_at122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av122
  r = spreadsheet.costpercapita_av122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw122
  r = spreadsheet.costpercapita_aw122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay122
  r = spreadsheet.costpercapita_ay122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az122
  r = spreadsheet.costpercapita_az122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba122
  r = spreadsheet.costpercapita_ba122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb122
  r = spreadsheet.costpercapita_bb122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc122
  r = spreadsheet.costpercapita_bc122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd122
  r = spreadsheet.costpercapita_bd122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be122
  r = spreadsheet.costpercapita_be122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf122
  r = spreadsheet.costpercapita_bf122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg122
  r = spreadsheet.costpercapita_bg122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi122
  r = spreadsheet.costpercapita_bi122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj122
  r = spreadsheet.costpercapita_bj122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk122
  r = spreadsheet.costpercapita_bk122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl122
  r = spreadsheet.costpercapita_bl122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm122
  r = spreadsheet.costpercapita_bm122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn122
  r = spreadsheet.costpercapita_bn122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo122
  r = spreadsheet.costpercapita_bo122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp122
  r = spreadsheet.costpercapita_bp122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq122
  r = spreadsheet.costpercapita_bq122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs122
  r = spreadsheet.costpercapita_bs122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt122
  r = spreadsheet.costpercapita_bt122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu122
  r = spreadsheet.costpercapita_bu122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv122
  r = spreadsheet.costpercapita_bv122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw122
  r = spreadsheet.costpercapita_bw122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx122
  r = spreadsheet.costpercapita_bx122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by122
  r = spreadsheet.costpercapita_by122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz122
  r = spreadsheet.costpercapita_bz122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca122
  r = spreadsheet.costpercapita_ca122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc122
  r = spreadsheet.costpercapita_cc122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd122
  r = spreadsheet.costpercapita_cd122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf122
  r = spreadsheet.costpercapita_cf122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg122
  r = spreadsheet.costpercapita_cg122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch122
  r = spreadsheet.costpercapita_ch122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci122
  r = spreadsheet.costpercapita_ci122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj122
  r = spreadsheet.costpercapita_cj122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck122
  r = spreadsheet.costpercapita_ck122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl122
  r = spreadsheet.costpercapita_cl122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm122
  r = spreadsheet.costpercapita_cm122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn122
  r = spreadsheet.costpercapita_cn122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp122
  r = spreadsheet.costpercapita_cp122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq122
  r = spreadsheet.costpercapita_cq122
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr122
  r = spreadsheet.costpercapita_cr122
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a123
  r = spreadsheet.costpercapita_a123
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b123
  r = spreadsheet.costpercapita_b123
  assert_equal(:ExcelString,r[:type])
  assert_equal("Biomatter to fuel conversion",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c123
  r = spreadsheet.costpercapita_c123
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e123
  r = spreadsheet.costpercapita_e123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.742414649700546,r[:number])
end

def test_costpercapita_f123
  r = spreadsheet.costpercapita_f123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27214357477898,r[:number])
end

def test_costpercapita_g123
  r = spreadsheet.costpercapita_g123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.28491175337266,r[:number])
end

def test_costpercapita_h123
  r = spreadsheet.costpercapita_h123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.719487774301303,r[:number])
end

def test_costpercapita_i123
  r = spreadsheet.costpercapita_i123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.466704114490664,r[:number])
end

def test_costpercapita_j123
  r = spreadsheet.costpercapita_j123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.122047116033517,r[:number])
end

def test_costpercapita_k123
  r = spreadsheet.costpercapita_k123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.869954641922703,r[:number])
end

def test_costpercapita_l123
  r = spreadsheet.costpercapita_l123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.685269266443395,r[:number])
end

def test_costpercapita_m123
  r = spreadsheet.costpercapita_m123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.17776333193729,r[:number])
end

def test_costpercapita_o123
  r = spreadsheet.costpercapita_o123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.271723091417357,r[:number])
end

def test_costpercapita_p123
  r = spreadsheet.costpercapita_p123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.882567853824643,r[:number])
end

def test_costpercapita_q123
  r = spreadsheet.costpercapita_q123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.35035123664051,r[:number])
end

def test_costpercapita_r123
  r = spreadsheet.costpercapita_r123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.153226100028284,r[:number])
end

def test_costpercapita_s123
  r = spreadsheet.costpercapita_s123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.01484825400791,r[:number])
end

def test_costpercapita_t123
  r = spreadsheet.costpercapita_t123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.51375567098355,r[:number])
end

def test_costpercapita_u123
  r = spreadsheet.costpercapita_u123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.16834030270299,r[:number])
end

def test_costpercapita_v123
  r = spreadsheet.costpercapita_v123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.94903472381107,r[:number])
end

def test_costpercapita_w123
  r = spreadsheet.costpercapita_w123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.85735724528242,r[:number])
end

def test_costpercapita_y123
  r = spreadsheet.costpercapita_y123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z123
  r = spreadsheet.costpercapita_z123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa123
  r = spreadsheet.costpercapita_aa123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab123
  r = spreadsheet.costpercapita_ab123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac123
  r = spreadsheet.costpercapita_ac123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad123
  r = spreadsheet.costpercapita_ad123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae123
  r = spreadsheet.costpercapita_ae123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af123
  r = spreadsheet.costpercapita_af123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag123
  r = spreadsheet.costpercapita_ag123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai123
  r = spreadsheet.costpercapita_ai123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.0141377411179,r[:number])
end

def test_costpercapita_aj123
  r = spreadsheet.costpercapita_aj123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.15471142860362,r[:number])
end

def test_costpercapita_ak123
  r = spreadsheet.costpercapita_ak123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.63526299001317,r[:number])
end

def test_costpercapita_al123
  r = spreadsheet.costpercapita_al123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.87271387432959,r[:number])
end

def test_costpercapita_am123
  r = spreadsheet.costpercapita_am123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.48155236849857,r[:number])
end

def test_costpercapita_an123
  r = spreadsheet.costpercapita_an123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.63580278701706,r[:number])
end

def test_costpercapita_ao123
  r = spreadsheet.costpercapita_ao123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.03829494462569,r[:number])
end

def test_costpercapita_ap123
  r = spreadsheet.costpercapita_ap123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.63430399025447,r[:number])
end

def test_costpercapita_aq123
  r = spreadsheet.costpercapita_aq123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.03512057721971,r[:number])
end

def test_costpercapita_as123
  r = spreadsheet.costpercapita_as123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.2779889668533,r[:number])
end

def test_costpercapita_at123
  r = spreadsheet.costpercapita_at123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1433.5564402264479,r[:number])
end

def test_costpercapita_av123
  r = spreadsheet.costpercapita_av123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw123
  r = spreadsheet.costpercapita_aw123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay123
  r = spreadsheet.costpercapita_ay123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.181250787280268,r[:number])
end

def test_costpercapita_az123
  r = spreadsheet.costpercapita_az123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.36208070887588,r[:number])
end

def test_costpercapita_ba123
  r = spreadsheet.costpercapita_ba123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.565727539020223,r[:number])
end

def test_costpercapita_bb123
  r = spreadsheet.costpercapita_bb123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.935084333169346,r[:number])
end

def test_costpercapita_bc123
  r = spreadsheet.costpercapita_bc123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.768912220715759,r[:number])
end

def test_costpercapita_bd123
  r = spreadsheet.costpercapita_bd123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.199714318563489,r[:number])
end

def test_costpercapita_be123
  r = spreadsheet.costpercapita_be123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.691365454519193,r[:number])
end

def test_costpercapita_bf123
  r = spreadsheet.costpercapita_bf123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.227327919705424,r[:number])
end

def test_costpercapita_bg123
  r = spreadsheet.costpercapita_bg123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.606864887509753,r[:number])
end

def test_costpercapita_bi123
  r = spreadsheet.costpercapita_bi123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.181250787280268,r[:number])
end

def test_costpercapita_bj123
  r = spreadsheet.costpercapita_bj123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.27355418488542,r[:number])
end

def test_costpercapita_bk123
  r = spreadsheet.costpercapita_bk123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.455323747062316,r[:number])
end

def test_costpercapita_bl123
  r = spreadsheet.costpercapita_bl123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.07201820017701,r[:number])
end

def test_costpercapita_bm123
  r = spreadsheet.costpercapita_bm123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.68044719364341,r[:number])
end

def test_costpercapita_bn123
  r = spreadsheet.costpercapita_bn123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.805595176688506,r[:number])
end

def test_costpercapita_bo123
  r = spreadsheet.costpercapita_bo123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.680396763999624,r[:number])
end

def test_costpercapita_bp123
  r = spreadsheet.costpercapita_bp123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.184505979739654,r[:number])
end

def test_costpercapita_bq123
  r = spreadsheet.costpercapita_bq123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.62273118343956,r[:number])
end

def test_costpercapita_bs123
  r = spreadsheet.costpercapita_bs123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.452973878697623,r[:number])
end

def test_costpercapita_bt123
  r = spreadsheet.costpercapita_bt123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.15612203871005,r[:number])
end

def test_costpercapita_bu123
  r = spreadsheet.costpercapita_bu123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.80567498370281,r[:number])
end

def test_costpercapita_bv123
  r = spreadsheet.costpercapita_bv123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.2252443002053,r[:number])
end

def test_costpercapita_bw123
  r = spreadsheet.costpercapita_bw123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.69529544765132,r[:number])
end

def test_costpercapita_bx123
  r = spreadsheet.costpercapita_bx123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.31935084767206,r[:number])
end

def test_costpercapita_by123
  r = spreadsheet.costpercapita_by123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.84873706670261,r[:number])
end

def test_costpercapita_bz123
  r = spreadsheet.costpercapita_bz123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.13354070355072,r[:number])
end

def test_costpercapita_ca123
  r = spreadsheet.costpercapita_ca123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48008842872198,r[:number])
end

def test_costpercapita_cc123
  r = spreadsheet.costpercapita_cc123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.67966974395716,r[:number])
end

def test_costpercapita_cd123
  r = spreadsheet.costpercapita_cd123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1830.3546422659067,r[:number])
end

def test_costpercapita_cf123
  r = spreadsheet.costpercapita_cf123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-12.561163862420276,r[:number])
end

def test_costpercapita_cg123
  r = spreadsheet.costpercapita_cg123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-9.998589389893564,r[:number])
end

def test_costpercapita_ch123
  r = spreadsheet.costpercapita_ch123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.170411993689655,r[:number])
end

def test_costpercapita_ci123
  r = spreadsheet.costpercapita_ci123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.35253042587571,r[:number])
end

def test_costpercapita_cj123
  r = spreadsheet.costpercapita_cj123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21374307915275,r[:number])
end

def test_costpercapita_ck123
  r = spreadsheet.costpercapita_ck123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.68354806065499,r[:number])
end

def test_costpercapita_cl123
  r = spreadsheet.costpercapita_cl123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.81044212207692,r[:number])
end

def test_costpercapita_cm123
  r = spreadsheet.costpercapita_cm123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.499236713296263,r[:number])
end

def test_costpercapita_cn123
  r = spreadsheet.costpercapita_cn123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.444967851502273,r[:number])
end

def test_costpercapita_cp123
  r = spreadsheet.costpercapita_cp123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.40168077710386,r[:number])
end

def test_costpercapita_cq123
  r = spreadsheet.costpercapita_cq123
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(396.7982020394589,r[:number])
end

def test_costpercapita_cr123
  r = spreadsheet.costpercapita_cr123
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a124
  r = spreadsheet.costpercapita_a124
  assert_equal(:ExcelString,r[:type])
  assert_equal("V.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b124
  r = spreadsheet.costpercapita_b124
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c124
  r = spreadsheet.costpercapita_c124
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e124
  r = spreadsheet.costpercapita_e124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f124
  r = spreadsheet.costpercapita_f124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g124
  r = spreadsheet.costpercapita_g124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h124
  r = spreadsheet.costpercapita_h124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i124
  r = spreadsheet.costpercapita_i124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j124
  r = spreadsheet.costpercapita_j124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k124
  r = spreadsheet.costpercapita_k124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l124
  r = spreadsheet.costpercapita_l124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m124
  r = spreadsheet.costpercapita_m124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o124
  r = spreadsheet.costpercapita_o124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p124
  r = spreadsheet.costpercapita_p124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q124
  r = spreadsheet.costpercapita_q124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r124
  r = spreadsheet.costpercapita_r124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s124
  r = spreadsheet.costpercapita_s124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t124
  r = spreadsheet.costpercapita_t124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u124
  r = spreadsheet.costpercapita_u124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v124
  r = spreadsheet.costpercapita_v124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w124
  r = spreadsheet.costpercapita_w124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y124
  r = spreadsheet.costpercapita_y124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.849332075368716,r[:number])
end

def test_costpercapita_z124
  r = spreadsheet.costpercapita_z124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.949393701972193,r[:number])
end

def test_costpercapita_aa124
  r = spreadsheet.costpercapita_aa124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1034511768581625,r[:number])
end

def test_costpercapita_ab124
  r = spreadsheet.costpercapita_ab124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3136617249569666,r[:number])
end

def test_costpercapita_ac124
  r = spreadsheet.costpercapita_ac124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5785055834571837,r[:number])
end

def test_costpercapita_ad124
  r = spreadsheet.costpercapita_ad124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8883253177050265,r[:number])
end

def test_costpercapita_ae124
  r = spreadsheet.costpercapita_ae124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2320361083973466,r[:number])
end

def test_costpercapita_af124
  r = spreadsheet.costpercapita_af124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6037297720296557,r[:number])
end

def test_costpercapita_ag124
  r = spreadsheet.costpercapita_ag124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai124
  r = spreadsheet.costpercapita_ai124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.849332075368716,r[:number])
end

def test_costpercapita_aj124
  r = spreadsheet.costpercapita_aj124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.949393701972193,r[:number])
end

def test_costpercapita_ak124
  r = spreadsheet.costpercapita_ak124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1034511768581625,r[:number])
end

def test_costpercapita_al124
  r = spreadsheet.costpercapita_al124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3136617249569666,r[:number])
end

def test_costpercapita_am124
  r = spreadsheet.costpercapita_am124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5785055834571837,r[:number])
end

def test_costpercapita_an124
  r = spreadsheet.costpercapita_an124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8883253177050265,r[:number])
end

def test_costpercapita_ao124
  r = spreadsheet.costpercapita_ao124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2320361083973466,r[:number])
end

def test_costpercapita_ap124
  r = spreadsheet.costpercapita_ap124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6037297720296557,r[:number])
end

def test_costpercapita_aq124
  r = spreadsheet.costpercapita_aq124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as124
  r = spreadsheet.costpercapita_as124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7242706067494717,r[:number])
end

def test_costpercapita_at124
  r = spreadsheet.costpercapita_at124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.71715009447226,r[:number])
end

def test_costpercapita_av124
  r = spreadsheet.costpercapita_av124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw124
  r = spreadsheet.costpercapita_aw124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay124
  r = spreadsheet.costpercapita_ay124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az124
  r = spreadsheet.costpercapita_az124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba124
  r = spreadsheet.costpercapita_ba124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb124
  r = spreadsheet.costpercapita_bb124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc124
  r = spreadsheet.costpercapita_bc124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd124
  r = spreadsheet.costpercapita_bd124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be124
  r = spreadsheet.costpercapita_be124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf124
  r = spreadsheet.costpercapita_bf124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg124
  r = spreadsheet.costpercapita_bg124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi124
  r = spreadsheet.costpercapita_bi124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj124
  r = spreadsheet.costpercapita_bj124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk124
  r = spreadsheet.costpercapita_bk124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl124
  r = spreadsheet.costpercapita_bl124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm124
  r = spreadsheet.costpercapita_bm124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn124
  r = spreadsheet.costpercapita_bn124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo124
  r = spreadsheet.costpercapita_bo124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp124
  r = spreadsheet.costpercapita_bp124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq124
  r = spreadsheet.costpercapita_bq124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs124
  r = spreadsheet.costpercapita_bs124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.849332075368716,r[:number])
end

def test_costpercapita_bt124
  r = spreadsheet.costpercapita_bt124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.949393701972193,r[:number])
end

def test_costpercapita_bu124
  r = spreadsheet.costpercapita_bu124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1034511768581625,r[:number])
end

def test_costpercapita_bv124
  r = spreadsheet.costpercapita_bv124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3136617249569666,r[:number])
end

def test_costpercapita_bw124
  r = spreadsheet.costpercapita_bw124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5785055834571837,r[:number])
end

def test_costpercapita_bx124
  r = spreadsheet.costpercapita_bx124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8883253177050265,r[:number])
end

def test_costpercapita_by124
  r = spreadsheet.costpercapita_by124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2320361083973466,r[:number])
end

def test_costpercapita_bz124
  r = spreadsheet.costpercapita_bz124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6037297720296557,r[:number])
end

def test_costpercapita_ca124
  r = spreadsheet.costpercapita_ca124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc124
  r = spreadsheet.costpercapita_cc124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7242706067494717,r[:number])
end

def test_costpercapita_cd124
  r = spreadsheet.costpercapita_cd124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.71715009447226,r[:number])
end

def test_costpercapita_cf124
  r = spreadsheet.costpercapita_cf124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg124
  r = spreadsheet.costpercapita_cg124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch124
  r = spreadsheet.costpercapita_ch124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci124
  r = spreadsheet.costpercapita_ci124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj124
  r = spreadsheet.costpercapita_cj124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck124
  r = spreadsheet.costpercapita_ck124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl124
  r = spreadsheet.costpercapita_cl124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm124
  r = spreadsheet.costpercapita_cm124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn124
  r = spreadsheet.costpercapita_cn124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp124
  r = spreadsheet.costpercapita_cp124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq124
  r = spreadsheet.costpercapita_cq124
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr124
  r = spreadsheet.costpercapita_cr124
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a125
  r = spreadsheet.costpercapita_a125
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b125
  r = spreadsheet.costpercapita_b125
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c125
  r = spreadsheet.costpercapita_c125
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e125
  r = spreadsheet.costpercapita_e125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f125
  r = spreadsheet.costpercapita_f125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g125
  r = spreadsheet.costpercapita_g125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h125
  r = spreadsheet.costpercapita_h125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i125
  r = spreadsheet.costpercapita_i125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j125
  r = spreadsheet.costpercapita_j125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k125
  r = spreadsheet.costpercapita_k125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l125
  r = spreadsheet.costpercapita_l125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m125
  r = spreadsheet.costpercapita_m125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o125
  r = spreadsheet.costpercapita_o125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p125
  r = spreadsheet.costpercapita_p125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q125
  r = spreadsheet.costpercapita_q125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r125
  r = spreadsheet.costpercapita_r125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s125
  r = spreadsheet.costpercapita_s125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t125
  r = spreadsheet.costpercapita_t125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u125
  r = spreadsheet.costpercapita_u125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v125
  r = spreadsheet.costpercapita_v125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w125
  r = spreadsheet.costpercapita_w125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y125
  r = spreadsheet.costpercapita_y125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.645269759224839,r[:number])
end

def test_costpercapita_z125
  r = spreadsheet.costpercapita_z125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.283726310188735,r[:number])
end

def test_costpercapita_aa125
  r = spreadsheet.costpercapita_aa125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.43381167235799,r[:number])
end

def test_costpercapita_ab125
  r = spreadsheet.costpercapita_ab125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.3049582362139,r[:number])
end

def test_costpercapita_ac125
  r = spreadsheet.costpercapita_ac125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.21931881739169,r[:number])
end

def test_costpercapita_ad125
  r = spreadsheet.costpercapita_ad125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.1900800781654,r[:number])
end

def test_costpercapita_ae125
  r = spreadsheet.costpercapita_ae125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.197135641163275,r[:number])
end

def test_costpercapita_af125
  r = spreadsheet.costpercapita_af125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.22940822122827,r[:number])
end

def test_costpercapita_ag125
  r = spreadsheet.costpercapita_ag125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.289690773885948,r[:number])
end

def test_costpercapita_ai125
  r = spreadsheet.costpercapita_ai125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.645269759224839,r[:number])
end

def test_costpercapita_aj125
  r = spreadsheet.costpercapita_aj125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.283726310188735,r[:number])
end

def test_costpercapita_ak125
  r = spreadsheet.costpercapita_ak125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.43381167235799,r[:number])
end

def test_costpercapita_al125
  r = spreadsheet.costpercapita_al125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.3049582362139,r[:number])
end

def test_costpercapita_am125
  r = spreadsheet.costpercapita_am125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.21931881739169,r[:number])
end

def test_costpercapita_an125
  r = spreadsheet.costpercapita_an125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.1900800781654,r[:number])
end

def test_costpercapita_ao125
  r = spreadsheet.costpercapita_ao125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.197135641163275,r[:number])
end

def test_costpercapita_ap125
  r = spreadsheet.costpercapita_ap125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.22940822122827,r[:number])
end

def test_costpercapita_aq125
  r = spreadsheet.costpercapita_aq125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.289690773885948,r[:number])
end

def test_costpercapita_as125
  r = spreadsheet.costpercapita_as125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.977044389980005,r[:number])
end

def test_costpercapita_at125
  r = spreadsheet.costpercapita_at125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(345.3651351127622,r[:number])
end

def test_costpercapita_av125
  r = spreadsheet.costpercapita_av125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw125
  r = spreadsheet.costpercapita_aw125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay125
  r = spreadsheet.costpercapita_ay125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az125
  r = spreadsheet.costpercapita_az125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba125
  r = spreadsheet.costpercapita_ba125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb125
  r = spreadsheet.costpercapita_bb125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc125
  r = spreadsheet.costpercapita_bc125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd125
  r = spreadsheet.costpercapita_bd125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be125
  r = spreadsheet.costpercapita_be125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf125
  r = spreadsheet.costpercapita_bf125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg125
  r = spreadsheet.costpercapita_bg125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi125
  r = spreadsheet.costpercapita_bi125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj125
  r = spreadsheet.costpercapita_bj125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk125
  r = spreadsheet.costpercapita_bk125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl125
  r = spreadsheet.costpercapita_bl125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm125
  r = spreadsheet.costpercapita_bm125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn125
  r = spreadsheet.costpercapita_bn125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo125
  r = spreadsheet.costpercapita_bo125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp125
  r = spreadsheet.costpercapita_bp125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq125
  r = spreadsheet.costpercapita_bq125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs125
  r = spreadsheet.costpercapita_bs125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.645269759224839,r[:number])
end

def test_costpercapita_bt125
  r = spreadsheet.costpercapita_bt125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.283726310188735,r[:number])
end

def test_costpercapita_bu125
  r = spreadsheet.costpercapita_bu125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.43381167235799,r[:number])
end

def test_costpercapita_bv125
  r = spreadsheet.costpercapita_bv125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.3049582362139,r[:number])
end

def test_costpercapita_bw125
  r = spreadsheet.costpercapita_bw125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.21931881739169,r[:number])
end

def test_costpercapita_bx125
  r = spreadsheet.costpercapita_bx125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.1900800781654,r[:number])
end

def test_costpercapita_by125
  r = spreadsheet.costpercapita_by125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.197135641163275,r[:number])
end

def test_costpercapita_bz125
  r = spreadsheet.costpercapita_bz125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.22940822122827,r[:number])
end

def test_costpercapita_ca125
  r = spreadsheet.costpercapita_ca125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.289690773885948,r[:number])
end

def test_costpercapita_cc125
  r = spreadsheet.costpercapita_cc125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.977044389980005,r[:number])
end

def test_costpercapita_cd125
  r = spreadsheet.costpercapita_cd125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(345.3651351127622,r[:number])
end

def test_costpercapita_cf125
  r = spreadsheet.costpercapita_cf125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg125
  r = spreadsheet.costpercapita_cg125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch125
  r = spreadsheet.costpercapita_ch125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci125
  r = spreadsheet.costpercapita_ci125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj125
  r = spreadsheet.costpercapita_cj125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck125
  r = spreadsheet.costpercapita_ck125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl125
  r = spreadsheet.costpercapita_cl125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm125
  r = spreadsheet.costpercapita_cm125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn125
  r = spreadsheet.costpercapita_cn125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp125
  r = spreadsheet.costpercapita_cp125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq125
  r = spreadsheet.costpercapita_cq125
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr125
  r = spreadsheet.costpercapita_cr125
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a126
  r = spreadsheet.costpercapita_a126
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.a.Emissions",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b126
  r = spreadsheet.costpercapita_b126
  assert_equal(:ExcelString,r[:type])
  assert_equal("Agriculture and land use",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c126
  r = spreadsheet.costpercapita_c126
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e126
  r = spreadsheet.costpercapita_e126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f126
  r = spreadsheet.costpercapita_f126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g126
  r = spreadsheet.costpercapita_g126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h126
  r = spreadsheet.costpercapita_h126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i126
  r = spreadsheet.costpercapita_i126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j126
  r = spreadsheet.costpercapita_j126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k126
  r = spreadsheet.costpercapita_k126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l126
  r = spreadsheet.costpercapita_l126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m126
  r = spreadsheet.costpercapita_m126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o126
  r = spreadsheet.costpercapita_o126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.452883527939801e-08,r[:number])
end

def test_costpercapita_p126
  r = spreadsheet.costpercapita_p126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.155017123604852e-08,r[:number])
end

def test_costpercapita_q126
  r = spreadsheet.costpercapita_q126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.254614924722045e-08,r[:number])
end

def test_costpercapita_r126
  r = spreadsheet.costpercapita_r126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.242935219503228e-08,r[:number])
end

def test_costpercapita_s126
  r = spreadsheet.costpercapita_s126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0275075361433352e-07,r[:number])
end

def test_costpercapita_t126
  r = spreadsheet.costpercapita_t126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1364055953921603e-07,r[:number])
end

def test_costpercapita_u126
  r = spreadsheet.costpercapita_u126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2503052493364069e-07,r[:number])
end

def test_costpercapita_v126
  r = spreadsheet.costpercapita_v126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.368841258710367e-07,r[:number])
end

def test_costpercapita_w126
  r = spreadsheet.costpercapita_w126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4924344612641147e-07,r[:number])
end

def test_costpercapita_y126
  r = spreadsheet.costpercapita_y126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z126
  r = spreadsheet.costpercapita_z126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa126
  r = spreadsheet.costpercapita_aa126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab126
  r = spreadsheet.costpercapita_ab126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac126
  r = spreadsheet.costpercapita_ac126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad126
  r = spreadsheet.costpercapita_ad126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae126
  r = spreadsheet.costpercapita_ae126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af126
  r = spreadsheet.costpercapita_af126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag126
  r = spreadsheet.costpercapita_ag126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai126
  r = spreadsheet.costpercapita_ai126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.452883527939801e-08,r[:number])
end

def test_costpercapita_aj126
  r = spreadsheet.costpercapita_aj126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.155017123604852e-08,r[:number])
end

def test_costpercapita_ak126
  r = spreadsheet.costpercapita_ak126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.254614924722045e-08,r[:number])
end

def test_costpercapita_al126
  r = spreadsheet.costpercapita_al126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.242935219503228e-08,r[:number])
end

def test_costpercapita_am126
  r = spreadsheet.costpercapita_am126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0275075361433352e-07,r[:number])
end

def test_costpercapita_an126
  r = spreadsheet.costpercapita_an126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1364055953921603e-07,r[:number])
end

def test_costpercapita_ao126
  r = spreadsheet.costpercapita_ao126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2503052493364069e-07,r[:number])
end

def test_costpercapita_ap126
  r = spreadsheet.costpercapita_ap126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.368841258710367e-07,r[:number])
end

def test_costpercapita_aq126
  r = spreadsheet.costpercapita_aq126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4924344612641147e-07,r[:number])
end

def test_costpercapita_as126
  r = spreadsheet.costpercapita_as126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0206710200470419e-07,r[:number])
end

def test_costpercapita_at126
  r = spreadsheet.costpercapita_at126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0758124239641153e-06,r[:number])
end

def test_costpercapita_av126
  r = spreadsheet.costpercapita_av126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw126
  r = spreadsheet.costpercapita_aw126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay126
  r = spreadsheet.costpercapita_ay126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az126
  r = spreadsheet.costpercapita_az126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba126
  r = spreadsheet.costpercapita_ba126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb126
  r = spreadsheet.costpercapita_bb126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc126
  r = spreadsheet.costpercapita_bc126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd126
  r = spreadsheet.costpercapita_bd126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be126
  r = spreadsheet.costpercapita_be126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf126
  r = spreadsheet.costpercapita_bf126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg126
  r = spreadsheet.costpercapita_bg126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi126
  r = spreadsheet.costpercapita_bi126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj126
  r = spreadsheet.costpercapita_bj126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk126
  r = spreadsheet.costpercapita_bk126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl126
  r = spreadsheet.costpercapita_bl126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm126
  r = spreadsheet.costpercapita_bm126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn126
  r = spreadsheet.costpercapita_bn126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo126
  r = spreadsheet.costpercapita_bo126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp126
  r = spreadsheet.costpercapita_bp126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq126
  r = spreadsheet.costpercapita_bq126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs126
  r = spreadsheet.costpercapita_bs126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.452883527939801e-08,r[:number])
end

def test_costpercapita_bt126
  r = spreadsheet.costpercapita_bt126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.155017123604852e-08,r[:number])
end

def test_costpercapita_bu126
  r = spreadsheet.costpercapita_bu126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.254614924722045e-08,r[:number])
end

def test_costpercapita_bv126
  r = spreadsheet.costpercapita_bv126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.242935219503228e-08,r[:number])
end

def test_costpercapita_bw126
  r = spreadsheet.costpercapita_bw126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0275075361433352e-07,r[:number])
end

def test_costpercapita_bx126
  r = spreadsheet.costpercapita_bx126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1364055953921603e-07,r[:number])
end

def test_costpercapita_by126
  r = spreadsheet.costpercapita_by126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2503052493364069e-07,r[:number])
end

def test_costpercapita_bz126
  r = spreadsheet.costpercapita_bz126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.368841258710367e-07,r[:number])
end

def test_costpercapita_ca126
  r = spreadsheet.costpercapita_ca126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4924344612641147e-07,r[:number])
end

def test_costpercapita_cc126
  r = spreadsheet.costpercapita_cc126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0206710200470419e-07,r[:number])
end

def test_costpercapita_cd126
  r = spreadsheet.costpercapita_cd126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0758124239641153e-06,r[:number])
end

def test_costpercapita_cf126
  r = spreadsheet.costpercapita_cf126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg126
  r = spreadsheet.costpercapita_cg126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch126
  r = spreadsheet.costpercapita_ch126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci126
  r = spreadsheet.costpercapita_ci126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj126
  r = spreadsheet.costpercapita_cj126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck126
  r = spreadsheet.costpercapita_ck126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl126
  r = spreadsheet.costpercapita_cl126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm126
  r = spreadsheet.costpercapita_cm126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn126
  r = spreadsheet.costpercapita_cn126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp126
  r = spreadsheet.costpercapita_cp126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq126
  r = spreadsheet.costpercapita_cq126
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr126
  r = spreadsheet.costpercapita_cr126
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a127
  r = spreadsheet.costpercapita_a127
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b127
  r = spreadsheet.costpercapita_b127
  assert_equal(:ExcelString,r[:type])
  assert_equal("Energy from waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c127
  r = spreadsheet.costpercapita_c127
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e127
  r = spreadsheet.costpercapita_e127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9882725037154225,r[:number])
end

def test_costpercapita_f127
  r = spreadsheet.costpercapita_f127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.167015791158481,r[:number])
end

def test_costpercapita_g127
  r = spreadsheet.costpercapita_g127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3382361136520706,r[:number])
end

def test_costpercapita_h127
  r = spreadsheet.costpercapita_h127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8613445609448562,r[:number])
end

def test_costpercapita_i127
  r = spreadsheet.costpercapita_i127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.427832351516481,r[:number])
end

def test_costpercapita_j127
  r = spreadsheet.costpercapita_j127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.710991999158746,r[:number])
end

def test_costpercapita_k127
  r = spreadsheet.costpercapita_k127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.005262837377495,r[:number])
end

def test_costpercapita_l127
  r = spreadsheet.costpercapita_l127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3163048873933265,r[:number])
end

def test_costpercapita_m127
  r = spreadsheet.costpercapita_m127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.641405594429478,r[:number])
end

def test_costpercapita_o127
  r = spreadsheet.costpercapita_o127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9882725037154225,r[:number])
end

def test_costpercapita_p127
  r = spreadsheet.costpercapita_p127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.163751694170952,r[:number])
end

def test_costpercapita_q127
  r = spreadsheet.costpercapita_q127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3344820770620087,r[:number])
end

def test_costpercapita_r127
  r = spreadsheet.costpercapita_r127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.10486233002682,r[:number])
end

def test_costpercapita_s127
  r = spreadsheet.costpercapita_s127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.946292422698839,r[:number])
end

def test_costpercapita_t127
  r = spreadsheet.costpercapita_t127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.413123221570472,r[:number])
end

def test_costpercapita_u127
  r = spreadsheet.costpercapita_u127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.915526003929274,r[:number])
end

def test_costpercapita_v127
  r = spreadsheet.costpercapita_v127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.4510686303048175,r[:number])
end

def test_costpercapita_w127
  r = spreadsheet.costpercapita_w127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.021139555613964,r[:number])
end

def test_costpercapita_y127
  r = spreadsheet.costpercapita_y127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z127
  r = spreadsheet.costpercapita_z127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa127
  r = spreadsheet.costpercapita_aa127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab127
  r = spreadsheet.costpercapita_ab127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac127
  r = spreadsheet.costpercapita_ac127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad127
  r = spreadsheet.costpercapita_ad127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae127
  r = spreadsheet.costpercapita_ae127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af127
  r = spreadsheet.costpercapita_af127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag127
  r = spreadsheet.costpercapita_ag127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai127
  r = spreadsheet.costpercapita_ai127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.976545007430845,r[:number])
end

def test_costpercapita_aj127
  r = spreadsheet.costpercapita_aj127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.3307674853294325,r[:number])
end

def test_costpercapita_ak127
  r = spreadsheet.costpercapita_ak127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.67271819071408,r[:number])
end

def test_costpercapita_al127
  r = spreadsheet.costpercapita_al127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.966206890971677,r[:number])
end

def test_costpercapita_am127
  r = spreadsheet.costpercapita_am127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.37412477421532,r[:number])
end

def test_costpercapita_an127
  r = spreadsheet.costpercapita_an127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.124115220729218,r[:number])
end

def test_costpercapita_ao127
  r = spreadsheet.costpercapita_ao127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.920788841306768,r[:number])
end

def test_costpercapita_ap127
  r = spreadsheet.costpercapita_ap127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.767373517698145,r[:number])
end

def test_costpercapita_aq127
  r = spreadsheet.costpercapita_aq127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.66254515004344,r[:number])
end

def test_costpercapita_as127
  r = spreadsheet.costpercapita_as127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.088353897604325,r[:number])
end

def test_costpercapita_at127
  r = spreadsheet.costpercapita_at127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.35156591005762,r[:number])
end

def test_costpercapita_av127
  r = spreadsheet.costpercapita_av127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw127
  r = spreadsheet.costpercapita_aw127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay127
  r = spreadsheet.costpercapita_ay127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1786384172964512,r[:number])
end

def test_costpercapita_az127
  r = spreadsheet.costpercapita_az127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0818976376277734,r[:number])
end

def test_costpercapita_ba127
  r = spreadsheet.costpercapita_ba127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1944525500183034,r[:number])
end

def test_costpercapita_bb127
  r = spreadsheet.costpercapita_bb127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5383277664546604,r[:number])
end

def test_costpercapita_bc127
  r = spreadsheet.costpercapita_bc127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9107192133898314,r[:number])
end

def test_costpercapita_bd127
  r = spreadsheet.costpercapita_bd127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0968595550779616,r[:number])
end

def test_costpercapita_be127
  r = spreadsheet.costpercapita_be127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2903040477201215,r[:number])
end

def test_costpercapita_bf127
  r = spreadsheet.costpercapita_bf127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4947734131519828,r[:number])
end

def test_costpercapita_bg127
  r = spreadsheet.costpercapita_bg127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7084845022659714,r[:number])
end

def test_costpercapita_bi127
  r = spreadsheet.costpercapita_bi127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1786384172964512,r[:number])
end

def test_costpercapita_bj127
  r = spreadsheet.costpercapita_bj127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.221670371491933,r[:number])
end

def test_costpercapita_bk127
  r = spreadsheet.costpercapita_bk127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.310651392196994,r[:number])
end

def test_costpercapita_bl127
  r = spreadsheet.costpercapita_bl127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.616220207310996,r[:number])
end

def test_costpercapita_bm127
  r = spreadsheet.costpercapita_bm127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.4481077172970345,r[:number])
end

def test_costpercapita_bn127
  r = spreadsheet.costpercapita_bn127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.349836467280392,r[:number])
end

def test_costpercapita_bo127
  r = spreadsheet.costpercapita_bo127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.102661077187815,r[:number])
end

def test_costpercapita_bp127
  r = spreadsheet.costpercapita_bp127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.68979898724174,r[:number])
end

def test_costpercapita_bq127
  r = spreadsheet.costpercapita_bq127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.302530762623034,r[:number])
end

def test_costpercapita_bs127
  r = spreadsheet.costpercapita_bs127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.1669109210118735,r[:number])
end

def test_costpercapita_bt127
  r = spreadsheet.costpercapita_bt127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.385422065662884,r[:number])
end

def test_costpercapita_bu127
  r = spreadsheet.costpercapita_bu127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.645133469259003,r[:number])
end

def test_costpercapita_bv127
  r = spreadsheet.costpercapita_bv127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.721082537337816,r[:number])
end

def test_costpercapita_bw127
  r = spreadsheet.costpercapita_bw127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.394400139995874,r[:number])
end

def test_costpercapita_bx127
  r = spreadsheet.costpercapita_bx127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.762959688850865,r[:number])
end

def test_costpercapita_by127
  r = spreadsheet.costpercapita_by127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.01818708111709,r[:number])
end

def test_costpercapita_bz127
  r = spreadsheet.costpercapita_bz127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.140867617546558,r[:number])
end

def test_costpercapita_ca127
  r = spreadsheet.costpercapita_ca127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.323670318237,r[:number])
end

def test_costpercapita_cc127
  r = spreadsheet.costpercapita_cc127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.617625982113218,r[:number])
end

def test_costpercapita_cd127
  r = spreadsheet.costpercapita_cd127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.47150270234903,r[:number])
end

def test_costpercapita_cf127
  r = spreadsheet.costpercapita_cf127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.809634086418971,r[:number])
end

def test_costpercapita_cg127
  r = spreadsheet.costpercapita_cg127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.054654580333451636,r[:number])
end

def test_costpercapita_ch127
  r = spreadsheet.costpercapita_ch127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9724152785449236,r[:number])
end

def test_costpercapita_ci127
  r = spreadsheet.costpercapita_ci127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7548756463661395,r[:number])
end

def test_costpercapita_cj127
  r = spreadsheet.costpercapita_cj127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0202753657805532,r[:number])
end

def test_costpercapita_ck127
  r = spreadsheet.costpercapita_ck127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.638844468121647,r[:number])
end

def test_costpercapita_cl127
  r = spreadsheet.costpercapita_cl127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.097398239810319,r[:number])
end

def test_costpercapita_cm127
  r = spreadsheet.costpercapita_cm127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.373494099848414,r[:number])
end

def test_costpercapita_cn127
  r = spreadsheet.costpercapita_cn127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.661125168193556,r[:number])
end

def test_costpercapita_cp127
  r = spreadsheet.costpercapita_cp127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5292720845088925,r[:number])
end

def test_costpercapita_cq127
  r = spreadsheet.costpercapita_cq127
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.11993679229143,r[:number])
end

def test_costpercapita_cr127
  r = spreadsheet.costpercapita_cr127
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a128
  r = spreadsheet.costpercapita_a128
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.b.Waste",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b128
  r = spreadsheet.costpercapita_b128
  assert_equal(:ExcelString,r[:type])
  assert_equal("Waste arising",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c128
  r = spreadsheet.costpercapita_c128
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e128
  r = spreadsheet.costpercapita_e128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.59823459405771,r[:number])
end

def test_costpercapita_f128
  r = spreadsheet.costpercapita_f128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.088246611599814,r[:number])
end

def test_costpercapita_g128
  r = spreadsheet.costpercapita_g128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.517956324845024,r[:number])
end

def test_costpercapita_h128
  r = spreadsheet.costpercapita_h128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.91273087965383,r[:number])
end

def test_costpercapita_i128
  r = spreadsheet.costpercapita_i128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.12460404632951,r[:number])
end

def test_costpercapita_j128
  r = spreadsheet.costpercapita_j128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.01201546758443,r[:number])
end

def test_costpercapita_k128
  r = spreadsheet.costpercapita_k128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.23893198482402,r[:number])
end

def test_costpercapita_l128
  r = spreadsheet.costpercapita_l128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.94848184685445,r[:number])
end

def test_costpercapita_m128
  r = spreadsheet.costpercapita_m128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.53038324516392,r[:number])
end

def test_costpercapita_o128
  r = spreadsheet.costpercapita_o128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.66987051271548,r[:number])
end

def test_costpercapita_p128
  r = spreadsheet.costpercapita_p128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.38043133977078,r[:number])
end

def test_costpercapita_q128
  r = spreadsheet.costpercapita_q128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.06916900517757,r[:number])
end

def test_costpercapita_r128
  r = spreadsheet.costpercapita_r128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.64810927788983,r[:number])
end

def test_costpercapita_s128
  r = spreadsheet.costpercapita_s128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.3372163076718,r[:number])
end

def test_costpercapita_t128
  r = spreadsheet.costpercapita_t128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.21130167206815,r[:number])
end

def test_costpercapita_u128
  r = spreadsheet.costpercapita_u128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.3060608303537,r[:number])
end

def test_costpercapita_v128
  r = spreadsheet.costpercapita_v128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.5264852251034,r[:number])
end

def test_costpercapita_w128
  r = spreadsheet.costpercapita_w128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.87928043870278,r[:number])
end

def test_costpercapita_y128
  r = spreadsheet.costpercapita_y128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z128
  r = spreadsheet.costpercapita_z128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa128
  r = spreadsheet.costpercapita_aa128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab128
  r = spreadsheet.costpercapita_ab128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac128
  r = spreadsheet.costpercapita_ac128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad128
  r = spreadsheet.costpercapita_ad128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae128
  r = spreadsheet.costpercapita_ae128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af128
  r = spreadsheet.costpercapita_af128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag128
  r = spreadsheet.costpercapita_ag128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai128
  r = spreadsheet.costpercapita_ai128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.2681051067732,r[:number])
end

def test_costpercapita_aj128
  r = spreadsheet.costpercapita_aj128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.4686779513706,r[:number])
end

def test_costpercapita_ak128
  r = spreadsheet.costpercapita_ak128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.58712533002262,r[:number])
end

def test_costpercapita_al128
  r = spreadsheet.costpercapita_al128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(177.56084015754365,r[:number])
end

def test_costpercapita_am128
  r = spreadsheet.costpercapita_am128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.46182035400133,r[:number])
end

def test_costpercapita_an128
  r = spreadsheet.costpercapita_an128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(201.22331713965258,r[:number])
end

def test_costpercapita_ao128
  r = spreadsheet.costpercapita_ao128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.5449928151777,r[:number])
end

def test_costpercapita_ap128
  r = spreadsheet.costpercapita_ap128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.47496707195785,r[:number])
end

def test_costpercapita_aq128
  r = spreadsheet.costpercapita_aq128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.40966368386674,r[:number])
end

def test_costpercapita_as128
  r = spreadsheet.costpercapita_as128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.66661217892957,r[:number])
end

def test_costpercapita_at128
  r = spreadsheet.costpercapita_at128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3914.099670696726,r[:number])
end

def test_costpercapita_av128
  r = spreadsheet.costpercapita_av128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw128
  r = spreadsheet.costpercapita_aw128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay128
  r = spreadsheet.costpercapita_ay128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.56260168708006,r[:number])
end

def test_costpercapita_az128
  r = spreadsheet.costpercapita_az128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.269085914028885,r[:number])
end

def test_costpercapita_ba128
  r = spreadsheet.costpercapita_ba128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.18103924660401,r[:number])
end

def test_costpercapita_bb128
  r = spreadsheet.costpercapita_bb128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.125813986429016,r[:number])
end

def test_costpercapita_bc128
  r = spreadsheet.costpercapita_bc128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.2371994669593,r[:number])
end

def test_costpercapita_bd128
  r = spreadsheet.costpercapita_bd128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.76476942960735,r[:number])
end

def test_costpercapita_be128
  r = spreadsheet.costpercapita_be128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.599199518531705,r[:number])
end

def test_costpercapita_bf128
  r = spreadsheet.costpercapita_bf128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.3803732886607,r[:number])
end

def test_costpercapita_bg128
  r = spreadsheet.costpercapita_bg128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.7071104683408,r[:number])
end

def test_costpercapita_bi128
  r = spreadsheet.costpercapita_bi128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.56260168708006,r[:number])
end

def test_costpercapita_bj128
  r = spreadsheet.costpercapita_bj128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.18660945574688,r[:number])
end

def test_costpercapita_bk128
  r = spreadsheet.costpercapita_bk128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.69189378110575,r[:number])
end

def test_costpercapita_bl128
  r = spreadsheet.costpercapita_bl128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.46372945969671,r[:number])
end

def test_costpercapita_bm128
  r = spreadsheet.costpercapita_bm128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(102.59101222501782,r[:number])
end

def test_costpercapita_bn128
  r = spreadsheet.costpercapita_bn128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.55997218307368,r[:number])
end

def test_costpercapita_bo128
  r = spreadsheet.costpercapita_bo128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.12360627805016,r[:number])
end

def test_costpercapita_bp128
  r = spreadsheet.costpercapita_bp128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.2892245959996,r[:number])
end

def test_costpercapita_bq128
  r = spreadsheet.costpercapita_bq128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.40028336534913,r[:number])
end

def test_costpercapita_bs128
  r = spreadsheet.costpercapita_bs128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.23247219979552,r[:number])
end

def test_costpercapita_bt128
  r = spreadsheet.costpercapita_bt128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.56704079551767,r[:number])
end

def test_costpercapita_bu128
  r = spreadsheet.costpercapita_bu128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.76106278628333,r[:number])
end

def test_costpercapita_bv128
  r = spreadsheet.costpercapita_bv128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(224.11183873758654,r[:number])
end

def test_costpercapita_bw128
  r = spreadsheet.costpercapita_bw128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.92822853268962,r[:number])
end

def test_costpercapita_bx128
  r = spreadsheet.costpercapita_bx128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.77127385514183,r[:number])
end

def test_costpercapita_by128
  r = spreadsheet.costpercapita_by128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.42966710840386,r[:number])
end

def test_costpercapita_bz128
  r = spreadsheet.costpercapita_bz128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.815709821103,r[:number])
end

def test_costpercapita_ca128
  r = spreadsheet.costpercapita_ca128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.2795638040519,r[:number])
end

def test_costpercapita_cc128
  r = spreadsheet.costpercapita_cc128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(225.98853973784148,r[:number])
end

def test_costpercapita_cd128
  r = spreadsheet.costpercapita_cd128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4615.380948244658,r[:number])
end

def test_costpercapita_cf128
  r = spreadsheet.costpercapita_cf128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-30.035632906977643,r[:number])
end

def test_costpercapita_cg128
  r = spreadsheet.costpercapita_cg128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0983628441470694,r[:number])
end

def test_costpercapita_ch128
  r = spreadsheet.costpercapita_ch128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.173937456260727,r[:number])
end

def test_costpercapita_ci128
  r = spreadsheet.costpercapita_ci128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.55099858004289,r[:number])
end

def test_costpercapita_cj128
  r = spreadsheet.costpercapita_cj128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.46640817868831,r[:number])
end

def test_costpercapita_ck128
  r = spreadsheet.costpercapita_ck128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.54795671548924,r[:number])
end

def test_costpercapita_cl128
  r = spreadsheet.costpercapita_cl128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.884674293226134,r[:number])
end

def test_costpercapita_cm128
  r = spreadsheet.costpercapita_cm128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.34074274914514,r[:number])
end

def test_costpercapita_cn128
  r = spreadsheet.costpercapita_cn128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.869900120185214,r[:number])
end

def test_costpercapita_cp128
  r = spreadsheet.costpercapita_cp128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.321927558911895,r[:number])
end

def test_costpercapita_cq128
  r = spreadsheet.costpercapita_cq128
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(701.2812775479329,r[:number])
end

def test_costpercapita_cr128
  r = spreadsheet.costpercapita_cr128
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a129
  r = spreadsheet.costpercapita_a129
  assert_equal(:ExcelString,r[:type])
  assert_equal("VI.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b129
  r = spreadsheet.costpercapita_b129
  assert_equal(:ExcelString,r[:type])
  assert_equal("Marine algae",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c129
  r = spreadsheet.costpercapita_c129
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e129
  r = spreadsheet.costpercapita_e129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f129
  r = spreadsheet.costpercapita_f129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g129
  r = spreadsheet.costpercapita_g129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h129
  r = spreadsheet.costpercapita_h129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i129
  r = spreadsheet.costpercapita_i129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j129
  r = spreadsheet.costpercapita_j129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k129
  r = spreadsheet.costpercapita_k129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l129
  r = spreadsheet.costpercapita_l129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m129
  r = spreadsheet.costpercapita_m129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o129
  r = spreadsheet.costpercapita_o129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p129
  r = spreadsheet.costpercapita_p129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q129
  r = spreadsheet.costpercapita_q129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r129
  r = spreadsheet.costpercapita_r129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s129
  r = spreadsheet.costpercapita_s129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t129
  r = spreadsheet.costpercapita_t129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u129
  r = spreadsheet.costpercapita_u129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v129
  r = spreadsheet.costpercapita_v129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w129
  r = spreadsheet.costpercapita_w129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y129
  r = spreadsheet.costpercapita_y129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z129
  r = spreadsheet.costpercapita_z129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa129
  r = spreadsheet.costpercapita_aa129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab129
  r = spreadsheet.costpercapita_ab129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac129
  r = spreadsheet.costpercapita_ac129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad129
  r = spreadsheet.costpercapita_ad129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae129
  r = spreadsheet.costpercapita_ae129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af129
  r = spreadsheet.costpercapita_af129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag129
  r = spreadsheet.costpercapita_ag129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai129
  r = spreadsheet.costpercapita_ai129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj129
  r = spreadsheet.costpercapita_aj129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak129
  r = spreadsheet.costpercapita_ak129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al129
  r = spreadsheet.costpercapita_al129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am129
  r = spreadsheet.costpercapita_am129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an129
  r = spreadsheet.costpercapita_an129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao129
  r = spreadsheet.costpercapita_ao129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap129
  r = spreadsheet.costpercapita_ap129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq129
  r = spreadsheet.costpercapita_aq129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as129
  r = spreadsheet.costpercapita_as129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at129
  r = spreadsheet.costpercapita_at129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av129
  r = spreadsheet.costpercapita_av129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw129
  r = spreadsheet.costpercapita_aw129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay129
  r = spreadsheet.costpercapita_ay129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az129
  r = spreadsheet.costpercapita_az129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba129
  r = spreadsheet.costpercapita_ba129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb129
  r = spreadsheet.costpercapita_bb129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc129
  r = spreadsheet.costpercapita_bc129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd129
  r = spreadsheet.costpercapita_bd129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be129
  r = spreadsheet.costpercapita_be129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf129
  r = spreadsheet.costpercapita_bf129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg129
  r = spreadsheet.costpercapita_bg129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi129
  r = spreadsheet.costpercapita_bi129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj129
  r = spreadsheet.costpercapita_bj129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk129
  r = spreadsheet.costpercapita_bk129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl129
  r = spreadsheet.costpercapita_bl129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm129
  r = spreadsheet.costpercapita_bm129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn129
  r = spreadsheet.costpercapita_bn129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo129
  r = spreadsheet.costpercapita_bo129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp129
  r = spreadsheet.costpercapita_bp129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq129
  r = spreadsheet.costpercapita_bq129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs129
  r = spreadsheet.costpercapita_bs129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt129
  r = spreadsheet.costpercapita_bt129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu129
  r = spreadsheet.costpercapita_bu129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv129
  r = spreadsheet.costpercapita_bv129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw129
  r = spreadsheet.costpercapita_bw129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx129
  r = spreadsheet.costpercapita_bx129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by129
  r = spreadsheet.costpercapita_by129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz129
  r = spreadsheet.costpercapita_bz129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca129
  r = spreadsheet.costpercapita_ca129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc129
  r = spreadsheet.costpercapita_cc129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd129
  r = spreadsheet.costpercapita_cd129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf129
  r = spreadsheet.costpercapita_cf129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg129
  r = spreadsheet.costpercapita_cg129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch129
  r = spreadsheet.costpercapita_ch129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci129
  r = spreadsheet.costpercapita_ci129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj129
  r = spreadsheet.costpercapita_cj129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck129
  r = spreadsheet.costpercapita_ck129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl129
  r = spreadsheet.costpercapita_cl129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm129
  r = spreadsheet.costpercapita_cm129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn129
  r = spreadsheet.costpercapita_cn129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp129
  r = spreadsheet.costpercapita_cp129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq129
  r = spreadsheet.costpercapita_cq129
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr129
  r = spreadsheet.costpercapita_cr129
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a130
  r = spreadsheet.costpercapita_a130
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b130
  r = spreadsheet.costpercapita_b130
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity imports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c130
  r = spreadsheet.costpercapita_c130
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e130
  r = spreadsheet.costpercapita_e130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f130
  r = spreadsheet.costpercapita_f130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g130
  r = spreadsheet.costpercapita_g130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h130
  r = spreadsheet.costpercapita_h130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i130
  r = spreadsheet.costpercapita_i130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j130
  r = spreadsheet.costpercapita_j130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k130
  r = spreadsheet.costpercapita_k130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l130
  r = spreadsheet.costpercapita_l130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m130
  r = spreadsheet.costpercapita_m130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o130
  r = spreadsheet.costpercapita_o130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p130
  r = spreadsheet.costpercapita_p130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q130
  r = spreadsheet.costpercapita_q130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r130
  r = spreadsheet.costpercapita_r130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s130
  r = spreadsheet.costpercapita_s130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t130
  r = spreadsheet.costpercapita_t130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u130
  r = spreadsheet.costpercapita_u130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v130
  r = spreadsheet.costpercapita_v130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w130
  r = spreadsheet.costpercapita_w130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y130
  r = spreadsheet.costpercapita_y130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z130
  r = spreadsheet.costpercapita_z130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa130
  r = spreadsheet.costpercapita_aa130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab130
  r = spreadsheet.costpercapita_ab130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac130
  r = spreadsheet.costpercapita_ac130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad130
  r = spreadsheet.costpercapita_ad130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae130
  r = spreadsheet.costpercapita_ae130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af130
  r = spreadsheet.costpercapita_af130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag130
  r = spreadsheet.costpercapita_ag130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai130
  r = spreadsheet.costpercapita_ai130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj130
  r = spreadsheet.costpercapita_aj130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak130
  r = spreadsheet.costpercapita_ak130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al130
  r = spreadsheet.costpercapita_al130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am130
  r = spreadsheet.costpercapita_am130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an130
  r = spreadsheet.costpercapita_an130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao130
  r = spreadsheet.costpercapita_ao130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap130
  r = spreadsheet.costpercapita_ap130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq130
  r = spreadsheet.costpercapita_aq130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as130
  r = spreadsheet.costpercapita_as130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at130
  r = spreadsheet.costpercapita_at130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av130
  r = spreadsheet.costpercapita_av130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw130
  r = spreadsheet.costpercapita_aw130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay130
  r = spreadsheet.costpercapita_ay130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az130
  r = spreadsheet.costpercapita_az130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba130
  r = spreadsheet.costpercapita_ba130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb130
  r = spreadsheet.costpercapita_bb130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc130
  r = spreadsheet.costpercapita_bc130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd130
  r = spreadsheet.costpercapita_bd130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be130
  r = spreadsheet.costpercapita_be130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf130
  r = spreadsheet.costpercapita_bf130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg130
  r = spreadsheet.costpercapita_bg130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi130
  r = spreadsheet.costpercapita_bi130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj130
  r = spreadsheet.costpercapita_bj130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk130
  r = spreadsheet.costpercapita_bk130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl130
  r = spreadsheet.costpercapita_bl130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm130
  r = spreadsheet.costpercapita_bm130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn130
  r = spreadsheet.costpercapita_bn130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo130
  r = spreadsheet.costpercapita_bo130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp130
  r = spreadsheet.costpercapita_bp130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq130
  r = spreadsheet.costpercapita_bq130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs130
  r = spreadsheet.costpercapita_bs130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt130
  r = spreadsheet.costpercapita_bt130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu130
  r = spreadsheet.costpercapita_bu130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv130
  r = spreadsheet.costpercapita_bv130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw130
  r = spreadsheet.costpercapita_bw130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx130
  r = spreadsheet.costpercapita_bx130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by130
  r = spreadsheet.costpercapita_by130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz130
  r = spreadsheet.costpercapita_bz130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca130
  r = spreadsheet.costpercapita_ca130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc130
  r = spreadsheet.costpercapita_cc130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd130
  r = spreadsheet.costpercapita_cd130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf130
  r = spreadsheet.costpercapita_cf130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg130
  r = spreadsheet.costpercapita_cg130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch130
  r = spreadsheet.costpercapita_ch130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci130
  r = spreadsheet.costpercapita_ci130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj130
  r = spreadsheet.costpercapita_cj130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck130
  r = spreadsheet.costpercapita_ck130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl130
  r = spreadsheet.costpercapita_cl130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm130
  r = spreadsheet.costpercapita_cm130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn130
  r = spreadsheet.costpercapita_cn130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp130
  r = spreadsheet.costpercapita_cp130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq130
  r = spreadsheet.costpercapita_cq130
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr130
  r = spreadsheet.costpercapita_cr130
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a131
  r = spreadsheet.costpercapita_a131
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.a.Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b131
  r = spreadsheet.costpercapita_b131
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity Exports",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c131
  r = spreadsheet.costpercapita_c131
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e131
  r = spreadsheet.costpercapita_e131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f131
  r = spreadsheet.costpercapita_f131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g131
  r = spreadsheet.costpercapita_g131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h131
  r = spreadsheet.costpercapita_h131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i131
  r = spreadsheet.costpercapita_i131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j131
  r = spreadsheet.costpercapita_j131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k131
  r = spreadsheet.costpercapita_k131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l131
  r = spreadsheet.costpercapita_l131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m131
  r = spreadsheet.costpercapita_m131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o131
  r = spreadsheet.costpercapita_o131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p131
  r = spreadsheet.costpercapita_p131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q131
  r = spreadsheet.costpercapita_q131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r131
  r = spreadsheet.costpercapita_r131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s131
  r = spreadsheet.costpercapita_s131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t131
  r = spreadsheet.costpercapita_t131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u131
  r = spreadsheet.costpercapita_u131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v131
  r = spreadsheet.costpercapita_v131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w131
  r = spreadsheet.costpercapita_w131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y131
  r = spreadsheet.costpercapita_y131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.142619883728688e-13,r[:number])
end

def test_costpercapita_z131
  r = spreadsheet.costpercapita_z131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa131
  r = spreadsheet.costpercapita_aa131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab131
  r = spreadsheet.costpercapita_ab131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac131
  r = spreadsheet.costpercapita_ac131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad131
  r = spreadsheet.costpercapita_ad131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae131
  r = spreadsheet.costpercapita_ae131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af131
  r = spreadsheet.costpercapita_af131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag131
  r = spreadsheet.costpercapita_ag131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai131
  r = spreadsheet.costpercapita_ai131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.142619883728688e-13,r[:number])
end

def test_costpercapita_aj131
  r = spreadsheet.costpercapita_aj131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak131
  r = spreadsheet.costpercapita_ak131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al131
  r = spreadsheet.costpercapita_al131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am131
  r = spreadsheet.costpercapita_am131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an131
  r = spreadsheet.costpercapita_an131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao131
  r = spreadsheet.costpercapita_ao131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap131
  r = spreadsheet.costpercapita_ap131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq131
  r = spreadsheet.costpercapita_aq131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as131
  r = spreadsheet.costpercapita_as131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.4917998708096535e-14,r[:number])
end

def test_costpercapita_at131
  r = spreadsheet.costpercapita_at131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.142619883728688e-13,r[:number])
end

def test_costpercapita_av131
  r = spreadsheet.costpercapita_av131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw131
  r = spreadsheet.costpercapita_aw131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay131
  r = spreadsheet.costpercapita_ay131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az131
  r = spreadsheet.costpercapita_az131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba131
  r = spreadsheet.costpercapita_ba131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb131
  r = spreadsheet.costpercapita_bb131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc131
  r = spreadsheet.costpercapita_bc131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd131
  r = spreadsheet.costpercapita_bd131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be131
  r = spreadsheet.costpercapita_be131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf131
  r = spreadsheet.costpercapita_bf131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg131
  r = spreadsheet.costpercapita_bg131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi131
  r = spreadsheet.costpercapita_bi131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj131
  r = spreadsheet.costpercapita_bj131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk131
  r = spreadsheet.costpercapita_bk131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl131
  r = spreadsheet.costpercapita_bl131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm131
  r = spreadsheet.costpercapita_bm131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn131
  r = spreadsheet.costpercapita_bn131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo131
  r = spreadsheet.costpercapita_bo131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp131
  r = spreadsheet.costpercapita_bp131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq131
  r = spreadsheet.costpercapita_bq131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs131
  r = spreadsheet.costpercapita_bs131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.142619883728688e-13,r[:number])
end

def test_costpercapita_bt131
  r = spreadsheet.costpercapita_bt131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu131
  r = spreadsheet.costpercapita_bu131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv131
  r = spreadsheet.costpercapita_bv131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw131
  r = spreadsheet.costpercapita_bw131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx131
  r = spreadsheet.costpercapita_bx131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by131
  r = spreadsheet.costpercapita_by131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz131
  r = spreadsheet.costpercapita_bz131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca131
  r = spreadsheet.costpercapita_ca131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc131
  r = spreadsheet.costpercapita_cc131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.4917998708096535e-14,r[:number])
end

def test_costpercapita_cd131
  r = spreadsheet.costpercapita_cd131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.142619883728688e-13,r[:number])
end

def test_costpercapita_cf131
  r = spreadsheet.costpercapita_cf131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg131
  r = spreadsheet.costpercapita_cg131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch131
  r = spreadsheet.costpercapita_ch131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci131
  r = spreadsheet.costpercapita_ci131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj131
  r = spreadsheet.costpercapita_cj131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck131
  r = spreadsheet.costpercapita_ck131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl131
  r = spreadsheet.costpercapita_cl131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm131
  r = spreadsheet.costpercapita_cm131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn131
  r = spreadsheet.costpercapita_cn131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp131
  r = spreadsheet.costpercapita_cp131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq131
  r = spreadsheet.costpercapita_cq131
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr131
  r = spreadsheet.costpercapita_cr131
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a132
  r = spreadsheet.costpercapita_a132
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b132
  r = spreadsheet.costpercapita_b132
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity grid distribution",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c132
  r = spreadsheet.costpercapita_c132
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e132
  r = spreadsheet.costpercapita_e132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.9292553258558,r[:number])
end

def test_costpercapita_f132
  r = spreadsheet.costpercapita_f132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.11444831371831,r[:number])
end

def test_costpercapita_g132
  r = spreadsheet.costpercapita_g132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.79261245464232,r[:number])
end

def test_costpercapita_h132
  r = spreadsheet.costpercapita_h132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.67832889591367,r[:number])
end

def test_costpercapita_i132
  r = spreadsheet.costpercapita_i132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.16020175018767,r[:number])
end

def test_costpercapita_j132
  r = spreadsheet.costpercapita_j132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.1568431324647,r[:number])
end

def test_costpercapita_k132
  r = spreadsheet.costpercapita_k132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138.1781573518557,r[:number])
end

def test_costpercapita_l132
  r = spreadsheet.costpercapita_l132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.2136723953131,r[:number])
end

def test_costpercapita_m132
  r = spreadsheet.costpercapita_m132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.65512710703294,r[:number])
end

def test_costpercapita_o132
  r = spreadsheet.costpercapita_o132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.44720405796029,r[:number])
end

def test_costpercapita_p132
  r = spreadsheet.costpercapita_p132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.359623940871135,r[:number])
end

def test_costpercapita_q132
  r = spreadsheet.costpercapita_q132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.738449238582007,r[:number])
end

def test_costpercapita_r132
  r = spreadsheet.costpercapita_r132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.20581569763449,r[:number])
end

def test_costpercapita_s132
  r = spreadsheet.costpercapita_s132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.851177351450257,r[:number])
end

def test_costpercapita_t132
  r = spreadsheet.costpercapita_t132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.74648347321178,r[:number])
end

def test_costpercapita_u132
  r = spreadsheet.costpercapita_u132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.80395591733292,r[:number])
end

def test_costpercapita_v132
  r = spreadsheet.costpercapita_v132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.96951001772224,r[:number])
end

def test_costpercapita_w132
  r = spreadsheet.costpercapita_w132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.677047933839848,r[:number])
end

def test_costpercapita_y132
  r = spreadsheet.costpercapita_y132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z132
  r = spreadsheet.costpercapita_z132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa132
  r = spreadsheet.costpercapita_aa132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab132
  r = spreadsheet.costpercapita_ab132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac132
  r = spreadsheet.costpercapita_ac132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad132
  r = spreadsheet.costpercapita_ad132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae132
  r = spreadsheet.costpercapita_ae132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af132
  r = spreadsheet.costpercapita_af132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag132
  r = spreadsheet.costpercapita_ag132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai132
  r = spreadsheet.costpercapita_ai132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.3764593838161,r[:number])
end

def test_costpercapita_aj132
  r = spreadsheet.costpercapita_aj132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.47407225458943,r[:number])
end

def test_costpercapita_ak132
  r = spreadsheet.costpercapita_ak132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.53106169322433,r[:number])
end

def test_costpercapita_al132
  r = spreadsheet.costpercapita_al132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.88414459354814,r[:number])
end

def test_costpercapita_am132
  r = spreadsheet.costpercapita_am132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(150.0113791016379,r[:number])
end

def test_costpercapita_an132
  r = spreadsheet.costpercapita_an132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.90332660567645,r[:number])
end

def test_costpercapita_ao132
  r = spreadsheet.costpercapita_ao132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.98211326918863,r[:number])
end

def test_costpercapita_ap132
  r = spreadsheet.costpercapita_ap132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.18318241303535,r[:number])
end

def test_costpercapita_aq132
  r = spreadsheet.costpercapita_aq132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.33217504087278,r[:number])
end

def test_costpercapita_as132
  r = spreadsheet.costpercapita_as132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(156.96421270617657,r[:number])
end

def test_costpercapita_at132
  r = spreadsheet.costpercapita_at132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3265.0012286132146,r[:number])
end

def test_costpercapita_av132
  r = spreadsheet.costpercapita_av132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw132
  r = spreadsheet.costpercapita_aw132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay132
  r = spreadsheet.costpercapita_ay132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.85244844689982,r[:number])
end

def test_costpercapita_az132
  r = spreadsheet.costpercapita_az132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.67265647055369,r[:number])
end

def test_costpercapita_ba132
  r = spreadsheet.costpercapita_ba132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.81163366175439,r[:number])
end

def test_costpercapita_bb132
  r = spreadsheet.costpercapita_bb132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.02335162842776,r[:number])
end

def test_costpercapita_bc132
  r = spreadsheet.costpercapita_bc132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.87800439147134,r[:number])
end

def test_costpercapita_bd132
  r = spreadsheet.costpercapita_bd132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.84790319399612,r[:number])
end

def test_costpercapita_be132
  r = spreadsheet.costpercapita_be132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.83402115193041,r[:number])
end

def test_costpercapita_bf132
  r = spreadsheet.costpercapita_bf132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.8294742897393,r[:number])
end

def test_costpercapita_bg132
  r = spreadsheet.costpercapita_bg132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.63757503210174,r[:number])
end

def test_costpercapita_bi132
  r = spreadsheet.costpercapita_bi132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.85244844689982,r[:number])
end

def test_costpercapita_bj132
  r = spreadsheet.costpercapita_bj132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.84824190833183,r[:number])
end

def test_costpercapita_bk132
  r = spreadsheet.costpercapita_bk132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(218.57257504342078,r[:number])
end

def test_costpercapita_bl132
  r = spreadsheet.costpercapita_bl132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.73529089127874,r[:number])
end

def test_costpercapita_bm132
  r = spreadsheet.costpercapita_bm132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(277.3349408824637,r[:number])
end

def test_costpercapita_bn132
  r = spreadsheet.costpercapita_bn132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.6281516899174,r[:number])
end

def test_costpercapita_bo132
  r = spreadsheet.costpercapita_bo132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(260.80950216090366,r[:number])
end

def test_costpercapita_bp132
  r = spreadsheet.costpercapita_bp132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(267.07010974017743,r[:number])
end

def test_costpercapita_bq132
  r = spreadsheet.costpercapita_bq132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.0954548125619,r[:number])
end

def test_costpercapita_bs132
  r = spreadsheet.costpercapita_bs132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.2996525048601,r[:number])
end

def test_costpercapita_bt132
  r = spreadsheet.costpercapita_bt132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.20786584920296,r[:number])
end

def test_costpercapita_bu132
  r = spreadsheet.costpercapita_bu132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236.3110242820028,r[:number])
end

def test_costpercapita_bv132
  r = spreadsheet.costpercapita_bv132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(284.94110658891327,r[:number])
end

def test_costpercapita_bw132
  r = spreadsheet.costpercapita_bw132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(295.18611823391393,r[:number])
end

def test_costpercapita_bx132
  r = spreadsheet.costpercapita_bx132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(287.3746351631292,r[:number])
end

def test_costpercapita_by132
  r = spreadsheet.costpercapita_by132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(278.61345807823665,r[:number])
end

def test_costpercapita_bz132
  r = spreadsheet.costpercapita_bz132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285.0396197578997,r[:number])
end

def test_costpercapita_ca132
  r = spreadsheet.costpercapita_ca132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(300.77250274640176,r[:number])
end

def test_costpercapita_cc132
  r = spreadsheet.costpercapita_cc132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.19399813384,r[:number])
end

def test_costpercapita_cd132
  r = spreadsheet.costpercapita_cd132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5038.761842676967,r[:number])
end

def test_costpercapita_cf132
  r = spreadsheet.costpercapita_cf132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-78.07680687895596,r[:number])
end

def test_costpercapita_cg132
  r = spreadsheet.costpercapita_cg132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.733793594613521,r[:number])
end

def test_costpercapita_ch132
  r = spreadsheet.costpercapita_ch132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.77996258877846,r[:number])
end

def test_costpercapita_ci132
  r = spreadsheet.costpercapita_ci132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.0569619953651,r[:number])
end

def test_costpercapita_cj132
  r = spreadsheet.costpercapita_cj132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.17473913227602,r[:number])
end

def test_costpercapita_ck132
  r = spreadsheet.costpercapita_ck132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.47130855745272,r[:number])
end

def test_costpercapita_cl132
  r = spreadsheet.costpercapita_cl132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.63134480904799,r[:number])
end

def test_costpercapita_cm132
  r = spreadsheet.costpercapita_cm132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.85643734486435,r[:number])
end

def test_costpercapita_cn132
  r = spreadsheet.costpercapita_cn132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.44032770552899,r[:number])
end

def test_costpercapita_cp132
  r = spreadsheet.costpercapita_cp132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.22978542766346,r[:number])
end

def test_costpercapita_cq132
  r = spreadsheet.costpercapita_cq132
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1773.7606140637527,r[:number])
end

def test_costpercapita_cr132
  r = spreadsheet.costpercapita_cr132
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a133
  r = spreadsheet.costpercapita_a133
  assert_equal(:ExcelString,r[:type])
  assert_equal("VII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b133
  r = spreadsheet.costpercapita_b133
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage, demand shifting, backup",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c133
  r = spreadsheet.costpercapita_c133
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e133
  r = spreadsheet.costpercapita_e133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f133
  r = spreadsheet.costpercapita_f133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6506811900679836,r[:number])
end

def test_costpercapita_g133
  r = spreadsheet.costpercapita_g133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h133
  r = spreadsheet.costpercapita_h133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i133
  r = spreadsheet.costpercapita_i133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j133
  r = spreadsheet.costpercapita_j133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k133
  r = spreadsheet.costpercapita_k133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l133
  r = spreadsheet.costpercapita_l133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m133
  r = spreadsheet.costpercapita_m133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o133
  r = spreadsheet.costpercapita_o133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0357585976166739,r[:number])
end

def test_costpercapita_p133
  r = spreadsheet.costpercapita_p133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0151010791810096,r[:number])
end

def test_costpercapita_q133
  r = spreadsheet.costpercapita_q133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9818685473316502,r[:number])
end

def test_costpercapita_r133
  r = spreadsheet.costpercapita_r133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9514664853567814,r[:number])
end

def test_costpercapita_s133
  r = spreadsheet.costpercapita_s133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9254722753107457,r[:number])
end

def test_costpercapita_t133
  r = spreadsheet.costpercapita_t133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.90367213190737,r[:number])
end

def test_costpercapita_u133
  r = spreadsheet.costpercapita_u133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8844000709703503,r[:number])
end

def test_costpercapita_v133
  r = spreadsheet.costpercapita_v133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.866758124361302,r[:number])
end

def test_costpercapita_w133
  r = spreadsheet.costpercapita_w133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8505829137382165,r[:number])
end

def test_costpercapita_y133
  r = spreadsheet.costpercapita_y133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z133
  r = spreadsheet.costpercapita_z133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa133
  r = spreadsheet.costpercapita_aa133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab133
  r = spreadsheet.costpercapita_ab133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac133
  r = spreadsheet.costpercapita_ac133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad133
  r = spreadsheet.costpercapita_ad133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae133
  r = spreadsheet.costpercapita_ae133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af133
  r = spreadsheet.costpercapita_af133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag133
  r = spreadsheet.costpercapita_ag133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai133
  r = spreadsheet.costpercapita_ai133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0357585976166739,r[:number])
end

def test_costpercapita_aj133
  r = spreadsheet.costpercapita_aj133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.665782269248993,r[:number])
end

def test_costpercapita_ak133
  r = spreadsheet.costpercapita_ak133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9818685473316502,r[:number])
end

def test_costpercapita_al133
  r = spreadsheet.costpercapita_al133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9514664853567814,r[:number])
end

def test_costpercapita_am133
  r = spreadsheet.costpercapita_am133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9254722753107457,r[:number])
end

def test_costpercapita_an133
  r = spreadsheet.costpercapita_an133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.90367213190737,r[:number])
end

def test_costpercapita_ao133
  r = spreadsheet.costpercapita_ao133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8844000709703503,r[:number])
end

def test_costpercapita_ap133
  r = spreadsheet.costpercapita_ap133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.866758124361302,r[:number])
end

def test_costpercapita_aq133
  r = spreadsheet.costpercapita_aq133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8505829137382165,r[:number])
end

def test_costpercapita_as133
  r = spreadsheet.costpercapita_as133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3406401573157871,r[:number])
end

def test_costpercapita_at133
  r = spreadsheet.costpercapita_at133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.27032266890677,r[:number])
end

def test_costpercapita_av133
  r = spreadsheet.costpercapita_av133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw133
  r = spreadsheet.costpercapita_aw133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay133
  r = spreadsheet.costpercapita_ay133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az133
  r = spreadsheet.costpercapita_az133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3998442213496225,r[:number])
end

def test_costpercapita_ba133
  r = spreadsheet.costpercapita_ba133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb133
  r = spreadsheet.costpercapita_bb133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc133
  r = spreadsheet.costpercapita_bc133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd133
  r = spreadsheet.costpercapita_bd133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be133
  r = spreadsheet.costpercapita_be133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf133
  r = spreadsheet.costpercapita_bf133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg133
  r = spreadsheet.costpercapita_bg133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi133
  r = spreadsheet.costpercapita_bi133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj133
  r = spreadsheet.costpercapita_bj133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3998442213496225,r[:number])
end

def test_costpercapita_bk133
  r = spreadsheet.costpercapita_bk133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.321277760181196,r[:number])
end

def test_costpercapita_bl133
  r = spreadsheet.costpercapita_bl133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.249402934861961,r[:number])
end

def test_costpercapita_bm133
  r = spreadsheet.costpercapita_bm133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn133
  r = spreadsheet.costpercapita_bn133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo133
  r = spreadsheet.costpercapita_bo133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp133
  r = spreadsheet.costpercapita_bp133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq133
  r = spreadsheet.costpercapita_bq133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs133
  r = spreadsheet.costpercapita_bs133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0357585976166739,r[:number])
end

def test_costpercapita_bt133
  r = spreadsheet.costpercapita_bt133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.414945300530632,r[:number])
end

def test_costpercapita_bu133
  r = spreadsheet.costpercapita_bu133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3031463075128458,r[:number])
end

def test_costpercapita_bv133
  r = spreadsheet.costpercapita_bv133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.200869420218742,r[:number])
end

def test_costpercapita_bw133
  r = spreadsheet.costpercapita_bw133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9254722753107457,r[:number])
end

def test_costpercapita_bx133
  r = spreadsheet.costpercapita_bx133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.90367213190737,r[:number])
end

def test_costpercapita_by133
  r = spreadsheet.costpercapita_by133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8844000709703503,r[:number])
end

def test_costpercapita_bz133
  r = spreadsheet.costpercapita_bz133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.866758124361302,r[:number])
end

def test_costpercapita_ca133
  r = spreadsheet.costpercapita_ca133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8505829137382165,r[:number])
end

def test_costpercapita_cc133
  r = spreadsheet.costpercapita_cc133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7095116824629868,r[:number])
end

def test_costpercapita_cd133
  r = spreadsheet.costpercapita_cd133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.94569177685288,r[:number])
end

def test_costpercapita_cf133
  r = spreadsheet.costpercapita_cf133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg133
  r = spreadsheet.costpercapita_cg133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.2508369687183611,r[:number])
end

def test_costpercapita_ch133
  r = spreadsheet.costpercapita_ch133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.321277760181196,r[:number])
end

def test_costpercapita_ci133
  r = spreadsheet.costpercapita_ci133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.249402934861961,r[:number])
end

def test_costpercapita_cj133
  r = spreadsheet.costpercapita_cj133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck133
  r = spreadsheet.costpercapita_ck133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl133
  r = spreadsheet.costpercapita_cl133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm133
  r = spreadsheet.costpercapita_cm133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn133
  r = spreadsheet.costpercapita_cn133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp133
  r = spreadsheet.costpercapita_cp133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.36887152514719956,r[:number])
end

def test_costpercapita_cq133
  r = spreadsheet.costpercapita_cq133
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.675369107946116,r[:number])
end

def test_costpercapita_cr133
  r = spreadsheet.costpercapita_cr133
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a134
  r = spreadsheet.costpercapita_a134
  assert_equal(:ExcelString,r[:type])
  assert_equal("VIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b134
  r = spreadsheet.costpercapita_b134
  assert_equal(:ExcelString,r[:type])
  assert_equal("H2 Production",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c134
  r = spreadsheet.costpercapita_c134
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e134
  r = spreadsheet.costpercapita_e134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f134
  r = spreadsheet.costpercapita_f134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g134
  r = spreadsheet.costpercapita_g134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h134
  r = spreadsheet.costpercapita_h134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i134
  r = spreadsheet.costpercapita_i134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j134
  r = spreadsheet.costpercapita_j134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k134
  r = spreadsheet.costpercapita_k134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l134
  r = spreadsheet.costpercapita_l134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m134
  r = spreadsheet.costpercapita_m134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o134
  r = spreadsheet.costpercapita_o134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p134
  r = spreadsheet.costpercapita_p134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q134
  r = spreadsheet.costpercapita_q134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r134
  r = spreadsheet.costpercapita_r134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s134
  r = spreadsheet.costpercapita_s134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t134
  r = spreadsheet.costpercapita_t134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u134
  r = spreadsheet.costpercapita_u134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v134
  r = spreadsheet.costpercapita_v134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w134
  r = spreadsheet.costpercapita_w134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y134
  r = spreadsheet.costpercapita_y134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z134
  r = spreadsheet.costpercapita_z134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa134
  r = spreadsheet.costpercapita_aa134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab134
  r = spreadsheet.costpercapita_ab134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac134
  r = spreadsheet.costpercapita_ac134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad134
  r = spreadsheet.costpercapita_ad134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae134
  r = spreadsheet.costpercapita_ae134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af134
  r = spreadsheet.costpercapita_af134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag134
  r = spreadsheet.costpercapita_ag134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai134
  r = spreadsheet.costpercapita_ai134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj134
  r = spreadsheet.costpercapita_aj134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak134
  r = spreadsheet.costpercapita_ak134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al134
  r = spreadsheet.costpercapita_al134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am134
  r = spreadsheet.costpercapita_am134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an134
  r = spreadsheet.costpercapita_an134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao134
  r = spreadsheet.costpercapita_ao134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap134
  r = spreadsheet.costpercapita_ap134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq134
  r = spreadsheet.costpercapita_aq134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as134
  r = spreadsheet.costpercapita_as134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at134
  r = spreadsheet.costpercapita_at134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av134
  r = spreadsheet.costpercapita_av134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw134
  r = spreadsheet.costpercapita_aw134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay134
  r = spreadsheet.costpercapita_ay134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az134
  r = spreadsheet.costpercapita_az134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba134
  r = spreadsheet.costpercapita_ba134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb134
  r = spreadsheet.costpercapita_bb134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc134
  r = spreadsheet.costpercapita_bc134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd134
  r = spreadsheet.costpercapita_bd134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be134
  r = spreadsheet.costpercapita_be134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf134
  r = spreadsheet.costpercapita_bf134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg134
  r = spreadsheet.costpercapita_bg134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi134
  r = spreadsheet.costpercapita_bi134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj134
  r = spreadsheet.costpercapita_bj134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk134
  r = spreadsheet.costpercapita_bk134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl134
  r = spreadsheet.costpercapita_bl134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm134
  r = spreadsheet.costpercapita_bm134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn134
  r = spreadsheet.costpercapita_bn134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo134
  r = spreadsheet.costpercapita_bo134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp134
  r = spreadsheet.costpercapita_bp134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq134
  r = spreadsheet.costpercapita_bq134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs134
  r = spreadsheet.costpercapita_bs134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt134
  r = spreadsheet.costpercapita_bt134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu134
  r = spreadsheet.costpercapita_bu134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv134
  r = spreadsheet.costpercapita_bv134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw134
  r = spreadsheet.costpercapita_bw134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx134
  r = spreadsheet.costpercapita_bx134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by134
  r = spreadsheet.costpercapita_by134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz134
  r = spreadsheet.costpercapita_bz134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca134
  r = spreadsheet.costpercapita_ca134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc134
  r = spreadsheet.costpercapita_cc134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd134
  r = spreadsheet.costpercapita_cd134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf134
  r = spreadsheet.costpercapita_cf134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg134
  r = spreadsheet.costpercapita_cg134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch134
  r = spreadsheet.costpercapita_ch134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci134
  r = spreadsheet.costpercapita_ci134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj134
  r = spreadsheet.costpercapita_cj134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck134
  r = spreadsheet.costpercapita_ck134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl134
  r = spreadsheet.costpercapita_cl134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm134
  r = spreadsheet.costpercapita_cm134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn134
  r = spreadsheet.costpercapita_cn134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp134
  r = spreadsheet.costpercapita_cp134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq134
  r = spreadsheet.costpercapita_cq134
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr134
  r = spreadsheet.costpercapita_cr134
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a135
  r = spreadsheet.costpercapita_a135
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b135
  r = spreadsheet.costpercapita_b135
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic heating",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c135
  r = spreadsheet.costpercapita_c135
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e135
  r = spreadsheet.costpercapita_e135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(173.80600732972863,r[:number])
end

def test_costpercapita_f135
  r = spreadsheet.costpercapita_f135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.81171060962154,r[:number])
end

def test_costpercapita_g135
  r = spreadsheet.costpercapita_g135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.91469376096828,r[:number])
end

def test_costpercapita_h135
  r = spreadsheet.costpercapita_h135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.88181650404886,r[:number])
end

def test_costpercapita_i135
  r = spreadsheet.costpercapita_i135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(234.49914340344068,r[:number])
end

def test_costpercapita_j135
  r = spreadsheet.costpercapita_j135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(275.8824842256332,r[:number])
end

def test_costpercapita_k135
  r = spreadsheet.costpercapita_k135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.33329626304067,r[:number])
end

def test_costpercapita_l135
  r = spreadsheet.costpercapita_l135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(359.16070897681413,r[:number])
end

def test_costpercapita_m135
  r = spreadsheet.costpercapita_m135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(405.9637877965479,r[:number])
end

def test_costpercapita_o135
  r = spreadsheet.costpercapita_o135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.33795510919114,r[:number])
end

def test_costpercapita_p135
  r = spreadsheet.costpercapita_p135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.034025133001,r[:number])
end

def test_costpercapita_q135
  r = spreadsheet.costpercapita_q135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.75254093958796,r[:number])
end

def test_costpercapita_r135
  r = spreadsheet.costpercapita_r135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.09969348097981,r[:number])
end

def test_costpercapita_s135
  r = spreadsheet.costpercapita_s135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.26242787315003,r[:number])
end

def test_costpercapita_t135
  r = spreadsheet.costpercapita_t135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.55177744025016,r[:number])
end

def test_costpercapita_u135
  r = spreadsheet.costpercapita_u135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.05540790654503,r[:number])
end

def test_costpercapita_v135
  r = spreadsheet.costpercapita_v135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.70219244068079,r[:number])
end

def test_costpercapita_w135
  r = spreadsheet.costpercapita_w135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.48957995625537,r[:number])
end

def test_costpercapita_y135
  r = spreadsheet.costpercapita_y135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z135
  r = spreadsheet.costpercapita_z135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa135
  r = spreadsheet.costpercapita_aa135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab135
  r = spreadsheet.costpercapita_ab135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac135
  r = spreadsheet.costpercapita_ac135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad135
  r = spreadsheet.costpercapita_ad135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae135
  r = spreadsheet.costpercapita_ae135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af135
  r = spreadsheet.costpercapita_af135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag135
  r = spreadsheet.costpercapita_ag135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai135
  r = spreadsheet.costpercapita_ai135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.1439624389198,r[:number])
end

def test_costpercapita_aj135
  r = spreadsheet.costpercapita_aj135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(238.84573574262254,r[:number])
end

def test_costpercapita_ak135
  r = spreadsheet.costpercapita_ak135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.66723470055624,r[:number])
end

def test_costpercapita_al135
  r = spreadsheet.costpercapita_al135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283.98150998502865,r[:number])
end

def test_costpercapita_am135
  r = spreadsheet.costpercapita_am135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.76157127659076,r[:number])
end

def test_costpercapita_an135
  r = spreadsheet.costpercapita_an135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(365.4342616658834,r[:number])
end

def test_costpercapita_ao135
  r = spreadsheet.costpercapita_ao135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(405.38870416958565,r[:number])
end

def test_costpercapita_ap135
  r = spreadsheet.costpercapita_ap135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(451.8629014174949,r[:number])
end

def test_costpercapita_aq135
  r = spreadsheet.costpercapita_aq135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(500.4533677528033,r[:number])
end

def test_costpercapita_as135
  r = spreadsheet.costpercapita_as135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.39324990549835,r[:number])
end

def test_costpercapita_at135
  r = spreadsheet.costpercapita_at135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6638.416883086602,r[:number])
end

def test_costpercapita_av135
  r = spreadsheet.costpercapita_av135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw135
  r = spreadsheet.costpercapita_aw135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay135
  r = spreadsheet.costpercapita_ay135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.55279668806116,r[:number])
end

def test_costpercapita_az135
  r = spreadsheet.costpercapita_az135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.79629484789848,r[:number])
end

def test_costpercapita_ba135
  r = spreadsheet.costpercapita_ba135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.83609942052566,r[:number])
end

def test_costpercapita_bb135
  r = spreadsheet.costpercapita_bb135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.76661119673247,r[:number])
end

def test_costpercapita_bc135
  r = spreadsheet.costpercapita_bc135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.1524403005193,r[:number])
end

def test_costpercapita_bd135
  r = spreadsheet.costpercapita_bd135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.3565608910744,r[:number])
end

def test_costpercapita_be135
  r = spreadsheet.costpercapita_be135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.63292830579633,r[:number])
end

def test_costpercapita_bf135
  r = spreadsheet.costpercapita_bf135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(236.10107459364033,r[:number])
end

def test_costpercapita_bg135
  r = spreadsheet.costpercapita_bg135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.8679623055792,r[:number])
end

def test_costpercapita_bi135
  r = spreadsheet.costpercapita_bi135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.55279668806116,r[:number])
end

def test_costpercapita_bj135
  r = spreadsheet.costpercapita_bj135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.08855831781807,r[:number])
end

def test_costpercapita_bk135
  r = spreadsheet.costpercapita_bk135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.4872255285737,r[:number])
end

def test_costpercapita_bl135
  r = spreadsheet.costpercapita_bl135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(320.9897819975165,r[:number])
end

def test_costpercapita_bm135
  r = spreadsheet.costpercapita_bm135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.3879959589417,r[:number])
end

def test_costpercapita_bn135
  r = spreadsheet.costpercapita_bn135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(454.1762008757169,r[:number])
end

def test_costpercapita_bo135
  r = spreadsheet.costpercapita_bo135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(531.4330066426094,r[:number])
end

def test_costpercapita_bp135
  r = spreadsheet.costpercapita_bp135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(612.560450542453,r[:number])
end

def test_costpercapita_bq135
  r = spreadsheet.costpercapita_bq135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(697.2948040082297,r[:number])
end

def test_costpercapita_bs135
  r = spreadsheet.costpercapita_bs135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.8907517972523,r[:number])
end

def test_costpercapita_bt135
  r = spreadsheet.costpercapita_bt135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(253.12258345081904,r[:number])
end

def test_costpercapita_bu135
  r = spreadsheet.costpercapita_bu135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.23976646816163,r[:number])
end

def test_costpercapita_bv135
  r = spreadsheet.costpercapita_bv135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(409.0894754784963,r[:number])
end

def test_costpercapita_bw135
  r = spreadsheet.costpercapita_bw135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(463.65042383209175,r[:number])
end

def test_costpercapita_bx135
  r = spreadsheet.costpercapita_bx135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(543.7279783159671,r[:number])
end

def test_costpercapita_by135
  r = spreadsheet.costpercapita_by135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(622.4884145491544,r[:number])
end

def test_costpercapita_bz135
  r = spreadsheet.costpercapita_bz135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(705.2626429831339,r[:number])
end

def test_costpercapita_ca135
  r = spreadsheet.costpercapita_ca135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(791.7843839644851,r[:number])
end

def test_costpercapita_cc135
  r = spreadsheet.costpercapita_cc135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(477.25071342661795,r[:number])
end

def test_costpercapita_cd135
  r = spreadsheet.costpercapita_cd135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9241.489959251172,r[:number])
end

def test_costpercapita_cf135
  r = spreadsheet.costpercapita_cf135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-105.25321064166748,r[:number])
end

def test_costpercapita_cg135
  r = spreadsheet.costpercapita_cg135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.276847708196511,r[:number])
end

def test_costpercapita_ch135
  r = spreadsheet.costpercapita_ch135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.57253176760541,r[:number])
end

def test_costpercapita_ci135
  r = spreadsheet.costpercapita_ci135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.10796549346766,r[:number])
end

def test_costpercapita_cj135
  r = spreadsheet.costpercapita_cj135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.88885255550102,r[:number])
end

def test_costpercapita_ck135
  r = spreadsheet.costpercapita_ck135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.2937166500837,r[:number])
end

def test_costpercapita_cl135
  r = spreadsheet.costpercapita_cl135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217.0997103795687,r[:number])
end

def test_costpercapita_cm135
  r = spreadsheet.costpercapita_cm135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(253.3997415656389,r[:number])
end

def test_costpercapita_cn135
  r = spreadsheet.costpercapita_cn135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(291.3310162116818,r[:number])
end

def test_costpercapita_cp135
  r = spreadsheet.costpercapita_cp135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.85746352111957,r[:number])
end

def test_costpercapita_cq135
  r = spreadsheet.costpercapita_cq135
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2603.073076164568,r[:number])
end

def test_costpercapita_cr135
  r = spreadsheet.costpercapita_cr135
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a136
  r = spreadsheet.costpercapita_a136
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.a.Insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b136
  r = spreadsheet.costpercapita_b136
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic insulation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c136
  r = spreadsheet.costpercapita_c136
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e136
  r = spreadsheet.costpercapita_e136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.514652560802965,r[:number])
end

def test_costpercapita_f136
  r = spreadsheet.costpercapita_f136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.98528260504752,r[:number])
end

def test_costpercapita_g136
  r = spreadsheet.costpercapita_g136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.072195706483582,r[:number])
end

def test_costpercapita_h136
  r = spreadsheet.costpercapita_h136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.760325529030908,r[:number])
end

def test_costpercapita_i136
  r = spreadsheet.costpercapita_i136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.493671941307134,r[:number])
end

def test_costpercapita_j136
  r = spreadsheet.costpercapita_j136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.270041892880663,r[:number])
end

def test_costpercapita_k136
  r = spreadsheet.costpercapita_k136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.072345398831168,r[:number])
end

def test_costpercapita_l136
  r = spreadsheet.costpercapita_l136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891370929924332,r[:number])
end

def test_costpercapita_m136
  r = spreadsheet.costpercapita_m136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.725442519820897,r[:number])
end

def test_costpercapita_o136
  r = spreadsheet.costpercapita_o136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p136
  r = spreadsheet.costpercapita_p136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q136
  r = spreadsheet.costpercapita_q136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r136
  r = spreadsheet.costpercapita_r136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s136
  r = spreadsheet.costpercapita_s136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t136
  r = spreadsheet.costpercapita_t136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u136
  r = spreadsheet.costpercapita_u136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v136
  r = spreadsheet.costpercapita_v136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w136
  r = spreadsheet.costpercapita_w136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y136
  r = spreadsheet.costpercapita_y136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z136
  r = spreadsheet.costpercapita_z136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa136
  r = spreadsheet.costpercapita_aa136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab136
  r = spreadsheet.costpercapita_ab136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac136
  r = spreadsheet.costpercapita_ac136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad136
  r = spreadsheet.costpercapita_ad136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae136
  r = spreadsheet.costpercapita_ae136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af136
  r = spreadsheet.costpercapita_af136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag136
  r = spreadsheet.costpercapita_ag136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai136
  r = spreadsheet.costpercapita_ai136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.514652560802965,r[:number])
end

def test_costpercapita_aj136
  r = spreadsheet.costpercapita_aj136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.98528260504752,r[:number])
end

def test_costpercapita_ak136
  r = spreadsheet.costpercapita_ak136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.072195706483582,r[:number])
end

def test_costpercapita_al136
  r = spreadsheet.costpercapita_al136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.760325529030908,r[:number])
end

def test_costpercapita_am136
  r = spreadsheet.costpercapita_am136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.493671941307134,r[:number])
end

def test_costpercapita_an136
  r = spreadsheet.costpercapita_an136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.270041892880663,r[:number])
end

def test_costpercapita_ao136
  r = spreadsheet.costpercapita_ao136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.072345398831168,r[:number])
end

def test_costpercapita_ap136
  r = spreadsheet.costpercapita_ap136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.891370929924332,r[:number])
end

def test_costpercapita_aq136
  r = spreadsheet.costpercapita_aq136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.725442519820897,r[:number])
end

def test_costpercapita_as136
  r = spreadsheet.costpercapita_as136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.4205921204588,r[:number])
end

def test_costpercapita_at136
  r = spreadsheet.costpercapita_at136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(269.3400738964204,r[:number])
end

def test_costpercapita_av136
  r = spreadsheet.costpercapita_av136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw136
  r = spreadsheet.costpercapita_aw136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay136
  r = spreadsheet.costpercapita_ay136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.007736521034648,r[:number])
end

def test_costpercapita_az136
  r = spreadsheet.costpercapita_az136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.13770293123549,r[:number])
end

def test_costpercapita_ba136
  r = spreadsheet.costpercapita_ba136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.621148055400853,r[:number])
end

def test_costpercapita_bb136
  r = spreadsheet.costpercapita_bb136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.416134304759662,r[:number])
end

def test_costpercapita_bc136
  r = spreadsheet.costpercapita_bc136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.240844533266599,r[:number])
end

def test_costpercapita_bd136
  r = spreadsheet.costpercapita_bd136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.0938370978059275,r[:number])
end

def test_costpercapita_be136
  r = spreadsheet.costpercapita_be136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.963877574055532,r[:number])
end

def test_costpercapita_bf136
  r = spreadsheet.costpercapita_bf136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.844910589318693,r[:number])
end

def test_costpercapita_bg136
  r = spreadsheet.costpercapita_bg136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.735834415472614,r[:number])
end

def test_costpercapita_bi136
  r = spreadsheet.costpercapita_bi136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.007736521034648,r[:number])
end

def test_costpercapita_bj136
  r = spreadsheet.costpercapita_bj136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.68353337043864,r[:number])
end

def test_costpercapita_bk136
  r = spreadsheet.costpercapita_bk136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.43111189589475,r[:number])
end

def test_costpercapita_bl136
  r = spreadsheet.costpercapita_bl136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.146396029942586,r[:number])
end

def test_costpercapita_bm136
  r = spreadsheet.costpercapita_bm136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.722533599799796,r[:number])
end

def test_costpercapita_bn136
  r = spreadsheet.costpercapita_bn136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.281511293417783,r[:number])
end

def test_costpercapita_bo136
  r = spreadsheet.costpercapita_bo136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.891632722166595,r[:number])
end

def test_costpercapita_bp136
  r = spreadsheet.costpercapita_bp136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.53473176795608,r[:number])
end

def test_costpercapita_bq136
  r = spreadsheet.costpercapita_bq136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.207503246417847,r[:number])
end

def test_costpercapita_bs136
  r = spreadsheet.costpercapita_bs136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.007736521034648,r[:number])
end

def test_costpercapita_bt136
  r = spreadsheet.costpercapita_bt136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.68353337043864,r[:number])
end

def test_costpercapita_bu136
  r = spreadsheet.costpercapita_bu136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.43111189589475,r[:number])
end

def test_costpercapita_bv136
  r = spreadsheet.costpercapita_bv136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.146396029942586,r[:number])
end

def test_costpercapita_bw136
  r = spreadsheet.costpercapita_bw136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.722533599799796,r[:number])
end

def test_costpercapita_bx136
  r = spreadsheet.costpercapita_bx136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.281511293417783,r[:number])
end

def test_costpercapita_by136
  r = spreadsheet.costpercapita_by136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.891632722166595,r[:number])
end

def test_costpercapita_bz136
  r = spreadsheet.costpercapita_bz136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.53473176795608,r[:number])
end

def test_costpercapita_ca136
  r = spreadsheet.costpercapita_ca136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.207503246417847,r[:number])
end

def test_costpercapita_cc136
  r = spreadsheet.costpercapita_cc136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.878521160785414,r[:number])
end

def test_costpercapita_cd136
  r = spreadsheet.costpercapita_cd136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(483.69616527811615,r[:number])
end

def test_costpercapita_cf136
  r = spreadsheet.costpercapita_cf136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-21.506916039768313,r[:number])
end

def test_costpercapita_cg136
  r = spreadsheet.costpercapita_cg136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.698250765391118,r[:number])
end

def test_costpercapita_ch136
  r = spreadsheet.costpercapita_ch136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.35891618941117,r[:number])
end

def test_costpercapita_ci136
  r = spreadsheet.costpercapita_ci136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.386070500911678,r[:number])
end

def test_costpercapita_cj136
  r = spreadsheet.costpercapita_cj136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.228861658492663,r[:number])
end

def test_costpercapita_ck136
  r = spreadsheet.costpercapita_ck136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.011469400537122,r[:number])
end

def test_costpercapita_cl136
  r = spreadsheet.costpercapita_cl136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.819287323335427,r[:number])
end

def test_costpercapita_cm136
  r = spreadsheet.costpercapita_cm136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.643360838031748,r[:number])
end

def test_costpercapita_cn136
  r = spreadsheet.costpercapita_cn136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.48206072659695,r[:number])
end

def test_costpercapita_cp136
  r = spreadsheet.costpercapita_cp136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.4579290403266185,r[:number])
end

def test_costpercapita_cq136
  r = spreadsheet.costpercapita_cq136
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(214.35609138169576,r[:number])
end

def test_costpercapita_cr136
  r = spreadsheet.costpercapita_cr136
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a137
  r = spreadsheet.costpercapita_a137
  assert_equal(:ExcelString,r[:type])
  assert_equal("IX.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b137
  r = spreadsheet.costpercapita_b137
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial heating and cooling",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c137
  r = spreadsheet.costpercapita_c137
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e137
  r = spreadsheet.costpercapita_e137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.90593647892787,r[:number])
end

def test_costpercapita_f137
  r = spreadsheet.costpercapita_f137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.57618745089482,r[:number])
end

def test_costpercapita_g137
  r = spreadsheet.costpercapita_g137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.14360098911644,r[:number])
end

def test_costpercapita_h137
  r = spreadsheet.costpercapita_h137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(227.05552175675783,r[:number])
end

def test_costpercapita_i137
  r = spreadsheet.costpercapita_i137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.49255163086403,r[:number])
end

def test_costpercapita_j137
  r = spreadsheet.costpercapita_j137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(253.76206881934704,r[:number])
end

def test_costpercapita_k137
  r = spreadsheet.costpercapita_k137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(267.1061894909604,r[:number])
end

def test_costpercapita_l137
  r = spreadsheet.costpercapita_l137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(280.6877431521684,r[:number])
end

def test_costpercapita_m137
  r = spreadsheet.costpercapita_m137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(294.0919315695117,r[:number])
end

def test_costpercapita_o137
  r = spreadsheet.costpercapita_o137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.69623194430041,r[:number])
end

def test_costpercapita_p137
  r = spreadsheet.costpercapita_p137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.448951903335242,r[:number])
end

def test_costpercapita_q137
  r = spreadsheet.costpercapita_q137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.742917797001642,r[:number])
end

def test_costpercapita_r137
  r = spreadsheet.costpercapita_r137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.18170799614726,r[:number])
end

def test_costpercapita_s137
  r = spreadsheet.costpercapita_s137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.83989743347613,r[:number])
end

def test_costpercapita_t137
  r = spreadsheet.costpercapita_t137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.74698597370086,r[:number])
end

def test_costpercapita_u137
  r = spreadsheet.costpercapita_u137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.8772667693311,r[:number])
end

def test_costpercapita_v137
  r = spreadsheet.costpercapita_v137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.22245229759264,r[:number])
end

def test_costpercapita_w137
  r = spreadsheet.costpercapita_w137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(40.8003947128125,r[:number])
end

def test_costpercapita_y137
  r = spreadsheet.costpercapita_y137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z137
  r = spreadsheet.costpercapita_z137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa137
  r = spreadsheet.costpercapita_aa137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab137
  r = spreadsheet.costpercapita_ab137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac137
  r = spreadsheet.costpercapita_ac137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad137
  r = spreadsheet.costpercapita_ad137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae137
  r = spreadsheet.costpercapita_ae137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af137
  r = spreadsheet.costpercapita_af137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag137
  r = spreadsheet.costpercapita_ag137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai137
  r = spreadsheet.costpercapita_ai137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.60216842322828,r[:number])
end

def test_costpercapita_aj137
  r = spreadsheet.costpercapita_aj137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(226.02513935423008,r[:number])
end

def test_costpercapita_ak137
  r = spreadsheet.costpercapita_ak137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(241.88651878611807,r[:number])
end

def test_costpercapita_al137
  r = spreadsheet.costpercapita_al137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.2372297529051,r[:number])
end

def test_costpercapita_am137
  r = spreadsheet.costpercapita_am137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.33244906434015,r[:number])
end

def test_costpercapita_an137
  r = spreadsheet.costpercapita_an137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(287.5090547930479,r[:number])
end

def test_costpercapita_ao137
  r = spreadsheet.costpercapita_ao137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(302.9834562602915,r[:number])
end

def test_costpercapita_ap137
  r = spreadsheet.costpercapita_ap137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(318.91019544976103,r[:number])
end

def test_costpercapita_aq137
  r = spreadsheet.costpercapita_aq137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.8923262823242,r[:number])
end

def test_costpercapita_as137
  r = spreadsheet.costpercapita_as137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.486504240694,r[:number])
end

def test_costpercapita_at137
  r = spreadsheet.costpercapita_at137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5490.548965580112,r[:number])
end

def test_costpercapita_av137
  r = spreadsheet.costpercapita_av137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw137
  r = spreadsheet.costpercapita_aw137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay137
  r = spreadsheet.costpercapita_ay137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.68788035096807,r[:number])
end

def test_costpercapita_az137
  r = spreadsheet.costpercapita_az137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.5378068203197,r[:number])
end

def test_costpercapita_ba137
  r = spreadsheet.costpercapita_ba137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.11397120707085,r[:number])
end

def test_costpercapita_bb137
  r = spreadsheet.costpercapita_bb137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.2592350424693,r[:number])
end

def test_costpercapita_bc137
  r = spreadsheet.costpercapita_bc137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.09232038095524,r[:number])
end

def test_costpercapita_bd137
  r = spreadsheet.costpercapita_bd137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.81528809216408,r[:number])
end

def test_costpercapita_be137
  r = spreadsheet.costpercapita_be137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.5872978118534,r[:number])
end

def test_costpercapita_bf137
  r = spreadsheet.costpercapita_bf137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.5153885910411,r[:number])
end

def test_costpercapita_bg137
  r = spreadsheet.costpercapita_bg137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.32688497773154,r[:number])
end

def test_costpercapita_bi137
  r = spreadsheet.costpercapita_bi137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.68788035096807,r[:number])
end

def test_costpercapita_bj137
  r = spreadsheet.costpercapita_bj137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(176.6531760142791,r[:number])
end

def test_costpercapita_bk137
  r = spreadsheet.costpercapita_bk137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(310.9838489680159,r[:number])
end

def test_costpercapita_bl137
  r = spreadsheet.costpercapita_bl137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.38945167970024,r[:number])
end

def test_costpercapita_bm137
  r = spreadsheet.costpercapita_bm137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(435.3399170971145,r[:number])
end

def test_costpercapita_bn137
  r = spreadsheet.costpercapita_bn137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(462.94523368169746,r[:number])
end

def test_costpercapita_bo137
  r = spreadsheet.costpercapita_bo137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(489.92124543922455,r[:number])
end

def test_costpercapita_bp137
  r = spreadsheet.costpercapita_bp137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(516.6011520849523,r[:number])
end

def test_costpercapita_bq137
  r = spreadsheet.costpercapita_bq137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(543.2721927173295,r[:number])
end

def test_costpercapita_bs137
  r = spreadsheet.costpercapita_bs137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.38411229526848,r[:number])
end

def test_costpercapita_bt137
  r = spreadsheet.costpercapita_bt137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.10212791761435,r[:number])
end

def test_costpercapita_bu137
  r = spreadsheet.costpercapita_bu137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(339.72676676501754,r[:number])
end

def test_costpercapita_bv137
  r = spreadsheet.costpercapita_bv137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(437.5711596758475,r[:number])
end

def test_costpercapita_bw137
  r = spreadsheet.costpercapita_bw137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(467.1798145305906,r[:number])
end

def test_costpercapita_bx137
  r = spreadsheet.costpercapita_bx137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(496.69221965539833,r[:number])
end

def test_costpercapita_by137
  r = spreadsheet.costpercapita_by137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(525.7985122085556,r[:number])
end

def test_costpercapita_bz137
  r = spreadsheet.costpercapita_bz137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(554.823604382545,r[:number])
end

def test_costpercapita_ca137
  r = spreadsheet.costpercapita_ca137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(584.072587430142,r[:number])
end

def test_costpercapita_cc137
  r = spreadsheet.costpercapita_cc137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(409.37232276233107,r[:number])
end

def test_costpercapita_cd137
  r = spreadsheet.costpercapita_cd137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8231.964575616652,r[:number])
end

def test_costpercapita_cf137
  r = spreadsheet.costpercapita_cf137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-73.21805612795981,r[:number])
end

def test_costpercapita_cg137
  r = spreadsheet.costpercapita_cg137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-21.92301143661574,r[:number])
end

def test_costpercapita_ch137
  r = spreadsheet.costpercapita_ch137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.84024797889943,r[:number])
end

def test_costpercapita_ci137
  r = spreadsheet.costpercapita_ci137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.33392992294242,r[:number])
end

def test_costpercapita_cj137
  r = spreadsheet.costpercapita_cj137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.8473654662505,r[:number])
end

def test_costpercapita_ck137
  r = spreadsheet.costpercapita_ck137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.1831648623504,r[:number])
end

def test_costpercapita_cl137
  r = spreadsheet.costpercapita_cl137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(222.81505594826413,r[:number])
end

def test_costpercapita_cm137
  r = spreadsheet.costpercapita_cm137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.9134089327839,r[:number])
end

def test_costpercapita_cn137
  r = spreadsheet.costpercapita_cn137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(249.1802611478178,r[:number])
end

def test_costpercapita_cp137
  r = spreadsheet.costpercapita_cp137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(143.885818521637,r[:number])
end

def test_costpercapita_cq137
  r = spreadsheet.costpercapita_cq137
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2741.415610036538,r[:number])
end

def test_costpercapita_cr137
  r = spreadsheet.costpercapita_cr137
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a138
  r = spreadsheet.costpercapita_a138
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b138
  r = spreadsheet.costpercapita_b138
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic lighting, appliances, and cooking",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c138
  r = spreadsheet.costpercapita_c138
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e138
  r = spreadsheet.costpercapita_e138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.88187846996484,r[:number])
end

def test_costpercapita_f138
  r = spreadsheet.costpercapita_f138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.54922733055961,r[:number])
end

def test_costpercapita_g138
  r = spreadsheet.costpercapita_g138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.338975525437284,r[:number])
end

def test_costpercapita_h138
  r = spreadsheet.costpercapita_h138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.615807045277386,r[:number])
end

def test_costpercapita_i138
  r = spreadsheet.costpercapita_i138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.7907575145572,r[:number])
end

def test_costpercapita_j138
  r = spreadsheet.costpercapita_j138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.38572134271137,r[:number])
end

def test_costpercapita_k138
  r = spreadsheet.costpercapita_k138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.19828699451516,r[:number])
end

def test_costpercapita_l138
  r = spreadsheet.costpercapita_l138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.1571421480342,r[:number])
end

def test_costpercapita_m138
  r = spreadsheet.costpercapita_m138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.26563322362614,r[:number])
end

def test_costpercapita_o138
  r = spreadsheet.costpercapita_o138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p138
  r = spreadsheet.costpercapita_p138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q138
  r = spreadsheet.costpercapita_q138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r138
  r = spreadsheet.costpercapita_r138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s138
  r = spreadsheet.costpercapita_s138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t138
  r = spreadsheet.costpercapita_t138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u138
  r = spreadsheet.costpercapita_u138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v138
  r = spreadsheet.costpercapita_v138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w138
  r = spreadsheet.costpercapita_w138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y138
  r = spreadsheet.costpercapita_y138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z138
  r = spreadsheet.costpercapita_z138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa138
  r = spreadsheet.costpercapita_aa138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab138
  r = spreadsheet.costpercapita_ab138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac138
  r = spreadsheet.costpercapita_ac138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad138
  r = spreadsheet.costpercapita_ad138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae138
  r = spreadsheet.costpercapita_ae138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af138
  r = spreadsheet.costpercapita_af138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag138
  r = spreadsheet.costpercapita_ag138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai138
  r = spreadsheet.costpercapita_ai138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.88187846996484,r[:number])
end

def test_costpercapita_aj138
  r = spreadsheet.costpercapita_aj138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.54922733055961,r[:number])
end

def test_costpercapita_ak138
  r = spreadsheet.costpercapita_ak138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.338975525437284,r[:number])
end

def test_costpercapita_al138
  r = spreadsheet.costpercapita_al138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.615807045277386,r[:number])
end

def test_costpercapita_am138
  r = spreadsheet.costpercapita_am138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.7907575145572,r[:number])
end

def test_costpercapita_an138
  r = spreadsheet.costpercapita_an138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.38572134271137,r[:number])
end

def test_costpercapita_ao138
  r = spreadsheet.costpercapita_ao138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.19828699451516,r[:number])
end

def test_costpercapita_ap138
  r = spreadsheet.costpercapita_ap138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.1571421480342,r[:number])
end

def test_costpercapita_aq138
  r = spreadsheet.costpercapita_aq138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.26563322362614,r[:number])
end

def test_costpercapita_as138
  r = spreadsheet.costpercapita_as138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.46482551052036,r[:number])
end

def test_costpercapita_at138
  r = spreadsheet.costpercapita_at138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1299.3760814576958,r[:number])
end

def test_costpercapita_av138
  r = spreadsheet.costpercapita_av138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw138
  r = spreadsheet.costpercapita_aw138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay138
  r = spreadsheet.costpercapita_ay138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.04100486602221,r[:number])
end

def test_costpercapita_az138
  r = spreadsheet.costpercapita_az138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.145809139366996,r[:number])
end

def test_costpercapita_ba138
  r = spreadsheet.costpercapita_ba138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.66496502921976,r[:number])
end

def test_costpercapita_bb138
  r = spreadsheet.costpercapita_bb138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.846945456594,r[:number])
end

def test_costpercapita_bc138
  r = spreadsheet.costpercapita_bc138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.96195245141619,r[:number])
end

def test_costpercapita_bd138
  r = spreadsheet.costpercapita_bd138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.667800928283896,r[:number])
end

def test_costpercapita_be138
  r = spreadsheet.costpercapita_be138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.85932518877871,r[:number])
end

def test_costpercapita_bf138
  r = spreadsheet.costpercapita_bf138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.14701561582093,r[:number])
end

def test_costpercapita_bg138
  r = spreadsheet.costpercapita_bg138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.53307204202788,r[:number])
end

def test_costpercapita_bi138
  r = spreadsheet.costpercapita_bi138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.04100486602221,r[:number])
end

def test_costpercapita_bj138
  r = spreadsheet.costpercapita_bj138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.460010343569515,r[:number])
end

def test_costpercapita_bk138
  r = spreadsheet.costpercapita_bk138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.14562645812124,r[:number])
end

def test_costpercapita_bl138
  r = spreadsheet.costpercapita_bl138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.97558441377163,r[:number])
end

def test_costpercapita_bm138
  r = spreadsheet.costpercapita_bm138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.10697388629849,r[:number])
end

def test_costpercapita_bn138
  r = spreadsheet.costpercapita_bn138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.53376337458397,r[:number])
end

def test_costpercapita_bo138
  r = spreadsheet.costpercapita_bo138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.82695452269239,r[:number])
end

def test_costpercapita_bp138
  r = spreadsheet.costpercapita_bp138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.11710351014398,r[:number])
end

def test_costpercapita_bq138
  r = spreadsheet.costpercapita_bq138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.0767238680872,r[:number])
end

def test_costpercapita_bs138
  r = spreadsheet.costpercapita_bs138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.04100486602221,r[:number])
end

def test_costpercapita_bt138
  r = spreadsheet.costpercapita_bt138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.460010343569515,r[:number])
end

def test_costpercapita_bu138
  r = spreadsheet.costpercapita_bu138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.14562645812124,r[:number])
end

def test_costpercapita_bv138
  r = spreadsheet.costpercapita_bv138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.97558441377163,r[:number])
end

def test_costpercapita_bw138
  r = spreadsheet.costpercapita_bw138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.10697388629849,r[:number])
end

def test_costpercapita_bx138
  r = spreadsheet.costpercapita_bx138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.53376337458397,r[:number])
end

def test_costpercapita_by138
  r = spreadsheet.costpercapita_by138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.82695452269239,r[:number])
end

def test_costpercapita_bz138
  r = spreadsheet.costpercapita_bz138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.11710351014398,r[:number])
end

def test_costpercapita_ca138
  r = spreadsheet.costpercapita_ca138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.0767238680872,r[:number])
end

def test_costpercapita_cc138
  r = spreadsheet.costpercapita_cc138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.9204161381434,r[:number])
end

def test_costpercapita_cd138
  r = spreadsheet.costpercapita_cd138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2093.376627490823,r[:number])
end

def test_costpercapita_cf138
  r = spreadsheet.costpercapita_cf138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-33.84087360394263,r[:number])
end

def test_costpercapita_cg138
  r = spreadsheet.costpercapita_cg138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9107830130099077,r[:number])
end

def test_costpercapita_ch138
  r = spreadsheet.costpercapita_ch138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.80665093268396,r[:number])
end

def test_costpercapita_ci138
  r = spreadsheet.costpercapita_ci138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.35977736849424,r[:number])
end

def test_costpercapita_cj138
  r = spreadsheet.costpercapita_cj138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.31621637174129,r[:number])
end

def test_costpercapita_ck138
  r = spreadsheet.costpercapita_ck138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.1480420318726,r[:number])
end

def test_costpercapita_cl138
  r = spreadsheet.costpercapita_cl138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.628667528177246,r[:number])
end

def test_costpercapita_cm138
  r = spreadsheet.costpercapita_cm138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.95996136210979,r[:number])
end

def test_costpercapita_cn138
  r = spreadsheet.costpercapita_cn138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.81109064446108,r[:number])
end

def test_costpercapita_cp138
  r = spreadsheet.costpercapita_cp138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.45559062762305,r[:number])
end

def test_costpercapita_cq138
  r = spreadsheet.costpercapita_cq138
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(794.0005460331276,r[:number])
end

def test_costpercapita_cr138
  r = spreadsheet.costpercapita_cr138
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a139
  r = spreadsheet.costpercapita_a139
  assert_equal(:ExcelString,r[:type])
  assert_equal("X.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b139
  r = spreadsheet.costpercapita_b139
  assert_equal(:ExcelString,r[:type])
  assert_equal("Commercial lighting, appliances, and catering",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c139
  r = spreadsheet.costpercapita_c139
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e139
  r = spreadsheet.costpercapita_e139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f139
  r = spreadsheet.costpercapita_f139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g139
  r = spreadsheet.costpercapita_g139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h139
  r = spreadsheet.costpercapita_h139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i139
  r = spreadsheet.costpercapita_i139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j139
  r = spreadsheet.costpercapita_j139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k139
  r = spreadsheet.costpercapita_k139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l139
  r = spreadsheet.costpercapita_l139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m139
  r = spreadsheet.costpercapita_m139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o139
  r = spreadsheet.costpercapita_o139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p139
  r = spreadsheet.costpercapita_p139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q139
  r = spreadsheet.costpercapita_q139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r139
  r = spreadsheet.costpercapita_r139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s139
  r = spreadsheet.costpercapita_s139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t139
  r = spreadsheet.costpercapita_t139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u139
  r = spreadsheet.costpercapita_u139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v139
  r = spreadsheet.costpercapita_v139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w139
  r = spreadsheet.costpercapita_w139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y139
  r = spreadsheet.costpercapita_y139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z139
  r = spreadsheet.costpercapita_z139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa139
  r = spreadsheet.costpercapita_aa139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab139
  r = spreadsheet.costpercapita_ab139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac139
  r = spreadsheet.costpercapita_ac139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad139
  r = spreadsheet.costpercapita_ad139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae139
  r = spreadsheet.costpercapita_ae139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af139
  r = spreadsheet.costpercapita_af139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag139
  r = spreadsheet.costpercapita_ag139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai139
  r = spreadsheet.costpercapita_ai139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj139
  r = spreadsheet.costpercapita_aj139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak139
  r = spreadsheet.costpercapita_ak139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al139
  r = spreadsheet.costpercapita_al139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am139
  r = spreadsheet.costpercapita_am139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an139
  r = spreadsheet.costpercapita_an139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao139
  r = spreadsheet.costpercapita_ao139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap139
  r = spreadsheet.costpercapita_ap139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq139
  r = spreadsheet.costpercapita_aq139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as139
  r = spreadsheet.costpercapita_as139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at139
  r = spreadsheet.costpercapita_at139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av139
  r = spreadsheet.costpercapita_av139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw139
  r = spreadsheet.costpercapita_aw139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay139
  r = spreadsheet.costpercapita_ay139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az139
  r = spreadsheet.costpercapita_az139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba139
  r = spreadsheet.costpercapita_ba139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb139
  r = spreadsheet.costpercapita_bb139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc139
  r = spreadsheet.costpercapita_bc139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd139
  r = spreadsheet.costpercapita_bd139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be139
  r = spreadsheet.costpercapita_be139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf139
  r = spreadsheet.costpercapita_bf139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg139
  r = spreadsheet.costpercapita_bg139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi139
  r = spreadsheet.costpercapita_bi139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj139
  r = spreadsheet.costpercapita_bj139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk139
  r = spreadsheet.costpercapita_bk139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl139
  r = spreadsheet.costpercapita_bl139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm139
  r = spreadsheet.costpercapita_bm139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn139
  r = spreadsheet.costpercapita_bn139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo139
  r = spreadsheet.costpercapita_bo139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp139
  r = spreadsheet.costpercapita_bp139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq139
  r = spreadsheet.costpercapita_bq139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs139
  r = spreadsheet.costpercapita_bs139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt139
  r = spreadsheet.costpercapita_bt139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu139
  r = spreadsheet.costpercapita_bu139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv139
  r = spreadsheet.costpercapita_bv139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw139
  r = spreadsheet.costpercapita_bw139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx139
  r = spreadsheet.costpercapita_bx139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by139
  r = spreadsheet.costpercapita_by139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz139
  r = spreadsheet.costpercapita_bz139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca139
  r = spreadsheet.costpercapita_ca139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc139
  r = spreadsheet.costpercapita_cc139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd139
  r = spreadsheet.costpercapita_cd139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf139
  r = spreadsheet.costpercapita_cf139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg139
  r = spreadsheet.costpercapita_cg139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch139
  r = spreadsheet.costpercapita_ch139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci139
  r = spreadsheet.costpercapita_ci139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj139
  r = spreadsheet.costpercapita_cj139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck139
  r = spreadsheet.costpercapita_ck139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl139
  r = spreadsheet.costpercapita_cl139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm139
  r = spreadsheet.costpercapita_cm139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn139
  r = spreadsheet.costpercapita_cn139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp139
  r = spreadsheet.costpercapita_cp139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq139
  r = spreadsheet.costpercapita_cq139
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr139
  r = spreadsheet.costpercapita_cr139
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a140
  r = spreadsheet.costpercapita_a140
  assert_equal(:ExcelString,r[:type])
  assert_equal("XI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b140
  r = spreadsheet.costpercapita_b140
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industrial processes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c140
  r = spreadsheet.costpercapita_c140
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e140
  r = spreadsheet.costpercapita_e140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f140
  r = spreadsheet.costpercapita_f140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g140
  r = spreadsheet.costpercapita_g140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h140
  r = spreadsheet.costpercapita_h140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i140
  r = spreadsheet.costpercapita_i140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j140
  r = spreadsheet.costpercapita_j140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k140
  r = spreadsheet.costpercapita_k140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l140
  r = spreadsheet.costpercapita_l140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m140
  r = spreadsheet.costpercapita_m140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o140
  r = spreadsheet.costpercapita_o140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p140
  r = spreadsheet.costpercapita_p140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q140
  r = spreadsheet.costpercapita_q140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r140
  r = spreadsheet.costpercapita_r140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s140
  r = spreadsheet.costpercapita_s140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t140
  r = spreadsheet.costpercapita_t140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u140
  r = spreadsheet.costpercapita_u140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v140
  r = spreadsheet.costpercapita_v140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w140
  r = spreadsheet.costpercapita_w140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y140
  r = spreadsheet.costpercapita_y140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z140
  r = spreadsheet.costpercapita_z140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa140
  r = spreadsheet.costpercapita_aa140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab140
  r = spreadsheet.costpercapita_ab140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac140
  r = spreadsheet.costpercapita_ac140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad140
  r = spreadsheet.costpercapita_ad140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae140
  r = spreadsheet.costpercapita_ae140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af140
  r = spreadsheet.costpercapita_af140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag140
  r = spreadsheet.costpercapita_ag140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai140
  r = spreadsheet.costpercapita_ai140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj140
  r = spreadsheet.costpercapita_aj140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak140
  r = spreadsheet.costpercapita_ak140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al140
  r = spreadsheet.costpercapita_al140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am140
  r = spreadsheet.costpercapita_am140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an140
  r = spreadsheet.costpercapita_an140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao140
  r = spreadsheet.costpercapita_ao140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap140
  r = spreadsheet.costpercapita_ap140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq140
  r = spreadsheet.costpercapita_aq140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as140
  r = spreadsheet.costpercapita_as140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at140
  r = spreadsheet.costpercapita_at140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av140
  r = spreadsheet.costpercapita_av140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw140
  r = spreadsheet.costpercapita_aw140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay140
  r = spreadsheet.costpercapita_ay140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az140
  r = spreadsheet.costpercapita_az140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba140
  r = spreadsheet.costpercapita_ba140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb140
  r = spreadsheet.costpercapita_bb140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc140
  r = spreadsheet.costpercapita_bc140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd140
  r = spreadsheet.costpercapita_bd140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be140
  r = spreadsheet.costpercapita_be140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf140
  r = spreadsheet.costpercapita_bf140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg140
  r = spreadsheet.costpercapita_bg140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi140
  r = spreadsheet.costpercapita_bi140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj140
  r = spreadsheet.costpercapita_bj140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk140
  r = spreadsheet.costpercapita_bk140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl140
  r = spreadsheet.costpercapita_bl140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm140
  r = spreadsheet.costpercapita_bm140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn140
  r = spreadsheet.costpercapita_bn140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo140
  r = spreadsheet.costpercapita_bo140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp140
  r = spreadsheet.costpercapita_bp140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq140
  r = spreadsheet.costpercapita_bq140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs140
  r = spreadsheet.costpercapita_bs140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt140
  r = spreadsheet.costpercapita_bt140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu140
  r = spreadsheet.costpercapita_bu140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv140
  r = spreadsheet.costpercapita_bv140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw140
  r = spreadsheet.costpercapita_bw140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx140
  r = spreadsheet.costpercapita_bx140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by140
  r = spreadsheet.costpercapita_by140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz140
  r = spreadsheet.costpercapita_bz140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca140
  r = spreadsheet.costpercapita_ca140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc140
  r = spreadsheet.costpercapita_cc140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd140
  r = spreadsheet.costpercapita_cd140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf140
  r = spreadsheet.costpercapita_cf140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg140
  r = spreadsheet.costpercapita_cg140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch140
  r = spreadsheet.costpercapita_ch140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci140
  r = spreadsheet.costpercapita_ci140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj140
  r = spreadsheet.costpercapita_cj140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck140
  r = spreadsheet.costpercapita_ck140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl140
  r = spreadsheet.costpercapita_cl140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm140
  r = spreadsheet.costpercapita_cm140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn140
  r = spreadsheet.costpercapita_cn140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp140
  r = spreadsheet.costpercapita_cp140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq140
  r = spreadsheet.costpercapita_cq140
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr140
  r = spreadsheet.costpercapita_cr140
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a141
  r = spreadsheet.costpercapita_a141
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.ICE",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b141
  r = spreadsheet.costpercapita_b141
  assert_equal(:ExcelString,r[:type])
  assert_equal("Conventional cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c141
  r = spreadsheet.costpercapita_c141
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e141
  r = spreadsheet.costpercapita_e141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1046.1681898639663,r[:number])
end

def test_costpercapita_f141
  r = spreadsheet.costpercapita_f141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(970.643178276923,r[:number])
end

def test_costpercapita_g141
  r = spreadsheet.costpercapita_g141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1027.3399927852709,r[:number])
end

def test_costpercapita_h141
  r = spreadsheet.costpercapita_h141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(957.0050666050329,r[:number])
end

def test_costpercapita_i141
  r = spreadsheet.costpercapita_i141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(917.2289145022638,r[:number])
end

def test_costpercapita_j141
  r = spreadsheet.costpercapita_j141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(876.4271105715496,r[:number])
end

def test_costpercapita_k141
  r = spreadsheet.costpercapita_k141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827.3982838700391,r[:number])
end

def test_costpercapita_l141
  r = spreadsheet.costpercapita_l141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(806.1145746962238,r[:number])
end

def test_costpercapita_m141
  r = spreadsheet.costpercapita_m141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(774.8953731440007,r[:number])
end

def test_costpercapita_o141
  r = spreadsheet.costpercapita_o141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(906.6199100558307,r[:number])
end

def test_costpercapita_p141
  r = spreadsheet.costpercapita_p141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(891.8998931944307,r[:number])
end

def test_costpercapita_q141
  r = spreadsheet.costpercapita_q141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(905.3432526210353,r[:number])
end

def test_costpercapita_r141
  r = spreadsheet.costpercapita_r141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(886.3000130219122,r[:number])
end

def test_costpercapita_s141
  r = spreadsheet.costpercapita_s141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.6169013412442,r[:number])
end

def test_costpercapita_t141
  r = spreadsheet.costpercapita_t141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(833.345476891233,r[:number])
end

def test_costpercapita_u141
  r = spreadsheet.costpercapita_u141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(798.9536155828642,r[:number])
end

def test_costpercapita_v141
  r = spreadsheet.costpercapita_v141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(771.2829291460737,r[:number])
end

def test_costpercapita_w141
  r = spreadsheet.costpercapita_w141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743.5442946637247,r[:number])
end

def test_costpercapita_y141
  r = spreadsheet.costpercapita_y141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z141
  r = spreadsheet.costpercapita_z141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa141
  r = spreadsheet.costpercapita_aa141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab141
  r = spreadsheet.costpercapita_ab141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac141
  r = spreadsheet.costpercapita_ac141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad141
  r = spreadsheet.costpercapita_ad141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae141
  r = spreadsheet.costpercapita_ae141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af141
  r = spreadsheet.costpercapita_af141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag141
  r = spreadsheet.costpercapita_ag141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai141
  r = spreadsheet.costpercapita_ai141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1952.788099919797,r[:number])
end

def test_costpercapita_aj141
  r = spreadsheet.costpercapita_aj141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1862.5430714713536,r[:number])
end

def test_costpercapita_ak141
  r = spreadsheet.costpercapita_ak141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1932.683245406306,r[:number])
end

def test_costpercapita_al141
  r = spreadsheet.costpercapita_al141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1843.305079626945,r[:number])
end

def test_costpercapita_am141
  r = spreadsheet.costpercapita_am141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1778.845815843508,r[:number])
end

def test_costpercapita_an141
  r = spreadsheet.costpercapita_an141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1709.7725874627827,r[:number])
end

def test_costpercapita_ao141
  r = spreadsheet.costpercapita_ao141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1626.3518994529034,r[:number])
end

def test_costpercapita_ap141
  r = spreadsheet.costpercapita_ap141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1577.3975038422975,r[:number])
end

def test_costpercapita_aq141
  r = spreadsheet.costpercapita_aq141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1518.4396678077253,r[:number])
end

def test_costpercapita_as141
  r = spreadsheet.costpercapita_as141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1755.79188564818,r[:number])
end

def test_costpercapita_at141
  r = spreadsheet.costpercapita_at141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37566.83749920489,r[:number])
end

def test_costpercapita_av141
  r = spreadsheet.costpercapita_av141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw141
  r = spreadsheet.costpercapita_aw141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay141
  r = spreadsheet.costpercapita_ay141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(412.6310495425234,r[:number])
end

def test_costpercapita_az141
  r = spreadsheet.costpercapita_az141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.07062329015,r[:number])
end

def test_costpercapita_ba141
  r = spreadsheet.costpercapita_ba141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(675.3413449946263,r[:number])
end

def test_costpercapita_bb141
  r = spreadsheet.costpercapita_bb141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(629.1053530345741,r[:number])
end

def test_costpercapita_bc141
  r = spreadsheet.costpercapita_bc141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(602.957748299586,r[:number])
end

def test_costpercapita_bd141
  r = spreadsheet.costpercapita_bd141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(576.1359119666408,r[:number])
end

def test_costpercapita_be141
  r = spreadsheet.costpercapita_be141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(543.9058868526206,r[:number])
end

def test_costpercapita_bf141
  r = spreadsheet.costpercapita_bf141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.9146386963512,r[:number])
end

def test_costpercapita_bg141
  r = spreadsheet.costpercapita_bg141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(509.3921069989568,r[:number])
end

def test_costpercapita_bi141
  r = spreadsheet.costpercapita_bi141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(412.6310495425234,r[:number])
end

def test_costpercapita_bj141
  r = spreadsheet.costpercapita_bj141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1037.0951353988776,r[:number])
end

def test_costpercapita_bk141
  r = spreadsheet.costpercapita_bk141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1678.4839038227392,r[:number])
end

def test_costpercapita_bl141
  r = spreadsheet.costpercapita_bl141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1881.6070747682404,r[:number])
end

def test_costpercapita_bm141
  r = spreadsheet.costpercapita_bm141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1851.4271375385376,r[:number])
end

def test_costpercapita_bn141
  r = spreadsheet.costpercapita_bn141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1762.3945128412674,r[:number])
end

def test_costpercapita_bo141
  r = spreadsheet.costpercapita_bo141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1683.9535515436842,r[:number])
end

def test_costpercapita_bp141
  r = spreadsheet.costpercapita_bp141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1615.5721284140948,r[:number])
end

def test_costpercapita_bq141
  r = spreadsheet.costpercapita_bq141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1552.5259601650569,r[:number])
end

def test_costpercapita_bs141
  r = spreadsheet.costpercapita_bs141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1319.250959598354,r[:number])
end

def test_costpercapita_bt141
  r = spreadsheet.costpercapita_bt141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1928.9950285933082,r[:number])
end

def test_costpercapita_bu141
  r = spreadsheet.costpercapita_bu141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2583.827156443774,r[:number])
end

def test_costpercapita_bv141
  r = spreadsheet.costpercapita_bv141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2767.9070877901527,r[:number])
end

def test_costpercapita_bw141
  r = spreadsheet.costpercapita_bw141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2713.0440388797815,r[:number])
end

def test_costpercapita_bx141
  r = spreadsheet.costpercapita_bx141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.739989732501,r[:number])
end

def test_costpercapita_by141
  r = spreadsheet.costpercapita_by141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2482.9071671265483,r[:number])
end

def test_costpercapita_bz141
  r = spreadsheet.costpercapita_bz141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2386.8550575601685,r[:number])
end

def test_costpercapita_ca141
  r = spreadsheet.costpercapita_ca141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2296.070254828782,r[:number])
end

def test_costpercapita_cc141
  r = spreadsheet.costpercapita_cc141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2341.6218600614857,r[:number])
end

def test_costpercapita_cd141
  r = spreadsheet.costpercapita_cd141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50302.95573509333,r[:number])
end

def test_costpercapita_cf141
  r = spreadsheet.costpercapita_cf141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-633.5371403214428,r[:number])
end

def test_costpercapita_cg141
  r = spreadsheet.costpercapita_cg141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.45195712195462,r[:number])
end

def test_costpercapita_ch141
  r = spreadsheet.costpercapita_ch141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(651.1439110374682,r[:number])
end

def test_costpercapita_ci141
  r = spreadsheet.costpercapita_ci141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(924.6020081632074,r[:number])
end

def test_costpercapita_cj141
  r = spreadsheet.costpercapita_cj141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(934.1982230362737,r[:number])
end

def test_costpercapita_ck141
  r = spreadsheet.costpercapita_ck141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(885.9674022697178,r[:number])
end

def test_costpercapita_cl141
  r = spreadsheet.costpercapita_cl141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(856.5552676736451,r[:number])
end

def test_costpercapita_cm141
  r = spreadsheet.costpercapita_cm141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(809.4575537178708,r[:number])
end

def test_costpercapita_cn141
  r = spreadsheet.costpercapita_cn141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(777.6305870210562,r[:number])
end

def test_costpercapita_cp141
  r = spreadsheet.costpercapita_cp141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.8299744133058,r[:number])
end

def test_costpercapita_cq141
  r = spreadsheet.costpercapita_cq141
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12736.118235888425,r[:number])
end

def test_costpercapita_cr141
  r = spreadsheet.costpercapita_cr141
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a142
  r = spreadsheet.costpercapita_a142
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.HEV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b142
  r = spreadsheet.costpercapita_b142
  assert_equal(:ExcelString,r[:type])
  assert_equal("Hybrid cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c142
  r = spreadsheet.costpercapita_c142
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e142
  r = spreadsheet.costpercapita_e142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.493996908618019,r[:number])
end

def test_costpercapita_f142
  r = spreadsheet.costpercapita_f142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.708371749558648,r[:number])
end

def test_costpercapita_g142
  r = spreadsheet.costpercapita_g142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.35287129845597,r[:number])
end

def test_costpercapita_h142
  r = spreadsheet.costpercapita_h142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.96462035589897,r[:number])
end

def test_costpercapita_i142
  r = spreadsheet.costpercapita_i142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.3047276829371,r[:number])
end

def test_costpercapita_j142
  r = spreadsheet.costpercapita_j142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(337.5590202913724,r[:number])
end

def test_costpercapita_k142
  r = spreadsheet.costpercapita_k142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(414.86083389181135,r[:number])
end

def test_costpercapita_l142
  r = spreadsheet.costpercapita_l142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(469.4933067952619,r[:number])
end

def test_costpercapita_m142
  r = spreadsheet.costpercapita_m142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(539.2490098499441,r[:number])
end

def test_costpercapita_o142
  r = spreadsheet.costpercapita_o142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4130168017123628,r[:number])
end

def test_costpercapita_p142
  r = spreadsheet.costpercapita_p142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.781629136420298,r[:number])
end

def test_costpercapita_q142
  r = spreadsheet.costpercapita_q142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.564627750841824,r[:number])
end

def test_costpercapita_r142
  r = spreadsheet.costpercapita_r142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.43253582373355,r[:number])
end

def test_costpercapita_s142
  r = spreadsheet.costpercapita_s142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.48019141724666,r[:number])
end

def test_costpercapita_t142
  r = spreadsheet.costpercapita_t142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.84610177132672,r[:number])
end

def test_costpercapita_u142
  r = spreadsheet.costpercapita_u142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(249.10692899441528,r[:number])
end

def test_costpercapita_v142
  r = spreadsheet.costpercapita_v142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.72984944041247,r[:number])
end

def test_costpercapita_w142
  r = spreadsheet.costpercapita_w142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(359.18575382212845,r[:number])
end

def test_costpercapita_y142
  r = spreadsheet.costpercapita_y142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z142
  r = spreadsheet.costpercapita_z142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa142
  r = spreadsheet.costpercapita_aa142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab142
  r = spreadsheet.costpercapita_ab142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac142
  r = spreadsheet.costpercapita_ac142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad142
  r = spreadsheet.costpercapita_ad142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae142
  r = spreadsheet.costpercapita_ae142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af142
  r = spreadsheet.costpercapita_af142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag142
  r = spreadsheet.costpercapita_ag142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai142
  r = spreadsheet.costpercapita_ai142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9070137103303817,r[:number])
end

def test_costpercapita_aj142
  r = spreadsheet.costpercapita_aj142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.490000885978947,r[:number])
end

def test_costpercapita_ak142
  r = spreadsheet.costpercapita_ak142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.917499049297795,r[:number])
end

def test_costpercapita_al142
  r = spreadsheet.costpercapita_al142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(245.39715617963253,r[:number])
end

def test_costpercapita_am142
  r = spreadsheet.costpercapita_am142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(371.7849191001838,r[:number])
end

def test_costpercapita_an142
  r = spreadsheet.costpercapita_an142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(524.4051220626991,r[:number])
end

def test_costpercapita_ao142
  r = spreadsheet.costpercapita_ao142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(663.9677628862268,r[:number])
end

def test_costpercapita_ap142
  r = spreadsheet.costpercapita_ap142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.2231562356743,r[:number])
end

def test_costpercapita_aq142
  r = spreadsheet.costpercapita_aq142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(898.4347636720724,r[:number])
end

def test_costpercapita_as142
  r = spreadsheet.costpercapita_as142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(394.8363770868995,r[:number])
end

def test_costpercapita_at142
  r = spreadsheet.costpercapita_at142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6622.567504184437,r[:number])
end

def test_costpercapita_av142
  r = spreadsheet.costpercapita_av142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw142
  r = spreadsheet.costpercapita_aw142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay142
  r = spreadsheet.costpercapita_ay142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5892642487022075,r[:number])
end

def test_costpercapita_az142
  r = spreadsheet.costpercapita_az142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.613039235511174,r[:number])
end

def test_costpercapita_ba142
  r = spreadsheet.costpercapita_ba142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.95303314492161,r[:number])
end

def test_costpercapita_bb142
  r = spreadsheet.costpercapita_bb142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.67366618371304,r[:number])
end

def test_costpercapita_bc142
  r = spreadsheet.costpercapita_bc142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.57043295289407,r[:number])
end

def test_costpercapita_bd142
  r = spreadsheet.costpercapita_bd142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.90079660053917,r[:number])
end

def test_costpercapita_be142
  r = spreadsheet.costpercapita_be142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.7166035720059,r[:number])
end

def test_costpercapita_bf142
  r = spreadsheet.costpercapita_bf142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308.63029133857424,r[:number])
end

def test_costpercapita_bg142
  r = spreadsheet.costpercapita_bg142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.4855200387395,r[:number])
end

def test_costpercapita_bi142
  r = spreadsheet.costpercapita_bi142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5892642487022075,r[:number])
end

def test_costpercapita_bj142
  r = spreadsheet.costpercapita_bj142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.18287245480526,r[:number])
end

def test_costpercapita_bk142
  r = spreadsheet.costpercapita_bk142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.671584587527775,r[:number])
end

def test_costpercapita_bl142
  r = spreadsheet.costpercapita_bl142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.76854996241323,r[:number])
end

def test_costpercapita_bm142
  r = spreadsheet.costpercapita_bm142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.89085366079513,r[:number])
end

def test_costpercapita_bn142
  r = spreadsheet.costpercapita_bn142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.50488134041086,r[:number])
end

def test_costpercapita_bo142
  r = spreadsheet.costpercapita_bo142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(645.2406600470244,r[:number])
end

def test_costpercapita_bp142
  r = spreadsheet.costpercapita_bp142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(788.7431588353592,r[:number])
end

def test_costpercapita_bq142
  r = spreadsheet.costpercapita_bq142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(919.6448649413103,r[:number])
end

def test_costpercapita_bs142
  r = spreadsheet.costpercapita_bs142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0022810504145703,r[:number])
end

def test_costpercapita_bt142
  r = spreadsheet.costpercapita_bt142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.96450159122556,r[:number])
end

def test_costpercapita_bu142
  r = spreadsheet.costpercapita_bu142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.2362123383696,r[:number])
end

def test_costpercapita_bv142
  r = spreadsheet.costpercapita_bv142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217.2010857861468,r[:number])
end

def test_costpercapita_bw142
  r = spreadsheet.costpercapita_bw142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(418.3710450780418,r[:number])
end

def test_costpercapita_bx142
  r = spreadsheet.costpercapita_bx142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(677.3509831117376,r[:number])
end

def test_costpercapita_by142
  r = spreadsheet.costpercapita_by142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(894.3475890414397,r[:number])
end

def test_costpercapita_bz142
  r = spreadsheet.costpercapita_bz142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1092.4730082757717,r[:number])
end

def test_costpercapita_ca142
  r = spreadsheet.costpercapita_ca142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1278.830618763439,r[:number])
end

def test_costpercapita_cc142
  r = spreadsheet.costpercapita_cc142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(516.7530361151762,r[:number])
end

def test_costpercapita_cd142
  r = spreadsheet.costpercapita_cd142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8367.654577515412,r[:number])
end

def test_costpercapita_cf142
  r = spreadsheet.costpercapita_cf142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9047326599158113,r[:number])
end

def test_costpercapita_cg142
  r = spreadsheet.costpercapita_cg142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.525499294753386,r[:number])
end

def test_costpercapita_ch142
  r = spreadsheet.costpercapita_ch142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.318713289071804,r[:number])
end

def test_costpercapita_ci142
  r = spreadsheet.costpercapita_ci142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-28.19607039348574,r[:number])
end

def test_costpercapita_cj142
  r = spreadsheet.costpercapita_cj142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.586125977858,r[:number])
end

def test_costpercapita_ck142
  r = spreadsheet.costpercapita_ck142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.94586104903846,r[:number])
end

def test_costpercapita_cl142
  r = spreadsheet.costpercapita_cl142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(230.37982615521312,r[:number])
end

def test_costpercapita_cm142
  r = spreadsheet.costpercapita_cm142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(319.2498520400972,r[:number])
end

def test_costpercapita_cn142
  r = spreadsheet.costpercapita_cn142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.3958550913663,r[:number])
end

def test_costpercapita_cp142
  r = spreadsheet.costpercapita_cp142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.91665902827665,r[:number])
end

def test_costpercapita_cq142
  r = spreadsheet.costpercapita_cq142
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1745.0870733309769,r[:number])
end

def test_costpercapita_cr142
  r = spreadsheet.costpercapita_cr142
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a143
  r = spreadsheet.costpercapita_a143
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.EV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b143
  r = spreadsheet.costpercapita_b143
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electric cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c143
  r = spreadsheet.costpercapita_c143
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e143
  r = spreadsheet.costpercapita_e143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f143
  r = spreadsheet.costpercapita_f143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5778063548748227,r[:number])
end

def test_costpercapita_g143
  r = spreadsheet.costpercapita_g143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.278579343295515,r[:number])
end

def test_costpercapita_h143
  r = spreadsheet.costpercapita_h143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.1792250614382,r[:number])
end

def test_costpercapita_i143
  r = spreadsheet.costpercapita_i143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.22555970502398,r[:number])
end

def test_costpercapita_j143
  r = spreadsheet.costpercapita_j143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.0592455826994,r[:number])
end

def test_costpercapita_k143
  r = spreadsheet.costpercapita_k143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.29284827993803,r[:number])
end

def test_costpercapita_l143
  r = spreadsheet.costpercapita_l143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.24063448727328,r[:number])
end

def test_costpercapita_m143
  r = spreadsheet.costpercapita_m143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.32785836113763,r[:number])
end

def test_costpercapita_o143
  r = spreadsheet.costpercapita_o143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p143
  r = spreadsheet.costpercapita_p143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.697506235010551,r[:number])
end

def test_costpercapita_q143
  r = spreadsheet.costpercapita_q143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.430006760444356,r[:number])
end

def test_costpercapita_r143
  r = spreadsheet.costpercapita_r143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.897396129180132,r[:number])
end

def test_costpercapita_s143
  r = spreadsheet.costpercapita_s143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.475771810202161,r[:number])
end

def test_costpercapita_t143
  r = spreadsheet.costpercapita_t143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.808367108507596,r[:number])
end

def test_costpercapita_u143
  r = spreadsheet.costpercapita_u143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.1214397192571,r[:number])
end

def test_costpercapita_v143
  r = spreadsheet.costpercapita_v143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.386799017516644,r[:number])
end

def test_costpercapita_w143
  r = spreadsheet.costpercapita_w143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.699934359889394,r[:number])
end

def test_costpercapita_y143
  r = spreadsheet.costpercapita_y143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z143
  r = spreadsheet.costpercapita_z143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa143
  r = spreadsheet.costpercapita_aa143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab143
  r = spreadsheet.costpercapita_ab143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac143
  r = spreadsheet.costpercapita_ac143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad143
  r = spreadsheet.costpercapita_ad143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae143
  r = spreadsheet.costpercapita_ae143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af143
  r = spreadsheet.costpercapita_af143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag143
  r = spreadsheet.costpercapita_ag143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai143
  r = spreadsheet.costpercapita_ai143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj143
  r = spreadsheet.costpercapita_aj143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.275312589885374,r[:number])
end

def test_costpercapita_ak143
  r = spreadsheet.costpercapita_ak143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.708586103739871,r[:number])
end

def test_costpercapita_al143
  r = spreadsheet.costpercapita_al143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.07662119061834,r[:number])
end

def test_costpercapita_am143
  r = spreadsheet.costpercapita_am143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.70133151522615,r[:number])
end

def test_costpercapita_an143
  r = spreadsheet.costpercapita_an143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(84.867612691207,r[:number])
end

def test_costpercapita_ao143
  r = spreadsheet.costpercapita_ao143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.41428799919512,r[:number])
end

def test_costpercapita_ap143
  r = spreadsheet.costpercapita_ap143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.62743350478992,r[:number])
end

def test_costpercapita_aq143
  r = spreadsheet.costpercapita_aq143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.02779272102701,r[:number])
end

def test_costpercapita_as143
  r = spreadsheet.costpercapita_as143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.96655314618764,r[:number])
end

def test_costpercapita_at143
  r = spreadsheet.costpercapita_at143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1009.1831607093295,r[:number])
end

def test_costpercapita_av143
  r = spreadsheet.costpercapita_av143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw143
  r = spreadsheet.costpercapita_aw143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay143
  r = spreadsheet.costpercapita_ay143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az143
  r = spreadsheet.costpercapita_az143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.351938572235174,r[:number])
end

def test_costpercapita_ba143
  r = spreadsheet.costpercapita_ba143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.469973814313631,r[:number])
end

def test_costpercapita_bb143
  r = spreadsheet.costpercapita_bb143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.46835904955403,r[:number])
end

def test_costpercapita_bc143
  r = spreadsheet.costpercapita_bc143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.70198238463485,r[:number])
end

def test_costpercapita_bd143
  r = spreadsheet.costpercapita_bd143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.42529257543974,r[:number])
end

def test_costpercapita_be143
  r = spreadsheet.costpercapita_be143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.439388986477844,r[:number])
end

def test_costpercapita_bf143
  r = spreadsheet.costpercapita_bf143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.09032749496788,r[:number])
end

def test_costpercapita_bg143
  r = spreadsheet.costpercapita_bg143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.406616831121234,r[:number])
end

def test_costpercapita_bi143
  r = spreadsheet.costpercapita_bi143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj143
  r = spreadsheet.costpercapita_bj143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.351938572235174,r[:number])
end

def test_costpercapita_bk143
  r = spreadsheet.costpercapita_bk143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.744914267728359,r[:number])
end

def test_costpercapita_bl143
  r = spreadsheet.costpercapita_bl143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.03539080940245,r[:number])
end

def test_costpercapita_bm143
  r = spreadsheet.costpercapita_bm143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.827168921097424,r[:number])
end

def test_costpercapita_bn143
  r = spreadsheet.costpercapita_bn143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(95.72023432047398,r[:number])
end

def test_costpercapita_bo143
  r = spreadsheet.costpercapita_bo143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.23363414858058,r[:number])
end

def test_costpercapita_bp143
  r = spreadsheet.costpercapita_bp143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.11512892033062,r[:number])
end

def test_costpercapita_bq143
  r = spreadsheet.costpercapita_bq143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.92085424387415,r[:number])
end

def test_costpercapita_bs143
  r = spreadsheet.costpercapita_bs143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt143
  r = spreadsheet.costpercapita_bt143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.049444807245725,r[:number])
end

def test_costpercapita_bu143
  r = spreadsheet.costpercapita_bu143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.174921028172714,r[:number])
end

def test_costpercapita_bv143
  r = spreadsheet.costpercapita_bv143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.93278693858258,r[:number])
end

def test_costpercapita_bw143
  r = spreadsheet.costpercapita_bw143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.30294073129959,r[:number])
end

def test_costpercapita_bx143
  r = spreadsheet.costpercapita_bx143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.52860142898157,r[:number])
end

def test_costpercapita_by143
  r = spreadsheet.costpercapita_by143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.3550738678377,r[:number])
end

def test_costpercapita_bz143
  r = spreadsheet.costpercapita_bz143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.50192793784726,r[:number])
end

def test_costpercapita_ca143
  r = spreadsheet.costpercapita_ca143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.62078860376351,r[:number])
end

def test_costpercapita_cc143
  r = spreadsheet.costpercapita_cc143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.94072059374786,r[:number])
end

def test_costpercapita_cd143
  r = spreadsheet.costpercapita_cd143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1350.7517349378224,r[:number])
end

def test_costpercapita_cf143
  r = spreadsheet.costpercapita_cf143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg143
  r = spreadsheet.costpercapita_cg143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.225867782639649,r[:number])
end

def test_costpercapita_ch143
  r = spreadsheet.costpercapita_ch143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.46633492443284336,r[:number])
end

def test_costpercapita_ci143
  r = spreadsheet.costpercapita_ci143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-6.143834252035753,r[:number])
end

def test_costpercapita_cj143
  r = spreadsheet.costpercapita_cj143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.601609216073442,r[:number])
end

def test_costpercapita_ck143
  r = spreadsheet.costpercapita_ck143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.660988737774566,r[:number])
end

def test_costpercapita_cl143
  r = spreadsheet.costpercapita_cl143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.94078586864255,r[:number])
end

def test_costpercapita_cm143
  r = spreadsheet.costpercapita_cm143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.87449443305734,r[:number])
end

def test_costpercapita_cn143
  r = spreadsheet.costpercapita_cn143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.5929958827365,r[:number])
end

def test_costpercapita_cp143
  r = spreadsheet.costpercapita_cp143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.974167447560205,r[:number])
end

def test_costpercapita_cq143
  r = spreadsheet.costpercapita_cq143
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.56857422849293,r[:number])
end

def test_costpercapita_cr143
  r = spreadsheet.costpercapita_cr143
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a144
  r = spreadsheet.costpercapita_a144
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.FCV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b144
  r = spreadsheet.costpercapita_b144
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fuel cell cars and buses",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c144
  r = spreadsheet.costpercapita_c144
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e144
  r = spreadsheet.costpercapita_e144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f144
  r = spreadsheet.costpercapita_f144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g144
  r = spreadsheet.costpercapita_g144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h144
  r = spreadsheet.costpercapita_h144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i144
  r = spreadsheet.costpercapita_i144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j144
  r = spreadsheet.costpercapita_j144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k144
  r = spreadsheet.costpercapita_k144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l144
  r = spreadsheet.costpercapita_l144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m144
  r = spreadsheet.costpercapita_m144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o144
  r = spreadsheet.costpercapita_o144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p144
  r = spreadsheet.costpercapita_p144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q144
  r = spreadsheet.costpercapita_q144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r144
  r = spreadsheet.costpercapita_r144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s144
  r = spreadsheet.costpercapita_s144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t144
  r = spreadsheet.costpercapita_t144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u144
  r = spreadsheet.costpercapita_u144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v144
  r = spreadsheet.costpercapita_v144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w144
  r = spreadsheet.costpercapita_w144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y144
  r = spreadsheet.costpercapita_y144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z144
  r = spreadsheet.costpercapita_z144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa144
  r = spreadsheet.costpercapita_aa144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab144
  r = spreadsheet.costpercapita_ab144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac144
  r = spreadsheet.costpercapita_ac144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad144
  r = spreadsheet.costpercapita_ad144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae144
  r = spreadsheet.costpercapita_ae144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af144
  r = spreadsheet.costpercapita_af144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag144
  r = spreadsheet.costpercapita_ag144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai144
  r = spreadsheet.costpercapita_ai144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj144
  r = spreadsheet.costpercapita_aj144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak144
  r = spreadsheet.costpercapita_ak144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al144
  r = spreadsheet.costpercapita_al144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am144
  r = spreadsheet.costpercapita_am144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an144
  r = spreadsheet.costpercapita_an144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao144
  r = spreadsheet.costpercapita_ao144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap144
  r = spreadsheet.costpercapita_ap144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq144
  r = spreadsheet.costpercapita_aq144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as144
  r = spreadsheet.costpercapita_as144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at144
  r = spreadsheet.costpercapita_at144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av144
  r = spreadsheet.costpercapita_av144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw144
  r = spreadsheet.costpercapita_aw144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay144
  r = spreadsheet.costpercapita_ay144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az144
  r = spreadsheet.costpercapita_az144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba144
  r = spreadsheet.costpercapita_ba144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb144
  r = spreadsheet.costpercapita_bb144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc144
  r = spreadsheet.costpercapita_bc144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd144
  r = spreadsheet.costpercapita_bd144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be144
  r = spreadsheet.costpercapita_be144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf144
  r = spreadsheet.costpercapita_bf144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg144
  r = spreadsheet.costpercapita_bg144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi144
  r = spreadsheet.costpercapita_bi144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj144
  r = spreadsheet.costpercapita_bj144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk144
  r = spreadsheet.costpercapita_bk144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl144
  r = spreadsheet.costpercapita_bl144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm144
  r = spreadsheet.costpercapita_bm144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn144
  r = spreadsheet.costpercapita_bn144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo144
  r = spreadsheet.costpercapita_bo144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp144
  r = spreadsheet.costpercapita_bp144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq144
  r = spreadsheet.costpercapita_bq144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs144
  r = spreadsheet.costpercapita_bs144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt144
  r = spreadsheet.costpercapita_bt144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu144
  r = spreadsheet.costpercapita_bu144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv144
  r = spreadsheet.costpercapita_bv144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw144
  r = spreadsheet.costpercapita_bw144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx144
  r = spreadsheet.costpercapita_bx144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by144
  r = spreadsheet.costpercapita_by144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz144
  r = spreadsheet.costpercapita_bz144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca144
  r = spreadsheet.costpercapita_ca144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc144
  r = spreadsheet.costpercapita_cc144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd144
  r = spreadsheet.costpercapita_cd144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf144
  r = spreadsheet.costpercapita_cf144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg144
  r = spreadsheet.costpercapita_cg144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch144
  r = spreadsheet.costpercapita_ch144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci144
  r = spreadsheet.costpercapita_ci144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj144
  r = spreadsheet.costpercapita_cj144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck144
  r = spreadsheet.costpercapita_ck144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl144
  r = spreadsheet.costpercapita_cl144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm144
  r = spreadsheet.costpercapita_cm144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn144
  r = spreadsheet.costpercapita_cn144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp144
  r = spreadsheet.costpercapita_cp144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq144
  r = spreadsheet.costpercapita_cq144
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr144
  r = spreadsheet.costpercapita_cr144
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a145
  r = spreadsheet.costpercapita_a145
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Bike",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b145
  r = spreadsheet.costpercapita_b145
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bikes",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c145
  r = spreadsheet.costpercapita_c145
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e145
  r = spreadsheet.costpercapita_e145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.20482346514259,r[:number])
end

def test_costpercapita_f145
  r = spreadsheet.costpercapita_f145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.12243546772614,r[:number])
end

def test_costpercapita_g145
  r = spreadsheet.costpercapita_g145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.89559634040153,r[:number])
end

def test_costpercapita_h145
  r = spreadsheet.costpercapita_h145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.99599676942734,r[:number])
end

def test_costpercapita_i145
  r = spreadsheet.costpercapita_i145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.34295196575151,r[:number])
end

def test_costpercapita_j145
  r = spreadsheet.costpercapita_j145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.41247039825308,r[:number])
end

def test_costpercapita_k145
  r = spreadsheet.costpercapita_k145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.67016146832964,r[:number])
end

def test_costpercapita_l145
  r = spreadsheet.costpercapita_l145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.73009932963778,r[:number])
end

def test_costpercapita_m145
  r = spreadsheet.costpercapita_m145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.72957866226623,r[:number])
end

def test_costpercapita_o145
  r = spreadsheet.costpercapita_o145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.33060278324329,r[:number])
end

def test_costpercapita_p145
  r = spreadsheet.costpercapita_p145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.061217733863067,r[:number])
end

def test_costpercapita_q145
  r = spreadsheet.costpercapita_q145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.947798170200763,r[:number])
end

def test_costpercapita_r145
  r = spreadsheet.costpercapita_r145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.99799838471367,r[:number])
end

def test_costpercapita_s145
  r = spreadsheet.costpercapita_s145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.171475982875755,r[:number])
end

def test_costpercapita_t145
  r = spreadsheet.costpercapita_t145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.70623519912653,r[:number])
end

def test_costpercapita_u145
  r = spreadsheet.costpercapita_u145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.33508073416481,r[:number])
end

def test_costpercapita_v145
  r = spreadsheet.costpercapita_v145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.36504966481889,r[:number])
end

def test_costpercapita_w145
  r = spreadsheet.costpercapita_w145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.86478933113311,r[:number])
end

def test_costpercapita_y145
  r = spreadsheet.costpercapita_y145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z145
  r = spreadsheet.costpercapita_z145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa145
  r = spreadsheet.costpercapita_aa145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab145
  r = spreadsheet.costpercapita_ab145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac145
  r = spreadsheet.costpercapita_ac145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad145
  r = spreadsheet.costpercapita_ad145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae145
  r = spreadsheet.costpercapita_ae145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af145
  r = spreadsheet.costpercapita_af145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag145
  r = spreadsheet.costpercapita_ag145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai145
  r = spreadsheet.costpercapita_ai145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.53542624838589,r[:number])
end

def test_costpercapita_aj145
  r = spreadsheet.costpercapita_aj145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.18365320158921,r[:number])
end

def test_costpercapita_ak145
  r = spreadsheet.costpercapita_ak145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.84339451060228,r[:number])
end

def test_costpercapita_al145
  r = spreadsheet.costpercapita_al145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.99399515414099,r[:number])
end

def test_costpercapita_am145
  r = spreadsheet.costpercapita_am145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.51442794862729,r[:number])
end

def test_costpercapita_an145
  r = spreadsheet.costpercapita_an145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.11870559737963,r[:number])
end

def test_costpercapita_ao145
  r = spreadsheet.costpercapita_ao145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.00524220249446,r[:number])
end

def test_costpercapita_ap145
  r = spreadsheet.costpercapita_ap145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(142.09514899445668,r[:number])
end

def test_costpercapita_aq145
  r = spreadsheet.costpercapita_aq145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.59436799339935,r[:number])
end

def test_costpercapita_as145
  r = spreadsheet.costpercapita_as145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.54270687234174,r[:number])
end

def test_costpercapita_at145
  r = spreadsheet.costpercapita_at145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2215.0948043522963,r[:number])
end

def test_costpercapita_av145
  r = spreadsheet.costpercapita_av145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw145
  r = spreadsheet.costpercapita_aw145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay145
  r = spreadsheet.costpercapita_ay145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.985117268764544,r[:number])
end

def test_costpercapita_az145
  r = spreadsheet.costpercapita_az145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.57840502642512,r[:number])
end

def test_costpercapita_ba145
  r = spreadsheet.costpercapita_ba145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.37350134897027,r[:number])
end

def test_costpercapita_bb145
  r = spreadsheet.costpercapita_bb145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.38371477361712,r[:number])
end

def test_costpercapita_bc145
  r = spreadsheet.costpercapita_bc145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.556005630595486,r[:number])
end

def test_costpercapita_bd145
  r = spreadsheet.costpercapita_bd145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.203287076074865,r[:number])
end

def test_costpercapita_be145
  r = spreadsheet.costpercapita_be145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.97426735839846,r[:number])
end

def test_costpercapita_bf145
  r = spreadsheet.costpercapita_bf145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.272619718917014,r[:number])
end

def test_costpercapita_bg145
  r = spreadsheet.costpercapita_bg145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.18859740831957,r[:number])
end

def test_costpercapita_bi145
  r = spreadsheet.costpercapita_bi145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.985117268764544,r[:number])
end

def test_costpercapita_bj145
  r = spreadsheet.costpercapita_bj145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.87153660001087,r[:number])
end

def test_costpercapita_bk145
  r = spreadsheet.costpercapita_bk145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.41590717805283,r[:number])
end

def test_costpercapita_bl145
  r = spreadsheet.costpercapita_bl145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.88614387484613,r[:number])
end

def test_costpercapita_bm145
  r = spreadsheet.costpercapita_bm145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.86644862675573,r[:number])
end

def test_costpercapita_bn145
  r = spreadsheet.costpercapita_bn145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.84352874144105,r[:number])
end

def test_costpercapita_bo145
  r = spreadsheet.costpercapita_bo145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.50973018655029,r[:number])
end

def test_costpercapita_bp145
  r = spreadsheet.costpercapita_bp145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(168.1812091559366,r[:number])
end

def test_costpercapita_bq145
  r = spreadsheet.costpercapita_bq145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.09482162535178,r[:number])
end

def test_costpercapita_bs145
  r = spreadsheet.costpercapita_bs145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.31572005200783,r[:number])
end

def test_costpercapita_bt145
  r = spreadsheet.costpercapita_bt145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.93275433387394,r[:number])
end

def test_costpercapita_bu145
  r = spreadsheet.costpercapita_bu145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.3637053482536,r[:number])
end

def test_costpercapita_bv145
  r = spreadsheet.costpercapita_bv145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.8841422595598,r[:number])
end

def test_costpercapita_bw145
  r = spreadsheet.costpercapita_bw145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(163.0379246096315,r[:number])
end

def test_costpercapita_bx145
  r = spreadsheet.costpercapita_bx145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(179.5497639405676,r[:number])
end

def test_costpercapita_by145
  r = spreadsheet.costpercapita_by145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.8448109207151,r[:number])
end

def test_costpercapita_bz145
  r = spreadsheet.costpercapita_bz145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215.5462588207555,r[:number])
end

def test_costpercapita_ca145
  r = spreadsheet.costpercapita_ca145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.9596109564849,r[:number])
end

def test_costpercapita_cc145
  r = spreadsheet.costpercapita_cc145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(154.60385458242774,r[:number])
end

def test_costpercapita_cd145
  r = spreadsheet.costpercapita_cd145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3058.290866025513,r[:number])
end

def test_costpercapita_cf145
  r = spreadsheet.costpercapita_cf145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-32.21970619637805,r[:number])
end

def test_costpercapita_cg145
  r = spreadsheet.costpercapita_cg145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7491011322847332,r[:number])
end

def test_costpercapita_ch145
  r = spreadsheet.costpercapita_ch145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.52031083765131,r[:number])
end

def test_costpercapita_ci145
  r = spreadsheet.costpercapita_ci145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.89014710541879,r[:number])
end

def test_costpercapita_cj145
  r = spreadsheet.costpercapita_cj145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.52349666100421,r[:number])
end

def test_costpercapita_ck145
  r = spreadsheet.costpercapita_ck145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.43105834318798,r[:number])
end

def test_costpercapita_cl145
  r = spreadsheet.costpercapita_cl145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(66.83956871822066,r[:number])
end

def test_costpercapita_cm145
  r = spreadsheet.costpercapita_cm145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.45110982629883,r[:number])
end

def test_costpercapita_cn145
  r = spreadsheet.costpercapita_cn145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.36524296308556,r[:number])
end

def test_costpercapita_cp145
  r = spreadsheet.costpercapita_cp145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.061147710086,r[:number])
end

def test_costpercapita_cq145
  r = spreadsheet.costpercapita_cq145
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(843.1960616732168,r[:number])
end

def test_costpercapita_cr145
  r = spreadsheet.costpercapita_cr145
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a146
  r = spreadsheet.costpercapita_a146
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b146
  r = spreadsheet.costpercapita_b146
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rail",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c146
  r = spreadsheet.costpercapita_c146
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e146
  r = spreadsheet.costpercapita_e146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.241582045011786,r[:number])
end

def test_costpercapita_f146
  r = spreadsheet.costpercapita_f146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1233556280853512,r[:number])
end

def test_costpercapita_g146
  r = spreadsheet.costpercapita_g146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3569751634959204,r[:number])
end

def test_costpercapita_h146
  r = spreadsheet.costpercapita_h146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.290762626571086,r[:number])
end

def test_costpercapita_i146
  r = spreadsheet.costpercapita_i146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1947324193968267,r[:number])
end

def test_costpercapita_j146
  r = spreadsheet.costpercapita_j146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.147373828242409,r[:number])
end

def test_costpercapita_k146
  r = spreadsheet.costpercapita_k146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.048919191111714,r[:number])
end

def test_costpercapita_l146
  r = spreadsheet.costpercapita_l146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0100807576754305,r[:number])
end

def test_costpercapita_m146
  r = spreadsheet.costpercapita_m146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9726212136466733,r[:number])
end

def test_costpercapita_o146
  r = spreadsheet.costpercapita_o146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.70395383068492,r[:number])
end

def test_costpercapita_p146
  r = spreadsheet.costpercapita_p146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.07885631308855,r[:number])
end

def test_costpercapita_q146
  r = spreadsheet.costpercapita_q146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.50825955820358,r[:number])
end

def test_costpercapita_r146
  r = spreadsheet.costpercapita_r146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.2850193216049,r[:number])
end

def test_costpercapita_s146
  r = spreadsheet.costpercapita_s146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.29047939724141,r[:number])
end

def test_costpercapita_t146
  r = spreadsheet.costpercapita_t146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.33339064706897,r[:number])
end

def test_costpercapita_u146
  r = spreadsheet.costpercapita_u146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.50432299949576,r[:number])
end

def test_costpercapita_v146
  r = spreadsheet.costpercapita_v146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(117.67572814603646,r[:number])
end

def test_costpercapita_w146
  r = spreadsheet.costpercapita_w146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.85078685581392,r[:number])
end

def test_costpercapita_y146
  r = spreadsheet.costpercapita_y146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z146
  r = spreadsheet.costpercapita_z146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa146
  r = spreadsheet.costpercapita_aa146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab146
  r = spreadsheet.costpercapita_ab146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac146
  r = spreadsheet.costpercapita_ac146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad146
  r = spreadsheet.costpercapita_ad146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae146
  r = spreadsheet.costpercapita_ae146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af146
  r = spreadsheet.costpercapita_af146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag146
  r = spreadsheet.costpercapita_ag146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai146
  r = spreadsheet.costpercapita_ai146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.94553587569672,r[:number])
end

def test_costpercapita_aj146
  r = spreadsheet.costpercapita_aj146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.20221194117389,r[:number])
end

def test_costpercapita_ak146
  r = spreadsheet.costpercapita_ak146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.8652347216995,r[:number])
end

def test_costpercapita_al146
  r = spreadsheet.costpercapita_al146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(128.575781948176,r[:number])
end

def test_costpercapita_am146
  r = spreadsheet.costpercapita_am146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.48521181663823,r[:number])
end

def test_costpercapita_an146
  r = spreadsheet.costpercapita_an146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.48076447531137,r[:number])
end

def test_costpercapita_ao146
  r = spreadsheet.costpercapita_ao146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.55324219060746,r[:number])
end

def test_costpercapita_ap146
  r = spreadsheet.costpercapita_ap146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.6858089037119,r[:number])
end

def test_costpercapita_aq146
  r = spreadsheet.costpercapita_aq146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.8234080694606,r[:number])
end

def test_costpercapita_as146
  r = spreadsheet.costpercapita_as146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.62413332694172,r[:number])
end

def test_costpercapita_at146
  r = spreadsheet.costpercapita_at146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2660.769832606865,r[:number])
end

def test_costpercapita_av146
  r = spreadsheet.costpercapita_av146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw146
  r = spreadsheet.costpercapita_aw146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay146
  r = spreadsheet.costpercapita_ay146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.48970644231974053,r[:number])
end

def test_costpercapita_az146
  r = spreadsheet.costpercapita_az146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7384590360603365,r[:number])
end

def test_costpercapita_ba146
  r = spreadsheet.costpercapita_ba146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.89203324943584,r[:number])
end

def test_costpercapita_bb146
  r = spreadsheet.costpercapita_bb146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8485071879018272,r[:number])
end

def test_costpercapita_bc146
  r = spreadsheet.costpercapita_bc146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7853799177394438,r[:number])
end

def test_costpercapita_bd146
  r = spreadsheet.costpercapita_bd146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7542478535037628,r[:number])
end

def test_costpercapita_be146
  r = spreadsheet.costpercapita_be146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6895268385255218,r[:number])
end

def test_costpercapita_bf146
  r = spreadsheet.costpercapita_bf146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6639956608642369,r[:number])
end

def test_costpercapita_bg146
  r = spreadsheet.costpercapita_bg146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6393709221945394,r[:number])
end

def test_costpercapita_bi146
  r = spreadsheet.costpercapita_bi146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.48970644231974053,r[:number])
end

def test_costpercapita_bj146
  r = spreadsheet.costpercapita_bj146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.212017374531901,r[:number])
end

def test_costpercapita_bk146
  r = spreadsheet.costpercapita_bk146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0643714168156757,r[:number])
end

def test_costpercapita_bl146
  r = spreadsheet.costpercapita_bl146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4050865499086194,r[:number])
end

def test_costpercapita_bm146
  r = spreadsheet.costpercapita_bm146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4515026697571067,r[:number])
end

def test_costpercapita_bn146
  r = spreadsheet.costpercapita_bn146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3270123179514726,r[:number])
end

def test_costpercapita_bo146
  r = spreadsheet.costpercapita_bo146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1782142845617547,r[:number])
end

def test_costpercapita_bp146
  r = spreadsheet.costpercapita_bp146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0632055320137908,r[:number])
end

def test_costpercapita_bq146
  r = spreadsheet.costpercapita_bq146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.954136398425362,r[:number])
end

def test_costpercapita_bs146
  r = spreadsheet.costpercapita_bs146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(134.19366027300464,r[:number])
end

def test_costpercapita_bt146
  r = spreadsheet.costpercapita_bt146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.29087368762046,r[:number])
end

def test_costpercapita_bu146
  r = spreadsheet.costpercapita_bu146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(130.57263097501928,r[:number])
end

def test_costpercapita_bv146
  r = spreadsheet.costpercapita_bv146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.6901058715135,r[:number])
end

def test_costpercapita_bw146
  r = spreadsheet.costpercapita_bw146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.74198206699852,r[:number])
end

def test_costpercapita_bx146
  r = spreadsheet.costpercapita_bx146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.66040296502045,r[:number])
end

def test_costpercapita_by146
  r = spreadsheet.costpercapita_by146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(122.6825372840575,r[:number])
end

def test_costpercapita_bz146
  r = spreadsheet.costpercapita_bz146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.73893367805026,r[:number])
end

def test_costpercapita_ca146
  r = spreadsheet.costpercapita_ca146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.80492325423927,r[:number])
end

def test_costpercapita_cc146
  r = spreadsheet.costpercapita_cc146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.37511667283599,r[:number])
end

def test_costpercapita_cd146
  r = spreadsheet.costpercapita_cd146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2676.8091593097683,r[:number])
end

def test_costpercapita_cf146
  r = spreadsheet.costpercapita_cf146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.7518756026920455,r[:number])
end

def test_costpercapita_cg146
  r = spreadsheet.costpercapita_cg146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08866174644654976,r[:number])
end

def test_costpercapita_ch146
  r = spreadsheet.costpercapita_ch146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7073962533197552,r[:number])
end

def test_costpercapita_ci146
  r = spreadsheet.costpercapita_ci146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1143239233375333,r[:number])
end

def test_costpercapita_cj146
  r = spreadsheet.costpercapita_cj146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.25677025036028,r[:number])
end

def test_costpercapita_ck146
  r = spreadsheet.costpercapita_ck146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1796384897090635,r[:number])
end

def test_costpercapita_cl146
  r = spreadsheet.costpercapita_cl146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1292950934500405,r[:number])
end

def test_costpercapita_cm146
  r = spreadsheet.costpercapita_cm146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0531247743383605,r[:number])
end

def test_costpercapita_cn146
  r = spreadsheet.costpercapita_cn146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9815151847786886,r[:number])
end

def test_costpercapita_cp146
  r = spreadsheet.costpercapita_cp146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7509833458942473,r[:number])
end

def test_costpercapita_cq146
  r = spreadsheet.costpercapita_cq146
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.039326702903125,r[:number])
end

def test_costpercapita_cr146
  r = spreadsheet.costpercapita_cr146
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a147
  r = spreadsheet.costpercapita_a147
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.a.Air",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b147
  r = spreadsheet.costpercapita_b147
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c147
  r = spreadsheet.costpercapita_c147
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e147
  r = spreadsheet.costpercapita_e147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.896398734813296,r[:number])
end

def test_costpercapita_f147
  r = spreadsheet.costpercapita_f147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.410890692521994,r[:number])
end

def test_costpercapita_g147
  r = spreadsheet.costpercapita_g147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.971059183044035,r[:number])
end

def test_costpercapita_h147
  r = spreadsheet.costpercapita_h147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.57718289110006,r[:number])
end

def test_costpercapita_i147
  r = spreadsheet.costpercapita_i147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.01379591524008,r[:number])
end

def test_costpercapita_j147
  r = spreadsheet.costpercapita_j147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.643140139334115,r[:number])
end

def test_costpercapita_k147
  r = spreadsheet.costpercapita_k147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.966261692267832,r[:number])
end

def test_costpercapita_l147
  r = spreadsheet.costpercapita_l147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.574404324026537,r[:number])
end

def test_costpercapita_m147
  r = spreadsheet.costpercapita_m147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.197131973328728,r[:number])
end

def test_costpercapita_o147
  r = spreadsheet.costpercapita_o147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.996006703994697,r[:number])
end

def test_costpercapita_p147
  r = spreadsheet.costpercapita_p147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.324014827298457,r[:number])
end

def test_costpercapita_q147
  r = spreadsheet.costpercapita_q147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793946375544617,r[:number])
end

def test_costpercapita_r147
  r = spreadsheet.costpercapita_r147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.259370767991622,r[:number])
end

def test_costpercapita_s147
  r = spreadsheet.costpercapita_s147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.708482707833969,r[:number])
end

def test_costpercapita_t147
  r = spreadsheet.costpercapita_t147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.173018575666719,r[:number])
end

def test_costpercapita_u147
  r = spreadsheet.costpercapita_u147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.604886414724205,r[:number])
end

def test_costpercapita_v147
  r = spreadsheet.costpercapita_v147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.044498828535568,r[:number])
end

def test_costpercapita_w147
  r = spreadsheet.costpercapita_w147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.492809818930669,r[:number])
end

def test_costpercapita_y147
  r = spreadsheet.costpercapita_y147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z147
  r = spreadsheet.costpercapita_z147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa147
  r = spreadsheet.costpercapita_aa147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab147
  r = spreadsheet.costpercapita_ab147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac147
  r = spreadsheet.costpercapita_ac147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad147
  r = spreadsheet.costpercapita_ad147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae147
  r = spreadsheet.costpercapita_ae147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af147
  r = spreadsheet.costpercapita_af147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag147
  r = spreadsheet.costpercapita_ag147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai147
  r = spreadsheet.costpercapita_ai147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.892405438807991,r[:number])
end

def test_costpercapita_aj147
  r = spreadsheet.costpercapita_aj147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.734905519820451,r[:number])
end

def test_costpercapita_ak147
  r = spreadsheet.costpercapita_ak147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.765005558588653,r[:number])
end

def test_costpercapita_al147
  r = spreadsheet.costpercapita_al147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.836553659091683,r[:number])
end

def test_costpercapita_am147
  r = spreadsheet.costpercapita_am147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.722278623074047,r[:number])
end

def test_costpercapita_an147
  r = spreadsheet.costpercapita_an147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.81615871500083,r[:number])
end

def test_costpercapita_ao147
  r = spreadsheet.costpercapita_ao147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.571148106992037,r[:number])
end

def test_costpercapita_ap147
  r = spreadsheet.costpercapita_ap147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.618903152562105,r[:number])
end

def test_costpercapita_aq147
  r = spreadsheet.costpercapita_aq147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.6899417922594,r[:number])
end

def test_costpercapita_as147
  r = spreadsheet.costpercapita_as147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.627477840688574,r[:number])
end

def test_costpercapita_at147
  r = spreadsheet.costpercapita_at147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(336.4733225096944,r[:number])
end

def test_costpercapita_av147
  r = spreadsheet.costpercapita_av147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw147
  r = spreadsheet.costpercapita_aw147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay147
  r = spreadsheet.costpercapita_ay147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5089294270858296,r[:number])
end

def test_costpercapita_az147
  r = spreadsheet.costpercapita_az147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.529057831663559,r[:number])
end

def test_costpercapita_ba147
  r = spreadsheet.costpercapita_ba147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.554664051811575,r[:number])
end

def test_costpercapita_bb147
  r = spreadsheet.costpercapita_bb147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.953110917607097,r[:number])
end

def test_costpercapita_bc147
  r = spreadsheet.costpercapita_bc147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.240126734216626,r[:number])
end

def test_costpercapita_bd147
  r = spreadsheet.costpercapita_bd147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.653838044736104,r[:number])
end

def test_costpercapita_be147
  r = spreadsheet.costpercapita_be147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.866248099525649,r[:number])
end

def test_costpercapita_bf147
  r = spreadsheet.costpercapita_bf147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.266022142943362,r[:number])
end

def test_costpercapita_bg147
  r = spreadsheet.costpercapita_bg147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.675383923073134,r[:number])
end

def test_costpercapita_bi147
  r = spreadsheet.costpercapita_bi147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5089294270858296,r[:number])
end

def test_costpercapita_bj147
  r = spreadsheet.costpercapita_bj147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.922280067894206,r[:number])
end

def test_costpercapita_bk147
  r = spreadsheet.costpercapita_bk147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.184845172510862,r[:number])
end

def test_costpercapita_bl147
  r = spreadsheet.costpercapita_bl147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.487272389975885,r[:number])
end

def test_costpercapita_bm147
  r = spreadsheet.costpercapita_bm147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.18145681505376,r[:number])
end

def test_costpercapita_bn147
  r = spreadsheet.costpercapita_bn147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.327258694291054,r[:number])
end

def test_costpercapita_bo147
  r = spreadsheet.costpercapita_bo147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.27566934427339,r[:number])
end

def test_costpercapita_bp147
  r = spreadsheet.costpercapita_bp147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.31654213467683,r[:number])
end

def test_costpercapita_bq147
  r = spreadsheet.costpercapita_bq147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.35261099200416,r[:number])
end

def test_costpercapita_bs147
  r = spreadsheet.costpercapita_bs147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.504936131080527,r[:number])
end

def test_costpercapita_bt147
  r = spreadsheet.costpercapita_bt147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.246294895192664,r[:number])
end

def test_costpercapita_bu147
  r = spreadsheet.costpercapita_bu147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.97879154805548,r[:number])
end

def test_costpercapita_bv147
  r = spreadsheet.costpercapita_bv147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.746643157967508,r[:number])
end

def test_costpercapita_bw147
  r = spreadsheet.costpercapita_bw147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.889939522887726,r[:number])
end

def test_costpercapita_bx147
  r = spreadsheet.costpercapita_bx147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.500277269957774,r[:number])
end

def test_costpercapita_by147
  r = spreadsheet.costpercapita_by147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.880555758997595,r[:number])
end

def test_costpercapita_bz147
  r = spreadsheet.costpercapita_bz147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.361040963212393,r[:number])
end

def test_costpercapita_ca147
  r = spreadsheet.costpercapita_ca147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.84542081093483,r[:number])
end

def test_costpercapita_cc147
  r = spreadsheet.costpercapita_cc147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.21710000647628,r[:number])
end

def test_costpercapita_cd147
  r = spreadsheet.costpercapita_cd147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(468.51136291732803,r[:number])
end

def test_costpercapita_cf147
  r = spreadsheet.costpercapita_cf147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.387469307727466,r[:number])
end

def test_costpercapita_cg147
  r = spreadsheet.costpercapita_cg147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5113893753722136,r[:number])
end

def test_costpercapita_ch147
  r = spreadsheet.costpercapita_ch147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.2137859894668255,r[:number])
end

def test_costpercapita_ci147
  r = spreadsheet.costpercapita_ci147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.9100894988758235,r[:number])
end

def test_costpercapita_cj147
  r = spreadsheet.costpercapita_cj147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.167660899813681,r[:number])
end

def test_costpercapita_ck147
  r = spreadsheet.costpercapita_ck147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.68411855495694,r[:number])
end

def test_costpercapita_cl147
  r = spreadsheet.costpercapita_cl147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.309407652005557,r[:number])
end

def test_costpercapita_cm147
  r = spreadsheet.costpercapita_cm147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.742137810650293,r[:number])
end

def test_costpercapita_cn147
  r = spreadsheet.costpercapita_cn147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.15547901867543,r[:number])
end

def test_costpercapita_cp147
  r = spreadsheet.costpercapita_cp147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.589622165787699,r[:number])
end

def test_costpercapita_cq147
  r = spreadsheet.costpercapita_cq147
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.0380404076336,r[:number])
end

def test_costpercapita_cr147
  r = spreadsheet.costpercapita_cr147
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a148
  r = spreadsheet.costpercapita_a148
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.b",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b148
  r = spreadsheet.costpercapita_b148
  assert_equal(:ExcelString,r[:type])
  assert_equal("Domestic freight",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c148
  r = spreadsheet.costpercapita_c148
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e148
  r = spreadsheet.costpercapita_e148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.85673025861972,r[:number])
end

def test_costpercapita_f148
  r = spreadsheet.costpercapita_f148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.31856094861399,r[:number])
end

def test_costpercapita_g148
  r = spreadsheet.costpercapita_g148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.85228679586372,r[:number])
end

def test_costpercapita_h148
  r = spreadsheet.costpercapita_h148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.55780062066584,r[:number])
end

def test_costpercapita_i148
  r = spreadsheet.costpercapita_i148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.43975114033788,r[:number])
end

def test_costpercapita_j148
  r = spreadsheet.costpercapita_j148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.52220281932236,r[:number])
end

def test_costpercapita_k148
  r = spreadsheet.costpercapita_k148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.69394659378997,r[:number])
end

def test_costpercapita_l148
  r = spreadsheet.costpercapita_l148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.89473079052745,r[:number])
end

def test_costpercapita_m148
  r = spreadsheet.costpercapita_m148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.12444594939797,r[:number])
end

def test_costpercapita_o148
  r = spreadsheet.costpercapita_o148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.33805341280801,r[:number])
end

def test_costpercapita_p148
  r = spreadsheet.costpercapita_p148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.026886244722,r[:number])
end

def test_costpercapita_q148
  r = spreadsheet.costpercapita_q148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.10695824626555,r[:number])
end

def test_costpercapita_r148
  r = spreadsheet.costpercapita_r148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(112.20387391171141,r[:number])
end

def test_costpercapita_s148
  r = spreadsheet.costpercapita_s148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.55166379487936,r[:number])
end

def test_costpercapita_t148
  r = spreadsheet.costpercapita_t148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.18613584478634,r[:number])
end

def test_costpercapita_u148
  r = spreadsheet.costpercapita_u148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.94699136772934,r[:number])
end

def test_costpercapita_v148
  r = spreadsheet.costpercapita_v148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.74737348640706,r[:number])
end

def test_costpercapita_w148
  r = spreadsheet.costpercapita_w148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.58744013692298,r[:number])
end

def test_costpercapita_y148
  r = spreadsheet.costpercapita_y148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z148
  r = spreadsheet.costpercapita_z148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa148
  r = spreadsheet.costpercapita_aa148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab148
  r = spreadsheet.costpercapita_ab148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac148
  r = spreadsheet.costpercapita_ac148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad148
  r = spreadsheet.costpercapita_ad148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae148
  r = spreadsheet.costpercapita_ae148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af148
  r = spreadsheet.costpercapita_af148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag148
  r = spreadsheet.costpercapita_ag148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai148
  r = spreadsheet.costpercapita_ai148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.19478367142776,r[:number])
end

def test_costpercapita_aj148
  r = spreadsheet.costpercapita_aj148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.34544719333599,r[:number])
end

def test_costpercapita_ak148
  r = spreadsheet.costpercapita_ak148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(187.95924504212925,r[:number])
end

def test_costpercapita_al148
  r = spreadsheet.costpercapita_al148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.76167453237724,r[:number])
end

def test_costpercapita_am148
  r = spreadsheet.costpercapita_am148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.99141493521722,r[:number])
end

def test_costpercapita_an148
  r = spreadsheet.costpercapita_an148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.7083386641087,r[:number])
end

def test_costpercapita_ao148
  r = spreadsheet.costpercapita_ao148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.6409379615193,r[:number])
end

def test_costpercapita_ap148
  r = spreadsheet.costpercapita_ap148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(200.6421042769345,r[:number])
end

def test_costpercapita_aq148
  r = spreadsheet.costpercapita_aq148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(203.71188608632093,r[:number])
end

def test_costpercapita_as148
  r = spreadsheet.costpercapita_as148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.77287026259677,r[:number])
end

def test_costpercapita_at148
  r = spreadsheet.costpercapita_at148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4018.2772918879486,r[:number])
end

def test_costpercapita_av148
  r = spreadsheet.costpercapita_av148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw148
  r = spreadsheet.costpercapita_aw148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay148
  r = spreadsheet.costpercapita_ay148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.764141842985097,r[:number])
end

def test_costpercapita_az148
  r = spreadsheet.costpercapita_az148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.82681615705381,r[:number])
end

def test_costpercapita_ba148
  r = spreadsheet.costpercapita_ba148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.520302037418624,r[:number])
end

def test_costpercapita_bb148
  r = spreadsheet.costpercapita_bb148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.98408487338358,r[:number])
end

def test_costpercapita_bc148
  r = spreadsheet.costpercapita_bc148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.563851702628895,r[:number])
end

def test_costpercapita_bd148
  r = spreadsheet.costpercapita_bd148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(52.27542175529973,r[:number])
end

def test_costpercapita_be148
  r = spreadsheet.costpercapita_be148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.045689653167344,r[:number])
end

def test_costpercapita_bf148
  r = spreadsheet.costpercapita_bf148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.83504782102606,r[:number])
end

def test_costpercapita_bg148
  r = spreadsheet.costpercapita_bg148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.64342430318788,r[:number])
end

def test_costpercapita_bi148
  r = spreadsheet.costpercapita_bi148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.764141842985097,r[:number])
end

def test_costpercapita_bj148
  r = spreadsheet.costpercapita_bj148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.7084085693217,r[:number])
end

def test_costpercapita_bk148
  r = spreadsheet.costpercapita_bk148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.71741918643134,r[:number])
end

def test_costpercapita_bl148
  r = spreadsheet.costpercapita_bl148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.58069065581577,r[:number])
end

def test_costpercapita_bm148
  r = spreadsheet.costpercapita_bm148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.77357560748953,r[:number])
end

def test_costpercapita_bn148
  r = spreadsheet.costpercapita_bn148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.04768789045886,r[:number])
end

def test_costpercapita_bo148
  r = spreadsheet.costpercapita_bo148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(153.48172775720084,r[:number])
end

def test_costpercapita_bp148
  r = spreadsheet.costpercapita_bp148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.96261458499748,r[:number])
end

def test_costpercapita_bq148
  r = spreadsheet.costpercapita_bq148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.4911772378963,r[:number])
end

def test_costpercapita_bs148
  r = spreadsheet.costpercapita_bs148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.1021952557931,r[:number])
end

def test_costpercapita_bt148
  r = spreadsheet.costpercapita_bt148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.7352948140437,r[:number])
end

def test_costpercapita_bu148
  r = spreadsheet.costpercapita_bu148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(235.8243774326969,r[:number])
end

def test_costpercapita_bv148
  r = spreadsheet.costpercapita_bv148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(259.7845645675272,r[:number])
end

def test_costpercapita_bw148
  r = spreadsheet.costpercapita_bw148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.3252394023689,r[:number])
end

def test_costpercapita_bx148
  r = spreadsheet.costpercapita_bx148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.2338237352452,r[:number])
end

def test_costpercapita_by148
  r = spreadsheet.costpercapita_by148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(270.4287191249302,r[:number])
end

def test_costpercapita_bz148
  r = spreadsheet.costpercapita_bz148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.7099880714045,r[:number])
end

def test_costpercapita_ca148
  r = spreadsheet.costpercapita_ca148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.07861737481926,r[:number])
end

def test_costpercapita_cc148
  r = spreadsheet.costpercapita_cc148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(240.6914244198699,r[:number])
end

def test_costpercapita_cd148
  r = spreadsheet.costpercapita_cd148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5024.70432174648,r[:number])
end

def test_costpercapita_cf148
  r = spreadsheet.costpercapita_cf148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-41.09258841563462,r[:number])
end

def test_costpercapita_cg148
  r = spreadsheet.costpercapita_cg148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.6101523792922853,r[:number])
end

def test_costpercapita_ch148
  r = spreadsheet.costpercapita_ch148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.86513239056763,r[:number])
end

def test_costpercapita_ci148
  r = spreadsheet.costpercapita_ci148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.02289003514994,r[:number])
end

def test_costpercapita_cj148
  r = spreadsheet.costpercapita_cj148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.33382446715166,r[:number])
end

def test_costpercapita_ck148
  r = spreadsheet.costpercapita_ck148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.52548507113652,r[:number])
end

def test_costpercapita_cl148
  r = spreadsheet.costpercapita_cl148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.78778116341087,r[:number])
end

def test_costpercapita_cm148
  r = spreadsheet.costpercapita_cm148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.06788379447002,r[:number])
end

def test_costpercapita_cn148
  r = spreadsheet.costpercapita_cn148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.36673128849834,r[:number])
end

def test_costpercapita_cp148
  r = spreadsheet.costpercapita_cp148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.91855415727312,r[:number])
end

def test_costpercapita_cq148
  r = spreadsheet.costpercapita_cq148
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1006.4270298585301,r[:number])
end

def test_costpercapita_cr148
  r = spreadsheet.costpercapita_cr148
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a149
  r = spreadsheet.costpercapita_a149
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.c",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b149
  r = spreadsheet.costpercapita_b149
  assert_equal(:ExcelString,r[:type])
  assert_equal("International aviation",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c149
  r = spreadsheet.costpercapita_c149
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e149
  r = spreadsheet.costpercapita_e149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f149
  r = spreadsheet.costpercapita_f149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g149
  r = spreadsheet.costpercapita_g149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h149
  r = spreadsheet.costpercapita_h149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i149
  r = spreadsheet.costpercapita_i149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j149
  r = spreadsheet.costpercapita_j149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k149
  r = spreadsheet.costpercapita_k149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l149
  r = spreadsheet.costpercapita_l149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m149
  r = spreadsheet.costpercapita_m149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o149
  r = spreadsheet.costpercapita_o149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p149
  r = spreadsheet.costpercapita_p149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q149
  r = spreadsheet.costpercapita_q149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r149
  r = spreadsheet.costpercapita_r149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s149
  r = spreadsheet.costpercapita_s149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t149
  r = spreadsheet.costpercapita_t149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u149
  r = spreadsheet.costpercapita_u149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v149
  r = spreadsheet.costpercapita_v149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w149
  r = spreadsheet.costpercapita_w149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y149
  r = spreadsheet.costpercapita_y149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z149
  r = spreadsheet.costpercapita_z149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa149
  r = spreadsheet.costpercapita_aa149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab149
  r = spreadsheet.costpercapita_ab149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac149
  r = spreadsheet.costpercapita_ac149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad149
  r = spreadsheet.costpercapita_ad149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae149
  r = spreadsheet.costpercapita_ae149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af149
  r = spreadsheet.costpercapita_af149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag149
  r = spreadsheet.costpercapita_ag149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai149
  r = spreadsheet.costpercapita_ai149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj149
  r = spreadsheet.costpercapita_aj149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak149
  r = spreadsheet.costpercapita_ak149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al149
  r = spreadsheet.costpercapita_al149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am149
  r = spreadsheet.costpercapita_am149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an149
  r = spreadsheet.costpercapita_an149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao149
  r = spreadsheet.costpercapita_ao149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap149
  r = spreadsheet.costpercapita_ap149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq149
  r = spreadsheet.costpercapita_aq149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as149
  r = spreadsheet.costpercapita_as149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at149
  r = spreadsheet.costpercapita_at149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av149
  r = spreadsheet.costpercapita_av149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw149
  r = spreadsheet.costpercapita_aw149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay149
  r = spreadsheet.costpercapita_ay149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az149
  r = spreadsheet.costpercapita_az149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba149
  r = spreadsheet.costpercapita_ba149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb149
  r = spreadsheet.costpercapita_bb149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc149
  r = spreadsheet.costpercapita_bc149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd149
  r = spreadsheet.costpercapita_bd149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be149
  r = spreadsheet.costpercapita_be149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf149
  r = spreadsheet.costpercapita_bf149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg149
  r = spreadsheet.costpercapita_bg149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi149
  r = spreadsheet.costpercapita_bi149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj149
  r = spreadsheet.costpercapita_bj149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk149
  r = spreadsheet.costpercapita_bk149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl149
  r = spreadsheet.costpercapita_bl149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm149
  r = spreadsheet.costpercapita_bm149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn149
  r = spreadsheet.costpercapita_bn149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo149
  r = spreadsheet.costpercapita_bo149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp149
  r = spreadsheet.costpercapita_bp149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq149
  r = spreadsheet.costpercapita_bq149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs149
  r = spreadsheet.costpercapita_bs149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt149
  r = spreadsheet.costpercapita_bt149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu149
  r = spreadsheet.costpercapita_bu149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv149
  r = spreadsheet.costpercapita_bv149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw149
  r = spreadsheet.costpercapita_bw149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx149
  r = spreadsheet.costpercapita_bx149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by149
  r = spreadsheet.costpercapita_by149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz149
  r = spreadsheet.costpercapita_bz149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca149
  r = spreadsheet.costpercapita_ca149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc149
  r = spreadsheet.costpercapita_cc149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd149
  r = spreadsheet.costpercapita_cd149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf149
  r = spreadsheet.costpercapita_cf149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg149
  r = spreadsheet.costpercapita_cg149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch149
  r = spreadsheet.costpercapita_ch149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci149
  r = spreadsheet.costpercapita_ci149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj149
  r = spreadsheet.costpercapita_cj149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck149
  r = spreadsheet.costpercapita_ck149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl149
  r = spreadsheet.costpercapita_cl149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm149
  r = spreadsheet.costpercapita_cm149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn149
  r = spreadsheet.costpercapita_cn149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp149
  r = spreadsheet.costpercapita_cp149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq149
  r = spreadsheet.costpercapita_cq149
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr149
  r = spreadsheet.costpercapita_cr149
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a150
  r = spreadsheet.costpercapita_a150
  assert_equal(:ExcelString,r[:type])
  assert_equal("XII.e",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b150
  r = spreadsheet.costpercapita_b150
  assert_equal(:ExcelString,r[:type])
  assert_equal("International shipping (maritime bunkers)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c150
  r = spreadsheet.costpercapita_c150
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e150
  r = spreadsheet.costpercapita_e150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f150
  r = spreadsheet.costpercapita_f150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g150
  r = spreadsheet.costpercapita_g150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h150
  r = spreadsheet.costpercapita_h150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i150
  r = spreadsheet.costpercapita_i150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j150
  r = spreadsheet.costpercapita_j150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k150
  r = spreadsheet.costpercapita_k150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l150
  r = spreadsheet.costpercapita_l150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m150
  r = spreadsheet.costpercapita_m150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o150
  r = spreadsheet.costpercapita_o150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p150
  r = spreadsheet.costpercapita_p150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q150
  r = spreadsheet.costpercapita_q150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r150
  r = spreadsheet.costpercapita_r150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s150
  r = spreadsheet.costpercapita_s150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t150
  r = spreadsheet.costpercapita_t150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u150
  r = spreadsheet.costpercapita_u150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v150
  r = spreadsheet.costpercapita_v150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w150
  r = spreadsheet.costpercapita_w150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y150
  r = spreadsheet.costpercapita_y150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z150
  r = spreadsheet.costpercapita_z150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa150
  r = spreadsheet.costpercapita_aa150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab150
  r = spreadsheet.costpercapita_ab150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac150
  r = spreadsheet.costpercapita_ac150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad150
  r = spreadsheet.costpercapita_ad150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae150
  r = spreadsheet.costpercapita_ae150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af150
  r = spreadsheet.costpercapita_af150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag150
  r = spreadsheet.costpercapita_ag150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai150
  r = spreadsheet.costpercapita_ai150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj150
  r = spreadsheet.costpercapita_aj150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak150
  r = spreadsheet.costpercapita_ak150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al150
  r = spreadsheet.costpercapita_al150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am150
  r = spreadsheet.costpercapita_am150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an150
  r = spreadsheet.costpercapita_an150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao150
  r = spreadsheet.costpercapita_ao150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap150
  r = spreadsheet.costpercapita_ap150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq150
  r = spreadsheet.costpercapita_aq150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as150
  r = spreadsheet.costpercapita_as150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at150
  r = spreadsheet.costpercapita_at150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av150
  r = spreadsheet.costpercapita_av150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw150
  r = spreadsheet.costpercapita_aw150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay150
  r = spreadsheet.costpercapita_ay150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az150
  r = spreadsheet.costpercapita_az150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba150
  r = spreadsheet.costpercapita_ba150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb150
  r = spreadsheet.costpercapita_bb150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc150
  r = spreadsheet.costpercapita_bc150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd150
  r = spreadsheet.costpercapita_bd150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be150
  r = spreadsheet.costpercapita_be150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf150
  r = spreadsheet.costpercapita_bf150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg150
  r = spreadsheet.costpercapita_bg150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi150
  r = spreadsheet.costpercapita_bi150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj150
  r = spreadsheet.costpercapita_bj150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk150
  r = spreadsheet.costpercapita_bk150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl150
  r = spreadsheet.costpercapita_bl150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm150
  r = spreadsheet.costpercapita_bm150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn150
  r = spreadsheet.costpercapita_bn150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo150
  r = spreadsheet.costpercapita_bo150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp150
  r = spreadsheet.costpercapita_bp150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq150
  r = spreadsheet.costpercapita_bq150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs150
  r = spreadsheet.costpercapita_bs150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt150
  r = spreadsheet.costpercapita_bt150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu150
  r = spreadsheet.costpercapita_bu150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv150
  r = spreadsheet.costpercapita_bv150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw150
  r = spreadsheet.costpercapita_bw150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx150
  r = spreadsheet.costpercapita_bx150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by150
  r = spreadsheet.costpercapita_by150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz150
  r = spreadsheet.costpercapita_bz150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca150
  r = spreadsheet.costpercapita_ca150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc150
  r = spreadsheet.costpercapita_cc150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd150
  r = spreadsheet.costpercapita_cd150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf150
  r = spreadsheet.costpercapita_cf150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg150
  r = spreadsheet.costpercapita_cg150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch150
  r = spreadsheet.costpercapita_ch150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci150
  r = spreadsheet.costpercapita_ci150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj150
  r = spreadsheet.costpercapita_cj150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck150
  r = spreadsheet.costpercapita_ck150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl150
  r = spreadsheet.costpercapita_cl150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm150
  r = spreadsheet.costpercapita_cm150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn150
  r = spreadsheet.costpercapita_cn150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp150
  r = spreadsheet.costpercapita_cp150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq150
  r = spreadsheet.costpercapita_cq150
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr150
  r = spreadsheet.costpercapita_cr150
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a151
  r = spreadsheet.costpercapita_a151
  assert_equal(:ExcelString,r[:type])
  assert_equal("XIV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b151
  r = spreadsheet.costpercapita_b151
  assert_equal(:ExcelString,r[:type])
  assert_equal("Geosequestration",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c151
  r = spreadsheet.costpercapita_c151
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e151
  r = spreadsheet.costpercapita_e151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f151
  r = spreadsheet.costpercapita_f151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g151
  r = spreadsheet.costpercapita_g151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h151
  r = spreadsheet.costpercapita_h151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i151
  r = spreadsheet.costpercapita_i151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j151
  r = spreadsheet.costpercapita_j151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k151
  r = spreadsheet.costpercapita_k151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l151
  r = spreadsheet.costpercapita_l151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m151
  r = spreadsheet.costpercapita_m151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o151
  r = spreadsheet.costpercapita_o151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p151
  r = spreadsheet.costpercapita_p151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q151
  r = spreadsheet.costpercapita_q151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r151
  r = spreadsheet.costpercapita_r151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s151
  r = spreadsheet.costpercapita_s151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t151
  r = spreadsheet.costpercapita_t151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u151
  r = spreadsheet.costpercapita_u151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v151
  r = spreadsheet.costpercapita_v151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w151
  r = spreadsheet.costpercapita_w151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y151
  r = spreadsheet.costpercapita_y151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z151
  r = spreadsheet.costpercapita_z151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa151
  r = spreadsheet.costpercapita_aa151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab151
  r = spreadsheet.costpercapita_ab151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac151
  r = spreadsheet.costpercapita_ac151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad151
  r = spreadsheet.costpercapita_ad151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae151
  r = spreadsheet.costpercapita_ae151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af151
  r = spreadsheet.costpercapita_af151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag151
  r = spreadsheet.costpercapita_ag151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai151
  r = spreadsheet.costpercapita_ai151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj151
  r = spreadsheet.costpercapita_aj151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ak151
  r = spreadsheet.costpercapita_ak151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_al151
  r = spreadsheet.costpercapita_al151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_am151
  r = spreadsheet.costpercapita_am151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_an151
  r = spreadsheet.costpercapita_an151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ao151
  r = spreadsheet.costpercapita_ao151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ap151
  r = spreadsheet.costpercapita_ap151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aq151
  r = spreadsheet.costpercapita_aq151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_as151
  r = spreadsheet.costpercapita_as151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_at151
  r = spreadsheet.costpercapita_at151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_av151
  r = spreadsheet.costpercapita_av151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw151
  r = spreadsheet.costpercapita_aw151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay151
  r = spreadsheet.costpercapita_ay151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az151
  r = spreadsheet.costpercapita_az151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba151
  r = spreadsheet.costpercapita_ba151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb151
  r = spreadsheet.costpercapita_bb151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc151
  r = spreadsheet.costpercapita_bc151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd151
  r = spreadsheet.costpercapita_bd151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be151
  r = spreadsheet.costpercapita_be151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf151
  r = spreadsheet.costpercapita_bf151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg151
  r = spreadsheet.costpercapita_bg151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi151
  r = spreadsheet.costpercapita_bi151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj151
  r = spreadsheet.costpercapita_bj151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk151
  r = spreadsheet.costpercapita_bk151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl151
  r = spreadsheet.costpercapita_bl151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm151
  r = spreadsheet.costpercapita_bm151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn151
  r = spreadsheet.costpercapita_bn151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo151
  r = spreadsheet.costpercapita_bo151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp151
  r = spreadsheet.costpercapita_bp151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq151
  r = spreadsheet.costpercapita_bq151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs151
  r = spreadsheet.costpercapita_bs151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt151
  r = spreadsheet.costpercapita_bt151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bu151
  r = spreadsheet.costpercapita_bu151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bv151
  r = spreadsheet.costpercapita_bv151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bw151
  r = spreadsheet.costpercapita_bw151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bx151
  r = spreadsheet.costpercapita_bx151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_by151
  r = spreadsheet.costpercapita_by151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bz151
  r = spreadsheet.costpercapita_bz151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ca151
  r = spreadsheet.costpercapita_ca151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cc151
  r = spreadsheet.costpercapita_cc151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cd151
  r = spreadsheet.costpercapita_cd151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cf151
  r = spreadsheet.costpercapita_cf151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg151
  r = spreadsheet.costpercapita_cg151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch151
  r = spreadsheet.costpercapita_ch151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci151
  r = spreadsheet.costpercapita_ci151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj151
  r = spreadsheet.costpercapita_cj151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck151
  r = spreadsheet.costpercapita_ck151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl151
  r = spreadsheet.costpercapita_cl151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm151
  r = spreadsheet.costpercapita_cm151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn151
  r = spreadsheet.costpercapita_cn151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp151
  r = spreadsheet.costpercapita_cp151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq151
  r = spreadsheet.costpercapita_cq151
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr151
  r = spreadsheet.costpercapita_cr151
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a152
  r = spreadsheet.costpercapita_a152
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b152
  r = spreadsheet.costpercapita_b152
  assert_equal(:ExcelString,r[:type])
  assert_equal("Petroleum refineries",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c152
  r = spreadsheet.costpercapita_c152
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e152
  r = spreadsheet.costpercapita_e152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.501503394061272,r[:number])
end

def test_costpercapita_f152
  r = spreadsheet.costpercapita_f152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.654657730685964,r[:number])
end

def test_costpercapita_g152
  r = spreadsheet.costpercapita_g152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.932778118698089,r[:number])
end

def test_costpercapita_h152
  r = spreadsheet.costpercapita_h152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.291332390419164,r[:number])
end

def test_costpercapita_i152
  r = spreadsheet.costpercapita_i152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.790810821928129,r[:number])
end

def test_costpercapita_j152
  r = spreadsheet.costpercapita_j152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.40318407443384,r[:number])
end

def test_costpercapita_k152
  r = spreadsheet.costpercapita_k152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.094221775906331,r[:number])
end

def test_costpercapita_l152
  r = spreadsheet.costpercapita_l152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.841911723728388,r[:number])
end

def test_costpercapita_m152
  r = spreadsheet.costpercapita_m152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6336130361418455,r[:number])
end

def test_costpercapita_o152
  r = spreadsheet.costpercapita_o152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.366948484265311,r[:number])
end

def test_costpercapita_p152
  r = spreadsheet.costpercapita_p152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.1653847697148,r[:number])
end

def test_costpercapita_q152
  r = spreadsheet.costpercapita_q152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.078668379868073,r[:number])
end

def test_costpercapita_r152
  r = spreadsheet.costpercapita_r152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.207378058178438,r[:number])
end

def test_costpercapita_s152
  r = spreadsheet.costpercapita_s152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.52690777830955,r[:number])
end

def test_costpercapita_t152
  r = spreadsheet.costpercapita_t152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.99614813048735,r[:number])
end

def test_costpercapita_u152
  r = spreadsheet.costpercapita_u152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568814724711372,r[:number])
end

def test_costpercapita_v152
  r = spreadsheet.costpercapita_v152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.215535728368746,r[:number])
end

def test_costpercapita_w152
  r = spreadsheet.costpercapita_w152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.920240132730445,r[:number])
end

def test_costpercapita_y152
  r = spreadsheet.costpercapita_y152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z152
  r = spreadsheet.costpercapita_z152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa152
  r = spreadsheet.costpercapita_aa152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab152
  r = spreadsheet.costpercapita_ab152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac152
  r = spreadsheet.costpercapita_ac152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad152
  r = spreadsheet.costpercapita_ad152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae152
  r = spreadsheet.costpercapita_ae152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af152
  r = spreadsheet.costpercapita_af152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag152
  r = spreadsheet.costpercapita_ag152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai152
  r = spreadsheet.costpercapita_ai152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.86845187832658,r[:number])
end

def test_costpercapita_aj152
  r = spreadsheet.costpercapita_aj152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.820042500400763,r[:number])
end

def test_costpercapita_ak152
  r = spreadsheet.costpercapita_ak152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.011446498566162,r[:number])
end

def test_costpercapita_al152
  r = spreadsheet.costpercapita_al152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.498710448597603,r[:number])
end

def test_costpercapita_am152
  r = spreadsheet.costpercapita_am152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.31771860023768,r[:number])
end

def test_costpercapita_an152
  r = spreadsheet.costpercapita_an152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.39933220492119,r[:number])
end

def test_costpercapita_ao152
  r = spreadsheet.costpercapita_ao152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663036500617702,r[:number])
end

def test_costpercapita_ap152
  r = spreadsheet.costpercapita_ap152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.057447452097135,r[:number])
end

def test_costpercapita_aq152
  r = spreadsheet.costpercapita_aq152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.553853168872289,r[:number])
end

def test_costpercapita_as152
  r = spreadsheet.costpercapita_as152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.132226583626345,r[:number])
end

def test_costpercapita_at152
  r = spreadsheet.costpercapita_at152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.41342302506314,r[:number])
end

def test_costpercapita_av152
  r = spreadsheet.costpercapita_av152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw152
  r = spreadsheet.costpercapita_aw152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay152
  r = spreadsheet.costpercapita_ay152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976263,r[:number])
end

def test_costpercapita_az152
  r = spreadsheet.costpercapita_az152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.689302697603886,r[:number])
end

def test_costpercapita_ba152
  r = spreadsheet.costpercapita_ba152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.214761502373702,r[:number])
end

def test_costpercapita_bb152
  r = spreadsheet.costpercapita_bb152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793095039548196,r[:number])
end

def test_costpercapita_bc152
  r = spreadsheet.costpercapita_bc152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.464067734432657,r[:number])
end

def test_costpercapita_bd152
  r = spreadsheet.costpercapita_bd152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.209253971854447,r[:number])
end

def test_costpercapita_be152
  r = spreadsheet.costpercapita_be152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.00615177033837,r[:number])
end

def test_costpercapita_bf152
  r = spreadsheet.costpercapita_bf152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8402909928059494,r[:number])
end

def test_costpercapita_bg152
  r = spreadsheet.costpercapita_bg152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7033619169175216,r[:number])
end

def test_costpercapita_bi152
  r = spreadsheet.costpercapita_bi152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976263,r[:number])
end

def test_costpercapita_bj152
  r = spreadsheet.costpercapita_bj152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.31332108475032,r[:number])
end

def test_costpercapita_bk152
  r = spreadsheet.costpercapita_bk152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.223181680288237,r[:number])
end

def test_costpercapita_bl152
  r = spreadsheet.costpercapita_bl152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.179041446909165,r[:number])
end

def test_costpercapita_bm152
  r = spreadsheet.costpercapita_bm152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.04145227422591,r[:number])
end

def test_costpercapita_bn152
  r = spreadsheet.costpercapita_bn152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.120494318508502,r[:number])
end

def test_costpercapita_bo152
  r = spreadsheet.costpercapita_bo152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.39159120565756,r[:number])
end

def test_costpercapita_bp152
  r = spreadsheet.costpercapita_bp152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.80383894721361,r[:number])
end

def test_costpercapita_bq152
  r = spreadsheet.costpercapita_bq152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.324953367902515,r[:number])
end

def test_costpercapita_bs152
  r = spreadsheet.costpercapita_bs152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.114544096241573,r[:number])
end

def test_costpercapita_bt152
  r = spreadsheet.costpercapita_bt152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.47870585446512,r[:number])
end

def test_costpercapita_bu152
  r = spreadsheet.costpercapita_bu152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.301850060156312,r[:number])
end

def test_costpercapita_bv152
  r = spreadsheet.costpercapita_bv152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.386419505087606,r[:number])
end

def test_costpercapita_bw152
  r = spreadsheet.costpercapita_bw152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.56836005253546,r[:number])
end

def test_costpercapita_bx152
  r = spreadsheet.costpercapita_bx152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.116642448995854,r[:number])
end

def test_costpercapita_by152
  r = spreadsheet.costpercapita_by152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.960405930368932,r[:number])
end

def test_costpercapita_bz152
  r = spreadsheet.costpercapita_bz152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.019374675582355,r[:number])
end

def test_costpercapita_ca152
  r = spreadsheet.costpercapita_ca152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.245193500632958,r[:number])
end

def test_costpercapita_cc152
  r = spreadsheet.costpercapita_cc152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.687944013785128,r[:number])
end

def test_costpercapita_cd152
  r = spreadsheet.costpercapita_cd152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(493.6249462097008,r[:number])
end

def test_costpercapita_cf152
  r = spreadsheet.costpercapita_cf152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.753907782085008,r[:number])
end

def test_costpercapita_cg152
  r = spreadsheet.costpercapita_cg152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6586633540643572,r[:number])
end

def test_costpercapita_ch152
  r = spreadsheet.costpercapita_ch152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.290403561590148,r[:number])
end

def test_costpercapita_ci152
  r = spreadsheet.costpercapita_ci152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.887709056490001,r[:number])
end

def test_costpercapita_cj152
  r = spreadsheet.costpercapita_cj152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2506414522977805,r[:number])
end

def test_costpercapita_ck152
  r = spreadsheet.costpercapita_ck152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.717310244074663,r[:number])
end

def test_costpercapita_cl152
  r = spreadsheet.costpercapita_cl152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.297369429751228,r[:number])
end

def test_costpercapita_cm152
  r = spreadsheet.costpercapita_cm152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.961927223485222,r[:number])
end

def test_costpercapita_cn152
  r = spreadsheet.costpercapita_cn152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.691340331760669,r[:number])
end

def test_costpercapita_cp152
  r = spreadsheet.costpercapita_cp152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.555717430158785,r[:number])
end

def test_costpercapita_cq152
  r = spreadsheet.costpercapita_cq152
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.21152318463771,r[:number])
end

def test_costpercapita_cr152
  r = spreadsheet.costpercapita_cr152
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a153
  r = spreadsheet.costpercapita_a153
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b153
  r = spreadsheet.costpercapita_b153
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c153
  r = spreadsheet.costpercapita_c153
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e153
  r = spreadsheet.costpercapita_e153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f153
  r = spreadsheet.costpercapita_f153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g153
  r = spreadsheet.costpercapita_g153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h153
  r = spreadsheet.costpercapita_h153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i153
  r = spreadsheet.costpercapita_i153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j153
  r = spreadsheet.costpercapita_j153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k153
  r = spreadsheet.costpercapita_k153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l153
  r = spreadsheet.costpercapita_l153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m153
  r = spreadsheet.costpercapita_m153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o153
  r = spreadsheet.costpercapita_o153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p153
  r = spreadsheet.costpercapita_p153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q153
  r = spreadsheet.costpercapita_q153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r153
  r = spreadsheet.costpercapita_r153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s153
  r = spreadsheet.costpercapita_s153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t153
  r = spreadsheet.costpercapita_t153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u153
  r = spreadsheet.costpercapita_u153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v153
  r = spreadsheet.costpercapita_v153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w153
  r = spreadsheet.costpercapita_w153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y153
  r = spreadsheet.costpercapita_y153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_z153
  r = spreadsheet.costpercapita_z153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.685654248629497,r[:number])
end

def test_costpercapita_aa153
  r = spreadsheet.costpercapita_aa153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.65590912986651,r[:number])
end

def test_costpercapita_ab153
  r = spreadsheet.costpercapita_ab153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.51837171017997,r[:number])
end

def test_costpercapita_ac153
  r = spreadsheet.costpercapita_ac153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.16842574865352,r[:number])
end

def test_costpercapita_ad153
  r = spreadsheet.costpercapita_ad153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.881790013158467,r[:number])
end

def test_costpercapita_ae153
  r = spreadsheet.costpercapita_ae153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.628394369883353,r[:number])
end

def test_costpercapita_af153
  r = spreadsheet.costpercapita_af153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.39643202687115,r[:number])
end

def test_costpercapita_ag153
  r = spreadsheet.costpercapita_ag153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.183754829847869,r[:number])
end

def test_costpercapita_ai153
  r = spreadsheet.costpercapita_ai153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_aj153
  r = spreadsheet.costpercapita_aj153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.685654248629497,r[:number])
end

def test_costpercapita_ak153
  r = spreadsheet.costpercapita_ak153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.65590912986651,r[:number])
end

def test_costpercapita_al153
  r = spreadsheet.costpercapita_al153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.51837171017997,r[:number])
end

def test_costpercapita_am153
  r = spreadsheet.costpercapita_am153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.16842574865352,r[:number])
end

def test_costpercapita_an153
  r = spreadsheet.costpercapita_an153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.881790013158467,r[:number])
end

def test_costpercapita_ao153
  r = spreadsheet.costpercapita_ao153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.628394369883353,r[:number])
end

def test_costpercapita_ap153
  r = spreadsheet.costpercapita_ap153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.39643202687115,r[:number])
end

def test_costpercapita_aq153
  r = spreadsheet.costpercapita_aq153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.183754829847869,r[:number])
end

def test_costpercapita_as153
  r = spreadsheet.costpercapita_as153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.18679490695313,r[:number])
end

def test_costpercapita_at153
  r = spreadsheet.costpercapita_at153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(344.4155704400995,r[:number])
end

def test_costpercapita_av153
  r = spreadsheet.costpercapita_av153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw153
  r = spreadsheet.costpercapita_aw153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay153
  r = spreadsheet.costpercapita_ay153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az153
  r = spreadsheet.costpercapita_az153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba153
  r = spreadsheet.costpercapita_ba153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb153
  r = spreadsheet.costpercapita_bb153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc153
  r = spreadsheet.costpercapita_bc153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd153
  r = spreadsheet.costpercapita_bd153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be153
  r = spreadsheet.costpercapita_be153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf153
  r = spreadsheet.costpercapita_bf153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg153
  r = spreadsheet.costpercapita_bg153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi153
  r = spreadsheet.costpercapita_bi153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj153
  r = spreadsheet.costpercapita_bj153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk153
  r = spreadsheet.costpercapita_bk153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl153
  r = spreadsheet.costpercapita_bl153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm153
  r = spreadsheet.costpercapita_bm153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn153
  r = spreadsheet.costpercapita_bn153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo153
  r = spreadsheet.costpercapita_bo153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp153
  r = spreadsheet.costpercapita_bp153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq153
  r = spreadsheet.costpercapita_bq153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs153
  r = spreadsheet.costpercapita_bs153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.56242208548784,r[:number])
end

def test_costpercapita_bt153
  r = spreadsheet.costpercapita_bt153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.685654248629497,r[:number])
end

def test_costpercapita_bu153
  r = spreadsheet.costpercapita_bu153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.65590912986651,r[:number])
end

def test_costpercapita_bv153
  r = spreadsheet.costpercapita_bv153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.51837171017997,r[:number])
end

def test_costpercapita_bw153
  r = spreadsheet.costpercapita_bw153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.16842574865352,r[:number])
end

def test_costpercapita_bx153
  r = spreadsheet.costpercapita_bx153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.881790013158467,r[:number])
end

def test_costpercapita_by153
  r = spreadsheet.costpercapita_by153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.628394369883353,r[:number])
end

def test_costpercapita_bz153
  r = spreadsheet.costpercapita_bz153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.39643202687115,r[:number])
end

def test_costpercapita_ca153
  r = spreadsheet.costpercapita_ca153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.183754829847869,r[:number])
end

def test_costpercapita_cc153
  r = spreadsheet.costpercapita_cc153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.18679490695313,r[:number])
end

def test_costpercapita_cd153
  r = spreadsheet.costpercapita_cd153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(344.4155704400995,r[:number])
end

def test_costpercapita_cf153
  r = spreadsheet.costpercapita_cf153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg153
  r = spreadsheet.costpercapita_cg153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch153
  r = spreadsheet.costpercapita_ch153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci153
  r = spreadsheet.costpercapita_ci153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj153
  r = spreadsheet.costpercapita_cj153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck153
  r = spreadsheet.costpercapita_ck153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl153
  r = spreadsheet.costpercapita_cl153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm153
  r = spreadsheet.costpercapita_cm153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn153
  r = spreadsheet.costpercapita_cn153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp153
  r = spreadsheet.costpercapita_cp153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq153
  r = spreadsheet.costpercapita_cq153
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr153
  r = spreadsheet.costpercapita_cr153
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a154
  r = spreadsheet.costpercapita_a154
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b154
  r = spreadsheet.costpercapita_b154
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c154
  r = spreadsheet.costpercapita_c154
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e154
  r = spreadsheet.costpercapita_e154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f154
  r = spreadsheet.costpercapita_f154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g154
  r = spreadsheet.costpercapita_g154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h154
  r = spreadsheet.costpercapita_h154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i154
  r = spreadsheet.costpercapita_i154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j154
  r = spreadsheet.costpercapita_j154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k154
  r = spreadsheet.costpercapita_k154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l154
  r = spreadsheet.costpercapita_l154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m154
  r = spreadsheet.costpercapita_m154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o154
  r = spreadsheet.costpercapita_o154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p154
  r = spreadsheet.costpercapita_p154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q154
  r = spreadsheet.costpercapita_q154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r154
  r = spreadsheet.costpercapita_r154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s154
  r = spreadsheet.costpercapita_s154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t154
  r = spreadsheet.costpercapita_t154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u154
  r = spreadsheet.costpercapita_u154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v154
  r = spreadsheet.costpercapita_v154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w154
  r = spreadsheet.costpercapita_w154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y154
  r = spreadsheet.costpercapita_y154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.9280784216838,r[:number])
end

def test_costpercapita_z154
  r = spreadsheet.costpercapita_z154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.23585682698996,r[:number])
end

def test_costpercapita_aa154
  r = spreadsheet.costpercapita_aa154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.58283373821035,r[:number])
end

def test_costpercapita_ab154
  r = spreadsheet.costpercapita_ab154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.865371407177,r[:number])
end

def test_costpercapita_ac154
  r = spreadsheet.costpercapita_ac154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.12363862554827,r[:number])
end

def test_costpercapita_ad154
  r = spreadsheet.costpercapita_ad154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.89297861787793,r[:number])
end

def test_costpercapita_ae154
  r = spreadsheet.costpercapita_ae154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.70482107536645,r[:number])
end

def test_costpercapita_af154
  r = spreadsheet.costpercapita_af154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.11145045492985,r[:number])
end

def test_costpercapita_ag154
  r = spreadsheet.costpercapita_ag154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.96487082730376,r[:number])
end

def test_costpercapita_ai154
  r = spreadsheet.costpercapita_ai154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.9280784216838,r[:number])
end

def test_costpercapita_aj154
  r = spreadsheet.costpercapita_aj154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.23585682698996,r[:number])
end

def test_costpercapita_ak154
  r = spreadsheet.costpercapita_ak154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.58283373821035,r[:number])
end

def test_costpercapita_al154
  r = spreadsheet.costpercapita_al154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.865371407177,r[:number])
end

def test_costpercapita_am154
  r = spreadsheet.costpercapita_am154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.12363862554827,r[:number])
end

def test_costpercapita_an154
  r = spreadsheet.costpercapita_an154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.89297861787793,r[:number])
end

def test_costpercapita_ao154
  r = spreadsheet.costpercapita_ao154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.70482107536645,r[:number])
end

def test_costpercapita_ap154
  r = spreadsheet.costpercapita_ap154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.11145045492985,r[:number])
end

def test_costpercapita_aq154
  r = spreadsheet.costpercapita_aq154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.96487082730376,r[:number])
end

def test_costpercapita_as154
  r = spreadsheet.costpercapita_as154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.60109999945416,r[:number])
end

def test_costpercapita_at154
  r = spreadsheet.costpercapita_at154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6108.548251556942,r[:number])
end

def test_costpercapita_av154
  r = spreadsheet.costpercapita_av154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw154
  r = spreadsheet.costpercapita_aw154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay154
  r = spreadsheet.costpercapita_ay154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az154
  r = spreadsheet.costpercapita_az154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba154
  r = spreadsheet.costpercapita_ba154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb154
  r = spreadsheet.costpercapita_bb154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc154
  r = spreadsheet.costpercapita_bc154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd154
  r = spreadsheet.costpercapita_bd154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be154
  r = spreadsheet.costpercapita_be154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf154
  r = spreadsheet.costpercapita_bf154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg154
  r = spreadsheet.costpercapita_bg154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi154
  r = spreadsheet.costpercapita_bi154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj154
  r = spreadsheet.costpercapita_bj154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk154
  r = spreadsheet.costpercapita_bk154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl154
  r = spreadsheet.costpercapita_bl154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm154
  r = spreadsheet.costpercapita_bm154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn154
  r = spreadsheet.costpercapita_bn154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo154
  r = spreadsheet.costpercapita_bo154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp154
  r = spreadsheet.costpercapita_bp154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq154
  r = spreadsheet.costpercapita_bq154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs154
  r = spreadsheet.costpercapita_bs154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.9280784216838,r[:number])
end

def test_costpercapita_bt154
  r = spreadsheet.costpercapita_bt154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.23585682698996,r[:number])
end

def test_costpercapita_bu154
  r = spreadsheet.costpercapita_bu154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(366.58283373821035,r[:number])
end

def test_costpercapita_bv154
  r = spreadsheet.costpercapita_bv154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.865371407177,r[:number])
end

def test_costpercapita_bw154
  r = spreadsheet.costpercapita_bw154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(279.12363862554827,r[:number])
end

def test_costpercapita_bx154
  r = spreadsheet.costpercapita_bx154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(210.89297861787793,r[:number])
end

def test_costpercapita_by154
  r = spreadsheet.costpercapita_by154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(159.70482107536645,r[:number])
end

def test_costpercapita_bz154
  r = spreadsheet.costpercapita_bz154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(121.11145045492985,r[:number])
end

def test_costpercapita_ca154
  r = spreadsheet.costpercapita_ca154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.96487082730376,r[:number])
end

def test_costpercapita_cc154
  r = spreadsheet.costpercapita_cc154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(262.60109999945416,r[:number])
end

def test_costpercapita_cd154
  r = spreadsheet.costpercapita_cd154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6108.548251556942,r[:number])
end

def test_costpercapita_cf154
  r = spreadsheet.costpercapita_cf154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg154
  r = spreadsheet.costpercapita_cg154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch154
  r = spreadsheet.costpercapita_ch154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci154
  r = spreadsheet.costpercapita_ci154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj154
  r = spreadsheet.costpercapita_cj154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck154
  r = spreadsheet.costpercapita_ck154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl154
  r = spreadsheet.costpercapita_cl154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm154
  r = spreadsheet.costpercapita_cm154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn154
  r = spreadsheet.costpercapita_cn154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp154
  r = spreadsheet.costpercapita_cp154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq154
  r = spreadsheet.costpercapita_cq154
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr154
  r = spreadsheet.costpercapita_cr154
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a155
  r = spreadsheet.costpercapita_a155
  assert_equal(:ExcelString,r[:type])
  assert_equal("XV.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b155
  r = spreadsheet.costpercapita_b155
  assert_equal(:ExcelString,r[:type])
  assert_equal("Indigenous fossil-fuel production - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c155
  r = spreadsheet.costpercapita_c155
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e155
  r = spreadsheet.costpercapita_e155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f155
  r = spreadsheet.costpercapita_f155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g155
  r = spreadsheet.costpercapita_g155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h155
  r = spreadsheet.costpercapita_h155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i155
  r = spreadsheet.costpercapita_i155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j155
  r = spreadsheet.costpercapita_j155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k155
  r = spreadsheet.costpercapita_k155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l155
  r = spreadsheet.costpercapita_l155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m155
  r = spreadsheet.costpercapita_m155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o155
  r = spreadsheet.costpercapita_o155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p155
  r = spreadsheet.costpercapita_p155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q155
  r = spreadsheet.costpercapita_q155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r155
  r = spreadsheet.costpercapita_r155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s155
  r = spreadsheet.costpercapita_s155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t155
  r = spreadsheet.costpercapita_t155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u155
  r = spreadsheet.costpercapita_u155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v155
  r = spreadsheet.costpercapita_v155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w155
  r = spreadsheet.costpercapita_w155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y155
  r = spreadsheet.costpercapita_y155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_z155
  r = spreadsheet.costpercapita_z155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.07770551122925,r[:number])
end

def test_costpercapita_aa155
  r = spreadsheet.costpercapita_aa155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.36957684061997,r[:number])
end

def test_costpercapita_ab155
  r = spreadsheet.costpercapita_ab155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.03103814107547,r[:number])
end

def test_costpercapita_ac155
  r = spreadsheet.costpercapita_ac155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.67234745556412,r[:number])
end

def test_costpercapita_ad155
  r = spreadsheet.costpercapita_ad155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.35227163667606,r[:number])
end

def test_costpercapita_ae155
  r = spreadsheet.costpercapita_ae155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.60636580201707,r[:number])
end

def test_costpercapita_af155
  r = spreadsheet.costpercapita_af155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.71891724557419,r[:number])
end

def test_costpercapita_ag155
  r = spreadsheet.costpercapita_ag155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.47558198289116,r[:number])
end

def test_costpercapita_ai155
  r = spreadsheet.costpercapita_ai155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_aj155
  r = spreadsheet.costpercapita_aj155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.07770551122925,r[:number])
end

def test_costpercapita_ak155
  r = spreadsheet.costpercapita_ak155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.36957684061997,r[:number])
end

def test_costpercapita_al155
  r = spreadsheet.costpercapita_al155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.03103814107547,r[:number])
end

def test_costpercapita_am155
  r = spreadsheet.costpercapita_am155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.67234745556412,r[:number])
end

def test_costpercapita_an155
  r = spreadsheet.costpercapita_an155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.35227163667606,r[:number])
end

def test_costpercapita_ao155
  r = spreadsheet.costpercapita_ao155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.60636580201707,r[:number])
end

def test_costpercapita_ap155
  r = spreadsheet.costpercapita_ap155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.71891724557419,r[:number])
end

def test_costpercapita_aq155
  r = spreadsheet.costpercapita_aq155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.47558198289116,r[:number])
end

def test_costpercapita_as155
  r = spreadsheet.costpercapita_as155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17565906037409,r[:number])
end

def test_costpercapita_at155
  r = spreadsheet.costpercapita_at155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2300.005390441694,r[:number])
end

def test_costpercapita_av155
  r = spreadsheet.costpercapita_av155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw155
  r = spreadsheet.costpercapita_aw155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay155
  r = spreadsheet.costpercapita_ay155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az155
  r = spreadsheet.costpercapita_az155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba155
  r = spreadsheet.costpercapita_ba155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb155
  r = spreadsheet.costpercapita_bb155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc155
  r = spreadsheet.costpercapita_bc155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd155
  r = spreadsheet.costpercapita_bd155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be155
  r = spreadsheet.costpercapita_be155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf155
  r = spreadsheet.costpercapita_bf155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg155
  r = spreadsheet.costpercapita_bg155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi155
  r = spreadsheet.costpercapita_bi155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj155
  r = spreadsheet.costpercapita_bj155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk155
  r = spreadsheet.costpercapita_bk155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl155
  r = spreadsheet.costpercapita_bl155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm155
  r = spreadsheet.costpercapita_bm155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn155
  r = spreadsheet.costpercapita_bn155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo155
  r = spreadsheet.costpercapita_bo155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp155
  r = spreadsheet.costpercapita_bp155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq155
  r = spreadsheet.costpercapita_bq155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs155
  r = spreadsheet.costpercapita_bs155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.2771269277195,r[:number])
end

def test_costpercapita_bt155
  r = spreadsheet.costpercapita_bt155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(148.07770551122925,r[:number])
end

def test_costpercapita_bu155
  r = spreadsheet.costpercapita_bu155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.36957684061997,r[:number])
end

def test_costpercapita_bv155
  r = spreadsheet.costpercapita_bv155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.03103814107547,r[:number])
end

def test_costpercapita_bw155
  r = spreadsheet.costpercapita_bw155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.67234745556412,r[:number])
end

def test_costpercapita_bx155
  r = spreadsheet.costpercapita_bx155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.35227163667606,r[:number])
end

def test_costpercapita_by155
  r = spreadsheet.costpercapita_by155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.60636580201707,r[:number])
end

def test_costpercapita_bz155
  r = spreadsheet.costpercapita_bz155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.71891724557419,r[:number])
end

def test_costpercapita_ca155
  r = spreadsheet.costpercapita_ca155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.47558198289116,r[:number])
end

def test_costpercapita_cc155
  r = spreadsheet.costpercapita_cc155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.17565906037409,r[:number])
end

def test_costpercapita_cd155
  r = spreadsheet.costpercapita_cd155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2300.005390441694,r[:number])
end

def test_costpercapita_cf155
  r = spreadsheet.costpercapita_cf155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg155
  r = spreadsheet.costpercapita_cg155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch155
  r = spreadsheet.costpercapita_ch155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci155
  r = spreadsheet.costpercapita_ci155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj155
  r = spreadsheet.costpercapita_cj155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck155
  r = spreadsheet.costpercapita_ck155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl155
  r = spreadsheet.costpercapita_cl155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm155
  r = spreadsheet.costpercapita_cm155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn155
  r = spreadsheet.costpercapita_cn155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp155
  r = spreadsheet.costpercapita_cp155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq155
  r = spreadsheet.costpercapita_cq155
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr155
  r = spreadsheet.costpercapita_cr155
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a156
  r = spreadsheet.costpercapita_a156
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b156
  r = spreadsheet.costpercapita_b156
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil fuel transfers",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c156
  r = spreadsheet.costpercapita_c156
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e156
  r = spreadsheet.costpercapita_e156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.94763451206937,r[:number])
end

def test_costpercapita_f156
  r = spreadsheet.costpercapita_f156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_g156
  r = spreadsheet.costpercapita_g156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.081417736308573,r[:number])
end

def test_costpercapita_h156
  r = spreadsheet.costpercapita_h156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.29365579192016,r[:number])
end

def test_costpercapita_i156
  r = spreadsheet.costpercapita_i156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.67235064959203,r[:number])
end

def test_costpercapita_j156
  r = spreadsheet.costpercapita_j156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.754077896114104,r[:number])
end

def test_costpercapita_k156
  r = spreadsheet.costpercapita_k156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.548159322667914,r[:number])
end

def test_costpercapita_l156
  r = spreadsheet.costpercapita_l156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.54664845323366,r[:number])
end

def test_costpercapita_m156
  r = spreadsheet.costpercapita_m156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.2321666925737,r[:number])
end

def test_costpercapita_o156
  r = spreadsheet.costpercapita_o156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06306043679317243,r[:number])
end

def test_costpercapita_p156
  r = spreadsheet.costpercapita_p156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11607507884389356,r[:number])
end

def test_costpercapita_q156
  r = spreadsheet.costpercapita_q156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12501254979578916,r[:number])
end

def test_costpercapita_r156
  r = spreadsheet.costpercapita_r156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13992077635107555,r[:number])
end

def test_costpercapita_s156
  r = spreadsheet.costpercapita_s156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1543218174354864,r[:number])
end

def test_costpercapita_t156
  r = spreadsheet.costpercapita_t156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16534813948791138,r[:number])
end

def test_costpercapita_u156
  r = spreadsheet.costpercapita_u156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.17424420813699407,r[:number])
end

def test_costpercapita_v156
  r = spreadsheet.costpercapita_v156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.18340207546488746,r[:number])
end

def test_costpercapita_w156
  r = spreadsheet.costpercapita_w156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.19058259144485315,r[:number])
end

def test_costpercapita_y156
  r = spreadsheet.costpercapita_y156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z156
  r = spreadsheet.costpercapita_z156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa156
  r = spreadsheet.costpercapita_aa156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab156
  r = spreadsheet.costpercapita_ab156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac156
  r = spreadsheet.costpercapita_ac156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad156
  r = spreadsheet.costpercapita_ad156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae156
  r = spreadsheet.costpercapita_ae156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af156
  r = spreadsheet.costpercapita_af156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag156
  r = spreadsheet.costpercapita_ag156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai156
  r = spreadsheet.costpercapita_ai156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.01069494886254,r[:number])
end

def test_costpercapita_aj156
  r = spreadsheet.costpercapita_aj156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.95743528474692,r[:number])
end

def test_costpercapita_ak156
  r = spreadsheet.costpercapita_ak156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.20643028610436,r[:number])
end

def test_costpercapita_al156
  r = spreadsheet.costpercapita_al156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.433576568271235,r[:number])
end

def test_costpercapita_am156
  r = spreadsheet.costpercapita_am156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.82667246702752,r[:number])
end

def test_costpercapita_an156
  r = spreadsheet.costpercapita_an156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.919426035602015,r[:number])
end

def test_costpercapita_ao156
  r = spreadsheet.costpercapita_ao156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.722403530804904,r[:number])
end

def test_costpercapita_ap156
  r = spreadsheet.costpercapita_ap156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.73005052869854,r[:number])
end

def test_costpercapita_aq156
  r = spreadsheet.costpercapita_aq156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.42274928401856,r[:number])
end

def test_costpercapita_as156
  r = spreadsheet.costpercapita_as156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.91438210379295,r[:number])
end

def test_costpercapita_at156
  r = spreadsheet.costpercapita_at156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.0722101305283,r[:number])
end

def test_costpercapita_av156
  r = spreadsheet.costpercapita_av156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw156
  r = spreadsheet.costpercapita_aw156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay156
  r = spreadsheet.costpercapita_ay156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.939463153040638,r[:number])
end

def test_costpercapita_az156
  r = spreadsheet.costpercapita_az156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.070986170953816,r[:number])
end

def test_costpercapita_ba156
  r = spreadsheet.costpercapita_ba156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.48774359741206,r[:number])
end

def test_costpercapita_bb156
  r = spreadsheet.costpercapita_bb156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.515688904506828,r[:number])
end

def test_costpercapita_bc156
  r = spreadsheet.costpercapita_bc156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.023582196131454,r[:number])
end

def test_costpercapita_bd156
  r = spreadsheet.costpercapita_bd156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.36415156719007,r[:number])
end

def test_costpercapita_be156
  r = spreadsheet.costpercapita_be156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.17300041090008,r[:number])
end

def test_costpercapita_bf156
  r = spreadsheet.costpercapita_bf156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.0883271722773,r[:number])
end

def test_costpercapita_bg156
  r = spreadsheet.costpercapita_bg156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.82580995471769,r[:number])
end

def test_costpercapita_bi156
  r = spreadsheet.costpercapita_bi156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.939463153040638,r[:number])
end

def test_costpercapita_bj156
  r = spreadsheet.costpercapita_bj156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.451869353447425,r[:number])
end

def test_costpercapita_bk156
  r = spreadsheet.costpercapita_bk156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.040889521909,r[:number])
end

def test_costpercapita_bl156
  r = spreadsheet.costpercapita_bl156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.86988354222901,r[:number])
end

def test_costpercapita_bm156
  r = spreadsheet.costpercapita_bm156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.41022423737284,r[:number])
end

def test_costpercapita_bn156
  r = spreadsheet.costpercapita_bn156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.96471676793088,r[:number])
end

def test_costpercapita_bo156
  r = spreadsheet.costpercapita_bo156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.51675909307953,r[:number])
end

def test_costpercapita_bp156
  r = spreadsheet.costpercapita_bp156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.52106620631645,r[:number])
end

def test_costpercapita_bq156
  r = spreadsheet.costpercapita_bq156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.86163578471165,r[:number])
end

def test_costpercapita_bs156
  r = spreadsheet.costpercapita_bs156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.00252358983381,r[:number])
end

def test_costpercapita_bt156
  r = spreadsheet.costpercapita_bt156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.56794443229132,r[:number])
end

def test_costpercapita_bu156
  r = spreadsheet.costpercapita_bu156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.16590207170479,r[:number])
end

def test_costpercapita_bv156
  r = spreadsheet.costpercapita_bv156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.00980431858009,r[:number])
end

def test_costpercapita_bw156
  r = spreadsheet.costpercapita_bw156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.56454605480833,r[:number])
end

def test_costpercapita_bx156
  r = spreadsheet.costpercapita_bx156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.1300649074188,r[:number])
end

def test_costpercapita_by156
  r = spreadsheet.costpercapita_by156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.69100330121653,r[:number])
end

def test_costpercapita_bz156
  r = spreadsheet.costpercapita_bz156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.70446828178133,r[:number])
end

def test_costpercapita_ca156
  r = spreadsheet.costpercapita_ca156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(125.0522183761565,r[:number])
end

def test_costpercapita_cc156
  r = spreadsheet.costpercapita_cc156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.98760837042127,r[:number])
end

def test_costpercapita_cd156
  r = spreadsheet.costpercapita_cd156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1308.551074369278,r[:number])
end

def test_costpercapita_cf156
  r = spreadsheet.costpercapita_cf156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-26.00817135902873,r[:number])
end

def test_costpercapita_cg156
  r = spreadsheet.costpercapita_cg156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.610509147544397,r[:number])
end

def test_costpercapita_ch156
  r = spreadsheet.costpercapita_ch156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.959471785600428,r[:number])
end

def test_costpercapita_ci156
  r = spreadsheet.costpercapita_ci156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.57622775030885,r[:number])
end

def test_costpercapita_cj156
  r = spreadsheet.costpercapita_cj156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.737873587780808,r[:number])
end

def test_costpercapita_ck156
  r = spreadsheet.costpercapita_ck156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.210638871816776,r[:number])
end

def test_costpercapita_cl156
  r = spreadsheet.costpercapita_cl156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.968599770411615,r[:number])
end

def test_costpercapita_cm156
  r = spreadsheet.costpercapita_cm156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.9744177530828,r[:number])
end

def test_costpercapita_cn156
  r = spreadsheet.costpercapita_cn156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.629469092137946,r[:number])
end

def test_costpercapita_cp156
  r = spreadsheet.costpercapita_cp156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.07322626662832,r[:number])
end

def test_costpercapita_cq156
  r = spreadsheet.costpercapita_cq156
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(473.4788642387497,r[:number])
end

def test_costpercapita_cr156
  r = spreadsheet.costpercapita_cr156
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a157
  r = spreadsheet.costpercapita_a157
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b157
  r = spreadsheet.costpercapita_b157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Coal",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c157
  r = spreadsheet.costpercapita_c157
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e157
  r = spreadsheet.costpercapita_e157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f157
  r = spreadsheet.costpercapita_f157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g157
  r = spreadsheet.costpercapita_g157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h157
  r = spreadsheet.costpercapita_h157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i157
  r = spreadsheet.costpercapita_i157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j157
  r = spreadsheet.costpercapita_j157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k157
  r = spreadsheet.costpercapita_k157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l157
  r = spreadsheet.costpercapita_l157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m157
  r = spreadsheet.costpercapita_m157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o157
  r = spreadsheet.costpercapita_o157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p157
  r = spreadsheet.costpercapita_p157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q157
  r = spreadsheet.costpercapita_q157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r157
  r = spreadsheet.costpercapita_r157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s157
  r = spreadsheet.costpercapita_s157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t157
  r = spreadsheet.costpercapita_t157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u157
  r = spreadsheet.costpercapita_u157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v157
  r = spreadsheet.costpercapita_v157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w157
  r = spreadsheet.costpercapita_w157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y157
  r = spreadsheet.costpercapita_y157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_z157
  r = spreadsheet.costpercapita_z157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.287271431459665,r[:number])
end

def test_costpercapita_aa157
  r = spreadsheet.costpercapita_aa157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.10350156078442,r[:number])
end

def test_costpercapita_ab157
  r = spreadsheet.costpercapita_ab157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.698980309301772,r[:number])
end

def test_costpercapita_ac157
  r = spreadsheet.costpercapita_ac157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.697510809131851,r[:number])
end

def test_costpercapita_ad157
  r = spreadsheet.costpercapita_ad157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5494775529983467,r[:number])
end

def test_costpercapita_ae157
  r = spreadsheet.costpercapita_ae157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.156879321959699,r[:number])
end

def test_costpercapita_af157
  r = spreadsheet.costpercapita_af157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.774339620388081,r[:number])
end

def test_costpercapita_ag157
  r = spreadsheet.costpercapita_ag157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.485976529095824,r[:number])
end

def test_costpercapita_ai157
  r = spreadsheet.costpercapita_ai157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_aj157
  r = spreadsheet.costpercapita_aj157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.287271431459665,r[:number])
end

def test_costpercapita_ak157
  r = spreadsheet.costpercapita_ak157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.10350156078442,r[:number])
end

def test_costpercapita_al157
  r = spreadsheet.costpercapita_al157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.698980309301772,r[:number])
end

def test_costpercapita_am157
  r = spreadsheet.costpercapita_am157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.697510809131851,r[:number])
end

def test_costpercapita_an157
  r = spreadsheet.costpercapita_an157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5494775529983467,r[:number])
end

def test_costpercapita_ao157
  r = spreadsheet.costpercapita_ao157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.156879321959699,r[:number])
end

def test_costpercapita_ap157
  r = spreadsheet.costpercapita_ap157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.774339620388081,r[:number])
end

def test_costpercapita_aq157
  r = spreadsheet.costpercapita_aq157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.485976529095824,r[:number])
end

def test_costpercapita_as157
  r = spreadsheet.costpercapita_as157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.893237786537348,r[:number])
end

def test_costpercapita_at157
  r = spreadsheet.costpercapita_at157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(435.6385796090579,r[:number])
end

def test_costpercapita_av157
  r = spreadsheet.costpercapita_av157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw157
  r = spreadsheet.costpercapita_aw157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay157
  r = spreadsheet.costpercapita_ay157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az157
  r = spreadsheet.costpercapita_az157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba157
  r = spreadsheet.costpercapita_ba157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb157
  r = spreadsheet.costpercapita_bb157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc157
  r = spreadsheet.costpercapita_bc157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd157
  r = spreadsheet.costpercapita_bd157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be157
  r = spreadsheet.costpercapita_be157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf157
  r = spreadsheet.costpercapita_bf157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg157
  r = spreadsheet.costpercapita_bg157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi157
  r = spreadsheet.costpercapita_bi157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj157
  r = spreadsheet.costpercapita_bj157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk157
  r = spreadsheet.costpercapita_bk157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl157
  r = spreadsheet.costpercapita_bl157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm157
  r = spreadsheet.costpercapita_bm157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn157
  r = spreadsheet.costpercapita_bn157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo157
  r = spreadsheet.costpercapita_bo157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp157
  r = spreadsheet.costpercapita_bp157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq157
  r = spreadsheet.costpercapita_bq157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs157
  r = spreadsheet.costpercapita_bs157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.28520294371646,r[:number])
end

def test_costpercapita_bt157
  r = spreadsheet.costpercapita_bt157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.287271431459665,r[:number])
end

def test_costpercapita_bu157
  r = spreadsheet.costpercapita_bu157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.10350156078442,r[:number])
end

def test_costpercapita_bv157
  r = spreadsheet.costpercapita_bv157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.698980309301772,r[:number])
end

def test_costpercapita_bw157
  r = spreadsheet.costpercapita_bw157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.697510809131851,r[:number])
end

def test_costpercapita_bx157
  r = spreadsheet.costpercapita_bx157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5494775529983467,r[:number])
end

def test_costpercapita_by157
  r = spreadsheet.costpercapita_by157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.156879321959699,r[:number])
end

def test_costpercapita_bz157
  r = spreadsheet.costpercapita_bz157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.774339620388081,r[:number])
end

def test_costpercapita_ca157
  r = spreadsheet.costpercapita_ca157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.485976529095824,r[:number])
end

def test_costpercapita_cc157
  r = spreadsheet.costpercapita_cc157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.893237786537348,r[:number])
end

def test_costpercapita_cd157
  r = spreadsheet.costpercapita_cd157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(435.6385796090579,r[:number])
end

def test_costpercapita_cf157
  r = spreadsheet.costpercapita_cf157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg157
  r = spreadsheet.costpercapita_cg157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch157
  r = spreadsheet.costpercapita_ch157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci157
  r = spreadsheet.costpercapita_ci157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj157
  r = spreadsheet.costpercapita_cj157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck157
  r = spreadsheet.costpercapita_ck157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl157
  r = spreadsheet.costpercapita_cl157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm157
  r = spreadsheet.costpercapita_cm157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn157
  r = spreadsheet.costpercapita_cn157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp157
  r = spreadsheet.costpercapita_cp157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq157
  r = spreadsheet.costpercapita_cq157
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr157
  r = spreadsheet.costpercapita_cr157
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a158
  r = spreadsheet.costpercapita_a158
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b158
  r = spreadsheet.costpercapita_b158
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Oil",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c158
  r = spreadsheet.costpercapita_c158
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e158
  r = spreadsheet.costpercapita_e158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f158
  r = spreadsheet.costpercapita_f158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g158
  r = spreadsheet.costpercapita_g158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h158
  r = spreadsheet.costpercapita_h158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i158
  r = spreadsheet.costpercapita_i158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j158
  r = spreadsheet.costpercapita_j158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k158
  r = spreadsheet.costpercapita_k158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l158
  r = spreadsheet.costpercapita_l158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m158
  r = spreadsheet.costpercapita_m158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o158
  r = spreadsheet.costpercapita_o158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p158
  r = spreadsheet.costpercapita_p158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q158
  r = spreadsheet.costpercapita_q158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r158
  r = spreadsheet.costpercapita_r158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s158
  r = spreadsheet.costpercapita_s158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t158
  r = spreadsheet.costpercapita_t158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u158
  r = spreadsheet.costpercapita_u158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v158
  r = spreadsheet.costpercapita_v158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w158
  r = spreadsheet.costpercapita_w158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y158
  r = spreadsheet.costpercapita_y158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_z158
  r = spreadsheet.costpercapita_z158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.89137713622105,r[:number])
end

def test_costpercapita_aa158
  r = spreadsheet.costpercapita_aa158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.39510652525456,r[:number])
end

def test_costpercapita_ab158
  r = spreadsheet.costpercapita_ab158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.44850232492524,r[:number])
end

def test_costpercapita_ac158
  r = spreadsheet.costpercapita_ac158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.58543413560005,r[:number])
end

def test_costpercapita_ad158
  r = spreadsheet.costpercapita_ad158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557.8600611121882,r[:number])
end

def test_costpercapita_ae158
  r = spreadsheet.costpercapita_ae158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(602.3170189290973,r[:number])
end

def test_costpercapita_af158
  r = spreadsheet.costpercapita_af158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.3869550524987,r[:number])
end

def test_costpercapita_ag158
  r = spreadsheet.costpercapita_ag158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(659.5122410383503,r[:number])
end

def test_costpercapita_ai158
  r = spreadsheet.costpercapita_ai158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_aj158
  r = spreadsheet.costpercapita_aj158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.89137713622105,r[:number])
end

def test_costpercapita_ak158
  r = spreadsheet.costpercapita_ak158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.39510652525456,r[:number])
end

def test_costpercapita_al158
  r = spreadsheet.costpercapita_al158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.44850232492524,r[:number])
end

def test_costpercapita_am158
  r = spreadsheet.costpercapita_am158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.58543413560005,r[:number])
end

def test_costpercapita_an158
  r = spreadsheet.costpercapita_an158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557.8600611121882,r[:number])
end

def test_costpercapita_ao158
  r = spreadsheet.costpercapita_ao158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(602.3170189290973,r[:number])
end

def test_costpercapita_ap158
  r = spreadsheet.costpercapita_ap158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.3869550524987,r[:number])
end

def test_costpercapita_aq158
  r = spreadsheet.costpercapita_aq158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(659.5122410383503,r[:number])
end

def test_costpercapita_as158
  r = spreadsheet.costpercapita_as158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(417.0847261960025,r[:number])
end

def test_costpercapita_at158
  r = spreadsheet.costpercapita_at158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7983.338050631713,r[:number])
end

def test_costpercapita_av158
  r = spreadsheet.costpercapita_av158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw158
  r = spreadsheet.costpercapita_aw158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay158
  r = spreadsheet.costpercapita_ay158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az158
  r = spreadsheet.costpercapita_az158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba158
  r = spreadsheet.costpercapita_ba158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb158
  r = spreadsheet.costpercapita_bb158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc158
  r = spreadsheet.costpercapita_bc158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd158
  r = spreadsheet.costpercapita_bd158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be158
  r = spreadsheet.costpercapita_be158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf158
  r = spreadsheet.costpercapita_bf158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg158
  r = spreadsheet.costpercapita_bg158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi158
  r = spreadsheet.costpercapita_bi158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj158
  r = spreadsheet.costpercapita_bj158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk158
  r = spreadsheet.costpercapita_bk158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl158
  r = spreadsheet.costpercapita_bl158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm158
  r = spreadsheet.costpercapita_bm158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn158
  r = spreadsheet.costpercapita_bn158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo158
  r = spreadsheet.costpercapita_bo158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp158
  r = spreadsheet.costpercapita_bp158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq158
  r = spreadsheet.costpercapita_bq158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs158
  r = spreadsheet.costpercapita_bs158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.365839509887266,r[:number])
end

def test_costpercapita_bt158
  r = spreadsheet.costpercapita_bt158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.89137713622105,r[:number])
end

def test_costpercapita_bu158
  r = spreadsheet.costpercapita_bu158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(261.39510652525456,r[:number])
end

def test_costpercapita_bv158
  r = spreadsheet.costpercapita_bv158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(380.44850232492524,r[:number])
end

def test_costpercapita_bw158
  r = spreadsheet.costpercapita_bw158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.58543413560005,r[:number])
end

def test_costpercapita_bx158
  r = spreadsheet.costpercapita_bx158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557.8600611121882,r[:number])
end

def test_costpercapita_by158
  r = spreadsheet.costpercapita_by158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(602.3170189290973,r[:number])
end

def test_costpercapita_bz158
  r = spreadsheet.costpercapita_bz158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.3869550524987,r[:number])
end

def test_costpercapita_ca158
  r = spreadsheet.costpercapita_ca158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(659.5122410383503,r[:number])
end

def test_costpercapita_cc158
  r = spreadsheet.costpercapita_cc158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(417.0847261960025,r[:number])
end

def test_costpercapita_cd158
  r = spreadsheet.costpercapita_cd158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7983.338050631713,r[:number])
end

def test_costpercapita_cf158
  r = spreadsheet.costpercapita_cf158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg158
  r = spreadsheet.costpercapita_cg158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch158
  r = spreadsheet.costpercapita_ch158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci158
  r = spreadsheet.costpercapita_ci158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj158
  r = spreadsheet.costpercapita_cj158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck158
  r = spreadsheet.costpercapita_ck158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl158
  r = spreadsheet.costpercapita_cl158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm158
  r = spreadsheet.costpercapita_cm158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn158
  r = spreadsheet.costpercapita_cn158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp158
  r = spreadsheet.costpercapita_cp158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq158
  r = spreadsheet.costpercapita_cq158
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr158
  r = spreadsheet.costpercapita_cr158
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a159
  r = spreadsheet.costpercapita_a159
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVI.b.Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b159
  r = spreadsheet.costpercapita_b159
  assert_equal(:ExcelString,r[:type])
  assert_equal("Balancing imports - Gas",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c159
  r = spreadsheet.costpercapita_c159
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e159
  r = spreadsheet.costpercapita_e159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f159
  r = spreadsheet.costpercapita_f159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_g159
  r = spreadsheet.costpercapita_g159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_h159
  r = spreadsheet.costpercapita_h159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_i159
  r = spreadsheet.costpercapita_i159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_j159
  r = spreadsheet.costpercapita_j159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_k159
  r = spreadsheet.costpercapita_k159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_l159
  r = spreadsheet.costpercapita_l159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_m159
  r = spreadsheet.costpercapita_m159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_o159
  r = spreadsheet.costpercapita_o159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p159
  r = spreadsheet.costpercapita_p159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_q159
  r = spreadsheet.costpercapita_q159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_r159
  r = spreadsheet.costpercapita_r159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_s159
  r = spreadsheet.costpercapita_s159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_t159
  r = spreadsheet.costpercapita_t159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_u159
  r = spreadsheet.costpercapita_u159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_v159
  r = spreadsheet.costpercapita_v159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_w159
  r = spreadsheet.costpercapita_w159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_y159
  r = spreadsheet.costpercapita_y159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_z159
  r = spreadsheet.costpercapita_z159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.47438193395197,r[:number])
end

def test_costpercapita_aa159
  r = spreadsheet.costpercapita_aa159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.87037180931367,r[:number])
end

def test_costpercapita_ab159
  r = spreadsheet.costpercapita_ab159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(453.4878406551128,r[:number])
end

def test_costpercapita_ac159
  r = spreadsheet.costpercapita_ac159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(631.694894908348,r[:number])
end

def test_costpercapita_ad159
  r = spreadsheet.costpercapita_ad159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(710.8428952864191,r[:number])
end

def test_costpercapita_ae159
  r = spreadsheet.costpercapita_ae159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.2105240521341,r[:number])
end

def test_costpercapita_af159
  r = spreadsheet.costpercapita_af159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(831.9739923748017,r[:number])
end

def test_costpercapita_ag159
  r = spreadsheet.costpercapita_ag159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(877.619710833086,r[:number])
end

def test_costpercapita_ai159
  r = spreadsheet.costpercapita_ai159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_aj159
  r = spreadsheet.costpercapita_aj159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.47438193395197,r[:number])
end

def test_costpercapita_ak159
  r = spreadsheet.costpercapita_ak159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.87037180931367,r[:number])
end

def test_costpercapita_al159
  r = spreadsheet.costpercapita_al159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(453.4878406551128,r[:number])
end

def test_costpercapita_am159
  r = spreadsheet.costpercapita_am159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(631.694894908348,r[:number])
end

def test_costpercapita_an159
  r = spreadsheet.costpercapita_an159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(710.8428952864191,r[:number])
end

def test_costpercapita_ao159
  r = spreadsheet.costpercapita_ao159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.2105240521341,r[:number])
end

def test_costpercapita_ap159
  r = spreadsheet.costpercapita_ap159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(831.9739923748017,r[:number])
end

def test_costpercapita_aq159
  r = spreadsheet.costpercapita_aq159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(877.619710833086,r[:number])
end

def test_costpercapita_as159
  r = spreadsheet.costpercapita_as159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(536.7211536646223,r[:number])
end

def test_costpercapita_at159
  r = spreadsheet.costpercapita_at159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10123.334936058154,r[:number])
end

def test_costpercapita_av159
  r = spreadsheet.costpercapita_av159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw159
  r = spreadsheet.costpercapita_aw159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay159
  r = spreadsheet.costpercapita_ay159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az159
  r = spreadsheet.costpercapita_az159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ba159
  r = spreadsheet.costpercapita_ba159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bb159
  r = spreadsheet.costpercapita_bb159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bc159
  r = spreadsheet.costpercapita_bc159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bd159
  r = spreadsheet.costpercapita_bd159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_be159
  r = spreadsheet.costpercapita_be159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bf159
  r = spreadsheet.costpercapita_bf159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bg159
  r = spreadsheet.costpercapita_bg159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bi159
  r = spreadsheet.costpercapita_bi159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj159
  r = spreadsheet.costpercapita_bj159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bk159
  r = spreadsheet.costpercapita_bk159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bl159
  r = spreadsheet.costpercapita_bl159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bm159
  r = spreadsheet.costpercapita_bm159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bn159
  r = spreadsheet.costpercapita_bn159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bo159
  r = spreadsheet.costpercapita_bo159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bp159
  r = spreadsheet.costpercapita_bp159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bq159
  r = spreadsheet.costpercapita_bq159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bs159
  r = spreadsheet.costpercapita_bs159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.31577112843433,r[:number])
end

def test_costpercapita_bt159
  r = spreadsheet.costpercapita_bt159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(174.47438193395197,r[:number])
end

def test_costpercapita_bu159
  r = spreadsheet.costpercapita_bu159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(293.87037180931367,r[:number])
end

def test_costpercapita_bv159
  r = spreadsheet.costpercapita_bv159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(453.4878406551128,r[:number])
end

def test_costpercapita_bw159
  r = spreadsheet.costpercapita_bw159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(631.694894908348,r[:number])
end

def test_costpercapita_bx159
  r = spreadsheet.costpercapita_bx159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(710.8428952864191,r[:number])
end

def test_costpercapita_by159
  r = spreadsheet.costpercapita_by159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.2105240521341,r[:number])
end

def test_costpercapita_bz159
  r = spreadsheet.costpercapita_bz159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(831.9739923748017,r[:number])
end

def test_costpercapita_ca159
  r = spreadsheet.costpercapita_ca159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(877.619710833086,r[:number])
end

def test_costpercapita_cc159
  r = spreadsheet.costpercapita_cc159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(536.7211536646223,r[:number])
end

def test_costpercapita_cd159
  r = spreadsheet.costpercapita_cd159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10123.334936058154,r[:number])
end

def test_costpercapita_cf159
  r = spreadsheet.costpercapita_cf159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg159
  r = spreadsheet.costpercapita_cg159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch159
  r = spreadsheet.costpercapita_ch159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci159
  r = spreadsheet.costpercapita_ci159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj159
  r = spreadsheet.costpercapita_cj159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck159
  r = spreadsheet.costpercapita_ck159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl159
  r = spreadsheet.costpercapita_cl159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm159
  r = spreadsheet.costpercapita_cm159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn159
  r = spreadsheet.costpercapita_cn159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp159
  r = spreadsheet.costpercapita_cp159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq159
  r = spreadsheet.costpercapita_cq159
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr159
  r = spreadsheet.costpercapita_cr159
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a160
  r = spreadsheet.costpercapita_a160
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b160
  r = spreadsheet.costpercapita_b160
  assert_equal(:ExcelString,r[:type])
  assert_equal("District heating effective demand",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c160
  r = spreadsheet.costpercapita_c160
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e160
  r = spreadsheet.costpercapita_e160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0507430093666497,r[:number])
end

def test_costpercapita_f160
  r = spreadsheet.costpercapita_f160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7009898215621236,r[:number])
end

def test_costpercapita_g160
  r = spreadsheet.costpercapita_g160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.716427145257424,r[:number])
end

def test_costpercapita_h160
  r = spreadsheet.costpercapita_h160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8179704200542951,r[:number])
end

def test_costpercapita_i160
  r = spreadsheet.costpercapita_i160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8676643802193498,r[:number])
end

def test_costpercapita_j160
  r = spreadsheet.costpercapita_j160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9250657874506701,r[:number])
end

def test_costpercapita_k160
  r = spreadsheet.costpercapita_k160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9897284368102698,r[:number])
end

def test_costpercapita_l160
  r = spreadsheet.costpercapita_l160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0616880295536881,r[:number])
end

def test_costpercapita_m160
  r = spreadsheet.costpercapita_m160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.141724279922934,r[:number])
end

def test_costpercapita_o160
  r = spreadsheet.costpercapita_o160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1678801261862668,r[:number])
end

def test_costpercapita_p160
  r = spreadsheet.costpercapita_p160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1703363805776067,r[:number])
end

def test_costpercapita_q160
  r = spreadsheet.costpercapita_q160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.17312125936589012,r[:number])
end

def test_costpercapita_r160
  r = spreadsheet.costpercapita_r160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.18069920735481337,r[:number])
end

def test_costpercapita_s160
  r = spreadsheet.costpercapita_s160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.18985195013220307,r[:number])
end

def test_costpercapita_t160
  r = spreadsheet.costpercapita_t160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.20073650215987648,r[:number])
end

def test_costpercapita_u160
  r = spreadsheet.costpercapita_u160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.2131993534892053,r[:number])
end

def test_costpercapita_v160
  r = spreadsheet.costpercapita_v160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22720645872585804,r[:number])
end

def test_costpercapita_w160
  r = spreadsheet.costpercapita_w160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.24289154062210164,r[:number])
end

def test_costpercapita_y160
  r = spreadsheet.costpercapita_y160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z160
  r = spreadsheet.costpercapita_z160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa160
  r = spreadsheet.costpercapita_aa160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab160
  r = spreadsheet.costpercapita_ab160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac160
  r = spreadsheet.costpercapita_ac160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad160
  r = spreadsheet.costpercapita_ad160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae160
  r = spreadsheet.costpercapita_ae160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af160
  r = spreadsheet.costpercapita_af160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag160
  r = spreadsheet.costpercapita_ag160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai160
  r = spreadsheet.costpercapita_ai160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2186231355529165,r[:number])
end

def test_costpercapita_aj160
  r = spreadsheet.costpercapita_aj160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8713262021397302,r[:number])
end

def test_costpercapita_ak160
  r = spreadsheet.costpercapita_ak160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8895484046233141,r[:number])
end

def test_costpercapita_al160
  r = spreadsheet.costpercapita_al160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9986696274091086,r[:number])
end

def test_costpercapita_am160
  r = spreadsheet.costpercapita_am160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0575163303515527,r[:number])
end

def test_costpercapita_an160
  r = spreadsheet.costpercapita_an160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1258022896105466,r[:number])
end

def test_costpercapita_ao160
  r = spreadsheet.costpercapita_ao160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.202927790299475,r[:number])
end

def test_costpercapita_ap160
  r = spreadsheet.costpercapita_ap160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2888944882795463,r[:number])
end

def test_costpercapita_aq160
  r = spreadsheet.costpercapita_aq160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3846158205450356,r[:number])
end

def test_costpercapita_as160
  r = spreadsheet.costpercapita_as160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1153248987568025,r[:number])
end

def test_costpercapita_at160
  r = spreadsheet.costpercapita_at160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.018416242298056,r[:number])
end

def test_costpercapita_av160
  r = spreadsheet.costpercapita_av160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw160
  r = spreadsheet.costpercapita_aw160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay160
  r = spreadsheet.costpercapita_ay160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4144354559383107,r[:number])
end

def test_costpercapita_az160
  r = spreadsheet.costpercapita_az160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4608088970018873,r[:number])
end

def test_costpercapita_ba160
  r = spreadsheet.costpercapita_ba160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4709569132581577,r[:number])
end

def test_costpercapita_bb160
  r = spreadsheet.costpercapita_bb160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5377083025334425,r[:number])
end

def test_costpercapita_bc160
  r = spreadsheet.costpercapita_bc160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5703755656903943,r[:number])
end

def test_costpercapita_bd160
  r = spreadsheet.costpercapita_bd160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6081094647271532,r[:number])
end

def test_costpercapita_be160
  r = spreadsheet.costpercapita_be160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6506166784014052,r[:number])
end

def test_costpercapita_bf160
  r = spreadsheet.costpercapita_bf160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.697920675607677,r[:number])
end

def test_costpercapita_bg160
  r = spreadsheet.costpercapita_bg160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7505340162274172,r[:number])
end

def test_costpercapita_bi160
  r = spreadsheet.costpercapita_bi160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4144354559383107,r[:number])
end

def test_costpercapita_bj160
  r = spreadsheet.costpercapita_bj160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.861578315080544,r[:number])
end

def test_costpercapita_bk160
  r = spreadsheet.costpercapita_bk160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3043287478375358,r[:number])
end

def test_costpercapita_bl160
  r = spreadsheet.costpercapita_bl160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4260044905953613,r[:number])
end

def test_costpercapita_bm160
  r = spreadsheet.costpercapita_bm160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5372998259785426,r[:number])
end

def test_costpercapita_bn160
  r = spreadsheet.costpercapita_bn160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6757474128717504,r[:number])
end

def test_costpercapita_bo160
  r = spreadsheet.costpercapita_bo160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7908198211858186,r[:number])
end

def test_costpercapita_bp160
  r = spreadsheet.costpercapita_bp160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.918827766446855,r[:number])
end

def test_costpercapita_bq160
  r = spreadsheet.costpercapita_bq160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.061169070701741,r[:number])
end

def test_costpercapita_bs160
  r = spreadsheet.costpercapita_bs160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5823155821245776,r[:number])
end

def test_costpercapita_bt160
  r = spreadsheet.costpercapita_bt160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0319146956581506,r[:number])
end

def test_costpercapita_bu160
  r = spreadsheet.costpercapita_bu160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.477450007203426,r[:number])
end

def test_costpercapita_bv160
  r = spreadsheet.costpercapita_bv160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6067036979501748,r[:number])
end

def test_costpercapita_bw160
  r = spreadsheet.costpercapita_bw160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7271517761107456,r[:number])
end

def test_costpercapita_bx160
  r = spreadsheet.costpercapita_bx160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8764839150316268,r[:number])
end

def test_costpercapita_by160
  r = spreadsheet.costpercapita_by160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0040191746750238,r[:number])
end

def test_costpercapita_bz160
  r = spreadsheet.costpercapita_bz160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1460342251727127,r[:number])
end

def test_costpercapita_ca160
  r = spreadsheet.costpercapita_ca160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3040606113238424,r[:number])
end

def test_costpercapita_cc160
  r = spreadsheet.costpercapita_cc160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6395704094722534,r[:number])
end

def test_costpercapita_cd160
  r = spreadsheet.costpercapita_cd160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.190531432112195,r[:number])
end

def test_costpercapita_cf160
  r = spreadsheet.costpercapita_cf160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.636307553428339,r[:number])
end

def test_costpercapita_cg160
  r = spreadsheet.costpercapita_cg160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16058849351842047,r[:number])
end

def test_costpercapita_ch160
  r = spreadsheet.costpercapita_ch160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5879016025801118,r[:number])
end

def test_costpercapita_ci160
  r = spreadsheet.costpercapita_ci160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6080340705410661,r[:number])
end

def test_costpercapita_cj160
  r = spreadsheet.costpercapita_cj160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6696354457591929,r[:number])
end

def test_costpercapita_ck160
  r = spreadsheet.costpercapita_ck160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.7506816254210803,r[:number])
end

def test_costpercapita_cl160
  r = spreadsheet.costpercapita_cl160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8010913843755488,r[:number])
end

def test_costpercapita_cm160
  r = spreadsheet.costpercapita_cm160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8571397368931667,r[:number])
end

def test_costpercapita_cn160
  r = spreadsheet.costpercapita_cn160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9194447907788069,r[:number])
end

def test_costpercapita_cp160
  r = spreadsheet.costpercapita_cp160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.5242455107154504,r[:number])
end

def test_costpercapita_cq160
  r = spreadsheet.costpercapita_cq160
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.172115189814132,r[:number])
end

def test_costpercapita_cr160
  r = spreadsheet.costpercapita_cr160
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a161
  r = spreadsheet.costpercapita_a161
  assert_equal(:ExcelString,r[:type])
  assert_equal("XVIII.a",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b161
  r = spreadsheet.costpercapita_b161
  assert_equal(:ExcelString,r[:type])
  assert_equal("Storage of captured CO2",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c161
  r = spreadsheet.costpercapita_c161
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e161
  r = spreadsheet.costpercapita_e161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f161
  r = spreadsheet.costpercapita_f161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.510941756577549,r[:number])
end

def test_costpercapita_g161
  r = spreadsheet.costpercapita_g161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.721390312179909,r[:number])
end

def test_costpercapita_h161
  r = spreadsheet.costpercapita_h161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.427672328465383,r[:number])
end

def test_costpercapita_i161
  r = spreadsheet.costpercapita_i161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.170709128499708,r[:number])
end

def test_costpercapita_j161
  r = spreadsheet.costpercapita_j161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.947100165718051,r[:number])
end

def test_costpercapita_k161
  r = spreadsheet.costpercapita_k161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.830627025249025,r[:number])
end

def test_costpercapita_l161
  r = spreadsheet.costpercapita_l161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.640836506622003,r[:number])
end

def test_costpercapita_m161
  r = spreadsheet.costpercapita_m161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.466117568649894,r[:number])
end

def test_costpercapita_o161
  r = spreadsheet.costpercapita_o161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p161
  r = spreadsheet.costpercapita_p161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07532825269732647,r[:number])
end

def test_costpercapita_q161
  r = spreadsheet.costpercapita_q161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.17164170936539724,r[:number])
end

def test_costpercapita_r161
  r = spreadsheet.costpercapita_r161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16283016985396148,r[:number])
end

def test_costpercapita_s161
  r = spreadsheet.costpercapita_s161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.15512127385499125,r[:number])
end

def test_costpercapita_t161
  r = spreadsheet.costpercapita_t161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14841300497154153,r[:number])
end

def test_costpercapita_u161
  r = spreadsheet.costpercapita_u161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14491881075747076,r[:number])
end

def test_costpercapita_v161
  r = spreadsheet.costpercapita_v161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13922509519866005,r[:number])
end

def test_costpercapita_w161
  r = spreadsheet.costpercapita_w161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13398352705949682,r[:number])
end

def test_costpercapita_y161
  r = spreadsheet.costpercapita_y161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z161
  r = spreadsheet.costpercapita_z161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa161
  r = spreadsheet.costpercapita_aa161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab161
  r = spreadsheet.costpercapita_ab161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac161
  r = spreadsheet.costpercapita_ac161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad161
  r = spreadsheet.costpercapita_ad161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae161
  r = spreadsheet.costpercapita_ae161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af161
  r = spreadsheet.costpercapita_af161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag161
  r = spreadsheet.costpercapita_ag161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai161
  r = spreadsheet.costpercapita_ai161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj161
  r = spreadsheet.costpercapita_aj161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5862700092748754,r[:number])
end

def test_costpercapita_ak161
  r = spreadsheet.costpercapita_ak161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.893032021545306,r[:number])
end

def test_costpercapita_al161
  r = spreadsheet.costpercapita_al161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.590502498319345,r[:number])
end

def test_costpercapita_am161
  r = spreadsheet.costpercapita_am161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3258304023547,r[:number])
end

def test_costpercapita_an161
  r = spreadsheet.costpercapita_an161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.095513170689592,r[:number])
end

def test_costpercapita_ao161
  r = spreadsheet.costpercapita_ao161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.975545836006496,r[:number])
end

def test_costpercapita_ap161
  r = spreadsheet.costpercapita_ap161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7800616018206625,r[:number])
end

def test_costpercapita_aq161
  r = spreadsheet.costpercapita_aq161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.600101095709391,r[:number])
end

def test_costpercapita_as161
  r = spreadsheet.costpercapita_as161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.31631740396893,r[:number])
end

def test_costpercapita_at161
  r = spreadsheet.costpercapita_at161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.93069979682133,r[:number])
end

def test_costpercapita_av161
  r = spreadsheet.costpercapita_av161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aw161
  r = spreadsheet.costpercapita_aw161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.0,r[:number])
end

def test_costpercapita_ay161
  r = spreadsheet.costpercapita_ay161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az161
  r = spreadsheet.costpercapita_az161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073152,r[:number])
end

def test_costpercapita_ba161
  r = spreadsheet.costpercapita_ba161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.76106396694557,r[:number])
end

def test_costpercapita_bb161
  r = spreadsheet.costpercapita_bb161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.567982903652108,r[:number])
end

def test_costpercapita_bc161
  r = spreadsheet.costpercapita_bc161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.399063291549347,r[:number])
end

def test_costpercapita_bd161
  r = spreadsheet.costpercapita_bd161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2520697171354844,r[:number])
end

def test_costpercapita_be161
  r = spreadsheet.costpercapita_be161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1755038987185036,r[:number])
end

def test_costpercapita_bf161
  r = spreadsheet.costpercapita_bf161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0507415172119647,r[:number])
end

def test_costpercapita_bg161
  r = spreadsheet.costpercapita_bg161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9358867238672466,r[:number])
end

def test_costpercapita_bi161
  r = spreadsheet.costpercapita_bi161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj161
  r = spreadsheet.costpercapita_bj161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073152,r[:number])
end

def test_costpercapita_bk161
  r = spreadsheet.costpercapita_bk161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.357640866761144,r[:number])
end

def test_costpercapita_bl161
  r = spreadsheet.costpercapita_bl161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.759732592706198,r[:number])
end

def test_costpercapita_bm161
  r = spreadsheet.costpercapita_bm161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.414605455483043,r[:number])
end

def test_costpercapita_bn161
  r = spreadsheet.costpercapita_bn161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.959820610581916,r[:number])
end

def test_costpercapita_bo161
  r = spreadsheet.costpercapita_bo161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.60643252102849,r[:number])
end

def test_costpercapita_bp161
  r = spreadsheet.costpercapita_bp161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.28212696563229,r[:number])
end

def test_costpercapita_bq161
  r = spreadsheet.costpercapita_bq161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.983777003909681,r[:number])
end

def test_costpercapita_bs161
  r = spreadsheet.costpercapita_bs161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt161
  r = spreadsheet.costpercapita_bt161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7259432341046415,r[:number])
end

def test_costpercapita_bu161
  r = spreadsheet.costpercapita_bu161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.5292825761265405,r[:number])
end

def test_costpercapita_bv161
  r = spreadsheet.costpercapita_bv161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.92256276256016,r[:number])
end

def test_costpercapita_bw161
  r = spreadsheet.costpercapita_bw161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.569726729338036,r[:number])
end

def test_costpercapita_bx161
  r = spreadsheet.costpercapita_bx161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.108233615553457,r[:number])
end

def test_costpercapita_by161
  r = spreadsheet.costpercapita_by161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.75135133178596,r[:number])
end

def test_costpercapita_bz161
  r = spreadsheet.costpercapita_bz161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.421352060830952,r[:number])
end

def test_costpercapita_ca161
  r = spreadsheet.costpercapita_ca161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.117760530969178,r[:number])
end

def test_costpercapita_cc161
  r = spreadsheet.costpercapita_cc161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.238468093474326,r[:number])
end

def test_costpercapita_cd161
  r = spreadsheet.costpercapita_cd161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.37433426563217,r[:number])
end

def test_costpercapita_cf161
  r = spreadsheet.costpercapita_cf161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg161
  r = spreadsheet.costpercapita_cg161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.8603267751702336,r[:number])
end

def test_costpercapita_ch161
  r = spreadsheet.costpercapita_ch161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.3637494454187651,r[:number])
end

def test_costpercapita_ci161
  r = spreadsheet.costpercapita_ci161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.332060264240815,r[:number])
end

def test_costpercapita_cj161
  r = spreadsheet.costpercapita_cj161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.243896326983336,r[:number])
end

def test_costpercapita_ck161
  r = spreadsheet.costpercapita_ck161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.012720444863866,r[:number])
end

def test_costpercapita_cl161
  r = spreadsheet.costpercapita_cl161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.775805495779464,r[:number])
end

def test_costpercapita_cm161
  r = spreadsheet.costpercapita_cm161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.641290459010288,r[:number])
end

def test_costpercapita_cn161
  r = spreadsheet.costpercapita_cn161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.517659435259787,r[:number])
end

def test_costpercapita_cp161
  r = spreadsheet.costpercapita_cp161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9221506895053952,r[:number])
end

def test_costpercapita_cq161
  r = spreadsheet.costpercapita_cq161
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.443634468810856,r[:number])
end

def test_costpercapita_cr161
  r = spreadsheet.costpercapita_cr161
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_a162
  r = spreadsheet.costpercapita_a162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_b162
  r = spreadsheet.costpercapita_b162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c162
  r = spreadsheet.costpercapita_c162
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e162
  r = spreadsheet.costpercapita_e162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1884.0073021809897,r[:number])
end

def test_costpercapita_f162
  r = spreadsheet.costpercapita_f162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1900.5904930404602,r[:number])
end

def test_costpercapita_g162
  r = spreadsheet.costpercapita_g162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2024.3852872293346,r[:number])
end

def test_costpercapita_h162
  r = spreadsheet.costpercapita_h162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2192.932644990399,r[:number])
end

def test_costpercapita_i162
  r = spreadsheet.costpercapita_i162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2249.6350703489766,r[:number])
end

def test_costpercapita_j162
  r = spreadsheet.costpercapita_j162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2398.6536984245668,r[:number])
end

def test_costpercapita_k162
  r = spreadsheet.costpercapita_k162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.454507128962,r[:number])
end

def test_costpercapita_l162
  r = spreadsheet.costpercapita_l162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2714.9153202561083,r[:number])
end

def test_costpercapita_m162
  r = spreadsheet.costpercapita_m162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2857.0357462350785,r[:number])
end

def test_costpercapita_o162
  r = spreadsheet.costpercapita_o162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1596.7117238739008,r[:number])
end

def test_costpercapita_p162
  r = spreadsheet.costpercapita_p162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1591.0558005404907,r[:number])
end

def test_costpercapita_q162
  r = spreadsheet.costpercapita_q162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1629.9479803287652,r[:number])
end

def test_costpercapita_r162
  r = spreadsheet.costpercapita_r162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1686.2939023914332,r[:number])
end

def test_costpercapita_s162
  r = spreadsheet.costpercapita_s162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1726.6844357674026,r[:number])
end

def test_costpercapita_t162
  r = spreadsheet.costpercapita_t162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1770.4041468777314,r[:number])
end

def test_costpercapita_u162
  r = spreadsheet.costpercapita_u162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1812.5381715311178,r[:number])
end

def test_costpercapita_v162
  r = spreadsheet.costpercapita_v162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1853.7408522113162,r[:number])
end

def test_costpercapita_w162
  r = spreadsheet.costpercapita_w162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1904.5710059655617,r[:number])
end

def test_costpercapita_y162
  r = spreadsheet.costpercapita_y162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(753.9025989077694,r[:number])
end

def test_costpercapita_z162
  r = spreadsheet.costpercapita_z162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(935.0570992031646,r[:number])
end

def test_costpercapita_aa162
  r = spreadsheet.costpercapita_aa162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1135.7149245162477,r[:number])
end

def test_costpercapita_ab162
  r = spreadsheet.costpercapita_ab162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1337.0564560697937,r[:number])
end

def test_costpercapita_ac162
  r = spreadsheet.costpercapita_ac162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1549.1172147589427,r[:number])
end

def test_costpercapita_ad162
  r = spreadsheet.costpercapita_ad162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1597.4578796151886,r[:number])
end

def test_costpercapita_ae162
  r = spreadsheet.costpercapita_ae162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1634.0531753000187,r[:number])
end

def test_costpercapita_af162
  r = spreadsheet.costpercapita_af162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1676.1952247683216,r[:number])
end

def test_costpercapita_ag162
  r = spreadsheet.costpercapita_ag162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1703.5318268144608,r[:number])
end

def test_costpercapita_ai162
  r = spreadsheet.costpercapita_ai162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4234.62162496266,r[:number])
end

def test_costpercapita_aj162
  r = spreadsheet.costpercapita_aj162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4426.703392784115,r[:number])
end

def test_costpercapita_ak162
  r = spreadsheet.costpercapita_ak162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4790.048192074347,r[:number])
end

def test_costpercapita_al162
  r = spreadsheet.costpercapita_al162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5216.283003451624,r[:number])
end

def test_costpercapita_am162
  r = spreadsheet.costpercapita_am162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5525.43672087532,r[:number])
end

def test_costpercapita_an162
  r = spreadsheet.costpercapita_an162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5766.515724917487,r[:number])
end

def test_costpercapita_ao162
  r = spreadsheet.costpercapita_ao162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6042.045853960099,r[:number])
end

def test_costpercapita_ap162
  r = spreadsheet.costpercapita_ap162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6244.851397235746,r[:number])
end

def test_costpercapita_aq162
  r = spreadsheet.costpercapita_aq162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6465.1385790151,r[:number])
end

def test_costpercapita_as162
  r = spreadsheet.costpercapita_as162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5412.404943252945,r[:number])
end

def test_costpercapita_at162
  r = spreadsheet.costpercapita_at162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110430.93455464374,r[:number])
end

def test_costpercapita_ay162
  r = spreadsheet.costpercapita_ay162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743.0926671033703,r[:number])
end

def test_costpercapita_az162
  r = spreadsheet.costpercapita_az162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1249.3890521813103,r[:number])
end

def test_costpercapita_ba162
  r = spreadsheet.costpercapita_ba162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1330.7678979363418,r[:number])
end

def test_costpercapita_bb162
  r = spreadsheet.costpercapita_bb162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1441.5656864825123,r[:number])
end

def test_costpercapita_bc162
  r = spreadsheet.costpercapita_bc162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1478.8400965853461,r[:number])
end

def test_costpercapita_bd162
  r = spreadsheet.costpercapita_bd162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1576.8003058837087,r[:number])
end

def test_costpercapita_be162
  r = spreadsheet.costpercapita_be162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1706.1710339579881,r[:number])
end

def test_costpercapita_bf162
  r = spreadsheet.costpercapita_bf162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1784.7008554173012,r[:number])
end

def test_costpercapita_bg162
  r = spreadsheet.costpercapita_bg162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1878.1264012987876,r[:number])
end

def test_costpercapita_bi162
  r = spreadsheet.costpercapita_bi162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743.0926671033703,r[:number])
end

def test_costpercapita_bj162
  r = spreadsheet.costpercapita_bj162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1967.978187127004,r[:number])
end

def test_costpercapita_bk162
  r = spreadsheet.costpercapita_bk162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3234.318119096342,r[:number])
end

def test_costpercapita_bl162
  r = spreadsheet.costpercapita_bl162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3902.1958145708477,r[:number])
end

def test_costpercapita_bm162
  r = spreadsheet.costpercapita_bm162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4135.353637158788,r[:number])
end

def test_costpercapita_bn162
  r = spreadsheet.costpercapita_bn162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4389.957816114143,r[:number])
end

def test_costpercapita_bo162
  r = spreadsheet.costpercapita_bo162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4662.553468415523,r[:number])
end

def test_costpercapita_bp162
  r = spreadsheet.costpercapita_bp162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4969.227073527287,r[:number])
end

def test_costpercapita_bq162
  r = spreadsheet.costpercapita_bq162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5270.453135494784,r[:number])
end

def test_costpercapita_bs162
  r = spreadsheet.costpercapita_bs162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3093.7069898850395,r[:number])
end

def test_costpercapita_bt162
  r = spreadsheet.costpercapita_bt162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4494.09108687066,r[:number])
end

def test_costpercapita_bu162
  r = spreadsheet.costpercapita_bu162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5999.981023941355,r[:number])
end

def test_costpercapita_bv162
  r = spreadsheet.costpercapita_bv162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6925.546173032075,r[:number])
end

def test_costpercapita_bw162
  r = spreadsheet.costpercapita_bw162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7411.155287685133,r[:number])
end

def test_costpercapita_bx162
  r = spreadsheet.costpercapita_bx162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7757.819842607061,r[:number])
end

def test_costpercapita_by162
  r = spreadsheet.costpercapita_by162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8109.144815246658,r[:number])
end

def test_costpercapita_bz162
  r = spreadsheet.costpercapita_bz162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8499.163150506924,r[:number])
end

def test_costpercapita_ca162
  r = spreadsheet.costpercapita_ca162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8878.555968274806,r[:number])
end

def test_costpercapita_cc162
  r = spreadsheet.costpercapita_cc162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6796.573815338856,r[:number])
end

def test_costpercapita_cd162
  r = spreadsheet.costpercapita_cd162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138260.6398654351,r[:number])
end

def test_costpercapita_cf162
  r = spreadsheet.costpercapita_cf162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1140.9146350776193,r[:number])
end

def test_costpercapita_cg162
  r = spreadsheet.costpercapita_cg162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.3876940865439,r[:number])
end

def test_costpercapita_ch162
  r = spreadsheet.costpercapita_ch162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1209.932831867007,r[:number])
end

def test_costpercapita_ci162
  r = spreadsheet.costpercapita_ci162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1709.2631695804491,r[:number])
end

def test_costpercapita_cj162
  r = spreadsheet.costpercapita_cj162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1885.7185668098116,r[:number])
end

def test_costpercapita_ck162
  r = spreadsheet.costpercapita_ck162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1991.3041176895756,r[:number])
end

def test_costpercapita_cl162
  r = spreadsheet.costpercapita_cl162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2067.09896128656,r[:number])
end

def test_costpercapita_cm162
  r = spreadsheet.costpercapita_cm162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2254.311753271178,r[:number])
end

def test_costpercapita_cn162
  r = spreadsheet.costpercapita_cn162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2413.417389259706,r[:number])
end

def test_costpercapita_cp162
  r = spreadsheet.costpercapita_cp162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1384.1688720859124,r[:number])
end

def test_costpercapita_cq162
  r = spreadsheet.costpercapita_cq162
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27829.705310791338,r[:number])
end

def test_costpercapita_cr162
  r = spreadsheet.costpercapita_cr162
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c164
  r = spreadsheet.costpercapita_c164
  assert_equal(:ExcelString,r[:type])
  assert_equal("£m",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e164
  r = spreadsheet.costpercapita_e164
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f164
  r = spreadsheet.costpercapita_f164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o164
  r = spreadsheet.costpercapita_o164
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p164
  r = spreadsheet.costpercapita_p164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y164
  r = spreadsheet.costpercapita_y164
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Low",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z164
  r = spreadsheet.costpercapita_z164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai164
  r = spreadsheet.costpercapita_ai164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as164
  r = spreadsheet.costpercapita_as164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av164
  r = spreadsheet.costpercapita_av164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay164
  r = spreadsheet.costpercapita_ay164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi164
  r = spreadsheet.costpercapita_bi164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs164
  r = spreadsheet.costpercapita_bs164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc164
  r = spreadsheet.costpercapita_cc164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf164
  r = spreadsheet.costpercapita_cf164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp164
  r = spreadsheet.costpercapita_cp164
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c165
  r = spreadsheet.costpercapita_c165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e165
  r = spreadsheet.costpercapita_e165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f165
  r = spreadsheet.costpercapita_f165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g165
  r = spreadsheet.costpercapita_g165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h165
  r = spreadsheet.costpercapita_h165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i165
  r = spreadsheet.costpercapita_i165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j165
  r = spreadsheet.costpercapita_j165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k165
  r = spreadsheet.costpercapita_k165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l165
  r = spreadsheet.costpercapita_l165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m165
  r = spreadsheet.costpercapita_m165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o165
  r = spreadsheet.costpercapita_o165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p165
  r = spreadsheet.costpercapita_p165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q165
  r = spreadsheet.costpercapita_q165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r165
  r = spreadsheet.costpercapita_r165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s165
  r = spreadsheet.costpercapita_s165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t165
  r = spreadsheet.costpercapita_t165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u165
  r = spreadsheet.costpercapita_u165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v165
  r = spreadsheet.costpercapita_v165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w165
  r = spreadsheet.costpercapita_w165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y165
  r = spreadsheet.costpercapita_y165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z165
  r = spreadsheet.costpercapita_z165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa165
  r = spreadsheet.costpercapita_aa165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab165
  r = spreadsheet.costpercapita_ab165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac165
  r = spreadsheet.costpercapita_ac165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad165
  r = spreadsheet.costpercapita_ad165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae165
  r = spreadsheet.costpercapita_ae165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af165
  r = spreadsheet.costpercapita_af165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag165
  r = spreadsheet.costpercapita_ag165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai165
  r = spreadsheet.costpercapita_ai165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj165
  r = spreadsheet.costpercapita_aj165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak165
  r = spreadsheet.costpercapita_ak165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al165
  r = spreadsheet.costpercapita_al165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am165
  r = spreadsheet.costpercapita_am165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an165
  r = spreadsheet.costpercapita_an165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao165
  r = spreadsheet.costpercapita_ao165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap165
  r = spreadsheet.costpercapita_ap165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq165
  r = spreadsheet.costpercapita_aq165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as165
  r = spreadsheet.costpercapita_as165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at165
  r = spreadsheet.costpercapita_at165
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av165
  r = spreadsheet.costpercapita_av165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw165
  r = spreadsheet.costpercapita_aw165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay165
  r = spreadsheet.costpercapita_ay165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_az165
  r = spreadsheet.costpercapita_az165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_ba165
  r = spreadsheet.costpercapita_ba165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bb165
  r = spreadsheet.costpercapita_bb165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bc165
  r = spreadsheet.costpercapita_bc165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bd165
  r = spreadsheet.costpercapita_bd165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_be165
  r = spreadsheet.costpercapita_be165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bf165
  r = spreadsheet.costpercapita_bf165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bg165
  r = spreadsheet.costpercapita_bg165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bi165
  r = spreadsheet.costpercapita_bi165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_bj165
  r = spreadsheet.costpercapita_bj165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_bk165
  r = spreadsheet.costpercapita_bk165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bl165
  r = spreadsheet.costpercapita_bl165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bm165
  r = spreadsheet.costpercapita_bm165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bn165
  r = spreadsheet.costpercapita_bn165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_bo165
  r = spreadsheet.costpercapita_bo165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bp165
  r = spreadsheet.costpercapita_bp165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bq165
  r = spreadsheet.costpercapita_bq165
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bs165
  r = spreadsheet.costpercapita_bs165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt165
  r = spreadsheet.costpercapita_bt165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu165
  r = spreadsheet.costpercapita_bu165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv165
  r = spreadsheet.costpercapita_bv165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw165
  r = spreadsheet.costpercapita_bw165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx165
  r = spreadsheet.costpercapita_bx165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by165
  r = spreadsheet.costpercapita_by165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz165
  r = spreadsheet.costpercapita_bz165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca165
  r = spreadsheet.costpercapita_ca165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc165
  r = spreadsheet.costpercapita_cc165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd165
  r = spreadsheet.costpercapita_cd165
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf165
  r = spreadsheet.costpercapita_cf165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg165
  r = spreadsheet.costpercapita_cg165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch165
  r = spreadsheet.costpercapita_ch165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci165
  r = spreadsheet.costpercapita_ci165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj165
  r = spreadsheet.costpercapita_cj165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck165
  r = spreadsheet.costpercapita_ck165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl165
  r = spreadsheet.costpercapita_cl165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm165
  r = spreadsheet.costpercapita_cm165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn165
  r = spreadsheet.costpercapita_cn165
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp165
  r = spreadsheet.costpercapita_cp165
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq165
  r = spreadsheet.costpercapita_cq165
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c166
  r = spreadsheet.costpercapita_c166
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e166
  r = spreadsheet.costpercapita_e166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.315878170689789,r[:number])
end

def test_costpercapita_f166
  r = spreadsheet.costpercapita_f166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_g166
  r = spreadsheet.costpercapita_g166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.06513418904686,r[:number])
end

def test_costpercapita_h166
  r = spreadsheet.costpercapita_h166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.86243719461344,r[:number])
end

def test_costpercapita_i166
  r = spreadsheet.costpercapita_i166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.09848608548116,r[:number])
end

def test_costpercapita_j166
  r = spreadsheet.costpercapita_j166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.377038948057052,r[:number])
end

def test_costpercapita_k166
  r = spreadsheet.costpercapita_k166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.13251525451907,r[:number])
end

def test_costpercapita_l166
  r = spreadsheet.costpercapita_l166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21865938129346,r[:number])
end

def test_costpercapita_m166
  r = spreadsheet.costpercapita_m166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.902606070026803,r[:number])
end

def test_costpercapita_o166
  r = spreadsheet.costpercapita_o166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03709437458421908,r[:number])
end

def test_costpercapita_p166
  r = spreadsheet.costpercapita_p166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.03869169294796451,r[:number])
end

def test_costpercapita_q166
  r = spreadsheet.costpercapita_q166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04167084993192971,r[:number])
end

def test_costpercapita_r166
  r = spreadsheet.costpercapita_r166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04664025878369184,r[:number])
end

def test_costpercapita_s166
  r = spreadsheet.costpercapita_s166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.051440605811828785,r[:number])
end

def test_costpercapita_t166
  r = spreadsheet.costpercapita_t166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05511604649597045,r[:number])
end

def test_costpercapita_u166
  r = spreadsheet.costpercapita_u166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.05808140271233135,r[:number])
end

def test_costpercapita_v166
  r = spreadsheet.costpercapita_v166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.061134025154962475,r[:number])
end

def test_costpercapita_w166
  r = spreadsheet.costpercapita_w166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0635275304816177,r[:number])
end

def test_costpercapita_y166
  r = spreadsheet.costpercapita_y166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(762.222636406657,r[:number])
end

def test_costpercapita_z166
  r = spreadsheet.costpercapita_z166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(727.4063319396947,r[:number])
end

def test_costpercapita_aa166
  r = spreadsheet.costpercapita_aa166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(709.6797955823874,r[:number])
end

def test_costpercapita_ab166
  r = spreadsheet.costpercapita_ab166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(696.3808255776407,r[:number])
end

def test_costpercapita_ac166
  r = spreadsheet.costpercapita_ac166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(689.4223922945873,r[:number])
end

def test_costpercapita_ad166
  r = spreadsheet.costpercapita_ad166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(709.1934177925691,r[:number])
end

def test_costpercapita_ae166
  r = spreadsheet.costpercapita_ae166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(724.2305857770785,r[:number])
end

def test_costpercapita_af166
  r = spreadsheet.costpercapita_af166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(742.0383700283267,r[:number])
end

def test_costpercapita_ag166
  r = spreadsheet.costpercapita_ag166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(753.466242569122,r[:number])
end

def test_costpercapita_ai166
  r = spreadsheet.costpercapita_ai166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(776.575608951931,r[:number])
end

def test_costpercapita_aj166
  r = spreadsheet.costpercapita_aj166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(744.2863838385457,r[:number])
end

def test_costpercapita_ak166
  r = spreadsheet.costpercapita_ak166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(729.7866006213662,r[:number])
end

def test_costpercapita_al166
  r = spreadsheet.costpercapita_al166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(721.2899030310379,r[:number])
end

def test_costpercapita_am166
  r = spreadsheet.costpercapita_am166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(715.5723189858802,r[:number])
end

def test_costpercapita_an166
  r = spreadsheet.costpercapita_an166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(734.6255727871221,r[:number])
end

def test_costpercapita_ao166
  r = spreadsheet.costpercapita_ao166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(749.4211824343099,r[:number])
end

def test_costpercapita_ap166
  r = spreadsheet.costpercapita_ap166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(768.318163434775,r[:number])
end

def test_costpercapita_aq166
  r = spreadsheet.costpercapita_aq166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(779.4323761696303,r[:number])
end

def test_costpercapita_as166
  r = spreadsheet.costpercapita_as166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(746.5897900282888,r[:number])
end

def test_costpercapita_at166
  r = spreadsheet.costpercapita_at166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15550.559037692452,r[:number])
end

def test_costpercapita_ay166
  r = spreadsheet.costpercapita_ay166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.589526902413873,r[:number])
end

def test_costpercapita_az166
  r = spreadsheet.costpercapita_az166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_ba166
  r = spreadsheet.costpercapita_ba166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.06513418904686,r[:number])
end

def test_costpercapita_bb166
  r = spreadsheet.costpercapita_bb166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.86243719461344,r[:number])
end

def test_costpercapita_bc166
  r = spreadsheet.costpercapita_bc166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.09848608548116,r[:number])
end

def test_costpercapita_bd166
  r = spreadsheet.costpercapita_bd166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.377038948057052,r[:number])
end

def test_costpercapita_be166
  r = spreadsheet.costpercapita_be166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.13251525451907,r[:number])
end

def test_costpercapita_bf166
  r = spreadsheet.costpercapita_bf166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21865938129346,r[:number])
end

def test_costpercapita_bg166
  r = spreadsheet.costpercapita_bg166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.902606070026803,r[:number])
end

def test_costpercapita_bi166
  r = spreadsheet.costpercapita_bi166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.589526902413873,r[:number])
end

def test_costpercapita_bj166
  r = spreadsheet.costpercapita_bj166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_bk166
  r = spreadsheet.costpercapita_bk166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.06513418904686,r[:number])
end

def test_costpercapita_bl166
  r = spreadsheet.costpercapita_bl166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.86243719461344,r[:number])
end

def test_costpercapita_bm166
  r = spreadsheet.costpercapita_bm166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.09848608548116,r[:number])
end

def test_costpercapita_bn166
  r = spreadsheet.costpercapita_bn166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.377038948057052,r[:number])
end

def test_costpercapita_bo166
  r = spreadsheet.costpercapita_bo166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.13251525451907,r[:number])
end

def test_costpercapita_bp166
  r = spreadsheet.costpercapita_bp166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.21865938129346,r[:number])
end

def test_costpercapita_bq166
  r = spreadsheet.costpercapita_bq166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.902606070026803,r[:number])
end

def test_costpercapita_bs166
  r = spreadsheet.costpercapita_bs166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(770.8492576836551,r[:number])
end

def test_costpercapita_bt166
  r = spreadsheet.costpercapita_bt166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(744.2863838385457,r[:number])
end

def test_costpercapita_bu166
  r = spreadsheet.costpercapita_bu166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(729.7866006213662,r[:number])
end

def test_costpercapita_bv166
  r = spreadsheet.costpercapita_bv166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(721.2899030310379,r[:number])
end

def test_costpercapita_bw166
  r = spreadsheet.costpercapita_bw166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(715.5723189858802,r[:number])
end

def test_costpercapita_bx166
  r = spreadsheet.costpercapita_bx166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(734.6255727871221,r[:number])
end

def test_costpercapita_by166
  r = spreadsheet.costpercapita_by166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(749.4211824343099,r[:number])
end

def test_costpercapita_bz166
  r = spreadsheet.costpercapita_bz166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(768.318163434775,r[:number])
end

def test_costpercapita_ca166
  r = spreadsheet.costpercapita_ca166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(779.4323761696303,r[:number])
end

def test_costpercapita_cc166
  r = spreadsheet.costpercapita_cc166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(745.9535287762582,r[:number])
end

def test_costpercapita_cd166
  r = spreadsheet.costpercapita_cd166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15544.832686424175,r[:number])
end

def test_costpercapita_cf166
  r = spreadsheet.costpercapita_cf166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.726351268275916,r[:number])
end

def test_costpercapita_cg166
  r = spreadsheet.costpercapita_cg166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch166
  r = spreadsheet.costpercapita_ch166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci166
  r = spreadsheet.costpercapita_ci166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj166
  r = spreadsheet.costpercapita_cj166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck166
  r = spreadsheet.costpercapita_ck166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl166
  r = spreadsheet.costpercapita_cl166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm166
  r = spreadsheet.costpercapita_cm166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn166
  r = spreadsheet.costpercapita_cn166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp166
  r = spreadsheet.costpercapita_cp166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.6362612520306574,r[:number])
end

def test_costpercapita_cq166
  r = spreadsheet.costpercapita_cq166
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.726351268275916,r[:number])
end

def test_costpercapita_cr166
  r = spreadsheet.costpercapita_cr166
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c167
  r = spreadsheet.costpercapita_c167
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e167
  r = spreadsheet.costpercapita_e167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.7848536849485,r[:number])
end

def test_costpercapita_f167
  r = spreadsheet.costpercapita_f167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.73293859504212,r[:number])
end

def test_costpercapita_g167
  r = spreadsheet.costpercapita_g167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.30025566464405,r[:number])
end

def test_costpercapita_h167
  r = spreadsheet.costpercapita_h167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.640868402800805,r[:number])
end

def test_costpercapita_i167
  r = spreadsheet.costpercapita_i167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.525867135567026,r[:number])
end

def test_costpercapita_j167
  r = spreadsheet.costpercapita_j167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.031729647835505,r[:number])
end

def test_costpercapita_k167
  r = spreadsheet.costpercapita_k167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.350385604311505,r[:number])
end

def test_costpercapita_l167
  r = spreadsheet.costpercapita_l167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.896956998856034,r[:number])
end

def test_costpercapita_m167
  r = spreadsheet.costpercapita_m167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.23083462614703,r[:number])
end

def test_costpercapita_o167
  r = spreadsheet.costpercapita_o167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.07069242758658,r[:number])
end

def test_costpercapita_p167
  r = spreadsheet.costpercapita_p167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.35474492754829,r[:number])
end

def test_costpercapita_q167
  r = spreadsheet.costpercapita_q167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.71141011400729,r[:number])
end

def test_costpercapita_r167
  r = spreadsheet.costpercapita_r167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.42179873780942,r[:number])
end

def test_costpercapita_s167
  r = spreadsheet.costpercapita_s167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.16738006300113,r[:number])
end

def test_costpercapita_t167
  r = spreadsheet.costpercapita_t167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.72912699781416,r[:number])
end

def test_costpercapita_u167
  r = spreadsheet.costpercapita_u167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.41684022529847,r[:number])
end

def test_costpercapita_v167
  r = spreadsheet.costpercapita_v167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.18309593476462,r[:number])
end

def test_costpercapita_w167
  r = spreadsheet.costpercapita_w167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.03023050324832,r[:number])
end

def test_costpercapita_y167
  r = spreadsheet.costpercapita_y167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1977192372536622,r[:number])
end

def test_costpercapita_z167
  r = spreadsheet.costpercapita_z167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.160238136804462,r[:number])
end

def test_costpercapita_aa167
  r = spreadsheet.costpercapita_aa167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1290349822972616,r[:number])
end

def test_costpercapita_ab167
  r = spreadsheet.costpercapita_ab167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.107093439136471,r[:number])
end

def test_costpercapita_ac167
  r = spreadsheet.costpercapita_ac167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0980262739338618,r[:number])
end

def test_costpercapita_ad167
  r = spreadsheet.costpercapita_ad167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1017422455484693,r[:number])
end

def test_costpercapita_ae167
  r = spreadsheet.costpercapita_ae167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.114780464641836,r[:number])
end

def test_costpercapita_af167
  r = spreadsheet.costpercapita_af167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1352497918699225,r[:number])
end

def test_costpercapita_ag167
  r = spreadsheet.costpercapita_ag167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.162939903020301,r[:number])
end

def test_costpercapita_ai167
  r = spreadsheet.costpercapita_ai167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.05326534978875,r[:number])
end

def test_costpercapita_aj167
  r = spreadsheet.costpercapita_aj167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.24792165939486,r[:number])
end

def test_costpercapita_ak167
  r = spreadsheet.costpercapita_ak167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.14070076094859,r[:number])
end

def test_costpercapita_al167
  r = spreadsheet.costpercapita_al167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.1697605797467,r[:number])
end

def test_costpercapita_am167
  r = spreadsheet.costpercapita_am167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.79127347250203,r[:number])
end

def test_costpercapita_an167
  r = spreadsheet.costpercapita_an167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.86259889119812,r[:number])
end

def test_costpercapita_ao167
  r = spreadsheet.costpercapita_ao167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.88200629425182,r[:number])
end

def test_costpercapita_ap167
  r = spreadsheet.costpercapita_ap167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.21530272549057,r[:number])
end

def test_costpercapita_aq167
  r = spreadsheet.costpercapita_aq167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.42400503241566,r[:number])
end

def test_costpercapita_as167
  r = spreadsheet.costpercapita_as167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.53187052952634,r[:number])
end

def test_costpercapita_at167
  r = spreadsheet.costpercapita_at167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2423.6962833945727,r[:number])
end

def test_costpercapita_ay167
  r = spreadsheet.costpercapita_ay167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.870912210969102,r[:number])
end

def test_costpercapita_az167
  r = spreadsheet.costpercapita_az167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.73293859504212,r[:number])
end

def test_costpercapita_ba167
  r = spreadsheet.costpercapita_ba167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.30025566464405,r[:number])
end

def test_costpercapita_bb167
  r = spreadsheet.costpercapita_bb167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.640868402800805,r[:number])
end

def test_costpercapita_bc167
  r = spreadsheet.costpercapita_bc167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.525867135567026,r[:number])
end

def test_costpercapita_bd167
  r = spreadsheet.costpercapita_bd167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.031729647835505,r[:number])
end

def test_costpercapita_be167
  r = spreadsheet.costpercapita_be167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.350385604311505,r[:number])
end

def test_costpercapita_bf167
  r = spreadsheet.costpercapita_bf167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.896956998856034,r[:number])
end

def test_costpercapita_bg167
  r = spreadsheet.costpercapita_bg167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.23083462614703,r[:number])
end

def test_costpercapita_bi167
  r = spreadsheet.costpercapita_bi167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.870912210969102,r[:number])
end

def test_costpercapita_bj167
  r = spreadsheet.costpercapita_bj167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.73293859504212,r[:number])
end

def test_costpercapita_bk167
  r = spreadsheet.costpercapita_bk167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.30025566464405,r[:number])
end

def test_costpercapita_bl167
  r = spreadsheet.costpercapita_bl167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.640868402800805,r[:number])
end

def test_costpercapita_bm167
  r = spreadsheet.costpercapita_bm167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.525867135567026,r[:number])
end

def test_costpercapita_bn167
  r = spreadsheet.costpercapita_bn167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.031729647835505,r[:number])
end

def test_costpercapita_bo167
  r = spreadsheet.costpercapita_bo167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.350385604311505,r[:number])
end

def test_costpercapita_bp167
  r = spreadsheet.costpercapita_bp167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.896956998856034,r[:number])
end

def test_costpercapita_bq167
  r = spreadsheet.costpercapita_bq167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.23083462614703,r[:number])
end

def test_costpercapita_bs167
  r = spreadsheet.costpercapita_bs167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.13932387580935,r[:number])
end

def test_costpercapita_bt167
  r = spreadsheet.costpercapita_bt167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.24792165939486,r[:number])
end

def test_costpercapita_bu167
  r = spreadsheet.costpercapita_bu167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.14070076094859,r[:number])
end

def test_costpercapita_bv167
  r = spreadsheet.costpercapita_bv167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.1697605797467,r[:number])
end

def test_costpercapita_bw167
  r = spreadsheet.costpercapita_bw167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.79127347250203,r[:number])
end

def test_costpercapita_bx167
  r = spreadsheet.costpercapita_bx167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.86259889119812,r[:number])
end

def test_costpercapita_by167
  r = spreadsheet.costpercapita_by167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.88200629425182,r[:number])
end

def test_costpercapita_bz167
  r = spreadsheet.costpercapita_bz167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.21530272549057,r[:number])
end

def test_costpercapita_ca167
  r = spreadsheet.costpercapita_ca167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(139.42400503241566,r[:number])
end

def test_costpercapita_cc167
  r = spreadsheet.costpercapita_cc167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.54143258797308,r[:number])
end

def test_costpercapita_cd167
  r = spreadsheet.costpercapita_cd167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2405.782341920594,r[:number])
end

def test_costpercapita_cf167
  r = spreadsheet.costpercapita_cf167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-17.913941473979403,r[:number])
end

def test_costpercapita_cg167
  r = spreadsheet.costpercapita_cg167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch167
  r = spreadsheet.costpercapita_ch167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci167
  r = spreadsheet.costpercapita_ci167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj167
  r = spreadsheet.costpercapita_cj167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck167
  r = spreadsheet.costpercapita_ck167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl167
  r = spreadsheet.costpercapita_cl167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm167
  r = spreadsheet.costpercapita_cm167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn167
  r = spreadsheet.costpercapita_cn167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp167
  r = spreadsheet.costpercapita_cp167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.990437941553267,r[:number])
end

def test_costpercapita_cq167
  r = spreadsheet.costpercapita_cq167
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-17.913941473979403,r[:number])
end

def test_costpercapita_cr167
  r = spreadsheet.costpercapita_cr167
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c168
  r = spreadsheet.costpercapita_c168
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e168
  r = spreadsheet.costpercapita_e168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.92217160314277,r[:number])
end

def test_costpercapita_f168
  r = spreadsheet.costpercapita_f168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.68523811206954,r[:number])
end

def test_costpercapita_g168
  r = spreadsheet.costpercapita_g168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.064523261112896,r[:number])
end

def test_costpercapita_h168
  r = spreadsheet.costpercapita_h168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.56214155540478,r[:number])
end

def test_costpercapita_i168
  r = spreadsheet.costpercapita_i168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.33563561208287,r[:number])
end

def test_costpercapita_j168
  r = spreadsheet.costpercapita_j168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.33206942436598,r[:number])
end

def test_costpercapita_k168
  r = spreadsheet.costpercapita_k168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.51031887358552,r[:number])
end

def test_costpercapita_l168
  r = spreadsheet.costpercapita_l168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.872702285226666,r[:number])
end

def test_costpercapita_m168
  r = spreadsheet.costpercapita_m168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.98090252082917,r[:number])
end

def test_costpercapita_o168
  r = spreadsheet.costpercapita_o168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.8181302998666,r[:number])
end

def test_costpercapita_p168
  r = spreadsheet.costpercapita_p168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.1241173002444,r[:number])
end

def test_costpercapita_q168
  r = spreadsheet.costpercapita_q168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.427846136826368,r[:number])
end

def test_costpercapita_r168
  r = spreadsheet.costpercapita_r168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.629884100522723,r[:number])
end

def test_costpercapita_s168
  r = spreadsheet.costpercapita_s168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.262703072677237,r[:number])
end

def test_costpercapita_t168
  r = spreadsheet.costpercapita_t168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.356931001406124,r[:number])
end

def test_costpercapita_u168
  r = spreadsheet.costpercapita_u168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.02725008695704,r[:number])
end

def test_costpercapita_v168
  r = spreadsheet.costpercapita_v168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.961889630586374,r[:number])
end

def test_costpercapita_w168
  r = spreadsheet.costpercapita_w168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.737952919141772,r[:number])
end

def test_costpercapita_y168
  r = spreadsheet.costpercapita_y168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.27699004186337794,r[:number])
end

def test_costpercapita_z168
  r = spreadsheet.costpercapita_z168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.22499927188293975,r[:number])
end

def test_costpercapita_aa168
  r = spreadsheet.costpercapita_aa168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12436183535401259,r[:number])
end

def test_costpercapita_ab168
  r = spreadsheet.costpercapita_ab168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04017038693498128,r[:number])
end

def test_costpercapita_ac168
  r = spreadsheet.costpercapita_ac168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.039072925813976186,r[:number])
end

def test_costpercapita_ad168
  r = spreadsheet.costpercapita_ad168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae168
  r = spreadsheet.costpercapita_ae168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af168
  r = spreadsheet.costpercapita_af168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag168
  r = spreadsheet.costpercapita_ag168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai168
  r = spreadsheet.costpercapita_ai168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.01729194487275,r[:number])
end

def test_costpercapita_aj168
  r = spreadsheet.costpercapita_aj168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.03435468419687,r[:number])
end

def test_costpercapita_ak168
  r = spreadsheet.costpercapita_ak168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.61673123329328,r[:number])
end

def test_costpercapita_al168
  r = spreadsheet.costpercapita_al168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.23219604286251,r[:number])
end

def test_costpercapita_am168
  r = spreadsheet.costpercapita_am168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.63741161057408,r[:number])
end

def test_costpercapita_an168
  r = spreadsheet.costpercapita_an168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.68900042577211,r[:number])
end

def test_costpercapita_ao168
  r = spreadsheet.costpercapita_ao168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.53756896054256,r[:number])
end

def test_costpercapita_ap168
  r = spreadsheet.costpercapita_ap168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.83459191581304,r[:number])
end

def test_costpercapita_aq168
  r = spreadsheet.costpercapita_aq168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.71885543997095,r[:number])
end

def test_costpercapita_as168
  r = spreadsheet.costpercapita_as168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.47977802865535,r[:number])
end

def test_costpercapita_at168
  r = spreadsheet.costpercapita_at168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1726.9356106706775,r[:number])
end

def test_costpercapita_ay168
  r = spreadsheet.costpercapita_ay168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.753302961885666,r[:number])
end

def test_costpercapita_az168
  r = spreadsheet.costpercapita_az168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.68523811206954,r[:number])
end

def test_costpercapita_ba168
  r = spreadsheet.costpercapita_ba168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.064523261112896,r[:number])
end

def test_costpercapita_bb168
  r = spreadsheet.costpercapita_bb168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.56214155540478,r[:number])
end

def test_costpercapita_bc168
  r = spreadsheet.costpercapita_bc168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.33563561208287,r[:number])
end

def test_costpercapita_bd168
  r = spreadsheet.costpercapita_bd168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.33206942436598,r[:number])
end

def test_costpercapita_be168
  r = spreadsheet.costpercapita_be168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.51031887358552,r[:number])
end

def test_costpercapita_bf168
  r = spreadsheet.costpercapita_bf168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.87270228522667,r[:number])
end

def test_costpercapita_bg168
  r = spreadsheet.costpercapita_bg168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.98090252082917,r[:number])
end

def test_costpercapita_bi168
  r = spreadsheet.costpercapita_bi168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.753302961885666,r[:number])
end

def test_costpercapita_bj168
  r = spreadsheet.costpercapita_bj168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.68523811206954,r[:number])
end

def test_costpercapita_bk168
  r = spreadsheet.costpercapita_bk168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.064523261112896,r[:number])
end

def test_costpercapita_bl168
  r = spreadsheet.costpercapita_bl168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.56214155540478,r[:number])
end

def test_costpercapita_bm168
  r = spreadsheet.costpercapita_bm168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.33563561208287,r[:number])
end

def test_costpercapita_bn168
  r = spreadsheet.costpercapita_bn168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.33206942436598,r[:number])
end

def test_costpercapita_bo168
  r = spreadsheet.costpercapita_bo168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.51031887358552,r[:number])
end

def test_costpercapita_bp168
  r = spreadsheet.costpercapita_bp168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.87270228522667,r[:number])
end

def test_costpercapita_bq168
  r = spreadsheet.costpercapita_bq168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.98090252082917,r[:number])
end

def test_costpercapita_bs168
  r = spreadsheet.costpercapita_bs168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.848423303615654,r[:number])
end

def test_costpercapita_bt168
  r = spreadsheet.costpercapita_bt168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.03435468419687,r[:number])
end

def test_costpercapita_bu168
  r = spreadsheet.costpercapita_bu168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.61673123329328,r[:number])
end

def test_costpercapita_bv168
  r = spreadsheet.costpercapita_bv168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.23219604286251,r[:number])
end

def test_costpercapita_bw168
  r = spreadsheet.costpercapita_bw168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.63741161057408,r[:number])
end

def test_costpercapita_bx168
  r = spreadsheet.costpercapita_bx168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(72.68900042577211,r[:number])
end

def test_costpercapita_by168
  r = spreadsheet.costpercapita_by168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.53756896054256,r[:number])
end

def test_costpercapita_bz168
  r = spreadsheet.costpercapita_bz168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(74.83459191581305,r[:number])
end

def test_costpercapita_ca168
  r = spreadsheet.costpercapita_ca168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.71885543997095,r[:number])
end

def test_costpercapita_cc168
  r = spreadsheet.costpercapita_cc168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.79434817962678,r[:number])
end

def test_costpercapita_cd168
  r = spreadsheet.costpercapita_cd168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1711.7667420294204,r[:number])
end

def test_costpercapita_cf168
  r = spreadsheet.costpercapita_cf168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-15.16886864125711,r[:number])
end

def test_costpercapita_cg168
  r = spreadsheet.costpercapita_cg168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch168
  r = spreadsheet.costpercapita_ch168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci168
  r = spreadsheet.costpercapita_ci168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj168
  r = spreadsheet.costpercapita_cj168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck168
  r = spreadsheet.costpercapita_ck168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl168
  r = spreadsheet.costpercapita_cl168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm168
  r = spreadsheet.costpercapita_cm168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn168
  r = spreadsheet.costpercapita_cn168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp168
  r = spreadsheet.costpercapita_cp168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.6854298490285675,r[:number])
end

def test_costpercapita_cq168
  r = spreadsheet.costpercapita_cq168
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-15.16886864125711,r[:number])
end

def test_costpercapita_cr168
  r = spreadsheet.costpercapita_cr168
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c169
  r = spreadsheet.costpercapita_c169
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e169
  r = spreadsheet.costpercapita_e169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(263.59236623333607,r[:number])
end

def test_costpercapita_f169
  r = spreadsheet.costpercapita_f169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.557657578333,r[:number])
end

def test_costpercapita_g169
  r = spreadsheet.costpercapita_g169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.9666960746077,r[:number])
end

def test_costpercapita_h169
  r = spreadsheet.costpercapita_h169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.29769003529583,r[:number])
end

def test_costpercapita_i169
  r = spreadsheet.costpercapita_i169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(340.32369194159526,r[:number])
end

def test_costpercapita_j169
  r = spreadsheet.costpercapita_j169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(367.78716017893765,r[:number])
end

def test_costpercapita_k169
  r = spreadsheet.costpercapita_k169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.13056056607854,r[:number])
end

def test_costpercapita_l169
  r = spreadsheet.costpercapita_l169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.0922000009433,r[:number])
end

def test_costpercapita_m169
  r = spreadsheet.costpercapita_m169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.04814425556015,r[:number])
end

def test_costpercapita_o169
  r = spreadsheet.costpercapita_o169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.92050561313425,r[:number])
end

def test_costpercapita_p169
  r = spreadsheet.costpercapita_p169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(86.06716709773691,r[:number])
end

def test_costpercapita_q169
  r = spreadsheet.costpercapita_q169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.11481051391148,r[:number])
end

def test_costpercapita_r169
  r = spreadsheet.costpercapita_r169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.89708034984041,r[:number])
end

def test_costpercapita_s169
  r = spreadsheet.costpercapita_s169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(91.59470609421348,r[:number])
end

def test_costpercapita_t169
  r = spreadsheet.costpercapita_t169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.46504964163336,r[:number])
end

def test_costpercapita_u169
  r = spreadsheet.costpercapita_u169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97.66133724877675,r[:number])
end

def test_costpercapita_v169
  r = spreadsheet.costpercapita_v169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.12211827535049,r[:number])
end

def test_costpercapita_w169
  r = spreadsheet.costpercapita_w169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.85770286474992,r[:number])
end

def test_costpercapita_y169
  r = spreadsheet.costpercapita_y169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z169
  r = spreadsheet.costpercapita_z169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa169
  r = spreadsheet.costpercapita_aa169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab169
  r = spreadsheet.costpercapita_ab169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac169
  r = spreadsheet.costpercapita_ac169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad169
  r = spreadsheet.costpercapita_ad169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae169
  r = spreadsheet.costpercapita_ae169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af169
  r = spreadsheet.costpercapita_af169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag169
  r = spreadsheet.costpercapita_ag169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai169
  r = spreadsheet.costpercapita_ai169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(347.5128718464704,r[:number])
end

def test_costpercapita_aj169
  r = spreadsheet.costpercapita_aj169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.6248246760699,r[:number])
end

def test_costpercapita_ak169
  r = spreadsheet.costpercapita_ak169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.0815065885192,r[:number])
end

def test_costpercapita_al169
  r = spreadsheet.costpercapita_al169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.1947703851362,r[:number])
end

def test_costpercapita_am169
  r = spreadsheet.costpercapita_am169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431.91839803580865,r[:number])
end

def test_costpercapita_an169
  r = spreadsheet.costpercapita_an169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(462.252209820571,r[:number])
end

def test_costpercapita_ao169
  r = spreadsheet.costpercapita_ao169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.79189781485525,r[:number])
end

def test_costpercapita_ap169
  r = spreadsheet.costpercapita_ap169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(525.2143182762939,r[:number])
end

def test_costpercapita_aq169
  r = spreadsheet.costpercapita_aq169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561.90584712031,r[:number])
end

def test_costpercapita_as169
  r = spreadsheet.costpercapita_as169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(441.83296050711493,r[:number])
end

def test_costpercapita_at169
  r = spreadsheet.costpercapita_at169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8954.926841354472,r[:number])
end

def test_costpercapita_ay169
  r = spreadsheet.costpercapita_ay169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.15541974000166,r[:number])
end

def test_costpercapita_az169
  r = spreadsheet.costpercapita_az169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.557657578333,r[:number])
end

def test_costpercapita_ba169
  r = spreadsheet.costpercapita_ba169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.9666960746077,r[:number])
end

def test_costpercapita_bb169
  r = spreadsheet.costpercapita_bb169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.29769003529583,r[:number])
end

def test_costpercapita_bc169
  r = spreadsheet.costpercapita_bc169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(340.32369194159526,r[:number])
end

def test_costpercapita_bd169
  r = spreadsheet.costpercapita_bd169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(367.78716017893765,r[:number])
end

def test_costpercapita_be169
  r = spreadsheet.costpercapita_be169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.13056056607854,r[:number])
end

def test_costpercapita_bf169
  r = spreadsheet.costpercapita_bf169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.0922000009433,r[:number])
end

def test_costpercapita_bg169
  r = spreadsheet.costpercapita_bg169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.0481442555602,r[:number])
end

def test_costpercapita_bi169
  r = spreadsheet.costpercapita_bi169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.15541974000166,r[:number])
end

def test_costpercapita_bj169
  r = spreadsheet.costpercapita_bj169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.557657578333,r[:number])
end

def test_costpercapita_bk169
  r = spreadsheet.costpercapita_bk169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(292.9666960746077,r[:number])
end

def test_costpercapita_bl169
  r = spreadsheet.costpercapita_bl169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(317.29769003529583,r[:number])
end

def test_costpercapita_bm169
  r = spreadsheet.costpercapita_bm169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(340.32369194159526,r[:number])
end

def test_costpercapita_bn169
  r = spreadsheet.costpercapita_bn169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(367.78716017893765,r[:number])
end

def test_costpercapita_bo169
  r = spreadsheet.costpercapita_bo169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(393.13056056607854,r[:number])
end

def test_costpercapita_bp169
  r = spreadsheet.costpercapita_bp169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.0922000009433,r[:number])
end

def test_costpercapita_bq169
  r = spreadsheet.costpercapita_bq169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(457.0481442555602,r[:number])
end

def test_costpercapita_bs169
  r = spreadsheet.costpercapita_bs169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.0759253531359,r[:number])
end

def test_costpercapita_bt169
  r = spreadsheet.costpercapita_bt169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.6248246760699,r[:number])
end

def test_costpercapita_bu169
  r = spreadsheet.costpercapita_bu169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(381.0815065885192,r[:number])
end

def test_costpercapita_bv169
  r = spreadsheet.costpercapita_bv169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(407.1947703851362,r[:number])
end

def test_costpercapita_bw169
  r = spreadsheet.costpercapita_bw169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431.91839803580865,r[:number])
end

def test_costpercapita_bx169
  r = spreadsheet.costpercapita_bx169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(462.252209820571,r[:number])
end

def test_costpercapita_by169
  r = spreadsheet.costpercapita_by169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(490.79189781485525,r[:number])
end

def test_costpercapita_bz169
  r = spreadsheet.costpercapita_bz169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(525.2143182762939,r[:number])
end

def test_costpercapita_ca169
  r = spreadsheet.costpercapita_ca169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(561.90584712031,r[:number])
end

def test_costpercapita_cc169
  r = spreadsheet.costpercapita_cc169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430.1177442300778,r[:number])
end

def test_costpercapita_cd169
  r = spreadsheet.costpercapita_cd169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8849.489894861137,r[:number])
end

def test_costpercapita_cf169
  r = spreadsheet.costpercapita_cf169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-105.43694649333443,r[:number])
end

def test_costpercapita_cg169
  r = spreadsheet.costpercapita_cg169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch169
  r = spreadsheet.costpercapita_ch169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci169
  r = spreadsheet.costpercapita_ci169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj169
  r = spreadsheet.costpercapita_cj169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck169
  r = spreadsheet.costpercapita_ck169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl169
  r = spreadsheet.costpercapita_cl169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm169
  r = spreadsheet.costpercapita_cm169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn169
  r = spreadsheet.costpercapita_cn169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp169
  r = spreadsheet.costpercapita_cp169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-11.71521627703716,r[:number])
end

def test_costpercapita_cq169
  r = spreadsheet.costpercapita_cq169
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-105.43694649333443,r[:number])
end

def test_costpercapita_cr169
  r = spreadsheet.costpercapita_cr169
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c170
  r = spreadsheet.costpercapita_c170
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e170
  r = spreadsheet.costpercapita_e170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(923.8516450698919,r[:number])
end

def test_costpercapita_f170
  r = spreadsheet.costpercapita_f170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(869.0750525903396,r[:number])
end

def test_costpercapita_g170
  r = spreadsheet.costpercapita_g170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.963147998269,r[:number])
end

def test_costpercapita_h170
  r = spreadsheet.costpercapita_h170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914.5914541457685,r[:number])
end

def test_costpercapita_i170
  r = spreadsheet.costpercapita_i170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.0566772130732,r[:number])
end

def test_costpercapita_j170
  r = spreadsheet.costpercapita_j170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(891.2552599818962,r[:number])
end

def test_costpercapita_k170
  r = spreadsheet.costpercapita_k170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(862.9547548229459,r[:number])
end

def test_costpercapita_l170
  r = spreadsheet.costpercapita_l170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.382874557189,r[:number])
end

def test_costpercapita_m170
  r = spreadsheet.costpercapita_m170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(804.5642857044303,r[:number])
end

def test_costpercapita_o170
  r = spreadsheet.costpercapita_o170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1174.401543588274,r[:number])
end

def test_costpercapita_p170
  r = spreadsheet.costpercapita_p170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1065.8388776115262,r[:number])
end

def test_costpercapita_q170
  r = spreadsheet.costpercapita_q170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(981.750288749519,r[:number])
end

def test_costpercapita_r170
  r = spreadsheet.costpercapita_r170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(903.59968073605,r[:number])
end

def test_costpercapita_s170
  r = spreadsheet.costpercapita_s170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(813.1656380243944,r[:number])
end

def test_costpercapita_t170
  r = spreadsheet.costpercapita_t170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(716.664098393168,r[:number])
end

def test_costpercapita_u170
  r = spreadsheet.costpercapita_u170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(608.0260695064934,r[:number])
end

def test_costpercapita_v170
  r = spreadsheet.costpercapita_v170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(491.289431129618,r[:number])
end

def test_costpercapita_w170
  r = spreadsheet.costpercapita_w170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(368.0532576589638,r[:number])
end

def test_costpercapita_y170
  r = spreadsheet.costpercapita_y170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z170
  r = spreadsheet.costpercapita_z170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa170
  r = spreadsheet.costpercapita_aa170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab170
  r = spreadsheet.costpercapita_ab170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac170
  r = spreadsheet.costpercapita_ac170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad170
  r = spreadsheet.costpercapita_ad170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae170
  r = spreadsheet.costpercapita_ae170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af170
  r = spreadsheet.costpercapita_af170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag170
  r = spreadsheet.costpercapita_ag170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai170
  r = spreadsheet.costpercapita_ai170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2098.2531886581664,r[:number])
end

def test_costpercapita_aj170
  r = spreadsheet.costpercapita_aj170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1934.9139302018657,r[:number])
end

def test_costpercapita_ak170
  r = spreadsheet.costpercapita_ak170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1883.7134367477881,r[:number])
end

def test_costpercapita_al170
  r = spreadsheet.costpercapita_al170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1818.1911348818185,r[:number])
end

def test_costpercapita_am170
  r = spreadsheet.costpercapita_am170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1714.2223152374677,r[:number])
end

def test_costpercapita_an170
  r = spreadsheet.costpercapita_an170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1607.9193583750641,r[:number])
end

def test_costpercapita_ao170
  r = spreadsheet.costpercapita_ao170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1470.9808243294394,r[:number])
end

def test_costpercapita_ap170
  r = spreadsheet.costpercapita_ap170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1326.6723056868072,r[:number])
end

def test_costpercapita_aq170
  r = spreadsheet.costpercapita_aq170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1172.617543363394,r[:number])
end

def test_costpercapita_as170
  r = spreadsheet.costpercapita_as170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1669.72044860909,r[:number])
end

def test_costpercapita_at170
  r = spreadsheet.costpercapita_at170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36270.11498646313,r[:number])
end

def test_costpercapita_ay170
  r = spreadsheet.costpercapita_ay170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(554.3109870419353,r[:number])
end

def test_costpercapita_az170
  r = spreadsheet.costpercapita_az170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(869.0750525903396,r[:number])
end

def test_costpercapita_ba170
  r = spreadsheet.costpercapita_ba170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.963147998269,r[:number])
end

def test_costpercapita_bb170
  r = spreadsheet.costpercapita_bb170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914.5914541457685,r[:number])
end

def test_costpercapita_bc170
  r = spreadsheet.costpercapita_bc170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.0566772130732,r[:number])
end

def test_costpercapita_bd170
  r = spreadsheet.costpercapita_bd170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(891.2552599818962,r[:number])
end

def test_costpercapita_be170
  r = spreadsheet.costpercapita_be170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(862.9547548229459,r[:number])
end

def test_costpercapita_bf170
  r = spreadsheet.costpercapita_bf170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.382874557189,r[:number])
end

def test_costpercapita_bg170
  r = spreadsheet.costpercapita_bg170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(804.5642857044303,r[:number])
end

def test_costpercapita_bi170
  r = spreadsheet.costpercapita_bi170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(554.3109870419353,r[:number])
end

def test_costpercapita_bj170
  r = spreadsheet.costpercapita_bj170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(869.0750525903396,r[:number])
end

def test_costpercapita_bk170
  r = spreadsheet.costpercapita_bk170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.963147998269,r[:number])
end

def test_costpercapita_bl170
  r = spreadsheet.costpercapita_bl170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914.5914541457685,r[:number])
end

def test_costpercapita_bm170
  r = spreadsheet.costpercapita_bm170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(901.0566772130732,r[:number])
end

def test_costpercapita_bn170
  r = spreadsheet.costpercapita_bn170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(891.2552599818962,r[:number])
end

def test_costpercapita_bo170
  r = spreadsheet.costpercapita_bo170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(862.9547548229459,r[:number])
end

def test_costpercapita_bp170
  r = spreadsheet.costpercapita_bp170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.382874557189,r[:number])
end

def test_costpercapita_bq170
  r = spreadsheet.costpercapita_bq170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(804.5642857044303,r[:number])
end

def test_costpercapita_bs170
  r = spreadsheet.costpercapita_bs170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1728.7125306302091,r[:number])
end

def test_costpercapita_bt170
  r = spreadsheet.costpercapita_bt170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1934.9139302018657,r[:number])
end

def test_costpercapita_bu170
  r = spreadsheet.costpercapita_bu170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1883.7134367477881,r[:number])
end

def test_costpercapita_bv170
  r = spreadsheet.costpercapita_bv170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1818.1911348818185,r[:number])
end

def test_costpercapita_bw170
  r = spreadsheet.costpercapita_bw170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1714.2223152374677,r[:number])
end

def test_costpercapita_bx170
  r = spreadsheet.costpercapita_bx170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1607.9193583750641,r[:number])
end

def test_costpercapita_by170
  r = spreadsheet.costpercapita_by170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1470.9808243294394,r[:number])
end

def test_costpercapita_bz170
  r = spreadsheet.costpercapita_bz170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1326.6723056868072,r[:number])
end

def test_costpercapita_ca170
  r = spreadsheet.costpercapita_ca170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1172.617543363394,r[:number])
end

def test_costpercapita_cc170
  r = spreadsheet.costpercapita_cc170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1628.6603754948726,r[:number])
end

def test_costpercapita_cd170
  r = spreadsheet.costpercapita_cd170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35900.57432843517,r[:number])
end

def test_costpercapita_cf170
  r = spreadsheet.costpercapita_cf170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-369.54065802795674,r[:number])
end

def test_costpercapita_cg170
  r = spreadsheet.costpercapita_cg170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch170
  r = spreadsheet.costpercapita_ch170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci170
  r = spreadsheet.costpercapita_ci170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj170
  r = spreadsheet.costpercapita_cj170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck170
  r = spreadsheet.costpercapita_ck170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl170
  r = spreadsheet.costpercapita_cl170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm170
  r = spreadsheet.costpercapita_cm170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn170
  r = spreadsheet.costpercapita_cn170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp170
  r = spreadsheet.costpercapita_cp170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-41.06007311421741,r[:number])
end

def test_costpercapita_cq170
  r = spreadsheet.costpercapita_cq170
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-369.54065802795674,r[:number])
end

def test_costpercapita_cr170
  r = spreadsheet.costpercapita_cr170
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c171
  r = spreadsheet.costpercapita_c171
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e171
  r = spreadsheet.costpercapita_e171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number])
end

def test_costpercapita_f171
  r = spreadsheet.costpercapita_f171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_g171
  r = spreadsheet.costpercapita_g171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number])
end

def test_costpercapita_h171
  r = spreadsheet.costpercapita_h171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_i171
  r = spreadsheet.costpercapita_i171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_j171
  r = spreadsheet.costpercapita_j171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number])
end

def test_costpercapita_k171
  r = spreadsheet.costpercapita_k171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_l171
  r = spreadsheet.costpercapita_l171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number])
end

def test_costpercapita_m171
  r = spreadsheet.costpercapita_m171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number])
end

def test_costpercapita_o171
  r = spreadsheet.costpercapita_o171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number])
end

def test_costpercapita_p171
  r = spreadsheet.costpercapita_p171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number])
end

def test_costpercapita_q171
  r = spreadsheet.costpercapita_q171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number])
end

def test_costpercapita_r171
  r = spreadsheet.costpercapita_r171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number])
end

def test_costpercapita_s171
  r = spreadsheet.costpercapita_s171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number])
end

def test_costpercapita_t171
  r = spreadsheet.costpercapita_t171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number])
end

def test_costpercapita_u171
  r = spreadsheet.costpercapita_u171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number])
end

def test_costpercapita_v171
  r = spreadsheet.costpercapita_v171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number])
end

def test_costpercapita_w171
  r = spreadsheet.costpercapita_w171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number])
end

def test_costpercapita_y171
  r = spreadsheet.costpercapita_y171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z171
  r = spreadsheet.costpercapita_z171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa171
  r = spreadsheet.costpercapita_aa171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab171
  r = spreadsheet.costpercapita_ab171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac171
  r = spreadsheet.costpercapita_ac171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad171
  r = spreadsheet.costpercapita_ad171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae171
  r = spreadsheet.costpercapita_ae171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af171
  r = spreadsheet.costpercapita_af171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag171
  r = spreadsheet.costpercapita_ag171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai171
  r = spreadsheet.costpercapita_ai171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number])
end

def test_costpercapita_aj171
  r = spreadsheet.costpercapita_aj171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number])
end

def test_costpercapita_ak171
  r = spreadsheet.costpercapita_ak171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number])
end

def test_costpercapita_al171
  r = spreadsheet.costpercapita_al171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number])
end

def test_costpercapita_am171
  r = spreadsheet.costpercapita_am171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number])
end

def test_costpercapita_an171
  r = spreadsheet.costpercapita_an171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number])
end

def test_costpercapita_ao171
  r = spreadsheet.costpercapita_ao171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number])
end

def test_costpercapita_ap171
  r = spreadsheet.costpercapita_ap171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number])
end

def test_costpercapita_aq171
  r = spreadsheet.costpercapita_aq171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number])
end

def test_costpercapita_as171
  r = spreadsheet.costpercapita_as171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number])
end

def test_costpercapita_at171
  r = spreadsheet.costpercapita_at171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number])
end

def test_costpercapita_ay171
  r = spreadsheet.costpercapita_ay171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number])
end

def test_costpercapita_az171
  r = spreadsheet.costpercapita_az171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_ba171
  r = spreadsheet.costpercapita_ba171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number])
end

def test_costpercapita_bb171
  r = spreadsheet.costpercapita_bb171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_bc171
  r = spreadsheet.costpercapita_bc171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_bd171
  r = spreadsheet.costpercapita_bd171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number])
end

def test_costpercapita_be171
  r = spreadsheet.costpercapita_be171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_bf171
  r = spreadsheet.costpercapita_bf171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number])
end

def test_costpercapita_bg171
  r = spreadsheet.costpercapita_bg171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number])
end

def test_costpercapita_bi171
  r = spreadsheet.costpercapita_bi171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.731378469290247,r[:number])
end

def test_costpercapita_bj171
  r = spreadsheet.costpercapita_bj171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_bk171
  r = spreadsheet.costpercapita_bk171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8007001728118706,r[:number])
end

def test_costpercapita_bl171
  r = spreadsheet.costpercapita_bl171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_bm171
  r = spreadsheet.costpercapita_bm171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_bn171
  r = spreadsheet.costpercapita_bn171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.067851193377509,r[:number])
end

def test_costpercapita_bo171
  r = spreadsheet.costpercapita_bo171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_bp171
  r = spreadsheet.costpercapita_bp171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.7989380978136005,r[:number])
end

def test_costpercapita_bq171
  r = spreadsheet.costpercapita_bq171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.699139408620389,r[:number])
end

def test_costpercapita_bs171
  r = spreadsheet.costpercapita_bs171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.893309368875432,r[:number])
end

def test_costpercapita_bt171
  r = spreadsheet.costpercapita_bt171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number])
end

def test_costpercapita_bu171
  r = spreadsheet.costpercapita_bu171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number])
end

def test_costpercapita_bv171
  r = spreadsheet.costpercapita_bv171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number])
end

def test_costpercapita_bw171
  r = spreadsheet.costpercapita_bw171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number])
end

def test_costpercapita_bx171
  r = spreadsheet.costpercapita_bx171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number])
end

def test_costpercapita_by171
  r = spreadsheet.costpercapita_by171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number])
end

def test_costpercapita_bz171
  r = spreadsheet.costpercapita_bz171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number])
end

def test_costpercapita_ca171
  r = spreadsheet.costpercapita_ca171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number])
end

def test_costpercapita_cc171
  r = spreadsheet.costpercapita_cc171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.528436409641897,r[:number])
end

def test_costpercapita_cd171
  r = spreadsheet.costpercapita_cd171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(272.19160492603066,r[:number])
end

def test_costpercapita_cf171
  r = spreadsheet.costpercapita_cf171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8209189795268315,r[:number])
end

def test_costpercapita_cg171
  r = spreadsheet.costpercapita_cg171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch171
  r = spreadsheet.costpercapita_ch171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci171
  r = spreadsheet.costpercapita_ci171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj171
  r = spreadsheet.costpercapita_cj171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck171
  r = spreadsheet.costpercapita_ck171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl171
  r = spreadsheet.costpercapita_cl171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm171
  r = spreadsheet.costpercapita_cm171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn171
  r = spreadsheet.costpercapita_cn171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp171
  r = spreadsheet.costpercapita_cp171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.20232433105853684,r[:number])
end

def test_costpercapita_cq171
  r = spreadsheet.costpercapita_cq171
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.8209189795268315,r[:number])
end

def test_costpercapita_cr171
  r = spreadsheet.costpercapita_cr171
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c172
  r = spreadsheet.costpercapita_c172
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e172
  r = spreadsheet.costpercapita_e172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f172
  r = spreadsheet.costpercapita_f172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number])
end

def test_costpercapita_g172
  r = spreadsheet.costpercapita_g172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.3808215481063097,r[:number])
end

def test_costpercapita_h172
  r = spreadsheet.costpercapita_h172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number])
end

def test_costpercapita_i172
  r = spreadsheet.costpercapita_i172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number])
end

def test_costpercapita_j172
  r = spreadsheet.costpercapita_j172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number])
end

def test_costpercapita_k172
  r = spreadsheet.costpercapita_k172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number])
end

def test_costpercapita_l172
  r = spreadsheet.costpercapita_l172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number])
end

def test_costpercapita_m172
  r = spreadsheet.costpercapita_m172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number])
end

def test_costpercapita_o172
  r = spreadsheet.costpercapita_o172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p172
  r = spreadsheet.costpercapita_p172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.04679482364530887,r[:number])
end

def test_costpercapita_q172
  r = spreadsheet.costpercapita_q172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10662591036335284,r[:number])
end

def test_costpercapita_r172
  r = spreadsheet.costpercapita_r172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10115207521230941,r[:number])
end

def test_costpercapita_s172
  r = spreadsheet.costpercapita_s172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09636321557658548,r[:number])
end

def test_costpercapita_t172
  r = spreadsheet.costpercapita_t172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09219595763383641,r[:number])
end

def test_costpercapita_u172
  r = spreadsheet.costpercapita_u172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09002532183418638,r[:number])
end

def test_costpercapita_v172
  r = spreadsheet.costpercapita_v172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08648831671431914,r[:number])
end

def test_costpercapita_w172
  r = spreadsheet.costpercapita_w172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08323219105211166,r[:number])
end

def test_costpercapita_y172
  r = spreadsheet.costpercapita_y172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z172
  r = spreadsheet.costpercapita_z172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa172
  r = spreadsheet.costpercapita_aa172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab172
  r = spreadsheet.costpercapita_ab172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac172
  r = spreadsheet.costpercapita_ac172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad172
  r = spreadsheet.costpercapita_ad172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae172
  r = spreadsheet.costpercapita_ae172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af172
  r = spreadsheet.costpercapita_af172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag172
  r = spreadsheet.costpercapita_ag172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai172
  r = spreadsheet.costpercapita_ai172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj172
  r = spreadsheet.costpercapita_aj172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number])
end

def test_costpercapita_ak172
  r = spreadsheet.costpercapita_ak172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.487447458469662,r[:number])
end

def test_costpercapita_al172
  r = spreadsheet.costpercapita_al172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number])
end

def test_costpercapita_am172
  r = spreadsheet.costpercapita_am172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number])
end

def test_costpercapita_an172
  r = spreadsheet.costpercapita_an172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number])
end

def test_costpercapita_ao172
  r = spreadsheet.costpercapita_ao172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number])
end

def test_costpercapita_ap172
  r = spreadsheet.costpercapita_ap172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.828800797900048,r[:number])
end

def test_costpercapita_aq172
  r = spreadsheet.costpercapita_aq172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number])
end

def test_costpercapita_as172
  r = spreadsheet.costpercapita_as172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number])
end

def test_costpercapita_at172
  r = spreadsheet.costpercapita_at172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number])
end

def test_costpercapita_ay172
  r = spreadsheet.costpercapita_ay172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az172
  r = spreadsheet.costpercapita_az172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number])
end

def test_costpercapita_ba172
  r = spreadsheet.costpercapita_ba172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.38082154810631,r[:number])
end

def test_costpercapita_bb172
  r = spreadsheet.costpercapita_bb172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number])
end

def test_costpercapita_bc172
  r = spreadsheet.costpercapita_bc172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number])
end

def test_costpercapita_bd172
  r = spreadsheet.costpercapita_bd172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number])
end

def test_costpercapita_be172
  r = spreadsheet.costpercapita_be172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number])
end

def test_costpercapita_bf172
  r = spreadsheet.costpercapita_bf172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number])
end

def test_costpercapita_bg172
  r = spreadsheet.costpercapita_bg172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number])
end

def test_costpercapita_bi172
  r = spreadsheet.costpercapita_bi172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj172
  r = spreadsheet.costpercapita_bj172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4837383107049151,r[:number])
end

def test_costpercapita_bk172
  r = spreadsheet.costpercapita_bk172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.38082154810631,r[:number])
end

def test_costpercapita_bl172
  r = spreadsheet.costpercapita_bl172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2072609213659082,r[:number])
end

def test_costpercapita_bm172
  r = spreadsheet.costpercapita_bm172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.055419030477101,r[:number])
end

def test_costpercapita_bn172
  r = spreadsheet.costpercapita_bn172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9232864615606666,r[:number])
end

def test_costpercapita_bo172
  r = spreadsheet.costpercapita_bo172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.854461424010788,r[:number])
end

def test_costpercapita_bp172
  r = spreadsheet.costpercapita_bp172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.742312481185729,r[:number])
end

def test_costpercapita_bq172
  r = spreadsheet.costpercapita_bq172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6390694723840284,r[:number])
end

def test_costpercapita_bs172
  r = spreadsheet.costpercapita_bs172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt172
  r = spreadsheet.costpercapita_bt172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5305331343502242,r[:number])
end

def test_costpercapita_bu172
  r = spreadsheet.costpercapita_bu172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.487447458469663,r[:number])
end

def test_costpercapita_bv172
  r = spreadsheet.costpercapita_bv172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.308412996578218,r[:number])
end

def test_costpercapita_bw172
  r = spreadsheet.costpercapita_bw172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1517822460536866,r[:number])
end

def test_costpercapita_bx172
  r = spreadsheet.costpercapita_bx172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.015482419194503,r[:number])
end

def test_costpercapita_by172
  r = spreadsheet.costpercapita_by172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.944486745844974,r[:number])
end

def test_costpercapita_bz172
  r = spreadsheet.costpercapita_bz172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8288007979000485,r[:number])
end

def test_costpercapita_ca172
  r = spreadsheet.costpercapita_ca172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.72230166343614,r[:number])
end

def test_costpercapita_cc172
  r = spreadsheet.costpercapita_cc172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5543608290919395,r[:number])
end

def test_costpercapita_cd172
  r = spreadsheet.costpercapita_cd172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.17920054171995,r[:number])
end

def test_costpercapita_cf172
  r = spreadsheet.costpercapita_cf172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg172
  r = spreadsheet.costpercapita_cg172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch172
  r = spreadsheet.costpercapita_ch172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci172
  r = spreadsheet.costpercapita_ci172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj172
  r = spreadsheet.costpercapita_cj172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck172
  r = spreadsheet.costpercapita_ck172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl172
  r = spreadsheet.costpercapita_cl172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm172
  r = spreadsheet.costpercapita_cm172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn172
  r = spreadsheet.costpercapita_cn172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp172
  r = spreadsheet.costpercapita_cp172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cq172
  r = spreadsheet.costpercapita_cq172
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cr172
  r = spreadsheet.costpercapita_cr172
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c173
  r = spreadsheet.costpercapita_c173
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e173
  r = spreadsheet.costpercapita_e173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1289.0192122108263,r[:number])
end

def test_costpercapita_f173
  r = spreadsheet.costpercapita_f173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.5225477492938,r[:number])
end

def test_costpercapita_g173
  r = spreadsheet.costpercapita_g173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5412789085988,r[:number])
end

def test_costpercapita_h173
  r = spreadsheet.costpercapita_h173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.6552271942226,r[:number])
end

def test_costpercapita_i173
  r = spreadsheet.costpercapita_i173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.649345374563,r[:number])
end

def test_costpercapita_j173
  r = spreadsheet.costpercapita_j173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1388.7743958360304,r[:number])
end

def test_costpercapita_k173
  r = spreadsheet.costpercapita_k173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1386.8528197663034,r[:number])
end

def test_costpercapita_l173
  r = spreadsheet.costpercapita_l173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.0046438025076,r[:number])
end

def test_costpercapita_m173
  r = spreadsheet.costpercapita_m173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1401.064982057998,r[:number])
end

def test_costpercapita_o173
  r = spreadsheet.costpercapita_o173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1364.409897203031,r[:number])
end

def test_costpercapita_p173
  r = spreadsheet.costpercapita_p173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1253.6151748253565,r[:number])
end

def test_costpercapita_q173
  r = spreadsheet.costpercapita_q173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1169.377504848914,r[:number])
end

def test_costpercapita_r173
  r = spreadsheet.costpercapita_r173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1095.1835228353489,r[:number])
end

def test_costpercapita_s173
  r = spreadsheet.costpercapita_s173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1008.2494849251837,r[:number])
end

def test_costpercapita_t173
  r = spreadsheet.costpercapita_t173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(915.8244724300775,r[:number])
end

def test_costpercapita_u173
  r = spreadsheet.costpercapita_u173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(812.379811264823,r[:number])
end

def test_costpercapita_v173
  r = spreadsheet.costpercapita_v173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(701.5053065161292,r[:number])
end

def test_costpercapita_w173
  r = spreadsheet.costpercapita_w173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(585.3770787985841,r[:number])
end

def test_costpercapita_y173
  r = spreadsheet.costpercapita_y173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(764.697345685774,r[:number])
end

def test_costpercapita_z173
  r = spreadsheet.costpercapita_z173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(729.791569348382,r[:number])
end

def test_costpercapita_aa173
  r = spreadsheet.costpercapita_aa173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.9331924000387,r[:number])
end

def test_costpercapita_ab173
  r = spreadsheet.costpercapita_ab173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(698.5280894037122,r[:number])
end

def test_costpercapita_ac173
  r = spreadsheet.costpercapita_ac173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(691.5594914943352,r[:number])
end

def test_costpercapita_ad173
  r = spreadsheet.costpercapita_ad173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(711.2951600381176,r[:number])
end

def test_costpercapita_ae173
  r = spreadsheet.costpercapita_ae173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(726.3453662417204,r[:number])
end

def test_costpercapita_af173
  r = spreadsheet.costpercapita_af173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(744.1736198201966,r[:number])
end

def test_costpercapita_ag173
  r = spreadsheet.costpercapita_ag173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(755.6291824721422,r[:number])
end

def test_costpercapita_ai173
  r = spreadsheet.costpercapita_ai173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3418.1264550996316,r[:number])
end

def test_costpercapita_aj173
  r = spreadsheet.costpercapita_aj173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3255.9292919230325,r[:number])
end

def test_costpercapita_ak173
  r = spreadsheet.costpercapita_ak173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.8519761575517,r[:number])
end

def test_costpercapita_al173
  r = spreadsheet.costpercapita_al173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3166.366839433284,r[:number])
end

def test_costpercapita_am173
  r = spreadsheet.costpercapita_am173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3067.4583217940813,r[:number])
end

def test_costpercapita_an173
  r = spreadsheet.costpercapita_an173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3015.8940283042252,r[:number])
end

def test_costpercapita_ao173
  r = spreadsheet.costpercapita_ao173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.577997272847,r[:number])
end

def test_costpercapita_ap173
  r = spreadsheet.costpercapita_ap173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2840.683570138834,r[:number])
end

def test_costpercapita_aq173
  r = spreadsheet.costpercapita_aq173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2742.0712433287235,r[:number])
end

def test_costpercapita_as173
  r = spreadsheet.costpercapita_as173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3071.439969272468,r[:number])
end

def test_costpercapita_at173
  r = spreadsheet.costpercapita_at173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65256.42448402258,r[:number])
end

def test_costpercapita_ay173
  r = spreadsheet.costpercapita_ay173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.4115273264958,r[:number])
end

def test_costpercapita_az173
  r = spreadsheet.costpercapita_az173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.5225477492938,r[:number])
end

def test_costpercapita_ba173
  r = spreadsheet.costpercapita_ba173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5412789085988,r[:number])
end

def test_costpercapita_bb173
  r = spreadsheet.costpercapita_bb173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.6552271942226,r[:number])
end

def test_costpercapita_bc173
  r = spreadsheet.costpercapita_bc173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.649345374563,r[:number])
end

def test_costpercapita_bd173
  r = spreadsheet.costpercapita_bd173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1388.7743958360304,r[:number])
end

def test_costpercapita_be173
  r = spreadsheet.costpercapita_be173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1386.8528197663034,r[:number])
end

def test_costpercapita_bf173
  r = spreadsheet.costpercapita_bf173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.0046438025076,r[:number])
end

def test_costpercapita_bg173
  r = spreadsheet.costpercapita_bg173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1401.064982057998,r[:number])
end

def test_costpercapita_bi173
  r = spreadsheet.costpercapita_bi173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(773.4115273264958,r[:number])
end

def test_costpercapita_bj173
  r = spreadsheet.costpercapita_bj173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1272.5225477492938,r[:number])
end

def test_costpercapita_bk173
  r = spreadsheet.costpercapita_bk173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1329.5412789085988,r[:number])
end

def test_costpercapita_bl173
  r = spreadsheet.costpercapita_bl173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1372.6552271942226,r[:number])
end

def test_costpercapita_bm173
  r = spreadsheet.costpercapita_bm173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.649345374563,r[:number])
end

def test_costpercapita_bn173
  r = spreadsheet.costpercapita_bn173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1388.7743958360304,r[:number])
end

def test_costpercapita_bo173
  r = spreadsheet.costpercapita_bo173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1386.8528197663034,r[:number])
end

def test_costpercapita_bp173
  r = spreadsheet.costpercapita_bp173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1395.0046438025076,r[:number])
end

def test_costpercapita_bq173
  r = spreadsheet.costpercapita_bq173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1401.064982057998,r[:number])
end

def test_costpercapita_bs173
  r = spreadsheet.costpercapita_bs173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2902.5187702153007,r[:number])
end

def test_costpercapita_bt173
  r = spreadsheet.costpercapita_bt173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3255.9292919230325,r[:number])
end

def test_costpercapita_bu173
  r = spreadsheet.costpercapita_bu173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3210.8519761575517,r[:number])
end

def test_costpercapita_bv173
  r = spreadsheet.costpercapita_bv173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3166.366839433284,r[:number])
end

def test_costpercapita_bw173
  r = spreadsheet.costpercapita_bw173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3067.4583217940813,r[:number])
end

def test_costpercapita_bx173
  r = spreadsheet.costpercapita_bx173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3015.8940283042252,r[:number])
end

def test_costpercapita_by173
  r = spreadsheet.costpercapita_by173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2925.577997272847,r[:number])
end

def test_costpercapita_bz173
  r = spreadsheet.costpercapita_bz173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2840.683570138834,r[:number])
end

def test_costpercapita_ca173
  r = spreadsheet.costpercapita_ca173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2742.0712433287235,r[:number])
end

def test_costpercapita_cc173
  r = spreadsheet.costpercapita_cc173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3014.150226507542,r[:number])
end

def test_costpercapita_cd173
  r = spreadsheet.costpercapita_cd173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64740.81679913825,r[:number])
end

def test_costpercapita_cf173
  r = spreadsheet.costpercapita_cf173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-515.6076848843304,r[:number])
end

def test_costpercapita_cg173
  r = spreadsheet.costpercapita_cg173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ch173
  r = spreadsheet.costpercapita_ch173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ci173
  r = spreadsheet.costpercapita_ci173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cj173
  r = spreadsheet.costpercapita_cj173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ck173
  r = spreadsheet.costpercapita_ck173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cl173
  r = spreadsheet.costpercapita_cl173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cm173
  r = spreadsheet.costpercapita_cm173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cn173
  r = spreadsheet.costpercapita_cn173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cp173
  r = spreadsheet.costpercapita_cp173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-57.28974276492559,r[:number])
end

def test_costpercapita_cq173
  r = spreadsheet.costpercapita_cq173
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-515.6076848843304,r[:number])
end

def test_costpercapita_cr173
  r = spreadsheet.costpercapita_cr173
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e174
  r = spreadsheet.costpercapita_e174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f174
  r = spreadsheet.costpercapita_f174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g174
  r = spreadsheet.costpercapita_g174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h174
  r = spreadsheet.costpercapita_h174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i174
  r = spreadsheet.costpercapita_i174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j174
  r = spreadsheet.costpercapita_j174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k174
  r = spreadsheet.costpercapita_k174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l174
  r = spreadsheet.costpercapita_l174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m174
  r = spreadsheet.costpercapita_m174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o174
  r = spreadsheet.costpercapita_o174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p174
  r = spreadsheet.costpercapita_p174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q174
  r = spreadsheet.costpercapita_q174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r174
  r = spreadsheet.costpercapita_r174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s174
  r = spreadsheet.costpercapita_s174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t174
  r = spreadsheet.costpercapita_t174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_costpercapita_u174
  r = spreadsheet.costpercapita_u174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v174
  r = spreadsheet.costpercapita_v174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w174
  r = spreadsheet.costpercapita_w174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y174
  r = spreadsheet.costpercapita_y174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z174
  r = spreadsheet.costpercapita_z174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa174
  r = spreadsheet.costpercapita_aa174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab174
  r = spreadsheet.costpercapita_ab174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac174
  r = spreadsheet.costpercapita_ac174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad174
  r = spreadsheet.costpercapita_ad174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2737367544323206e-13,r[:number])
end

def test_costpercapita_ae174
  r = spreadsheet.costpercapita_ae174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af174
  r = spreadsheet.costpercapita_af174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag174
  r = spreadsheet.costpercapita_ag174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai174
  r = spreadsheet.costpercapita_ai174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj174
  r = spreadsheet.costpercapita_aj174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak174
  r = spreadsheet.costpercapita_ak174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al174
  r = spreadsheet.costpercapita_al174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am174
  r = spreadsheet.costpercapita_am174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an174
  r = spreadsheet.costpercapita_an174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao174
  r = spreadsheet.costpercapita_ao174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap174
  r = spreadsheet.costpercapita_ap174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq174
  r = spreadsheet.costpercapita_aq174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as174
  r = spreadsheet.costpercapita_as174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at174
  r = spreadsheet.costpercapita_at174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay174
  r = spreadsheet.costpercapita_ay174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_az174
  r = spreadsheet.costpercapita_az174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ba174
  r = spreadsheet.costpercapita_ba174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bb174
  r = spreadsheet.costpercapita_bb174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bc174
  r = spreadsheet.costpercapita_bc174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bd174
  r = spreadsheet.costpercapita_bd174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_be174
  r = spreadsheet.costpercapita_be174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bf174
  r = spreadsheet.costpercapita_bf174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bg174
  r = spreadsheet.costpercapita_bg174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi174
  r = spreadsheet.costpercapita_bi174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bj174
  r = spreadsheet.costpercapita_bj174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bk174
  r = spreadsheet.costpercapita_bk174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bl174
  r = spreadsheet.costpercapita_bl174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bm174
  r = spreadsheet.costpercapita_bm174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bn174
  r = spreadsheet.costpercapita_bn174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bo174
  r = spreadsheet.costpercapita_bo174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bp174
  r = spreadsheet.costpercapita_bp174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bq174
  r = spreadsheet.costpercapita_bq174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs174
  r = spreadsheet.costpercapita_bs174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt174
  r = spreadsheet.costpercapita_bt174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu174
  r = spreadsheet.costpercapita_bu174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv174
  r = spreadsheet.costpercapita_bv174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw174
  r = spreadsheet.costpercapita_bw174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx174
  r = spreadsheet.costpercapita_bx174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by174
  r = spreadsheet.costpercapita_by174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz174
  r = spreadsheet.costpercapita_bz174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca174
  r = spreadsheet.costpercapita_ca174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc174
  r = spreadsheet.costpercapita_cc174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd174
  r = spreadsheet.costpercapita_cd174
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.275957614183426e-12,r[:number])
end

def test_costpercapita_cf174
  r = spreadsheet.costpercapita_cf174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg174
  r = spreadsheet.costpercapita_cg174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch174
  r = spreadsheet.costpercapita_ch174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci174
  r = spreadsheet.costpercapita_ci174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj174
  r = spreadsheet.costpercapita_cj174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck174
  r = spreadsheet.costpercapita_ck174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl174
  r = spreadsheet.costpercapita_cl174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm174
  r = spreadsheet.costpercapita_cm174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn174
  r = spreadsheet.costpercapita_cn174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp174
  r = spreadsheet.costpercapita_cp174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq174
  r = spreadsheet.costpercapita_cq174
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c176
  r = spreadsheet.costpercapita_c176
  assert_equal(:ExcelString,r[:type])
  assert_equal("£m",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e176
  r = spreadsheet.costpercapita_e176
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f176
  r = spreadsheet.costpercapita_f176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o176
  r = spreadsheet.costpercapita_o176
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p176
  r = spreadsheet.costpercapita_p176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y176
  r = spreadsheet.costpercapita_y176
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.Point",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z176
  r = spreadsheet.costpercapita_z176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai176
  r = spreadsheet.costpercapita_ai176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Point estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as176
  r = spreadsheet.costpercapita_as176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av176
  r = spreadsheet.costpercapita_av176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay176
  r = spreadsheet.costpercapita_ay176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi176
  r = spreadsheet.costpercapita_bi176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br176
  r = spreadsheet.costpercapita_br176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc176
  r = spreadsheet.costpercapita_cc176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf176
  r = spreadsheet.costpercapita_cf176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp176
  r = spreadsheet.costpercapita_cp176
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c177
  r = spreadsheet.costpercapita_c177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e177
  r = spreadsheet.costpercapita_e177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f177
  r = spreadsheet.costpercapita_f177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g177
  r = spreadsheet.costpercapita_g177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h177
  r = spreadsheet.costpercapita_h177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i177
  r = spreadsheet.costpercapita_i177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j177
  r = spreadsheet.costpercapita_j177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k177
  r = spreadsheet.costpercapita_k177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l177
  r = spreadsheet.costpercapita_l177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m177
  r = spreadsheet.costpercapita_m177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o177
  r = spreadsheet.costpercapita_o177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p177
  r = spreadsheet.costpercapita_p177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q177
  r = spreadsheet.costpercapita_q177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r177
  r = spreadsheet.costpercapita_r177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s177
  r = spreadsheet.costpercapita_s177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t177
  r = spreadsheet.costpercapita_t177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u177
  r = spreadsheet.costpercapita_u177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v177
  r = spreadsheet.costpercapita_v177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w177
  r = spreadsheet.costpercapita_w177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y177
  r = spreadsheet.costpercapita_y177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z177
  r = spreadsheet.costpercapita_z177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa177
  r = spreadsheet.costpercapita_aa177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab177
  r = spreadsheet.costpercapita_ab177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac177
  r = spreadsheet.costpercapita_ac177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad177
  r = spreadsheet.costpercapita_ad177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae177
  r = spreadsheet.costpercapita_ae177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af177
  r = spreadsheet.costpercapita_af177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag177
  r = spreadsheet.costpercapita_ag177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai177
  r = spreadsheet.costpercapita_ai177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj177
  r = spreadsheet.costpercapita_aj177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak177
  r = spreadsheet.costpercapita_ak177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al177
  r = spreadsheet.costpercapita_al177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am177
  r = spreadsheet.costpercapita_am177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an177
  r = spreadsheet.costpercapita_an177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao177
  r = spreadsheet.costpercapita_ao177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap177
  r = spreadsheet.costpercapita_ap177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq177
  r = spreadsheet.costpercapita_aq177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as177
  r = spreadsheet.costpercapita_as177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at177
  r = spreadsheet.costpercapita_at177
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av177
  r = spreadsheet.costpercapita_av177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw177
  r = spreadsheet.costpercapita_aw177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay177
  r = spreadsheet.costpercapita_ay177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_az177
  r = spreadsheet.costpercapita_az177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_ba177
  r = spreadsheet.costpercapita_ba177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bb177
  r = spreadsheet.costpercapita_bb177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bc177
  r = spreadsheet.costpercapita_bc177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bd177
  r = spreadsheet.costpercapita_bd177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_be177
  r = spreadsheet.costpercapita_be177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bf177
  r = spreadsheet.costpercapita_bf177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bg177
  r = spreadsheet.costpercapita_bg177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bi177
  r = spreadsheet.costpercapita_bi177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_bj177
  r = spreadsheet.costpercapita_bj177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_bk177
  r = spreadsheet.costpercapita_bk177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bl177
  r = spreadsheet.costpercapita_bl177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bm177
  r = spreadsheet.costpercapita_bm177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bn177
  r = spreadsheet.costpercapita_bn177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_bo177
  r = spreadsheet.costpercapita_bo177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bp177
  r = spreadsheet.costpercapita_bp177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bq177
  r = spreadsheet.costpercapita_bq177
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bs177
  r = spreadsheet.costpercapita_bs177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt177
  r = spreadsheet.costpercapita_bt177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu177
  r = spreadsheet.costpercapita_bu177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv177
  r = spreadsheet.costpercapita_bv177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw177
  r = spreadsheet.costpercapita_bw177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx177
  r = spreadsheet.costpercapita_bx177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by177
  r = spreadsheet.costpercapita_by177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz177
  r = spreadsheet.costpercapita_bz177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca177
  r = spreadsheet.costpercapita_ca177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc177
  r = spreadsheet.costpercapita_cc177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd177
  r = spreadsheet.costpercapita_cd177
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf177
  r = spreadsheet.costpercapita_cf177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg177
  r = spreadsheet.costpercapita_cg177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch177
  r = spreadsheet.costpercapita_ch177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci177
  r = spreadsheet.costpercapita_ci177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj177
  r = spreadsheet.costpercapita_cj177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck177
  r = spreadsheet.costpercapita_ck177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl177
  r = spreadsheet.costpercapita_cl177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm177
  r = spreadsheet.costpercapita_cm177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn177
  r = spreadsheet.costpercapita_cn177
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp177
  r = spreadsheet.costpercapita_cp177
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq177
  r = spreadsheet.costpercapita_cq177
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c178
  r = spreadsheet.costpercapita_c178
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e178
  r = spreadsheet.costpercapita_e178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.33699289017264,r[:number])
end

def test_costpercapita_f178
  r = spreadsheet.costpercapita_f178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_g178
  r = spreadsheet.costpercapita_g178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.820833430588458,r[:number])
end

def test_costpercapita_h178
  r = spreadsheet.costpercapita_h178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.21336370367079,r[:number])
end

def test_costpercapita_i178
  r = spreadsheet.costpercapita_i178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.949338682919965,r[:number])
end

def test_costpercapita_j178
  r = spreadsheet.costpercapita_j178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.25900257987702,r[:number])
end

def test_costpercapita_k178
  r = spreadsheet.costpercapita_k178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.12799067837116,r[:number])
end

def test_costpercapita_l178
  r = spreadsheet.costpercapita_l178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.98345555647253,r[:number])
end

def test_costpercapita_m178
  r = spreadsheet.costpercapita_m178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.76795228791822,r[:number])
end

def test_costpercapita_o178
  r = spreadsheet.costpercapita_o178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06306043679317243,r[:number])
end

def test_costpercapita_p178
  r = spreadsheet.costpercapita_p178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06577587801153967,r[:number])
end

def test_costpercapita_q178
  r = spreadsheet.costpercapita_q178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07084044488428051,r[:number])
end

def test_costpercapita_r178
  r = spreadsheet.costpercapita_r178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0792884399322761,r[:number])
end

def test_costpercapita_s178
  r = spreadsheet.costpercapita_s178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.08744902988010893,r[:number])
end

def test_costpercapita_t178
  r = spreadsheet.costpercapita_t178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09369727904314976,r[:number])
end

def test_costpercapita_u178
  r = spreadsheet.costpercapita_u178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.09873838461096329,r[:number])
end

def test_costpercapita_v178
  r = spreadsheet.costpercapita_v178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10392784276343621,r[:number])
end

def test_costpercapita_w178
  r = spreadsheet.costpercapita_w178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1079968018187501,r[:number])
end

def test_costpercapita_y178
  r = spreadsheet.costpercapita_y178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(737.7344410169293,r[:number])
end

def test_costpercapita_z178
  r = spreadsheet.costpercapita_z178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(818.2549272177437,r[:number])
end

def test_costpercapita_aa178
  r = spreadsheet.costpercapita_aa178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914.5204221068066,r[:number])
end

def test_costpercapita_ab178
  r = spreadsheet.costpercapita_ab178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1013.8907913165831,r[:number])
end

def test_costpercapita_ac178
  r = spreadsheet.costpercapita_ac178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1119.546854465658,r[:number])
end

def test_costpercapita_ad178
  r = spreadsheet.costpercapita_ad178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1153.3578105481765,r[:number])
end

def test_costpercapita_ae178
  r = spreadsheet.costpercapita_ae178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1178.296858728168,r[:number])
end

def test_costpercapita_af178
  r = spreadsheet.costpercapita_af178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1207.3539665550763,r[:number])
end

def test_costpercapita_ag178
  r = spreadsheet.costpercapita_ag178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1225.6558048006023,r[:number])
end

def test_costpercapita_ai178
  r = spreadsheet.costpercapita_ai178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(762.1344943438951,r[:number])
end

def test_costpercapita_aj178
  r = spreadsheet.costpercapita_aj178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.1620633016582,r[:number])
end

def test_costpercapita_ak178
  r = spreadsheet.costpercapita_ak178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(936.4120959822792,r[:number])
end

def test_costpercapita_al178
  r = spreadsheet.costpercapita_al178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1043.1834434601863,r[:number])
end

def test_costpercapita_am178
  r = spreadsheet.costpercapita_am178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1152.583642178458,r[:number])
end

def test_costpercapita_an178
  r = spreadsheet.costpercapita_an178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1187.7105104070968,r[:number])
end

def test_costpercapita_ao178
  r = spreadsheet.costpercapita_ao178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1214.52358779115,r[:number])
end

def test_costpercapita_ap178
  r = spreadsheet.costpercapita_ap178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1247.4413499543125,r[:number])
end

def test_costpercapita_aq178
  r = spreadsheet.costpercapita_aq178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1267.5317538903394,r[:number])
end

def test_costpercapita_as178
  r = spreadsheet.costpercapita_as178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1071.8536601454862,r[:number])
end

def test_costpercapita_at178
  r = spreadsheet.costpercapita_at178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21880.273216960606,r[:number])
end

def test_costpercapita_ay178
  r = spreadsheet.costpercapita_ay178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.016213002182706,r[:number])
end

def test_costpercapita_az178
  r = spreadsheet.costpercapita_az178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.245454116307945,r[:number])
end

def test_costpercapita_ba178
  r = spreadsheet.costpercapita_ba178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.979051085873182,r[:number])
end

def test_costpercapita_bb178
  r = spreadsheet.costpercapita_bb178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.037351520492702,r[:number])
end

def test_costpercapita_bc178
  r = spreadsheet.costpercapita_bc178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.08830137418777,r[:number])
end

def test_costpercapita_bd178
  r = spreadsheet.costpercapita_bd178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.807271654442054,r[:number])
end

def test_costpercapita_be178
  r = spreadsheet.costpercapita_be178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.83329588866612,r[:number])
end

def test_costpercapita_bf178
  r = spreadsheet.costpercapita_bf178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.949842485361376,r[:number])
end

def test_costpercapita_bg178
  r = spreadsheet.costpercapita_bg178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.92948322990764,r[:number])
end

def test_costpercapita_bi178
  r = spreadsheet.costpercapita_bi178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.016213002182706,r[:number])
end

def test_costpercapita_bj178
  r = spreadsheet.costpercapita_bj178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.997331939612554,r[:number])
end

def test_costpercapita_bk178
  r = spreadsheet.costpercapita_bk178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.419921815245424,r[:number])
end

def test_costpercapita_bl178
  r = spreadsheet.costpercapita_bl178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(36.31136521958869,r[:number])
end

def test_costpercapita_bm178
  r = spreadsheet.costpercapita_bm178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.97851192748783,r[:number])
end

def test_costpercapita_bn178
  r = spreadsheet.costpercapita_bn178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.701248912060045,r[:number])
end

def test_costpercapita_bo178
  r = spreadsheet.costpercapita_bo178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.52502395112886,r[:number])
end

def test_costpercapita_bp178
  r = spreadsheet.costpercapita_bp178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.426520667366184,r[:number])
end

def test_costpercapita_bq178
  r = spreadsheet.costpercapita_bq178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.544625832759515,r[:number])
end

def test_costpercapita_bs178
  r = spreadsheet.costpercapita_bs178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(745.8137144559051,r[:number])
end

def test_costpercapita_bt178
  r = spreadsheet.costpercapita_bt178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(835.3180350353678,r[:number])
end

def test_costpercapita_bu178
  r = spreadsheet.costpercapita_bu178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(943.0111843669363,r[:number])
end

def test_costpercapita_bv178
  r = spreadsheet.costpercapita_bv178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1050.2814449761042,r[:number])
end

def test_costpercapita_bw178
  r = spreadsheet.costpercapita_bw178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1164.612815423026,r[:number])
end

def test_costpercapita_bx178
  r = spreadsheet.costpercapita_bx178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1205.1527567392798,r[:number])
end

def test_costpercapita_by178
  r = spreadsheet.costpercapita_by178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1233.920621063908,r[:number])
end

def test_costpercapita_bz178
  r = spreadsheet.costpercapita_bz178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1266.884415065206,r[:number])
end

def test_costpercapita_ca178
  r = spreadsheet.costpercapita_ca178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1289.3084274351806,r[:number])
end

def test_costpercapita_cc178
  r = spreadsheet.costpercapita_cc178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1081.589268284546,r[:number])
end

def test_costpercapita_cd178
  r = spreadsheet.costpercapita_cd178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22069.61050988333,r[:number])
end

def test_costpercapita_cf178
  r = spreadsheet.costpercapita_cf178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-16.320779887989932,r[:number])
end

def test_costpercapita_cg178
  r = spreadsheet.costpercapita_cg178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.15597173370952752,r[:number])
end

def test_costpercapita_ch178
  r = spreadsheet.costpercapita_ch178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.599088384656968,r[:number])
end

def test_costpercapita_ci178
  r = spreadsheet.costpercapita_ci178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.098001515917896,r[:number])
end

def test_costpercapita_cj178
  r = spreadsheet.costpercapita_cj178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.029173244567865,r[:number])
end

def test_costpercapita_ck178
  r = spreadsheet.costpercapita_ck178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.442246332183025,r[:number])
end

def test_costpercapita_cl178
  r = spreadsheet.costpercapita_cl178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.397033272757692,r[:number])
end

def test_costpercapita_cm178
  r = spreadsheet.costpercapita_cm178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(19.443065110893652,r[:number])
end

def test_costpercapita_cn178
  r = spreadsheet.costpercapita_cn178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.776673544841294,r[:number])
end

def test_costpercapita_cp178
  r = spreadsheet.costpercapita_cp178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.735608139059776,r[:number])
end

def test_costpercapita_cq178
  r = spreadsheet.costpercapita_cq178
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.3372929227252,r[:number])
end

def test_costpercapita_cr178
  r = spreadsheet.costpercapita_cr178
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c179
  r = spreadsheet.costpercapita_c179
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e179
  r = spreadsheet.costpercapita_e179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.096223247683085,r[:number])
end

def test_costpercapita_f179
  r = spreadsheet.costpercapita_f179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.14813430318401,r[:number])
end

def test_costpercapita_g179
  r = spreadsheet.costpercapita_g179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.57721970761935,r[:number])
end

def test_costpercapita_h179
  r = spreadsheet.costpercapita_h179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54.724720351270626,r[:number])
end

def test_costpercapita_i179
  r = spreadsheet.costpercapita_i179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.18069235147549,r[:number])
end

def test_costpercapita_j179
  r = spreadsheet.costpercapita_j179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.06585532758965,r[:number])
end

def test_costpercapita_k179
  r = spreadsheet.costpercapita_k179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(64.26191234386243,r[:number])
end

def test_costpercapita_l179
  r = spreadsheet.costpercapita_l179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.53189768814917,r[:number])
end

def test_costpercapita_m179
  r = spreadsheet.costpercapita_m179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.16288573665807,r[:number])
end

def test_costpercapita_o179
  r = spreadsheet.costpercapita_o179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.19401807498917,r[:number])
end

def test_costpercapita_p179
  r = spreadsheet.costpercapita_p179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.86699799141536,r[:number])
end

def test_costpercapita_q179
  r = spreadsheet.costpercapita_q179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.7359452860496,r[:number])
end

def test_costpercapita_r179
  r = spreadsheet.costpercapita_r179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.04773492159386,r[:number])
end

def test_costpercapita_s179
  r = spreadsheet.costpercapita_s179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(106.09229814746404,r[:number])
end

def test_costpercapita_t179
  r = spreadsheet.costpercapita_t179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110.4636490433713,r[:number])
end

def test_costpercapita_u179
  r = spreadsheet.costpercapita_u179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.06160608701408,r[:number])
end

def test_costpercapita_v179
  r = spreadsheet.costpercapita_v179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(119.81080094340376,r[:number])
end

def test_costpercapita_w179
  r = spreadsheet.costpercapita_w179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.72923555782008,r[:number])
end

def test_costpercapita_y179
  r = spreadsheet.costpercapita_y179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.56522232141024,r[:number])
end

def test_costpercapita_z179
  r = spreadsheet.costpercapita_z179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.391324497266295,r[:number])
end

def test_costpercapita_aa179
  r = spreadsheet.costpercapita_aa179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.805116065817476,r[:number])
end

def test_costpercapita_ab179
  r = spreadsheet.costpercapita_ab179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.905865963018904,r[:number])
end

def test_costpercapita_ac179
  r = spreadsheet.costpercapita_ac179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.07004848003023,r[:number])
end

def test_costpercapita_ad179
  r = spreadsheet.costpercapita_ad179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.301431228929047,r[:number])
end

def test_costpercapita_ae179
  r = spreadsheet.costpercapita_ae179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.576635797514122,r[:number])
end

def test_costpercapita_af179
  r = spreadsheet.costpercapita_af179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.8830369203169,r[:number])
end

def test_costpercapita_ag179
  r = spreadsheet.costpercapita_ag179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.220551901899274,r[:number])
end

def test_costpercapita_ai179
  r = spreadsheet.costpercapita_ai179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(147.85546364408253,r[:number])
end

def test_costpercapita_aj179
  r = spreadsheet.costpercapita_aj179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.40645679186568,r[:number])
end

def test_costpercapita_ak179
  r = spreadsheet.costpercapita_ak179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(166.11828105948643,r[:number])
end

def test_costpercapita_al179
  r = spreadsheet.costpercapita_al179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(170.67832123588337,r[:number])
end

def test_costpercapita_am179
  r = spreadsheet.costpercapita_am179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.34303897896976,r[:number])
end

def test_costpercapita_an179
  r = spreadsheet.costpercapita_an179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.83093559988998,r[:number])
end

def test_costpercapita_ao179
  r = spreadsheet.costpercapita_ao179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.90015422839068,r[:number])
end

def test_costpercapita_ap179
  r = spreadsheet.costpercapita_ap179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(204.22573555186983,r[:number])
end

def test_costpercapita_aq179
  r = spreadsheet.costpercapita_aq179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.11267319637741,r[:number])
end

def test_costpercapita_as179
  r = spreadsheet.costpercapita_as179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(181.1634511429795,r[:number])
end

def test_costpercapita_at179
  r = spreadsheet.costpercapita_at179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3727.76034739798,r[:number])
end

def test_costpercapita_ay179
  r = spreadsheet.costpercapita_ay179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.830271965354626,r[:number])
end

def test_costpercapita_az179
  r = spreadsheet.costpercapita_az179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(34.11765540842919,r[:number])
end

def test_costpercapita_ba179
  r = spreadsheet.costpercapita_ba179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.60834614562732,r[:number])
end

def test_costpercapita_bb179
  r = spreadsheet.costpercapita_bb179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.04240066417646,r[:number])
end

def test_costpercapita_bc179
  r = spreadsheet.costpercapita_bc179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(31.93963640787486,r[:number])
end

def test_costpercapita_bd179
  r = spreadsheet.costpercapita_bd179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.17043270920843,r[:number])
end

def test_costpercapita_be179
  r = spreadsheet.costpercapita_be179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.278062741816775,r[:number])
end

def test_costpercapita_bf179
  r = spreadsheet.costpercapita_bf179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.07319681008554,r[:number])
end

def test_costpercapita_bg179
  r = spreadsheet.costpercapita_bg179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(39.066511660484906,r[:number])
end

def test_costpercapita_bi179
  r = spreadsheet.costpercapita_bi179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.830271965354626,r[:number])
end

def test_costpercapita_bj179
  r = spreadsheet.costpercapita_bj179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.392947990212335,r[:number])
end

def test_costpercapita_bk179
  r = spreadsheet.costpercapita_bk179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.35152222305733,r[:number])
end

def test_costpercapita_bl179
  r = spreadsheet.costpercapita_bl179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.65093251307974,r[:number])
end

def test_costpercapita_bm179
  r = spreadsheet.costpercapita_bm179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(90.95410949784244,r[:number])
end

def test_costpercapita_bn179
  r = spreadsheet.costpercapita_bn179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.89101042762914,r[:number])
end

def test_costpercapita_bo179
  r = spreadsheet.costpercapita_bo179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.22060137094536,r[:number])
end

def test_costpercapita_bp179
  r = spreadsheet.costpercapita_bp179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(105.381294804513,r[:number])
end

def test_costpercapita_bq179
  r = spreadsheet.costpercapita_bq179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(109.37697971463516,r[:number])
end

def test_costpercapita_bs179
  r = spreadsheet.costpercapita_bs179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.58951236175406,r[:number])
end

def test_costpercapita_bt179
  r = spreadsheet.costpercapita_bt179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.651270478894,r[:number])
end

def test_costpercapita_bu179
  r = spreadsheet.costpercapita_bu179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.8925835749244,r[:number])
end

def test_costpercapita_bv179
  r = spreadsheet.costpercapita_bv179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.6045333976925,r[:number])
end

def test_costpercapita_bw179
  r = spreadsheet.costpercapita_bw179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(213.1164561253367,r[:number])
end

def test_costpercapita_bx179
  r = spreadsheet.costpercapita_bx179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(221.65609069992948,r[:number])
end

def test_costpercapita_by179
  r = spreadsheet.costpercapita_by179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(231.85884325547354,r[:number])
end

def test_costpercapita_bz179
  r = spreadsheet.costpercapita_bz179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(242.07513266823366,r[:number])
end

def test_costpercapita_ca179
  r = spreadsheet.costpercapita_ca179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(251.32676717435447,r[:number])
end

def test_costpercapita_cc179
  r = spreadsheet.costpercapita_cc179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.30790997073254,r[:number])
end

def test_costpercapita_cd179
  r = spreadsheet.costpercapita_cd179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4158.36441066898,r[:number])
end

def test_costpercapita_cf179
  r = spreadsheet.costpercapita_cf179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-34.265951282328466,r[:number])
end

def test_costpercapita_cg179
  r = spreadsheet.costpercapita_cg179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-11.755186312971677,r[:number])
end

def test_costpercapita_ch179
  r = spreadsheet.costpercapita_ch179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.774302515437977,r[:number])
end

def test_costpercapita_ci179
  r = spreadsheet.costpercapita_ci179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.926212161809104,r[:number])
end

def test_costpercapita_cj179
  r = spreadsheet.costpercapita_cj179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(32.77341714636694,r[:number])
end

def test_costpercapita_ck179
  r = spreadsheet.costpercapita_ck179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.82515510003948,r[:number])
end

def test_costpercapita_cl179
  r = spreadsheet.costpercapita_cl179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.95868902708291,r[:number])
end

def test_costpercapita_cm179
  r = spreadsheet.costpercapita_cm179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.84939711636382,r[:number])
end

def test_costpercapita_cn179
  r = spreadsheet.costpercapita_cn179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(38.21409397797709,r[:number])
end

def test_costpercapita_cp179
  r = spreadsheet.costpercapita_cp179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.14445882775302,r[:number])
end

def test_costpercapita_cq179
  r = spreadsheet.costpercapita_cq179
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430.6040632710002,r[:number])
end

def test_costpercapita_cr179
  r = spreadsheet.costpercapita_cr179
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c180
  r = spreadsheet.costpercapita_c180
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e180
  r = spreadsheet.costpercapita_e180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.47786067703925,r[:number])
end

def test_costpercapita_f180
  r = spreadsheet.costpercapita_f180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(80.77911697450865,r[:number])
end

def test_costpercapita_g180
  r = spreadsheet.costpercapita_g180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(87.87897337895288,r[:number])
end

def test_costpercapita_h180
  r = spreadsheet.costpercapita_h180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.6875947980103,r[:number])
end

def test_costpercapita_i180
  r = spreadsheet.costpercapita_i180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.884464171892255,r[:number])
end

def test_costpercapita_j180
  r = spreadsheet.costpercapita_j180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.65182491231297,r[:number])
end

def test_costpercapita_k180
  r = spreadsheet.costpercapita_k180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.8057715947698,r[:number])
end

def test_costpercapita_l180
  r = spreadsheet.costpercapita_l180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.60719043600875,r[:number])
end

def test_costpercapita_m180
  r = spreadsheet.costpercapita_m180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.53044062793118,r[:number])
end

def test_costpercapita_o180
  r = spreadsheet.costpercapita_o180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.09755337826793,r[:number])
end

def test_costpercapita_p180
  r = spreadsheet.costpercapita_p180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.73723728877546,r[:number])
end

def test_costpercapita_q180
  r = spreadsheet.costpercapita_q180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.8801055061731,r[:number])
end

def test_costpercapita_r180
  r = spreadsheet.costpercapita_r180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(81.8269600258903,r[:number])
end

def test_costpercapita_s180
  r = spreadsheet.costpercapita_s180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.14593106570409,r[:number])
end

def test_costpercapita_t180
  r = spreadsheet.costpercapita_t180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.63034869397178,r[:number])
end

def test_costpercapita_u180
  r = spreadsheet.costpercapita_u180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.89111980784492,r[:number])
end

def test_costpercapita_v180
  r = spreadsheet.costpercapita_v180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(77.49930041018473,r[:number])
end

def test_costpercapita_w180
  r = spreadsheet.costpercapita_w180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(79.00464514266415,r[:number])
end

def test_costpercapita_y180
  r = spreadsheet.costpercapita_y180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.0513578545510005,r[:number])
end

def test_costpercapita_z180
  r = spreadsheet.costpercapita_z180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.8540189754513322,r[:number])
end

def test_costpercapita_aa180
  r = spreadsheet.costpercapita_aa180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.4720342707132738,r[:number])
end

def test_costpercapita_ab180
  r = spreadsheet.costpercapita_ab180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1524728164966898,r[:number])
end

def test_costpercapita_ac180
  r = spreadsheet.costpercapita_ac180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14830723580696178,r[:number])
end

def test_costpercapita_ad180
  r = spreadsheet.costpercapita_ad180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae180
  r = spreadsheet.costpercapita_ae180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af180
  r = spreadsheet.costpercapita_af180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag180
  r = spreadsheet.costpercapita_ag180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai180
  r = spreadsheet.costpercapita_ai180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.62677190985823,r[:number])
end

def test_costpercapita_aj180
  r = spreadsheet.costpercapita_aj180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.37037323873545,r[:number])
end

def test_costpercapita_ak180
  r = spreadsheet.costpercapita_ak180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.23111315583924,r[:number])
end

def test_costpercapita_al180
  r = spreadsheet.costpercapita_al180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.66702764039727,r[:number])
end

def test_costpercapita_am180
  r = spreadsheet.costpercapita_am180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(129.1787024734033,r[:number])
end

def test_costpercapita_an180
  r = spreadsheet.costpercapita_an180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.28217360628476,r[:number])
end

def test_costpercapita_ao180
  r = spreadsheet.costpercapita_ao180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.6968914026147,r[:number])
end

def test_costpercapita_ap180
  r = spreadsheet.costpercapita_ap180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.10649084619345,r[:number])
end

def test_costpercapita_aq180
  r = spreadsheet.costpercapita_aq180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(161.53508577059532,r[:number])
end

def test_costpercapita_as180
  r = spreadsheet.costpercapita_as180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(155.07718111599132,r[:number])
end

def test_costpercapita_at180
  r = spreadsheet.costpercapita_at180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3303.8633347179716,r[:number])
end

def test_costpercapita_ay180
  r = spreadsheet.costpercapita_ay180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.932280424956794,r[:number])
end

def test_costpercapita_az180
  r = spreadsheet.costpercapita_az180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.34556415947441,r[:number])
end

def test_costpercapita_ba180
  r = spreadsheet.costpercapita_ba180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.243194506259364,r[:number])
end

def test_costpercapita_bb180
  r = spreadsheet.costpercapita_bb180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(47.040186561897286,r[:number])
end

def test_costpercapita_bc180
  r = spreadsheet.costpercapita_bc180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.385230110818583,r[:number])
end

def test_costpercapita_bd180
  r = spreadsheet.costpercapita_bd180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.806490533342476,r[:number])
end

def test_costpercapita_be180
  r = spreadsheet.costpercapita_be180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(44.90916995312005,r[:number])
end

def test_costpercapita_bf180
  r = spreadsheet.costpercapita_bf180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.34912735763078,r[:number])
end

def test_costpercapita_bg180
  r = spreadsheet.costpercapita_bg180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.306993775762024,r[:number])
end

def test_costpercapita_bi180
  r = spreadsheet.costpercapita_bi180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.932280424956794,r[:number])
end

def test_costpercapita_bj180
  r = spreadsheet.costpercapita_bj180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.65355132633807,r[:number])
end

def test_costpercapita_bk180
  r = spreadsheet.costpercapita_bk180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(108.8455844432234,r[:number])
end

def test_costpercapita_bl180
  r = spreadsheet.costpercapita_bl180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.35523630249722,r[:number])
end

def test_costpercapita_bm180
  r = spreadsheet.costpercapita_bm180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.61248790016856,r[:number])
end

def test_costpercapita_bn180
  r = spreadsheet.costpercapita_bn180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.22389211840263,r[:number])
end

def test_costpercapita_bo180
  r = spreadsheet.costpercapita_bo180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.29252967995598,r[:number])
end

def test_costpercapita_bp180
  r = spreadsheet.costpercapita_bp180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.0330786764351,r[:number])
end

def test_costpercapita_bq180
  r = spreadsheet.costpercapita_bq180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.001787887473,r[:number])
end

def test_costpercapita_bs180
  r = spreadsheet.costpercapita_bs180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(113.08119165777573,r[:number])
end

def test_costpercapita_bt180
  r = spreadsheet.costpercapita_bt180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(149.24480759056487,r[:number])
end

def test_costpercapita_bu180
  r = spreadsheet.costpercapita_bu180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.1977242201098,r[:number])
end

def test_costpercapita_bv180
  r = spreadsheet.costpercapita_bv180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(217.33466914488415,r[:number])
end

def test_costpercapita_bw180
  r = spreadsheet.costpercapita_bw180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(197.9067262016796,r[:number])
end

def test_costpercapita_bx180
  r = spreadsheet.costpercapita_bx180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.85424081237437,r[:number])
end

def test_costpercapita_by180
  r = spreadsheet.costpercapita_by180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.1836494878009,r[:number])
end

def test_costpercapita_bz180
  r = spreadsheet.costpercapita_bz180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(193.5323790866198,r[:number])
end

def test_costpercapita_ca180
  r = spreadsheet.costpercapita_ca180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(212.00643303013715,r[:number])
end

def test_costpercapita_cc180
  r = spreadsheet.costpercapita_cc180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(180.81575791466068,r[:number])
end

def test_costpercapita_cd180
  r = spreadsheet.costpercapita_cd180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3834.661862493679,r[:number])
end

def test_costpercapita_cf180
  r = spreadsheet.costpercapita_cf180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-38.54558025208246,r[:number])
end

def test_costpercapita_cg180
  r = spreadsheet.costpercapita_cg180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-18.125565648170582,r[:number])
end

def test_costpercapita_ch180
  r = spreadsheet.costpercapita_ch180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.966611064270523,r[:number])
end

def test_costpercapita_ci180
  r = spreadsheet.costpercapita_ci180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(49.66764150448692,r[:number])
end

def test_costpercapita_cj180
  r = spreadsheet.costpercapita_cj180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.7280237282763,r[:number])
end

def test_costpercapita_ck180
  r = spreadsheet.costpercapita_ck180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(48.572067206089656,r[:number])
end

def test_costpercapita_cl180
  r = spreadsheet.costpercapita_cl180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.48675808518618,r[:number])
end

def test_costpercapita_cm180
  r = spreadsheet.costpercapita_cm180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.425888240426346,r[:number])
end

def test_costpercapita_cn180
  r = spreadsheet.costpercapita_cn180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.4713472595418,r[:number])
end

def test_costpercapita_cp180
  r = spreadsheet.costpercapita_cp180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.738576798669406,r[:number])
end

def test_costpercapita_cq180
  r = spreadsheet.costpercapita_cq180
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(530.798527775707,r[:number])
end

def test_costpercapita_cr180
  r = spreadsheet.costpercapita_cr180
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c181
  r = spreadsheet.costpercapita_c181
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e181
  r = spreadsheet.costpercapita_e181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(305.70454343668825,r[:number])
end

def test_costpercapita_f181
  r = spreadsheet.costpercapita_f181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(334.00200261326313,r[:number])
end

def test_costpercapita_g181
  r = spreadsheet.costpercapita_g181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(344.47169556419277,r[:number])
end

def test_costpercapita_h181
  r = spreadsheet.costpercapita_h181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(379.49377099087184,r[:number])
end

def test_costpercapita_i181
  r = spreadsheet.costpercapita_i181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(412.64486144906147,r[:number])
end

def test_costpercapita_j181
  r = spreadsheet.costpercapita_j181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(450.44198480735486,r[:number])
end

def test_costpercapita_k181
  r = spreadsheet.costpercapita_k181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(485.6054679001463,r[:number])
end

def test_costpercapita_l181
  r = spreadsheet.costpercapita_l181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(526.7955734540591,r[:number])
end

def test_costpercapita_m181
  r = spreadsheet.costpercapita_m181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(570.4190941080954,r[:number])
end

def test_costpercapita_o181
  r = spreadsheet.costpercapita_o181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.519051975028,r[:number])
end

def test_costpercapita_p181
  r = spreadsheet.costpercapita_p181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.07231807786862,r[:number])
end

def test_costpercapita_q181
  r = spreadsheet.costpercapita_q181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.1086295603686,r[:number])
end

def test_costpercapita_r181
  r = spreadsheet.costpercapita_r181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(99.89483715759334,r[:number])
end

def test_costpercapita_s181
  r = spreadsheet.costpercapita_s181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(101.638820656951,r[:number])
end

def test_costpercapita_t181
  r = spreadsheet.costpercapita_t181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.62710686035715,r[:number])
end

def test_costpercapita_u181
  r = spreadsheet.costpercapita_u181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(107.98092471304797,r[:number])
end

def test_costpercapita_v181
  r = spreadsheet.costpercapita_v181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.63252435894259,r[:number])
end

def test_costpercapita_w181
  r = spreadsheet.costpercapita_w181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(115.59400956769834,r[:number])
end

def test_costpercapita_y181
  r = spreadsheet.costpercapita_y181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z181
  r = spreadsheet.costpercapita_z181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa181
  r = spreadsheet.costpercapita_aa181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab181
  r = spreadsheet.costpercapita_ab181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac181
  r = spreadsheet.costpercapita_ac181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad181
  r = spreadsheet.costpercapita_ad181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae181
  r = spreadsheet.costpercapita_ae181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af181
  r = spreadsheet.costpercapita_af181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag181
  r = spreadsheet.costpercapita_ag181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai181
  r = spreadsheet.costpercapita_ai181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(400.2235954117163,r[:number])
end

def test_costpercapita_aj181
  r = spreadsheet.costpercapita_aj181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430.07432069113173,r[:number])
end

def test_costpercapita_ak181
  r = spreadsheet.costpercapita_ak181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(442.5803251245614,r[:number])
end

def test_costpercapita_al181
  r = spreadsheet.costpercapita_al181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(479.3886081484652,r[:number])
end

def test_costpercapita_am181
  r = spreadsheet.costpercapita_am181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(514.2836821060125,r[:number])
end

def test_costpercapita_an181
  r = spreadsheet.costpercapita_an181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(555.069091667712,r[:number])
end

def test_costpercapita_ao181
  r = spreadsheet.costpercapita_ao181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(593.5863926131942,r[:number])
end

def test_costpercapita_ap181
  r = spreadsheet.costpercapita_ap181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(638.4280978130017,r[:number])
end

def test_costpercapita_aq181
  r = spreadsheet.costpercapita_aq181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(686.0131036757937,r[:number])
end

def test_costpercapita_as181
  r = spreadsheet.costpercapita_as181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(526.6274685835098,r[:number])
end

def test_costpercapita_at181
  r = spreadsheet.costpercapita_at181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10624.718639873461,r[:number])
end

def test_costpercapita_ay181
  r = spreadsheet.costpercapita_ay181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.69414684807118,r[:number])
end

def test_costpercapita_az181
  r = spreadsheet.costpercapita_az181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.35812263153912,r[:number])
end

def test_costpercapita_ba181
  r = spreadsheet.costpercapita_ba181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(189.1057026729496,r[:number])
end

def test_costpercapita_bb181
  r = spreadsheet.costpercapita_bb181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(208.33188081156246,r[:number])
end

def test_costpercapita_bc181
  r = spreadsheet.costpercapita_bc181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(226.53093848799264,r[:number])
end

def test_costpercapita_bd181
  r = spreadsheet.costpercapita_bd181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.28054335750002,r[:number])
end

def test_costpercapita_be181
  r = spreadsheet.costpercapita_be181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.58435050426624,r[:number])
end

def test_costpercapita_bf181
  r = spreadsheet.costpercapita_bf181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(289.1966114076996,r[:number])
end

def test_costpercapita_bg181
  r = spreadsheet.costpercapita_bg181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(313.1447517994323,r[:number])
end

def test_costpercapita_bi181
  r = spreadsheet.costpercapita_bi181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.69414684807118,r[:number])
end

def test_costpercapita_bj181
  r = spreadsheet.costpercapita_bj181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(280.7318730141203,r[:number])
end

def test_costpercapita_bk181
  r = spreadsheet.costpercapita_bk181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(460.6469333930048,r[:number])
end

def test_costpercapita_bl181
  r = spreadsheet.costpercapita_bl181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(563.4459937868197,r[:number])
end

def test_costpercapita_bm181
  r = spreadsheet.costpercapita_bm181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(607.4150662905932,r[:number])
end

def test_costpercapita_bn181
  r = spreadsheet.costpercapita_bn181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(666.3422784705418,r[:number])
end

def test_costpercapita_bo181
  r = spreadsheet.costpercapita_bo181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(725.0688513929877,r[:number])
end

def test_costpercapita_bp181
  r = spreadsheet.costpercapita_bp181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(787.6425637234336,r[:number])
end

def test_costpercapita_bq181
  r = spreadsheet.costpercapita_bq181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(853.3353112920505,r[:number])
end

def test_costpercapita_bs181
  r = spreadsheet.costpercapita_bs181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(195.21319882309922,r[:number])
end

def test_costpercapita_bt181
  r = spreadsheet.costpercapita_bt181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(376.8041910919889,r[:number])
end

def test_costpercapita_bu181
  r = spreadsheet.costpercapita_bu181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(558.7555629533736,r[:number])
end

def test_costpercapita_bv181
  r = spreadsheet.costpercapita_bv181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(663.340830944413,r[:number])
end

def test_costpercapita_bw181
  r = spreadsheet.costpercapita_bw181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(709.0538869475441,r[:number])
end

def test_costpercapita_bx181
  r = spreadsheet.costpercapita_bx181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(770.969385330899,r[:number])
end

def test_costpercapita_by181
  r = spreadsheet.costpercapita_by181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(833.0497761060357,r[:number])
end

def test_costpercapita_bz181
  r = spreadsheet.costpercapita_bz181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(899.2750880823761,r[:number])
end

def test_costpercapita_ca181
  r = spreadsheet.costpercapita_ca181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(968.9293208597487,r[:number])
end

def test_costpercapita_cc181
  r = spreadsheet.costpercapita_cc181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(663.9323601266086,r[:number])
end

def test_costpercapita_cd181
  r = spreadsheet.costpercapita_cd181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13304.870274526345,r[:number])
end

def test_costpercapita_cf181
  r = spreadsheet.costpercapita_cf181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-205.01039658861706,r[:number])
end

def test_costpercapita_cg181
  r = spreadsheet.costpercapita_cg181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-53.2701295991428,r[:number])
end

def test_costpercapita_ch181
  r = spreadsheet.costpercapita_ch181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.1752378288121,r[:number])
end

def test_costpercapita_ci181
  r = spreadsheet.costpercapita_ci181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(183.95222279594785,r[:number])
end

def test_costpercapita_cj181
  r = spreadsheet.costpercapita_cj181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(194.77020484153172,r[:number])
end

def test_costpercapita_ck181
  r = spreadsheet.costpercapita_ck181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215.90029366318697,r[:number])
end

def test_costpercapita_cl181
  r = spreadsheet.costpercapita_cl181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(239.4633834928414,r[:number])
end

def test_costpercapita_cm181
  r = spreadsheet.costpercapita_cm181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(260.8469902693745,r[:number])
end

def test_costpercapita_cn181
  r = spreadsheet.costpercapita_cn181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(282.916217183955,r[:number])
end

def test_costpercapita_cp181
  r = spreadsheet.costpercapita_cp181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(137.30489154309885,r[:number])
end

def test_costpercapita_cq181
  r = spreadsheet.costpercapita_cq181
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2680.1516346528824,r[:number])
end

def test_costpercapita_cr181
  r = spreadsheet.costpercapita_cr181
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c182
  r = spreadsheet.costpercapita_c182
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e182
  r = spreadsheet.costpercapita_e182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(990.9904910875858,r[:number])
end

def test_costpercapita_f182
  r = spreadsheet.costpercapita_f182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(936.1514928623694,r[:number])
end

def test_costpercapita_g182
  r = spreadsheet.costpercapita_g182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(976.0595338827117,r[:number])
end

def test_costpercapita_h182
  r = spreadsheet.costpercapita_h182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1011.6129785395863,r[:number])
end

def test_costpercapita_i182
  r = spreadsheet.costpercapita_i182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1007.8097514305508,r[:number])
end

def test_costpercapita_j182
  r = spreadsheet.costpercapita_j182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1009.162244599367,r[:number])
end

def test_costpercapita_k182
  r = spreadsheet.costpercapita_k182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(988.2153205878293,r[:number])
end

def test_costpercapita_l182
  r = spreadsheet.costpercapita_l182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(963.7716982243644,r[:number])
end

def test_costpercapita_m182
  r = spreadsheet.costpercapita_m182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(937.8029344688514,r[:number])
end

def test_costpercapita_o182
  r = spreadsheet.costpercapita_o182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1174.401543588274,r[:number])
end

def test_costpercapita_p182
  r = spreadsheet.costpercapita_p182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1165.7447881590565,r[:number])
end

def test_costpercapita_q182
  r = spreadsheet.costpercapita_q182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1185.6969278812494,r[:number])
end

def test_costpercapita_r182
  r = spreadsheet.costpercapita_r182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1213.624834020653,r[:number])
end

def test_costpercapita_s182
  r = spreadsheet.costpercapita_s182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1229.7828725336726,r[:number])
end

def test_costpercapita_t182
  r = spreadsheet.costpercapita_t182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1241.8068080580576,r[:number])
end

def test_costpercapita_u182
  r = spreadsheet.costpercapita_u182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1239.281750148546,r[:number])
end

def test_costpercapita_v182
  r = spreadsheet.costpercapita_v182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1229.9585826618304,r[:number])
end

def test_costpercapita_w182
  r = spreadsheet.costpercapita_w182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1215.1014991042418,r[:number])
end

def test_costpercapita_y182
  r = spreadsheet.costpercapita_y182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z182
  r = spreadsheet.costpercapita_z182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa182
  r = spreadsheet.costpercapita_aa182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab182
  r = spreadsheet.costpercapita_ab182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac182
  r = spreadsheet.costpercapita_ac182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad182
  r = spreadsheet.costpercapita_ad182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae182
  r = spreadsheet.costpercapita_ae182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af182
  r = spreadsheet.costpercapita_af182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag182
  r = spreadsheet.costpercapita_ag182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai182
  r = spreadsheet.costpercapita_ai182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2165.39203467586,r[:number])
end

def test_costpercapita_aj182
  r = spreadsheet.costpercapita_aj182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2101.896281021426,r[:number])
end

def test_costpercapita_ak182
  r = spreadsheet.costpercapita_ak182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2161.7564617639605,r[:number])
end

def test_costpercapita_al182
  r = spreadsheet.costpercapita_al182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2225.237812560239,r[:number])
end

def test_costpercapita_am182
  r = spreadsheet.costpercapita_am182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2237.592623964223,r[:number])
end

def test_costpercapita_an182
  r = spreadsheet.costpercapita_an182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2250.9690526574245,r[:number])
end

def test_costpercapita_ao182
  r = spreadsheet.costpercapita_ao182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2227.497070736375,r[:number])
end

def test_costpercapita_ap182
  r = spreadsheet.costpercapita_ap182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2193.7302808861946,r[:number])
end

def test_costpercapita_aq182
  r = spreadsheet.costpercapita_aq182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2152.9044335730932,r[:number])
end

def test_costpercapita_as182
  r = spreadsheet.costpercapita_as182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2190.7751168709774,r[:number])
end

def test_costpercapita_at182
  r = spreadsheet.costpercapita_at182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45895.65616736728,r[:number])
end

def test_costpercapita_ay182
  r = spreadsheet.costpercapita_ay182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(326.41628715368284,r[:number])
end

def test_costpercapita_az182
  r = spreadsheet.costpercapita_az182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(513.9220091105542,r[:number])
end

def test_costpercapita_ba182
  r = spreadsheet.costpercapita_ba182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(535.8304510424583,r[:number])
end

def test_costpercapita_bb182
  r = spreadsheet.costpercapita_bb182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(555.3483366071061,r[:number])
end

def test_costpercapita_bc182
  r = spreadsheet.costpercapita_bc182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(553.26046714166,r[:number])
end

def test_costpercapita_bd182
  r = spreadsheet.costpercapita_bd182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(554.0029495410643,r[:number])
end

def test_costpercapita_be182
  r = spreadsheet.costpercapita_be182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(542.5036512386278,r[:number])
end

def test_costpercapita_bf182
  r = spreadsheet.costpercapita_bf182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.0847595199789,r[:number])
end

def test_costpercapita_bg182
  r = spreadsheet.costpercapita_bg182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(514.8286061675507,r[:number])
end

def test_costpercapita_bi182
  r = spreadsheet.costpercapita_bi182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(326.41628715368284,r[:number])
end

def test_costpercapita_bj182
  r = spreadsheet.costpercapita_bj182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(829.5746965906756,r[:number])
end

def test_costpercapita_bk182
  r = spreadsheet.costpercapita_bk182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1338.2464064089445,r[:number])
end

def test_costpercapita_bl182
  r = spreadsheet.costpercapita_bl182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1556.2929129177373,r[:number])
end

def test_costpercapita_bm182
  r = spreadsheet.costpercapita_bm182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1598.4901839916438,r[:number])
end

def test_costpercapita_bn182
  r = spreadsheet.costpercapita_bn182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1621.6828917170626,r[:number])
end

def test_costpercapita_bo182
  r = spreadsheet.costpercapita_bo182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1613.3986400836177,r[:number])
end

def test_costpercapita_bp182
  r = spreadsheet.costpercapita_bp182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1592.1391299358174,r[:number])
end

def test_costpercapita_bq182
  r = spreadsheet.costpercapita_bq182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1555.7994493695755,r[:number])
end

def test_costpercapita_bs182
  r = spreadsheet.costpercapita_bs182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1500.817830741957,r[:number])
end

def test_costpercapita_bt182
  r = spreadsheet.costpercapita_bt182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1995.319484749732,r[:number])
end

def test_costpercapita_bu182
  r = spreadsheet.costpercapita_bu182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2523.9433342901943,r[:number])
end

def test_costpercapita_bv182
  r = spreadsheet.costpercapita_bv182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2769.917746938391,r[:number])
end

def test_costpercapita_bw182
  r = spreadsheet.costpercapita_bw182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2828.2730565253164,r[:number])
end

def test_costpercapita_bx182
  r = spreadsheet.costpercapita_bx182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2863.48969977512,r[:number])
end

def test_costpercapita_by182
  r = spreadsheet.costpercapita_by182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2852.6803902321635,r[:number])
end

def test_costpercapita_bz182
  r = spreadsheet.costpercapita_bz182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2822.0977125976474,r[:number])
end

def test_costpercapita_ca182
  r = spreadsheet.costpercapita_ca182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2770.9009484738167,r[:number])
end

def test_costpercapita_cc182
  r = spreadsheet.costpercapita_cc182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2547.4933560360378,r[:number])
end

def test_costpercapita_cd182
  r = spreadsheet.costpercapita_cd182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53370.43811282675,r[:number])
end

def test_costpercapita_cf182
  r = spreadsheet.costpercapita_cf182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-664.574203933903,r[:number])
end

def test_costpercapita_cg182
  r = spreadsheet.costpercapita_cg182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-106.57679627169401,r[:number])
end

def test_costpercapita_ch182
  r = spreadsheet.costpercapita_ch182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(362.18687252623323,r[:number])
end

def test_costpercapita_ci182
  r = spreadsheet.costpercapita_ci182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(544.6799343781513,r[:number])
end

def test_costpercapita_cj182
  r = spreadsheet.costpercapita_cj182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(590.6804325610929,r[:number])
end

def test_costpercapita_ck182
  r = spreadsheet.costpercapita_ck182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(612.5206471176955,r[:number])
end

def test_costpercapita_cl182
  r = spreadsheet.costpercapita_cl182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(625.1833194957884,r[:number])
end

def test_costpercapita_cm182
  r = spreadsheet.costpercapita_cm182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(628.3674317114532,r[:number])
end

def test_costpercapita_cn182
  r = spreadsheet.costpercapita_cn182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(617.996514900724,r[:number])
end

def test_costpercapita_cp182
  r = spreadsheet.costpercapita_cp182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(356.7182391650601,r[:number])
end

def test_costpercapita_cq182
  r = spreadsheet.costpercapita_cq182
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7474.781945459457,r[:number])
end

def test_costpercapita_cr182
  r = spreadsheet.costpercapita_cr182
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c183
  r = spreadsheet.costpercapita_c183
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e183
  r = spreadsheet.costpercapita_e183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.552297448817079,r[:number])
end

def test_costpercapita_f183
  r = spreadsheet.costpercapita_f183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.146562356901544,r[:number])
end

def test_costpercapita_g183
  r = spreadsheet.costpercapita_g183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.800700172811871,r[:number])
end

def test_costpercapita_h183
  r = spreadsheet.costpercapita_h183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.493374938973205,r[:number])
end

def test_costpercapita_i183
  r = spreadsheet.costpercapita_i183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.25356835628611,r[:number])
end

def test_costpercapita_j183
  r = spreadsheet.costpercapita_j183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0678511933775083,r[:number])
end

def test_costpercapita_k183
  r = spreadsheet.costpercapita_k183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.919823220851967,r[:number])
end

def test_costpercapita_l183
  r = spreadsheet.costpercapita_l183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.798938097813601,r[:number])
end

def test_costpercapita_m183
  r = spreadsheet.costpercapita_m183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6991394086203893,r[:number])
end

def test_costpercapita_o183
  r = spreadsheet.costpercapita_o183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.161930899585185,r[:number])
end

def test_costpercapita_p183
  r = spreadsheet.costpercapita_p183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.144781371707587,r[:number])
end

def test_costpercapita_q183
  r = spreadsheet.costpercapita_q183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.224852574354598,r[:number])
end

def test_costpercapita_r183
  r = spreadsheet.costpercapita_r183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.48728657713034,r[:number])
end

def test_costpercapita_s183
  r = spreadsheet.costpercapita_s183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.911253849508986,r[:number])
end

def test_costpercapita_t183
  r = spreadsheet.costpercapita_t183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.461954391926094,r[:number])
end

def test_costpercapita_u183
  r = spreadsheet.costpercapita_u183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.100207472750888,r[:number])
end

def test_costpercapita_v183
  r = spreadsheet.costpercapita_v183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.801149203940404,r[:number])
end

def test_costpercapita_w183
  r = spreadsheet.costpercapita_w183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.551175130946535,r[:number])
end

def test_costpercapita_y183
  r = spreadsheet.costpercapita_y183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z183
  r = spreadsheet.costpercapita_z183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa183
  r = spreadsheet.costpercapita_aa183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab183
  r = spreadsheet.costpercapita_ab183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac183
  r = spreadsheet.costpercapita_ac183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad183
  r = spreadsheet.costpercapita_ad183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae183
  r = spreadsheet.costpercapita_ae183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af183
  r = spreadsheet.costpercapita_af183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag183
  r = spreadsheet.costpercapita_ag183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai183
  r = spreadsheet.costpercapita_ai183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.714228348402266,r[:number])
end

def test_costpercapita_aj183
  r = spreadsheet.costpercapita_aj183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.291343728609132,r[:number])
end

def test_costpercapita_ak183
  r = spreadsheet.costpercapita_ak183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.025552747166468,r[:number])
end

def test_costpercapita_al183
  r = spreadsheet.costpercapita_al183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.980661516103545,r[:number])
end

def test_costpercapita_am183
  r = spreadsheet.costpercapita_am183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.164822205795096,r[:number])
end

def test_costpercapita_an183
  r = spreadsheet.costpercapita_an183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.5298055853036,r[:number])
end

def test_costpercapita_ao183
  r = spreadsheet.costpercapita_ao183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.020030693602857,r[:number])
end

def test_costpercapita_ap183
  r = spreadsheet.costpercapita_ap183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.600087301754005,r[:number])
end

def test_costpercapita_aq183
  r = spreadsheet.costpercapita_aq183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.250314539566924,r[:number])
end

def test_costpercapita_as183
  r = spreadsheet.costpercapita_as183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.730760740700434,r[:number])
end

def test_costpercapita_at183
  r = spreadsheet.costpercapita_at183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(274.01252390555754,r[:number])
end

def test_costpercapita_ay183
  r = spreadsheet.costpercapita_ay183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606618,r[:number])
end

def test_costpercapita_az183
  r = spreadsheet.costpercapita_az183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2763512888766306,r[:number])
end

def test_costpercapita_ba183
  r = spreadsheet.costpercapita_ba183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0864822453746497,r[:number])
end

def test_costpercapita_bb183
  r = spreadsheet.costpercapita_bb183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9177689518223227,r[:number])
end

def test_costpercapita_bc183
  r = spreadsheet.costpercapita_bc183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7861215830875206,r[:number])
end

def test_costpercapita_bd183
  r = spreadsheet.costpercapita_bd183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6841678520770926,r[:number])
end

def test_costpercapita_be183
  r = spreadsheet.costpercapita_be183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.602904473633629,r[:number])
end

def test_costpercapita_bf183
  r = spreadsheet.costpercapita_bf183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5365417900539668,r[:number])
end

def test_costpercapita_bg183
  r = spreadsheet.costpercapita_bg183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4817549919258615,r[:number])
end

def test_costpercapita_bi183
  r = spreadsheet.costpercapita_bi183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.4994533697606618,r[:number])
end

def test_costpercapita_bj183
  r = spreadsheet.costpercapita_bj183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.726360079930723,r[:number])
end

def test_costpercapita_bk183
  r = spreadsheet.costpercapita_bk183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6908481883881,r[:number])
end

def test_costpercapita_bl183
  r = spreadsheet.costpercapita_bl183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.073297976593122,r[:number])
end

def test_costpercapita_bm183
  r = spreadsheet.costpercapita_bm183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.618136295612382,r[:number])
end

def test_costpercapita_bn183
  r = spreadsheet.costpercapita_bn183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.249651097877794,r[:number])
end

def test_costpercapita_bo183
  r = spreadsheet.costpercapita_bo183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.958009111399689,r[:number])
end

def test_costpercapita_bp183
  r = spreadsheet.costpercapita_bp183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.722843102107809,r[:number])
end

def test_costpercapita_bq183
  r = spreadsheet.costpercapita_bq183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.53123582374163,r[:number])
end

def test_costpercapita_bs183
  r = spreadsheet.costpercapita_bs183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.661384269345847,r[:number])
end

def test_costpercapita_bt183
  r = spreadsheet.costpercapita_bt183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.87114145163831,r[:number])
end

def test_costpercapita_bu183
  r = spreadsheet.costpercapita_bu183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.915700762742697,r[:number])
end

def test_costpercapita_bv183
  r = spreadsheet.costpercapita_bv183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.560584553723462,r[:number])
end

def test_costpercapita_bw183
  r = spreadsheet.costpercapita_bw183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.529390145121367,r[:number])
end

def test_costpercapita_bx183
  r = spreadsheet.costpercapita_bx183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.711605489803887,r[:number])
end

def test_costpercapita_by183
  r = spreadsheet.costpercapita_by183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.058216584150578,r[:number])
end

def test_costpercapita_bz183
  r = spreadsheet.costpercapita_bz183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.523992306048212,r[:number])
end

def test_costpercapita_ca183
  r = spreadsheet.costpercapita_ca183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.082410954688166,r[:number])
end

def test_costpercapita_cc183
  r = spreadsheet.costpercapita_cc183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.990491835251394,r[:number])
end

def test_costpercapita_cd183
  r = spreadsheet.costpercapita_cd183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(303.16366951927455,r[:number])
end

def test_costpercapita_cf183
  r = spreadsheet.costpercapita_cf183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-3.0528440790564164,r[:number])
end

def test_costpercapita_cg183
  r = spreadsheet.costpercapita_cg183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.42020227697082163,r[:number])
end

def test_costpercapita_ch183
  r = spreadsheet.costpercapita_ch183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.8901480155762285,r[:number])
end

def test_costpercapita_ci183
  r = spreadsheet.costpercapita_ci183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.579923037619917,r[:number])
end

def test_costpercapita_cj183
  r = spreadsheet.costpercapita_cj183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3645679393262724,r[:number])
end

def test_costpercapita_ck183
  r = spreadsheet.costpercapita_ck183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1817999045002856,r[:number])
end

def test_costpercapita_cl183
  r = spreadsheet.costpercapita_cl183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.038185890547722,r[:number])
end

def test_costpercapita_cm183
  r = spreadsheet.costpercapita_cm183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9239050042942083,r[:number])
end

def test_costpercapita_cn183
  r = spreadsheet.costpercapita_cn183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.832096415121241,r[:number])
end

def test_costpercapita_cp183
  r = spreadsheet.costpercapita_cp183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2597310945509597,r[:number])
end

def test_costpercapita_cq183
  r = spreadsheet.costpercapita_cq183
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.151145613717016,r[:number])
end

def test_costpercapita_cr183
  r = spreadsheet.costpercapita_cr183
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c184
  r = spreadsheet.costpercapita_c184
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e184
  r = spreadsheet.costpercapita_e184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f184
  r = spreadsheet.costpercapita_f184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9973400336412321,r[:number])
end

def test_costpercapita_g184
  r = spreadsheet.costpercapita_g184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.55110593014311,r[:number])
end

def test_costpercapita_h184
  r = spreadsheet.costpercapita_h184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.317466624915646,r[:number])
end

def test_costpercapita_i184
  r = spreadsheet.costpercapita_i184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.113064079488405,r[:number])
end

def test_costpercapita_j184
  r = spreadsheet.costpercapita_j184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.9351933136393593,r[:number])
end

def test_costpercapita_k184
  r = spreadsheet.costpercapita_k184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8425442246299073,r[:number])
end

def test_costpercapita_l184
  r = spreadsheet.costpercapita_l184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.691574493903866,r[:number])
end

def test_costpercapita_m184
  r = spreadsheet.costpercapita_m184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5525935205169614,r[:number])
end

def test_costpercapita_o184
  r = spreadsheet.costpercapita_o184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p184
  r = spreadsheet.costpercapita_p184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06106153817131767,r[:number])
end

def test_costpercapita_q184
  r = spreadsheet.costpercapita_q184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13913380986437507,r[:number])
end

def test_costpercapita_r184
  r = spreadsheet.costpercapita_r184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13199112253313547,r[:number])
end

def test_costpercapita_s184
  r = spreadsheet.costpercapita_s184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12574224471578838,r[:number])
end

def test_costpercapita_t184
  r = spreadsheet.costpercapita_t184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12030448130268898,r[:number])
end

def test_costpercapita_u184
  r = spreadsheet.costpercapita_u184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11747206629582857,r[:number])
end

def test_costpercapita_v184
  r = spreadsheet.costpercapita_v184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11285670595648963,r[:number])
end

def test_costpercapita_w184
  r = spreadsheet.costpercapita_w184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.10860785905580425,r[:number])
end

def test_costpercapita_y184
  r = spreadsheet.costpercapita_y184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z184
  r = spreadsheet.costpercapita_z184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa184
  r = spreadsheet.costpercapita_aa184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab184
  r = spreadsheet.costpercapita_ab184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac184
  r = spreadsheet.costpercapita_ac184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad184
  r = spreadsheet.costpercapita_ad184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae184
  r = spreadsheet.costpercapita_ae184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af184
  r = spreadsheet.costpercapita_af184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag184
  r = spreadsheet.costpercapita_ag184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai184
  r = spreadsheet.costpercapita_ai184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj184
  r = spreadsheet.costpercapita_aj184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.05840157181255,r[:number])
end

def test_costpercapita_ak184
  r = spreadsheet.costpercapita_ak184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.690239740007485,r[:number])
end

def test_costpercapita_al184
  r = spreadsheet.costpercapita_al184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.449457747448781,r[:number])
end

def test_costpercapita_am184
  r = spreadsheet.costpercapita_am184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.238806324204194,r[:number])
end

def test_costpercapita_an184
  r = spreadsheet.costpercapita_an184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.055497794942049,r[:number])
end

def test_costpercapita_ao184
  r = spreadsheet.costpercapita_ao184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.960016290925736,r[:number])
end

def test_costpercapita_ap184
  r = spreadsheet.costpercapita_ap184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8044311998603555,r[:number])
end

def test_costpercapita_aq184
  r = spreadsheet.costpercapita_aq184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.661201379572766,r[:number])
end

def test_costpercapita_as184
  r = spreadsheet.costpercapita_as184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.4353391165304354,r[:number])
end

def test_costpercapita_at184
  r = spreadsheet.costpercapita_at184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.55495016927064,r[:number])
end

def test_costpercapita_ay184
  r = spreadsheet.costpercapita_ay184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az184
  r = spreadsheet.costpercapita_az184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.096485996969674,r[:number])
end

def test_costpercapita_ba184
  r = spreadsheet.costpercapita_ba184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4984348378729395,r[:number])
end

def test_costpercapita_bb184
  r = spreadsheet.costpercapita_bb184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.3701731387086733,r[:number])
end

def test_costpercapita_bc184
  r = spreadsheet.costpercapita_bc184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2579616348931015,r[:number])
end

def test_costpercapita_bd184
  r = spreadsheet.costpercapita_bd184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.160315364984718,r[:number])
end

def test_costpercapita_be184
  r = spreadsheet.costpercapita_be184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1094535052013037,r[:number])
end

def test_costpercapita_bf184
  r = spreadsheet.costpercapita_bf184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.0265751805699153,r[:number])
end

def test_costpercapita_bg184
  r = spreadsheet.costpercapita_bg184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.9502783615019366,r[:number])
end

def test_costpercapita_bi184
  r = spreadsheet.costpercapita_bi184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj184
  r = spreadsheet.costpercapita_bj184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.096485996969674,r[:number])
end

def test_costpercapita_bk184
  r = spreadsheet.costpercapita_bk184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.5590239113105544,r[:number])
end

def test_costpercapita_bl184
  r = spreadsheet.costpercapita_bl184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.818997303000389,r[:number])
end

def test_costpercapita_bm184
  r = spreadsheet.costpercapita_bm184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.918311765330572,r[:number])
end

def test_costpercapita_bn184
  r = spreadsheet.costpercapita_bn184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.616203024233996,r[:number])
end

def test_costpercapita_bo184
  r = spreadsheet.costpercapita_bo184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.381451070534397,r[:number])
end

def test_costpercapita_bp184
  r = spreadsheet.costpercapita_bp184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.166018335319414,r[:number])
end

def test_costpercapita_bq184
  r = spreadsheet.costpercapita_bq184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.967827625244577,r[:number])
end

def test_costpercapita_bs184
  r = spreadsheet.costpercapita_bs184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt184
  r = spreadsheet.costpercapita_bt184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1575475351409916,r[:number])
end

def test_costpercapita_bu184
  r = spreadsheet.costpercapita_bu184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.6981577211749297,r[:number])
end

def test_costpercapita_bv184
  r = spreadsheet.costpercapita_bv184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.950988425533524,r[:number])
end

def test_costpercapita_bw184
  r = spreadsheet.costpercapita_bw184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.04405401004636,r[:number])
end

def test_costpercapita_bx184
  r = spreadsheet.costpercapita_bx184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.736507505536685,r[:number])
end

def test_costpercapita_by184
  r = spreadsheet.costpercapita_by184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.498923136830226,r[:number])
end

def test_costpercapita_bz184
  r = spreadsheet.costpercapita_bz184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.278875041275904,r[:number])
end

def test_costpercapita_ca184
  r = spreadsheet.costpercapita_ca184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.076435484300382,r[:number])
end

def test_costpercapita_cc184
  r = spreadsheet.costpercapita_cc184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.826832095537667,r[:number])
end

def test_costpercapita_cd184
  r = spreadsheet.costpercapita_cd184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.97518739066041,r[:number])
end

def test_costpercapita_cf184
  r = spreadsheet.costpercapita_cf184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg184
  r = spreadsheet.costpercapita_cg184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9008540366715582,r[:number])
end

def test_costpercapita_ch184
  r = spreadsheet.costpercapita_ch184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.9920820188325553,r[:number])
end

def test_costpercapita_ci184
  r = spreadsheet.costpercapita_ci184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.5015306780847428,r[:number])
end

def test_costpercapita_cj184
  r = spreadsheet.costpercapita_cj184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.8052476858421675,r[:number])
end

def test_costpercapita_ck184
  r = spreadsheet.costpercapita_ck184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6810097105946364,r[:number])
end

def test_costpercapita_cl184
  r = spreadsheet.costpercapita_cl184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5389068459044903,r[:number])
end

def test_costpercapita_cm184
  r = spreadsheet.costpercapita_cm184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.4744438414155483,r[:number])
end

def test_costpercapita_cn184
  r = spreadsheet.costpercapita_cn184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.415234104727616,r[:number])
end

def test_costpercapita_cp184
  r = spreadsheet.costpercapita_cp184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.3914929790072321,r[:number])
end

def test_costpercapita_cq184
  r = spreadsheet.costpercapita_cq184
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.42023722138976,r[:number])
end

def test_costpercapita_cr184
  r = spreadsheet.costpercapita_cr184
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c185
  r = spreadsheet.costpercapita_c185
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e185
  r = spreadsheet.costpercapita_e185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1434.1584087879862,r[:number])
end

def test_costpercapita_f185
  r = spreadsheet.costpercapita_f185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1436.0660093497709,r[:number])
end

def test_costpercapita_g185
  r = spreadsheet.costpercapita_g185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1496.1600620670204,r[:number])
end

def test_costpercapita_h185
  r = spreadsheet.costpercapita_h185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1568.5432699472985,r[:number])
end

def test_costpercapita_i185
  r = spreadsheet.costpercapita_i185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1568.8357405216746,r[:number])
end

def test_costpercapita_j185
  r = spreadsheet.costpercapita_j185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1615.583956733518,r[:number])
end

def test_costpercapita_k185
  r = spreadsheet.costpercapita_k185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1662.7788305504607,r[:number])
end

def test_costpercapita_l185
  r = spreadsheet.costpercapita_l185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1687.1803279507712,r[:number])
end

def test_costpercapita_m185
  r = spreadsheet.costpercapita_m185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1709.9350401585914,r[:number])
end

def test_costpercapita_o185
  r = spreadsheet.costpercapita_o185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1462.4371583529376,r[:number])
end

def test_costpercapita_p185
  r = spreadsheet.costpercapita_p185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1447.6929603050062,r[:number])
end

def test_costpercapita_q185
  r = spreadsheet.costpercapita_q185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1470.856435062944,r[:number])
end

def test_costpercapita_r185
  r = spreadsheet.costpercapita_r185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1505.0929322653265,r[:number])
end

def test_costpercapita_s185
  r = spreadsheet.costpercapita_s185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1525.7843675278966,r[:number])
end

def test_costpercapita_t185
  r = spreadsheet.costpercapita_t185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1542.2038688080297,r[:number])
end

def test_costpercapita_u185
  r = spreadsheet.costpercapita_u185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1547.531818680111,r[:number])
end

def test_costpercapita_v185
  r = spreadsheet.costpercapita_v185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1546.9191421270218,r[:number])
end

def test_costpercapita_w185
  r = spreadsheet.costpercapita_w185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1542.1971691642457,r[:number])
end

def test_costpercapita_y185
  r = spreadsheet.costpercapita_y185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(747.3510211928906,r[:number])
end

def test_costpercapita_z185
  r = spreadsheet.costpercapita_z185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(829.5002706904613,r[:number])
end

def test_costpercapita_aa185
  r = spreadsheet.costpercapita_aa185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(930.7975724433373,r[:number])
end

def test_costpercapita_ab185
  r = spreadsheet.costpercapita_ab185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1029.9491300960985,r[:number])
end

def test_costpercapita_ac185
  r = spreadsheet.costpercapita_ac185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1135.7652101814951,r[:number])
end

def test_costpercapita_ad185
  r = spreadsheet.costpercapita_ad185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1169.6592417771055,r[:number])
end

def test_costpercapita_ae185
  r = spreadsheet.costpercapita_ae185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1194.8734945256822,r[:number])
end

def test_costpercapita_af185
  r = spreadsheet.costpercapita_af185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1224.2370034753933,r[:number])
end

def test_costpercapita_ag185
  r = spreadsheet.costpercapita_ag185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1242.8763567025014,r[:number])
end

def test_costpercapita_ai185
  r = spreadsheet.costpercapita_ai185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3643.9465883338144,r[:number])
end

def test_costpercapita_aj185
  r = spreadsheet.costpercapita_aj185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3713.259240345239,r[:number])
end

def test_costpercapita_ak185
  r = spreadsheet.costpercapita_ak185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3897.8140695733005,r[:number])
end

def test_costpercapita_al185
  r = spreadsheet.costpercapita_al185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4103.585332308723,r[:number])
end

def test_costpercapita_am185
  r = spreadsheet.costpercapita_am185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4230.385318231066,r[:number])
end

def test_costpercapita_an185
  r = spreadsheet.costpercapita_an185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4327.447067318654,r[:number])
end

def test_costpercapita_ao185
  r = spreadsheet.costpercapita_ao185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4405.1841437562525,r[:number])
end

def test_costpercapita_ap185
  r = spreadsheet.costpercapita_ap185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4458.336473553186,r[:number])
end

def test_costpercapita_aq185
  r = spreadsheet.costpercapita_aq185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4495.008566025339,r[:number])
end

def test_costpercapita_as185
  r = spreadsheet.costpercapita_as185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4141.662977716175,r[:number])
end

def test_costpercapita_at185
  r = spreadsheet.costpercapita_at185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85781.83918039213,r[:number])
end

def test_costpercapita_ay185
  r = spreadsheet.costpercapita_ay185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.38865276400884,r[:number])
end

def test_costpercapita_az185
  r = spreadsheet.costpercapita_az185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(788.3616427121513,r[:number])
end

def test_costpercapita_ba185
  r = spreadsheet.costpercapita_ba185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(821.3516625364155,r[:number])
end

def test_costpercapita_bb185
  r = spreadsheet.costpercapita_bb185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.088098255766,r[:number])
end

def test_costpercapita_bc185
  r = spreadsheet.costpercapita_bc185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(861.2486567405144,r[:number])
end

def test_costpercapita_bd185
  r = spreadsheet.costpercapita_bd185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(886.9121710126191,r[:number])
end

def test_costpercapita_be185
  r = spreadsheet.costpercapita_be185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(912.8208883053319,r[:number])
end

def test_costpercapita_bf185
  r = spreadsheet.costpercapita_bf185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(926.2166545513801,r[:number])
end

def test_costpercapita_bg185
  r = spreadsheet.costpercapita_bg185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(938.7083799865653,r[:number])
end

def test_costpercapita_bi185
  r = spreadsheet.costpercapita_bi185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(472.38865276400884,r[:number])
end

def test_costpercapita_bj185
  r = spreadsheet.costpercapita_bj185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1245.1732469378594,r[:number])
end

def test_costpercapita_bk185
  r = spreadsheet.costpercapita_bk185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.7602403831743,r[:number])
end

def test_costpercapita_bl185
  r = spreadsheet.costpercapita_bl185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2395.948736019316,r[:number])
end

def test_costpercapita_bm185
  r = spreadsheet.costpercapita_bm185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2472.9868076686785,r[:number])
end

def test_costpercapita_bn185
  r = spreadsheet.costpercapita_bn185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2545.7071757678077,r[:number])
end

def test_costpercapita_bo185
  r = spreadsheet.costpercapita_bo185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2603.84510666057,r[:number])
end

def test_costpercapita_bp185
  r = spreadsheet.costpercapita_bp185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2671.511449244992,r[:number])
end

def test_costpercapita_bq185
  r = spreadsheet.costpercapita_bq185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2725.5572175454795,r[:number])
end

def test_costpercapita_bs185
  r = spreadsheet.costpercapita_bs185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2682.176832309837,r[:number])
end

def test_costpercapita_bt185
  r = spreadsheet.costpercapita_bt185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3522.366477933327,r[:number])
end

def test_costpercapita_bu185
  r = spreadsheet.costpercapita_bu185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4427.4142478894555,r[:number])
end

def test_costpercapita_bv185
  r = spreadsheet.costpercapita_bv185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4930.9907983807425,r[:number])
end

def test_costpercapita_bw185
  r = spreadsheet.costpercapita_bw185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5134.53638537807,r[:number])
end

def test_costpercapita_bx185
  r = spreadsheet.costpercapita_bx185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5257.570286352943,r[:number])
end

def test_costpercapita_by185
  r = spreadsheet.costpercapita_by185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5346.250419866363,r[:number])
end

def test_costpercapita_bz185
  r = spreadsheet.costpercapita_bz185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5442.667594847407,r[:number])
end

def test_costpercapita_ca185
  r = spreadsheet.costpercapita_ca185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5510.630743412226,r[:number])
end

def test_costpercapita_cc185
  r = spreadsheet.costpercapita_cc185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4694.955976263374,r[:number])
end

def test_costpercapita_cd185
  r = spreadsheet.costpercapita_cd185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(97138.08402730901,r[:number])
end

def test_costpercapita_cf185
  r = spreadsheet.costpercapita_cf185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-961.7697560239774,r[:number])
end

def test_costpercapita_cg185
  r = spreadsheet.costpercapita_cg185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-190.89276241191192,r[:number])
end

def test_costpercapita_ch185
  r = spreadsheet.costpercapita_ch185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(529.6001783161545,r[:number])
end

def test_costpercapita_ci185
  r = spreadsheet.costpercapita_ci185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(827.4054660720176,r[:number])
end

def test_costpercapita_cj185
  r = spreadsheet.costpercapita_cj185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(904.1510671470041,r[:number])
end

def test_costpercapita_ck185
  r = spreadsheet.costpercapita_ck185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(930.1232190342895,r[:number])
end

def test_costpercapita_cl185
  r = spreadsheet.costpercapita_cl185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(941.0662761101089,r[:number])
end

def test_costpercapita_cm185
  r = spreadsheet.costpercapita_cm185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(984.3311212942212,r[:number])
end

def test_costpercapita_cn185
  r = spreadsheet.costpercapita_cn185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1015.622177386888,r[:number])
end

def test_costpercapita_cp185
  r = spreadsheet.costpercapita_cp185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(553.2929985471993,r[:number])
end

def test_costpercapita_cq185
  r = spreadsheet.costpercapita_cq185
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11356.24484691688,r[:number])
end

def test_costpercapita_cr185
  r = spreadsheet.costpercapita_cr185
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e186
  r = spreadsheet.costpercapita_e186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f186
  r = spreadsheet.costpercapita_f186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g186
  r = spreadsheet.costpercapita_g186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h186
  r = spreadsheet.costpercapita_h186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i186
  r = spreadsheet.costpercapita_i186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j186
  r = spreadsheet.costpercapita_j186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k186
  r = spreadsheet.costpercapita_k186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l186
  r = spreadsheet.costpercapita_l186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m186
  r = spreadsheet.costpercapita_m186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o186
  r = spreadsheet.costpercapita_o186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p186
  r = spreadsheet.costpercapita_p186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q186
  r = spreadsheet.costpercapita_q186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r186
  r = spreadsheet.costpercapita_r186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s186
  r = spreadsheet.costpercapita_s186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t186
  r = spreadsheet.costpercapita_t186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u186
  r = spreadsheet.costpercapita_u186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v186
  r = spreadsheet.costpercapita_v186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w186
  r = spreadsheet.costpercapita_w186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y186
  r = spreadsheet.costpercapita_y186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.1368683772161603e-13,r[:number])
end

def test_costpercapita_z186
  r = spreadsheet.costpercapita_z186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa186
  r = spreadsheet.costpercapita_aa186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab186
  r = spreadsheet.costpercapita_ab186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac186
  r = spreadsheet.costpercapita_ac186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad186
  r = spreadsheet.costpercapita_ad186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae186
  r = spreadsheet.costpercapita_ae186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af186
  r = spreadsheet.costpercapita_af186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag186
  r = spreadsheet.costpercapita_ag186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai186
  r = spreadsheet.costpercapita_ai186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj186
  r = spreadsheet.costpercapita_aj186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak186
  r = spreadsheet.costpercapita_ak186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al186
  r = spreadsheet.costpercapita_al186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am186
  r = spreadsheet.costpercapita_am186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an186
  r = spreadsheet.costpercapita_an186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao186
  r = spreadsheet.costpercapita_ao186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap186
  r = spreadsheet.costpercapita_ap186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq186
  r = spreadsheet.costpercapita_aq186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as186
  r = spreadsheet.costpercapita_as186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at186
  r = spreadsheet.costpercapita_at186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay186
  r = spreadsheet.costpercapita_ay186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_az186
  r = spreadsheet.costpercapita_az186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ba186
  r = spreadsheet.costpercapita_ba186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bb186
  r = spreadsheet.costpercapita_bb186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bc186
  r = spreadsheet.costpercapita_bc186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1368683772161603e-13,r[:number])
end

def test_costpercapita_bd186
  r = spreadsheet.costpercapita_bd186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_be186
  r = spreadsheet.costpercapita_be186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bf186
  r = spreadsheet.costpercapita_bf186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bg186
  r = spreadsheet.costpercapita_bg186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi186
  r = spreadsheet.costpercapita_bi186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bj186
  r = spreadsheet.costpercapita_bj186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bk186
  r = spreadsheet.costpercapita_bk186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bl186
  r = spreadsheet.costpercapita_bl186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bm186
  r = spreadsheet.costpercapita_bm186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bn186
  r = spreadsheet.costpercapita_bn186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bo186
  r = spreadsheet.costpercapita_bo186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bp186
  r = spreadsheet.costpercapita_bp186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bq186
  r = spreadsheet.costpercapita_bq186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs186
  r = spreadsheet.costpercapita_bs186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt186
  r = spreadsheet.costpercapita_bt186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu186
  r = spreadsheet.costpercapita_bu186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv186
  r = spreadsheet.costpercapita_bv186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw186
  r = spreadsheet.costpercapita_bw186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx186
  r = spreadsheet.costpercapita_bx186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by186
  r = spreadsheet.costpercapita_by186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz186
  r = spreadsheet.costpercapita_bz186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca186
  r = spreadsheet.costpercapita_ca186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc186
  r = spreadsheet.costpercapita_cc186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4694.917526120682,r[:number])
end

def test_costpercapita_cd186
  r = spreadsheet.costpercapita_cd186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf186
  r = spreadsheet.costpercapita_cf186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg186
  r = spreadsheet.costpercapita_cg186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch186
  r = spreadsheet.costpercapita_ch186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.1368683772161603e-13,r[:number])
end

def test_costpercapita_ci186
  r = spreadsheet.costpercapita_ci186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.2737367544323206e-13,r[:number])
end

def test_costpercapita_cj186
  r = spreadsheet.costpercapita_cj186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck186
  r = spreadsheet.costpercapita_ck186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.684341886080801e-13,r[:number])
end

def test_costpercapita_cl186
  r = spreadsheet.costpercapita_cl186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm186
  r = spreadsheet.costpercapita_cm186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-4.547473508864641e-13,r[:number])
end

def test_costpercapita_cn186
  r = spreadsheet.costpercapita_cn186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp186
  r = spreadsheet.costpercapita_cp186
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(553.294768182212,r[:number])
end

def test_costpercapita_cq186
  r = spreadsheet.costpercapita_cq186
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c188
  r = spreadsheet.costpercapita_c188
  assert_equal(:ExcelString,r[:type])
  assert_equal("£m",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e188
  r = spreadsheet.costpercapita_e188
  assert_equal(:ExcelString,r[:type])
  assert_equal("C1.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f188
  r = spreadsheet.costpercapita_f188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of capital costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o188
  r = spreadsheet.costpercapita_o188
  assert_equal(:ExcelString,r[:type])
  assert_equal("C2.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p188
  r = spreadsheet.costpercapita_p188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of operating costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y188
  r = spreadsheet.costpercapita_y188
  assert_equal(:ExcelString,r[:type])
  assert_equal("C3.High",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z188
  r = spreadsheet.costpercapita_z188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of fuel costs",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai188
  r = spreadsheet.costpercapita_ai188
  assert_equal(:ExcelString,r[:type])
  assert_equal("High estimate of total cost",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as188
  r = spreadsheet.costpercapita_as188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Cashflow capital basis",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av188
  r = spreadsheet.costpercapita_av188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Loan",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay188
  r = spreadsheet.costpercapita_ay188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for capital spent in that period",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi188
  r = spreadsheet.costpercapita_bi188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Repayments for outstanding capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_br188
  r = spreadsheet.costpercapita_br188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total cost (ammortised capital)",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca188
  r = spreadsheet.costpercapita_ca188
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(931767.7879709163,r[:number])
end

def test_costpercapita_cc188
  r = spreadsheet.costpercapita_cc188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Amortised Capital",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf188
  r = spreadsheet.costpercapita_cf188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp188
  r = spreadsheet.costpercapita_cp188
  assert_equal(:ExcelString,r[:type])
  assert_equal("Extra cost due to financing capital, compared with doing it out of cash",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c189
  r = spreadsheet.costpercapita_c189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Category",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e189
  r = spreadsheet.costpercapita_e189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f189
  r = spreadsheet.costpercapita_f189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g189
  r = spreadsheet.costpercapita_g189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h189
  r = spreadsheet.costpercapita_h189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i189
  r = spreadsheet.costpercapita_i189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j189
  r = spreadsheet.costpercapita_j189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k189
  r = spreadsheet.costpercapita_k189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l189
  r = spreadsheet.costpercapita_l189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m189
  r = spreadsheet.costpercapita_m189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o189
  r = spreadsheet.costpercapita_o189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p189
  r = spreadsheet.costpercapita_p189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q189
  r = spreadsheet.costpercapita_q189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_r189
  r = spreadsheet.costpercapita_r189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s189
  r = spreadsheet.costpercapita_s189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t189
  r = spreadsheet.costpercapita_t189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u189
  r = spreadsheet.costpercapita_u189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v189
  r = spreadsheet.costpercapita_v189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w189
  r = spreadsheet.costpercapita_w189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y189
  r = spreadsheet.costpercapita_y189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z189
  r = spreadsheet.costpercapita_z189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa189
  r = spreadsheet.costpercapita_aa189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab189
  r = spreadsheet.costpercapita_ab189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac189
  r = spreadsheet.costpercapita_ac189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad189
  r = spreadsheet.costpercapita_ad189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae189
  r = spreadsheet.costpercapita_ae189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af189
  r = spreadsheet.costpercapita_af189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag189
  r = spreadsheet.costpercapita_ag189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai189
  r = spreadsheet.costpercapita_ai189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj189
  r = spreadsheet.costpercapita_aj189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ak189
  r = spreadsheet.costpercapita_ak189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al189
  r = spreadsheet.costpercapita_al189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am189
  r = spreadsheet.costpercapita_am189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an189
  r = spreadsheet.costpercapita_an189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao189
  r = spreadsheet.costpercapita_ao189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap189
  r = spreadsheet.costpercapita_ap189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq189
  r = spreadsheet.costpercapita_aq189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as189
  r = spreadsheet.costpercapita_as189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at189
  r = spreadsheet.costpercapita_at189
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_av189
  r = spreadsheet.costpercapita_av189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Rate",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aw189
  r = spreadsheet.costpercapita_aw189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Years",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay189
  r = spreadsheet.costpercapita_ay189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_az189
  r = spreadsheet.costpercapita_az189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_ba189
  r = spreadsheet.costpercapita_ba189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bb189
  r = spreadsheet.costpercapita_bb189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bc189
  r = spreadsheet.costpercapita_bc189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bd189
  r = spreadsheet.costpercapita_bd189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_be189
  r = spreadsheet.costpercapita_be189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bf189
  r = spreadsheet.costpercapita_bf189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bg189
  r = spreadsheet.costpercapita_bg189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bi189
  r = spreadsheet.costpercapita_bi189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_costpercapita_bj189
  r = spreadsheet.costpercapita_bj189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2015.0,r[:number])
end

def test_costpercapita_bk189
  r = spreadsheet.costpercapita_bk189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2020.0,r[:number])
end

def test_costpercapita_bl189
  r = spreadsheet.costpercapita_bl189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2025.0,r[:number])
end

def test_costpercapita_bm189
  r = spreadsheet.costpercapita_bm189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2030.0,r[:number])
end

def test_costpercapita_bn189
  r = spreadsheet.costpercapita_bn189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2035.0,r[:number])
end

def test_costpercapita_bo189
  r = spreadsheet.costpercapita_bo189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2040.0,r[:number])
end

def test_costpercapita_bp189
  r = spreadsheet.costpercapita_bp189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2045.0,r[:number])
end

def test_costpercapita_bq189
  r = spreadsheet.costpercapita_bq189
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2050.0,r[:number])
end

def test_costpercapita_bs189
  r = spreadsheet.costpercapita_bs189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt189
  r = spreadsheet.costpercapita_bt189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu189
  r = spreadsheet.costpercapita_bu189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv189
  r = spreadsheet.costpercapita_bv189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw189
  r = spreadsheet.costpercapita_bw189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx189
  r = spreadsheet.costpercapita_bx189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by189
  r = spreadsheet.costpercapita_by189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz189
  r = spreadsheet.costpercapita_bz189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca189
  r = spreadsheet.costpercapita_ca189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc189
  r = spreadsheet.costpercapita_cc189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd189
  r = spreadsheet.costpercapita_cd189
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf189
  r = spreadsheet.costpercapita_cf189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2010",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg189
  r = spreadsheet.costpercapita_cg189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2015",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ch189
  r = spreadsheet.costpercapita_ch189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2020",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci189
  r = spreadsheet.costpercapita_ci189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2025",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj189
  r = spreadsheet.costpercapita_cj189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2030",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck189
  r = spreadsheet.costpercapita_ck189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2035",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cl189
  r = spreadsheet.costpercapita_cl189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2040",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm189
  r = spreadsheet.costpercapita_cm189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2045",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn189
  r = spreadsheet.costpercapita_cn189
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cp189
  r = spreadsheet.costpercapita_cp189
  assert_equal(:ExcelString,r[:type])
  assert_equal("Mean",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq189
  r = spreadsheet.costpercapita_cq189
  assert_equal(:ExcelString,r[:type])
  assert_equal("NPV",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c190
  r = spreadsheet.costpercapita_c190
  assert_equal(:ExcelString,r[:type])
  assert_equal("Fossil Fuels",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e190
  r = spreadsheet.costpercapita_e190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(42.94763451206937,r[:number])
end

def test_costpercapita_f190
  r = spreadsheet.costpercapita_f190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.84136020590303,r[:number])
end

def test_costpercapita_g190
  r = spreadsheet.costpercapita_g190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(25.081417736308573,r[:number])
end

def test_costpercapita_h190
  r = spreadsheet.costpercapita_h190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.29365579192016,r[:number])
end

def test_costpercapita_i190
  r = spreadsheet.costpercapita_i190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.67235064959203,r[:number])
end

def test_costpercapita_j190
  r = spreadsheet.costpercapita_j190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.754077896114104,r[:number])
end

def test_costpercapita_k190
  r = spreadsheet.costpercapita_k190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(56.548159322667914,r[:number])
end

def test_costpercapita_l190
  r = spreadsheet.costpercapita_l190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(65.54664845323366,r[:number])
end

def test_costpercapita_m190
  r = spreadsheet.costpercapita_m190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71.2321666925737,r[:number])
end

def test_costpercapita_o190
  r = spreadsheet.costpercapita_o190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.06306043679317243,r[:number])
end

def test_costpercapita_p190
  r = spreadsheet.costpercapita_p190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.11607507884389356,r[:number])
end

def test_costpercapita_q190
  r = spreadsheet.costpercapita_q190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12501254979578916,r[:number])
end

def test_costpercapita_r190
  r = spreadsheet.costpercapita_r190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13992077635107555,r[:number])
end

def test_costpercapita_s190
  r = spreadsheet.costpercapita_s190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1543218174354864,r[:number])
end

def test_costpercapita_t190
  r = spreadsheet.costpercapita_t190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16534813948791138,r[:number])
end

def test_costpercapita_u190
  r = spreadsheet.costpercapita_u190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.17424420813699407,r[:number])
end

def test_costpercapita_v190
  r = spreadsheet.costpercapita_v190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.18340207546488746,r[:number])
end

def test_costpercapita_w190
  r = spreadsheet.costpercapita_w190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.19058259144485315,r[:number])
end

def test_costpercapita_y190
  r = spreadsheet.costpercapita_y190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(737.7344410169293,r[:number])
end

def test_costpercapita_z190
  r = spreadsheet.costpercapita_z190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(917.6522470884813,r[:number])
end

def test_costpercapita_aa190
  r = spreadsheet.costpercapita_aa190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1113.9772996040494,r[:number])
end

def test_costpercapita_ab190
  r = spreadsheet.costpercapita_ab190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1316.0501045477722,r[:number])
end

def test_costpercapita_ac190
  r = spreadsheet.costpercapita_ac190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1527.9422516828458,r[:number])
end

def test_costpercapita_ad190
  r = spreadsheet.costpercapita_ad190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1576.3794742193181,r[:number])
end

def test_costpercapita_ae190
  r = spreadsheet.costpercapita_ae190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1612.624003550458,r[:number])
end

def test_costpercapita_af190
  r = spreadsheet.costpercapita_af190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1654.3620867750637,r[:number])
end

def test_costpercapita_ag190
  r = spreadsheet.costpercapita_ag190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1681.242136040575,r[:number])
end

def test_costpercapita_ai190
  r = spreadsheet.costpercapita_ai190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(780.7451359657919,r[:number])
end

def test_costpercapita_aj190
  r = spreadsheet.costpercapita_aj190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(934.6096823732282,r[:number])
end

def test_costpercapita_ak190
  r = spreadsheet.costpercapita_ak190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1139.1837298901537,r[:number])
end

def test_costpercapita_al190
  r = spreadsheet.costpercapita_al190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1353.4836811160435,r[:number])
end

def test_costpercapita_am190
  r = spreadsheet.costpercapita_am190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1573.7689241498733,r[:number])
end

def test_costpercapita_an190
  r = spreadsheet.costpercapita_an190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1627.2989002549202,r[:number])
end

def test_costpercapita_ao190
  r = spreadsheet.costpercapita_ao190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1669.346407081263,r[:number])
end

def test_costpercapita_ap190
  r = spreadsheet.costpercapita_ap190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1720.0921373037622,r[:number])
end

def test_costpercapita_aq190
  r = spreadsheet.costpercapita_aq190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1752.6648853245933,r[:number])
end

def test_costpercapita_as190
  r = spreadsheet.costpercapita_as190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1394.5770537177364,r[:number])
end

def test_costpercapita_at190
  r = spreadsheet.costpercapita_at190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28130.352988868188,r[:number])
end

def test_costpercapita_ay190
  r = spreadsheet.costpercapita_ay190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.939463153040638,r[:number])
end

def test_costpercapita_az190
  r = spreadsheet.costpercapita_az190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.070986170953816,r[:number])
end

def test_costpercapita_ba190
  r = spreadsheet.costpercapita_ba190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.48774359741206,r[:number])
end

def test_costpercapita_bb190
  r = spreadsheet.costpercapita_bb190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.515688904506828,r[:number])
end

def test_costpercapita_bc190
  r = spreadsheet.costpercapita_bc190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(30.023582196131454,r[:number])
end

def test_costpercapita_bd190
  r = spreadsheet.costpercapita_bd190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(33.36415156719007,r[:number])
end

def test_costpercapita_be190
  r = spreadsheet.costpercapita_be190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(37.17300041090008,r[:number])
end

def test_costpercapita_bf190
  r = spreadsheet.costpercapita_bf190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.0883271722773,r[:number])
end

def test_costpercapita_bg190
  r = spreadsheet.costpercapita_bg190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(46.82580995471769,r[:number])
end

def test_costpercapita_bi190
  r = spreadsheet.costpercapita_bi190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.939463153040638,r[:number])
end

def test_costpercapita_bj190
  r = spreadsheet.costpercapita_bj190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27.451869353447425,r[:number])
end

def test_costpercapita_bk190
  r = spreadsheet.costpercapita_bk190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(43.040889521909,r[:number])
end

def test_costpercapita_bl190
  r = spreadsheet.costpercapita_bl190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.86988354222901,r[:number])
end

def test_costpercapita_bm190
  r = spreadsheet.costpercapita_bm190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(69.41022423737284,r[:number])
end

def test_costpercapita_bn190
  r = spreadsheet.costpercapita_bn190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(85.96471676793088,r[:number])
end

def test_costpercapita_bo190
  r = spreadsheet.costpercapita_bo190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(98.51675909307953,r[:number])
end

def test_costpercapita_bp190
  r = spreadsheet.costpercapita_bp190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.52106620631645,r[:number])
end

def test_costpercapita_bq190
  r = spreadsheet.costpercapita_bq190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(124.86163578471165,r[:number])
end

def test_costpercapita_bs190
  r = spreadsheet.costpercapita_bs190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(754.7369646067631,r[:number])
end

def test_costpercapita_bt190
  r = spreadsheet.costpercapita_bt190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(945.2201915207727,r[:number])
end

def test_costpercapita_bu190
  r = spreadsheet.costpercapita_bu190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1157.1432016757542,r[:number])
end

def test_costpercapita_bv190
  r = spreadsheet.costpercapita_bv190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1367.0599088663523,r[:number])
end

def test_costpercapita_bw190
  r = spreadsheet.costpercapita_bw190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1597.5067977376543,r[:number])
end

def test_costpercapita_bx190
  r = spreadsheet.costpercapita_bx190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1662.5095391267369,r[:number])
end

def test_costpercapita_by190
  r = spreadsheet.costpercapita_by190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1711.3150068516745,r[:number])
end

def test_costpercapita_bz190
  r = spreadsheet.costpercapita_bz190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1766.0665550568451,r[:number])
end

def test_costpercapita_ca190
  r = spreadsheet.costpercapita_ca190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1806.2943544167315,r[:number])
end

def test_costpercapita_cc190
  r = spreadsheet.costpercapita_cc190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1418.6502799843647,r[:number])
end

def test_costpercapita_cd190
  r = spreadsheet.costpercapita_cd190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28603.831853106938,r[:number])
end

def test_costpercapita_cf190
  r = spreadsheet.costpercapita_cf190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-26.00817135902873,r[:number])
end

def test_costpercapita_cg190
  r = spreadsheet.costpercapita_cg190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.610509147544397,r[:number])
end

def test_costpercapita_ch190
  r = spreadsheet.costpercapita_ch190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.959471785600428,r[:number])
end

def test_costpercapita_ci190
  r = spreadsheet.costpercapita_ci190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.57622775030885,r[:number])
end

def test_costpercapita_cj190
  r = spreadsheet.costpercapita_cj190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.737873587780808,r[:number])
end

def test_costpercapita_ck190
  r = spreadsheet.costpercapita_ck190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(35.210638871816776,r[:number])
end

def test_costpercapita_cl190
  r = spreadsheet.costpercapita_cl190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(41.968599770411615,r[:number])
end

def test_costpercapita_cm190
  r = spreadsheet.costpercapita_cm190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(45.9744177530828,r[:number])
end

def test_costpercapita_cn190
  r = spreadsheet.costpercapita_cn190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.629469092137946,r[:number])
end

def test_costpercapita_cp190
  r = spreadsheet.costpercapita_cp190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.07322626662832,r[:number])
end

def test_costpercapita_cq190
  r = spreadsheet.costpercapita_cq190
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(473.4788642387497,r[:number])
end

def test_costpercapita_cr190
  r = spreadsheet.costpercapita_cr190
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c191
  r = spreadsheet.costpercapita_c191
  assert_equal(:ExcelString,r[:type])
  assert_equal("Bioenergy",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e191
  r = spreadsheet.costpercapita_e191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(73.32892174747367,r[:number])
end

def test_costpercapita_f191
  r = spreadsheet.costpercapita_f191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(104.52740597753728,r[:number])
end

def test_costpercapita_g191
  r = spreadsheet.costpercapita_g191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(88.14110419186976,r[:number])
end

def test_costpercapita_h191
  r = spreadsheet.costpercapita_h191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.49356321489999,r[:number])
end

def test_costpercapita_i191
  r = spreadsheet.costpercapita_i191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.01914051233666,r[:number])
end

def test_costpercapita_j191
  r = spreadsheet.costpercapita_j191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.8450545827767,r[:number])
end

def test_costpercapita_k191
  r = spreadsheet.costpercapita_k191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(89.11414946412421,r[:number])
end

def test_costpercapita_l191
  r = spreadsheet.costpercapita_l191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(92.95005600069118,r[:number])
end

def test_costpercapita_m191
  r = spreadsheet.costpercapita_m191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.34955217153069,r[:number])
end

def test_costpercapita_o191
  r = spreadsheet.costpercapita_o191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(141.92986614237708,r[:number])
end

def test_costpercapita_p191
  r = spreadsheet.costpercapita_p191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.42675096931654,r[:number])
end

def test_costpercapita_q191
  r = spreadsheet.costpercapita_q191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(157.75400240142625,r[:number])
end

def test_costpercapita_r191
  r = spreadsheet.costpercapita_r191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(171.9061978003743,r[:number])
end

def test_costpercapita_s191
  r = spreadsheet.costpercapita_s191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.29835708712932,r[:number])
end

def test_costpercapita_t191
  r = spreadsheet.costpercapita_t191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(190.13818067826273,r[:number])
end

def test_costpercapita_u191
  r = spreadsheet.costpercapita_u191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(198.38992726201647,r[:number])
end

def test_costpercapita_v191
  r = spreadsheet.costpercapita_v191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(206.9265887161034,r[:number])
end

def test_costpercapita_w191
  r = spreadsheet.costpercapita_w191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(215.7577773888426,r[:number])
end

def test_costpercapita_y191
  r = spreadsheet.costpercapita_y191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.494601834593556,r[:number])
end

def test_costpercapita_z191
  r = spreadsheet.costpercapita_z191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.233120012160928,r[:number])
end

def test_costpercapita_aa191
  r = spreadsheet.costpercapita_aa191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.53726284921615,r[:number])
end

def test_costpercapita_ab191
  r = spreadsheet.costpercapita_ab191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.618619961170864,r[:number])
end

def test_costpercapita_ac191
  r = spreadsheet.costpercapita_ac191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.797824400848874,r[:number])
end

def test_costpercapita_ad191
  r = spreadsheet.costpercapita_ad191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.078405395870426,r[:number])
end

def test_costpercapita_ae191
  r = spreadsheet.costpercapita_ae191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.42917174956062,r[:number])
end

def test_costpercapita_af191
  r = spreadsheet.costpercapita_af191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.833137993257925,r[:number])
end

def test_costpercapita_ag191
  r = spreadsheet.costpercapita_ag191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.289690773885948,r[:number])
end

def test_costpercapita_ai191
  r = spreadsheet.costpercapita_ai191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(228.75338972444433,r[:number])
end

def test_costpercapita_aj191
  r = spreadsheet.costpercapita_aj191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(265.18727695901475,r[:number])
end

def test_costpercapita_ak191
  r = spreadsheet.costpercapita_ak191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.43236944251214,r[:number])
end

def test_costpercapita_al191
  r = spreadsheet.costpercapita_al191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(271.01838097644514,r[:number])
end

def test_costpercapita_am191
  r = spreadsheet.costpercapita_am191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(285.11532200031485,r[:number])
end

def test_costpercapita_an191
  r = spreadsheet.costpercapita_an191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(301.06164065690984,r[:number])
end

def test_costpercapita_ao191
  r = spreadsheet.costpercapita_ao191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(308.9332484757013,r[:number])
end

def test_costpercapita_ap191
  r = spreadsheet.costpercapita_ap191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(321.70978271005254,r[:number])
end

def test_costpercapita_aq191
  r = spreadsheet.costpercapita_aq191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(332.3970203342593,r[:number])
end

def test_costpercapita_as191
  r = spreadsheet.costpercapita_as191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(286.7342701421838,r[:number])
end

def test_costpercapita_at191
  r = spreadsheet.costpercapita_at191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5937.089964116279,r[:number])
end

def test_costpercapita_ay191
  r = spreadsheet.costpercapita_ay191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.92249089165678,r[:number])
end

def test_costpercapita_az191
  r = spreadsheet.costpercapita_az191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(68.71306426053255,r[:number])
end

def test_costpercapita_ba191
  r = spreadsheet.costpercapita_ba191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(57.941219335642536,r[:number])
end

def test_costpercapita_bb191
  r = spreadsheet.costpercapita_bb191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(51.59922608605302,r[:number])
end

def test_costpercapita_bc191
  r = spreadsheet.costpercapita_bc191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(53.916830901064884,r[:number])
end

def test_costpercapita_bd191
  r = spreadsheet.costpercapita_bd191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(59.0613433032488,r[:number])
end

def test_costpercapita_be191
  r = spreadsheet.costpercapita_be191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(58.58086902077102,r[:number])
end

def test_costpercapita_bf191
  r = spreadsheet.costpercapita_bf191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(61.102474621518105,r[:number])
end

def test_costpercapita_bg191
  r = spreadsheet.costpercapita_bg191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(62.02245985811653,r[:number])
end

def test_costpercapita_bi191
  r = spreadsheet.costpercapita_bi191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(28.92249089165678,r[:number])
end

def test_costpercapita_bj191
  r = spreadsheet.costpercapita_bj191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(96.68183401212423,r[:number])
end

def test_costpercapita_bk191
  r = spreadsheet.costpercapita_bk191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.45786892036506,r[:number])
end

def test_costpercapita_bl191
  r = spreadsheet.costpercapita_bl191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(172.15196786718474,r[:number])
end

def test_costpercapita_bm191
  r = spreadsheet.costpercapita_bm191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(158.71956713595827,r[:number])
end

def test_costpercapita_bn191
  r = spreadsheet.costpercapita_bn191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(160.71540382704256,r[:number])
end

def test_costpercapita_bo191
  r = spreadsheet.costpercapita_bo191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(167.9066641192376,r[:number])
end

def test_costpercapita_bp191
  r = spreadsheet.costpercapita_bp191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(175.163529562981,r[:number])
end

def test_costpercapita_bq191
  r = spreadsheet.costpercapita_bq191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(178.32554531141173,r[:number])
end

def test_costpercapita_bs191
  r = spreadsheet.costpercapita_bs191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(184.3469588686274,r[:number])
end

def test_costpercapita_bt191
  r = spreadsheet.costpercapita_bt191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(257.3417049936017,r[:number])
end

def test_costpercapita_bu191
  r = spreadsheet.costpercapita_bu191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(329.7491341710074,r[:number])
end

def test_costpercapita_bv191
  r = spreadsheet.costpercapita_bv191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(364.67678562872993,r[:number])
end

def test_costpercapita_bw191
  r = spreadsheet.costpercapita_bw191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.81574862393643,r[:number])
end

def test_costpercapita_bx191
  r = spreadsheet.costpercapita_bx191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(371.9319899011757,r[:number])
end

def test_costpercapita_by191
  r = spreadsheet.costpercapita_by191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.7257631308147,r[:number])
end

def test_costpercapita_bz191
  r = spreadsheet.costpercapita_bz191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(403.9232562723423,r[:number])
end

def test_costpercapita_ca191
  r = spreadsheet.costpercapita_ca191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(416.3730134741403,r[:number])
end

def test_costpercapita_cc191
  r = spreadsheet.costpercapita_cc191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(341.98715056270845,r[:number])
end

def test_costpercapita_cd191
  r = spreadsheet.costpercapita_cd191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7084.28938049596,r[:number])
end

def test_costpercapita_cf191
  r = spreadsheet.costpercapita_cf191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-44.40643085581689,r[:number])
end

def test_costpercapita_cg191
  r = spreadsheet.costpercapita_cg191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-7.8455719654130425,r[:number])
end

def test_costpercapita_ch191
  r = spreadsheet.costpercapita_ch191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(63.3167647284953,r[:number])
end

def test_costpercapita_ci191
  r = spreadsheet.costpercapita_ci191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(93.65840465228473,r[:number])
end

def test_costpercapita_cj191
  r = spreadsheet.costpercapita_cj191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(76.70042662362161,r[:number])
end

def test_costpercapita_ck191
  r = spreadsheet.costpercapita_ck191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(70.87034924426588,r[:number])
end

def test_costpercapita_cl191
  r = spreadsheet.costpercapita_cl191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(78.79251465511337,r[:number])
end

def test_costpercapita_cm191
  r = spreadsheet.costpercapita_cm191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(82.21347356228982,r[:number])
end

def test_costpercapita_cn191
  r = spreadsheet.costpercapita_cn191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(83.97599313988104,r[:number])
end

def test_costpercapita_cp191
  r = spreadsheet.costpercapita_cp191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(55.25288042052465,r[:number])
end

def test_costpercapita_cq191
  r = spreadsheet.costpercapita_cq191
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1147.199416379683,r[:number])
end

def test_costpercapita_cr191
  r = spreadsheet.costpercapita_cr191
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c192
  r = spreadsheet.costpercapita_c192
  assert_equal(:ExcelString,r[:type])
  assert_equal("Electricity",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e192
  r = spreadsheet.costpercapita_e192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(192.20830340242284,r[:number])
end

def test_costpercapita_f192
  r = spreadsheet.costpercapita_f192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(201.5281304337663,r[:number])
end

def test_costpercapita_g192
  r = spreadsheet.costpercapita_g192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.2753428331879,r[:number])
end

def test_costpercapita_h192
  r = spreadsheet.costpercapita_h192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.72432507938942,r[:number])
end

def test_costpercapita_i192
  r = spreadsheet.costpercapita_i192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(188.08783703528044,r[:number])
end

def test_costpercapita_j192
  r = spreadsheet.costpercapita_j192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(191.70833600672813,r[:number])
end

def test_costpercapita_k192
  r = spreadsheet.costpercapita_k192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(278.2362479695695,r[:number])
end

def test_costpercapita_l192
  r = spreadsheet.costpercapita_l192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283.91938315471293,r[:number])
end

def test_costpercapita_m192
  r = spreadsheet.costpercapita_m192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(299.66975822303084,r[:number])
end

def test_costpercapita_o192
  r = spreadsheet.costpercapita_o192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(151.74823804251366,r[:number])
end

def test_costpercapita_p192
  r = spreadsheet.costpercapita_p192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.74894436817127,r[:number])
end

def test_costpercapita_q192
  r = spreadsheet.costpercapita_q192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.45522580981805,r[:number])
end

def test_costpercapita_r192
  r = spreadsheet.costpercapita_r192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(144.0392675413457,r[:number])
end

def test_costpercapita_s192
  r = spreadsheet.costpercapita_s192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(133.96258410239153,r[:number])
end

def test_costpercapita_t192
  r = spreadsheet.costpercapita_t192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.05783097069464,r[:number])
end

def test_costpercapita_u192
  r = spreadsheet.costpercapita_u192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.5411266834792,r[:number])
end

def test_costpercapita_v192
  r = spreadsheet.costpercapita_v192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(111.89202166937974,r[:number])
end

def test_costpercapita_w192
  r = spreadsheet.costpercapita_w192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.80974712725097,r[:number])
end

def test_costpercapita_y192
  r = spreadsheet.costpercapita_y192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.6735560562465563,r[:number])
end

def test_costpercapita_z192
  r = spreadsheet.costpercapita_z192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.1717321025222884,r[:number])
end

def test_costpercapita_aa192
  r = spreadsheet.costpercapita_aa192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.2003620629822087,r[:number])
end

def test_costpercapita_ab192
  r = spreadsheet.costpercapita_ab192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.38773156085068894,r[:number])
end

def test_costpercapita_ac192
  r = spreadsheet.costpercapita_ac192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.37713867524794414,r[:number])
end

def test_costpercapita_ad192
  r = spreadsheet.costpercapita_ad192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae192
  r = spreadsheet.costpercapita_ae192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af192
  r = spreadsheet.costpercapita_af192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag192
  r = spreadsheet.costpercapita_ag192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai192
  r = spreadsheet.costpercapita_ai192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(346.6300975011832,r[:number])
end

def test_costpercapita_aj192
  r = spreadsheet.costpercapita_aj192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(350.4488069044599,r[:number])
end

def test_costpercapita_ak192
  r = spreadsheet.costpercapita_ak192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(394.93093070598815,r[:number])
end

def test_costpercapita_al192
  r = spreadsheet.costpercapita_al192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(392.1513241815858,r[:number])
end

def test_costpercapita_am192
  r = spreadsheet.costpercapita_am192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(322.4275598129199,r[:number])
end

def test_costpercapita_an192
  r = spreadsheet.costpercapita_an192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(314.7661669774227,r[:number])
end

def test_costpercapita_ao192
  r = spreadsheet.costpercapita_ao192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(394.77737465304875,r[:number])
end

def test_costpercapita_ap192
  r = spreadsheet.costpercapita_ap192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(395.8114048240927,r[:number])
end

def test_costpercapita_aq192
  r = spreadsheet.costpercapita_aq192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(414.4795053502818,r[:number])
end

def test_costpercapita_as192
  r = spreadsheet.costpercapita_as192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(369.60257454566477,r[:number])
end

def test_costpercapita_at192
  r = spreadsheet.costpercapita_at192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7729.243643118805,r[:number])
end

def test_costpercapita_ay192
  r = spreadsheet.costpercapita_ay192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.81105479229144,r[:number])
end

def test_costpercapita_az192
  r = spreadsheet.costpercapita_az192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(132.47832228589112,r[:number])
end

def test_costpercapita_ba192
  r = spreadsheet.costpercapita_ba192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.55111626699505,r[:number])
end

def test_costpercapita_bb192
  r = spreadsheet.costpercapita_bb192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(162.8462632253125,r[:number])
end

def test_costpercapita_bc192
  r = spreadsheet.costpercapita_bc192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.64309160802439,r[:number])
end

def test_costpercapita_bd192
  r = spreadsheet.costpercapita_bd192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(126.02309497798976,r[:number])
end

def test_costpercapita_be192
  r = spreadsheet.costpercapita_be192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(182.9038519376537,r[:number])
end

def test_costpercapita_bf192
  r = spreadsheet.costpercapita_bf192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(186.63976817441528,r[:number])
end

def test_costpercapita_bg192
  r = spreadsheet.costpercapita_bg192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.99357466253755,r[:number])
end

def test_costpercapita_bi192
  r = spreadsheet.costpercapita_bi192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.81105479229144,r[:number])
end

def test_costpercapita_bj192
  r = spreadsheet.costpercapita_bj192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(205.78950229641205,r[:number])
end

def test_costpercapita_bk192
  r = spreadsheet.costpercapita_bk192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(361.6034508767694,r[:number])
end

def test_costpercapita_bl192
  r = spreadsheet.costpercapita_bl192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(444.53776149969,r[:number])
end

def test_costpercapita_bm192
  r = spreadsheet.costpercapita_bm192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(435.2549238481287,r[:number])
end

def test_costpercapita_bn192
  r = spreadsheet.costpercapita_bn192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(401.41980780549443,r[:number])
end

def test_costpercapita_bo192
  r = spreadsheet.costpercapita_bo192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(424.39517501676465,r[:number])
end

def test_costpercapita_bp192
  r = spreadsheet.costpercapita_bp192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(486.77025859578123,r[:number])
end

def test_costpercapita_bq192
  r = spreadsheet.costpercapita_bq192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(556.0604055121624,r[:number])
end

def test_costpercapita_bs192
  r = spreadsheet.costpercapita_bs192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(230.23284889105173,r[:number])
end

def test_costpercapita_bt192
  r = spreadsheet.costpercapita_bt192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(354.7101787671057,r[:number])
end

def test_costpercapita_bu192
  r = spreadsheet.costpercapita_bu192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(509.2590387495697,r[:number])
end

def test_costpercapita_bv192
  r = spreadsheet.costpercapita_bv192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(588.9647606018865,r[:number])
end

def test_costpercapita_bw192
  r = spreadsheet.costpercapita_bw192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(569.5946466257683,r[:number])
end

def test_costpercapita_bx192
  r = spreadsheet.costpercapita_bx192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(524.477638776189,r[:number])
end

def test_costpercapita_by192
  r = spreadsheet.costpercapita_by192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(540.9363017002439,r[:number])
end

def test_costpercapita_bz192
  r = spreadsheet.costpercapita_bz192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(598.662280265161,r[:number])
end

def test_costpercapita_ca192
  r = spreadsheet.costpercapita_ca192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(670.8701526394134,r[:number])
end

def test_costpercapita_cc192
  r = spreadsheet.costpercapita_cc192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(509.7453163351543,r[:number])
end

def test_costpercapita_cd192
  r = spreadsheet.costpercapita_cd192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10600.123734742343,r[:number])
end

def test_costpercapita_cf192
  r = spreadsheet.costpercapita_cf192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-116.3972486101314,r[:number])
end

def test_costpercapita_cg192
  r = spreadsheet.costpercapita_cg192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.261371862645757,r[:number])
end

def test_costpercapita_ch192
  r = spreadsheet.costpercapita_ch192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.3281080435815,r[:number])
end

def test_costpercapita_ci192
  r = spreadsheet.costpercapita_ci192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(196.81343642030066,r[:number])
end

def test_costpercapita_cj192
  r = spreadsheet.costpercapita_cj192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(247.16708681284828,r[:number])
end

def test_costpercapita_ck192
  r = spreadsheet.costpercapita_ck192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(209.71147179876635,r[:number])
end

def test_costpercapita_cl192
  r = spreadsheet.costpercapita_cl192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(146.15892704719516,r[:number])
end

def test_costpercapita_cm192
  r = spreadsheet.costpercapita_cm192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(202.85087544106835,r[:number])
end

def test_costpercapita_cn192
  r = spreadsheet.costpercapita_cn192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(256.3906472891316,r[:number])
end

def test_costpercapita_cp192
  r = spreadsheet.costpercapita_cp192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(140.14274178948958,r[:number])
end

def test_costpercapita_cq192
  r = spreadsheet.costpercapita_cq192
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2870.8800916235377,r[:number])
end

def test_costpercapita_cr192
  r = spreadsheet.costpercapita_cr192
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c193
  r = spreadsheet.costpercapita_c193
  assert_equal(:ExcelString,r[:type])
  assert_equal("Buildings",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e193
  r = spreadsheet.costpercapita_e193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(387.15921784879095,r[:number])
end

def test_costpercapita_f193
  r = spreadsheet.costpercapita_f193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430.62339781768566,r[:number])
end

def test_costpercapita_g193
  r = spreadsheet.costpercapita_g193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(439.18589312726294,r[:number])
end

def test_costpercapita_h193
  r = spreadsheet.costpercapita_h193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(494.1314412551693,r[:number])
end

def test_costpercapita_i193
  r = spreadsheet.costpercapita_i193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(546.1437888703884,r[:number])
end

def test_costpercapita_j193
  r = spreadsheet.costpercapita_j193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(603.2253820680229,r[:number])
end

def test_costpercapita_k193
  r = spreadsheet.costpercapita_k193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(656.6998465841576,r[:number])
end

def test_costpercapita_l193
  r = spreadsheet.costpercapita_l193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(716.9586532364948,r[:number])
end

def test_costpercapita_m193
  r = spreadsheet.costpercapita_m193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(779.1885193894295,r[:number])
end

def test_costpercapita_o193
  r = spreadsheet.costpercapita_o193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.20206717967781,r[:number])
end

def test_costpercapita_p193
  r = spreadsheet.costpercapita_p193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(114.65331341691385,r[:number])
end

def test_costpercapita_q193
  r = spreadsheet.costpercapita_q193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(116.66857999595548,r[:number])
end

def test_costpercapita_r193
  r = spreadsheet.costpercapita_r193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(118.4621006844819,r[:number])
end

def test_costpercapita_s193
  r = spreadsheet.costpercapita_s193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(120.29217725675836,r[:number])
end

def test_costpercapita_t193
  r = spreadsheet.costpercapita_t193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(123.49949991611089,r[:number])
end

def test_costpercapita_u193
  r = spreadsheet.costpercapita_u193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(127.14587402936533,r[:number])
end

def test_costpercapita_v193
  r = spreadsheet.costpercapita_v193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(131.15185119699927,r[:number])
end

def test_costpercapita_w193
  r = spreadsheet.costpercapita_w193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(135.53286620968998,r[:number])
end

def test_costpercapita_y193
  r = spreadsheet.costpercapita_y193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z193
  r = spreadsheet.costpercapita_z193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa193
  r = spreadsheet.costpercapita_aa193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab193
  r = spreadsheet.costpercapita_ab193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac193
  r = spreadsheet.costpercapita_ac193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad193
  r = spreadsheet.costpercapita_ad193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae193
  r = spreadsheet.costpercapita_ae193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af193
  r = spreadsheet.costpercapita_af193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag193
  r = spreadsheet.costpercapita_ag193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai193
  r = spreadsheet.costpercapita_ai193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(501.3612850284687,r[:number])
end

def test_costpercapita_aj193
  r = spreadsheet.costpercapita_aj193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(545.2767112345995,r[:number])
end

def test_costpercapita_ak193
  r = spreadsheet.costpercapita_ak193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(555.8544731232184,r[:number])
end

def test_costpercapita_al193
  r = spreadsheet.costpercapita_al193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(612.5935419396511,r[:number])
end

def test_costpercapita_am193
  r = spreadsheet.costpercapita_am193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(666.4359661271468,r[:number])
end

def test_costpercapita_an193
  r = spreadsheet.costpercapita_an193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(726.7248819841338,r[:number])
end

def test_costpercapita_ao193
  r = spreadsheet.costpercapita_ao193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(783.8457206135229,r[:number])
end

def test_costpercapita_ap193
  r = spreadsheet.costpercapita_ap193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(848.110504433494,r[:number])
end

def test_costpercapita_aq193
  r = spreadsheet.costpercapita_aq193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(914.7213855991196,r[:number])
end

def test_costpercapita_as193
  r = spreadsheet.costpercapita_as193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(683.8804966759283,r[:number])
end

def test_costpercapita_at193
  r = spreadsheet.costpercapita_at193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13719.700420263127,r[:number])
end

def test_costpercapita_ay193
  r = spreadsheet.costpercapita_ay193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.7038538820244,r[:number])
end

def test_costpercapita_az193
  r = spreadsheet.costpercapita_az193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(283.0784226358225,r[:number])
end

def test_costpercapita_ba193
  r = spreadsheet.costpercapita_ba193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(288.70714062547523,r[:number])
end

def test_costpercapita_bb193
  r = spreadsheet.costpercapita_bb193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(324.82663430308884,r[:number])
end

def test_costpercapita_bc193
  r = spreadsheet.costpercapita_bc193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(359.0179332318477,r[:number])
end

def test_costpercapita_bd193
  r = spreadsheet.costpercapita_bd193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(396.54159647405544,r[:number])
end

def test_costpercapita_be193
  r = spreadsheet.costpercapita_be193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(431.69404555888536,r[:number])
end

def test_costpercapita_bf193
  r = spreadsheet.costpercapita_bf193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(471.3063100654287,r[:number])
end

def test_costpercapita_bg193
  r = spreadsheet.costpercapita_bg193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(512.2142877570386,r[:number])
end

def test_costpercapita_bi193
  r = spreadsheet.costpercapita_bi193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(152.7038538820244,r[:number])
end

def test_costpercapita_bj193
  r = spreadsheet.costpercapita_bj193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(430.74685636118585,r[:number])
end

def test_costpercapita_bk193
  r = spreadsheet.costpercapita_bk193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(705.352141598443,r[:number])
end

def test_costpercapita_bl193
  r = spreadsheet.costpercapita_bl193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(869.9272186115264,r[:number])
end

def test_costpercapita_bm193
  r = spreadsheet.costpercapita_bm193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(947.094720368133,r[:number])
end

def test_costpercapita_bn193
  r = spreadsheet.costpercapita_bn193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1055.6124566382878,r[:number])
end

def test_costpercapita_bo193
  r = spreadsheet.costpercapita_bo193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1162.8636591478787,r[:number])
end

def test_costpercapita_bp193
  r = spreadsheet.costpercapita_bp193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1274.7322656719523,r[:number])
end

def test_costpercapita_bq193
  r = spreadsheet.costpercapita_bq193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1389.912392910766,r[:number])
end

def test_costpercapita_bs193
  r = spreadsheet.costpercapita_bs193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.9059210617022,r[:number])
end

def test_costpercapita_bt193
  r = spreadsheet.costpercapita_bt193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(545.4001697780997,r[:number])
end

def test_costpercapita_bu193
  r = spreadsheet.costpercapita_bu193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(822.0207215943985,r[:number])
end

def test_costpercapita_bv193
  r = spreadsheet.costpercapita_bv193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(988.3893192960082,r[:number])
end

def test_costpercapita_bw193
  r = spreadsheet.costpercapita_bw193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1067.3868976248914,r[:number])
end

def test_costpercapita_bx193
  r = spreadsheet.costpercapita_bx193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1179.1119565543988,r[:number])
end

def test_costpercapita_by193
  r = spreadsheet.costpercapita_by193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1290.009533177244,r[:number])
end

def test_costpercapita_bz193
  r = spreadsheet.costpercapita_bz193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1405.8841168689519,r[:number])
end

def test_costpercapita_ca193
  r = spreadsheet.costpercapita_ca193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1525.4452591204558,r[:number])
end

def test_costpercapita_cc193
  r = spreadsheet.costpercapita_cc193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1010.0615438973501,r[:number])
end

def test_costpercapita_cd193
  r = spreadsheet.costpercapita_cd193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20083.717859068875,r[:number])
end

def test_costpercapita_cf193
  r = spreadsheet.costpercapita_cf193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-234.45536396676658,r[:number])
end

def test_costpercapita_cg193
  r = spreadsheet.costpercapita_cg193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.12345854350021529,r[:number])
end

def test_costpercapita_ch193
  r = spreadsheet.costpercapita_ch193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(266.1662484711801,r[:number])
end

def test_costpercapita_ci193
  r = spreadsheet.costpercapita_ci193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(375.79577735635706,r[:number])
end

def test_costpercapita_cj193
  r = spreadsheet.costpercapita_cj193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(400.95093149774465,r[:number])
end

def test_costpercapita_ck193
  r = spreadsheet.costpercapita_ck193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(452.3870745702649,r[:number])
end

def test_costpercapita_cl193
  r = spreadsheet.costpercapita_cl193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(506.163812563721,r[:number])
end

def test_costpercapita_cm193
  r = spreadsheet.costpercapita_cm193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(557.7736124354575,r[:number])
end

def test_costpercapita_cn193
  r = spreadsheet.costpercapita_cn193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(610.7238735213364,r[:number])
end

def test_costpercapita_cp193
  r = spreadsheet.costpercapita_cp193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(326.1810472214217,r[:number])
end

def test_costpercapita_cq193
  r = spreadsheet.costpercapita_cq193
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6364.017438805745,r[:number])
end

def test_costpercapita_cr193
  r = spreadsheet.costpercapita_cr193
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c194
  r = spreadsheet.costpercapita_c194
  assert_equal(:ExcelString,r[:type])
  assert_equal("Transport",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e194
  r = spreadsheet.costpercapita_e194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1178.861721276172,r[:number])
end

def test_costpercapita_f194
  r = spreadsheet.costpercapita_f194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1135.9045991183038,r[:number])
end

def test_costpercapita_g194
  r = spreadsheet.costpercapita_g194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1211.0473609098271,r[:number])
end

def test_costpercapita_h194
  r = spreadsheet.costpercapita_h194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1322.5706549301344,r[:number])
end

def test_costpercapita_i194
  r = spreadsheet.costpercapita_i194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1375.7504333309512,r[:number])
end

def test_costpercapita_j194
  r = spreadsheet.costpercapita_j194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1451.7705636307733,r[:number])
end

def test_costpercapita_k194
  r = spreadsheet.costpercapita_k194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1503.931254987288,r[:number])
end

def test_costpercapita_l194
  r = spreadsheet.costpercapita_l194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1545.0578311806266,r[:number])
end

def test_costpercapita_m194
  r = spreadsheet.costpercapita_m194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1602.496019153722,r[:number])
end

def test_costpercapita_o194
  r = spreadsheet.costpercapita_o194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1174.401543588274,r[:number])
end

def test_costpercapita_p194
  r = spreadsheet.costpercapita_p194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1170.8700036848336,r[:number])
end

def test_costpercapita_q194
  r = spreadsheet.costpercapita_q194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1196.694849482536,r[:number])
end

def test_costpercapita_r194
  r = spreadsheet.costpercapita_r194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1240.3762073608477,r[:number])
end

def test_costpercapita_s194
  r = spreadsheet.costpercapita_s194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1279.2949664515236,r[:number])
end

def test_costpercapita_t194
  r = spreadsheet.costpercapita_t194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1323.3987260377157,r[:number])
end

def test_costpercapita_u194
  r = spreadsheet.costpercapita_u194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1360.5732658126508,r[:number])
end

def test_costpercapita_v194
  r = spreadsheet.costpercapita_v194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1394.2322277298006,r[:number])
end

def test_costpercapita_w194
  r = spreadsheet.costpercapita_w194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1429.2258089885433,r[:number])
end

def test_costpercapita_y194
  r = spreadsheet.costpercapita_y194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z194
  r = spreadsheet.costpercapita_z194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa194
  r = spreadsheet.costpercapita_aa194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab194
  r = spreadsheet.costpercapita_ab194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac194
  r = spreadsheet.costpercapita_ac194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad194
  r = spreadsheet.costpercapita_ad194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae194
  r = spreadsheet.costpercapita_ae194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af194
  r = spreadsheet.costpercapita_af194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag194
  r = spreadsheet.costpercapita_ag194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai194
  r = spreadsheet.costpercapita_ai194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2353.263264864446,r[:number])
end

def test_costpercapita_aj194
  r = spreadsheet.costpercapita_aj194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2306.774602803138,r[:number])
end

def test_costpercapita_ak194
  r = spreadsheet.costpercapita_ak194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2407.742210392363,r[:number])
end

def test_costpercapita_al194
  r = spreadsheet.costpercapita_al194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2562.9468622909817,r[:number])
end

def test_costpercapita_am194
  r = spreadsheet.costpercapita_am194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2655.0453997824748,r[:number])
end

def test_costpercapita_an194
  r = spreadsheet.costpercapita_an194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2775.1692896684895,r[:number])
end

def test_costpercapita_ao194
  r = spreadsheet.costpercapita_ao194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2864.5045207999383,r[:number])
end

def test_costpercapita_ap194
  r = spreadsheet.costpercapita_ap194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2939.2900589104274,r[:number])
end

def test_costpercapita_aq194
  r = spreadsheet.costpercapita_aq194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3031.721828142265,r[:number])
end

def test_costpercapita_as194
  r = spreadsheet.costpercapita_as194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2655.162004183836,r[:number])
end

def test_costpercapita_at194
  r = spreadsheet.costpercapita_at194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(54429.20341545546,r[:number])
end

def test_costpercapita_ay194
  r = spreadsheet.costpercapita_ay194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464.9682087723808,r[:number])
end

def test_costpercapita_az194
  r = spreadsheet.costpercapita_az194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(746.7083391490993,r[:number])
end

def test_costpercapita_ba194
  r = spreadsheet.costpercapita_ba194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(796.1048526414979,r[:number])
end

def test_costpercapita_bb194
  r = spreadsheet.costpercapita_bb194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(869.416796020351,r[:number])
end

def test_costpercapita_bc194
  r = spreadsheet.costpercapita_bc194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(904.3755276222953,r[:number])
end

def test_costpercapita_bd194
  r = spreadsheet.costpercapita_bd194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(954.3487958722341,r[:number])
end

def test_costpercapita_be194
  r = spreadsheet.costpercapita_be194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(988.6376113607212,r[:number])
end

def test_costpercapita_bf194
  r = spreadsheet.costpercapita_bf194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1015.6729428736439,r[:number])
end

def test_costpercapita_bg194
  r = spreadsheet.costpercapita_bg194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1053.4310204255926,r[:number])
end

def test_costpercapita_bi194
  r = spreadsheet.costpercapita_bi194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(464.9682087723808,r[:number])
end

def test_costpercapita_bj194
  r = spreadsheet.costpercapita_bj194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1196.3441890376766,r[:number])
end

def test_costpercapita_bk194
  r = spreadsheet.costpercapita_bk194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1953.282945631806,r[:number])
end

def test_costpercapita_bl194
  r = spreadsheet.costpercapita_bl194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2340.7702090106027,r[:number])
end

def test_costpercapita_bm194
  r = spreadsheet.costpercapita_bm194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2500.4181438394867,r[:number])
end

def test_costpercapita_bn194
  r = spreadsheet.costpercapita_bn194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2663.1651161462946,r[:number])
end

def test_costpercapita_bo194
  r = spreadsheet.costpercapita_bo194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2786.873187311876,r[:number])
end

def test_costpercapita_bp194
  r = spreadsheet.costpercapita_bp194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2899.9539875774094,r[:number])
end

def test_costpercapita_bq194
  r = spreadsheet.costpercapita_bq194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3000.984425603919,r[:number])
end

def test_costpercapita_bs194
  r = spreadsheet.costpercapita_bs194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1639.3697523606545,r[:number])
end

def test_costpercapita_bt194
  r = spreadsheet.costpercapita_bt194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2367.2141927225102,r[:number])
end

def test_costpercapita_bu194
  r = spreadsheet.costpercapita_bu194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3149.977795114342,r[:number])
end

def test_costpercapita_bv194
  r = spreadsheet.costpercapita_bv194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3581.1464163714495,r[:number])
end

def test_costpercapita_bw194
  r = spreadsheet.costpercapita_bw194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3779.7131102910093,r[:number])
end

def test_costpercapita_bx194
  r = spreadsheet.costpercapita_bx194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3986.5638421840104,r[:number])
end

def test_costpercapita_by194
  r = spreadsheet.costpercapita_by194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4147.446453124527,r[:number])
end

def test_costpercapita_bz194
  r = spreadsheet.costpercapita_bz194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4294.18621530721,r[:number])
end

def test_costpercapita_ca194
  r = spreadsheet.costpercapita_ca194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4430.210234592463,r[:number])
end

def test_costpercapita_cc194
  r = spreadsheet.costpercapita_cc194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3486.2031124520195,r[:number])
end

def test_costpercapita_cd194
  r = spreadsheet.costpercapita_cd194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(71249.67775754565,r[:number])
end

def test_costpercapita_cf194
  r = spreadsheet.costpercapita_cf194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-713.8935125037908,r[:number])
end

def test_costpercapita_cg194
  r = spreadsheet.costpercapita_cg194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(60.43958991937279,r[:number])
end

def test_costpercapita_ch194
  r = spreadsheet.costpercapita_ch194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(742.2355847219784,r[:number])
end

def test_costpercapita_ci194
  r = spreadsheet.costpercapita_ci194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1018.199554080468,r[:number])
end

def test_costpercapita_cj194
  r = spreadsheet.costpercapita_cj194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1124.667710508535,r[:number])
end

def test_costpercapita_ck194
  r = spreadsheet.costpercapita_ck194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1211.3945525155211,r[:number])
end

def test_costpercapita_cl194
  r = spreadsheet.costpercapita_cl194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1282.941932324588,r[:number])
end

def test_costpercapita_cm194
  r = spreadsheet.costpercapita_cm194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1354.8961563967828,r[:number])
end

def test_costpercapita_cn194
  r = spreadsheet.costpercapita_cn194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1398.488406450197,r[:number])
end

def test_costpercapita_cp194
  r = spreadsheet.costpercapita_cp194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(831.0411082681835,r[:number])
end

def test_costpercapita_cq194
  r = spreadsheet.costpercapita_cq194
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16820.47434209018,r[:number])
end

def test_costpercapita_cr194
  r = spreadsheet.costpercapita_cr194
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c195
  r = spreadsheet.costpercapita_c195
  assert_equal(:ExcelString,r[:type])
  assert_equal("Industry",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e195
  r = spreadsheet.costpercapita_e195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.501503394061272,r[:number])
end

def test_costpercapita_f195
  r = spreadsheet.costpercapita_f195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.654657730685964,r[:number])
end

def test_costpercapita_g195
  r = spreadsheet.costpercapita_g195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.932778118698089,r[:number])
end

def test_costpercapita_h195
  r = spreadsheet.costpercapita_h195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.291332390419164,r[:number])
end

def test_costpercapita_i195
  r = spreadsheet.costpercapita_i195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.790810821928129,r[:number])
end

def test_costpercapita_j195
  r = spreadsheet.costpercapita_j195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.40318407443384,r[:number])
end

def test_costpercapita_k195
  r = spreadsheet.costpercapita_k195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.094221775906331,r[:number])
end

def test_costpercapita_l195
  r = spreadsheet.costpercapita_l195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.841911723728388,r[:number])
end

def test_costpercapita_m195
  r = spreadsheet.costpercapita_m195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.6336130361418455,r[:number])
end

def test_costpercapita_o195
  r = spreadsheet.costpercapita_o195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.366948484265311,r[:number])
end

def test_costpercapita_p195
  r = spreadsheet.costpercapita_p195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.1653847697148,r[:number])
end

def test_costpercapita_q195
  r = spreadsheet.costpercapita_q195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.078668379868073,r[:number])
end

def test_costpercapita_r195
  r = spreadsheet.costpercapita_r195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.207378058178438,r[:number])
end

def test_costpercapita_s195
  r = spreadsheet.costpercapita_s195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.52690777830955,r[:number])
end

def test_costpercapita_t195
  r = spreadsheet.costpercapita_t195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.99614813048735,r[:number])
end

def test_costpercapita_u195
  r = spreadsheet.costpercapita_u195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.568814724711372,r[:number])
end

def test_costpercapita_v195
  r = spreadsheet.costpercapita_v195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.215535728368746,r[:number])
end

def test_costpercapita_w195
  r = spreadsheet.costpercapita_w195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.920240132730445,r[:number])
end

def test_costpercapita_y195
  r = spreadsheet.costpercapita_y195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z195
  r = spreadsheet.costpercapita_z195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa195
  r = spreadsheet.costpercapita_aa195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab195
  r = spreadsheet.costpercapita_ab195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac195
  r = spreadsheet.costpercapita_ac195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad195
  r = spreadsheet.costpercapita_ad195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae195
  r = spreadsheet.costpercapita_ae195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af195
  r = spreadsheet.costpercapita_af195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag195
  r = spreadsheet.costpercapita_ag195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai195
  r = spreadsheet.costpercapita_ai195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.86845187832658,r[:number])
end

def test_costpercapita_aj195
  r = spreadsheet.costpercapita_aj195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.820042500400763,r[:number])
end

def test_costpercapita_ak195
  r = spreadsheet.costpercapita_ak195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.011446498566162,r[:number])
end

def test_costpercapita_al195
  r = spreadsheet.costpercapita_al195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.498710448597603,r[:number])
end

def test_costpercapita_am195
  r = spreadsheet.costpercapita_am195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(17.31771860023768,r[:number])
end

def test_costpercapita_an195
  r = spreadsheet.costpercapita_an195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(16.39933220492119,r[:number])
end

def test_costpercapita_ao195
  r = spreadsheet.costpercapita_ao195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.663036500617702,r[:number])
end

def test_costpercapita_ap195
  r = spreadsheet.costpercapita_ap195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.057447452097135,r[:number])
end

def test_costpercapita_aq195
  r = spreadsheet.costpercapita_aq195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.553853168872289,r[:number])
end

def test_costpercapita_as195
  r = spreadsheet.costpercapita_as195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.132226583626345,r[:number])
end

def test_costpercapita_at195
  r = spreadsheet.costpercapita_at195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(390.41342302506314,r[:number])
end

def test_costpercapita_ay195
  r = spreadsheet.costpercapita_ay195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976263,r[:number])
end

def test_costpercapita_az195
  r = spreadsheet.costpercapita_az195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.689302697603886,r[:number])
end

def test_costpercapita_ba195
  r = spreadsheet.costpercapita_ba195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.214761502373702,r[:number])
end

def test_costpercapita_bb195
  r = spreadsheet.costpercapita_bb195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.793095039548196,r[:number])
end

def test_costpercapita_bc195
  r = spreadsheet.costpercapita_bc195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.464067734432657,r[:number])
end

def test_costpercapita_bd195
  r = spreadsheet.costpercapita_bd195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.209253971854447,r[:number])
end

def test_costpercapita_be195
  r = spreadsheet.costpercapita_be195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.00615177033837,r[:number])
end

def test_costpercapita_bf195
  r = spreadsheet.costpercapita_bf195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.8402909928059494,r[:number])
end

def test_costpercapita_bg195
  r = spreadsheet.costpercapita_bg195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.7033619169175216,r[:number])
end

def test_costpercapita_bi195
  r = spreadsheet.costpercapita_bi195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.747595611976263,r[:number])
end

def test_costpercapita_bj195
  r = spreadsheet.costpercapita_bj195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.31332108475032,r[:number])
end

def test_costpercapita_bk195
  r = spreadsheet.costpercapita_bk195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.223181680288237,r[:number])
end

def test_costpercapita_bl195
  r = spreadsheet.costpercapita_bl195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(15.179041446909165,r[:number])
end

def test_costpercapita_bm195
  r = spreadsheet.costpercapita_bm195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(14.04145227422591,r[:number])
end

def test_costpercapita_bn195
  r = spreadsheet.costpercapita_bn195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(13.120494318508502,r[:number])
end

def test_costpercapita_bo195
  r = spreadsheet.costpercapita_bo195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(12.39159120565756,r[:number])
end

def test_costpercapita_bp195
  r = spreadsheet.costpercapita_bp195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.80383894721361,r[:number])
end

def test_costpercapita_bq195
  r = spreadsheet.costpercapita_bq195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(11.324953367902515,r[:number])
end

def test_costpercapita_bs195
  r = spreadsheet.costpercapita_bs195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(18.114544096241573,r[:number])
end

def test_costpercapita_bt195
  r = spreadsheet.costpercapita_bt195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.47870585446512,r[:number])
end

def test_costpercapita_bu195
  r = spreadsheet.costpercapita_bu195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.301850060156312,r[:number])
end

def test_costpercapita_bv195
  r = spreadsheet.costpercapita_bv195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(26.386419505087606,r[:number])
end

def test_costpercapita_bw195
  r = spreadsheet.costpercapita_bw195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(24.56836005253546,r[:number])
end

def test_costpercapita_bx195
  r = spreadsheet.costpercapita_bx195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(23.116642448995854,r[:number])
end

def test_costpercapita_by195
  r = spreadsheet.costpercapita_by195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.960405930368932,r[:number])
end

def test_costpercapita_bz195
  r = spreadsheet.costpercapita_bz195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(21.019374675582355,r[:number])
end

def test_costpercapita_ca195
  r = spreadsheet.costpercapita_ca195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(20.245193500632958,r[:number])
end

def test_costpercapita_cc195
  r = spreadsheet.costpercapita_cc195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(22.687944013785128,r[:number])
end

def test_costpercapita_cd195
  r = spreadsheet.costpercapita_cd195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(493.6249462097008,r[:number])
end

def test_costpercapita_cf195
  r = spreadsheet.costpercapita_cf195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-5.753907782085008,r[:number])
end

def test_costpercapita_cg195
  r = spreadsheet.costpercapita_cg195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.6586633540643572,r[:number])
end

def test_costpercapita_ch195
  r = spreadsheet.costpercapita_ch195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.290403561590148,r[:number])
end

def test_costpercapita_ci195
  r = spreadsheet.costpercapita_ci195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.887709056490001,r[:number])
end

def test_costpercapita_cj195
  r = spreadsheet.costpercapita_cj195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.2506414522977805,r[:number])
end

def test_costpercapita_ck195
  r = spreadsheet.costpercapita_ck195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.717310244074663,r[:number])
end

def test_costpercapita_cl195
  r = spreadsheet.costpercapita_cl195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6.297369429751228,r[:number])
end

def test_costpercapita_cm195
  r = spreadsheet.costpercapita_cm195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.961927223485222,r[:number])
end

def test_costpercapita_cn195
  r = spreadsheet.costpercapita_cn195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.691340331760669,r[:number])
end

def test_costpercapita_cp195
  r = spreadsheet.costpercapita_cp195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.555717430158785,r[:number])
end

def test_costpercapita_cq195
  r = spreadsheet.costpercapita_cq195
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(103.21152318463771,r[:number])
end

def test_costpercapita_cr195
  r = spreadsheet.costpercapita_cr195
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c196
  r = spreadsheet.costpercapita_c196
  assert_equal(:ExcelString,r[:type])
  assert_equal("Other",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e196
  r = spreadsheet.costpercapita_e196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_f196
  r = spreadsheet.costpercapita_f196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.510941756577549,r[:number])
end

def test_costpercapita_g196
  r = spreadsheet.costpercapita_g196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.721390312179909,r[:number])
end

def test_costpercapita_h196
  r = spreadsheet.costpercapita_h196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.427672328465383,r[:number])
end

def test_costpercapita_i196
  r = spreadsheet.costpercapita_i196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.170709128499708,r[:number])
end

def test_costpercapita_j196
  r = spreadsheet.costpercapita_j196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.947100165718051,r[:number])
end

def test_costpercapita_k196
  r = spreadsheet.costpercapita_k196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.830627025249025,r[:number])
end

def test_costpercapita_l196
  r = spreadsheet.costpercapita_l196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.640836506622003,r[:number])
end

def test_costpercapita_m196
  r = spreadsheet.costpercapita_m196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.466117568649894,r[:number])
end

def test_costpercapita_o196
  r = spreadsheet.costpercapita_o196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_p196
  r = spreadsheet.costpercapita_p196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.07532825269732647,r[:number])
end

def test_costpercapita_q196
  r = spreadsheet.costpercapita_q196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.17164170936539724,r[:number])
end

def test_costpercapita_r196
  r = spreadsheet.costpercapita_r196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.16283016985396148,r[:number])
end

def test_costpercapita_s196
  r = spreadsheet.costpercapita_s196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.15512127385499125,r[:number])
end

def test_costpercapita_t196
  r = spreadsheet.costpercapita_t196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14841300497154153,r[:number])
end

def test_costpercapita_u196
  r = spreadsheet.costpercapita_u196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.14491881075747076,r[:number])
end

def test_costpercapita_v196
  r = spreadsheet.costpercapita_v196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13922509519866005,r[:number])
end

def test_costpercapita_w196
  r = spreadsheet.costpercapita_w196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.13398352705949682,r[:number])
end

def test_costpercapita_y196
  r = spreadsheet.costpercapita_y196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_z196
  r = spreadsheet.costpercapita_z196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aa196
  r = spreadsheet.costpercapita_aa196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ab196
  r = spreadsheet.costpercapita_ab196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ac196
  r = spreadsheet.costpercapita_ac196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ad196
  r = spreadsheet.costpercapita_ad196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ae196
  r = spreadsheet.costpercapita_ae196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_af196
  r = spreadsheet.costpercapita_af196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ag196
  r = spreadsheet.costpercapita_ag196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_ai196
  r = spreadsheet.costpercapita_ai196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_aj196
  r = spreadsheet.costpercapita_aj196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.5862700092748754,r[:number])
end

def test_costpercapita_ak196
  r = spreadsheet.costpercapita_ak196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.893032021545306,r[:number])
end

def test_costpercapita_al196
  r = spreadsheet.costpercapita_al196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.590502498319345,r[:number])
end

def test_costpercapita_am196
  r = spreadsheet.costpercapita_am196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.3258304023547,r[:number])
end

def test_costpercapita_an196
  r = spreadsheet.costpercapita_an196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.095513170689592,r[:number])
end

def test_costpercapita_ao196
  r = spreadsheet.costpercapita_ao196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.975545836006496,r[:number])
end

def test_costpercapita_ap196
  r = spreadsheet.costpercapita_ap196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.7800616018206625,r[:number])
end

def test_costpercapita_aq196
  r = spreadsheet.costpercapita_aq196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.600101095709391,r[:number])
end

def test_costpercapita_as196
  r = spreadsheet.costpercapita_as196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.31631740396893,r[:number])
end

def test_costpercapita_at196
  r = spreadsheet.costpercapita_at196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(94.93069979682133,r[:number])
end

def test_costpercapita_ay196
  r = spreadsheet.costpercapita_ay196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_az196
  r = spreadsheet.costpercapita_az196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073152,r[:number])
end

def test_costpercapita_ba196
  r = spreadsheet.costpercapita_ba196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.76106396694557,r[:number])
end

def test_costpercapita_bb196
  r = spreadsheet.costpercapita_bb196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.567982903652108,r[:number])
end

def test_costpercapita_bc196
  r = spreadsheet.costpercapita_bc196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.399063291549347,r[:number])
end

def test_costpercapita_bd196
  r = spreadsheet.costpercapita_bd196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.2520697171354844,r[:number])
end

def test_costpercapita_be196
  r = spreadsheet.costpercapita_be196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.1755038987185036,r[:number])
end

def test_costpercapita_bf196
  r = spreadsheet.costpercapita_bf196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.0507415172119647,r[:number])
end

def test_costpercapita_bg196
  r = spreadsheet.costpercapita_bg196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9358867238672466,r[:number])
end

def test_costpercapita_bi196
  r = spreadsheet.costpercapita_bi196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bj196
  r = spreadsheet.costpercapita_bj196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.6506149814073152,r[:number])
end

def test_costpercapita_bk196
  r = spreadsheet.costpercapita_bk196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.357640866761144,r[:number])
end

def test_costpercapita_bl196
  r = spreadsheet.costpercapita_bl196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.759732592706198,r[:number])
end

def test_costpercapita_bm196
  r = spreadsheet.costpercapita_bm196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.414605455483043,r[:number])
end

def test_costpercapita_bn196
  r = spreadsheet.costpercapita_bn196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.959820610581916,r[:number])
end

def test_costpercapita_bo196
  r = spreadsheet.costpercapita_bo196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.60643252102849,r[:number])
end

def test_costpercapita_bp196
  r = spreadsheet.costpercapita_bp196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.28212696563229,r[:number])
end

def test_costpercapita_bq196
  r = spreadsheet.costpercapita_bq196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.983777003909681,r[:number])
end

def test_costpercapita_bs196
  r = spreadsheet.costpercapita_bs196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_bt196
  r = spreadsheet.costpercapita_bt196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1.7259432341046415,r[:number])
end

def test_costpercapita_bu196
  r = spreadsheet.costpercapita_bu196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.5292825761265405,r[:number])
end

def test_costpercapita_bv196
  r = spreadsheet.costpercapita_bv196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8.92256276256016,r[:number])
end

def test_costpercapita_bw196
  r = spreadsheet.costpercapita_bw196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.569726729338036,r[:number])
end

def test_costpercapita_bx196
  r = spreadsheet.costpercapita_bx196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(10.108233615553457,r[:number])
end

def test_costpercapita_by196
  r = spreadsheet.costpercapita_by196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.75135133178596,r[:number])
end

def test_costpercapita_bz196
  r = spreadsheet.costpercapita_bz196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.421352060830952,r[:number])
end

def test_costpercapita_ca196
  r = spreadsheet.costpercapita_ca196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.117760530969178,r[:number])
end

def test_costpercapita_cc196
  r = spreadsheet.costpercapita_cc196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7.238468093474326,r[:number])
end

def test_costpercapita_cd196
  r = spreadsheet.costpercapita_cd196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(145.37433426563217,r[:number])
end

def test_costpercapita_cf196
  r = spreadsheet.costpercapita_cf196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_costpercapita_cg196
  r = spreadsheet.costpercapita_cg196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.8603267751702336,r[:number])
end

def test_costpercapita_ch196
  r = spreadsheet.costpercapita_ch196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-0.3637494454187651,r[:number])
end

def test_costpercapita_ci196
  r = spreadsheet.costpercapita_ci196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.332060264240815,r[:number])
end

def test_costpercapita_cj196
  r = spreadsheet.costpercapita_cj196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.243896326983336,r[:number])
end

def test_costpercapita_ck196
  r = spreadsheet.costpercapita_ck196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5.012720444863866,r[:number])
end

def test_costpercapita_cl196
  r = spreadsheet.costpercapita_cl196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.775805495779464,r[:number])
end

def test_costpercapita_cm196
  r = spreadsheet.costpercapita_cm196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.641290459010288,r[:number])
end

def test_costpercapita_cn196
  r = spreadsheet.costpercapita_cn196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4.517659435259787,r[:number])
end

def test_costpercapita_cp196
  r = spreadsheet.costpercapita_cp196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2.9221506895053952,r[:number])
end

def test_costpercapita_cq196
  r = spreadsheet.costpercapita_cq196
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(50.443634468810856,r[:number])
end

def test_costpercapita_cr196
  r = spreadsheet.costpercapita_cr196
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_c197
  r = spreadsheet.costpercapita_c197
  assert_equal(:ExcelString,r[:type])
  assert_equal("Total",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e197
  r = spreadsheet.costpercapita_e197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1884.0073021809899,r[:number])
end

def test_costpercapita_f197
  r = spreadsheet.costpercapita_f197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1900.5904930404597,r[:number])
end

def test_costpercapita_g197
  r = spreadsheet.costpercapita_g197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2024.3852872293344,r[:number])
end

def test_costpercapita_h197
  r = spreadsheet.costpercapita_h197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2192.9326449903974,r[:number])
end

def test_costpercapita_i197
  r = spreadsheet.costpercapita_i197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2249.6350703489766,r[:number])
end

def test_costpercapita_j197
  r = spreadsheet.costpercapita_j197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2398.6536984245668,r[:number])
end

def test_costpercapita_k197
  r = spreadsheet.costpercapita_k197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2595.4545071289626,r[:number])
end

def test_costpercapita_l197
  r = spreadsheet.costpercapita_l197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2714.9153202561097,r[:number])
end

def test_costpercapita_m197
  r = spreadsheet.costpercapita_m197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2857.0357462350785,r[:number])
end

def test_costpercapita_o197
  r = spreadsheet.costpercapita_o197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1596.711723873901,r[:number])
end

def test_costpercapita_p197
  r = spreadsheet.costpercapita_p197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1591.0558005404912,r[:number])
end

def test_costpercapita_q197
  r = spreadsheet.costpercapita_q197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1629.947980328765,r[:number])
end

def test_costpercapita_r197
  r = spreadsheet.costpercapita_r197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1686.2939023914332,r[:number])
end

def test_costpercapita_s197
  r = spreadsheet.costpercapita_s197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1726.6844357674029,r[:number])
end

def test_costpercapita_t197
  r = spreadsheet.costpercapita_t197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1770.404146877731,r[:number])
end

def test_costpercapita_u197
  r = spreadsheet.costpercapita_u197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1812.5381715311175,r[:number])
end

def test_costpercapita_v197
  r = spreadsheet.costpercapita_v197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1853.7408522113153,r[:number])
end

def test_costpercapita_w197
  r = spreadsheet.costpercapita_w197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1904.5710059655617,r[:number])
end

def test_costpercapita_y197
  r = spreadsheet.costpercapita_y197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(753.9025989077694,r[:number])
end

def test_costpercapita_z197
  r = spreadsheet.costpercapita_z197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(935.0570992031645,r[:number])
end

def test_costpercapita_aa197
  r = spreadsheet.costpercapita_aa197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1135.714924516248,r[:number])
end

def test_costpercapita_ab197
  r = spreadsheet.costpercapita_ab197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1337.0564560697937,r[:number])
end

def test_costpercapita_ac197
  r = spreadsheet.costpercapita_ac197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1549.1172147589427,r[:number])
end

def test_costpercapita_ad197
  r = spreadsheet.costpercapita_ad197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1597.4578796151886,r[:number])
end

def test_costpercapita_ae197
  r = spreadsheet.costpercapita_ae197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1634.0531753000184,r[:number])
end

def test_costpercapita_af197
  r = spreadsheet.costpercapita_af197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1676.1952247683216,r[:number])
end

def test_costpercapita_ag197
  r = spreadsheet.costpercapita_ag197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1703.5318268144608,r[:number])
end

def test_costpercapita_ai197
  r = spreadsheet.costpercapita_ai197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4234.6216249626605,r[:number])
end

def test_costpercapita_aj197
  r = spreadsheet.costpercapita_aj197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4426.703392784116,r[:number])
end

def test_costpercapita_ak197
  r = spreadsheet.costpercapita_ak197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4790.048192074347,r[:number])
end

def test_costpercapita_al197
  r = spreadsheet.costpercapita_al197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5216.283003451624,r[:number])
end

def test_costpercapita_am197
  r = spreadsheet.costpercapita_am197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5525.436720875322,r[:number])
end

def test_costpercapita_an197
  r = spreadsheet.costpercapita_an197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5766.515724917486,r[:number])
end

def test_costpercapita_ao197
  r = spreadsheet.costpercapita_ao197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6042.045853960099,r[:number])
end

def test_costpercapita_ap197
  r = spreadsheet.costpercapita_ap197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6244.851397235747,r[:number])
end

def test_costpercapita_aq197
  r = spreadsheet.costpercapita_aq197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6465.138579015102,r[:number])
end

def test_costpercapita_as197
  r = spreadsheet.costpercapita_as197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5412.404943252945,r[:number])
end

def test_costpercapita_at197
  r = spreadsheet.costpercapita_at197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(110430.93455464374,r[:number])
end

def test_costpercapita_ay197
  r = spreadsheet.costpercapita_ay197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743.0926671033703,r[:number])
end

def test_costpercapita_az197
  r = spreadsheet.costpercapita_az197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1249.3890521813103,r[:number])
end

def test_costpercapita_ba197
  r = spreadsheet.costpercapita_ba197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1330.767897936342,r[:number])
end

def test_costpercapita_bb197
  r = spreadsheet.costpercapita_bb197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1441.5656864825125,r[:number])
end

def test_costpercapita_bc197
  r = spreadsheet.costpercapita_bc197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1478.8400965853455,r[:number])
end

def test_costpercapita_bd197
  r = spreadsheet.costpercapita_bd197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1576.800305883708,r[:number])
end

def test_costpercapita_be197
  r = spreadsheet.costpercapita_be197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1706.1710339579881,r[:number])
end

def test_costpercapita_bf197
  r = spreadsheet.costpercapita_bf197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1784.7008554173012,r[:number])
end

def test_costpercapita_bg197
  r = spreadsheet.costpercapita_bg197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1878.1264012987879,r[:number])
end

def test_costpercapita_bi197
  r = spreadsheet.costpercapita_bi197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(743.0926671033703,r[:number])
end

def test_costpercapita_bj197
  r = spreadsheet.costpercapita_bj197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1967.9781871270036,r[:number])
end

def test_costpercapita_bk197
  r = spreadsheet.costpercapita_bk197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3234.318119096342,r[:number])
end

def test_costpercapita_bl197
  r = spreadsheet.costpercapita_bl197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3902.195814570848,r[:number])
end

def test_costpercapita_bm197
  r = spreadsheet.costpercapita_bm197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4135.353637158789,r[:number])
end

def test_costpercapita_bn197
  r = spreadsheet.costpercapita_bn197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4389.957816114141,r[:number])
end

def test_costpercapita_bo197
  r = spreadsheet.costpercapita_bo197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4662.553468415522,r[:number])
end

def test_costpercapita_bp197
  r = spreadsheet.costpercapita_bp197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4969.227073527287,r[:number])
end

def test_costpercapita_bq197
  r = spreadsheet.costpercapita_bq197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5270.453135494783,r[:number])
end

def test_costpercapita_bs197
  r = spreadsheet.costpercapita_bs197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3093.7069898850405,r[:number])
end

def test_costpercapita_bt197
  r = spreadsheet.costpercapita_bt197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(4494.09108687066,r[:number])
end

def test_costpercapita_bu197
  r = spreadsheet.costpercapita_bu197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(5999.981023941355,r[:number])
end

def test_costpercapita_bv197
  r = spreadsheet.costpercapita_bv197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6925.546173032074,r[:number])
end

def test_costpercapita_bw197
  r = spreadsheet.costpercapita_bw197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7411.155287685133,r[:number])
end

def test_costpercapita_bx197
  r = spreadsheet.costpercapita_bx197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(7757.819842607059,r[:number])
end

def test_costpercapita_by197
  r = spreadsheet.costpercapita_by197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8109.144815246659,r[:number])
end

def test_costpercapita_bz197
  r = spreadsheet.costpercapita_bz197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8499.163150506924,r[:number])
end

def test_costpercapita_ca197
  r = spreadsheet.costpercapita_ca197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(8878.555968274808,r[:number])
end

def test_costpercapita_cc197
  r = spreadsheet.costpercapita_cc197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(6796.573815338857,r[:number])
end

def test_costpercapita_cd197
  r = spreadsheet.costpercapita_cd197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(138260.63986543508,r[:number])
end

def test_costpercapita_cf197
  r = spreadsheet.costpercapita_cf197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1140.9146350776193,r[:number])
end

def test_costpercapita_cg197
  r = spreadsheet.costpercapita_cg197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(67.38769408654424,r[:number])
end

def test_costpercapita_ch197
  r = spreadsheet.costpercapita_ch197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1209.9328318670073,r[:number])
end

def test_costpercapita_ci197
  r = spreadsheet.costpercapita_ci197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1709.2631695804503,r[:number])
end

def test_costpercapita_cj197
  r = spreadsheet.costpercapita_cj197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1885.7185668098114,r[:number])
end

def test_costpercapita_ck197
  r = spreadsheet.costpercapita_ck197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1991.3041176895736,r[:number])
end

def test_costpercapita_cl197
  r = spreadsheet.costpercapita_cl197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2067.0989612865596,r[:number])
end

def test_costpercapita_cm197
  r = spreadsheet.costpercapita_cm197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2254.3117532711767,r[:number])
end

def test_costpercapita_cn197
  r = spreadsheet.costpercapita_cn197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2413.4173892597046,r[:number])
end

def test_costpercapita_cp197
  r = spreadsheet.costpercapita_cp197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(1384.168872085912,r[:number])
end

def test_costpercapita_cq197
  r = spreadsheet.costpercapita_cq197
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(27829.70531079134,r[:number])
end

def test_costpercapita_cr197
  r = spreadsheet.costpercapita_cr197
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_e198
  r = spreadsheet.costpercapita_e198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_f198
  r = spreadsheet.costpercapita_f198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_g198
  r = spreadsheet.costpercapita_g198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_h198
  r = spreadsheet.costpercapita_h198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_i198
  r = spreadsheet.costpercapita_i198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_j198
  r = spreadsheet.costpercapita_j198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_k198
  r = spreadsheet.costpercapita_k198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_l198
  r = spreadsheet.costpercapita_l198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_m198
  r = spreadsheet.costpercapita_m198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_o198
  r = spreadsheet.costpercapita_o198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_p198
  r = spreadsheet.costpercapita_p198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_q198
  r = spreadsheet.costpercapita_q198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.2737367544323206e-13,r[:number])
end

def test_costpercapita_r198
  r = spreadsheet.costpercapita_r198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_s198
  r = spreadsheet.costpercapita_s198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_t198
  r = spreadsheet.costpercapita_t198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_u198
  r = spreadsheet.costpercapita_u198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_v198
  r = spreadsheet.costpercapita_v198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_w198
  r = spreadsheet.costpercapita_w198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_y198
  r = spreadsheet.costpercapita_y198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_z198
  r = spreadsheet.costpercapita_z198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aa198
  r = spreadsheet.costpercapita_aa198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ab198
  r = spreadsheet.costpercapita_ab198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ac198
  r = spreadsheet.costpercapita_ac198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ad198
  r = spreadsheet.costpercapita_ad198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ae198
  r = spreadsheet.costpercapita_ae198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_af198
  r = spreadsheet.costpercapita_af198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ag198
  r = spreadsheet.costpercapita_ag198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ai198
  r = spreadsheet.costpercapita_ai198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aj198
  r = spreadsheet.costpercapita_aj198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(9.094947017729282e-13,r[:number])
end

def test_costpercapita_ak198
  r = spreadsheet.costpercapita_ak198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_al198
  r = spreadsheet.costpercapita_al198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_am198
  r = spreadsheet.costpercapita_am198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_an198
  r = spreadsheet.costpercapita_an198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ao198
  r = spreadsheet.costpercapita_ao198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ap198
  r = spreadsheet.costpercapita_ap198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_aq198
  r = spreadsheet.costpercapita_aq198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_as198
  r = spreadsheet.costpercapita_as198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_at198
  r = spreadsheet.costpercapita_at198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ay198
  r = spreadsheet.costpercapita_ay198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_az198
  r = spreadsheet.costpercapita_az198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ba198
  r = spreadsheet.costpercapita_ba198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bb198
  r = spreadsheet.costpercapita_bb198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bc198
  r = spreadsheet.costpercapita_bc198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bd198
  r = spreadsheet.costpercapita_bd198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_be198
  r = spreadsheet.costpercapita_be198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bf198
  r = spreadsheet.costpercapita_bf198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bg198
  r = spreadsheet.costpercapita_bg198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bi198
  r = spreadsheet.costpercapita_bi198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bj198
  r = spreadsheet.costpercapita_bj198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bk198
  r = spreadsheet.costpercapita_bk198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bl198
  r = spreadsheet.costpercapita_bl198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bm198
  r = spreadsheet.costpercapita_bm198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bn198
  r = spreadsheet.costpercapita_bn198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bo198
  r = spreadsheet.costpercapita_bo198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bp198
  r = spreadsheet.costpercapita_bp198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bq198
  r = spreadsheet.costpercapita_bq198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bs198
  r = spreadsheet.costpercapita_bs198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bt198
  r = spreadsheet.costpercapita_bt198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bu198
  r = spreadsheet.costpercapita_bu198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bv198
  r = spreadsheet.costpercapita_bv198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bw198
  r = spreadsheet.costpercapita_bw198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bx198
  r = spreadsheet.costpercapita_bx198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_by198
  r = spreadsheet.costpercapita_by198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_bz198
  r = spreadsheet.costpercapita_bz198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ca198
  r = spreadsheet.costpercapita_ca198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cc198
  r = spreadsheet.costpercapita_cc198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cd198
  r = spreadsheet.costpercapita_cd198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cf198
  r = spreadsheet.costpercapita_cf198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cg198
  r = spreadsheet.costpercapita_cg198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(3.410605131648481e-13,r[:number])
end

def test_costpercapita_ch198
  r = spreadsheet.costpercapita_ch198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ci198
  r = spreadsheet.costpercapita_ci198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cj198
  r = spreadsheet.costpercapita_cj198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_ck198
  r = spreadsheet.costpercapita_ck198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-2.0463630789890885e-12,r[:number])
end

def test_costpercapita_cl198
  r = spreadsheet.costpercapita_cl198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cm198
  r = spreadsheet.costpercapita_cm198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cn198
  r = spreadsheet.costpercapita_cn198
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(-1.3642420526593924e-12,r[:number])
end

def test_costpercapita_cp198
  r = spreadsheet.costpercapita_cp198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end

def test_costpercapita_cq198
  r = spreadsheet.costpercapita_cq198
  assert_equal(:ExcelString,r[:type])
  assert_equal("ok",r[:string].force_encoding('utf-8'))
end


  # start of CostAbsolute

  # start of AQ Outputs
def test_aq_outputs_b2
  r = spreadsheet.aq_outputs_b2
  assert_equal(:ExcelString,r[:type])
  assert_equal("YOUR CHOICE",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_d3
  r = spreadsheet.aq_outputs_d3
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(2010.0,r[:number])
end

def test_aq_outputs_e3
  r = spreadsheet.aq_outputs_e3
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 - All Level 1",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_f3
  r = spreadsheet.aq_outputs_f3
  assert_equal(:ExcelString,r[:type])
  assert_equal("2050 - YOUR CHOICE",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_c4
  r = spreadsheet.aq_outputs_c4
  assert_equal(:ExcelString,r[:type])
  assert_equal("Emissions in 2010",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_d4
  r = spreadsheet.aq_outputs_d4
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(100.0,r[:number])
end

def test_aq_outputs_c5
  r = spreadsheet.aq_outputs_c5
  assert_equal(:ExcelString,r[:type])
  assert_equal("Low innovation",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_e5
  r = spreadsheet.aq_outputs_e5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.60989776029993,r[:number])
end

def test_aq_outputs_f5
  r = spreadsheet.aq_outputs_f5
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(75.60989776029993,r[:number])
end

def test_aq_outputs_c6
  r = spreadsheet.aq_outputs_c6
  assert_equal(:ExcelString,r[:type])
  assert_equal("High innovation",r[:string].force_encoding('utf-8'))
end

def test_aq_outputs_e6
  r = spreadsheet.aq_outputs_e6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.343362883836775,r[:number])
end

def test_aq_outputs_f6
  r = spreadsheet.aq_outputs_f6
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(29.343362883836775,r[:number])
end


  # start of AQImpactHInv

  # start of AQImpactLInv

  # start of Other AQ Sources

  # start of Conversions

  # start of Global assumptions

  # start of Constants

  # start of Structure of the model

  # start of I.a

  # start of I.b

  # start of II.a

  # start of III.a.1

  # start of III.a.2

  # start of III.b

  # start of III.c

  # start of III.d

  # start of IV.a

  # start of IV.b

  # start of IV.c

  # start of V.a

  # start of V.b

  # start of VI.a

  # start of VI.b

  # start of VI.c

  # start of VII.a

  # start of VII.b

  # start of VII.c

  # start of VIII.a

  # start of IX.a
def test_ix_a_f595
  r = spreadsheet.ix_a_f595
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f596
  r = spreadsheet.ix_a_f596
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9,r[:number])
end

def test_ix_a_f597
  r = spreadsheet.ix_a_f597
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1,r[:number])
end

def test_ix_a_f598
  r = spreadsheet.ix_a_f598
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f599
  r = spreadsheet.ix_a_f599
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f600
  r = spreadsheet.ix_a_f600
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f601
  r = spreadsheet.ix_a_f601
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f602
  r = spreadsheet.ix_a_f602
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f603
  r = spreadsheet.ix_a_f603
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f604
  r = spreadsheet.ix_a_f604
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f605
  r = spreadsheet.ix_a_f605
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f606
  r = spreadsheet.ix_a_f606
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_a_f607
  r = spreadsheet.ix_a_f607
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end


  # start of IX.c
def test_ix_c_n317
  r = spreadsheet.ix_c_n317
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n318
  r = spreadsheet.ix_c_n318
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.9,r[:number])
end

def test_ix_c_n319
  r = spreadsheet.ix_c_n319
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.1,r[:number])
end

def test_ix_c_n320
  r = spreadsheet.ix_c_n320
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n321
  r = spreadsheet.ix_c_n321
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n322
  r = spreadsheet.ix_c_n322
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n323
  r = spreadsheet.ix_c_n323
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n324
  r = spreadsheet.ix_c_n324
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n325
  r = spreadsheet.ix_c_n325
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n326
  r = spreadsheet.ix_c_n326
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n327
  r = spreadsheet.ix_c_n327
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n328
  r = spreadsheet.ix_c_n328
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end

def test_ix_c_n329
  r = spreadsheet.ix_c_n329
  assert_equal(:ExcelNumber,r[:type])
  assert_in_epsilon(0.0,r[:number])
end


  # start of X.a

  # start of X.b

  # start of XI.a

  # start of XII.a

  # start of XII.b

  # start of XII.c

  # start of XII.e

  # start of XIV.a

  # start of XV.a

  # start of XV.b

  # start of XVI.a

  # start of XVI.b

  # start of XVII.a

  # start of XVIII.a

  # start of 2007 (Actual, frozen)

  # start of 2007 (Consistent)

  # start of 2007

  # start of 2010

  # start of 2015

  # start of 2020

  # start of 2025

  # start of 2030

  # start of 2035

  # start of 2040

  # start of 2045

  # start of 2050

  # start of DUKES 09 (1.2)

  # start of DUKES 09 (1.9)

  # start of DUKES 09 (2.5)

  # start of DUKES 09 (5.1)

  # start of DUKES 09 (5.6)

  # start of DUKES 09 (7.2)

  # start of DUKES 09 (7.4)

  # start of DUKES 09 (A.1)

  # start of DECC Energy Cons. (1.14)

  # start of DECC Energy Cons. (4.1)
end
